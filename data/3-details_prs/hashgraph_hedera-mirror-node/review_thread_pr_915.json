{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTE3Nzk5", "number": 915, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0Mzo1NVrOETUHPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNDoxMVrOETaQJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njg3OTMzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0Mzo1NVrOG4-nyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNDo1NVrOG5Kdcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5OTQzNQ==", "bodyText": "Converting to long I think is no longer necessary if we don't need to calculate offsets from it. It would be more efficient to use the String filename like it did in the previous release.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462399435", "createdAt": "2020-07-29T15:43:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -223,15 +221,8 @@ protected void downloadNextBatch() {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n-                                        fileStreamSignature);\n-\n-                                if (groupTimestamp > 0) {\n-                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                } else {\n-                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n-                                            \"file: {}\", fileStreamSignature);\n-                                }\n+                                long timestamp = Utility.getTimestampFromFilename(sigFile.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzM5NQ==", "bodyText": "done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593395", "createdAt": "2020-07-29T21:14:55Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -223,15 +221,8 @@ protected void downloadNextBatch() {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n-                                        fileStreamSignature);\n-\n-                                if (groupTimestamp > 0) {\n-                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                } else {\n-                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n-                                            \"file: {}\", fileStreamSignature);\n-                                }\n+                                long timestamp = Utility.getTimestampFromFilename(sigFile.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5OTQzNQ=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njg5MjYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0Njo0OVrOG4-wEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNTowMlrOG5Kdww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMTU1NQ==", "bodyText": "This method's comment needs to be tweaked due to the changes", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462401555", "createdAt": "2020-07-29T15:46:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzQ3NQ==", "bodyText": "done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593475", "createdAt": "2020-07-29T21:15:02Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMTU1NQ=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkwMTAxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0ODo0N1rOG4-1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNTowOFrOG5KeAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjkxMA==", "bodyText": "We should add a test case that captures the scenario experienced with the demo bucket, if possible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462402910", "createdAt": "2020-07-29T15:48:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -322,25 +321,25 @@ void differentFilenamesSameInterval() throws Exception {\n     @Test\n     @DisplayName(\"Different filenames, same interval, lower bound\")\n     void differentFilenamesSameIntervalLower() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated());\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, same interval, upper bound\")\n     void differentFilenamesSameIntervalUpper() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+        differentFilenames(getCloseInterval().dividedBy(2L).minusNanos(1));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, previous interval\")\n     void differentFilenamesPreviousInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, next interval\")\n     void differentFilenamesNextInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+        differentFilenames(getCloseInterval().dividedBy(2L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzUzNw==", "bodyText": "added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593537", "createdAt": "2020-07-29T21:15:08Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -322,25 +321,25 @@ void differentFilenamesSameInterval() throws Exception {\n     @Test\n     @DisplayName(\"Different filenames, same interval, lower bound\")\n     void differentFilenamesSameIntervalLower() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated());\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, same interval, upper bound\")\n     void differentFilenamesSameIntervalUpper() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+        differentFilenames(getCloseInterval().dividedBy(2L).minusNanos(1));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, previous interval\")\n     void differentFilenamesPreviousInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, next interval\")\n     void differentFilenamesNextInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+        differentFilenames(getCloseInterval().dividedBy(2L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjkxMA=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkwOTIyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MDozNVrOG4-6dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNToxN1rOG5KeWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDIxNA==", "bodyText": "Can use nodeCount", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462404214", "createdAt": "2020-07-29T15:50:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -122,22 +96,22 @@ private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         for (String key : signatureHashMap.keySet()) {\n             Collection<FileStreamSignature> validatedSignatures = signatureHashMap.get(key);\n \n-            if (consensusReached(validatedSignatures.size(), nodeIDPubKeyMap.size())) {\n+            if (canReachConsensus(validatedSignatures.size(), nodeIDPubKeyMap.size())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MzYyNw==", "bodyText": "done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593627", "createdAt": "2020-07-29T21:15:17Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -122,22 +96,22 @@ private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         for (String key : signatureHashMap.keySet()) {\n             Collection<FileStreamSignature> validatedSignatures = signatureHashMap.get(key);\n \n-            if (consensusReached(validatedSignatures.size(), nodeIDPubKeyMap.size())) {\n+            if (canReachConsensus(validatedSignatures.size(), nodeIDPubKeyMap.size())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDIxNA=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk4NDMyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowNzo1N1rOG4_qEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNDo1NFrOG5IfGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw==", "bodyText": "This still is not quite correct. It could potentially discard valid files just because one node is really quick at uploading. For a better fix, we should only skip file once next batch has reached consensus. Currently it skips file when at least one file is in next batch. This may require separating signature verification loop from signed file download/verification loop.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462416403", "createdAt": "2020-07-29T16:07:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2Mjc5NQ==", "bodyText": "no it will not. in case < 1/3 nodes are quick at uploading, from one point on, all sig files from those nodes will fail verification since consensus can't be reached. in the next batch of downloaded signature files, if some nodes catch up to satisfy the 1/3 consensus requirement, the previously skipped groups will get successfully verified.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462462795", "createdAt": "2020-07-29T17:22:40Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MTA0OA==", "bodyText": "Talked it over offline and agreed current solution looks good.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462561048", "createdAt": "2020-07-29T20:14:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzAyNzY0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxODoxMlrOG5AFFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNjowMVrOG5KfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzMxNw==", "bodyText": "nit: signatures.stream().map(FileStreamSignature::getFile).map(File::getName).findFirst().orElse(null);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462423317", "createdAt": "2020-07-29T16:18:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n-        Multimap<String, FileStreamSignature> signaturesByName = TreeMultimap.create();\n-        signatures.forEach(s -> signaturesByName.put(s.getFile().getName(), s));\n-        Collection<String> filenames = signaturesByName.keySet();\n-\n-        if (filenames.size() > 1) {\n-            log.warn(\"Found {} unique filenames for stream interval: {}\", filenames.size(), signatures);\n-        }\n-\n-        for (String filename : filenames) {\n-            if (verifyFileGroup(signaturesByName.get(filename))) {\n-                return;\n-            }\n-        }\n-\n-        throw new SignatureVerificationException(\"Signature verification failed for files \" + filenames + \": \" + statusMap(signatures));\n-    }\n-\n-    /**\n-     * Since balance files can occasionally generate a file with a different timestamp from different nodes or a rogue\n-     * node can send a bad filename, we group files into time buckets then within that bucket check if a particular\n-     * filename reaches consensus.\n-     *\n-     * @param signatures grouped by filename\n-     * @return whether this file was verified\n-     * @throws SignatureVerificationException\n-     */\n-    private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = null;\n+        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5Mzk5Mw==", "bodyText": "done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462593993", "createdAt": "2020-07-29T21:16:01Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n-        Multimap<String, FileStreamSignature> signaturesByName = TreeMultimap.create();\n-        signatures.forEach(s -> signaturesByName.put(s.getFile().getName(), s));\n-        Collection<String> filenames = signaturesByName.keySet();\n-\n-        if (filenames.size() > 1) {\n-            log.warn(\"Found {} unique filenames for stream interval: {}\", filenames.size(), signatures);\n-        }\n-\n-        for (String filename : filenames) {\n-            if (verifyFileGroup(signaturesByName.get(filename))) {\n-                return;\n-            }\n-        }\n-\n-        throw new SignatureVerificationException(\"Signature verification failed for files \" + filenames + \": \" + statusMap(signatures));\n-    }\n-\n-    /**\n-     * Since balance files can occasionally generate a file with a different timestamp from different nodes or a rogue\n-     * node can send a bad filename, we group files into time buckets then within that bucket check if a particular\n-     * filename reaches consensus.\n-     *\n-     * @param signatures grouped by filename\n-     * @return whether this file was verified\n-     * @throws SignatureVerificationException\n-     */\n-    private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = null;\n+        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzMxNw=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzg4NTE3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNDoxMVrOG5Idpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMzo1N1rOG5KG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MDY3OQ==", "bodyText": "Please add the filename to the log. This log statement is the only indication that we might've skipped a non-consensus file. We should update to reflect that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462560679", "createdAt": "2020-07-29T20:14:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {\n+                    log.warn(\"Signature verification failed but still have files in the batch, try to process the next group\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NzY0MQ==", "bodyText": "The SignatureVerificationException's message has the filename, so I don't want to duplicate it here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462587641", "createdAt": "2020-07-29T21:03:57Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {\n+                    log.warn(\"Signature verification failed but still have files in the batch, try to process the next group\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MDY3OQ=="}, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}