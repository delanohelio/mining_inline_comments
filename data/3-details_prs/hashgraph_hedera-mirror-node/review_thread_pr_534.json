{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDk2NzU4", "number": 534, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDowMzo0OVrODfvWTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo1MlrODgycPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjA4MjA3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDowMzo0OVrOFpnxBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowNTo0NFrOFqAr5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ==", "bodyText": "did you want to add an else condition to capture any regressions or new conditions that don't satisfy the above if checks?\nYou can add a warning log to highlight it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379187461", "createdAt": "2020-02-14T00:03:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NDY3NQ==", "bodyText": "There's no harm at all if it's just a pass through (called with transaction types not supported), so I'd rather not add any logging.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379584675", "createdAt": "2020-02-14T18:40:01Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU4NTAzMA==", "bodyText": "Integration test cases ensure that those 4 types do in fact end up in this code when calling RecordFileLogger.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379585030", "createdAt": "2020-02-14T18:40:55Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTc1MA==", "bodyText": "Gotcha", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379595750", "createdAt": "2020-02-14T19:05:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcxOTMyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.18.0__non_fee_transfers.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxODo1N1rOFqBCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxOTowNzozNFrOFqQMdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTQ2Ng==", "bodyText": "Did we want an index with EntityNum and Amount?\nNot sure how much traffic we expect to see on the repository call for this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379601466", "createdAt": "2020-02-14T19:18:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.18.0__non_fee_transfers.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+-- No primary key.\n+-- Table is insert-only (not update), and there's no natural primary key so this is faster on insert and smaller\n+-- footprint.\n+create table non_fee_transfers\n+(\n+    consensus_timestamp nanos_timestamp  not null,\n+    realm_num           entity_realm_num not null,\n+    entity_num          entity_num       not null,\n+    amount              hbar_tinybars    not null\n+);\n+comment on table non_fee_transfers is\n+    'non-fee-related explicitly requested transfers for CryptoTransfer, CryptoCreate, ContractCreate, and ContractCall';\n+\n+create index if not exists idx__non_fee_transfers__cts on non_fee_transfers (consensus_timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0OTg0NQ==", "bodyText": "This index is the only one the rest-api will/would be using to get the data, so it's the smallest index necessary.\nThe repository is really only there right now for unit tests to check table row count (did the non_fee_transfers table get rows inserted), or if more unit tests are added to get all the values (by the consensus_timestamp index) to compare the actual/expected values.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379849845", "createdAt": "2020-02-15T19:07:34Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.18.0__non_fee_transfers.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+-- No primary key.\n+-- Table is insert-only (not update), and there's no natural primary key so this is faster on insert and smaller\n+-- footprint.\n+create table non_fee_transfers\n+(\n+    consensus_timestamp nanos_timestamp  not null,\n+    realm_num           entity_realm_num not null,\n+    entity_num          entity_num       not null,\n+    amount              hbar_tinybars    not null\n+);\n+comment on table non_fee_transfers is\n+    'non-fee-related explicitly requested transfers for CryptoTransfer, CryptoCreate, ContractCreate, and ContractCall';\n+\n+create index if not exists idx__non_fee_transfers__cts on non_fee_transfers (consensus_timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTQ2Ng=="}, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyODQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1NDoyM1rOFrKYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDozNDo1OFrOFrRfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng==", "bodyText": "Shouldn't we add an auto-generated primary key anyway like we need to add to do on t_cryptotransferlists to make it faster to replicate?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380803256", "createdAt": "2020-02-18T16:54:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Data\n+@Entity\n+@Table(name = \"non_fee_transfers\")\n+public class NonFeeTransfer {\n+    // There is not actually a pk on non_fee_transfers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NzgwMA==", "bodyText": "It's not clear if we're running into replication delay due to missing autoincrement/primary key on t_cryptotransferlists. (#525 (comment))\nI can add to this table if you want. It'll impact insert performance some amount, but it's unclear which performance tradeoff is more critical.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380857800", "createdAt": "2020-02-18T18:33:55Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Data\n+@Entity\n+@Table(name = \"non_fee_transfers\")\n+public class NonFeeTransfer {\n+    // There is not actually a pk on non_fee_transfers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng=="}, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxOTczNw==", "bodyText": "Let's just do when #525 is implemented", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380919737", "createdAt": "2020-02-18T20:34:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Data\n+@Entity\n+@Table(name = \"non_fee_transfers\")\n+public class NonFeeTransfer {\n+    // There is not actually a pk on non_fee_transfers.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng=="}, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA3NDU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo1MlrOFrLzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDozNToxMFrOFrRgBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw==", "bodyText": "Can these be consolidated into one now?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380826373", "createdAt": "2020-02-18T17:33:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "diffHunk": "@@ -28,4 +28,6 @@\n \n public interface CryptoTransferRepository extends CrudRepository<CryptoTransfer, Long> {\n     Optional<CryptoTransfer> findByConsensusTimestampAndEntityNum(Long consensusTimestamp, Long entityNum);\n+    Optional<CryptoTransfer> findByConsensusTimestampAndEntityNumAndAmount(Long consensusTimestamp, Long entityNum,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1OTQzMA==", "bodyText": "They're both used but I can make the update.\nThey also should both probably return lists instead of optional singles.\nChange is minor and there are only a few tests using these.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380859430", "createdAt": "2020-02-18T18:37:07Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "diffHunk": "@@ -28,4 +28,6 @@\n \n public interface CryptoTransferRepository extends CrudRepository<CryptoTransfer, Long> {\n     Optional<CryptoTransfer> findByConsensusTimestampAndEntityNum(Long consensusTimestamp, Long entityNum);\n+    Optional<CryptoTransfer> findByConsensusTimestampAndEntityNumAndAmount(Long consensusTimestamp, Long entityNum,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw=="}, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxOTgxMw==", "bodyText": "Not important right now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380919813", "createdAt": "2020-02-18T20:35:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "diffHunk": "@@ -28,4 +28,6 @@\n \n public interface CryptoTransferRepository extends CrudRepository<CryptoTransfer, Long> {\n     Optional<CryptoTransfer> findByConsensusTimestampAndEntityNum(Long consensusTimestamp, Long entityNum);\n+    Optional<CryptoTransfer> findByConsensusTimestampAndEntityNumAndAmount(Long consensusTimestamp, Long entityNum,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw=="}, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}