{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTM4NDc1", "number": 911, "title": "Fix memory leak and deadlock in record parser", "bodyText": "Detailed description:\n\nAdd missing bufferSize property\nChange batchSize to a more reasonable 20K (e.g. 10K TPS at 2s close interval)\nFix deadlock by reverting to non-concurrent insert\nFix large buffer allocation inside CopyManager due to passing batchSize=100M instead of bufferSize=65356\nFix not resetting batchCount and clearing domain object lists when inserting batch\n\nWhich issue(s) this PR fixes:\nFixes #910\nSpecial notes for your reviewer:\nConcurrent inserts with the same connection caused resource contention over the connection lock, eventually causing a deadlock. We can move to use separate connections for each insert, but if any one fails it would not roll back the others since JDBC/Hibernate/Spring doesn't support transactions that span connections. Implementing a manual rollback on the client side via delete queries would be brittle and error prone.\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-07-28T17:05:19Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/911", "merged": true, "mergeCommit": {"oid": "2f1bed930a614ed4339a80bb60b6d2d3acba3d0f"}, "closed": true, "closedAt": "2020-07-28T18:43:00Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5ZWQTAH2gAyNDU3OTM4NDc1OmRlZjA4NWMxOGNhMTgwYTNkNjY0OWZmYzhmNmVlNGU0OTA0ZTVmNTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5Z2UDgFqTQ1NjgzODk4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "def085c18ca180a3d6649ffc8f6ee4e4904e5f53", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/def085c18ca180a3d6649ffc8f6ee4e4904e5f53", "committedDate": "2020-07-28T16:51:42Z", "message": "Fix memory leak and deadlock in record parser\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODM4OTgw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/911#pullrequestreview-456838980", "createdAt": "2020-07-28T17:08:57Z", "commit": {"oid": "def085c18ca180a3d6649ffc8f6ee4e4904e5f53"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzowODo1N1rOG4WSXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyNDozNVrOG4W3aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczODU5MA==", "bodyText": "nit: 65536 seems random. Add to the configuration comment to hint it's value.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/911#discussion_r461738590", "createdAt": "2020-07-28T17:08:57Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -78,9 +78,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.parser.record.entity.persist.nonFeeTransfers`       | false                   | Persist non-fee transfers for transactions that explicitly request hbar transfers              |\n | `hedera.mirror.importer.parser.record.entity.persist.systemFiles`           | true                    | Persist only system files (number lower than `1000`) to the database                           |\n | `hedera.mirror.importer.parser.record.entity.persist.transactionBytes`      | false                   | Persist raw transaction bytes to the database                                                  |\n-| `hedera.mirror.importer.parser.record.entity.sql.batchSize`                 | 100_000_000             | When inserting transactions into db, executeBatches() is called every these many transactions  |\n+| `hedera.mirror.importer.parser.record.entity.sql.batchSize`                 | 20_000                  | When inserting transactions into db, executeBatches() is called every these many transactions  |\n+| `hedera.mirror.importer.parser.record.entity.sql.bufferSize`                | 65536                   | The size of the byte buffer to allocate for each batch                                         |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def085c18ca180a3d6649ffc8f6ee4e4904e5f53"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0ODA3NQ==", "bodyText": "q: Probably outside of the scope of this PR but should this check be here. Would it be better in RecordFileParser before onStart is called?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/911#discussion_r461748075", "createdAt": "2020-07-28T17:24:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -148,17 +120,27 @@ public void onStart(StreamFileData streamFileData) {\n         liveHashes = new ArrayList<>();\n         entityIds = new HashSet<>();\n         topicMessages = new ArrayList<>();\n-        batchCount = 0;\n+    }\n+\n+    @Override\n+    public void onStart(StreamFileData streamFileData) {\n+        String fileName = FilenameUtils.getName(streamFileData.getFilename());\n+\n+        if (recordFileRepository.findByName(fileName).size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def085c18ca180a3d6649ffc8f6ee4e4904e5f53"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3019, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}