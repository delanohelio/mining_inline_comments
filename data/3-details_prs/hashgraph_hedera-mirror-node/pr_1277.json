{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTQ5NDI1", "number": 1277, "title": "gRPC service performance optimization", "bodyText": "Detailed description:\n\nRemove timeout mechanism with fail-fast on backpressure buffer overflow\nMove publishOn from before backpressure buffer to after Flux.merge, ~40% lower CPU usage in high-concurrency high-tps scenario\nReduce flux operation chaining depth when possible\nMake prefetch for Flux.merge and publishOn configurable and set default to 48 based on benchmark result\nFix issue that TopicMessage.toResponse does not properly cache the protobuf response\nIncrease grpc container cpu and memory limit\nUpdate integration test\nUpdate configuration.md\n\nWhich issue(s) this PR fixes:\nFixes #1227\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-11-17T16:42:53Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277", "merged": true, "mergeCommit": {"oid": "3b33d6c97bd14f7e0d15d95bf9c9bb0b779531ec"}, "closed": true, "closedAt": "2020-11-19T19:52:16Z", "author": {"login": "xin-hedera"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbfgr8gH2gAyNTIyNTQ5NDI1OjZhZTg4MzdjNmM3YTIxZDE0ZjY5YTExYzZlYWFkYTA3Njc1MTU4OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeHSuUgFqTUzNDc0NTk4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ae8837c6c7a21d14f69a11c6eaada076751588d", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ae8837c6c7a21d14f69a11c6eaada076751588d", "committedDate": "2020-11-11T15:15:57Z", "message": "new timeout mechanism\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6ba65755aeb2bd746e068d8f93e18fcc8947f2", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/be6ba65755aeb2bd746e068d8f93e18fcc8947f2", "committedDate": "2020-11-13T15:18:43Z", "message": "reduce the number of chained flux operations, optimize filters\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af319dcb4e68d19aa3e32fa866d84d012ce992a1", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/af319dcb4e68d19aa3e32fa866d84d012ce992a1", "committedDate": "2020-11-13T17:22:01Z", "message": "revert TopicMessage back to use AtomicReference, fix integration test case\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0dade1547d44a6820f5fc998b3278c7d5f9d803", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f0dade1547d44a6820f5fc998b3278c7d5f9d803", "committedDate": "2020-11-17T16:26:10Z", "message": "clean up and fix integration test failures\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "086e036aa6ffd37474ed063fb23032d8f6aa308f", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/086e036aa6ffd37474ed063fb23032d8f6aa308f", "committedDate": "2020-11-17T16:27:36Z", "message": "increase grpc container cpu and memory limits\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae24d1350cee7dac7490ea507b34c92dc649b0eb", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae24d1350cee7dac7490ea507b34c92dc649b0eb", "committedDate": "2020-11-17T16:28:16Z", "message": "Merge branch 'master' into grpc-timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5dc58cf600420ccbc36cf69a5ebd6d5b85218e32", "committedDate": "2020-11-17T16:51:24Z", "message": "sonacloud says code smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b36e2afb86dc469a81a61667b1f32bbc6dae31fe", "committedDate": "2020-11-17T17:18:31Z", "message": "fix test failure\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNjI4MTI5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-532628129", "createdAt": "2020-11-17T17:42:29Z", "commit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo0MjoyOVrOH1BURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo0MjoyOVrOH1BURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1ODE1MA==", "bodyText": "nit: You've noted before that the flux operation chaining can be unclear and is also the locations where most optimizations happen.\nMight be useful to add some comments overall on the topicMessageFlux to help manage the overhead costs in the future.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525358150", "createdAt": "2020-11-17T17:42:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzgxMTM2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-532781136", "createdAt": "2020-11-17T20:24:44Z", "commit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTg3NDI2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-532587426", "createdAt": "2020-11-17T17:00:40Z", "commit": {"oid": "ae24d1350cee7dac7490ea507b34c92dc649b0eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowMDo0MFrOH0_Y1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1NzoxNVrOH1LKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNjU0OQ==", "bodyText": "Fix issue that TopicMessage.toResponse does not properly cache the protobuf response\n\nBoth the old and new approach properly cache the response. Both the old and the new approach can potentially call consensusTopicResponseBuilder.build() multiple times for the same object. Only difference is that now only one thread will win the transition from null to populated. I don't think that really buys us anything as it's still doing the same amount of work.\nWe should consider switching to @Getter(lazy=true) as it uses double checked locking and may be more what you're looking for while at the same time being cleaner than using AtomicReference.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525326549", "createdAt": "2020-11-17T17:00:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -110,7 +110,11 @@\n \n     // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     public ConsensusTopicResponse toResponse() {\n-        if (response.get() == null) {\n+        return response.updateAndGet(response -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae24d1350cee7dac7490ea507b34c92dc649b0eb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyOTI5NA==", "bodyText": "unknownError() can probably be subsumed into this method and its instanceof check removed since that was only needed due to the semantics of the generic onErrorMap().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525329294", "createdAt": "2020-11-17T17:04:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof IllegalArgumentException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof NonTransientDataAccessResourceException) {\n+            return error(t, Status.UNAVAILABLE, DB_ERROR);\n+        } else if (t instanceof TimeoutException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (t instanceof TopicNotFoundException) {\n+            return error(t, Status.NOT_FOUND);\n+        } else if (t instanceof TransientDataAccessException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (Exceptions.isOverflow(t)) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        } else if (t instanceof ClientTimeoutException) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        }\n+\n+        return unknownError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae24d1350cee7dac7490ea507b34c92dc649b0eb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNzM0Mw==", "bodyText": "Should probably take advantage of the new format and combine these two since they return the same value. Same for deadline exceeded below.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525337343", "createdAt": "2020-11-17T17:12:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof IllegalArgumentException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODM5Mg==", "bodyText": "Please update the docs with any changes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525338392", "createdAt": "2020-11-17T17:13:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "diffHunk": "@@ -35,24 +35,28 @@\n @ConfigurationProperties(\"hedera.mirror.grpc.listener\")\n public class ListenerProperties {\n \n-    private boolean enabled = true;\n+    @DurationMin(seconds = 2)\n+    @DurationMax(seconds = 10)\n+    @NotNull\n+    private Duration bufferTimeout = Duration.ofSeconds(4);\n \n-    @Min(32)\n-    private int maxPageSize = 5000;\n+    private boolean enabled = true;\n \n     @Min(8192)\n     @Max(65536)\n     private int maxBufferSize = 16384;\n \n-    @DurationMin(seconds = 2)\n-    @DurationMax(seconds = 10)\n-    @NotNull\n-    private Duration bufferTimeout = Duration.ofSeconds(4);\n+    @Min(32)\n+    private int maxPageSize = 5000;\n \n     @DurationMin(millis = 50)\n     @NotNull\n     private Duration frequency = Duration.ofMillis(500L);\n \n+    @Min(1)\n+    @Max(256)\n+    private int prefetch = 48;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dc58cf600420ccbc36cf69a5ebd6d5b85218e32"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NDU5MA==", "bodyText": "While this provides a more accurate sampling, this might be slow to generate. Have you timed this change?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525344590", "createdAt": "2020-11-17T17:22:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/generator/CompositeTransactionGeneratorTest.java", "diffHunk": "@@ -69,7 +69,7 @@ void distribution() {\n                 .containsExactly(0.75, 0.25);\n \n         Multiset<TransactionType> types = HashMultiset.create();\n-        for (int i = 0; i < 100; ++i) {\n+        for (int i = 0; i < 10000; ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM1MDI5NQ==", "bodyText": "Replace the 3 calls with doFinally().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525350295", "createdAt": "2020-11-17T17:30:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .doOnCancel(timeoutContext::onComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNzI1NQ==", "bodyText": "This is quite a complicated solution for not much gain in functionality. Why do we even care about letting them consume the buffer after they overflow? There's no recovery logic here so we should just fail fast and let the client retry.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525517255", "createdAt": "2020-11-17T20:53:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .doOnCancel(timeoutContext::onComplete)\n+                .doOnError(t -> timeoutContext.onComplete())\n+                .doOnComplete(timeoutContext::onComplete);\n+        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxOTUxOA==", "bodyText": "Assuming we keep the timeout logic, have you considered using onBackpressureBuffer(int maxSize, Consumer<?> onOverflow) and use the consumer to trigger the wait before error?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r525519518", "createdAt": "2020-11-17T20:57:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +48,71 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n+                .doOnCancel(timeoutContext::onCancel)\n                 .onBackpressureBuffer(listenerProperties.getMaxBufferSize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36e2afb86dc469a81a61667b1f32bbc6dae31fe"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dbf35252202021577f574f7ce5cf5e8dfc32875", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1dbf35252202021577f574f7ce5cf5e8dfc32875", "committedDate": "2020-11-18T23:07:41Z", "message": "address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac8c71b47cb5a04315d85c743e0b5fd11e976fda", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac8c71b47cb5a04315d85c743e0b5fd11e976fda", "committedDate": "2020-11-19T15:59:06Z", "message": "clean up\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NTkzOTE4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-534593918", "createdAt": "2020-11-19T15:57:25Z", "commit": {"oid": "1dbf35252202021577f574f7ce5cf5e8dfc32875"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTo1NzoyNVrOH2lhvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNjoxOFrOH2nUvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5OTk5Nw==", "bodyText": "Technically I don't think we can get this here as everything before this is non-gRPC. It was only there before to catch re-throws from specific exception onErrorMap().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r526999997", "createdAt": "2020-11-19T15:57:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,6 +97,28 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n+    private Throwable mapError(Throwable t) {\n+        if (t instanceof ConstraintViolationException || t instanceof IllegalArgumentException) {\n+            return error(t, Status.INVALID_ARGUMENT);\n+        } else if (t instanceof NonTransientDataAccessResourceException) {\n+            return error(t, Status.UNAVAILABLE, DB_ERROR);\n+        } else if (t instanceof TimeoutException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (t instanceof TopicNotFoundException) {\n+            return error(t, Status.NOT_FOUND);\n+        } else if (t instanceof TransientDataAccessException) {\n+            return error(t, Status.RESOURCE_EXHAUSTED);\n+        } else if (Exceptions.isOverflow(t) || t instanceof ClientTimeoutException) {\n+            return error(t, Status.DEADLINE_EXCEEDED, OVERFLOW_ERROR);\n+        } else if (t instanceof StatusRuntimeException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dbf35252202021577f574f7ce5cf5e8dfc32875"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMjE1OQ==", "bodyText": "Why do we need this on a @Value object which has no setters by default?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527002159", "createdAt": "2020-11-19T16:00:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -103,52 +104,48 @@\n     @Transient\n     private Instant validStartInstant = LongToInstantConverter.INSTANCE.convert(validStartTimestamp);\n \n+    // Cache this to avoid paying the conversion penalty for multiple subscribers to the same topic\n     @EqualsAndHashCode.Exclude\n+    @Getter(lazy = true)\n+    @Setter(value = AccessLevel.NONE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dbf35252202021577f574f7ce5cf5e8dfc32875"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTQzOQ==", "bodyText": "As discussed offline, I think we can remove the buffer timeout and just fail fast. This will simplify the logic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527029439", "createdAt": "2020-11-19T16:36:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedTopicListener.java", "diffHunk": "@@ -40,19 +47,61 @@\n \n     @Override\n     public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n-        UnicastProcessor<String> processor = UnicastProcessor.create();\n-        Flux<String> timeoutFlux = processor.delayElements(listenerProperties.getBufferTimeout())\n-                .replay(1)\n-                .autoConnect();\n+        TimeoutContext timeoutContext = new TimeoutContext(Schedulers.parallel(),\n+                listenerProperties.getBufferTimeout());\n+        Mono<TopicMessage> timeoutMono = Mono.create(timeoutContext);\n \n-        return getSharedListener(filter)\n-                .publishOn(Schedulers.boundedElastic())\n+        // moving publishOn from after onBackpressureBuffer to after Flux.merge reduces CPU usage by up to 40%\n+        Flux<TopicMessage> topicMessageFlux = getSharedListener(filter)\n                 .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter))\n-                .doOnCancel(() -> processor.onNext(\"timeout\"))\n-                .onBackpressureBuffer(listenerProperties.getMaxBufferSize())\n-                .timeout(timeoutFlux, message -> timeoutFlux, Mono.error(\n-                        new ClientTimeoutException(\"Client timed out while consuming the buffered messages\")));\n+                .onBackpressureBuffer(listenerProperties.getMaxBufferSize(), t -> timeoutContext.onOverflow())\n+                .doFinally(r -> timeoutContext.onComplete());\n+        return Flux.merge(listenerProperties.getPrefetch(), topicMessageFlux, timeoutMono)\n+                .publishOn(Schedulers.boundedElastic(), false, listenerProperties.getPrefetch());\n     }\n \n     protected abstract Flux<TopicMessage> getSharedListener(TopicMessageFilter filter);\n+\n+    @RequiredArgsConstructor\n+    private class TimeoutContext implements Consumer<MonoSink<TopicMessage>> {\n+\n+        private final Scheduler scheduler;\n+        private final Duration timeout;\n+\n+        private MonoSink<TopicMessage> sink;\n+        private final AtomicBoolean completed = new AtomicBoolean(false);\n+        private volatile Disposable taskDisposer;\n+\n+        @Override\n+        public void accept(MonoSink<TopicMessage> sink) {\n+            this.sink = sink;\n+        }\n+\n+        public void onComplete() {\n+            if (!completed.compareAndSet(false, true)) {\n+                return;\n+            }\n+\n+            if (taskDisposer != null) {\n+                taskDisposer.dispose();\n+                taskDisposer = null;\n+            }\n+\n+            sink.success();\n+        }\n+\n+        public void onOverflow() {\n+            if (completed.get()) {\n+                return;\n+            }\n+\n+            try {\n+                taskDisposer = scheduler.schedule(() -> sink.error(new ClientTimeoutException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8c71b47cb5a04315d85c743e0b5fd11e976fda"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba939cc0978ef37992ef2811ac68265cccc5d13", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3ba939cc0978ef37992ef2811ac68265cccc5d13", "committedDate": "2020-11-19T16:50:03Z", "message": "fail fast with overflow instead of timeout\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ea77fcca36d88f35c24a00d08ff35e1600641f", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/83ea77fcca36d88f35c24a00d08ff35e1600641f", "committedDate": "2020-11-19T17:00:01Z", "message": "address review comment and bad code smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NjU5MjE1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-534659215", "createdAt": "2020-11-19T17:01:27Z", "commit": {"oid": "83ea77fcca36d88f35c24a00d08ff35e1600641f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzowMToyN1rOH2ofbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzowMToyN1rOH2ofbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0ODU1OQ==", "bodyText": "change return type to StatusRuntimeException", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#discussion_r527048559", "createdAt": "2020-11-19T17:01:27Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/controller/ConsensusController.java", "diffHunk": "@@ -105,22 +96,32 @@ private TopicMessageFilter toFilter(ConsensusTopicQuery query) {\n         return builder.build();\n     }\n \n-    private Throwable error(Throwable t, Status status) {\n-        return error(t, status, t.getMessage());\n-    }\n-\n-    private Throwable error(Throwable t, Status status, String message) {\n-        log.warn(\"Received {} subscribing to topic: {}\", t.getClass().getSimpleName(), t.getMessage());\n-        return status.augmentDescription(message).asRuntimeException();\n-    }\n-\n-    private Throwable unknownError(Throwable t) {\n-        if (t instanceof StatusRuntimeException) {\n-            return t;\n+    private StatusRuntimeException mapError(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ea77fcca36d88f35c24a00d08ff35e1600641f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "635cd1c1ceeaab7a230f250b517cc484ca149795", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/635cd1c1ceeaab7a230f250b517cc484ca149795", "committedDate": "2020-11-19T17:07:46Z", "message": "remove bufferTimeout from doc and java class\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94acfec3e8375674e621064235455e0aa311ead6", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/94acfec3e8375674e621064235455e0aa311ead6", "committedDate": "2020-11-19T17:14:20Z", "message": "fix test failure, address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0150863d5f7ab137b8bc457bdaa1793ea01bcf97", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0150863d5f7ab137b8bc457bdaa1793ea01bcf97", "committedDate": "2020-11-19T17:21:17Z", "message": "bad smell\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzQ1OTg5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1277#pullrequestreview-534745989", "createdAt": "2020-11-19T18:44:45Z", "commit": {"oid": "0150863d5f7ab137b8bc457bdaa1793ea01bcf97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3519, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}