{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzUyNTU2", "number": 816, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNjo1NFrOEDmZNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0ODo1MFrOED8sJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjEwMjI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNjo1NFrOGgtkuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNjo1NFrOGgtkuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NDI5OQ==", "bodyText": "shared common Transaction and TransactionRecord builder code here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436954299", "createdAt": "2020-06-08T19:36:54Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -219,22 +225,52 @@ protected void assertTransaction(TransactionBody transactionBody,\n         );\n     }\n \n-    protected static Builder defaultTransactionBodyBuilder(String memo) {\n-\n-        long validDuration = 120;\n-        AccountID payerAccountId = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(2).build();\n-        long txFee = 100L;\n-        AccountID nodeAccount = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build();\n-\n+    private static Builder defaultTransactionBodyBuilder() {\n         TransactionBody.Builder body = TransactionBody.newBuilder();\n-        body.setTransactionFee(txFee);\n-        body.setMemo(memo);\n-        body.setNodeAccountID(nodeAccount);\n-        body.setTransactionID(Utility.getTransactionId(payerAccountId));\n-        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(validDuration).build());\n+        body.setTransactionFee(100L);\n+        body.setMemo(\"transaction memo\");\n+        body.setNodeAccountID(AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build());\n+        body.setTransactionID(Utility.getTransactionId(PAYER));\n+        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(120).build());\n         return body;\n     }\n \n+    protected com.hederahashgraph.api.proto.java.Transaction buildTransaction(Consumer<Builder> customBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjEwNDM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNzoyM1rOGgtl5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozNzoyM1rOGgtl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NDU5OA==", "bodyText": "convenience functions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436954598", "createdAt": "2020-06-08T19:37:23Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -251,4 +287,22 @@ public Long createIdForAccountNum(Long accountNum) {\n         EntityId entityId = new EntityId(null, 0L, 0L, accountNum, EntityTypeEnum.ACCOUNT.getId());\n         return entityRepository.save(entityId.toEntity()).getId();\n     }\n+\n+    protected com.hedera.mirror.importer.domain.Transaction getDbTransaction(Timestamp consensusTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjEwNjg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozODoxM1rOGgtnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTozODoxM1rOGgtnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NTAyMA==", "bodyText": "common shareable defaults.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436955020", "createdAt": "2020-06-08T19:38:13Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -64,6 +67,10 @@\n import com.hedera.mirror.importer.util.Utility;\n \n public class AbstractEntityRecordItemListenerTest extends IntegrationTest {\n+    protected static final String KEY = \"0a2212200aa8e21064c61eab86e2a9c164565b4e7a9a4146106e0a6cd03a8c395a110fff\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjEzNjUyOnYy", "diffSide": "LEFT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0ODowMVrOGgt6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0ODowMVrOGgt6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTg1Ng==", "bodyText": "entity count change is because:\nentities before:\n\n98, 3, 2002 from transfer list\n2 from defaultTransactionBodyBuilder#setTransactionID\nproxy account and contract account\nThe flaw here is that there is no transfer list denoting fee transfer from payer to node & treasury.\n\nentities now:\n\n98, 2002, 3 from transfer list. 2002 is also the payer now.\nproxy account and contract account\n\nSimilar case in other test classes too.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436959856", "createdAt": "2020-06-08T19:48:01Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "diffHunk": "@@ -73,67 +65,29 @@ void before() throws Exception {\n \n     @Test\n     void contractCreate() throws Exception {\n-\n         Transaction transaction = contractCreateTransaction();\n         TransactionBody transactionBody = TransactionBody.parseFrom(transaction.getBodyBytes());\n         ContractCreateTransactionBody contractCreateTransactionBody = transactionBody.getContractCreateInstance();\n         TransactionRecord record = createOrUpdateRecord(transactionBody);\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        com.hedera.mirror.importer.domain.Entities dbContractEntity = entityRepository\n-                .findById(dbTransaction.getEntityId()).get();\n-        com.hedera.mirror.importer.domain.Entities dbProxyAccountId = entityRepository\n-                .findById(dbContractEntity.getProxyAccountId()).get();\n-        ContractResult dbContractResults = contractResultRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-\n         assertAll(\n-                // row counts\n                 () -> assertEquals(1, transactionRepository.count())\n-                , () -> assertEquals(6, entityRepository.count())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjE0MjQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0OTo1NlrOGgt-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo0OTo1NlrOGgt-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2MDc3Ng==", "bodyText": "Would try to move isDeleted check to assertContractEntity() in future. It's better there.\nSame in other test classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r436960776", "createdAt": "2020-06-08T19:49:56Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "diffHunk": "@@ -701,278 +408,190 @@ void contractCallFailedWithoutResult() throws Exception {\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        com.hedera.mirror.importer.domain.Entities dbContractEntity = entityRepository\n-                .findById(dbTransaction.getEntityId()).get();\n-\n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count()),\n-                () -> assertEquals(5, entityRepository.count()),\n+                () -> assertEquals(4, entityRepository.count()),\n                 () -> assertEquals(0, contractResultRepository.count()),\n                 () -> assertEquals(3, cryptoTransferRepository.count()),\n                 () -> assertEquals(0, liveHashRepository.count()),\n                 () -> assertEquals(0, fileDataRepository.count()),\n-                () -> assertTransaction(transactionBody, dbTransaction),\n-                () -> assertRecord(record),\n-                () -> assertContract(record.getReceipt().getContractID(), dbContractEntity),\n-                () -> assertFalse(dbContractEntity.isDeleted())\n+                () -> assertContractTransaction(transactionBody, record, false)\n         );\n     }\n \n     @Test\n-    @Disabled\n     void contractCallDoNotPersist() throws Exception {\n         entityProperties.getPersist().setContracts(false);\n-\n-        // now call\n         Transaction transaction = contractCallTransaction();\n         TransactionBody transactionBody = TransactionBody.parseFrom(transaction.getBodyBytes());\n         TransactionRecord record = callRecord(transactionBody);\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-        Entities dbContractEntity = entityRepository.findById(dbTransaction.getEntityId()).get();\n-\n         assertAll(\n-                // row counts\n                 () -> assertEquals(1, transactionRepository.count())\n-                , () -> assertEquals(5, entityRepository.count())\n+                , () -> assertEquals(4, entityRepository.count())\n                 , () -> assertEquals(0, contractResultRepository.count())\n                 , () -> assertEquals(3, cryptoTransferRepository.count())\n                 , () -> assertEquals(0, liveHashRepository.count())\n                 , () -> assertEquals(0, fileDataRepository.count())\n-\n-                // transaction\n-                , () -> assertTransaction(transactionBody, dbTransaction)\n-\n-                // record inputs\n-                , () -> assertRecord(record)\n-\n-                // receipt\n-                , () -> assertContract(record.getReceipt().getContractID(), dbContractEntity)\n-\n-                // Additional entity checks\n-                , () -> assertFalse(dbContractEntity.isDeleted())\n+                , () -> assertContractTransaction(transactionBody, record, false)\n         );\n     }\n \n-    private TransactionRecord createOrUpdateRecord(TransactionBody transactionBody) {\n-        return createOrUpdateRecord(transactionBody, contractId, ResponseCodeEnum.SUCCESS);\n+    private void assertContractTransaction(TransactionBody transactionBody, TransactionRecord record, boolean deleted) {\n+        Entities actualContract = getTransactionEntity(record.getConsensusTimestamp());\n+        assertAll(\n+                () -> assertTransactionAndRecord(transactionBody, record),\n+                () -> assertContract(record.getReceipt().getContractID(), actualContract),\n+                () -> assertEquals(deleted, actualContract.isDeleted()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 738}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTc1MzUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0ODoyMlrOGhREaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0ODoyMlrOGhREaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNTg0OA==", "bodyText": "This is incorrect and doesn't even match the comment. In case of unsuccessful transaction the payer account transfer should not be present as it is not a fee transfer. You're missing the logic that was in EntityRecordItemListenerCryptoTest.transactionRecord():\n  if (responseCode == ResponseCodeEnum.SUCCESS_VALUE || transferAccounts[i] < 1000) {\n...\n  }", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r437535848", "createdAt": "2020-06-09T15:48:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -219,22 +225,52 @@ protected void assertTransaction(TransactionBody transactionBody,\n         );\n     }\n \n-    protected static Builder defaultTransactionBodyBuilder(String memo) {\n-\n-        long validDuration = 120;\n-        AccountID payerAccountId = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(2).build();\n-        long txFee = 100L;\n-        AccountID nodeAccount = AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build();\n-\n+    private static Builder defaultTransactionBodyBuilder() {\n         TransactionBody.Builder body = TransactionBody.newBuilder();\n-        body.setTransactionFee(txFee);\n-        body.setMemo(memo);\n-        body.setNodeAccountID(nodeAccount);\n-        body.setTransactionID(Utility.getTransactionId(payerAccountId));\n-        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(validDuration).build());\n+        body.setTransactionFee(100L);\n+        body.setMemo(\"transaction memo\");\n+        body.setNodeAccountID(AccountID.newBuilder().setShardNum(0).setRealmNum(0).setAccountNum(3).build());\n+        body.setTransactionID(Utility.getTransactionId(PAYER));\n+        body.setTransactionValidDuration(Duration.newBuilder().setSeconds(120).build());\n         return body;\n     }\n \n+    protected com.hederahashgraph.api.proto.java.Transaction buildTransaction(Consumer<Builder> customBuilder) {\n+        TransactionBody.Builder bodyBuilder = defaultTransactionBodyBuilder();\n+        customBuilder.accept(bodyBuilder);\n+\n+        return com.hederahashgraph.api.proto.java.Transaction.newBuilder()\n+                .setBodyBytes(bodyBuilder.build().toByteString())\n+                .setSigMap(getSigMap())\n+                .build();\n+    }\n+\n+    protected TransactionRecord buildTransactionRecord(\n+            Consumer<TransactionRecord.Builder> customBuilder, TransactionBody transactionBody, int status) {\n+        TransactionRecord.Builder recordBuilder = TransactionRecord.newBuilder();\n+        recordBuilder.setConsensusTimestamp(Utility.instantToTimestamp(Instant.now()));\n+        recordBuilder.setMemoBytes(ByteString.copyFromUtf8(transactionBody.getMemo()));\n+        recordBuilder.setTransactionFee(transactionBody.getTransactionFee());\n+        recordBuilder.setTransactionHash(ByteString.copyFromUtf8(\"TransactionHash\"));\n+        recordBuilder.setTransactionID(transactionBody.getTransactionID());\n+        recordBuilder.getReceiptBuilder().setStatusValue(status);\n+\n+        // Give from payer to treasury and node\n+        long[] transferAccounts = {PAYER.getAccountNum(), 98, 3};\n+        long[] transferAmounts = {-2000, 1000, 1000};\n+        TransferList.Builder transferList = recordBuilder.getTransferListBuilder();\n+        for (int i = 0; i < transferAccounts.length; i++) {\n+            // Irrespective of transaction success, node and network fees are present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTc1NTI3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerCryptoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0ODo1MFrOGhRFnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0ODo1MFrOGhRFnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNjE1Nw==", "bodyText": "Should be 2 as it can only contain the node and network fee. See comment above", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/816#discussion_r437536157", "createdAt": "2020-06-09T15:48:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerCryptoTest.java", "diffHunk": "@@ -896,20 +571,15 @@ void cryptoTransferFailedTransaction() throws Exception {\n \n         parseRecordItemAndCommit(new RecordItem(transaction, record));\n \n-        com.hedera.mirror.importer.domain.Transaction dbTransaction = transactionRepository\n-                .findById(Utility.timeStampInNanos(record.getConsensusTimestamp())).get();\n-\n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count()),\n                 () -> assertEquals(3, entityRepository.count(), \"Payer, node and treasury\"),\n-                () -> assertEquals(2, cryptoTransferRepository.count(), \"Node and network fee\"),\n+                () -> assertEquals(3, cryptoTransferRepository.count(), \"Node and network fee\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a48e084afe9c95676ef0a5e7c69ecf69fbc11645"}, "originalPosition": 878}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1079, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}