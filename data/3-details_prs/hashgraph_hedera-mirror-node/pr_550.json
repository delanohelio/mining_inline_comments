{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzk1MzU2", "number": 550, "title": "RecordFileLogger performing far too many queries against t_entities", "bodyText": "Detailed description:\n\nCache (shard,realm,num) -> t_entities.id mappings in memory.\nConfigurable hedera.mirror.importer.parser.entityIdCacheSize defaulting to 100,000. Cache does not expire. LRU.\nCache is loaded on process start.\nRecordFileLogger now utilizes this in-memory-cache for writing t_transaction columns for payer and node, and avoids entity lookups for topic/contract/file/account ids on non-cud operations (submitMessage, cryptotransfer, fileappend, etc)\n\nException: Create/Update/Delete operations on entities still load entities from the EntitiesRepository (30 minute cache invalidation period).\n\n\nFix #533 by not creating entities with entity_num 0 (in the case of proxyAccountId during entity creation, this indicates that there should be no proxyAccount).\n\nWhich issue(s) this PR fixes:\nFixes #547\nFixes #533\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-02-21T17:39:22Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550", "merged": true, "mergeCommit": {"oid": "0dd26633d131e7778f1d233cc6ea28d7178afe29"}, "closed": true, "closedAt": "2020-02-24T23:13:22Z", "author": {"login": "mike-burrage-hedera"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGlqQMABqjMwNjE4MDMwMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHlyJmgFqTM2Mzc2NDkyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bcc3fa3def26ce4091a92a29a9919846202fa72", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2bcc3fa3def26ce4091a92a29a9919846202fa72", "committedDate": "2020-02-21T17:43:13Z", "message": "Remove unused.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/052681ad654f484b6600a33cc6320092c3040f72", "committedDate": "2020-02-21T20:21:57Z", "message": "Bug fix\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTI0NTg2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-362924586", "createdAt": "2020-02-21T21:22:03Z", "commit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyMjowM1rOFtE98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozODo1M1rOFtFWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMTYzNQ==", "bodyText": "Can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382811635", "createdAt": "2020-02-21T21:22:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNDY4MA==", "bodyText": "Should use constructor injection for both fields (e.g. make both private final)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382814680", "createdAt": "2020-02-21T21:29:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU5Nw==", "bodyText": "This will get run synchronously in the main thread. Also InitializingBean is right after bean created so might race with flyway migration beans. Better to do async event listening:\n@Async\n@EventListener(ApplicationReadyEvent.class)\npublic void load() {\n...\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382815597", "createdAt": "2020-02-21T21:32:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n+        entityIdRepository.findAll(pageable); // Seed the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjczMA==", "bodyText": "Why are we creating a separate entity for the same collection? Is this really just a minimal view of Entities? If so, you can just use interface projection or class-based DTOs for this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382816730", "createdAt": "2020-02-21T21:35:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@Table(name = \"t_entities\")\n+@NoArgsConstructor\n+public class EntityId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzM4Nw==", "bodyText": "Once you switch to interface projection, just move these methods into existing EntityRepository. You can't use class-level cacheconfig though, of course.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817387", "createdAt": "2020-02-21T21:37:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng==", "bodyText": "These would be more reusable as static helper methods on EntityId: EntityId.of(accountID)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817996", "createdAt": "2020-02-21T21:38:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -1017,6 +1033,30 @@ private static Entities getEntity(long shardNum, long realmNum, long entityNum,\n         });\n     }\n \n+    public static EntityId getEntityId(AccountID accountID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTQwNDg4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-362940488", "createdAt": "2020-02-21T21:54:56Z", "commit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NDo1NlrOFtFuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NDo1NlrOFtFuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk4MA==", "bodyText": "Are you sure this is updating the cache? With Spring AOP you generally can't call proxied methods from inside a proxied method. It doesn't exit the class and come back in so it doesn't hit the cache decorator. You can increase spring cache logging to confirm.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382823980", "createdAt": "2020-02-21T21:54:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {\n+\n+    @Cacheable(key = \"{#p0, #p1, #p2}\", sync = true)\n+    @Query(\"from EntityId where entityShard = ?1 and entityRealm = ?2 and entityNum = ?3\")\n+    Optional<EntityId> findByNativeIds(long entityShard, long entityRealm, long entityNum);\n+\n+    @Cacheable(key = \"{#p0.entityShard, #p0.entityRealm, #p0.entityNum}\")\n+    @Override\n+    Page<EntityId> findAll(Pageable pageable);\n+\n+    default EntityId findOrCreateBy(long entityShard, long entityRealm, long entityNum, int entityTypeId) {\n+        var found = findByNativeIds(entityShard, entityRealm, entityNum);\n+        if (!found.isPresent()) {\n+            return save(new EntityId(entityShard, entityRealm, entityNum, entityTypeId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTMzNDA0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-362933404", "createdAt": "2020-02-21T21:39:46Z", "commit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozOTo0NlrOFtFYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozOTo0NlrOFtFYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODM1MA==", "bodyText": "would suggest adding logging before and after findAll. Would tell us how many startup seconds it costs us to warm the cache in prod.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382818350", "createdAt": "2020-02-21T21:39:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dce2b31717f88afddfa8329a05743d437ec943c", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0dce2b31717f88afddfa8329a05743d437ec943c", "committedDate": "2020-02-21T23:38:15Z", "message": "Address 2 code review comments.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1e6d5548ab36f2e02681745e07642bb3f28ba4b0", "committedDate": "2020-02-23T16:31:52Z", "message": "Address code review comments.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDgzMzc2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-363483376", "createdAt": "2020-02-24T15:38:51Z", "commit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozODo1MVrOFtlLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozODo1MVrOFtlLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw==", "bodyText": "q: should this be a configurable property in commonParserProperties?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383339353", "createdAt": "2020-02-24T15:38:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjI1MTkx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-363625191", "createdAt": "2020-02-24T19:01:15Z", "commit": {"oid": "4744c43d2c775764dc4d7308039469bdf9f04b52"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTowMToxNVrOFtsJMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTowMToxNVrOFtsJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MzQ4OA==", "bodyText": "Okay", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383453488", "createdAt": "2020-02-24T19:01:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw=="}, "originalCommit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjg4Njkx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-363688691", "createdAt": "2020-02-24T20:46:31Z", "commit": {"oid": "4744c43d2c775764dc4d7308039469bdf9f04b52"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4744c43d2c775764dc4d7308039469bdf9f04b52", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4744c43d2c775764dc4d7308039469bdf9f04b52", "committedDate": "2020-02-24T17:27:23Z", "message": "Use DTO projection.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "committedDate": "2020-02-24T20:58:16Z", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c35ccf0ffc67f2d4c2c02e2f665d62ed4a84b4", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/81c35ccf0ffc67f2d4c2c02e2f665d62ed4a84b4", "committedDate": "2020-02-24T23:01:52Z", "message": "Utilize an in-memory mapping of t_entities.id to (shard,realm,num) to speed up insert.\nTransactions that create/update/delete entities still go through the repository causing blocking/serial queries during processing.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992fb02ced28ee664bca9aadaf7aac0b1da07950", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/992fb02ced28ee664bca9aadaf7aac0b1da07950", "committedDate": "2020-02-24T23:01:53Z", "message": "Make entityIdCacheSize configurable.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bab98b50f27f1a857e7a743b7cdc302fe2776af", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2bab98b50f27f1a857e7a743b7cdc302fe2776af", "committedDate": "2020-02-24T23:01:53Z", "message": "Bug fix\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4460d01917656603dedd08ca78759a9c01915ad", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b4460d01917656603dedd08ca78759a9c01915ad", "committedDate": "2020-02-24T23:01:54Z", "message": "Address code review comments.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5f589c4ad60a3c4335f87c67ca58b52febe9b2", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8e5f589c4ad60a3c4335f87c67ca58b52febe9b2", "committedDate": "2020-02-24T23:01:54Z", "message": "Log message fix.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245ed9b916259778c8341e5197640223b678691c", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/245ed9b916259778c8341e5197640223b678691c", "committedDate": "2020-02-24T23:01:54Z", "message": "Use DTO projection.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "committedDate": "2020-02-24T23:01:55Z", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ded57c433ce1c97e48f31f5bd46e580ab8bd17d0", "committedDate": "2020-02-24T20:58:16Z", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/85f001cc1d5de030fbfc3ec04e60e39ac42550b6", "committedDate": "2020-02-24T23:01:55Z", "message": "Add config property hedera.mirror.importer.parser.entityIdCacheSize\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzY0OTI4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#pullrequestreview-363764928", "createdAt": "2020-02-24T23:04:49Z", "commit": {"oid": "85f001cc1d5de030fbfc3ec04e60e39ac42550b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3265, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}