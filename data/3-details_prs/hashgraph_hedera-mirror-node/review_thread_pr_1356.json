{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MTkzNjU0", "number": 1356, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1NzoyMFrOFE1Hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDozNjozOFrOFGvRgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjA4OTY2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1NzoyMFrOIFCThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1NzoyMFrOIFCThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MTU1OQ==", "bodyText": "Move this back down.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r542151559", "createdAt": "2020-12-14T06:57:20Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -746,9 +747,9 @@ const getTransactionTypeQuery = (parsedQueryParams) => {\n   }\n \n   if (isValidTransactionType(transactionType)) {\n-    return `${constants.transactionColumns.TYPE}${opsMap.eq}${\n-      constants.transactionTypes[transactionType.toUpperCase()]\n-    }`;\n+    return `${constants.transactionColumns.TYPE}${opsMap.eq}${constants.transactionTypes.get(\n+      transactionType.toUpperCase()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12305b292d3dfc712971ef32e110599ee8c2bfc1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjA5MTQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactions.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1Nzo1MlrOIFCUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjo1Nzo1MlrOIFCUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE1MTgwMQ==", "bodyText": "Remove this, was for other PR/task", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r542151801", "createdAt": "2020-12-14T06:57:52Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -304,9 +304,9 @@ const getOneTransaction = async (req, res) => {\n     FROM transaction t\n     JOIN t_transaction_results ttr ON ttr.proto_id = t.result\n     JOIN t_transaction_types ttt ON ttt.proto_id = t.type\n-    JOIN crypto_transfer ctl ON  ctl.consensus_timestamp = t.consensus_ns\n+    LEFT JOIN crypto_transfer ctl ON  ctl.consensus_timestamp = t.consensus_ns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12305b292d3dfc712971ef32e110599ee8c2bfc1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDY1OTI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowMjoyNVrOIFsueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMTozOTozNFrOIGnv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NjU4NQ==", "bodyText": "Not 100% on this name, I originally just had it as transactionTypes, but having transactionsTypes.transactionTypes.get() seemed hard to read.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r542846585", "createdAt": "2020-12-14T22:02:25Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,41 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1OTY3Nw==", "bodyText": "transactionTypesMap works for me. Or transactionTypeProtoIdMap if you want to be explicit.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543559677", "createdAt": "2020-12-15T17:52:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,41 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NjU4NQ=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0MTc1OA==", "bodyText": "My other recommendation transactionsTypes.get() would solve this conundrum.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543741758", "createdAt": "2020-12-15T22:44:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,41 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NjU4NQ=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzgxMzYwNw==", "bodyText": "Keeping as transactionTypesMap, reworked to not expose.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543813607", "createdAt": "2020-12-16T01:39:34Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,41 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NjU4NQ=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDY2NTg5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowMzoyOVrOIFsyvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyMToxNlrOIHhoaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NzY3OA==", "bodyText": "If there's a particular order these need to be in I will shuffle.  Goes for all of the imports after as well.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r542847678", "createdAt": "2020-12-14T22:03:29Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -51,15 +51,20 @@ const transactions = require('../transactions.js');\n const server = require('../server');\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n+const utils = require('../utils');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n const {cloudProviders} = require('../constants');\n+const transactionTypes = require('../transactionTypes');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1NzQxOA==", "bodyText": "nit: I like to put external libraries first and then local files after.\nAlso amongst local files I try to go alphabetically at each depth  in terms of directories.\nI don't mind the the order of directory depth so far as they are grouped.\nFor instance if I was rearranging I might do the below\n// external libraries\nconst S3 = require('aws-sdk/clients/s3');\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst path = require('path');\nconst request = require('supertest');\n\nconst integrationDbOps = require('./integrationDbOps.js');\nconst integrationDomainOps = require('./integrationDomainOps.js');\nconst config = require('../config');\nconst {cloudProviders} = require('../constants');\nconst EntityId = require('../entityId');\nconst {InvalidArgumentError} = require('../errors/invalidArgumentError');\nconst {S3Ops} = require('./integrationS3Ops');\nconst server = require('../server');\nconst transactions = require('../transactions.js');\nconst transactionTypes = require('../transactionTypes');\nconst utils = require('../utils');\nAll of these are nit suggestions since you asked.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543557418", "createdAt": "2020-12-15T17:49:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -51,15 +51,20 @@ const transactions = require('../transactions.js');\n const server = require('../server');\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n+const utils = require('../utils');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n const {cloudProviders} = require('../constants');\n+const transactionTypes = require('../transactionTypes');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NzY3OA=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MTE3NQ==", "bodyText": "I'm assuming const {InvalidArgumentError} = require('../errors/invalidArgumentError'); should be third in that second list because of its directory depth, correct?  Otherwise I follow and will do.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544761175", "createdAt": "2020-12-17T02:19:07Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -51,15 +51,20 @@ const transactions = require('../transactions.js');\n const server = require('../server');\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n+const utils = require('../utils');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n const {cloudProviders} = require('../constants');\n+const transactionTypes = require('../transactionTypes');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NzY3OA=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MTk2MQ==", "bodyText": "Reordered.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544761961", "createdAt": "2020-12-17T02:21:16Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -51,15 +51,20 @@ const transactions = require('../transactions.js');\n const server = require('../server');\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n+const utils = require('../utils');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n const {cloudProviders} = require('../constants');\n+const transactionTypes = require('../transactionTypes');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NzY3OA=="}, "originalCommit": {"oid": "a9fb75f53fa3eac0c94f40003e50d301332b8686"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTQ5MTM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1NToxMVrOIGYWaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyNzo0NlrOIHhxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MTMyMw==", "bodyText": "Can you add a trace log here, similar to the other requests\n  if (logger.isTraceEnabled()) {\n    logger.trace(`getTransactionTypes query: ${transactionTypesQuery}`);\n  }", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543561323", "createdAt": "2020-12-15T17:55:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {\n+  pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDI3MQ==", "bodyText": "Added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544764271", "createdAt": "2020-12-17T02:27:46Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {\n+  pool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MTMyMw=="}, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUwNzMyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1ODoyNVrOIGYf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjowMDo0OFrOIHhMug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2Mzc1Mw==", "bodyText": "nit: add a comment highlighting that the map is transaction type (String) -> ProtoId (Integer)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543563753", "createdAt": "2020-12-15T17:58:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc1NDg3NA==", "bodyText": "Comment added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544754874", "createdAt": "2020-12-17T02:00:48Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2Mzc1Mw=="}, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUxNTc3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMDoxNVrOIGYlEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyODoyMlrOIHhyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTA3Mw==", "bodyText": "I forget if there's a way to overload the get() function.\nIf there is or instead of a get expose a separate function that will do the toUpperCase conversion and then call transactionTypesMap.get() that would help.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543565073", "createdAt": "2020-12-15T18:00:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -95,7 +96,7 @@ const isValidEncoding = (query) => {\n };\n \n const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+  return _.isString(transactionType) && transactionTypesMap.get(transactionType.toUpperCase()) !== undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDQ3Mw==", "bodyText": "Added toUpperCase inside of the new get() method in transactionTypeName", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544764473", "createdAt": "2020-12-17T02:28:22Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -95,7 +96,7 @@ const isValidEncoding = (query) => {\n };\n \n const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+  return _.isString(transactionType) && transactionTypesMap.get(transactionType.toUpperCase()) !== undefined;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTA3Mw=="}, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY2NDg1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMzozN1rOIGjA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMzozN1rOIGjA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjA0Nw==", "bodyText": "We've standardized on lowercase SQl statements.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543736047", "createdAt": "2020-12-15T22:33:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY3MjY2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNTo1M1rOIGjFdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNTo1M1rOIGjFdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzIwNA==", "bodyText": "Use new style function syntax.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543737204", "createdAt": "2020-12-15T22:35:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY4NDA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozOToxM1rOIGjMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozOToxM1rOIGjMAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczODg4Mw==", "bodyText": "Would be less coupled and not slow down startup to lazy load this on-demand. See my note about replacing explicit load with implicit load via get().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543738883", "createdAt": "2020-12-15T22:39:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -104,6 +105,9 @@ app.set('query parser', requestQueryParser);\n \n serveSwaggerDocs(app);\n \n+// load transaction types from DB\n+loadTransactionTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjcwMTk0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo0NDoyNlrOIGjWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo0NDoyNlrOIGjWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0MTQ4NA==", "bodyText": "We shouldn't expose a mutable map since people can potentially modify this. Recommend a single method be exposed get(string) that lazy loads the internal map.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543741484", "createdAt": "2020-12-15T22:44:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {\n+  pool\n+    .query(transactionTypesQuery)\n+    .catch((err) => {\n+      throw new DbError(err.message);\n+    })\n+    .then((results) => {\n+      for (const row of results.rows) {\n+        transactionTypesMap.set(row.name, row.proto_id);\n+      }\n+    });\n+};\n+\n+module.exports = {\n+  transactionTypesMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc3MDAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzowMzo0NlrOIGj8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyOToxN1rOIHhzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MTIxMA==", "bodyText": "this is async, though the function is called at process startup, there is no guarantee that when the map is looked up for a transaction type, the data is fully populated.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543751210", "createdAt": "2020-12-15T23:03:46Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {\n+  pool\n+    .query(transactionTypesQuery)\n+    .catch((err) => {\n+      throw new DbError(err.message);\n+    })\n+    .then((results) => {\n+      for (const row of results.rows) {\n+        transactionTypesMap.set(row.name, row.proto_id);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDc1OA==", "bodyText": "Should be fixed now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544764758", "createdAt": "2020-12-17T02:29:17Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'SELECT proto_id, name FROM t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const loadTransactionTypes = function () {\n+  pool\n+    .query(transactionTypesQuery)\n+    .catch((err) => {\n+      throw new DbError(err.message);\n+    })\n+    .then((results) => {\n+      for (const row of results.rows) {\n+        transactionTypesMap.set(row.name, row.proto_id);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MTIxMA=="}, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc4NTQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMzowODoyOFrOIGkErQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjozMDozNVrOIHh1bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MzM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return _.isString(transactionType) && transactionTypesMap.get(transactionType.toUpperCase()) !== undefined;\n          \n          \n            \n              return _.isString(transactionType) && transactionTypesMap.has(transactionType.toUpperCase());", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543753389", "createdAt": "2020-12-15T23:08:28Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -95,7 +96,7 @@ const isValidEncoding = (query) => {\n };\n \n const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+  return _.isString(transactionType) && transactionTypesMap.get(transactionType.toUpperCase()) !== undefined;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NTI5NA==", "bodyText": "Good idea, but this was refactored to take advantage of the new get() logic inside TransactionTypes", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544765294", "createdAt": "2020-12-17T02:30:35Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -95,7 +96,7 @@ const isValidEncoding = (query) => {\n };\n \n const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+  return _.isString(transactionType) && transactionTypesMap.get(transactionType.toUpperCase()) !== undefined;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc1MzM4OQ=="}, "originalCommit": {"oid": "4cae40be24f0ca0fbee1e0e44c9b8ff44ecd6acf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzQ4MzA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjo0NzozOFrOIGqRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjo0ODozN1rOIHiONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA==", "bodyText": "this will not work as intended:\n\nloadTransactionTypes immediately returns and nodejs engine won't pause and switch to other tasks, so transactionTypesMap.size is still 0 at line 30\nit's possible when db query is slow, multiple calls to get will all see transactionTypesMap.size === 0, this will cause multiple db queries for the transaction types\n\nwe should use a promise to hold the db query\nlet promise;\n\nconst get = async (transactionTypeName) => {\n  if (!promise) {\n    promise = pool.query(transactionTypesQuery);\n  }\n\n  try {\n    const result = await promise;\n    if (transactionTypesMap.size === 0) {\n      result.rows.forEach((row) => transactionTypesMap.set(row.name, row.proto_id));\n    }\n\n    return transactionTypesMap.get(transactionTypeName.toUpperCase());\n  } catch (err) {\n    // error handling\n  }\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543854860", "createdAt": "2020-12-16T02:47:38Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg2MzUwNw==", "bodyText": "Yeah, I half-did this and saw that tests are failing and have been playing with ways to correct it.  I'll give this a go, I was playing with promises myself and was getting something working but it involved an explosion of async/await across many files.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543863507", "createdAt": "2020-12-16T02:58:36Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3Mzc4MQ==", "bodyText": "So this is definitely working but I'm seeing the same issue where this leads to a ton of needed async/await statements.  Is there a cleaner way to handle this (I'm still getting the hang of the async/await concepts), or short of a large refactor is that the only way to solve this?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543873781", "createdAt": "2020-12-16T03:11:49Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg3ODMxNg==", "bodyText": "the alternative for not using async/await in places where get() is called is promise chain and that may look worse. personally I prefer async / await, the code is easier to read.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r543878316", "createdAt": "2020-12-16T03:18:27Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0MjI4MA==", "bodyText": "I don't think get itself needs to be async as once it's loaded once it's from then on synchronous. So it should hide the asynchronicity from the caller by awaiting internally only if needed if map is empty.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544442280", "createdAt": "2020-12-16T16:30:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NTY4Nw==", "bodyText": "javascript doesn't seem to support it. if a part of the flow is async, the whole flow becomes async.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544455687", "createdAt": "2020-12-16T16:47:34Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc3MTYzOQ==", "bodyText": "Used the above code and walked through the async/await chain to make it happy, effectively a good chunk of the transaction.js and utils.js functions had to become async as a result, as did some tests and validation functions.  Still figuring out how to work around some of the code smells, but it should work as expected now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544771639", "createdAt": "2020-12-17T02:48:37Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,51 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+const transactionTypesMap = new Map();\n+\n+const get = async (transactionTypeName) => {\n+  if (transactionTypesMap.size === 0) {\n+    loadTransactionTypes();\n+  }\n+  return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1NDg2MA=="}, "originalCommit": {"oid": "448e74635b3b1f8a80f9e490afa012cfff9b605e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzY0ODY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactionTypes.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzoyNDowNVrOIHi9BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowNjo1OFrOIH86bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MzYyMQ==", "bodyText": "considering promise = null; before throwing DbError so a transient error will not cause all following dependent calls to fail.\nthis allows the subsequent calls of get() to retry the db query.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544783621", "createdAt": "2020-12-17T03:24:05Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('./errors/dbError');\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+// Transaction Type (String) -> ProtoId (Integer)\n+const transactionTypesMap = new Map();\n+\n+let promise;\n+\n+const get = async (transactionTypeName) => {\n+  if (!promise) {\n+    if (logger.isTraceEnabled()) {\n+      logger.trace(`getTransactionTypes query: ${transactionTypesQuery}`);\n+    }\n+    promise = pool.query(transactionTypesQuery);\n+  }\n+\n+  try {\n+    const result = await promise;\n+    if (transactionTypesMap.size === 0) {\n+      result.rows.forEach((row) => transactionTypesMap.set(row.name, row.proto_id));\n+    }\n+    return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+  } catch (err) {\n+    throw new DbError(err.message);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwODk0Mw==", "bodyText": "Good idea, added.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545208943", "createdAt": "2020-12-17T16:06:58Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/transactionTypes.js", "diffHunk": "@@ -0,0 +1,52 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node REST API\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('./errors/dbError');\n+\n+const transactionTypesQuery = 'select proto_id, name from t_transaction_types';\n+\n+// Transaction Type (String) -> ProtoId (Integer)\n+const transactionTypesMap = new Map();\n+\n+let promise;\n+\n+const get = async (transactionTypeName) => {\n+  if (!promise) {\n+    if (logger.isTraceEnabled()) {\n+      logger.trace(`getTransactionTypes query: ${transactionTypesQuery}`);\n+    }\n+    promise = pool.query(transactionTypesQuery);\n+  }\n+\n+  try {\n+    const result = await promise;\n+    if (transactionTypesMap.size === 0) {\n+      result.rows.forEach((row) => transactionTypesMap.set(row.name, row.proto_id));\n+    }\n+    return transactionTypesMap.get(transactionTypeName.toUpperCase());\n+  } catch (err) {\n+    throw new DbError(err.message);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4MzYyMQ=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzY4MDk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzozNzo0MlrOIHjN-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjozODo1M1rOIH-YMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4Nzk2Mw==", "bodyText": "these positive tests assert nothing, you can change toBe('') to e.g. toBe('oops') and they'll still pass.\nadding async/await will make it work:\n  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', async () => {\n    await expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n  });", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544787963", "createdAt": "2020-12-17T03:37:42Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMjk0NQ==", "bodyText": "Fixed these, also reordered the positive tests below a bit to fit this style.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545232945", "createdAt": "2020-12-17T16:38:53Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4Nzk2Mw=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzY4Njg1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzo0MDoyMlrOIHjRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzowMTo1NlrOIH_beg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', () => {\n          \n          \n            \n                expect(() => utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n          \n          \n            \n                  InvalidArgumentError\n          \n          \n            \n                );\n          \n          \n            \n              });\n          \n          \n            \n              test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', async () => {\n          \n          \n            \n                await expect(utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n          \n          \n            \n                  InvalidArgumentError\n          \n          \n            \n                );\n          \n          \n            \n              });", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544788776", "createdAt": "2020-12-17T03:40:22Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', () => {\n+    expect(() => utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n+      InvalidArgumentError\n+    );\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1MDE3MA==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545250170", "createdAt": "2020-12-17T17:01:56Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', () => {\n+    expect(() => utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n+      InvalidArgumentError\n+    );\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4ODc3Ng=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzY4OTk4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMzo0MTo0OVrOIHjS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjozODo1OVrOIH-Ydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4OTIyMA==", "bodyText": "same as above", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544789220", "createdAt": "2020-12-17T03:41:49Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', () => {\n+    expect(() => utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n+      InvalidArgumentError\n+    );\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify non applicable transaction type query', () => {\n+    expect(() =>\n+      utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: 'newtransaction'})\n+    ).rejects.toThrowError(InvalidArgumentError);\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMzAxNQ==", "bodyText": "Corrected.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545233015", "createdAt": "2020-12-17T16:38:59Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -186,15 +191,79 @@ test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xf\n   ]);\n });\n \n+describe('DB integration test - utils.getTransactionTypeQuery', () => {\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify null query params', () => {\n+    expect(utils.getTransactionTypeQuery(null)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify undefined query params', () => {\n+    expect(utils.getTransactionTypeQuery(undefined)).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty query params', () => {\n+    expect(utils.getTransactionTypeQuery({})).resolves.toBe('');\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify empty transaction type query', () => {\n+    expect(() => utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: ''})).rejects.toThrowError(\n+      InvalidArgumentError\n+    );\n+  });\n+  test('DB integration test - utils.getTransactionTypeQuery - Verify non applicable transaction type query', () => {\n+    expect(() =>\n+      utils.getTransactionTypeQuery({[constants.filterKeys.TRANSACTION_TYPE]: 'newtransaction'})\n+    ).rejects.toThrowError(InvalidArgumentError);\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc4OTIyMA=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzczNzkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDowMjoyOVrOIHjr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowOToyNFrOIH9Bbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NTY0Ng==", "bodyText": "this causes all 'spec based' integration tests to fail. either use constants.cloudProviders.S3 or\nconst {cloudProviders, filterKeys} = require('../constants');", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544795646", "createdAt": "2020-12-17T04:02:29Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -40,20 +40,25 @@\n  * Tests are then run in code below (find TESTS all caps) and by comparing requests/responses from the server to data\n  * in the specs/ dir.\n  */\n-const path = require('path');\n-const request = require('supertest');\n-const fs = require('fs');\n-const _ = require('lodash');\n+// external libraries\n const S3 = require('aws-sdk/clients/s3');\n const crypto = require('crypto');\n-const EntityId = require('../entityId');\n-const transactions = require('../transactions.js');\n-const server = require('../server');\n+const fs = require('fs');\n+const _ = require('lodash');\n+const path = require('path');\n+const request = require('supertest');\n+\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n-const {cloudProviders} = require('../constants');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIxMDczNA==", "bodyText": "Ah, apparently for a while I was importing cloudProviders in one line, and all of constants in another, and did not notice.  Went with{cloudProviders, filterKeys} , fixed now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545210734", "createdAt": "2020-12-17T16:09:24Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -40,20 +40,25 @@\n  * Tests are then run in code below (find TESTS all caps) and by comparing requests/responses from the server to data\n  * in the specs/ dir.\n  */\n-const path = require('path');\n-const request = require('supertest');\n-const fs = require('fs');\n-const _ = require('lodash');\n+// external libraries\n const S3 = require('aws-sdk/clients/s3');\n const crypto = require('crypto');\n-const EntityId = require('../entityId');\n-const transactions = require('../transactions.js');\n-const server = require('../server');\n+const fs = require('fs');\n+const _ = require('lodash');\n+const path = require('path');\n+const request = require('supertest');\n+\n const integrationDbOps = require('./integrationDbOps.js');\n const integrationDomainOps = require('./integrationDomainOps.js');\n const {S3Ops} = require('./integrationS3Ops');\n const config = require('../config');\n-const {cloudProviders} = require('../constants');\n+const constants = require('../constants');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NTY0Ng=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzc0NTMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDowNjowNlrOIHjwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoxMzoyMFrOIH_6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NjY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const verifyInvalidFilters = async (filters) => {\n          \n          \n            \n              await expect(async () => {\n          \n          \n            \n                await utils.validateAndParseFilters(filters);\n          \n          \n            \n              }).rejects.toThrowErrorMatchingSnapshot();\n          \n          \n            \n            const verifyInvalidFilters = async (filters) => {\n          \n          \n            \n              await expect(utils.validateAndParseFilters(filters)).rejects.toThrowErrorMatchingSnapshot();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544796673", "createdAt": "2020-12-17T04:06:06Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -226,14 +225,14 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ENCODING, 'utf-8'),\n     ];\n \n-    expect(() => {\n-      utils.validateAndParseFilters(filters);\n+    expect(async () => {\n+      await utils.validateAndParseFilters(filters);\n     }).not.toThrow();\n   });\n });\n \n-const verifyInvalidFilters = (filters) => {\n-  expect(() => {\n-    utils.validateAndParseFilters(filters);\n-  }).toThrowErrorMatchingSnapshot();\n+const verifyInvalidFilters = async (filters) => {\n+  await expect(async () => {\n+    await utils.validateAndParseFilters(filters);\n+  }).rejects.toThrowErrorMatchingSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1ODA4Ng==", "bodyText": "Changed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545258086", "createdAt": "2020-12-17T17:13:20Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -226,14 +225,14 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ENCODING, 'utf-8'),\n     ];\n \n-    expect(() => {\n-      utils.validateAndParseFilters(filters);\n+    expect(async () => {\n+      await utils.validateAndParseFilters(filters);\n     }).not.toThrow();\n   });\n });\n \n-const verifyInvalidFilters = (filters) => {\n-  expect(() => {\n-    utils.validateAndParseFilters(filters);\n-  }).toThrowErrorMatchingSnapshot();\n+const verifyInvalidFilters = async (filters) => {\n+  await expect(async () => {\n+    await utils.validateAndParseFilters(filters);\n+  }).rejects.toThrowErrorMatchingSnapshot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5NjY3Mw=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzc2NTUyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDoxNDo0NlrOIHj6zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoxMzozMVrOIH_66Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5OTQzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                expect(async () => {\n          \n          \n            \n                  await utils.validateAndParseFilters(filters);\n          \n          \n            \n                }).not.toThrow();\n          \n          \n            \n              await expect(utils.validateAndParseFilters(filters)).resolves.toBeUndefined();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544799436", "createdAt": "2020-12-17T04:14:46Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -226,14 +225,14 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ENCODING, 'utf-8'),\n     ];\n \n-    expect(() => {\n-      utils.validateAndParseFilters(filters);\n+    expect(async () => {\n+      await utils.validateAndParseFilters(filters);\n     }).not.toThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1ODIxNw==", "bodyText": "Fixed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545258217", "createdAt": "2020-12-17T17:13:31Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -226,14 +225,14 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ENCODING, 'utf-8'),\n     ];\n \n-    expect(() => {\n-      utils.validateAndParseFilters(filters);\n+    expect(async () => {\n+      await utils.validateAndParseFilters(filters);\n     }).not.toThrow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc5OTQzNg=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzc2OTk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDoxNjo1MlrOIHj9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoxMzozOFrOIH_7Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwMDA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              test('Verify validateAndParseFilters for valid filters does not throw exception', () => {\n          \n          \n            \n              test('Verify validateAndParseFilters for valid filters does not throw exception', async () => {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544800058", "createdAt": "2020-12-17T04:16:52Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -203,8 +203,7 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_PUBLICKEY, '3c3d546321ff6f63d701d2ec5c2'),\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_BALANCE, '23456789012345678901234'),\n     ];\n-\n-    verifyInvalidFilters(filters);\n+    await verifyInvalidFilters(filters);\n   });\n \n   test('Verify validateAndParseFilters for valid filters does not throw exception', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI1ODI5MQ==", "bodyText": "Added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545258291", "createdAt": "2020-12-17T17:13:38Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -203,8 +203,7 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_PUBLICKEY, '3c3d546321ff6f63d701d2ec5c2'),\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_BALANCE, '23456789012345678901234'),\n     ];\n-\n-    verifyInvalidFilters(filters);\n+    await verifyInvalidFilters(filters);\n   });\n \n   test('Verify validateAndParseFilters for valid filters does not throw exception', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwMDA1OA=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzgxNTU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDozNjo0NFrOIHkVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzo0MTozN1rOIIBI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjE1NQ==", "bodyText": "this looks better:\nconst protoId = await transactionTypes.get(transactionType);\nif (protoId !== undefined) {\n  return `${constants.transactionColumns.TYPE}${opsMap.eq}${protoId}`;\n}\nthen the function isValidTransactionType can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r544806155", "createdAt": "2020-12-17T04:36:44Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -749,11 +750,8 @@ const getTransactionTypeQuery = (parsedQueryParams) => {\n   if (_.isNil(transactionType)) {\n     return '';\n   }\n-\n-  if (isValidTransactionType(transactionType)) {\n-    return `${constants.transactionColumns.TYPE}${opsMap.eq}${\n-      constants.transactionTypes[transactionType.toUpperCase()]\n-    }`;\n+  if (await isValidTransactionType(transactionType)) {\n+    return `${constants.transactionColumns.TYPE}${opsMap.eq}${await transactionTypes.get(transactionType)}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2ODk1Ng==", "bodyText": "I agree that looks better, should it still do an isString() check?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545268956", "createdAt": "2020-12-17T17:28:57Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -749,11 +750,8 @@ const getTransactionTypeQuery = (parsedQueryParams) => {\n   if (_.isNil(transactionType)) {\n     return '';\n   }\n-\n-  if (isValidTransactionType(transactionType)) {\n-    return `${constants.transactionColumns.TYPE}${opsMap.eq}${\n-      constants.transactionTypes[transactionType.toUpperCase()]\n-    }`;\n+  if (await isValidTransactionType(transactionType)) {\n+    return `${constants.transactionColumns.TYPE}${opsMap.eq}${await transactionTypes.get(transactionType)}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjE1NQ=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3NzUzNg==", "bodyText": "Added as is for now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545277536", "createdAt": "2020-12-17T17:40:42Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -749,11 +750,8 @@ const getTransactionTypeQuery = (parsedQueryParams) => {\n   if (_.isNil(transactionType)) {\n     return '';\n   }\n-\n-  if (isValidTransactionType(transactionType)) {\n-    return `${constants.transactionColumns.TYPE}${opsMap.eq}${\n-      constants.transactionTypes[transactionType.toUpperCase()]\n-    }`;\n+  if (await isValidTransactionType(transactionType)) {\n+    return `${constants.transactionColumns.TYPE}${opsMap.eq}${await transactionTypes.get(transactionType)}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjE1NQ=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3ODE2MA==", "bodyText": "nope in my opinion", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545278160", "createdAt": "2020-12-17T17:41:37Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -749,11 +750,8 @@ const getTransactionTypeQuery = (parsedQueryParams) => {\n   if (_.isNil(transactionType)) {\n     return '';\n   }\n-\n-  if (isValidTransactionType(transactionType)) {\n-    return `${constants.transactionColumns.TYPE}${opsMap.eq}${\n-      constants.transactionTypes[transactionType.toUpperCase()]\n-    }`;\n+  if (await isValidTransactionType(transactionType)) {\n+    return `${constants.transactionColumns.TYPE}${opsMap.eq}${await transactionTypes.get(transactionType)}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjE1NQ=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjEwMzA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDozNjozOFrOIH4j_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToyMTo0MFrOIIFF9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzNzY2MA==", "bodyText": "this function can be removed, see my other comment at line 754", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545137660", "createdAt": "2020-12-17T14:36:38Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -94,8 +95,8 @@ const isValidEncoding = (query) => {\n   return query === constants.characterEncoding.BASE64 || isValidUtf8Encoding(query);\n };\n \n-const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+const isValidTransactionType = async (transactionType) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3NjY1OA==", "bodyText": "The function is still used by filterValidityChecks, I can move the logic into there but considering most of the other validation checks have their own functions (and it would require some test refactoring), I would think it makes sense to keep it as is.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545276658", "createdAt": "2020-12-17T17:39:25Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -94,8 +95,8 @@ const isValidEncoding = (query) => {\n   return query === constants.characterEncoding.BASE64 || isValidUtf8Encoding(query);\n };\n \n-const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+const isValidTransactionType = async (transactionType) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzNzY2MA=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM0Mjk2NA==", "bodyText": "sure", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1356#discussion_r545342964", "createdAt": "2020-12-17T19:21:40Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -94,8 +95,8 @@ const isValidEncoding = (query) => {\n   return query === constants.characterEncoding.BASE64 || isValidUtf8Encoding(query);\n };\n \n-const isValidTransactionType = (transactionType) => {\n-  return _.isString(transactionType) && constants.transactionTypes[transactionType.toUpperCase()] !== undefined;\n+const isValidTransactionType = async (transactionType) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEzNzY2MA=="}, "originalCommit": {"oid": "3b471f80d99d97db13365691392cf7a3b97d5976"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1331, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}