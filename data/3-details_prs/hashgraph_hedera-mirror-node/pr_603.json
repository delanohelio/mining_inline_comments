{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTEyNzQx", "number": 603, "title": "REST Integration tests improvements 2 replacement", "bodyText": "Detailed description:\nREST API tests have been hard to decipher, modify and are sometimes not consistent.\nThese changes provide some scaffolding and changes to improve the integration tests on the REST side\n\nUpdate db query tests to use integration db ops method\nUpdates spec files to contain their setup steps\nMoved domain setup logic from integrationDbOps.js into integrationDomainOps.js\n\nWhich issue(s) this PR fixes:\nPartially addresses #412 with inspiration from #529\nThis replaces #594\nSpecial notes for your reviewer:\nWith this PR db and domain logic is centralized for the query and db integration tests.\nThere still remains some transfer list nuances that need to be brought over from #529 to ensure we're handling the various versions correctly\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-14T02:14:05Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603", "merged": true, "mergeCommit": {"oid": "9294d420c129a65e88261874fe32290d54043403"}, "closed": true, "closedAt": "2020-03-16T21:02:21Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNZEtUAH2gAyMzg4MTEyNzQxOjMwMzEwNmM2OWEyMDM4ZmY0ZDI3MGQ5MDUxZTQ1YTBjOGY3MmQyYTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOUmHEgFqTM3NTU3OTM1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "303106c69a2038ff4d270d9051e45a0c8f72d2a3", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/303106c69a2038ff4d270d9051e45a0c8f72d2a3", "committedDate": "2020-03-13T23:39:52Z", "message": "Updated reqtosql tests to use integrationdbops helper methods\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5363e62ef1afd859d62a067ced9d6fd608e27087", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5363e62ef1afd859d62a067ced9d6fd608e27087", "committedDate": "2020-03-14T02:07:19Z", "message": "Split operation files into domain and db\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e2ae273139a418ad5e49f2c3c95eed2bc2e3e1f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0e2ae273139a418ad5e49f2c3c95eed2bc2e3e1f", "committedDate": "2020-03-16T02:08:28Z", "message": "Add no transaction and r3 specific spec test files\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/985507d381e6a359f484a8262c9ccee040c61513", "committedDate": "2020-03-16T02:18:55Z", "message": "Removed record file fk logic from tests as no longer applicable with flyway 1.19 migration\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzYyMDM4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#pullrequestreview-374762038", "createdAt": "2020-03-15T00:06:45Z", "commit": {"oid": "5363e62ef1afd859d62a067ced9d6fd608e27087"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozMTowOVrOF25oZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1Nzo0MlrOF26yfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMTY1NQ==", "bodyText": "3 is missing. Even if hardcoded it should have same output here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393111655", "createdAt": "2020-03-16T15:31:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/balances-01-no-args.spec.json", "diffHunk": "@@ -32,10 +133,6 @@\n         \"account\": \"0.15.4\",\n         \"balance\": 40\n       },\n-      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTkwNQ==", "bodyText": "filename should follow the pattern of <api>-<num>-<test>.spec.json where number is incrementing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393115905", "createdAt": "2020-03-16T15:37:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-none.spec.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNjA2Nw==", "bodyText": "filename should follow the pattern of <api>-<num>-<test>.spec.json where number is incrementing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393116067", "createdAt": "2020-03-16T15:37:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "diffHunk": "@@ -0,0 +1,74 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExODM4Mw==", "bodyText": "How does this work? The only data in the database is a single cryptotransfer per setup and without Mike's branch to itemize it how is this getting broken up into finer grained transfers? edit: I see now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393118383", "createdAt": "2020-03-16T15:40:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "diffHunk": "@@ -0,0 +1,74 @@\n+{\n+  \"description\": \"R3-style transferlist (already itemized by HAPI)\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1234\n+      },\n+      {\n+        \"entity_num\": 9876\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [\n+      {\n+        \"consensus_timestamp\": \"1234567890000000000\",\n+        \"payerAccountId\": \"0.0.9876\",\n+        \"recipientAccountId\": \"0.0.1234\",\n+        \"amount\": 128\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/transactions\",\n+  \"responseStatus\": 200,\n+  \"responseJson\": {\n+    \"transactions\": [\n+      {\n+        \"consensus_timestamp\": \"1234567890.000000000\",\n+        \"valid_start_timestamp\": \"1234567889.999999999\",\n+        \"charged_tx_fee\": 7,\n+        \"memo_base64\": null,\n+        \"result\": \"SUCCESS\",\n+        \"name\": \"CRYPTOTRANSFER\",\n+        \"max_fee\": \"33\",\n+        \"valid_duration_seconds\": \"11\",\n+        \"node\": \"0.0.3\",\n+        \"transaction_id\": \"0.0.9876-1234567889-999999999\",\n+        \"transfers\": [\n+          {\n+            \"account\": \"0.0.3\",\n+            \"amount\": 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExOTk2Mg==", "bodyText": "Do we really need balances to be populated to get transactions? As far as I know it shouldn't join against it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393119962", "createdAt": "2020-03-16T15:42:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-02-specific-id.spec.json", "diffHunk": "@@ -1,31 +1,79 @@\n {\n-  \"url\": \"/api/v1/transactions/0.15.10-0000000000-000001049\",\n+  \"description\": \"Transaction api calls for a specific transactions\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 9\n+      },\n+      {\n+        \"entity_num\": 10\n+      }\n+    ],\n+    \"balances\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ==", "bodyText": "I don't think we should have some data added in spec file and some hardcoded. I would prefer all be added via spec so it's clear from spec alone what state of database is and what output should be.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393126465", "createdAt": "2020-03-16T15:51:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMDYyMA==", "bodyText": "This logic seems to be an improper carryover from Mike's branch to test the itemizing logic. We shouldn't be itemizing/de-itemizing anything, just taking the cryptotransfers as is.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393130620", "createdAt": "2020-03-16T15:57:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));\n+  await addAccount(toAccount(NODE_ACCOUNT_ID));\n+  await loadAccounts(testDataJson['accounts']);\n+  await loadBalances(testDataJson['balances']);\n+  await loadCryptoTransfers(testDataJson['cryptotransfers']);\n+  await loadTransactions(testDataJson['transactions']);\n+};\n+\n+const loadAccounts = async function(accounts) {\n+  if (accounts == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < accounts.length; ++i) {\n+    await addAccount(accounts[i]);\n+  }\n+};\n+\n+const loadBalances = async function(balances) {\n+  if (balances == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < balances.length; ++i) {\n+    await setAccountBalance(balances[i]);\n+  }\n+};\n+\n+const loadCryptoTransfers = async function(cryptoTransfers) {\n+  if (cryptoTransfers == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < cryptoTransfers.length; ++i) {\n+    await addCryptoTransaction(cryptoTransfers[i]);\n+  }\n+};\n+\n+const loadTransactions = async function(transactions) {\n+  if (transactions == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < transactions.length; ++i) {\n+    await addTransaction(transactions[i]);\n+  }\n+};\n+\n+const getAccountId = function(account) {\n+  return account.entity_shard + '.' + account.entity_realm + '.' + account.entity_num;\n+};\n+\n+const toAccount = function(str) {\n+  let tokens = str.split('.');\n+  return {\n+    entity_shard: tokens[0],\n+    entity_realm: tokens[1],\n+    entity_num: tokens[2]\n+  };\n+};\n+\n+const addAccount = async function(account) {\n+  account = Object.assign({entity_shard: 0, entity_realm: 0, exp_time_ns: null}, account);\n+\n+  let e = accountEntityIds[account.entity_num];\n+  if (e) {\n+    return e;\n+  }\n+\n+  let res = await sqlConnection.query(\n+    'insert into t_entities (fk_entity_type_id, entity_shard, entity_realm, entity_num, exp_time_ns, deleted) values ($1, $2, $3, $4, $5, $6) returning id;',\n+    [1, account.entity_shard, account.entity_realm, account.entity_num, account.exp_time_ns, false]\n+  );\n+  e = res.rows[0]['id'];\n+  accountEntityIds[getAccountId(account)] = e;\n+\n+  return e;\n+};\n+\n+const setAccountBalance = async function(account) {\n+  account = Object.assign({timestamp: 0, realm_num: 0, id: null, balance: 0}, account);\n+  await sqlConnection.query(\n+    'insert into account_balances (consensus_timestamp, account_realm_num, account_num, balance) values ($1, $2, $3, $4);',\n+    [account.timestamp, account.realm_num, account.id, account.balance]\n+  );\n+};\n+\n+const aggregateTransfers = function(transaction) {\n+  let set = new Set();\n+  transaction.transfers.forEach(transfer => {\n+    let accountId = getAccountId(transfer);\n+    let val = set[accountId];\n+    if (undefined === val) {\n+      set[accountId] = transfer;\n+    } else {\n+      set[accountId].amount += transfer.amount;\n+    }\n+  });\n+  transaction.transfers = Object.values(set);\n+};\n+\n+const addRecordFile = async function(recordFileName) {\n+  let res = await sqlConnection.query('insert into t_record_files (name) values ($1) returning id;', [recordFileName]);\n+\n+  recordFileId = res.rows[0]['id'];\n+  return recordFileId;\n+};\n+\n+const addTransaction = async function(transaction) {\n+  transaction = Object.assign(\n+    {\n+      type: 14,\n+      result: 22,\n+      max_fee: 33,\n+      valid_duration_seconds: 11,\n+      transfers: [],\n+      non_fee_transfers: [],\n+      charged_tx_fee: NODE_FEE + NETWORK_FEE + SERVICE_FEE\n+    },\n+    transaction\n+  );\n+\n+  transaction.consensus_timestamp = math.bignumber(transaction.consensus_timestamp);\n+\n+  await sqlConnection.query(\n+    'insert into t_transactions (consensus_ns, valid_start_ns, fk_rec_file_id, fk_payer_acc_id, fk_node_acc_id, result, type, valid_duration_seconds, max_fee, charged_tx_fee) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);',\n+    [\n+      transaction.consensus_timestamp.toString(),\n+      transaction.consensus_timestamp.minus(1).toString(),\n+      0,\n+      accountEntityIds[transaction.payerAccountId],\n+      accountEntityIds[NODE_ACCOUNT_ID],\n+      transaction.result,\n+      transaction.type,\n+      transaction.valid_duration_seconds,\n+      transaction.max_fee,\n+      transaction.charged_tx_fee\n+    ]\n+  );\n+\n+  if (transaction['aggregate_transfers']) {\n+    aggregateTransfers(transaction);\n+  }\n+\n+  for (let i = 0; i < transaction.transfers.length; ++i) {\n+    let transfer = transaction.transfers[i];\n+    await sqlConnection.query(\n+      'insert into t_cryptotransferlists (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+\n+  for (let i = 0; i < transaction.non_fee_transfers.length; ++i) {\n+    let transfer = transaction.non_fee_transfers[i];\n+    await sqlConnection.query(\n+      'insert into non_fee_transfers (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+};\n+\n+const addCryptoTransaction = async function(cryptoTransfer) {\n+  if (!('senderAccountId' in cryptoTransfer)) {\n+    cryptoTransfer.senderAccountId = cryptoTransfer.payerAccountId;\n+  }\n+  let sender = toAccount(cryptoTransfer.senderAccountId);\n+  let recipient = toAccount(cryptoTransfer.recipientAccountId);\n+  if (!('transfers' in cryptoTransfer)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 204}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae318f5bdc8ec4355fcfdac0221f39fffbc4c030", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae318f5bdc8ec4355fcfdac0221f39fffbc4c030", "committedDate": "2020-03-16T17:22:32Z", "message": "Renamed spec files and removed balance setting from the transfer specs\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c535568fe668ca683272893de2364dc18d84bd", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b0c535568fe668ca683272893de2364dc18d84bd", "committedDate": "2020-03-16T18:24:53Z", "message": "Revert itemization logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ddccc4853100451745b4d70ec55999c9a363eb0a", "committedDate": "2020-03-16T20:15:43Z", "message": "Moved node and treasury account config into spec so state is clearer and more confirgurable\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTU4ODM2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#pullrequestreview-375558836", "createdAt": "2020-03-16T20:28:11Z", "commit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoxMVrOF3EmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoyMFrOF3EmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM2MA==", "bodyText": "9 xfers?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393291360", "createdAt": "2020-03-16T20:28:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTQ0MA==", "bodyText": "3 xfers?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393291440", "createdAt": "2020-03-16T20:28:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {\n   let sql = transactions.reqToSql({query: {}});\n   let res = await integrationDbOps.runSqlQuery(sql.query, sql.params);\n   expect(res.rowCount).toEqual(9);\n   expect(mapTransactionResults(res.rows).sort()).toEqual([\n     '@1050: account 10 \\u0127-11',\n-    '@1050: account 2 \\u01271',\n     '@1050: account 9 \\u012710',\n+    '@1050: account 98 \\u01271',\n     '@1051: account 10 \\u0127-21',\n-    '@1051: account 2 \\u01271',\n     '@1051: account 9 \\u012720',\n-    '@1052: account 2 \\u01271',\n+    '@1051: account 98 \\u01271',\n     '@1052: account 8 \\u0127-31',\n-    '@1052: account 9 \\u012730'\n+    '@1052: account 9 \\u012730',\n+    '@1052: account 98 \\u01271'\n   ]);\n });\n \n-test('DB integration test - transactions.reqToSql - single valid account - 1 txn 3 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - single valid account - 1 txn 7 xfers', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 231}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187aac25d79e984e23fc391f71ef1446461f2ace", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/187aac25d79e984e23fc391f71ef1446461f2ace", "committedDate": "2020-03-16T20:49:07Z", "message": "Updated test comment with transaction count expectation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTczMjYz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#pullrequestreview-375573263", "createdAt": "2020-03-16T20:50:45Z", "commit": {"oid": "187aac25d79e984e23fc391f71ef1446461f2ace"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTc5MzU4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#pullrequestreview-375579358", "createdAt": "2020-03-16T21:00:45Z", "commit": {"oid": "187aac25d79e984e23fc391f71ef1446461f2ace"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3335, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}