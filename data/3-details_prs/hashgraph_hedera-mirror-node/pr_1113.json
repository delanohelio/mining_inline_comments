{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMTkzODU5", "number": 1113, "title": "HTS: Token supply distribution REST API", "bodyText": "Detailed description:\n\nAdd HTS token supply distribution REST API\nUpdate HTS design doc wrt token supply distribution REST API optional filters\nAdd unit tests and integration tests for new API\nFix mockpool returning entity ID as number instead of string\n\nWhich issue(s) this PR fixes:\nFixes #1104\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-10-08T21:15:47Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113", "merged": true, "mergeCommit": {"oid": "357599e451ec513ae064834cbbce2149a5fcdc50"}, "closed": true, "closedAt": "2020-10-14T20:25:34Z", "author": {"login": "xin-hedera"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQoBKpAH2gAyNTAwMTkzODU5OjNmMGM0MzcwODI2ZjE1M2U4ZTliYzY3Y2Y3ZjNkZDZiMTA1ZmZhYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSi7-OgFqTUwODY5MTA3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f0c4370826f153e8e9bc67cf7f3dd6b105ffaa7", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3f0c4370826f153e8e9bc67cf7f3dd6b105ffaa7", "committedDate": "2020-10-08T20:57:30Z", "message": "token supply distribution REST api\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f1e351e025ea145f681b7a888c85a2fc29f0ce16", "committedDate": "2020-10-08T20:59:28Z", "message": "Merge remote-tracking branch 'origin/master' into hts-token-supply-distribution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTcyNzYy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505172762", "createdAt": "2020-10-08T21:17:40Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToxNzo0MFrOHewvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToxNzo0MFrOHewvlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxNzk0MQ==", "bodyText": "sorting desc because by default the token supply distribution response is ordered by account_id in desc order", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502017941", "createdAt": "2020-10-08T21:17:40Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__token_balance_index.sql", "diffHunk": "@@ -0,0 +1,3 @@\n+-- Add index for query by consensus_timestamp followed by token_id\n+create index if not exists token_balance__timestamp_token_account\n+    on token_balance (consensus_timestamp desc, token_id desc, account_id desc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc1MTAy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505175102", "createdAt": "2020-10-08T21:21:39Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMTozOVrOHew2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMTozOVrOHew2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxOTc2OQ==", "bodyText": "mockpool should return encoded entity ID as string instead of Number to be consistent with pg pool", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502019769", "createdAt": "2020-10-08T21:21:39Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/mockpool.js", "diffHunk": "@@ -176,20 +177,22 @@ class Pool {\n     // Create a mock response based on the sql query parameters\n     let rows = [];\n     for (let i = 0; i < limit.high; i++) {\n-      let row = {};\n-      row.payer_account_id = EntityId.of(0, 0, i).getEncodedId();\n+      const row = {};\n+      row.payer_account_id = EntityId.of(0, 0, i).getEncodedId().toString();\n       row.memo = Buffer.from(`Test memo ${i}`);\n       row.consensus_ns = this.toNs(this.timeNow - i);\n       row.valid_start_ns = this.toNs(this.timeNow - i - 1);\n       row.result = 'SUCCESS';\n       row.type = 14;\n       row.name = 'CRYPTOTRANSFER';\n-      row.node_account_id = EntityId.of(0, 0, i % this.NUM_NODES).getEncodedId();\n+      row.node_account_id = EntityId.of(0, 0, i % this.NUM_NODES).getEncodedId().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc1Mzc1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505175375", "createdAt": "2020-10-08T21:22:08Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjowOFrOHew3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjowOFrOHew3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxOTk4Ng==", "bodyText": "mockpool should return encoded entity ID as string instead of Number to be consistent with pg pool", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502019986", "createdAt": "2020-10-08T21:22:08Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/mockpool.js", "diffHunk": "@@ -176,20 +177,22 @@ class Pool {\n     // Create a mock response based on the sql query parameters\n     let rows = [];\n     for (let i = 0; i < limit.high; i++) {\n-      let row = {};\n-      row.payer_account_id = EntityId.of(0, 0, i).getEncodedId();\n+      const row = {};\n+      row.payer_account_id = EntityId.of(0, 0, i).getEncodedId().toString();\n       row.memo = Buffer.from(`Test memo ${i}`);\n       row.consensus_ns = this.toNs(this.timeNow - i);\n       row.valid_start_ns = this.toNs(this.timeNow - i - 1);\n       row.result = 'SUCCESS';\n       row.type = 14;\n       row.name = 'CRYPTOTRANSFER';\n-      row.node_account_id = EntityId.of(0, 0, i % this.NUM_NODES).getEncodedId();\n+      row.node_account_id = EntityId.of(0, 0, i % this.NUM_NODES).getEncodedId().toString();\n       row.ctl_entity_id = EntityId.of(\n         0,\n         0,\n         Number(accountNum.low) + (accountNum.high == accountNum.low ? 0 : i % (accountNum.high - accountNum.low))\n-      ).getEncodedId();\n+      )\n+        .getEncodedId()\n+        .toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc1NTMx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505175531", "createdAt": "2020-10-08T21:22:22Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjoyM1rOHew4Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjoyM1rOHew4Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMDEwMw==", "bodyText": "mockpool should return encoded entity ID as string instead of Number to be consistent with pg pool", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502020103", "createdAt": "2020-10-08T21:22:23Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/mockpool.js", "diffHunk": "@@ -259,10 +263,10 @@ class Pool {\n     // Create a mock response based on the sql query parameters\n     let rows = [];\n     for (let i = 0; i < limit.high; i++) {\n-      let row = {};\n+      const row = {};\n       row.consensus_timestamp = this.toNs(Math.floor((timestamp.low + timestamp.high) / 2));\n       row.account_id =\n-        Number(accountNum.high) - (accountNum.high == accountNum.low ? 0 : i % (accountNum.high - accountNum.low));\n+        `${Number(accountNum.high) - (accountNum.high === accountNum.low ? 0 : i % (accountNum.high - accountNum.low))}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc1NjQ4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505175648", "createdAt": "2020-10-08T21:22:32Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjozM1rOHew4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyMjozM1rOHew4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMDE5Nw==", "bodyText": "mockpool should return encoded entity ID as string instead of Number to be consistent with pg pool", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502020197", "createdAt": "2020-10-08T21:22:33Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/__tests__/mockpool.js", "diffHunk": "@@ -326,7 +330,7 @@ class Pool {\n       row.account_balance = balance.low + Math.floor((balance.high - balance.low) / limit.high);\n       row.consensus_timestamp = this.toNs(this.timeNow);\n       row.entity_id =\n-        Number(accountNum.high) - (accountNum.high == accountNum.low ? 0 : i % (accountNum.high - accountNum.low));\n+        `${Number(accountNum.high) - (accountNum.high == accountNum.low ? 0 : i % (accountNum.high - accountNum.low))}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc4NTg1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505178585", "createdAt": "2020-10-08T21:27:32Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyNzozMlrOHexBfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyNzozMlrOHexBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMjUyNg==", "bodyText": "cast token_id from bigint to text then build json object, otherwise since it's wrapped into a JSON object, the type of column (bigint) is lost, pg won't be able to present it as string as workaround for javascript Number precesion issue", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502022526", "createdAt": "2020-10-08T21:27:32Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -72,7 +71,7 @@ const getAccountQuery = (extraWhereCondition, orderClause, order, query) => {\n          select\n            json_agg(\n              json_build_object(\n-               'token_id', tb.token_id,\n+               'token_id', tb.token_id::text,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc4NzE3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505178717", "createdAt": "2020-10-08T21:27:47Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyNzo0N1rOHexB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyNzo0N1rOHexB5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMjYyOA==", "bodyText": "cast token_id from bigint to text then build json object, otherwise since it's wrapped into a JSON object, the type of column (bigint) is lost, pg won't be able to present it as string as workaround for javascript Number precesion issue", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502022628", "createdAt": "2020-10-08T21:27:47Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/balances.js", "diffHunk": "@@ -90,7 +76,7 @@ const getBalances = async (req, res) => {\n         ab.balance,\n         json_agg(\n           json_build_object(\n-            'token_id', tb.token_id,\n+            'token_id', tb.token_id::text,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTc4ODY3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-505178867", "createdAt": "2020-10-08T21:28:02Z", "commit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyODowMlrOHexCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyODowMlrOHexCSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMjcyOA==", "bodyText": "cast token_id and account_id from bigint to text then build json object, otherwise since it's wrapped into a JSON object, the type of column (bigint) is lost, pg won't be able to present it as string as workaround for javascript Number precesion issue", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r502022728", "createdAt": "2020-10-08T21:28:02Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -47,8 +47,8 @@ const getSelectClauseWithTokenTransferOrder = (order) => {\n        ctl.amount AS amount,\n        json_agg(\n          json_build_object(\n-           'token_id', ttl.token_id,\n-           'account_id', ttl.account_id,\n+           'token_id', ttl.token_id::text,\n+           'account_id', ttl.account_id::text,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e351e025ea145f681b7a888c85a2fc29f0ce16"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b156f7e061e551fcbb4405d942bec7d8b6c3868a", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b156f7e061e551fcbb4405d942bec7d8b6c3868a", "committedDate": "2020-10-08T21:34:08Z", "message": "fix entity's default type, refine some comments\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3211c75210c2a6d84de0b0f95f76fc4cfc32b0b1", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3211c75210c2a6d84de0b0f95f76fc4cfc32b0b1", "committedDate": "2020-10-12T16:03:49Z", "message": "Merge branch 'master' into hts-token-supply-distribution\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>\n\n# Conflicts:\n#\thedera-mirror-rest/__tests__/integrationDomainOps.js\n#\thedera-mirror-rest/__tests__/testutils.js\n#\thedera-mirror-rest/__tests__/tokens.test.js\n#\thedera-mirror-rest/server.js\n#\thedera-mirror-rest/tokens.js\n#\thedera-mirror-rest/utils.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21bf07775dac2a828724250b58818d12ce8bb759", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/21bf07775dac2a828724250b58818d12ce8bb759", "committedDate": "2020-10-12T16:18:22Z", "message": "update limit test case\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b16cc2eda4e01d33846c263fec85cd44dd22fcac", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b16cc2eda4e01d33846c263fec85cd44dd22fcac", "committedDate": "2020-10-12T16:49:25Z", "message": "more clean up\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzYwNzU1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-506760755", "createdAt": "2020-10-12T16:25:10Z", "commit": {"oid": "21bf07775dac2a828724250b58818d12ce8bb759"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyNToxMFrOHgFZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowMDoxMlrOHgGgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkyMQ==", "bodyText": "You can use just publickey. I added that in my PR for tokens", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503404921", "createdAt": "2020-10-12T16:25:10Z", "author": {"login": "Nana-EC"}, "path": "docs/design/hts.md", "diffHunk": "@@ -497,10 +497,11 @@ To achieve the goals and for easy integration with existing users the REST API s\n ```\n \n Optional Filters\n--   `/api/v1/tokens/<token_id>/balances?id=0.0.1000`\n--   `/api/v1/tokens/<token_id>/balances?balance=gt:1000`\n+-   `/api/v1/tokens/<token_id>/balances?order=asc`\n+-   `/api/v1/tokens/<token_id>/balances?account.id=0.0.1000`\n+-   `/api/v1/tokens/<token_id>/balances?account.balance=gt:1000`\n -   `/api/v1/tokens/<token_id>/balances?timestamp=1566562500.040961001`\n--   `/api/v1/tokens/<token_id>/balances?publicKey=2b60955bcbf0cf5e9ea880b52e5b63f664b08edf6ed15e301049517438d61864`\n+-   `/api/v1/tokens/<token_id>/balances?account.publickey=2b60955bcbf0cf5e9ea880b52e5b63f664b08edf6ed15e301049517438d61864`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bf07775dac2a828724250b58818d12ce8bb759"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMzA4MQ==", "bodyText": "I've been trying to filter out the use of the utils.parseTimestampQueryParam, utils.parseAccountIdQueryParam, utils.parseBalanceQueryParam , utils.parseLimitAndOrderParams and utils.parsePublicKeyQueryParam.\nIt's older logic that accounts, balances and transactions endpoints established. Each method ends up puling all the query items form the request then pulling out the desired query and verifying it.\nI've been trying to move to\n\nPulling out all query items once using const filters = utils.buildFilterObject(req.query);\nVerifying them all at once using utils.validateAndParseFilters(filters);\nBuilding the sql query with logic similar to extractSqlFromTokenRequest\n\nIt would be great if we can conform to that.\nI'm hoping in a future backlog PR to rip out the aforementioned ones in favor of this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503423081", "createdAt": "2020-10-12T17:00:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,127 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+const extractSqlFromTokenBalancesRequest = (req, tokenId) => {\n+  // transform the timestamp=xxxx or timestamp=eq:xxxx query in url to 'timestamp <= xxxx' SQL query condition\n+  const [tsQuery, tsParams] = utils.parseTimestampQueryParam(req.query, 'tb.consensus_timestamp', {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bf07775dac2a828724250b58818d12ce8bb759"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODA0MjE5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-506804219", "createdAt": "2020-10-12T17:37:46Z", "commit": {"oid": "b16cc2eda4e01d33846c263fec85cd44dd22fcac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNzo0N1rOHgHlEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNzo0N1rOHgHlEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MDY1Nw==", "bodyText": "I know having addToken and addAccount call addEntity makes for less code but I think it also results in having the spec objects define objects similar to the proto objects that don't equate to a importer domain object.\nI believe the intent on the spec setup objects was to have a 1:1 object representation of a row in an existing table.\nIn that sense we should keep the current logic and specify an entity and a token object when adding a token.\nAs future entities that differ from accounts are added they are likely to be like token and require extra properties not found int he t_entities table.\nFurthermore, this supports testing scenarios where a token row exists but say the entity row is missing.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503440657", "createdAt": "2020-10-12T17:37:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -306,38 +315,62 @@ const addTopicMessage = async function (message) {\n   );\n };\n \n-const addToken = async function (token) {\n-  // create token object\n-  token = Object.assign(\n+const addToken = async (token) => {\n+  const tokenId = EntityId.fromString(token.token_id);\n+  await addEntity(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16cc2eda4e01d33846c263fec85cd44dd22fcac"}, "originalPosition": 226}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae1bd43ea973b0a5bb96fc1b6bb016a11655180", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4ae1bd43ea973b0a5bb96fc1b6bb016a11655180", "committedDate": "2020-10-12T21:08:18Z", "message": "new token balances request to sql query flow\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bcf68ffa60bba4a631219f3ba56936b9f95ce6b", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3bcf68ffa60bba4a631219f3ba56936b9f95ce6b", "committedDate": "2020-10-12T21:09:58Z", "message": "update design doc\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083", "committedDate": "2020-10-12T21:34:07Z", "message": "move token entity definition into a separate 'entities' array in json spec\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTg5MzE4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-506989318", "createdAt": "2020-10-13T00:10:23Z", "commit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDoxMDoyM1rOHgRLGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDo1NDoxNFrOHgR1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5Nzg1MA==", "bodyText": "I saw this too.\nEnded up doing fs.mkdirSync(flywayDataPath, {recursive: true}); but this works too", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503597850", "createdAt": "2020-10-13T00:10:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDbOps.js", "diffHunk": "@@ -106,7 +106,9 @@ const flywayMigrate = function () {\n }\n `;\n \n-  fs.mkdirSync(flywayDataPath);\n+  if (!fs.existsSync(flywayDataPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMTU1MQ==", "bodyText": "nit: I think we should just have this as tokenId like we have with topicId.\nI don't think we want to keep the x.y naming convention used by accounts", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503601551", "createdAt": "2020-10-13T00:25:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,165 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  PUBLIC_KEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {\n+  'account.balance': tokenBalancesSqlQueryColumns.ACCOUNT_BALANCE,\n+  'account.id': tokenBalancesSqlQueryColumns.ACCOUNT_ID,\n+  publickey: tokenBalancesSqlQueryColumns.PUBLIC_KEY,\n+};\n+\n+const tokenBalancesSelectQuery = `\n+  SELECT\n+    tb.consensus_timestamp,\n+    tb.account_id,\n+    tb.balance\n+  FROM token_balance tb`;\n+\n+/**\n+ * Extracts SQL query, params, order, and limit\n+ *\n+ * @param {EntityId} tokenId token ID object\n+ * @param {string} pgSqlQuery initial pg SQL query string\n+ * @param {[]}filters parsed and validated filters\n+ * @return {{query: string, limit: number, params: [], order: 'asc'|'desc'}}\n+ */\n+const extractSqlFromTokenBalancesRequest = (tokenId, pgSqlQuery, filters) => {\n+  const {opsMap} = utils;\n+\n+  let limit = config.maxLimit;\n+  let order = 'desc';\n+  let joinEntityClause = '';\n+  let whereClause = `WHERE ${tokenBalancesSqlQueryColumns.TOKEN_ID} = $1`;\n+  let nextParamCount = 2;\n+  let tsQueryWhereClause = '';\n+  const pgSqlParams = [tokenId.getEncodedId()];\n+\n+  for (const filter of filters) {\n+    switch (filter.key) {\n+      case constants.filterKeys.ENTITY_PUBLICKEY:\n+        joinEntityClause = `JOIN t_entities e\n+          ON e.fk_entity_type_id = ${utils.ENTITY_TYPE_ACCOUNT}\n+          AND e.id = tb.account_id\n+          AND e.ed25519_public_key_hex = $${nextParamCount++}`;\n+        pgSqlParams.push(filter.value);\n+        break;\n+      case constants.filterKeys.LIMIT:\n+        limit = filter.value;\n+        break;\n+      case constants.filterKeys.ORDER:\n+        order = filter.value;\n+        break;\n+      case constants.filterKeys.TIMESTAMP:\n+        // transform '=' operator for timestamp to '<='\n+        const op = filter.operator !== opsMap.eq ? filter.operator : opsMap.lte;\n+        tsQueryWhereClause = `WHERE ${tokenBalancesSqlQueryColumns.CONSENSUS_TIMESTAMP} ${op} $${nextParamCount++}`;\n+        pgSqlParams.push(filter.value);\n+        break;\n+      default:\n+        const columnKey = tokenBalancesFilterColumnMap[filter.key];\n+        if (!columnKey) {\n+          break;\n+        }\n+\n+        whereClause = `${whereClause}\n+          AND ${columnKey} ${filter.operator} $${nextParamCount++}`;\n+        pgSqlParams.push(filter.value);\n+        break;\n+    }\n+  }\n+\n+  whereClause = `${whereClause}\n+    AND ${tokenBalancesSqlQueryColumns.CONSENSUS_TIMESTAMP} = (\n+      SELECT\n+        ${tokenBalancesSqlQueryColumns.CONSENSUS_TIMESTAMP}\n+      FROM token_balance tb\n+      ${tsQueryWhereClause}\n+      ORDER BY ${tokenBalancesSqlQueryColumns.CONSENSUS_TIMESTAMP} DESC\n+      LIMIT 1\n+    )`;\n+  const query = `${pgSqlQuery}\n+    ${joinEntityClause}\n+    ${whereClause}\n+    ORDER BY ${tokenBalancesSqlQueryColumns.ACCOUNT_ID} ${order}\n+    LIMIT $${nextParamCount}`;\n+  pgSqlParams.push(limit);\n+  return utils.buildPgSqlObject(query, pgSqlParams, order, limit);\n+};\n+\n+const formatTokenBalanceRow = (row) => {\n+  return {\n+    account: EntityId.fromString(row.account_id).toString(),\n+    balance: Number(row.balance),\n+  };\n+};\n+\n+/**\n+ * Handler function for /tokens/:id/balances API.\n+ *\n+ * @param {Request} req HTTP request object\n+ * @param {Response} res HTTP response object\n+ * @return {Promise} Promise for PostgreSQL query\n+ */\n+const getTokenBalances = async (req, res) => {\n+  let tokenId;\n+  try {\n+    tokenId = EntityId.fromString(req.params.id);\n+  } catch (err) {\n+    throw InvalidArgumentError.forParams('token.id');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNjE2Mg==", "bodyText": "This should be the publickey of the token entity not the account entity.\nIf a user wants to filter by the account public key for balances they would just use the /balances endpoint currently.\nHowever, this brings up maybe a feature enhancement of adding filtering by publickey for both token and account entities.\nFor now we should do token, you can always create a Feature request for account.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503606162", "createdAt": "2020-10-13T00:43:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,165 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  PUBLIC_KEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {\n+  'account.balance': tokenBalancesSqlQueryColumns.ACCOUNT_BALANCE,\n+  'account.id': tokenBalancesSqlQueryColumns.ACCOUNT_ID,\n+  publickey: tokenBalancesSqlQueryColumns.PUBLIC_KEY,\n+};\n+\n+const tokenBalancesSelectQuery = `\n+  SELECT\n+    tb.consensus_timestamp,\n+    tb.account_id,\n+    tb.balance\n+  FROM token_balance tb`;\n+\n+/**\n+ * Extracts SQL query, params, order, and limit\n+ *\n+ * @param {EntityId} tokenId token ID object\n+ * @param {string} pgSqlQuery initial pg SQL query string\n+ * @param {[]}filters parsed and validated filters\n+ * @return {{query: string, limit: number, params: [], order: 'asc'|'desc'}}\n+ */\n+const extractSqlFromTokenBalancesRequest = (tokenId, pgSqlQuery, filters) => {\n+  const {opsMap} = utils;\n+\n+  let limit = config.maxLimit;\n+  let order = 'desc';\n+  let joinEntityClause = '';\n+  let whereClause = `WHERE ${tokenBalancesSqlQueryColumns.TOKEN_ID} = $1`;\n+  let nextParamCount = 2;\n+  let tsQueryWhereClause = '';\n+  const pgSqlParams = [tokenId.getEncodedId()];\n+\n+  for (const filter of filters) {\n+    switch (filter.key) {\n+      case constants.filterKeys.ENTITY_PUBLICKEY:\n+        joinEntityClause = `JOIN t_entities e\n+          ON e.fk_entity_type_id = ${utils.ENTITY_TYPE_ACCOUNT}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNjkyNg==", "bodyText": "According to the design doc this should only contain id, balance, timestamp and publickey", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503606926", "createdAt": "2020-10-13T00:46:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,165 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  PUBLIC_KEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNzQxNA==", "bodyText": "You'd want to have this check first to make sure all cases processed are allowed queries.\nFor instance timestamp is working but is not in the list of tokenBalancesFilterColumnMap", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503607414", "createdAt": "2020-10-13T00:48:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,165 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  PUBLIC_KEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {\n+  'account.balance': tokenBalancesSqlQueryColumns.ACCOUNT_BALANCE,\n+  'account.id': tokenBalancesSqlQueryColumns.ACCOUNT_ID,\n+  publickey: tokenBalancesSqlQueryColumns.PUBLIC_KEY,\n+};\n+\n+const tokenBalancesSelectQuery = `\n+  SELECT\n+    tb.consensus_timestamp,\n+    tb.account_id,\n+    tb.balance\n+  FROM token_balance tb`;\n+\n+/**\n+ * Extracts SQL query, params, order, and limit\n+ *\n+ * @param {EntityId} tokenId token ID object\n+ * @param {string} pgSqlQuery initial pg SQL query string\n+ * @param {[]}filters parsed and validated filters\n+ * @return {{query: string, limit: number, params: [], order: 'asc'|'desc'}}\n+ */\n+const extractSqlFromTokenBalancesRequest = (tokenId, pgSqlQuery, filters) => {\n+  const {opsMap} = utils;\n+\n+  let limit = config.maxLimit;\n+  let order = 'desc';\n+  let joinEntityClause = '';\n+  let whereClause = `WHERE ${tokenBalancesSqlQueryColumns.TOKEN_ID} = $1`;\n+  let nextParamCount = 2;\n+  let tsQueryWhereClause = '';\n+  const pgSqlParams = [tokenId.getEncodedId()];\n+\n+  for (const filter of filters) {\n+    switch (filter.key) {\n+      case constants.filterKeys.ENTITY_PUBLICKEY:\n+        joinEntityClause = `JOIN t_entities e\n+          ON e.fk_entity_type_id = ${utils.ENTITY_TYPE_ACCOUNT}\n+          AND e.id = tb.account_id\n+          AND e.ed25519_public_key_hex = $${nextParamCount++}`;\n+        pgSqlParams.push(filter.value);\n+        break;\n+      case constants.filterKeys.LIMIT:\n+        limit = filter.value;\n+        break;\n+      case constants.filterKeys.ORDER:\n+        order = filter.value;\n+        break;\n+      case constants.filterKeys.TIMESTAMP:\n+        // transform '=' operator for timestamp to '<='\n+        const op = filter.operator !== opsMap.eq ? filter.operator : opsMap.lte;\n+        tsQueryWhereClause = `WHERE ${tokenBalancesSqlQueryColumns.CONSENSUS_TIMESTAMP} ${op} $${nextParamCount++}`;\n+        pgSqlParams.push(filter.value);\n+        break;\n+      default:\n+        const columnKey = tokenBalancesFilterColumnMap[filter.key];\n+        if (!columnKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNzgyMg==", "bodyText": "Where id and publicKey are those of the token entity not the account entity", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503607822", "createdAt": "2020-10-13T00:50:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,165 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  PUBLIC_KEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNjkyNg=="}, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwODMyMw==", "bodyText": "Should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"url\": \"/api/v1/tokens/0.20.1/balances?account.id=gte:0.1.18&account.id=lt:0.1.20&account.balance=gt:45&publickey=3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be&timestamp=1566560003.000000000&order=asc\",\n          \n          \n            \n              \"url\": \"/api/v1/tokens/0.20.1/balances?id=gte:0.1.18&id=lt:0.1.20&balance=gt:45&publickey=3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be&timestamp=1566560003.000000000&order=asc\",", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503608323", "createdAt": "2020-10-13T00:52:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-balances-06-all-params.spec.json", "diffHunk": "@@ -0,0 +1,254 @@\n+{\n+  \"description\": \"Token balances api call using all params\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 17,\n+        \"entity_realm\": 1,\n+        \"entity_shard\": 0,\n+        \"public_key\": \"6ceecd8bb224da4914d53f292e5624f6f4cf8c134c920e1cac8d06f879df5819\",\n+        \"exp_time_ns\": 123456781,\n+        \"auto_renew_period\": 11111,\n+        \"key\": [1, 1, 1]\n+      },\n+      {\n+        \"entity_num\": 18,\n+        \"entity_realm\": 1,\n+        \"entity_shard\": 0,\n+        \"public_key\": \"519a008fabde4d28d68293c71fcdcdcca38d8fae6102a832b31e802f257fd1d9\",\n+        \"exp_time_ns\": 123456782,\n+        \"auto_renew_period\": 22222,\n+        \"key\": [2, 2, 2]\n+      },\n+      {\n+        \"entity_num\": 19,\n+        \"entity_realm\": 1,\n+        \"entity_shard\": 0,\n+        \"public_key\": \"3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be\",\n+        \"exp_time_ns\": 123456783,\n+        \"auto_renew_period\": 33333,\n+        \"key\": [3, 3, 3]\n+      },\n+      {\n+        \"entity_num\": 20,\n+        \"entity_realm\": 1,\n+        \"entity_shard\": 0,\n+        \"public_key\": \"c7e81a0c1444c6e5b5c1bfb1a02ae5faae44c11e621f286d21242cc584280692\",\n+        \"exp_time_ns\": 123456784,\n+        \"auto_renew_period\": 44444,\n+        \"key\": [4, 4, 4]\n+      },\n+      {\n+        \"entity_num\": 21,\n+        \"entity_realm\": 1,\n+        \"entity_shard\": 0,\n+        \"public_key\": \"5f58f33c65992676de86ac8f5b4b8b4b45c636f12cec8a274d820a3fe1778a3e\",\n+        \"exp_time_ns\": 123456785,\n+        \"auto_renew_period\": 55555,\n+        \"key\": [5, 5, 5]\n+      }\n+    ],\n+    \"tokens\": [\n+      {\n+        \"token_id\": \"0.20.1\",\n+        \"symbol\": \"TOKEN1\"\n+      },\n+      {\n+        \"token_id\": \"0.20.2\",\n+        \"symbol\": \"TOKEN2\"\n+      },\n+      {\n+        \"token_id\": \"0.20.3\",\n+        \"symbol\": \"TOKEN3\"\n+      },\n+      {\n+        \"token_id\": \"0.20.4\",\n+        \"symbol\": \"TOKEN4\"\n+      },\n+      {\n+        \"token_id\": \"0.20.5\",\n+        \"symbol\": \"TOKEN5\"\n+      }\n+    ],\n+    \"balances\": [\n+      {\n+        \"timestamp\": 1566560001000000000,\n+        \"id\": 17,\n+        \"realm_num\": 1,\n+        \"balance\": 70,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 17\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 1717\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560001000000000,\n+        \"id\": 18,\n+        \"realm_num\": 1,\n+        \"balance\": 80,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 18\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 1818\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560001000000000,\n+        \"id\": 19,\n+        \"realm_num\": 1,\n+        \"balance\": 90,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 19\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 1919\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560001000000000,\n+        \"id\": 20,\n+        \"realm_num\": 1,\n+        \"balance\": 100,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 20\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 2020\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560001000000000,\n+        \"id\": 21,\n+        \"realm_num\": 1,\n+        \"balance\": 110,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 21\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 2121\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560003000000000,\n+        \"id\": 18,\n+        \"realm_num\": 1,\n+        \"balance\": 800,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 180\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 180180\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560003000000000,\n+        \"id\": 19,\n+        \"realm_num\": 1,\n+        \"balance\": 900,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 190\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 190190\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560003000000000,\n+        \"id\": 20,\n+        \"realm_num\": 1,\n+        \"balance\": 1000,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 200\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 200200\n+          }\n+        ]\n+      },\n+      {\n+        \"timestamp\": 1566560009000000000,\n+        \"id\": 19,\n+        \"realm_num\": 1,\n+        \"balance\": 999,\n+        \"tokens\": [\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 1,\n+            \"balance\": 1900\n+          },\n+          {\n+            \"token_realm\": 20,\n+            \"token_num\": 2,\n+            \"balance\": 19001900\n+          }\n+        ]\n+      }\n+    ],\n+    \"transactions\": [],\n+    \"cryptotransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/0.20.1/balances?account.id=gte:0.1.18&account.id=lt:0.1.20&account.balance=gt:45&publickey=3c3d546321ff6f63d701d2ec5c277095874e19f4a235bee1e6bb19258bf362be&timestamp=1566560003.000000000&order=asc\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwODUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"message\": \"Invalid parameter: account.id\"\n          \n          \n            \n                      \"message\": \"Invalid parameter: id\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503608508", "createdAt": "2020-10-13T00:53:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-balances-08-invalid-param-values.spec.json", "diffHunk": "@@ -0,0 +1,32 @@\n+{\n+  \"description\": \"Token balances api invalid query format\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/0.20.1/balances?account.id=lte:0.1&account.balance=gt:-2&account.publickey=-2&timestamp=-1.2&order=any\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: account.id\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwODU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"message\": \"Invalid parameter: account.balance\"\n          \n          \n            \n                      \"message\": \"Invalid parameter: balance\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503608564", "createdAt": "2020-10-13T00:53:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-balances-08-invalid-param-values.spec.json", "diffHunk": "@@ -0,0 +1,32 @@\n+{\n+  \"description\": \"Token balances api invalid query format\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/0.20.1/balances?account.id=lte:0.1&account.balance=gt:-2&account.publickey=-2&timestamp=-1.2&order=any\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: account.id\"\n+        },\n+        {\n+          \"message\": \"Invalid parameter: account.balance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwODYxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"message\": \"Invalid parameter: account.publickey\"\n          \n          \n            \n                      \"message\": \"Invalid parameter: publickey\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r503608619", "createdAt": "2020-10-13T00:54:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-balances-08-invalid-param-values.spec.json", "diffHunk": "@@ -0,0 +1,32 @@\n+{\n+  \"description\": \"Token balances api invalid query format\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": []\n+  },\n+  \"url\": \"/api/v1/tokens/0.20.1/balances?account.id=lte:0.1&account.balance=gt:-2&account.publickey=-2&timestamp=-1.2&order=any\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"_status\": {\n+      \"messages\": [\n+        {\n+          \"message\": \"Invalid parameter: account.id\"\n+        },\n+        {\n+          \"message\": \"Invalid parameter: account.balance\"\n+        },\n+        {\n+          \"message\": \"Invalid parameter: account.publickey\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dcb8de0b666d9419b6d6bf2bfaf158adf5b083"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7003c9bf1c1bd1bd614e12ef9532b78af5ca8d76", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7003c9bf1c1bd1bd614e12ef9532b78af5ca8d76", "committedDate": "2020-10-13T19:08:18Z", "message": "address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/296885e5ad357f8a57cb831476908ea1a7d57793", "committedDate": "2020-10-13T19:20:03Z", "message": "publickey -> account.publickey for token supply distribution\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODc4NTY4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-507878568", "createdAt": "2020-10-13T22:42:01Z", "commit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODM4OTg1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-507838985", "createdAt": "2020-10-13T21:22:59Z", "commit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToyMjo1OVrOHg5_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1MDo1OFrOHhZ0AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2NjUyNQ==", "bodyText": "This index duplicates token_balance__pk. Please check if that index is sufficient or drop that one and add this one.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r504266525", "createdAt": "2020-10-13T21:22:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__token_balance_index.sql", "diffHunk": "@@ -0,0 +1,3 @@\n+-- Add index for query by consensus_timestamp followed by token_id\n+create index if not exists token_balance__timestamp_token_account", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3ODMwOA==", "bodyText": "I thought we said this would be account.publickey? Should this be removed since we explicitly have a case statement for publickey below?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r504778308", "createdAt": "2020-10-14T15:37:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,164 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  ACCOUNT_PUBLICKEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {\n+  'account.balance': tokenBalancesSqlQueryColumns.ACCOUNT_BALANCE,\n+  'account.id': tokenBalancesSqlQueryColumns.ACCOUNT_ID,\n+  publickey: tokenBalancesSqlQueryColumns.PUBLIC_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4Nzk2OQ==", "bodyText": "We've been standardizing on lower case sql keywords, like the other API in this file.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#discussion_r504787969", "createdAt": "2020-10-14T15:50:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/tokens.js", "diffHunk": "@@ -180,8 +182,164 @@ const getTokens = async (pgSqlQuery, pgSqlParams) => {\n     });\n };\n \n+// token balances select columns\n+const tokenBalancesSqlQueryColumns = {\n+  ACCOUNT_BALANCE: 'tb.balance',\n+  ACCOUNT_ID: 'tb.account_id',\n+  CONSENSUS_TIMESTAMP: 'tb.consensus_timestamp',\n+  ACCOUNT_PUBLICKEY: 'e.ed25519_public_key_hex',\n+  TOKEN_ID: 'tb.token_id',\n+};\n+\n+// token balances query to column maps\n+const tokenBalancesFilterColumnMap = {\n+  'account.balance': tokenBalancesSqlQueryColumns.ACCOUNT_BALANCE,\n+  'account.id': tokenBalancesSqlQueryColumns.ACCOUNT_ID,\n+  publickey: tokenBalancesSqlQueryColumns.PUBLIC_KEY,\n+};\n+\n+const tokenBalancesSelectQuery = `\n+  SELECT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296885e5ad357f8a57cb831476908ea1a7d57793"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ebdefa0f584a8a11652001d7bd21a290d2151a2", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4ebdefa0f584a8a11652001d7bd21a290d2151a2", "committedDate": "2020-10-14T16:38:56Z", "message": "address review feedback\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f94f9f3ab17d6a7a34749a91b479041de809678", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7f94f9f3ab17d6a7a34749a91b479041de809678", "committedDate": "2020-10-14T18:24:06Z", "message": "remove db migration which creates index on token_balance\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjU3NTgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-508657581", "createdAt": "2020-10-14T19:22:52Z", "commit": {"oid": "7f94f9f3ab17d6a7a34749a91b479041de809678"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjkxMDcy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1113#pullrequestreview-508691072", "createdAt": "2020-10-14T20:10:10Z", "commit": {"oid": "7f94f9f3ab17d6a7a34749a91b479041de809678"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}