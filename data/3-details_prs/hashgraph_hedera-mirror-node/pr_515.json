{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MTkyNDUy", "number": 515, "title": "Add a shared poller", "bodyText": "Detailed description:\n\nAdds a shared polling topic listener\nDefault stays as previous non-shared poller and we can enable in production based upon demand later\n\nWhich issue(s) this PR fixes:\nFixes #496\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-01-30T17:16:18Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515", "merged": true, "mergeCommit": {"oid": "849a47148cae0453c8f158f4a82f95d8e6c1f07d"}, "closed": true, "closedAt": "2020-01-30T20:20:19Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_dx99gH2gAyMzY5MTkyNDUyOjEzNDY3MjRmZTUyMGU2Nzc3OGU2YTMxNzU3ZmQ1ZjU4YjliMGQwOWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_gbHKAFqTM1MTExNDI2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1346724fe520e67778e6a31757fd5f58b9b0d09b", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1346724fe520e67778e6a31757fd5f58b9b0d09b", "committedDate": "2020-01-30T17:13:59Z", "message": "Add a shared poller\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDE1ODA0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#pullrequestreview-351015804", "createdAt": "2020-01-30T17:42:19Z", "commit": {"oid": "1346724fe520e67778e6a31757fd5f58b9b0d09b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo0MjoxOVrOFjz7Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo0NToxOVrOFj0BBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NTI2Ng==", "bodyText": "change doOnCancel log to say cancelled and doOnCOmplete to say Completed so we can distinguish\ne.g. \"Completed : Polling stopped\"\ne.g. \"Cancelled : Polling stopped\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373095266", "createdAt": "2020-01-30T17:42:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import javax.inject.Named;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+import reactor.core.publisher.Flux;\n+\n+import com.hedera.mirror.grpc.converter.InstantToLongConverter;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+import com.hedera.mirror.grpc.repository.TopicMessageRepository;\n+\n+@Named\n+@Log4j2\n+public class SharedPollingTopicListener implements TopicListener {\n+\n+    private final ListenerProperties listenerProperties;\n+    private final TopicMessageRepository topicMessageRepository;\n+    private final InstantToLongConverter instantToLongConverter;\n+    private final Flux<TopicMessage> poller;\n+\n+    public SharedPollingTopicListener(ListenerProperties listenerProperties,\n+                                      TopicMessageRepository topicMessageRepository,\n+                                      InstantToLongConverter instantToLongConverter) {\n+        this.listenerProperties = listenerProperties;\n+        this.topicMessageRepository = topicMessageRepository;\n+        this.instantToLongConverter = instantToLongConverter;\n+\n+        Duration frequency = listenerProperties.getPollingFrequency();\n+        PollingContext context = new PollingContext();\n+\n+        poller = Flux.interval(frequency)\n+                .filter(i -> !context.isRunning()) // Discard polling requests while querying\n+                .concatMap(i -> poll(context))\n+                .name(\"shared-poll\")\n+                .metrics()\n+                .doOnNext(context::onNext)\n+                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n+                .doOnComplete(() -> log.info(\"Stopped polling\"))\n+                .doOnCancel(() -> log.info(\"Stopped polling\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1346724fe520e67778e6a31757fd5f58b9b0d09b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5NjcxMQ==", "bodyText": "Could you make this 'isBefore' so it's easier to read.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#discussion_r373096711", "createdAt": "2020-01-30T17:45:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import javax.inject.Named;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+import reactor.core.publisher.Flux;\n+\n+import com.hedera.mirror.grpc.converter.InstantToLongConverter;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+import com.hedera.mirror.grpc.repository.TopicMessageRepository;\n+\n+@Named\n+@Log4j2\n+public class SharedPollingTopicListener implements TopicListener {\n+\n+    private final ListenerProperties listenerProperties;\n+    private final TopicMessageRepository topicMessageRepository;\n+    private final InstantToLongConverter instantToLongConverter;\n+    private final Flux<TopicMessage> poller;\n+\n+    public SharedPollingTopicListener(ListenerProperties listenerProperties,\n+                                      TopicMessageRepository topicMessageRepository,\n+                                      InstantToLongConverter instantToLongConverter) {\n+        this.listenerProperties = listenerProperties;\n+        this.topicMessageRepository = topicMessageRepository;\n+        this.instantToLongConverter = instantToLongConverter;\n+\n+        Duration frequency = listenerProperties.getPollingFrequency();\n+        PollingContext context = new PollingContext();\n+\n+        poller = Flux.interval(frequency)\n+                .filter(i -> !context.isRunning()) // Discard polling requests while querying\n+                .concatMap(i -> poll(context))\n+                .name(\"shared-poll\")\n+                .metrics()\n+                .doOnNext(context::onNext)\n+                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms\", frequency.toMillis()))\n+                .doOnComplete(() -> log.info(\"Stopped polling\"))\n+                .doOnCancel(() -> log.info(\"Stopped polling\"))\n+                .share();\n+    }\n+\n+    @Override\n+    public Flux<TopicMessage> listen(TopicMessageFilter filter) {\n+        return poller.filter(t -> filterMessage(t, filter))\n+                .doOnSubscribe(s -> log.info(\"Listening for messages: {}\", filter));\n+    }\n+\n+    private Flux<TopicMessage> poll(PollingContext context) {\n+        Instant instant = context.getLastConsensusTimestamp();\n+        Long consensusTimestamp = instantToLongConverter.convert(instant);\n+        log.debug(\"Querying for messages after: {}\", instant);\n+\n+        return topicMessageRepository.findByConsensusTimestampGreaterThan(consensusTimestamp)\n+                .doOnSubscribe(s -> context.setRunning(true))\n+                .doOnCancel(() -> context.setRunning(false))\n+                .doOnComplete(() -> context.setRunning(false));\n+    }\n+\n+    private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n+        return filter.getRealmNum() == message.getRealmNum() &&\n+                filter.getTopicNum() == message.getTopicNum() &&\n+                !filter.getStartTime().isAfter(message.getConsensusTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1346724fe520e67778e6a31757fd5f58b9b0d09b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98df56ee3e9334ab12bed614bab1de35d37fda2", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c98df56ee3e9334ab12bed614bab1de35d37fda2", "committedDate": "2020-01-30T18:07:43Z", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTE0MjY0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/515#pullrequestreview-351114264", "createdAt": "2020-01-30T20:18:44Z", "commit": {"oid": "c98df56ee3e9334ab12bed614bab1de35d37fda2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3227, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}