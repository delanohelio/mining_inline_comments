{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MDE1MTk1", "number": 1236, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoxNjozNlrOE3AWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoyMTo0OFrOE3AagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTEyNzkxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoxNjozNlrOHwGtzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzowODoxM1rOHwmpYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwMzcyNw==", "bodyText": "For complete coverage we could add a test case where both a 101 and 102 are updated, or where only one of them is updated. In either case it would verify the other addressBook entry isn't modified.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1236#discussion_r520203727", "createdAt": "2020-11-10T00:16:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "diffHunk": "@@ -366,6 +367,32 @@ void verifyAddressBookEndPointsAreSet() {\n         assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n     }\n \n+    @Test\n+    void verify101AddressBookEndPointsAreSet() {\n+        byte[] addressBookBytes = UPDATED.toByteArray();\n+        update(addressBookBytes, 0L, false);\n+\n+        // assert current addressBook is updated\n+        AddressBook addressBook = addressBookRepository.findLatestAddressBook(1L, 101L).get();\n+        assertThat(addressBook.getEntries()).hasSize(UPDATED.getNodeAddressCount());\n+        assertThat(addressBook.getStartConsensusTimestamp()).isNotNull();\n+        assertThat(addressBook.getEndConsensusTimestamp()).isNull();\n+\n+        byte[] newAddressBookBytes = FINAL.toByteArray();\n+        update(newAddressBookBytes, 10L, false);\n+        AddressBook newAddressBook = addressBookRepository.findLatestAddressBook(11L, 101L).get();\n+        assertAddressBook(newAddressBook, FINAL);\n+        assertAddressBookData(newAddressBookBytes, 10);\n+\n+        assertEquals(2, addressBookRepository.count());\n+        assertEquals(UPDATED.getNodeAddressCount() + FINAL.getNodeAddressCount(), addressBookEntryRepository.count());\n+\n+        // verify end consensus timestamp was set for previous address book\n+        AddressBook prevAddressBook = addressBookRepository.findById(1L).get();\n+        assertThat(prevAddressBook.getStartConsensusTimestamp()).isNotNull();\n+        assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14f99940ac470f82d7efeca7a9037146af4a9920"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjg4MA==", "bodyText": "I added a verify101DoesntUpdate102 test case", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1236#discussion_r520726880", "createdAt": "2020-11-10T17:08:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "diffHunk": "@@ -366,6 +367,32 @@ void verifyAddressBookEndPointsAreSet() {\n         assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n     }\n \n+    @Test\n+    void verify101AddressBookEndPointsAreSet() {\n+        byte[] addressBookBytes = UPDATED.toByteArray();\n+        update(addressBookBytes, 0L, false);\n+\n+        // assert current addressBook is updated\n+        AddressBook addressBook = addressBookRepository.findLatestAddressBook(1L, 101L).get();\n+        assertThat(addressBook.getEntries()).hasSize(UPDATED.getNodeAddressCount());\n+        assertThat(addressBook.getStartConsensusTimestamp()).isNotNull();\n+        assertThat(addressBook.getEndConsensusTimestamp()).isNull();\n+\n+        byte[] newAddressBookBytes = FINAL.toByteArray();\n+        update(newAddressBookBytes, 10L, false);\n+        AddressBook newAddressBook = addressBookRepository.findLatestAddressBook(11L, 101L).get();\n+        assertAddressBook(newAddressBook, FINAL);\n+        assertAddressBookData(newAddressBookBytes, 10);\n+\n+        assertEquals(2, addressBookRepository.count());\n+        assertEquals(UPDATED.getNodeAddressCount() + FINAL.getNodeAddressCount(), addressBookEntryRepository.count());\n+\n+        // verify end consensus timestamp was set for previous address book\n+        AddressBook prevAddressBook = addressBookRepository.findById(1L).get();\n+        assertThat(prevAddressBook.getStartConsensusTimestamp()).isNotNull();\n+        assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwMzcyNw=="}, "originalCommit": {"oid": "14f99940ac470f82d7efeca7a9037146af4a9920"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTEzOTIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__fix_address_book_102.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMDoyMTo0OFrOHwG0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NjoyOVrOHwrFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTQ2Mg==", "bodyText": "Is there an easy way to incorporate the migration into an integration test like we do for the java migrations?\nThen you could have some test coverage for a mixture of scenarios\n\nOnly one 101 unclosed address book and one 102 incorrectly closed file\nA few 101 unclosed address books  with and a few 102 addressbooks files of which a few were incorrectly closed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1236#discussion_r520205462", "createdAt": "2020-11-10T00:21:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__fix_address_book_102.sql", "diffHunk": "@@ -0,0 +1,7 @@\n+-- Recalculate all end timestamps since we accidentally set the 0.0.102 end timestamp instead of the 0.0.101's in GH1229\n+update address_book as ab", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14f99940ac470f82d7efeca7a9037146af4a9920"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjY0MA==", "bodyText": "It's not easy to test migrations. It requires an application context refresh (slowing overall test execution), a custom cleanup script to not break in the future and to only use raw SQL.\nIn this particular case since there's no DDL statements, we can get away with manually invoking the sql. I added a test case that does that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1236#discussion_r520726640", "createdAt": "2020-11-10T17:07:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__fix_address_book_102.sql", "diffHunk": "@@ -0,0 +1,7 @@\n+-- Recalculate all end timestamps since we accidentally set the 0.0.102 end timestamp instead of the 0.0.101's in GH1229\n+update address_book as ab", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTQ2Mg=="}, "originalCommit": {"oid": "14f99940ac470f82d7efeca7a9037146af4a9920"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5OTUzMQ==", "bodyText": "Gotcha. If this was more complex I would have suggested making it a java migration so testing would be made easier also.\nTests you added are satisfactory", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1236#discussion_r520799531", "createdAt": "2020-11-10T18:56:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.31.0__fix_address_book_102.sql", "diffHunk": "@@ -0,0 +1,7 @@\n+-- Recalculate all end timestamps since we accidentally set the 0.0.102 end timestamp instead of the 0.0.101's in GH1229\n+update address_book as ab", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIwNTQ2Mg=="}, "originalCommit": {"oid": "14f99940ac470f82d7efeca7a9037146af4a9920"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1413, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}