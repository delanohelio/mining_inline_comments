{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTQxNzQy", "number": 663, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1Mjo1MFrODv14jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo0Mjo0NFrODwk61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkyNDkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1Mjo1MFrOGCf7FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyMzo1NFrOGC0aqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MzM2NQ==", "bodyText": "Nice encapsulation of code and message.\nWould suggest naming it something different though since it is not 'handling' any error, it's a plain object (like domains in java). Say HttpError, HandlerException (since it is thrown by request handlers, or better yet HttpHandlerException), etc", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405273365", "createdAt": "2020-04-08T05:52:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwOTEyOA==", "bodyText": "Good suggestion. I can go with HttpError since it's just a plain Error object like you pointed out. The handleError handles the handling \ud83d\ude00", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405609128", "createdAt": "2020-04-08T15:23:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MzM2NQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkyODY1OnYy", "diffSide": "LEFT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NDoyMlrOGCf9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyNToyNVrOGC0fPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3Mzg5MA==", "bodyText": "this seems to be removing caching altogether, or maybe am missing something?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405273890", "createdAt": "2020-04-08T05:54:22Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -91,35 +92,25 @@ app.use(bodyParser.json());\n app.use(compression());\n app.use(cors());\n \n-let caches = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMDMwMw==", "bodyText": "Yeah. The issue requests the Cacher.js to be removed as the internal logic is actually not fully implemented. I opened #668 to address whether there's still an option for saving it or if it should be removed and or replaced with something else", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405610303", "createdAt": "2020-04-08T15:25:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -91,35 +92,25 @@ app.use(bodyParser.json());\n app.use(compression());\n app.use(cors());\n \n-let caches = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3Mzg5MA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkzMTA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1NToxOVrOGCf-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTozODoyMFrOGDB7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDIyMA==", "bodyText": "adding a comment for special test hook would be useful", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405274220", "createdAt": "2020-04-08T05:55:19Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMDQ5NA==", "bodyText": "Will do, this was just to reduce logs during local runs cause it's hard to decipher issues", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405830494", "createdAt": "2020-04-08T21:38:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDIyMA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk0MTU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo1OToyMFrOGCgEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMToxOVrOGCwtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NTc0NA==", "bodyText": "pardon my limited knowledge of rest api code, it is possible to catch this where this error is actually thrown and convert to 'our application error'. If not possible technically, then we should add a comment here.\nJust that seeing special case so high up in abstraction layer seems bad.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405275744", "createdAt": "2020-04-08T05:59:20Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODM4MA==", "bodyText": "It's not possible to catch as it appears as a generic Error object, so we have to interrogate the message", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405548380", "createdAt": "2020-04-08T14:01:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NTc0NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk2NTk0OnYy", "diffSide": "LEFT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjowODo0NlrOGCgSLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMDozNVrOGCwrNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3OTI3OQ==", "bodyText": "events and eventAnalytics are also unused. We can remove them.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405279279", "createdAt": "2020-04-08T06:08:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -40,7 +41,7 @@ const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n const eventAnalytics = require('./eventAnalytics.js');\n const utils = require('./utils.js');\n-const Cacher = require('./cacher.js');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzgyOQ==", "bodyText": "Those should be handled in #572", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405547829", "createdAt": "2020-04-08T14:00:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -40,7 +41,7 @@ const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n const eventAnalytics = require('./eventAnalytics.js');\n const utils = require('./utils.js');\n-const Cacher = require('./cacher.js');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3OTI3OQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk3NTc2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMzowNFrOGCgYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDo1OTo0NlrOGDGE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDc4NA==", "bodyText": "Where is this thrown? Can't seem to find the code which throws this.\nEither ways, let's add the comment explaining the need to override the message...\"do not expose detailed internal errors externally...etc etc\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405280784", "createdAt": "2020-04-08T06:13:04Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMjk4OA==", "bodyText": "By default when you throw any error Express sets it to to a 500\nSee https://expressjs.com/en/guide/error-handling.html \"The default error handler\" section\nBut yeah good suggestion on the comment", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405602988", "createdAt": "2020-04-08T15:15:45Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDc4NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3NjQwNA==", "bodyText": "I may be wrong or something else is happening. Thought according to that documentation that 500 would be the default, turns out in some cases its undefined, so setting that also", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405676404", "createdAt": "2020-04-08T17:01:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDc4NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5ODQ3OQ==", "bodyText": "Updated to handle undefined and default cases where express may set the default http status code on an error", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405898479", "createdAt": "2020-04-09T00:59:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDc4NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTAwMTc3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoyMzo1M1rOGCgnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTozOTozM1rOGDB9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDY3NA==", "bodyText": "This seems to be popular error. Would be good to have a function in error.js like\nconst ErrorForInvalidParams = function (params) => {\n  messages = params.map(param => {\n    return {message: `Invalid parameter: ${parama}`}\n  })\n  return new ErrorHandler(BAD_REQUEST, messages);\n}\n\nThen badParams will actually be just params, rather than messages.\nWill also remove many calls to getInvalidParameterMessageObject and utils will have 2 less functions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405284674", "createdAt": "2020-04-08T06:23:53Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxOTUzNQ==", "bodyText": "Agree, except would recommend a concrete InvalidArgumentError extends Error that does this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405619535", "createdAt": "2020-04-08T15:37:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDY3NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTA3MA==", "bodyText": "I'm creating an InvalidArgumentError class that encapsulates this logic", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405831070", "createdAt": "2020-04-08T21:39:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDY3NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTAwMzgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoyNDo0N1rOGCgogg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDoxMFrOGDB-nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDk5NA==", "bodyText": "is return value still needed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405284994", "createdAt": "2020-04-08T06:24:47Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [\n+      utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM),\n+    ]);\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNjM4MA==", "bodyText": "Just for testing purposes. No product code consumes it. It's true or throw error.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405606380", "createdAt": "2020-04-08T15:20:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [\n+      utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM),\n+    ]);\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDk5NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTMyNQ==", "bodyText": "Will look into jest .not.throwError() and then remove the returns", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405831325", "createdAt": "2020-04-08T21:40:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -60,37 +63,33 @@ const validateGetSequenceMessageParams = function (topicId, seqNum) {\n     badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.SEQUENCE_NUMBER));\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  if (badParams.length > 0) {\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, badParams);\n+  }\n+\n+  return true;\n };\n \n /**\n  * Verify topicId and sequencenumber meet entity_num and limit format\n  */\n const validateGetTopicMessagesParams = function (topicId) {\n-  let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [\n+      utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM),\n+    ]);\n   }\n \n-  return utils.makeValidationResponse(badParams);\n+  return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NDk5NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTAwNTYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoyNToyNVrOGCgphg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTowMDoxMlrOGDGFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTI1NA==", "bodyText": "nit: empty tags can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405285254", "createdAt": "2020-04-08T06:25:25Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -271,31 +253,33 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByConsensusTimestamp = function (req, res) {\n+const getMessageByConsensusTimestamp = async (req, res) => {\n   logger.debug('--------------------  getMessageByConsensusTimestamp --------------------');\n   logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n-  return processGetMessageByConsensusTimestampRequest(req.params, res).catch((error) =>\n-    utils.errorHandler(error, req, res, null)\n-  );\n+  return processGetMessageByConsensusTimestampRequest(req.params, res);\n };\n \n /**\n  * Handler function for /:id/message/:sequencenumber API.\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByTopicAndSequenceRequest = function (req, res) {\n+const getMessageByTopicAndSequenceRequest = async (req, res) => {\n   logger.debug('--------------------  getMessageByTopicAndSequenceRequest --------------------');\n   logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n-  return processGetMessageByTopicAndSequenceRequest(req.params, res).catch((error) =>\n-    utils.errorHandler(error, req, res, null)\n-  );\n+  return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n-const getTopicMessages = (req, res) => {\n+/**\n+ * Handler function for /topics/:id API.\n+ * @param req", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5ODU1OQ==", "bodyText": "Updated comment", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405898559", "createdAt": "2020-04-09T01:00:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -271,31 +253,33 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByConsensusTimestamp = function (req, res) {\n+const getMessageByConsensusTimestamp = async (req, res) => {\n   logger.debug('--------------------  getMessageByConsensusTimestamp --------------------');\n   logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n-  return processGetMessageByConsensusTimestampRequest(req.params, res).catch((error) =>\n-    utils.errorHandler(error, req, res, null)\n-  );\n+  return processGetMessageByConsensusTimestampRequest(req.params, res);\n };\n \n /**\n  * Handler function for /:id/message/:sequencenumber API.\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByTopicAndSequenceRequest = function (req, res) {\n+const getMessageByTopicAndSequenceRequest = async (req, res) => {\n   logger.debug('--------------------  getMessageByTopicAndSequenceRequest --------------------');\n   logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n-  return processGetMessageByTopicAndSequenceRequest(req.params, res).catch((error) =>\n-    utils.errorHandler(error, req, res, null)\n-  );\n+  return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n-const getTopicMessages = (req, res) => {\n+/**\n+ * Handler function for /topics/:id API.\n+ * @param req", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTI1NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTAxOTUxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactions.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjozMToxNlrOGCgx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTowMzo0OVrOGDGIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NzM4OQ==", "bodyText": "we can make this just logger.debug() too. If okay to have debug as default log level in tests, but tests hooks in prod code are code smell.\ni know this is not your code, but I blame you for making all the past code here awesome.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405287389", "createdAt": "2020-04-08T06:31:16Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -304,30 +297,26 @@ const getOneTransaction = function (req, res) {\n   logger.trace('getOneTransaction query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  pool\n-    .query(pgSqlQuery, sqlParams)\n-    .then((results) => {\n-      let ret = {\n-        transactions: [],\n-      };\n-\n-      logger.debug('# rows returned: ' + results.rows.length);\n-      const tl = createTransferLists(results.rows, ret);\n-      ret = tl.ret;\n-\n-      if (ret.transactions.length === 0) {\n-        res.status(utils.httpStatusCodes.NOT_FOUND).send(utils.createSingleErrorJsonResponse('Not found'));\n-        return;\n-      }\n-\n-      if (process.env.NODE_ENV === 'test') {\n-        ret.sqlQuery = results.sqlQuery;\n-      }\n-\n-      logger.debug('getOneTransaction returning ' + ret.transactions.length + ' entries');\n-      res.json(ret);\n-    })\n-    .catch((error) => utils.errorHandler(error, req, res, null));\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {\n+    let ret = {\n+      transactions: [],\n+    };\n+\n+    logger.debug('# rows returned: ' + results.rows.length);\n+    const tl = createTransferLists(results.rows, ret);\n+    ret = tl.ret;\n+\n+    if (ret.transactions.length === 0) {\n+      throw new ErrorHandler(httpStatusCodes.NOT_FOUND, 'Not found');\n+    }\n+\n+    if (process.env.NODE_ENV === 'test') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNDYxOQ==", "bodyText": "Agree, don't like if (process.env.NODE_ENV === 'test') anywhere. Think this is not used for logging though but for unit tests. But code should probably be refactored later to move sql construction to separate method that can be unit tested. Think that's a bigger change though.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405624619", "createdAt": "2020-04-08T15:44:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -304,30 +297,26 @@ const getOneTransaction = function (req, res) {\n   logger.trace('getOneTransaction query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  pool\n-    .query(pgSqlQuery, sqlParams)\n-    .then((results) => {\n-      let ret = {\n-        transactions: [],\n-      };\n-\n-      logger.debug('# rows returned: ' + results.rows.length);\n-      const tl = createTransferLists(results.rows, ret);\n-      ret = tl.ret;\n-\n-      if (ret.transactions.length === 0) {\n-        res.status(utils.httpStatusCodes.NOT_FOUND).send(utils.createSingleErrorJsonResponse('Not found'));\n-        return;\n-      }\n-\n-      if (process.env.NODE_ENV === 'test') {\n-        ret.sqlQuery = results.sqlQuery;\n-      }\n-\n-      logger.debug('getOneTransaction returning ' + ret.transactions.length + ' entries');\n-      res.json(ret);\n-    })\n-    .catch((error) => utils.errorHandler(error, req, res, null));\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {\n+    let ret = {\n+      transactions: [],\n+    };\n+\n+    logger.debug('# rows returned: ' + results.rows.length);\n+    const tl = createTransferLists(results.rows, ret);\n+    ret = tl.ret;\n+\n+    if (ret.transactions.length === 0) {\n+      throw new ErrorHandler(httpStatusCodes.NOT_FOUND, 'Not found');\n+    }\n+\n+    if (process.env.NODE_ENV === 'test') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NzM4OQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3ODIzNQ==", "bodyText": "Agreed. Nice thing is it no longer seems to be utilized, logic was probably in some tests I cleaned up in the past.\nRemoving this now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405678235", "createdAt": "2020-04-08T17:04:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -304,30 +297,26 @@ const getOneTransaction = function (req, res) {\n   logger.trace('getOneTransaction query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  pool\n-    .query(pgSqlQuery, sqlParams)\n-    .then((results) => {\n-      let ret = {\n-        transactions: [],\n-      };\n-\n-      logger.debug('# rows returned: ' + results.rows.length);\n-      const tl = createTransferLists(results.rows, ret);\n-      ret = tl.ret;\n-\n-      if (ret.transactions.length === 0) {\n-        res.status(utils.httpStatusCodes.NOT_FOUND).send(utils.createSingleErrorJsonResponse('Not found'));\n-        return;\n-      }\n-\n-      if (process.env.NODE_ENV === 'test') {\n-        ret.sqlQuery = results.sqlQuery;\n-      }\n-\n-      logger.debug('getOneTransaction returning ' + ret.transactions.length + ' entries');\n-      res.json(ret);\n-    })\n-    .catch((error) => utils.errorHandler(error, req, res, null));\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {\n+    let ret = {\n+      transactions: [],\n+    };\n+\n+    logger.debug('# rows returned: ' + results.rows.length);\n+    const tl = createTransferLists(results.rows, ret);\n+    ret = tl.ret;\n+\n+    if (ret.transactions.length === 0) {\n+      throw new ErrorHandler(httpStatusCodes.NOT_FOUND, 'Not found');\n+    }\n+\n+    if (process.env.NODE_ENV === 'test') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NzM4OQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5OTQ1MQ==", "bodyText": "There's another instance of this that does break test code when removed. Will address this in another PR like Steven noted. Topicmessage.js is more broken up where you can test for the sql query easier. When that similar refactor happens this won't be needed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405899451", "createdAt": "2020-04-09T01:03:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -304,30 +297,26 @@ const getOneTransaction = function (req, res) {\n   logger.trace('getOneTransaction query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  pool\n-    .query(pgSqlQuery, sqlParams)\n-    .then((results) => {\n-      let ret = {\n-        transactions: [],\n-      };\n-\n-      logger.debug('# rows returned: ' + results.rows.length);\n-      const tl = createTransferLists(results.rows, ret);\n-      ret = tl.ret;\n-\n-      if (ret.transactions.length === 0) {\n-        res.status(utils.httpStatusCodes.NOT_FOUND).send(utils.createSingleErrorJsonResponse('Not found'));\n-        return;\n-      }\n-\n-      if (process.env.NODE_ENV === 'test') {\n-        ret.sqlQuery = results.sqlQuery;\n-      }\n-\n-      logger.debug('getOneTransaction returning ' + ret.transactions.length + ' entries');\n-      res.json(ret);\n-    })\n-    .catch((error) => utils.errorHandler(error, req, res, null));\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {\n+    let ret = {\n+      transactions: [],\n+    };\n+\n+    logger.debug('# rows returned: ' + results.rows.length);\n+    const tl = createTransferLists(results.rows, ret);\n+    ret = tl.ret;\n+\n+    if (ret.transactions.length === 0) {\n+      throw new ErrorHandler(httpStatusCodes.NOT_FOUND, 'Not found');\n+    }\n+\n+    if (process.env.NODE_ENV === 'test') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NzM4OQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTA1MjUxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/__snapshots__/topicmessage.test.js.snap", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjo0NDowM1rOGChFgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo0NDoyN1rOGDqgPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5MjQxOA==", "bodyText": "I believe it can be very useful to separate expected values when they are ~100 lines, to improve test code readability. For this particular case, since expected values are trivial and can be defined as constants in utilsFilters and shared across the tests in that file - splitting into snapshot seems unnecessary fragmentation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405292418", "createdAt": "2020-04-08T06:44:03Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/__snapshots__/topicmessage.test.js.snap", "diffHunk": "@@ -0,0 +1,74 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`topicmessage validateConsensusTimestampParam tests Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001 1`] = `", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNzI4Mg==", "bodyText": "Maybe I'm missing something. Since the methods don't actually return a valid value it's not trivial to compare and ensure the error object has the desired format. If it was just a simple Error I'd agree, but with our format it's not.\nWhen I tried the approach you noted for the first case this is what happens\nExpected message: {\"_status\": {\"messages\": [{\"message\": \"Invalid parameter: consensus_timestamp\"}]}}\nReceived value:   [Error: [object Object]]\nI wasn't able how to force stringily of the received error by the system. Since it's not a return value but rather a throw I haven't been able to go deep enough to get it.\nAdditionally snapshots make situations like this super easy. You don't have to worry about getting things and parsing then and creating the exact matching object in the test. Rather you run it, confirm the return is as expected and lock that in. Any change even a space gets caught, where as coding out every property or line can result in you missing something.\nlet me know if you find a way to do what you suggested here, I'm probably just missing it - https://jestjs.io/docs/en/expect#tothrowerror", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405907282", "createdAt": "2020-04-09T01:34:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/__snapshots__/topicmessage.test.js.snap", "diffHunk": "@@ -0,0 +1,74 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`topicmessage validateConsensusTimestampParam tests Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001 1`] = `", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5MjQxOA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5NTI5Mg==", "bodyText": "You're right, it was throwing that error at first. Got it working with some tweaking.\ndbf7ece\nThe drawbacks of snapshot is:\n\nfragmentation of logic: Setup for actual and expected values in two places. Less cohesion. Also hurts readability.\nDuplicate declarations of param names since constants.filterKeys can't be used in snapshot file.\n\nHowever it's not that bad and i'd be perfectly okay with it if there was no easy way out. Thankfully in this case, there is.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406495292", "createdAt": "2020-04-09T21:44:27Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/__snapshots__/topicmessage.test.js.snap", "diffHunk": "@@ -0,0 +1,74 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`topicmessage validateConsensusTimestampParam tests Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001 1`] = `", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI5MjQxOA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk4NzUyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMzo0MVrOGCz8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMzo0MVrOGCz8mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMTQzMg==", "bodyText": "Can remove", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405601432", "createdAt": "2020-04-08T15:13:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -91,35 +92,25 @@ app.use(bodyParser.json());\n app.use(compression());\n app.use(cors());\n \n-let caches = {};\n-for (const api of [\n-  {name: 'transactions', ttl: config.api.ttl.transactions},\n-  {name: 'balances', ttl: config.api.ttl.balances},\n-  {name: 'accounts', ttl: config.api.ttl.accounts},\n-  {name: 'events', ttl: config.api.ttl.events},\n-]) {\n-  caches[api.name] = new Cacher(api.ttl);\n-}\n-\n let apiPrefix = '/api/v1';\n \n // routes\n-app.get(apiPrefix + '/transactions', (req, res) =>\n-  caches['transactions'].getResponse(req, res, transactions.getTransactions)\n-);\n-app.get(apiPrefix + '/transactions/:id', transactions.getOneTransaction);\n-app.get(apiPrefix + '/balances', (req, res) => caches['balances'].getResponse(req, res, balances.getBalances));\n-app.get(apiPrefix + '/accounts', (req, res) => caches['accounts'].getResponse(req, res, accounts.getAccounts));\n-app.get(apiPrefix + '/accounts/:id', accounts.getOneAccount);\n-app.get(apiPrefix + '/topic/message/:consensusTimestamp', topicmessage.getMessageByConsensusTimestamp);\n-app.use(utils.errorHandler);\n+app.getAsync(apiPrefix + '/transactions', transactions.getTransactions);\n+app.getAsync(apiPrefix + '/transactions/:id', transactions.getOneTransaction);\n+app.getAsync(apiPrefix + '/balances', balances.getBalances);\n+app.getAsync(apiPrefix + '/accounts', accounts.getAccounts);\n+app.getAsync(apiPrefix + '/accounts/:id', accounts.getOneAccount);\n+app.getAsync(apiPrefix + '/topic/message/:consensusTimestamp', topicmessage.getMessageByConsensusTimestamp);\n \n // support singular and plural resource naming for single topic message via id and sequence\n-app.get(apiPrefix + '/topic/:id/message/:sequencenumber', topicmessage.getMessageByTopicAndSequenceRequest);\n-app.get(apiPrefix + '/topics/:id/messages/:sequencenumber', topicmessage.getMessageByTopicAndSequenceRequest);\n+app.getAsync(apiPrefix + '/topic/:id/message/:sequencenumber', topicmessage.getMessageByTopicAndSequenceRequest);\n+app.getAsync(apiPrefix + '/topics/:id/messages/:sequencenumber', topicmessage.getMessageByTopicAndSequenceRequest);\n+\n+app.getAsync(apiPrefix + '/topics/:id', topicmessage.getTopicMessages);\n+app.getAsync(apiPrefix + '/topic/:id', topicmessage.getTopicMessages);\n \n-app.get(apiPrefix + '/topics/:id', topicmessage.getTopicMessages);\n-app.get(apiPrefix + '/topic/:id', topicmessage.getTopicMessages);\n+// app.use(utils.errorHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA2MTQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToyOToxMFrOGC0qUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTowNjoyN1rOGDGLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzEzOA==", "bodyText": "I don't like the intermixing of three separate concerns:\n\nError itself\nError handling\nHTTP\n\nThere should not be a single error type but a hierarchy of errors like InvalidArgumentError, NotFoundError, etc. These should not contain any HTTP specific knowledge like status codes. There should be a HttpErrorHandler that maps these application errors to HTTP responses.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405613138", "createdAt": "2020-04-08T15:29:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDI0Mg==", "bodyText": "Makes sense.\nThough I think there's an argument to create an httpError type that implements Error and the rest inherit, therefore allowing each Error to be aware of its own status code. In which case there's no need for the mapper since their final formats are similar, you just need a parser like the handleError() which picks out the status code and message when creating the response.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405710242", "createdAt": "2020-04-08T17:58:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzEzOA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMDEzMA==", "bodyText": "I went with\n\nCustomer error types that contain their message logic\nSeparate error handling method that manages http vs db vs other errors\nHTTP codes and messages are function in an HTTPError file. Customer errors as well as handler can pull code and message from here\n\nI think this is better but let me know if there's anything else you feel strongly about", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405900130", "createdAt": "2020-04-09T01:06:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzEzOA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA2NTM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/helpers/error.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMDowM1rOGC0s5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzowMDo1N1rOGC4ftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzc5Nw==", "bodyText": "We shouldn't be throwing INTERNAL_ERROR. Instead, it should be the default response if the error is not one of the errors we explicitly throw.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405613797", "createdAt": "2020-04-08T15:30:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3NTk1OQ==", "bodyText": "We don't throw it, I thought express would default to this. This was meant to catch any accidental errors and makes sure the message sent out doesn't expose internal code through stack trace.\nUpon further testing I realize the status code is undefined so will update that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405675959", "createdAt": "2020-04-08T17:00:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/helpers/error.js", "diffHunk": "@@ -0,0 +1,88 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class ErrorHandler extends Error {\n+  constructor(statusCode, message) {\n+    super();\n+    this.statusCode = statusCode;\n+\n+    // support single error message or array of messages\n+    this.message = Array.isArray(message) ? message : [errorMessage(message)];\n+  }\n+}\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+const httpErrorMessages = {\n+  NOT_FOUND: 'Not found',\n+  INTERNAL_ERROR: 'Internal error',\n+};\n+\n+const errorMessage = (message) => {\n+  return {message: message};\n+};\n+\n+const errorMessageFormat = (messages) => {\n+  return {\n+    _status: {\n+      messages: messages,\n+    },\n+  };\n+};\n+\n+const createSingleErrorJsonResponse = (message) => {\n+  return errorMessageFormat([errorMessage(message)]);\n+};\n+\n+const handleError = (err, req, res, next) => {\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+\n+  if (/ECONNREFUSED/.test(message)) {\n+    res\n+      .status(httpStatusCodes.SERVICE_UNAVAILABLE)\n+      .json(createSingleErrorJsonResponse('Unable to connect to database. Please retry later'));\n+    return;\n+  }\n+\n+  if (statusCode === httpStatusCodes.INTERNAL_ERROR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzc5Nw=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA3MjY2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/cacher.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMTozN1rOGC0xXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNDoxMVrOGDD-ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDk0Mg==", "bodyText": "Let's just remove the file (and node-cache). We can add it back if needed in #668. This logic can move to the error handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405614942", "createdAt": "2020-04-08T15:31:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/cacher.js", "diffHunk": "@@ -50,17 +50,13 @@ class Cacher {\n     // TODO: Enable intellgent caching later by detecting if the content is\n     // cacheable by checking if the response to the query will not change.\n     // For now, we disable caching.\n-    func(req, res)\n-      .then((data) => {\n-        if (data.code != utils.httpStatusCodes.OK) {\n-          res.status(data.code).send(data.contents);\n-        } else {\n-          res.json(data.contents);\n-        }\n-      })\n-      .catch((err) => {\n-        utils.errorHandler(err, req, res, null);\n-      });\n+    func(req, res).then((data) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDA5OQ==", "bodyText": "Will do", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405864099", "createdAt": "2020-04-08T23:04:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/cacher.js", "diffHunk": "@@ -50,17 +50,13 @@ class Cacher {\n     // TODO: Enable intellgent caching later by detecting if the content is\n     // cacheable by checking if the response to the query will not change.\n     // For now, we disable caching.\n-    func(req, res)\n-      .then((data) => {\n-        if (data.code != utils.httpStatusCodes.OK) {\n-          res.status(data.code).send(data.contents);\n-        } else {\n-          res.json(data.contents);\n-        }\n-      })\n-      .catch((err) => {\n-        utils.errorHandler(err, req, res, null);\n-      });\n+    func(req, res).then((data) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDk0Mg=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA3NTQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/balances.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMjoxMlrOGC0zGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNDoyM1rOGDD--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM4NA==", "bodyText": "Why are we blocking here? Should just return the promise. Same comment everywhere else.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405615384", "createdAt": "2020-04-08T15:32:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/balances.js", "diffHunk": "@@ -119,7 +113,7 @@ const getBalances = function (req, res) {\n   logger.trace('getBalance query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  return pool.query(pgSqlQuery, sqlParams).then((results) => {\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDE4Nw==", "bodyText": "Removed awaits", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405864187", "createdAt": "2020-04-08T23:04:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/balances.js", "diffHunk": "@@ -119,7 +113,7 @@ const getBalances = function (req, res) {\n   logger.trace('getBalance query: ' + pgSqlQuery + JSON.stringify(sqlParams));\n \n   // Execute query\n-  return pool.query(pgSqlQuery, sqlParams).then((results) => {\n+  return await pool.query(pgSqlQuery, sqlParams).then((results) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTM4NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA5MDIwOnYy", "diffSide": "LEFT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNToyMFrOGC08LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNTozOFrOGDEAhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzcwOA==", "bodyText": "These options should also be removed from config/application.yaml and docs/configuration.md (and search for others)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405617708", "createdAt": "2020-04-08T15:35:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -91,35 +92,25 @@ app.use(bodyParser.json());\n app.use(compression());\n app.use(cors());\n \n-let caches = {};\n-for (const api of [\n-  {name: 'transactions', ttl: config.api.ttl.transactions},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDU4MA==", "bodyText": "Will do", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405864580", "createdAt": "2020-04-08T23:05:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -91,35 +92,25 @@ app.use(bodyParser.json());\n app.use(compression());\n app.use(cors());\n \n-let caches = {};\n-for (const api of [\n-  {name: 'transactions', ttl: config.api.ttl.transactions},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNzcwOA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA5NjUyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNjozNVrOGC0_9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNjoyMVrOGDEBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxODY3Ng==", "bodyText": "Would prefer an error package and handler and concrete errors all existing in there. Helpers is generic and is not self descriptive", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405618676", "createdAt": "2020-04-08T15:36:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -40,7 +41,7 @@ const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n const eventAnalytics = require('./eventAnalytics.js');\n const utils = require('./utils.js');\n-const Cacher = require('./cacher.js');\n+const {handleError} = require('./helpers/error');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDgwMA==", "bodyText": "Makes sense. Will do", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405864800", "createdAt": "2020-04-08T23:06:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -40,7 +41,7 @@ const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n const eventAnalytics = require('./eventAnalytics.js');\n const utils = require('./utils.js');\n-const Cacher = require('./cacher.js');\n+const {handleError} = require('./helpers/error');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxODY3Ng=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzEwODAxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozOTowM1rOGC1HDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNjo0MFrOGDEBxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMDQ5NA==", "bodyText": "All these validate methods should not need to return booleans anymore if they throw errors as Appy indicated below as well.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405620494", "createdAt": "2020-04-08T15:39:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -40,11 +41,13 @@ const columnMap = {\n  * Verify consensusTimestamp meets seconds or seconds.upto 9 digits format\n  */\n const validateConsensusTimestampParam = function (consensusTimestamp) {\n-  let badParams = [];\n   if (!utils.isValidTimestampParam(consensusTimestamp)) {\n-    badParams.push({message: `Invalid parameter: consensusTimestamp`});\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [\n+      utils.getInvalidParameterMessageObject(topicMessageColumns.CONSENSUS_TIMESTAMP),\n+    ]);\n   }\n-  return utils.makeValidationResponse(badParams);\n+\n+  return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDkwMA==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405864900", "createdAt": "2020-04-08T23:06:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -40,11 +41,13 @@ const columnMap = {\n  * Verify consensusTimestamp meets seconds or seconds.upto 9 digits format\n  */\n const validateConsensusTimestampParam = function (consensusTimestamp) {\n-  let badParams = [];\n   if (!utils.isValidTimestampParam(consensusTimestamp)) {\n-    badParams.push({message: `Invalid parameter: consensusTimestamp`});\n+    throw new ErrorHandler(httpStatusCodes.BAD_REQUEST, [\n+      utils.getInvalidParameterMessageObject(topicMessageColumns.CONSENSUS_TIMESTAMP),\n+    ]);\n   }\n-  return utils.makeValidationResponse(badParams);\n+\n+  return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMDQ5NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzExNDc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactions.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0MDozNVrOGC1LRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxODowMVrOGDpwLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMTU3NA==", "bodyText": "Don't have to do it in this PR, but we should probably wrap these heavyweight query logs in if (logger.isTraceEnabled()) to avoid the performance penalty of constructing the strings.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405621574", "createdAt": "2020-04-08T15:40:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -198,21 +199,16 @@ const reqToSql = function (req) {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getTransactions = function (req) {\n+const getTransactions = async (req, res) => {\n   // Validate query parameters first\n-  const valid = utils.validateReq(req);\n-  if (!valid.isValid) {\n-    return new Promise((resolve, reject) => {\n-      resolve(valid);\n-    });\n-  }\n+  utils.validateReq(req);\n \n   let query = reqToSql(req);\n \n   logger.trace('getTransactions query: ' + query.query + JSON.stringify(query.params));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4Mjk4OA==", "bodyText": "Will do in future PR", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406482988", "createdAt": "2020-04-09T21:18:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -198,21 +199,16 @@ const reqToSql = function (req) {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getTransactions = function (req) {\n+const getTransactions = async (req, res) => {\n   // Validate query parameters first\n-  const valid = utils.validateReq(req);\n-  if (!valid.isValid) {\n-    return new Promise((resolve, reject) => {\n-      resolve(valid);\n-    });\n-  }\n+  utils.validateReq(req);\n \n   let query = reqToSql(req);\n \n   logger.trace('getTransactions query: ' + query.query + JSON.stringify(query.params));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMTU3NA=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzEyMDYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactions.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0MjowMlrOGC1PGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjozNjoxOVrOGDHlTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMjU1NQ==", "bodyText": "Can we just return ret and higher level middleware convert to json? We may want to support other content types in the future, for example and would like to move service layer to not be http specific. Same comment applies to other areas.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405622555", "createdAt": "2020-04-08T15:42:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -240,10 +236,7 @@ const getTransactions = function (req) {\n \n     logger.debug('getTransactions returning ' + ret.transactions.length + ' entries');\n \n-    return {\n-      code: utils.httpStatusCodes.OK,\n-      contents: ret,\n-    };\n+    res.json(ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyMzE1MA==", "bodyText": "Good idea. Create d a responseHandler to do this. Moved it and the errorHandler to a middleware folder.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405923150", "createdAt": "2020-04-09T02:36:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -240,10 +236,7 @@ const getTransactions = function (req) {\n \n     logger.debug('getTransactions returning ' + ret.transactions.length + ' entries');\n \n-    return {\n-      code: utils.httpStatusCodes.OK,\n-      contents: ret,\n-    };\n+    res.json(ret);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyMjU1NQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODE1NTk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utils.test.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoxODoyMlrOGC_YzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoxODoyMlrOGC_YzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4ODg3Nw==", "bodyText": "looks like not used?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405788877", "createdAt": "2020-04-08T20:18:22Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/utils.test.js", "diffHunk": "@@ -19,10 +19,9 @@\n  */\n 'use strict';\n \n-const request = require('supertest');\n const utils = require('../utils.js');\n-const constants = require('../constants.js');\n const config = require('../config.js');\n+const {httpStatusCodes} = require('../helpers/error');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQyNjYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDo1MlrOGDB_2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDozODozMVrOGDFt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTY0MQ==", "bodyText": "yeah, expected values broken into separate file decreases readability. We are going towards less cohesion and more coupling (between files, matching on test names) when the tests are simple enough to not need jest snapshots.\nAlso, this is an internal function (not api) with an internal object as expected value. Standard way of building expected value (using Error's constructor) and then matching the objects seems right.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405831641", "createdAt": "2020-04-08T21:40:52Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -211,16 +194,7 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_BALANCE, '23456789012345678901234'),\n     ];\n \n-    let validationResponse = utils.validateAndParseFilters(filters);\n-\n-    verifyInvalidFilters(validationResponse, [\n-      constants.filterKeys.ACCOUNT_ID,\n-      constants.filterKeys.TIMESTAMP,\n-      constants.filterKeys.LIMIT,\n-      constants.filterKeys.SEQUENCE_NUMBER,\n-      constants.filterKeys.ACCOUNT_PUBLICKEY,\n-      constants.filterKeys.ACCOUNT_BALANCE,\n-    ]);\n+    verifyInvalidFilters(filters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5MjU4Nw==", "bodyText": "Not sure I agree.\nThe benefit of a snapshot is that you capture all the properties of the object and check it all at once. The tests don't have to have lines of expected object creation and you don't have to have lines of comparisons.\nIn the valid cases I do that comparison cause it's easier. In this case with the throwing of a detailed error, capturing its details isn't as easy as checking a single return type .", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405892587", "createdAt": "2020-04-09T00:38:31Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/utilsFilters.test.js", "diffHunk": "@@ -211,16 +194,7 @@ describe('utils validateAndParseFilters tests', () => {\n       utils.buildComparatorFilter(constants.filterKeys.ACCOUNT_BALANCE, '23456789012345678901234'),\n     ];\n \n-    let validationResponse = utils.validateAndParseFilters(filters);\n-\n-    verifyInvalidFilters(validationResponse, [\n-      constants.filterKeys.ACCOUNT_ID,\n-      constants.filterKeys.TIMESTAMP,\n-      constants.filterKeys.LIMIT,\n-      constants.filterKeys.SEQUENCE_NUMBER,\n-      constants.filterKeys.ACCOUNT_PUBLICKEY,\n-      constants.filterKeys.ACCOUNT_BALANCE,\n-    ]);\n+    verifyInvalidFilters(filters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTY0MQ=="}, "originalCommit": {"oid": "4842e61a51315f20c5bd8b9c60aafbfbe4477e82"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODkzMTU3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/errors/formattedError.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozNzo0N1rOGDGqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzowNzoyMVrOGDIC5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODAwMA==", "bodyText": "Right now sub-classes are use ctor if it's single message, otherwise directly setting this.message in their own ctor. And all sub-classes are taking responsibility of formatting messages.\nWe can make things simpler.\n\nknowledge of error message --> json formatting abstraction can be limited to this class. This class can take in single/array of plain error strings. Sub-classes don't need to bother with knowledge of json formatting (and adhering to it)\nhere in this ctor:\n\nif (!Array.isArray(messages)) {\n  messages = [messages]\n}\nthis.jsonError = {\n    _status: {\n      messages: messages.map(m => { return {message: m}; }),\n    },\n  };\n\n('message' is being used in 5-6 different contexts, becoming confusing. We can use different variable names, hence 'jsonError')\n\n3 other fns in this class can be deleted\n\nIn sub-classes:\n\nno change in badRequestError, httpError, notFoundError\ndbError can have boolean isDbConnectionError. It can be set in ctor.\ninvalidArgumentError\n\n// Plain ctor like other errors. If any api wants to throw custom error messages on invalid argument, it can directly use ctor.\n\n// factory method to help common case\nstatic forParams(badParams) {\n  if(!Array.isArray(badParams) {\n    badParam = [badParams];\n  }\n  return new InvalidArgumentError(badParams.map(p => `${httpErrorMessages.INVALID_ARGUMENT}${message}`));\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405908000", "createdAt": "2020-04-09T01:37:47Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/errors/formattedError.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class FormattedError extends Error {\n+  constructor(message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a72f468d993eb6b8dd89784bf600aacf750858"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyOTU3OQ==", "bodyText": "Thanks, for the suggestion. Will incorporate some of it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405929579", "createdAt": "2020-04-09T03:02:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/formattedError.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class FormattedError extends Error {\n+  constructor(message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODAwMA=="}, "originalCommit": {"oid": "07a72f468d993eb6b8dd89784bf600aacf750858"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMDcyNQ==", "bodyText": "Took the message formatting and simplification. Updated most params to be something other than message.\nDidn't want to change the main message property since by convention Error.message is a thing.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405930725", "createdAt": "2020-04-09T03:07:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/formattedError.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class FormattedError extends Error {\n+  constructor(message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwODAwMA=="}, "originalCommit": {"oid": "07a72f468d993eb6b8dd89784bf600aacf750858"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTA4NzYyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/config/application.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoxMTozMlrOGDIGlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNTo0N1rOGDmn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMTY3MQ==", "bodyText": "Undo extra spacing. We may need to tweak prettier's config to change  indenting or add *.yaml/yml to .prettierignore.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405931671", "createdAt": "2020-04-09T03:11:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/config/application.yml", "diffHunk": "@@ -1,21 +1,16 @@\n # This file contains application defaults and shouldn't be modified. See docs/configuration.md for how to override.\n hedera:\n-  mirror:\n-    api:\n-      includeHostInLink: false\n-      maxLimit: 1000\n-      log:\n-        level: debug\n-      port: 5551\n-      ttl:\n-        accounts: 60\n-        balances: 60\n-        events: 10\n-        transactions: 10\n-    db:\n-      apiPassword: mirror_api_pass\n-      apiUsername: mirror_api\n-      host: 127.0.0.1\n-      name: mirror_node\n-      port: 5432\n-    shard: 0\n+    mirror:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTUxNg==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406431516", "createdAt": "2020-04-09T19:35:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/config/application.yml", "diffHunk": "@@ -1,21 +1,16 @@\n # This file contains application defaults and shouldn't be modified. See docs/configuration.md for how to override.\n hedera:\n-  mirror:\n-    api:\n-      includeHostInLink: false\n-      maxLimit: 1000\n-      log:\n-        level: debug\n-      port: 5551\n-      ttl:\n-        accounts: 60\n-        balances: 60\n-        events: 10\n-        transactions: 10\n-    db:\n-      apiPassword: mirror_api_pass\n-      apiUsername: mirror_api\n-      host: 127.0.0.1\n-      name: mirror_node\n-      port: 5432\n-    shard: 0\n+    mirror:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMTY3MQ=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTczNA==", "bodyText": "Specified it in the package.json. We can tweak as need in future PR's", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406431734", "createdAt": "2020-04-09T19:35:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/config/application.yml", "diffHunk": "@@ -1,21 +1,16 @@\n # This file contains application defaults and shouldn't be modified. See docs/configuration.md for how to override.\n hedera:\n-  mirror:\n-    api:\n-      includeHostInLink: false\n-      maxLimit: 1000\n-      log:\n-        level: debug\n-      port: 5551\n-      ttl:\n-        accounts: 60\n-        balances: 60\n-        events: 10\n-        transactions: 10\n-    db:\n-      apiPassword: mirror_api_pass\n-      apiUsername: mirror_api\n-      host: 127.0.0.1\n-      name: mirror_node\n-      port: 5432\n-    shard: 0\n+    mirror:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMTY3MQ=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTA5MDA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/accounts.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoxMzowN1rOGDIIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozMDo1N1rOGDoU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjA0Ng==", "bodyText": "I'm confused. Why would the return value be set on the request object? This is undocumented and seems like bad practice. The recommended way is to use res.locals. Though if you set a variable on the response you might as well just res.json(ret) as it's not much of an improvement. Also, not sure if you're required to call next() in this scenario.\nMy intent was to decouple the service layer from the HTTP layer. Why don't we just return ret; and then in server.js:\napp.getAsync(apiPrefix + '/transactions', (req, res) => transactions.getTransactions(req).then(ret => res.json(ret)));", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405932046", "createdAt": "2020-04-09T03:13:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -173,11 +171,7 @@ const getAccounts = function (req) {\n     }\n \n     logger.debug('getAccounts returning ' + ret.accounts.length + ' entries');\n-\n-    return {\n-      code: utils.httpStatusCodes.OK,\n-      contents: ret,\n-    };\n+    req[constants.responseDataLabel] = ret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NDU4NQ==", "bodyText": "I looked around online and saw the recommendation of using the req.\nRes.locals does seem better. I thought touching the res would result in some of the errors I'd been seeing that only let you set the headers once.\nI did test with the next() and it seems fine, I think it would be required if you had middleware that needed to do some more in depth logic following this.\nI see what you're saying in the server.js.\nI just Didn't want to make it bigger cause I also eventually want to clean up that file and move each of those routes out to their own files.\nWe'll need to do further refactoring to decouple the service layer from http, cause you won't want to pass in the req object either. Probably an object that contains the url. I'll leave that for later", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406444585", "createdAt": "2020-04-09T20:00:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -173,11 +171,7 @@ const getAccounts = function (req) {\n     }\n \n     logger.debug('getAccounts returning ' + ret.accounts.length + ' entries');\n-\n-    return {\n-      code: utils.httpStatusCodes.OK,\n-      contents: ret,\n-    };\n+    req[constants.responseDataLabel] = ret;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjA0Ng=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1OTYzMA==", "bodyText": "I opened a ticket #677 to address the work I noted in the later part that we both want done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406459630", "createdAt": "2020-04-09T20:30:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -173,11 +171,7 @@ const getAccounts = function (req) {\n     }\n \n     logger.debug('getAccounts returning ' + ret.accounts.length + ' entries');\n-\n-    return {\n-      code: utils.httpStatusCodes.OK,\n-      contents: ret,\n-    };\n+    req[constants.responseDataLabel] = ret;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMjA0Ng=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTA5ODYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/transactions.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzoxODowM1rOGDIM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyMjoyN1rOGDoESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI2Nw==", "bodyText": "Why would this not just be InvalidArgumentError? I don't understand the need for BadRequestError as they both return the same http status code and are about bad input.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r405933267", "createdAt": "2020-04-09T03:18:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -265,8 +259,8 @@ const getOneTransaction = function (req, res) {\n     let message =\n       'Invalid Transaction id. Please use \"shard.realm.num-ssssssssss-nnnnnnnnn\" ' +\n       'format where ssss are 10 digits seconds and nnn are 9 digits nanoseconds';\n-    res.status(utils.httpStatusCodes.BAD_REQUEST).send(utils.createSingleErrorJsonResponse(message));\n-    return;\n+\n+    throw new BadRequestError(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyMDcxMA==", "bodyText": "The real difference is InvalidArgument encapsulates the required formatting of 'Invalid parameter: '.\nNot separating can make it confusing to distinguish between a parameter of say 'topic_num' which should be formatted and the above case which shouldn't be formatted. Even more so when a set of them are passed through.\nStatus code should have an impact here any longer since the errors are void of that logic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406420710", "createdAt": "2020-04-09T19:14:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -265,8 +259,8 @@ const getOneTransaction = function (req, res) {\n     let message =\n       'Invalid Transaction id. Please use \"shard.realm.num-ssssssssss-nnnnnnnnn\" ' +\n       'format where ssss are 10 digits seconds and nnn are 9 digits nanoseconds';\n-    res.status(utils.httpStatusCodes.BAD_REQUEST).send(utils.createSingleErrorJsonResponse(message));\n-    return;\n+\n+    throw new BadRequestError(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI2Nw=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzNTY5Mg==", "bodyText": "I agree that having two classes here for same logical error is not required. An earlier suggestion to avoid the same was making InvalidArgumentError class ctor general (and similar to other errors), and a helper method for common case. Copying it below. The code here will use the ctor.\n// Plain ctor like other errors. If any api wants to throw custom error messages on invalid argument, it can directly use ctor.\n\n// factory method to help common case\nstatic forParams(badParams) {\n  if(!Array.isArray(badParams) {\n    badParam = [badParams];\n  }\n  return new InvalidArgumentError(badParams.map(p => `${httpErrorMessages.INVALID_ARGUMENT}${message}`));\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406435692", "createdAt": "2020-04-09T19:43:39Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -265,8 +259,8 @@ const getOneTransaction = function (req, res) {\n     let message =\n       'Invalid Transaction id. Please use \"shard.realm.num-ssssssssss-nnnnnnnnn\" ' +\n       'format where ssss are 10 digits seconds and nnn are 9 digits nanoseconds';\n-    res.status(utils.httpStatusCodes.BAD_REQUEST).send(utils.createSingleErrorJsonResponse(message));\n-    return;\n+\n+    throw new BadRequestError(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI2Nw=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NTM3MQ==", "bodyText": "Will remove BadRequest and utilize Appy's suggestion", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406455371", "createdAt": "2020-04-09T20:22:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/transactions.js", "diffHunk": "@@ -265,8 +259,8 @@ const getOneTransaction = function (req, res) {\n     let message =\n       'Invalid Transaction id. Please use \"shard.realm.num-ssssssssss-nnnnnnnnn\" ' +\n       'format where ssss are 10 digits seconds and nnn are 9 digits nanoseconds';\n-    res.status(utils.httpStatusCodes.BAD_REQUEST).send(utils.createSingleErrorJsonResponse(message));\n-    return;\n+\n+    throw new BadRequestError(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkzMzI2Nw=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTc1ODg1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxNzoyMFrOGDOXyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMTozOVrOGDlkZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDM3OA==", "bodyText": "It's clear what it's doing. Why it's doing that would be more useful in comment. I am sure you tried to remove it and found a gotcha. Documenting that gotcha is important so that anyone working in these parts in future can avoid the pit you just found.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406034378", "createdAt": "2020-04-09T08:17:20Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNDQzOA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406414438", "createdAt": "2020-04-09T19:01:39Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDM3OA=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTc4ODM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyNTozM1rOGDOqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNDo1MFrOGDmmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTEyMA==", "bodyText": "statusCode is not valid unless error has been verified to be instance of HttpError.\nSo this should be inside if (err instanceof HttpError)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406039120", "createdAt": "2020-04-09T08:25:33Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMTI2Nw==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406431267", "createdAt": "2020-04-09T19:34:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTEyMA=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg1NDYyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzozMFrOGDPTiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxMjoyN1rOGDfoUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTY3Mg==", "bodyText": "This is just doing regex match on generic error.message like before rather than taking the advantage of our new custom errors.\nAs it is, isDbConnectionError function can even be moved to util and it doesn't affect anything.\nRather, it can be made property of error itself. A DbError can be connection error or not. And it should easy to check it by something like error.isConnectionError.\nThe code here would be then:\nif (err instanceof DbError && err.isConnectionError) {\n  res.status(..).json(...); \n}\n\nAlso, creating a new DbError() just to get DbErrorMessage suggests something is wrong.\nIn DbError,\n\nactual message should be use to set isConnectionError property\nalways pass DbErrorMessage to parent class\nAdditionally, log the actual underlying error here. It can be stored in this.baseError or field of similar sort.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406049672", "createdAt": "2020-04-09T08:43:30Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+  // catch DB errors\n+  if (DbError.isDbConnectionError(message)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNzEzNg==", "bodyText": "Yeah. The hope/intention was that in future we'd be able to throw this error  like the others. In this case where we're not able to catch the case early on and throw it I'm making use of the regex matching.\nFigured keeping it in the DbError class made sense instead of spreading DbError logic around the code base.\nI agreed on the actual message used to determine if connection issue. Problem is I didn't want that class being used for non db errors. A DB error that isn't connection related should still probably return this issue.\nI'll think on a way to catch pg.query errors on and then I'll revert one of my earlier changes and just have a catch and throw so we aren't guessing if it's a DB error.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406317136", "createdAt": "2020-04-09T16:12:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,55 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {FormattedError} = require('../errors/formattedError');\n+const {httpStatusCodes, HttpError} = require('../errors/httpError');\n+\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  const {statusCode, message} = err;\n+  // catch DB errors\n+  if (DbError.isDbConnectionError(message)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTY3Mg=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUxMjQyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowOToyNFrOGDfg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMjowNFrOGDllUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNTI0NA==", "bodyText": "res can be removed from all the service layer methods.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406315244", "createdAt": "2020-04-09T16:09:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -271,31 +246,33 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByConsensusTimestamp = function (req, res) {\n+const getMessageByConsensusTimestamp = async (req, res) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNDY3Mg==", "bodyText": "IN the process of removing those left over", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406414672", "createdAt": "2020-04-09T19:02:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -271,31 +246,33 @@ const getMessages = async (pgSqlQuery, pgSqlParams) => {\n  * @param {Request} req HTTP request object\n  * @return {Promise} Promise for PostgreSQL query\n  */\n-const getMessageByConsensusTimestamp = function (req, res) {\n+const getMessageByConsensusTimestamp = async (req, res) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNTI0NA=="}, "originalCommit": {"oid": "44abd7e050753c0c5a0e20ddc30d0c33cdea82fc"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjIxNzQ3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/errors/dbError.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozMDowMlrOGDmcYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowODoyM1rOGDnpRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyODc2OQ==", "bodyText": "can do return (/ECONNREFUSED/.test(errorMessage) || /Connection terminated unexpectedly/.test(errorMessage) || /unable to read data from DB/.test(errorMessage))", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406428769", "createdAt": "2020-04-09T19:30:02Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/errors/dbError.js", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const {FormattedError} = require('./formattedError');\n+\n+const DbErrorMessage = 'Unable to connect to database. Please retry later';\n+\n+class DbError extends FormattedError {\n+  constructor(errorMessage) {\n+    super(DbErrorMessage);\n+    this.dbErrorMessage = errorMessage;\n+    this.isConnectionError = this.isDbConnectionError(errorMessage);\n+  }\n+\n+  /**\n+   * Match known db error connection messages\n+   * @param errorMessage\n+   * @returns {boolean}\n+   */\n+  isDbConnectionError(errorMessage) {\n+    if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76525b87edc26dccf1597dce849f9985399c3fb3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0ODQ1Mw==", "bodyText": "Thanks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406448453", "createdAt": "2020-04-09T20:08:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/dbError.js", "diffHunk": "@@ -0,0 +1,53 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const {FormattedError} = require('./formattedError');\n+\n+const DbErrorMessage = 'Unable to connect to database. Please retry later';\n+\n+class DbError extends FormattedError {\n+  constructor(errorMessage) {\n+    super(DbErrorMessage);\n+    this.dbErrorMessage = errorMessage;\n+    this.isConnectionError = this.isDbConnectionError(errorMessage);\n+  }\n+\n+  /**\n+   * Match known db error connection messages\n+   * @param errorMessage\n+   * @returns {boolean}\n+   */\n+  isDbConnectionError(errorMessage) {\n+    if (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyODc2OQ=="}, "originalCommit": {"oid": "76525b87edc26dccf1597dce849f9985399c3fb3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjMwNDUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/errors/formattedError.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NzoyNVrOGDnT1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowOTowNFrOGDnq_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjk2NA==", "bodyText": "FormattedError is just converting single message to array. It is not a 'type of error'.\nWe should remove this and let httpErrorHandler.errorMessageFormat do the if(!Array...)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406442964", "createdAt": "2020-04-09T19:57:25Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/errors/formattedError.js", "diffHunk": "@@ -0,0 +1,36 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class FormattedError extends Error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e931b1e0215ba518c042bfde08e9057d9b94ae9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0ODg5NA==", "bodyText": "Good point. Missed this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406448894", "createdAt": "2020-04-09T20:09:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/formattedError.js", "diffHunk": "@@ -0,0 +1,36 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+class FormattedError extends Error {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjk2NA=="}, "originalCommit": {"oid": "9e931b1e0215ba518c042bfde08e9057d9b94ae9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjYxNDM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/errors/invalidArgumentError.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTozNzoxMFrOGDqSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxOToyNVrOGDsf3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MTg0MA==", "bodyText": "nit: Don't think we need to export InvalidArgumentErrorMessageFormat", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406491840", "createdAt": "2020-04-09T21:37:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/errors/invalidArgumentError.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const InvalidArgumentErrorMessageFormat = 'Invalid parameter: ';\n+\n+class InvalidArgumentError extends Error {\n+  constructor(errorMessage) {\n+    super();\n+\n+    this.message = errorMessage;\n+  }\n+\n+  // factory method to help common case\n+  static forParams(badParams) {\n+    if (!Array.isArray(badParams)) {\n+      badParams = [badParams];\n+    }\n+    return new InvalidArgumentError(badParams.map((message) => `${InvalidArgumentErrorMessageFormat}${message}`));\n+  }\n+}\n+\n+module.exports = {\n+  InvalidArgumentError,\n+  InvalidArgumentErrorMessageFormat,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNzk2Ng==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406527966", "createdAt": "2020-04-09T23:19:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/invalidArgumentError.js", "diffHunk": "@@ -0,0 +1,42 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const InvalidArgumentErrorMessageFormat = 'Invalid parameter: ';\n+\n+class InvalidArgumentError extends Error {\n+  constructor(errorMessage) {\n+    super();\n+\n+    this.message = errorMessage;\n+  }\n+\n+  // factory method to help common case\n+  static forParams(badParams) {\n+    if (!Array.isArray(badParams)) {\n+      badParams = [badParams];\n+    }\n+    return new InvalidArgumentError(badParams.map((message) => `${InvalidArgumentErrorMessageFormat}${message}`));\n+  }\n+}\n+\n+module.exports = {\n+  InvalidArgumentError,\n+  InvalidArgumentErrorMessageFormat,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MTg0MA=="}, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjYxNjc4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/errors/notFoundError.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTozNzo1NlrOGDqUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxOTozMVrOGDsf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MjIxOQ==", "bodyText": "Same", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406492219", "createdAt": "2020-04-09T21:37:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/errors/notFoundError.js", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const NotFoundErrorMessage = 'Not found';\n+\n+class NotFoundError extends Error {\n+  constructor(errorMessage) {\n+    super();\n+    this.message = errorMessage === undefined ? NotFoundErrorMessage : errorMessage;\n+  }\n+}\n+\n+module.exports = {\n+  NotFoundError,\n+  NotFoundErrorMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNzk4NQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406527985", "createdAt": "2020-04-09T23:19:31Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/errors/notFoundError.js", "diffHunk": "@@ -0,0 +1,33 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+const NotFoundErrorMessage = 'Not found';\n+\n+class NotFoundError extends Error {\n+  constructor(errorMessage) {\n+    super();\n+    this.message = errorMessage === undefined ? NotFoundErrorMessage : errorMessage;\n+  }\n+}\n+\n+module.exports = {\n+  NotFoundError,\n+  NotFoundErrorMessage,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MjIxOQ=="}, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjYxODEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTozODoyNVrOGDqVGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxOTozNVrOGDsgBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MjQ0Mg==", "bodyText": "Same", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406492442", "createdAt": "2020-04-09T21:38:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,85 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const {NotFoundError} = require('../errors/notFoundError');\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+// Error middleware which formats thrown errors and maps them to appropriate http status codes\n+// next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  // get application error message format\n+  const errorMessage = errorMessageFormat(err.message);\n+\n+  // map errors to desired http status codes\n+  switch (err.constructor) {\n+    case DbError:\n+      logger.debug(`DB error: ${err.dbErrorMessage}`);\n+      res.status(httpStatusCodes.SERVICE_UNAVAILABLE).json(errorMessage);\n+      return;\n+    case InvalidArgumentError:\n+      res.status(httpStatusCodes.BAD_REQUEST).json(errorMessage);\n+      return;\n+    case NotFoundError:\n+      res.status(httpStatusCodes.NOT_FOUND).json(errorMessage);\n+      return;\n+    default:\n+      logger.trace(`Unhandled error encountered`);\n+      res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessage);\n+  }\n+};\n+\n+/**\n+ * Application error message format\n+ * @param array of messages\n+ * @returns {{_status: {messages: *}}}\n+ */\n+const errorMessageFormat = (errorMessages) => {\n+  if (!Array.isArray(errorMessages)) {\n+    errorMessages = [errorMessages];\n+  }\n+\n+  return {\n+    _status: {\n+      messages: errorMessages.map((m) => {\n+        return {message: m};\n+      }),\n+    },\n+  };\n+};\n+\n+module.exports = {\n+  handleError,\n+  httpStatusCodes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyODAwNA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406528004", "createdAt": "2020-04-09T23:19:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -0,0 +1,85 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const {DbError} = require('../errors/dbError');\n+const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n+const {NotFoundError} = require('../errors/notFoundError');\n+\n+const httpStatusCodes = {\n+  OK: 200,\n+  BAD_REQUEST: 400,\n+  NOT_FOUND: 404,\n+  INTERNAL_ERROR: 500,\n+  SERVICE_UNAVAILABLE: 503,\n+};\n+\n+// Error middleware which formats thrown errors and maps them to appropriate http status codes\n+// next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n+const handleError = (err, req, res, next) => {\n+  // only logs in non test environment\n+  if (process.env.NODE_ENV !== 'test') {\n+    logger.error(`Error processing ${req.originalUrl}: `, err);\n+  }\n+\n+  // get application error message format\n+  const errorMessage = errorMessageFormat(err.message);\n+\n+  // map errors to desired http status codes\n+  switch (err.constructor) {\n+    case DbError:\n+      logger.debug(`DB error: ${err.dbErrorMessage}`);\n+      res.status(httpStatusCodes.SERVICE_UNAVAILABLE).json(errorMessage);\n+      return;\n+    case InvalidArgumentError:\n+      res.status(httpStatusCodes.BAD_REQUEST).json(errorMessage);\n+      return;\n+    case NotFoundError:\n+      res.status(httpStatusCodes.NOT_FOUND).json(errorMessage);\n+      return;\n+    default:\n+      logger.trace(`Unhandled error encountered`);\n+      res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessage);\n+  }\n+};\n+\n+/**\n+ * Application error message format\n+ * @param array of messages\n+ * @returns {{_status: {messages: *}}}\n+ */\n+const errorMessageFormat = (errorMessages) => {\n+  if (!Array.isArray(errorMessages)) {\n+    errorMessages = [errorMessages];\n+  }\n+\n+  return {\n+    _status: {\n+      messages: errorMessages.map((m) => {\n+        return {message: m};\n+      }),\n+    },\n+  };\n+};\n+\n+module.exports = {\n+  handleError,\n+  httpStatusCodes,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MjQ0Mg=="}, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjYzMTI3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo0Mjo0NFrOGDqc6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxOTo0MlrOGDsgKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5NDQ0MA==", "bodyText": "Same", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406494440", "createdAt": "2020-04-09T21:42:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -304,6 +292,7 @@ module.exports = {\n   getMessageByConsensusTimestamp: getMessageByConsensusTimestamp,\n   getMessageByTopicAndSequenceRequest: getMessageByTopicAndSequenceRequest,\n   getTopicMessages: getTopicMessages,\n+  topicMessageColumns: topicMessageColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyODA0MQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/663#discussion_r406528041", "createdAt": "2020-04-09T23:19:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -304,6 +292,7 @@ module.exports = {\n   getMessageByConsensusTimestamp: getMessageByConsensusTimestamp,\n   getMessageByTopicAndSequenceRequest: getMessageByTopicAndSequenceRequest,\n   getTopicMessages: getTopicMessages,\n+  topicMessageColumns: topicMessageColumns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5NDQ0MA=="}, "originalCommit": {"oid": "44fe3f0482766b2d4ab86c39ca23ffda157f822a"}, "originalPosition": 268}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 960, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}