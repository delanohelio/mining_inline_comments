{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzA3OTA3", "number": 1305, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDoyNzowN1rOE_ch9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzowMjoyMFrOE_2MMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTYzMTg4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDoyNzowN1rOH9J-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjo1NDowM1rOH9xi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4ODY2Nw==", "bodyText": "If you're not caching this value so it's only created once, move the SecureRandom creation to a static variable as it can be a heavy weight operation to construct.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r533888667", "createdAt": "2020-12-02T04:27:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "diffHunk": "@@ -48,18 +47,15 @@\n     @ToString.Exclude\n     private Ed25519PrivateKey operatorPrivateKey;\n \n-    private String randomAlphanumeric;\n+    private byte[] randomAlphanumeric;\n \n-    public String getMessage() {\n-        int timeStampBytes = 8;\n+    public byte[] getMessage() {\n         if (randomAlphanumeric == null) {\n-            int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n-            randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+            randomAlphanumeric = new byte[messageByteSize > 8 ? messageByteSize - Long.BYTES : 0];\n+            new SecureRandom().nextBytes(randomAlphanumeric);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NTY0Ng==", "bodyText": "I am caching it so it's created once.\nDidn't want the weight of creating each time at high TPS tests", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534495646", "createdAt": "2020-12-02T21:33:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "diffHunk": "@@ -48,18 +47,15 @@\n     @ToString.Exclude\n     private Ed25519PrivateKey operatorPrivateKey;\n \n-    private String randomAlphanumeric;\n+    private byte[] randomAlphanumeric;\n \n-    public String getMessage() {\n-        int timeStampBytes = 8;\n+    public byte[] getMessage() {\n         if (randomAlphanumeric == null) {\n-            int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n-            randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+            randomAlphanumeric = new byte[messageByteSize > 8 ? messageByteSize - Long.BYTES : 0];\n+            new SecureRandom().nextBytes(randomAlphanumeric);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4ODY2Nw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUzNjkzMw==", "bodyText": "Ah, missed that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534536933", "createdAt": "2020-12-02T22:54:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "diffHunk": "@@ -48,18 +47,15 @@\n     @ToString.Exclude\n     private Ed25519PrivateKey operatorPrivateKey;\n \n-    private String randomAlphanumeric;\n+    private byte[] randomAlphanumeric;\n \n-    public String getMessage() {\n-        int timeStampBytes = 8;\n+    public byte[] getMessage() {\n         if (randomAlphanumeric == null) {\n-            int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n-            randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+            randomAlphanumeric = new byte[messageByteSize > 8 ? messageByteSize - Long.BYTES : 0];\n+            new SecureRandom().nextBytes(randomAlphanumeric);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4ODY2Nw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjQ5NjYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowMzo1MFrOH9lDtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxMzowM1rOH9wVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzMjM0Mw==", "bodyText": "Use Long.BYTES for 8", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534332343", "createdAt": "2020-12-02T17:03:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "diffHunk": "@@ -48,18 +47,15 @@\n     @ToString.Exclude\n     private Ed25519PrivateKey operatorPrivateKey;\n \n-    private String randomAlphanumeric;\n+    private byte[] randomAlphanumeric;\n \n-    public String getMessage() {\n-        int timeStampBytes = 8;\n+    public byte[] getMessage() {\n         if (randomAlphanumeric == null) {\n-            int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n-            randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+            randomAlphanumeric = new byte[messageByteSize > 8 ? messageByteSize - Long.BYTES : 0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxNzAyOA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534517028", "createdAt": "2020-12-02T22:13:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublishRequest.java", "diffHunk": "@@ -48,18 +47,15 @@\n     @ToString.Exclude\n     private Ed25519PrivateKey operatorPrivateKey;\n \n-    private String randomAlphanumeric;\n+    private byte[] randomAlphanumeric;\n \n-    public String getMessage() {\n-        int timeStampBytes = 8;\n+    public byte[] getMessage() {\n         if (randomAlphanumeric == null) {\n-            int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n-            randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+            randomAlphanumeric = new byte[messageByteSize > 8 ? messageByteSize - Long.BYTES : 0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzMjM0Mw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUxODMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzowODo0N1rOH9lRjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNTozMFrOH9wZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNTg4NQ==", "bodyText": "I think the message can be null or less than 8 so we should probably handle that explicitly as these topics are usually wide open and anyone can submit.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534335885", "createdAt": "2020-12-02T17:08:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -183,7 +175,7 @@ public Instant getMessagePublishInstant(T currentResponse) {\n     }\n \n     private Instant retrieveInstantFromArray(byte[] message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxODIyOQ==", "bodyText": "Updating to return Instant.MAX in case of null or bytes of length less than 8", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534518229", "createdAt": "2020-12-02T22:15:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -183,7 +175,7 @@ public Instant getMessagePublishInstant(T currentResponse) {\n     }\n \n     private Instant retrieveInstantFromArray(byte[] message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNTg4NQ=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUyNTk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMDoyNVrOH9lWUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNzoyNlrOH9wdXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNzEwNw==", "bodyText": "You should pass UTF-8 charset whenever using String.getBytes()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534337107", "createdAt": "2020-12-02T17:10:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -117,8 +117,9 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n-            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] publishTimestampByteArray = Longs.toByteArray(System.currentTimeMillis());\n+            byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + i + 1).getBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTEzNQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534519135", "createdAt": "2020-12-02T22:17:26Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -117,8 +117,9 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n-            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] publishTimestampByteArray = Longs.toByteArray(System.currentTimeMillis());\n+            byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + i + 1).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzNzEwNw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUzOTcwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMzo0MVrOH9lexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNzoyMVrOH9wdNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzOTI3MQ==", "bodyText": "Printing the byte array is probably not that helpful. Should print the ex.getMessage() and maybe the message as a string (pass charset).", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534339271", "createdAt": "2020-12-02T17:13:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -163,16 +161,10 @@ public Instant getMessagePublishInstant(T currentResponse) {\n \n         byte[] message = getMessageByteArray(currentResponse);\n         try {\n-            byte[] decodedMessage = Base64.decodeBase64(message);\n-            publishInstant = retrieveInstantFromArray(decodedMessage);\n+            publishInstant = retrieveInstantFromArray(message);\n             if (isInstantOutOfRange(publishInstant)) {\n-                publishInstant = retrieveInstantFromArray(message);\n-\n-                // support non encoded version\n-                if (isInstantOutOfRange(publishInstant)) {\n-                    log.debug(\"publishInstant is out of range: {}\", publishInstant);\n-                    publishInstant = null;\n-                }\n+                log.debug(\"publishInstant is out of range: {}\", publishInstant);\n+                publishInstant = null;\n             }\n         } catch (Exception ex) {\n             log.debug(\"response message contains invalid publish millisecond value: {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTA5Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534519093", "createdAt": "2020-12-02T22:17:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -163,16 +161,10 @@ public Instant getMessagePublishInstant(T currentResponse) {\n \n         byte[] message = getMessageByteArray(currentResponse);\n         try {\n-            byte[] decodedMessage = Base64.decodeBase64(message);\n-            publishInstant = retrieveInstantFromArray(decodedMessage);\n+            publishInstant = retrieveInstantFromArray(message);\n             if (isInstantOutOfRange(publishInstant)) {\n-                publishInstant = retrieveInstantFromArray(message);\n-\n-                // support non encoded version\n-                if (isInstantOutOfRange(publishInstant)) {\n-                    log.debug(\"publishInstant is out of range: {}\", publishInstant);\n-                    publishInstant = null;\n-                }\n+                log.debug(\"publishInstant is out of range: {}\", publishInstant);\n+                publishInstant = null;\n             }\n         } catch (Exception ex) {\n             log.debug(\"response message contains invalid publish millisecond value: {}\", message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzOTI3MQ=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU0Njg0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNToxNFrOH9ljJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNToxNFrOH9ljJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDM5MA==", "bodyText": "You should always pass a charset when converting from bytes to String and vice versa.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534340390", "createdAt": "2020-12-02T17:15:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -144,13 +145,13 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n             recordPublishInstants.put(0L, transactionRecord.consensusTimestamp);\n         }\n \n-        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", message, topicId,\n+        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", new String(message), topicId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU1MDA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNTo1NVrOH9llAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxODowNVrOH9wefw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDg2Ng==", "bodyText": "Should wrap in log level check since new String param slower to create.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534340866", "createdAt": "2020-12-02T17:15:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -144,13 +145,13 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n             recordPublishInstants.put(0L, transactionRecord.consensusTimestamp);\n         }\n \n-        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", message, topicId,\n+        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", new String(message), topicId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTQyMw==", "bodyText": "Wrapped", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534519423", "createdAt": "2020-12-02T22:18:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -144,13 +145,13 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n             recordPublishInstants.put(0L, transactionRecord.consensusTimestamp);\n         }\n \n-        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", message, topicId,\n+        log.trace(\"Published message : '{}' to topicId : {} with consensusTimestamp: {}\", new String(message), topicId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MDg2Ng=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU1ODIyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxNzo1M1rOH9lqWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxOTowM1rOH9wgTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MjIzMg==", "bodyText": "Charset", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534342232", "createdAt": "2020-12-02T17:17:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -364,7 +364,7 @@ public SubscriptionResponse subscribeWithBackgroundMessageEmission() throws Thro\n             scheduler = Executors.newSingleThreadScheduledExecutor();\n             scheduler.scheduleAtFixedRate(() -> {\n                 try {\n-                    topicClient.publishMessageToTopic(consensusTopicId, \"backgroundMessage\", submitKey);\n+                    topicClient.publishMessageToTopic(consensusTopicId, \"backgroundMessage\".getBytes(), submitKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTg4NA==", "bodyText": "Added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534519884", "createdAt": "2020-12-02T22:19:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -364,7 +364,7 @@ public SubscriptionResponse subscribeWithBackgroundMessageEmission() throws Thro\n             scheduler = Executors.newSingleThreadScheduledExecutor();\n             scheduler.scheduleAtFixedRate(() -> {\n                 try {\n-                    topicClient.publishMessageToTopic(consensusTopicId, \"backgroundMessage\", submitKey);\n+                    topicClient.publishMessageToTopic(consensusTopicId, \"backgroundMessage\".getBytes(), submitKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MjIzMg=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU3Njk1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyMjowNlrOH9l2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxOTo0NFrOH9whqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NTMwNw==", "bodyText": "I believe this syntax should work: #{${hedera.mirror.test.acceptance.restPollRetries}}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534345307", "createdAt": "2020-12-02T17:22:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "diffHunk": "@@ -275,13 +271,17 @@ public void deleteToken() throws HederaStatusException {\n     }\n \n     @Then(\"the mirror node REST API should return status {int}\")\n-    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class},\n+            backoff = @Backoff(delayExpression = \"#{@acceptanceTestProperties.restRetryBackoffPeriod.toMillis()}\"),\n+            maxAttemptsExpression = \"#{@acceptanceTestProperties.restPollRetries}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwNTQ3MQ==", "bodyText": "I had thought so too but when I tried it I always got\njava.lang.IllegalArgumentException: Could not resolve placeholder 'hedera.mirror.test.acceptance.restPollRetries' in value \"#{${hedera.mirror.test.acceptance.restPollRetries}}\"\n\nThe current implementation seemed to be the only one where it worked", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534505471", "createdAt": "2020-12-02T21:51:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "diffHunk": "@@ -275,13 +271,17 @@ public void deleteToken() throws HederaStatusException {\n     }\n \n     @Then(\"the mirror node REST API should return status {int}\")\n-    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class},\n+            backoff = @Backoff(delayExpression = \"#{@acceptanceTestProperties.restRetryBackoffPeriod.toMillis()}\"),\n+            maxAttemptsExpression = \"#{@acceptanceTestProperties.restPollRetries}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NTMwNw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUyMDIzMw==", "bodyText": "Updated to #{@restPollingProperties.maxAttempts}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534520233", "createdAt": "2020-12-02T22:19:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "diffHunk": "@@ -275,13 +271,17 @@ public void deleteToken() throws HederaStatusException {\n     }\n \n     @Then(\"the mirror node REST API should return status {int}\")\n-    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class},\n+            backoff = @Backoff(delayExpression = \"#{@acceptanceTestProperties.restRetryBackoffPeriod.toMillis()}\"),\n+            maxAttemptsExpression = \"#{@acceptanceTestProperties.restPollRetries}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NTMwNw=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjU4MzQ2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyMzozOVrOH9l6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjowODo0MlrOH9wMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NjM3Mg==", "bodyText": "We should group like things in nested properties. Also would be clearer to name this maxAttempts and the other delay as that's what @Retryable calls them. Suggest hedera.mirror.test.acceptance.rest.maxAttempts", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534346372", "createdAt": "2020-12-02T17:23:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java", "diffHunk": "@@ -58,4 +59,11 @@\n \n     @NotNull\n     private Duration subscribeRetryBackoffPeriod = Duration.ofMillis(5000);\n+\n+    @Min(1)\n+    @Max(60)\n+    private int restPollRetries = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwNTk1MA==", "bodyText": "Yeah I considered putting it under rest initially. Will do that now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534505950", "createdAt": "2020-12-02T21:52:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java", "diffHunk": "@@ -58,4 +59,11 @@\n \n     @NotNull\n     private Duration subscribeRetryBackoffPeriod = Duration.ofMillis(5000);\n+\n+    @Min(1)\n+    @Max(60)\n+    private int restPollRetries = 60;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NjM3Mg=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxNDc5Mw==", "bodyText": "Adding a RestPollingProperties class. Moved the above 2 properties as well as the rest base url there", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534514793", "createdAt": "2020-12-02T22:08:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/AcceptanceTestProperties.java", "diffHunk": "@@ -58,4 +59,11 @@\n \n     @NotNull\n     private Duration subscribeRetryBackoffPeriod = Duration.ofMillis(5000);\n+\n+    @Min(1)\n+    @Max(60)\n+    private int restPollRetries = 60;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NjM3Mg=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjk3OTEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1OTowMFrOH9ptHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDowNToxMVrOH9sFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwODQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + i + 1).getBytes();\n          \n          \n            \n                        byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + (i + 1)).getBytes();\n          \n      \n    \n    \n  \n\nI think this is what you want.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534408476", "createdAt": "2020-12-02T18:59:00Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -117,8 +117,9 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n-            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] publishTimestampByteArray = Longs.toByteArray(System.currentTimeMillis());\n+            byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + i + 1).getBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NzQ3NA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534447474", "createdAt": "2020-12-02T20:05:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -117,8 +117,9 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n-            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] publishTimestampByteArray = Longs.toByteArray(System.currentTimeMillis());\n+            byte[] suffixByteArray = (\"_\" + baseMessage + \"_\" + i + 1).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwODQ3Ng=="}, "originalCommit": {"oid": "e993679ce45ec94fd01e68b80f9a6409b39b6d68"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzgzNjAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/RestPollingProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzowMjoyMFrOH9xx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjowMzozN1rOH-kJDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0MDc3Nw==", "bodyText": "Suggest using DurationMin/Max to narrow the allowed values.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r534540777", "createdAt": "2020-12-02T23:02:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/RestPollingProperties.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.test.e2e.acceptance.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Component\n+@ConfigurationProperties(prefix = \"hedera.mirror.test.acceptance.rest\")\n+@Data\n+@Validated\n+public class RestPollingProperties {\n+\n+    @NotBlank\n+    private String baseUrl;\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab7708823e5341f7621605fac42d157023262e25"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2NTkwMQ==", "bodyText": "Added", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1305#discussion_r535365901", "createdAt": "2020-12-03T16:03:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/RestPollingProperties.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.test.e2e.acceptance.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Component\n+@ConfigurationProperties(prefix = \"hedera.mirror.test.acceptance.rest\")\n+@Data\n+@Validated\n+public class RestPollingProperties {\n+\n+    @NotBlank\n+    private String baseUrl;\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0MDc3Nw=="}, "originalCommit": {"oid": "ab7708823e5341f7621605fac42d157023262e25"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1292, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}