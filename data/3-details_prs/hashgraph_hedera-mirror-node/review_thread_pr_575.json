{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTY2NzE4", "number": 575, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNTozNVrODkUyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNzo0MFrODkU12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDE1OTQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNTozNVrOFwlRxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzozNTowMFrOFwomIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NjcyNQ==", "bodyText": "nit: always best to do a notimplementedexception here and in other places so there's no chance of missing it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386486725", "createdAt": "2020-03-02T16:05:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" VALUES (?, ?, ?, ?)\");\n+\n+            sqlInsertNonFeeTransfers = connection.prepareStatement(\"insert into non_fee_transfers\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" values (?, ?, ?, ?)\");\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Unable to prepare SQL statements\", e);\n+        }\n+    }\n+\n+    public void finish() {\n+        closeStatements();\n+    }\n+\n+    @Override\n+    public void onFileComplete() {\n+        executeBatches();\n+    }\n+\n+    private void closeStatements() {\n+        try {\n+            sqlInsertTransferList.close();\n+            sqlInsertNonFeeTransfers.close();\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Error closing connection\", e);\n+        }\n+    }\n+\n+    void executeBatches() {\n+        try {\n+            int[] transferLists = sqlInsertTransferList.executeBatch();\n+            int[] nonFeeTransfers = sqlInsertNonFeeTransfers.executeBatch();\n+            log.info(\"Inserted {} transfer lists, {} non-fee transfers\", transferLists.length, nonFeeTransfers.length);\n+        } catch (SQLException e) {\n+            log.error(\"Error committing sql insert batch \", e);\n+            throw new ParserSQLException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onTransaction(Transaction transaction) throws ImporterException {\n+        // to be implemented in followup change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0MTA5MA==", "bodyText": "sure thing. In 'postgres writer 3', will change to notimplementedexception for any remaining functions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386541090", "createdAt": "2020-03-02T17:35:00Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" VALUES (?, ?, ?, ?)\");\n+\n+            sqlInsertNonFeeTransfers = connection.prepareStatement(\"insert into non_fee_transfers\"\n+                    + \" (consensus_timestamp, amount, realm_num, entity_num)\"\n+                    + \" values (?, ?, ?, ?)\");\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Unable to prepare SQL statements\", e);\n+        }\n+    }\n+\n+    public void finish() {\n+        closeStatements();\n+    }\n+\n+    @Override\n+    public void onFileComplete() {\n+        executeBatches();\n+    }\n+\n+    private void closeStatements() {\n+        try {\n+            sqlInsertTransferList.close();\n+            sqlInsertNonFeeTransfers.close();\n+        } catch (SQLException e) {\n+            throw new ParserSQLException(\"Error closing connection\", e);\n+        }\n+    }\n+\n+    void executeBatches() {\n+        try {\n+            int[] transferLists = sqlInsertTransferList.executeBatch();\n+            int[] nonFeeTransfers = sqlInsertNonFeeTransfers.executeBatch();\n+            log.info(\"Inserted {} transfer lists, {} non-fee transfers\", transferLists.length, nonFeeTransfers.length);\n+        } catch (SQLException e) {\n+            log.error(\"Error committing sql insert batch \", e);\n+            throw new ParserSQLException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onTransaction(Transaction transaction) throws ImporterException {\n+        // to be implemented in followup change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4NjcyNQ=="}, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDE2NzkyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjowNzo0MFrOFwlXDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzo0NToxNFrOFwo6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4ODA3OQ==", "bodyText": "q: what do you think about making a getter for the prepared statements? Might reduce code repetition and ensure statements used by tests modules are always the correct ones.\nNot sure if there's a downside to it", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386488079", "createdAt": "2020-03-02T16:07:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0NjM3OQ==", "bodyText": "Originally, i was planning to wait a bit until we figured if this code will use Repository or CopyManager or combination or something else.\nHowever, if you have something particular in mind, lemme know, will do in \"Postgres Writer 3\".", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/575#discussion_r386546379", "createdAt": "2020-03-02T17:45:14Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.ContractResult;\n+import com.hedera.mirror.importer.domain.CryptoTransfer;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.LiveHash;\n+import com.hedera.mirror.importer.domain.NonFeeTransfer;\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+import com.hedera.mirror.importer.domain.Transaction;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserSQLException;\n+\n+@Log4j2\n+@Named\n+public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private PreparedStatement sqlInsertTransferList;\n+    private PreparedStatement sqlInsertNonFeeTransfers;\n+\n+    void initSqlStatements(Connection connection) throws ParserSQLException {\n+        try {\n+            sqlInsertTransferList = connection.prepareStatement(\"INSERT INTO t_cryptotransferlists\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ4ODA3OQ=="}, "originalCommit": {"oid": "657e15655f36fad8da6d5bb73e0597ee18dd3166"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1190, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}