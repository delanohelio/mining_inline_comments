{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODc3OTM2", "number": 1136, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNDozOVrOEvZxEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjozMFrOEvzFiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQwNjkxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNDozOVrOHkXWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1ODowNFrOHk-KzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MzM3Ng==", "bodyText": "should check the values in the Errors slice equal", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#discussion_r507893376", "createdAt": "2020-10-19T16:34:39Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "diffHunk": "@@ -0,0 +1,247 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package network\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/server\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/services/base\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tests/mocks/repository\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func getSubject() server.NetworkAPIServicer {\n+\tbaseService := base.NewBaseService(repository.MBlockRepository, repository.MTransactionRepository)\n+\treturn networkAPIService(baseService)\n+}\n+\n+func dummyGenesisBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               1,\n+\t\tHash:                \"0x123jsjs\",\n+\t\tConsensusStartNanos: 1000000,\n+\t\tConsensusEndNanos:   20000000,\n+\t\tParentIndex:         0,\n+\t\tParentHash:          \"\",\n+\t}\n+}\n+\n+func dummyLatestBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"0x1323jsjs\",\n+\t\tConsensusStartNanos: 40000000,\n+\t\tConsensusEndNanos:   70000000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"0x123jsjs\",\n+\t}\n+}\n+\n+func networkAPIService(base base.BaseService) server.NetworkAPIServicer {\n+\treturn NewNetworkAPIService(\n+\t\tbase,\n+\t\trepository.MAddressBookEntryRepository,\n+\t\t&rTypes.NetworkIdentifier{\n+\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\tMetadata: nil,\n+\t\t\t},\n+\t\t},\n+\t\t&rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t)\n+}\n+\n+func TestNewNetworkAPIService(t *testing.T) {\n+\trepository.Setup()\n+\tassert.IsType(t, &NetworkAPIService{}, getSubject())\n+}\n+\n+func TestNetworkList(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkListResponse{\n+\t\tNetworkIdentifiers: []*rTypes.NetworkIdentifier{\n+\t\t\t{\n+\t\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\t\tMetadata: nil,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\n+\t// when:\n+\tres, e := getSubject().NetworkList(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult, res)\n+\tassert.Nil(t, e)\n+}\n+\n+func TestNetworkOptions(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkOptionsResponse{\n+\t\tVersion: &rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t\tAllow: &rTypes.Allow{\n+\t\t\tOperationStatuses: []*rTypes.OperationStatus{\n+\t\t\t\t{\n+\t\t\t\t\tStatus:     \"Pending\",\n+\t\t\t\t\tSuccessful: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tOperationTypes:          []string{\"Transfer\"},\n+\t\t\tErrors:                  maphelper.GetErrorValuesFromStringErrorMap(errors.Errors),\n+\t\t\tHistoricalBalanceLookup: true,\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\trepository.MTransactionRepository.On(\"Statuses\").Return(map[int]string{1: \"Pending\"}, repository.NilError)\n+\trepository.MTransactionRepository.On(\"TypesAsArray\").Return([]string{\"Transfer\"}, repository.NilError)\n+\n+\t// when:\n+\tres, e := getSubject().NetworkOptions(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult.Version, res.Version)\n+\tassert.Equal(t, expectedResult.Allow.HistoricalBalanceLookup, res.Allow.HistoricalBalanceLookup)\n+\tassert.Equal(t, expectedResult.Allow.OperationStatuses, res.Allow.OperationStatuses)\n+\tassert.Equal(t, expectedResult.Allow.OperationTypes, res.Allow.OperationTypes)\n+\tassert.Equal(t, len(expectedResult.Allow.Errors), len(res.Allow.Errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bfff4b233e395cbc20f7ac04a6dde7df5da47a"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyOTM1Ng==", "bodyText": "Done. I added a new comparing function for the rosetta error arrays, which correctly checks the validity of this assertion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#discussion_r508529356", "createdAt": "2020-10-20T13:58:04Z", "author": {"login": "georgiyazovaliiski"}, "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "diffHunk": "@@ -0,0 +1,247 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package network\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/server\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/services/base\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tests/mocks/repository\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func getSubject() server.NetworkAPIServicer {\n+\tbaseService := base.NewBaseService(repository.MBlockRepository, repository.MTransactionRepository)\n+\treturn networkAPIService(baseService)\n+}\n+\n+func dummyGenesisBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               1,\n+\t\tHash:                \"0x123jsjs\",\n+\t\tConsensusStartNanos: 1000000,\n+\t\tConsensusEndNanos:   20000000,\n+\t\tParentIndex:         0,\n+\t\tParentHash:          \"\",\n+\t}\n+}\n+\n+func dummyLatestBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"0x1323jsjs\",\n+\t\tConsensusStartNanos: 40000000,\n+\t\tConsensusEndNanos:   70000000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"0x123jsjs\",\n+\t}\n+}\n+\n+func networkAPIService(base base.BaseService) server.NetworkAPIServicer {\n+\treturn NewNetworkAPIService(\n+\t\tbase,\n+\t\trepository.MAddressBookEntryRepository,\n+\t\t&rTypes.NetworkIdentifier{\n+\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\tMetadata: nil,\n+\t\t\t},\n+\t\t},\n+\t\t&rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t)\n+}\n+\n+func TestNewNetworkAPIService(t *testing.T) {\n+\trepository.Setup()\n+\tassert.IsType(t, &NetworkAPIService{}, getSubject())\n+}\n+\n+func TestNetworkList(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkListResponse{\n+\t\tNetworkIdentifiers: []*rTypes.NetworkIdentifier{\n+\t\t\t{\n+\t\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\t\tMetadata: nil,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\n+\t// when:\n+\tres, e := getSubject().NetworkList(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult, res)\n+\tassert.Nil(t, e)\n+}\n+\n+func TestNetworkOptions(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkOptionsResponse{\n+\t\tVersion: &rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t\tAllow: &rTypes.Allow{\n+\t\t\tOperationStatuses: []*rTypes.OperationStatus{\n+\t\t\t\t{\n+\t\t\t\t\tStatus:     \"Pending\",\n+\t\t\t\t\tSuccessful: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tOperationTypes:          []string{\"Transfer\"},\n+\t\t\tErrors:                  maphelper.GetErrorValuesFromStringErrorMap(errors.Errors),\n+\t\t\tHistoricalBalanceLookup: true,\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\trepository.MTransactionRepository.On(\"Statuses\").Return(map[int]string{1: \"Pending\"}, repository.NilError)\n+\trepository.MTransactionRepository.On(\"TypesAsArray\").Return([]string{\"Transfer\"}, repository.NilError)\n+\n+\t// when:\n+\tres, e := getSubject().NetworkOptions(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult.Version, res.Version)\n+\tassert.Equal(t, expectedResult.Allow.HistoricalBalanceLookup, res.Allow.HistoricalBalanceLookup)\n+\tassert.Equal(t, expectedResult.Allow.OperationStatuses, res.Allow.OperationStatuses)\n+\tassert.Equal(t, expectedResult.Allow.OperationTypes, res.Allow.OperationTypes)\n+\tassert.Equal(t, len(expectedResult.Allow.Errors), len(res.Allow.Errors))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MzM3Ng=="}, "originalCommit": {"oid": "c2bfff4b233e395cbc20f7ac04a6dde7df5da47a"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTU1NTI5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjozMFrOHk-smg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjozMFrOHk-smg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzODAxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tassert.True(t, errorsAreEqual(expectedResult.Allow.Errors, res.Allow.Errors))\n          \n          \n            \n            \tassert.ElementsMatch(t, expectedResult.Allow.Errors, res.Allow.Errors);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#discussion_r508538010", "createdAt": "2020-10-20T14:06:30Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "diffHunk": "@@ -0,0 +1,268 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package network\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/server\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/services/base\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tests/mocks/repository\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func getSubject() server.NetworkAPIServicer {\n+\tbaseService := base.NewBaseService(repository.MBlockRepository, repository.MTransactionRepository)\n+\treturn networkAPIService(baseService)\n+}\n+\n+func dummyGenesisBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               1,\n+\t\tHash:                \"0x123jsjs\",\n+\t\tConsensusStartNanos: 1000000,\n+\t\tConsensusEndNanos:   20000000,\n+\t\tParentIndex:         0,\n+\t\tParentHash:          \"\",\n+\t}\n+}\n+\n+func dummyLatestBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"0x1323jsjs\",\n+\t\tConsensusStartNanos: 40000000,\n+\t\tConsensusEndNanos:   70000000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"0x123jsjs\",\n+\t}\n+}\n+\n+func networkAPIService(base base.BaseService) server.NetworkAPIServicer {\n+\treturn NewNetworkAPIService(\n+\t\tbase,\n+\t\trepository.MAddressBookEntryRepository,\n+\t\t&rTypes.NetworkIdentifier{\n+\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\tMetadata: nil,\n+\t\t\t},\n+\t\t},\n+\t\t&rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t)\n+}\n+\n+func TestNewNetworkAPIService(t *testing.T) {\n+\trepository.Setup()\n+\tassert.IsType(t, &NetworkAPIService{}, getSubject())\n+}\n+\n+func TestNetworkList(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkListResponse{\n+\t\tNetworkIdentifiers: []*rTypes.NetworkIdentifier{\n+\t\t\t{\n+\t\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\t\tMetadata: nil,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\n+\t// when:\n+\tres, e := getSubject().NetworkList(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult, res)\n+\tassert.Nil(t, e)\n+}\n+\n+func TestNetworkOptions(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkOptionsResponse{\n+\t\tVersion: &rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t\tAllow: &rTypes.Allow{\n+\t\t\tOperationStatuses: []*rTypes.OperationStatus{\n+\t\t\t\t{\n+\t\t\t\t\tStatus:     \"Pending\",\n+\t\t\t\t\tSuccessful: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tOperationTypes:          []string{\"Transfer\"},\n+\t\t\tErrors:                  maphelper.GetErrorValuesFromStringErrorMap(errors.Errors),\n+\t\t\tHistoricalBalanceLookup: true,\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\trepository.MTransactionRepository.On(\"Statuses\").Return(map[int]string{1: \"Pending\"}, repository.NilError)\n+\trepository.MTransactionRepository.On(\"TypesAsArray\").Return([]string{\"Transfer\"}, repository.NilError)\n+\n+\t// when:\n+\tres, e := getSubject().NetworkOptions(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult.Version, res.Version)\n+\tassert.Equal(t, expectedResult.Allow.HistoricalBalanceLookup, res.Allow.HistoricalBalanceLookup)\n+\tassert.Equal(t, expectedResult.Allow.OperationStatuses, res.Allow.OperationStatuses)\n+\tassert.Equal(t, expectedResult.Allow.OperationTypes, res.Allow.OperationTypes)\n+\tassert.True(t, errorsAreEqual(expectedResult.Allow.Errors, res.Allow.Errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d5b6580e7757a708653cfe67da18c9146a57ef"}, "originalPosition": 148}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1560, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}