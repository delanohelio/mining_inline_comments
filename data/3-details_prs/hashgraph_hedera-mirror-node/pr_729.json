{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMDc0MTU4", "number": 729, "title": "Add PubSub integration tests", "bodyText": "Detailed description:\n\nAdds vanilla test - PubSubRecordParserTest\nAdds 'pubsub' profile in tests\nUses com.playtika.testcontainers for postgres and pubsub emulator. Removes TestDatabaseConfiguration/DatabaseApplicationContextInitializer.\nAdds ResetCacheTestExecutionListener for cache clearing in integration tests\nPubSubIntegrationTest and RecordParserDisabledTest extend from IntegrationTest now (to inherit annotations)\nCircleCI: use commands (better, circleci native feature) rather than yml aliases when possible\nCircleCI: general config improvements\nStandardizes to postgres:9.6-alpine image everywhere\nSets default value of topicRunningHashV2AddedTimestamp in tests to 0.\nFixes a wrong default value in doc.\nSigned-off-by: Apekshit Sharma apekshit.sharma@hedera.com\n\nWhich issue(s) this PR fixes:\nPart of #705\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-05-01T10:14:07Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729", "merged": true, "mergeCommit": {"oid": "d044b613cd4809a014e8911b87df5f5a372d9e01"}, "closed": true, "closedAt": "2020-05-06T21:38:20Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc_DfyABqjMyOTI4MTI0NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcevltMAFqTQwNzAwMTk4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "607426e9b58d3f176a237d905fdff65f3e77763f", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/607426e9b58d3f176a237d905fdff65f3e77763f", "committedDate": "2020-05-01T10:09:19Z", "message": "Add PubSub integration tests\n\n- TestPubSubConfiguration#ContextInitializer sets up pubsub emulator container\n- Add vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>\n\n #"}, "afterCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/63a85e5d66b8461db99c2279a0973479d1705971", "committedDate": "2020-05-01T10:23:00Z", "message": "Add PubSub integration tests\n\n- PubSubEmulatorApplicationContextInitializer sets up pubsub emulator container\n- Adds vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjA3Mzc0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#pullrequestreview-404207374", "createdAt": "2020-05-01T15:00:51Z", "commit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzIyNTYy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#pullrequestreview-404322562", "createdAt": "2020-05-01T18:28:56Z", "commit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyODo1NlrOGPR1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1NTozN1rOGPSkLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NDA0NA==", "bodyText": "Would prefer json extension and a filename that references pubsub. Recommendation: pubsub-message.json. If we think we'll have multiple in the future, would be good to put in a pubsub directory and have scenario named appended: pubsub/01-crypto-create.json", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418674044", "createdAt": "2020-05-01T18:28:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/resources/data/expected_transactions_json.txt", "diffHunk": "@@ -0,0 +1,34 @@\n+{\"consensusTimestamp\":1567188600419072000,\"entity\":{\"shardNum\":0,\"realmNum\":0,\"entityNum\":51520,\"type\":1},\"transactionType\":11,\"transaction\":{\"body\":{\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"nodeAccountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"transactionFee\":\"2900000000\",\"transactionValidDuration\":{\"seconds\":\"120\"},\"generateRecord\":false,\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"cryptoCreateAccount\":{\"key\":{\"ed25519\":\"K6NFq0fFq7YX4UYunwggzBEBwB0R7BBYDa9RySpxCiE=\"},\"initialBalance\":\"12\",\"sendRecordThreshold\":\"9223372036854775807\",\"receiveRecordThreshold\":\"9223372036854775807\",\"receiverSigRequired\":false,\"autoRenewPeriod\":{\"seconds\":\"2678400\"}}},\"sigMap\":{\"sigPair\":[{\"pubKeyPrefix\":\"+qHijB5r\",\"ed25519\":\"oX22ol2OV0zfM9XLc6xjquXp+nswC9ek7GoL0V4hvtnFDCV/u2L7ksltw+S6A5ReLyLLcC1vztGUOVvowtoAAg==\"}]}},\"transactionRecord\":{\"receipt\":{\"status\":\"SUCCESS\",\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"exchangeRate\":{\"currentRate\":{\"hbarEquiv\":1,\"centEquiv\":12,\"expirationTime\":{\"seconds\":\"4688462211\"}},\"nextRate\":{\"hbarEquiv\":1,\"centEquiv\":15,\"expirationTime\":{\"seconds\":\"4688462211\"}}},\"topicSequenceNumber\":\"0\",\"topicRunningHash\":\"\",\"topicRunningHashVersion\":\"0\"},\"transactionHash\":\"OJuC42WKbGn1Y6Vp1ijdX6t2GXX3vt+uUWUoAdO2Bk4YyrRSW+0zRfUcvjxO6R5S\",\"consensusTimestamp\":{\"seconds\":\"1567188600\",\"nanos\":419072000},\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"transactionFee\":\"8466966\",\"transferList\":{\"accountAmounts\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-8466966\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"amount\":\"177816\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"98\"},\"amount\":\"8289150\"}]}},\"nonFeeTransfers\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-12\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"amount\":\"12\"}]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzI4OA==", "bodyText": "Why cannot all integration tests extend from IntegrationTest (RecordParserDisabledTest, PubSubIntegrationTest)? Spring Boot should be smart enough to know that it needs to load a new or partial application context depending upon the annotations present. That way the common annotations can all stay in IntegrationTest like cache, database, kubernetes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677288", "createdAt": "2020-05-01T18:36:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA==", "bodyText": "Should be abstract. IntegrationTest should also be abstract", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677624", "createdAt": "2020-05-01T18:37:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw==", "bodyText": "You said you wanted to test at file parser level to test error scenario. But I don't see any error scenario tests.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418678933", "createdAt": "2020-05-01T18:40:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.PubSubIntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+public class PubSubRecordParserTest extends PubSubIntegrationTest {\n+    private static final int NUM_TXNS = 34; // number of transactions in test record files\n+\n+    @TempDir\n+    Path dataPath;\n+    @Value(\"classpath:data\")\n+    Path testResourcesPath;\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+    private FileCopier fileCopier;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        StreamType streamType = StreamType.RECORD;\n+        fileCopier = FileCopier.create(testResourcesPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+    }\n+\n+    @Test\n+    public void testPubSubExporter() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTM2OQ==", "bodyText": "Doesn't look like we're needing 8682 to be exposed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418681369", "createdAt": "2020-05-01T18:45:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    private static GenericContainer emulator;\n+\n+    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n+    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n+    // to be correctly set and pointing to a running pubsub emulator.\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n+        try {\n+            log.info(\"Starting PubSub emulator\");\n+            var emulator = startPubSubEmulator(projectId);\n+            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n+            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n+            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n+                    .applyTo(applicationContext);\n+        } catch (Exception e) {\n+            log.warn(e.getMessage());\n+        }\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        if (emulator != null && emulator.isRunning()) {\n+            log.info(\"Stopping PubSub emulator\");\n+            emulator.stop();\n+        }\n+    }\n+\n+    private static GenericContainer startPubSubEmulator(String projectId) {\n+        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n+                .withExposedPorts(8681)\n+                .withExposedPorts(8682)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ==", "bodyText": "Have we considered using testcontainers' Spring Boot embedded-google-pubsub? We can look into maybe switching this and postgres to this as well maybe in future", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418684061", "createdAt": "2020-05-01T18:51:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NTk5Nw==", "bodyText": "Would be better to use an official image: https://hub.docker.com/r/google/cloud-sdk. It includes the emulator", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418685997", "createdAt": "2020-05-01T18:55:37Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -26,14 +26,21 @@ references:\n       key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n       paths:\n         - ~/.m2\n-  db_docker: &db_docker\n-    docker:\n-      - image: adoptopenjdk:11-jdk-hotspot\n-      - image: postgres:9.6-alpine\n-        environment:\n-          POSTGRES_DB: mirror_node_test\n-          POSTGRES_PASSWORD: mirror_node_pass\n-          POSTGRES_USER: mirror_node\n+  docker_jdk11: &docker_jdk11\n+    image: adoptopenjdk:11-jdk-hotspot\n+  docker_db: &docker_db\n+    image: postgres:9.6-alpine\n+    environment:\n+      POSTGRES_DB: mirror_node_test\n+      POSTGRES_PASSWORD: mirror_node_pass\n+      POSTGRES_USER: mirror_node\n+  docker_pubsub: &docker_pubsub\n+    image: messagebird/gcloud-pubsub-emulator:latest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b972c7504a12a3078a293d03be0df9eb0ca56e8", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b972c7504a12a3078a293d03be0df9eb0ca56e8", "committedDate": "2020-05-02T02:11:57Z", "message": "Add PubSub integration tests\n\n- PubSubEmulatorApplicationContextInitializer sets up pubsub emulator container\n- Adds vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d18990ddbb060cd51217798982040041d31b2e29", "committedDate": "2020-05-02T06:34:17Z", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/63a85e5d66b8461db99c2279a0973479d1705971", "committedDate": "2020-05-01T10:23:00Z", "message": "Add PubSub integration tests\n\n- PubSubEmulatorApplicationContextInitializer sets up pubsub emulator container\n- Adds vanilla test - PubSubRecordParserTest\n- Use postgres:9.6-alpine in circleci to match developer local env (docker-compose)\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d18990ddbb060cd51217798982040041d31b2e29", "committedDate": "2020-05-02T06:34:17Z", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTgxMzgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#pullrequestreview-404581381", "createdAt": "2020-05-03T04:50:13Z", "commit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1MDoxM1rOGPomWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1ODoyOFrOGPopEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzAwMg==", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047002", "createdAt": "2020-05-03T04:50:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.grpc;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+/**\n+ * Sets up application properties based on testcontainers if any enabled.\n+ */\n+public class DatabaseApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.grpc.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzE3NQ==", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047175", "createdAt": "2020-05-03T04:52:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -20,55 +20,29 @@\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n-import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n /**\n- * First try to use a Testcontainer. If Docker is not running or it fails to connect to the Testcontainer, fallback\n- * to a database running on localhost.\n+ * Sets up application properties based on testcontainers if any enabled.\n  */\n-@Log4j2\n-@TestConfiguration\n public class DatabaseApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static PostgreSQLContainer postgresql;\n-\n-    static {\n-        System.setProperty(\"testcontainers.environmentprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.npipesocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.unixsocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.windowsprovider.timeout\", \"1\");\n-    }\n-\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        try {\n-            log.info(\"Starting PostgreSQL\");\n-            postgresql = new PostgreSQLContainer<>(\"postgres:9.6-alpine\");\n-            postgresql.start();\n-\n-            TestPropertyValues\n-                    .of(\"hedera.mirror.importer.db.name=\" + postgresql.getDatabaseName())\n-                    .and(\"hedera.mirror.importer.db.password=\" + postgresql.getPassword())\n-                    .and(\"hedera.mirror.importer.db.username=\" + postgresql.getUsername())\n-                    .and(\"spring.datasource.url=\" + postgresql.getJdbcUrl())\n-                    .applyTo(applicationContext);\n-        } catch (Throwable ex) {\n-            log.warn(ex.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (postgresql != null && postgresql.isRunning()) {\n-            log.info(\"Stopping PostgreSQL\");\n-            postgresql.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.importer.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQ5Ng==", "bodyText": "You need to define postgres 9.6 image in a bootstrap.yml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047496", "createdAt": "2020-05-03T04:55:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java", "diffHunk": "@@ -20,77 +20,17 @@\n  * \u200d\n  */\n \n-import java.util.Collection;\n-import javax.annotation.PreDestroy;\n-import javax.annotation.Resource;\n-import lombok.extern.log4j.Log4j2;\n-import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.cache.CacheManager;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.Sql;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n-@ContextConfiguration(initializers = GrpcIntegrationTest.TestDatabaseConfiguration.class)\n-@SpringBootTest\n+@ContextConfiguration(initializers = DatabaseApplicationContextInitializer.class)\n+@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n+        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n+// Same database is used for all tests, so clean it up before each test.\n @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n+@SpringBootTest\n public abstract class GrpcIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5OQ==", "bodyText": "Would be more appropriate in a src/test/resources/bootstrap-pubsub.yml. Then you can @ActiveProfiles(\"pubsub\") on PubSubIntegrationTest to activate it. Can also throw the enabled=true and other properties in there.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047699", "createdAt": "2020-05-03T04:58:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f50c8ce102e250795f8a03b5f1a160b407b48f2", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1f50c8ce102e250795f8a03b5f1a160b407b48f2", "committedDate": "2020-05-06T04:45:17Z", "message": "spring profiles. make circleci work"}, "afterCommit": {"oid": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/93813d3014491f1e1ee452f0a625ae10566ecbbc", "committedDate": "2020-05-06T04:57:55Z", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/535ba5f7c537fc0183152e7a6b30baf898709876", "committedDate": "2020-05-06T05:15:16Z", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93813d3014491f1e1ee452f0a625ae10566ecbbc", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/93813d3014491f1e1ee452f0a625ae10566ecbbc", "committedDate": "2020-05-06T04:57:55Z", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/535ba5f7c537fc0183152e7a6b30baf898709876", "committedDate": "2020-05-06T05:15:16Z", "message": "spring profiles. make circleci work\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODQ2MjA2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#pullrequestreview-406846206", "createdAt": "2020-05-06T17:45:38Z", "commit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0NTozOFrOGReWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0NTozOFrOGReWrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjMwMA==", "bodyText": "This build application.yaml will get copied into release artifact. Please use a different output directory.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420976300", "createdAt": "2020-05-06T17:45:38Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -84,8 +76,85 @@ commands:\n             )\n             done\n \n+  restore_maven_cache:\n+    description: \"Restore maven cache\"\n+    steps:\n+      - run:\n+          name: Calculate checksum of all pom.xml\n+          command: find . -type f -name \"pom.xml\" | sort -u | xargs sha512sum > pom.xml.checksum\n+      - restore_cache:\n+          keys:\n+            #  Perms on ~/.m2 differ by executor (docker/machine), so {{ arch }} is needed.\n+            - maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+            - maven-v2-{{ arch }}-{{ .Branch }}\n+            - maven-v2-{{ arch }}-\n+\n+  save_maven_cache:\n+    steps:\n+    - save_cache:\n+        key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+        paths:\n+          - ~/.m2\n+\n+  write_spring_override_config:\n+    steps:\n+    - run:\n+        name: Write spring override config\n+        command: |\n+          mkdir -p ${WORKSPACE}\n+          cat >> ${WORKSPACE}/application.yml \\<< EOF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDAxOTgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#pullrequestreview-407001981", "createdAt": "2020-05-06T21:30:32Z", "commit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3117, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}