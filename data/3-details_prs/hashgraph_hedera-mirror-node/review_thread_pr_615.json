{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTQ5Nzgw", "number": 615, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoyOTowMlrODq3y0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTo1MjoyMVrODrCRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjgwOTE1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessage-06-idseq-invalid-path.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoyOTowMlrOF64t-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozMjowOVrOF6_9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5MTAwMQ==", "bodyText": "This error response is different than normal in that it doesn't contain \"_status\". Is this waiting on the other PR to be merged before addressing?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397291001", "createdAt": "2020-03-24T16:29:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-06-idseq-invalid-path.spec.json", "diffHunk": "@@ -0,0 +1,22 @@\n+{\n+  \"description\": \"Topic messages for single message with invalid param values\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": []\n+  },\n+  \"url\": \"/api/v1/topic/0.0.-3/message/a\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"messages\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTY4Nw==", "bodyText": "Yes", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397409687", "createdAt": "2020-03-24T19:32:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-06-idseq-invalid-path.spec.json", "diffHunk": "@@ -0,0 +1,22 @@\n+{\n+  \"description\": \"Topic messages for single message with invalid param values\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": []\n+  },\n+  \"url\": \"/api/v1/topic/0.0.-3/message/a\",\n+  \"responseStatus\": 400,\n+  \"responseJson\": {\n+    \"messages\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5MTAwMQ=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg5MzEwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0Njo1OFrOF65jfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozMjo1OVrOF6__XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNDcwMQ==", "bodyText": "Would be better to not hardcode the error output and compare with the util method output", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397304701", "createdAt": "2020-03-24T16:46:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "diffHunk": "@@ -0,0 +1,61 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const topicmessage = require('../topicmessage.js');\n+\n+beforeAll(async () => {\n+  jest.setTimeout(1000);\n+});\n+\n+afterAll(() => {});\n+\n+const invalidTimestamp = 'Invalid parameter: consensusTimestamp';\n+\n+// Start of tests\n+describe('topicmessage validateConsensusTimestampParam tests', () => {\n+  test('Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001', () => {\n+    verifyInvalidConsensusTimestamp(\n+      topicmessage.validateConsensusTimestampParam(-1234567890.000000001),\n+      invalidTimestamp\n+    );\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for abc', () => {\n+    verifyInvalidConsensusTimestamp(topicmessage.validateConsensusTimestampParam('abc'), invalidTimestamp);\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 1234567890', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(1234567890));\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 123.0001', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(123.0001));\n+  });\n+});\n+\n+const verifyValidConsensusTimestamp = val => {\n+  expect(val).toStrictEqual({code: 200, contents: 'OK', isValid: true});\n+};\n+\n+const verifyInvalidConsensusTimestamp = (val, message) => {\n+  expect(val).toStrictEqual({\n+    code: 400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMDE0MA==", "bodyText": "I'm not done with this file, wanted to get something close to end but not WIP out for review. Good point though", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397410140", "createdAt": "2020-03-24T19:32:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "diffHunk": "@@ -0,0 +1,61 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const topicmessage = require('../topicmessage.js');\n+\n+beforeAll(async () => {\n+  jest.setTimeout(1000);\n+});\n+\n+afterAll(() => {});\n+\n+const invalidTimestamp = 'Invalid parameter: consensusTimestamp';\n+\n+// Start of tests\n+describe('topicmessage validateConsensusTimestampParam tests', () => {\n+  test('Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001', () => {\n+    verifyInvalidConsensusTimestamp(\n+      topicmessage.validateConsensusTimestampParam(-1234567890.000000001),\n+      invalidTimestamp\n+    );\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for abc', () => {\n+    verifyInvalidConsensusTimestamp(topicmessage.validateConsensusTimestampParam('abc'), invalidTimestamp);\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 1234567890', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(1234567890));\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 123.0001', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(123.0001));\n+  });\n+});\n+\n+const verifyValidConsensusTimestamp = val => {\n+  expect(val).toStrictEqual({code: 200, contents: 'OK', isValid: true});\n+};\n+\n+const verifyInvalidConsensusTimestamp = (val, message) => {\n+  expect(val).toStrictEqual({\n+    code: 400,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNDcwMQ=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjg5NzA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo0Nzo0NFrOF65l6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1NToyMlrOF7GIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNTMyMg==", "bodyText": "Might be good idea to make the success response a static const object in util and use it everywhere", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397305322", "createdAt": "2020-03-24T16:47:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "diffHunk": "@@ -0,0 +1,61 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const topicmessage = require('../topicmessage.js');\n+\n+beforeAll(async () => {\n+  jest.setTimeout(1000);\n+});\n+\n+afterAll(() => {});\n+\n+const invalidTimestamp = 'Invalid parameter: consensusTimestamp';\n+\n+// Start of tests\n+describe('topicmessage validateConsensusTimestampParam tests', () => {\n+  test('Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001', () => {\n+    verifyInvalidConsensusTimestamp(\n+      topicmessage.validateConsensusTimestampParam(-1234567890.000000001),\n+      invalidTimestamp\n+    );\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for abc', () => {\n+    verifyInvalidConsensusTimestamp(topicmessage.validateConsensusTimestampParam('abc'), invalidTimestamp);\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 1234567890', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(1234567890));\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 123.0001', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(123.0001));\n+  });\n+});\n+\n+const verifyValidConsensusTimestamp = val => {\n+  expect(val).toStrictEqual({code: 200, contents: 'OK', isValid: true});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMDIyNQ==", "bodyText": "Good idea", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397410225", "createdAt": "2020-03-24T19:33:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "diffHunk": "@@ -0,0 +1,61 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const topicmessage = require('../topicmessage.js');\n+\n+beforeAll(async () => {\n+  jest.setTimeout(1000);\n+});\n+\n+afterAll(() => {});\n+\n+const invalidTimestamp = 'Invalid parameter: consensusTimestamp';\n+\n+// Start of tests\n+describe('topicmessage validateConsensusTimestampParam tests', () => {\n+  test('Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001', () => {\n+    verifyInvalidConsensusTimestamp(\n+      topicmessage.validateConsensusTimestampParam(-1234567890.000000001),\n+      invalidTimestamp\n+    );\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for abc', () => {\n+    verifyInvalidConsensusTimestamp(topicmessage.validateConsensusTimestampParam('abc'), invalidTimestamp);\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 1234567890', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(1234567890));\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 123.0001', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(123.0001));\n+  });\n+});\n+\n+const verifyValidConsensusTimestamp = val => {\n+  expect(val).toStrictEqual({code: 200, contents: 'OK', isValid: true});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNTMyMg=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMDY4Nw==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397510687", "createdAt": "2020-03-24T22:55:22Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/topicmessage.test.js", "diffHunk": "@@ -0,0 +1,61 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const topicmessage = require('../topicmessage.js');\n+\n+beforeAll(async () => {\n+  jest.setTimeout(1000);\n+});\n+\n+afterAll(() => {});\n+\n+const invalidTimestamp = 'Invalid parameter: consensusTimestamp';\n+\n+// Start of tests\n+describe('topicmessage validateConsensusTimestampParam tests', () => {\n+  test('Verify validateConsensusTimestampParam returns correct result for -1234567890.000000001', () => {\n+    verifyInvalidConsensusTimestamp(\n+      topicmessage.validateConsensusTimestampParam(-1234567890.000000001),\n+      invalidTimestamp\n+    );\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for abc', () => {\n+    verifyInvalidConsensusTimestamp(topicmessage.validateConsensusTimestampParam('abc'), invalidTimestamp);\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 1234567890', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(1234567890));\n+  });\n+  test('Verify validateConsensusTimestampParam returns correct result for 123.0001', () => {\n+    verifyValidConsensusTimestamp(topicmessage.validateConsensusTimestampParam(123.0001));\n+  });\n+});\n+\n+const verifyValidConsensusTimestamp = val => {\n+  expect(val).toStrictEqual({code: 200, contents: 'OK', isValid: true});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwNTMyMg=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEyNjk4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0MjozN1rOF678Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNTowOFrOF7GWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MzgyMg==", "bodyText": "This index takes 28m to execute on testnet data. 50m with concurrently using psql. Have you tried with concurrently via flyway in dev? Should we write a java migration that does this asynchronously? Or should we just plan for 30m of downtime if management approves?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397343822", "createdAt": "2020-03-24T17:42:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+--- Add new topic_message indexes to enable initial rest api for individual topic messages\n+---\n+\n+create index if not exists topic_message__topic_num_realm_num_seqnum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNDM4NA==", "bodyText": "Haven't had bandwidth to look into this part. Will look now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397514384", "createdAt": "2020-03-24T23:05:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+--- Add new topic_message indexes to enable initial rest api for individual topic messages\n+---\n+\n+create index if not exists topic_message__topic_num_realm_num_seqnum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MzgyMg=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEzMzE5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessage-07-idseq-not-found.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0NDoxM1rOF68Aew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTozNDozMlrOF7ACXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDg5MQ==", "bodyText": "Non-standard error response", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397344891", "createdAt": "2020-03-24T17:44:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-07-idseq-not-found.spec.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"description\": \"Topic messages for single message with non matching response\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 7,\n+        \"entity_type\": 4\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": [\n+      {\n+        \"timestamp\": \"1234567890000000001\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 1\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/topic/7/message/2\",\n+  \"responseStatus\": 404,\n+  \"responseJson\": {\n+    \"message\": \"hcs message not found\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxMDkxMA==", "bodyText": "Pulled this from /topic/message/:timestamp topic response. Will standardize it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397410910", "createdAt": "2020-03-24T19:34:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessage-07-idseq-not-found.spec.json", "diffHunk": "@@ -0,0 +1,26 @@\n+{\n+  \"description\": \"Topic messages for single message with non matching response\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 7,\n+        \"entity_type\": 4\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": [\n+      {\n+        \"timestamp\": \"1234567890000000001\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 1\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/topic/7/message/2\",\n+  \"responseStatus\": 404,\n+  \"responseJson\": {\n+    \"message\": \"hcs message not found\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDg5MQ=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE1OTQ5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MDo1OVrOF68Rug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyMjo0M1rOF7BnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTMwNg==", "bodyText": "A default would need to be added to application.yaml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397349306", "createdAt": "2020-03-24T17:50:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -97,7 +97,8 @@ for (const api of [\n   {name: 'transactions', ttl: config.api.ttl.transactions},\n   {name: 'balances', ttl: config.api.ttl.balances},\n   {name: 'accounts', ttl: config.api.ttl.accounts},\n-  {name: 'events', ttl: config.api.ttl.events}\n+  {name: 'events', ttl: config.api.ttl.events},\n+  {name: 'topicmessages', ttl: config.api.ttl.topicmessages}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNjc0Nw==", "bodyText": "Left over logic from when I thought I was also covering the topic/:id/messages collection endpoint.\nWe don't seem to cache for single resource item requests so I'll remove this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397436747", "createdAt": "2020-03-24T20:22:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -97,7 +97,8 @@ for (const api of [\n   {name: 'transactions', ttl: config.api.ttl.transactions},\n   {name: 'balances', ttl: config.api.ttl.balances},\n   {name: 'accounts', ttl: config.api.ttl.accounts},\n-  {name: 'events', ttl: config.api.ttl.events}\n+  {name: 'events', ttl: config.api.ttl.events},\n+  {name: 'topicmessages', ttl: config.api.ttl.topicmessages}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTMwNg=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzQzNjI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowNjo0MVrOF6_GAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1NToxMlrOF7GH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NTQ1OQ==", "bodyText": "We should also probably make this a unique index?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397395459", "createdAt": "2020-03-24T19:06:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+--- Add new topic_message indexes to enable initial rest api for individual topic messages\n+---\n+\n+create index if not exists topic_message__topic_num_realm_num_seqnum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMDYxNA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397510614", "createdAt": "2020-03-24T22:55:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.21__add_topicmessage_seqindex.sql", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+--- Add new topic_message indexes to enable initial rest api for individual topic messages\n+---\n+\n+create index if not exists topic_message__topic_num_realm_num_seqnum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NTQ1OQ=="}, "originalCommit": {"oid": "b04275014a11641795839c6abbfa4f0ee42bc3b5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDUyNjI5OnYy", "diffSide": "LEFT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTo1MjoyMVrOF7JcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo0NjozMFrOF7hlTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NTAzMg==", "bodyText": "Please don't remove this. It's not testing uniqueness of db data, but of disparate service layers potentially returning dupes and checking if service filters them out.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397565032", "createdAt": "2020-03-25T01:52:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -480,32 +480,6 @@ void bothMessagesWithRealmNum() {\n                 .verify(Duration.ofMillis(500));\n     }\n \n-    @Test\n-    void duplicateMessages() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ee3deaef505fd1b7fb74c26a6f101ba5411423"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNDU4OQ==", "bodyText": "The test fails because you can't insert the duplicate messages with the new unique index of realm_num, topic_num and sequence_number.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397924589", "createdAt": "2020-03-25T15:01:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -480,32 +480,6 @@ void bothMessagesWithRealmNum() {\n                 .verify(Duration.ofMillis(500));\n     }\n \n-    @Test\n-    void duplicateMessages() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NTAzMg=="}, "originalCommit": {"oid": "a8ee3deaef505fd1b7fb74c26a6f101ba5411423"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyNjAwMA==", "bodyText": "The test would have to be modified or moved from this file to send back duplicates that don't reflect actual db duplicates in that case", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397926000", "createdAt": "2020-03-25T15:03:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -480,32 +480,6 @@ void bothMessagesWithRealmNum() {\n                 .verify(Duration.ofMillis(500));\n     }\n \n-    @Test\n-    void duplicateMessages() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NTAzMg=="}, "originalCommit": {"oid": "a8ee3deaef505fd1b7fb74c26a6f101ba5411423"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2MDUyNg==", "bodyText": "Ah, I see. We'll probably have to rewrite it as a mock test in the future. We can do that later.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/615#discussion_r397960526", "createdAt": "2020-03-25T15:46:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -480,32 +480,6 @@ void bothMessagesWithRealmNum() {\n                 .verify(Duration.ofMillis(500));\n     }\n \n-    @Test\n-    void duplicateMessages() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NTAzMg=="}, "originalCommit": {"oid": "a8ee3deaef505fd1b7fb74c26a6f101ba5411423"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1248, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}