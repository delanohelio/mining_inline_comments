{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MzcyNDc3", "number": 753, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjozMDoxNVrOD7bTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1OToyMlrOD7ez1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjM5ODQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/domain/EntityIdTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjozMDoxNVrOGTvpqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzozNTo0MFrOGTw_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Njg0Mw==", "bodyText": "If the following scenarios are handled we should have asserts for them too\n-Null type\n-Negative values\n-Out of range values\n-Non integer chars", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423356843", "createdAt": "2020-05-11T22:30:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/domain/EntityIdTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class EntityIdTest {\n+    @Test\n+    void ofString() {\n+        EntityTypeEnum type = EntityTypeEnum.ACCOUNT;\n+        assertThat(EntityId.of(\"0.0.1\", type)).isEqualTo(EntityId.of(0, 0, 1, type));\n+        assertThat(EntityId.of(\"0.0.0\", type)).isNull();\n+        assertThatThrownBy(() -> EntityId.of(null, type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0.0\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0.0.0.1\", type)).isInstanceOf(IllegalArgumentException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34c233b2e19f8169626f7736158cddff9eda9288"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3ODgyMw==", "bodyText": "There was already a null check. Added the other checks.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423378823", "createdAt": "2020-05-11T23:35:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/domain/EntityIdTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class EntityIdTest {\n+    @Test\n+    void ofString() {\n+        EntityTypeEnum type = EntityTypeEnum.ACCOUNT;\n+        assertThat(EntityId.of(\"0.0.1\", type)).isEqualTo(EntityId.of(0, 0, 1, type));\n+        assertThat(EntityId.of(\"0.0.0\", type)).isNull();\n+        assertThatThrownBy(() -> EntityId.of(null, type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0.0\", type)).isInstanceOf(IllegalArgumentException.class);\n+        assertThatThrownBy(() -> EntityId.of(\"0.0.0.1\", type)).isInstanceOf(IllegalArgumentException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Njg0Mw=="}, "originalCommit": {"oid": "34c233b2e19f8169626f7736158cddff9eda9288"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjQzNDIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjo0NjoyMFrOGTwAaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzozNjo0MVrOGTxAsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjY2NQ==", "bodyText": "We should also guard against negative  and out of range numbers", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423362665", "createdAt": "2020-05-11T22:46:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -76,7 +83,17 @@ public static EntityId of(TopicID topicID) {\n         return of(topicID.getShardNum(), topicID.getRealmNum(), topicID.getTopicNum(), EntityTypeEnum.TOPIC);\n     }\n \n-    private static EntityId of(long entityShard, long entityRealm, long entityNum, EntityTypeEnum type) {\n+    public static EntityId of(String entityId, EntityTypeEnum type) {\n+        List<Long> parts = SPLITTER.splitToStream(Objects.requireNonNullElse(entityId, \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34c233b2e19f8169626f7736158cddff9eda9288"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3OTEyMw==", "bodyText": "Added check for negative. No need to check upper range as Long.MAX_VALUE already checked by Long.valueOf", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423379123", "createdAt": "2020-05-11T23:36:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -76,7 +83,17 @@ public static EntityId of(TopicID topicID) {\n         return of(topicID.getShardNum(), topicID.getRealmNum(), topicID.getTopicNum(), EntityTypeEnum.TOPIC);\n     }\n \n-    private static EntityId of(long entityShard, long entityRealm, long entityNum, EntityTypeEnum type) {\n+    public static EntityId of(String entityId, EntityTypeEnum type) {\n+        List<Long> parts = SPLITTER.splitToStream(Objects.requireNonNullElse(entityId, \"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjY2NQ=="}, "originalCommit": {"oid": "34c233b2e19f8169626f7736158cddff9eda9288"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk0MzgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MetricsExecutionInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzozOTo1MFrOGT07EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTozNToxNVrOGUMoWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0MzIxNg==", "bodyText": "please add class comment.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423443216", "createdAt": "2020-05-12T03:39:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MetricsExecutionInterceptor.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Timer;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Named;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttribute;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.StreamType;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgzMTY0Mg==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423831642", "createdAt": "2020-05-12T15:35:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MetricsExecutionInterceptor.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.micrometer.core.instrument.DistributionSummary;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Timer;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.inject.Named;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import software.amazon.awssdk.core.interceptor.Context;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttribute;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.StreamType;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0MzIxNg=="}, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk2NjM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1NDoxNlrOGT1IxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozNjo0NVrOGUJ1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0NjcyNQ==", "bodyText": "curious, why not use annotation?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423446725", "createdAt": "2020-05-12T03:54:16Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -54,35 +59,51 @@\n import software.amazon.awssdk.services.s3.model.RequestPayer;\n import software.amazon.awssdk.services.s3.model.S3Object;\n \n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.domain.HederaNetwork;\n import com.hedera.mirror.importer.domain.NodeAddress;\n import com.hedera.mirror.importer.exception.SignatureVerificationException;\n import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n import com.hedera.mirror.importer.util.ShutdownHelper;\n import com.hedera.mirror.importer.util.Utility;\n \n public abstract class Downloader {\n-    protected final Logger log = LogManager.getLogger(getClass());\n \n+    protected final Logger log = LogManager.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4NTg3Nw==", "bodyText": "Because Lombok annotations would create a static logger and all log entries would appear as Downloader instead of the sub-class.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423785877", "createdAt": "2020-05-12T14:36:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -54,35 +59,51 @@\n import software.amazon.awssdk.services.s3.model.RequestPayer;\n import software.amazon.awssdk.services.s3.model.S3Object;\n \n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n import com.hedera.mirror.importer.domain.ApplicationStatusCode;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.FileStreamSignature;\n+import com.hedera.mirror.importer.domain.HederaNetwork;\n import com.hedera.mirror.importer.domain.NodeAddress;\n import com.hedera.mirror.importer.exception.SignatureVerificationException;\n import com.hedera.mirror.importer.repository.ApplicationStatusRepository;\n import com.hedera.mirror.importer.util.ShutdownHelper;\n import com.hedera.mirror.importer.util.Utility;\n \n public abstract class Downloader {\n-    protected final Logger log = LogManager.getLogger(getClass());\n \n+    protected final Logger log = LogManager.getLogger(getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0NjcyNQ=="}, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk3MzY0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1OToyMlrOGT1NVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzowODoxNVrOGUQlAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0Nzg5NA==", "bodyText": "For signature metrics, recording node as dimension is indeed useful for filtering later. We can store full \"0.0.X\" as the tag value.\nIndividual realm, shard and num as dimensions don't seem useful.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423447894", "createdAt": "2020-05-12T03:59:22Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -284,10 +317,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                 return;\n             }\n \n+            Instant startTime = Instant.now();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(sigFileName);\n-            nodeSignatureVerifier.verify(signatures);\n             boolean valid = false;\n \n+            try {\n+                nodeSignatureVerifier.verify(signatures);\n+            } finally {\n+                for (FileStreamSignature signature : signatures) {\n+                    EntityId nodeAccountId = EntityId.of(signature.getNode(), EntityTypeEnum.ACCOUNT);\n+                    signatureVerificationMetric.tag(\"node\", nodeAccountId.getEntityNum().toString())\n+                            .tag(\"realm\", nodeAccountId.getRealmNum().toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MzUzMQ==", "bodyText": "I disagree. Full node=\"0.0.X\" does not seem useful and my current approach can satisfy the same query with node=X. Admittedly, for either approach the realm and shard are currently not useful since they're always zero. But once we do have more than one realm or shard my approach will allow us to inspect metrics from those realms and shards separately that having a single key would not give you.\nAlso, once we go permissionless we will have to remove node since it will blow up the cardinality. We should be able to keep shard and realm. Separating them prepares us for that eventuality.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423793531", "createdAt": "2020-05-12T14:46:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -284,10 +317,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                 return;\n             }\n \n+            Instant startTime = Instant.now();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(sigFileName);\n-            nodeSignatureVerifier.verify(signatures);\n             boolean valid = false;\n \n+            try {\n+                nodeSignatureVerifier.verify(signatures);\n+            } finally {\n+                for (FileStreamSignature signature : signatures) {\n+                    EntityId nodeAccountId = EntityId.of(signature.getNode(), EntityTypeEnum.ACCOUNT);\n+                    signatureVerificationMetric.tag(\"node\", nodeAccountId.getEntityNum().toString())\n+                            .tag(\"realm\", nodeAccountId.getRealmNum().toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0Nzg5NA=="}, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5NjMyMw==", "bodyText": "True, breaking down into root dimensions gives more flexibility. It's just that for signatures, \"root concept\" is a node, and thus it seems that any logical conclusion of data points for signatures would be at that abstraction.\nSince we'll only have 39 at any point, am not worried about cardinality.\nI believe single dimension would have been enough, but am fine with current approach.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/753#discussion_r423896323", "createdAt": "2020-05-12T17:08:15Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -284,10 +317,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<String, FileStreamSignature\n                 return;\n             }\n \n+            Instant startTime = Instant.now();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(sigFileName);\n-            nodeSignatureVerifier.verify(signatures);\n             boolean valid = false;\n \n+            try {\n+                nodeSignatureVerifier.verify(signatures);\n+            } finally {\n+                for (FileStreamSignature signature : signatures) {\n+                    EntityId nodeAccountId = EntityId.of(signature.getNode(), EntityTypeEnum.ACCOUNT);\n+                    signatureVerificationMetric.tag(\"node\", nodeAccountId.getEntityNum().toString())\n+                            .tag(\"realm\", nodeAccountId.getRealmNum().toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0Nzg5NA=="}, "originalCommit": {"oid": "cd8f0507beb497ca7f6b8cd37f71c4155e6c9aef"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1032, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}