{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMDc0MTU4", "number": 729, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyODo1NlrOD4cmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0NTozOFrOD57R0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE1Mzc2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/resources/data/expected_transactions_json.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODoyODo1NlrOGPR1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwMjo0MDozOFrOGPcIzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NDA0NA==", "bodyText": "Would prefer json extension and a filename that references pubsub. Recommendation: pubsub-message.json. If we think we'll have multiple in the future, would be good to put in a pubsub directory and have scenario named appended: pubsub/01-crypto-create.json", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418674044", "createdAt": "2020-05-01T18:28:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/resources/data/expected_transactions_json.txt", "diffHunk": "@@ -0,0 +1,34 @@\n+{\"consensusTimestamp\":1567188600419072000,\"entity\":{\"shardNum\":0,\"realmNum\":0,\"entityNum\":51520,\"type\":1},\"transactionType\":11,\"transaction\":{\"body\":{\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"nodeAccountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"transactionFee\":\"2900000000\",\"transactionValidDuration\":{\"seconds\":\"120\"},\"generateRecord\":false,\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"cryptoCreateAccount\":{\"key\":{\"ed25519\":\"K6NFq0fFq7YX4UYunwggzBEBwB0R7BBYDa9RySpxCiE=\"},\"initialBalance\":\"12\",\"sendRecordThreshold\":\"9223372036854775807\",\"receiveRecordThreshold\":\"9223372036854775807\",\"receiverSigRequired\":false,\"autoRenewPeriod\":{\"seconds\":\"2678400\"}}},\"sigMap\":{\"sigPair\":[{\"pubKeyPrefix\":\"+qHijB5r\",\"ed25519\":\"oX22ol2OV0zfM9XLc6xjquXp+nswC9ek7GoL0V4hvtnFDCV/u2L7ksltw+S6A5ReLyLLcC1vztGUOVvowtoAAg==\"}]}},\"transactionRecord\":{\"receipt\":{\"status\":\"SUCCESS\",\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"exchangeRate\":{\"currentRate\":{\"hbarEquiv\":1,\"centEquiv\":12,\"expirationTime\":{\"seconds\":\"4688462211\"}},\"nextRate\":{\"hbarEquiv\":1,\"centEquiv\":15,\"expirationTime\":{\"seconds\":\"4688462211\"}}},\"topicSequenceNumber\":\"0\",\"topicRunningHash\":\"\",\"topicRunningHashVersion\":\"0\"},\"transactionHash\":\"OJuC42WKbGn1Y6Vp1ijdX6t2GXX3vt+uUWUoAdO2Bk4YyrRSW+0zRfUcvjxO6R5S\",\"consensusTimestamp\":{\"seconds\":\"1567188600\",\"nanos\":419072000},\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"transactionFee\":\"8466966\",\"transferList\":{\"accountAmounts\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-8466966\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"amount\":\"177816\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"98\"},\"amount\":\"8289150\"}]}},\"nonFeeTransfers\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-12\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"amount\":\"12\"}]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODg0MjgzMA==", "bodyText": "renamed to pubsub-messages.txt.\nAlthough file contains json strings, it can't be parsed as a json object, that's why didn't gave it.json extension.\nHad added it in directory initially, but then moved it out since there are many ways to structure but hard to say at this point which would be good with just one data point. Would wait till we have more files.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418842830", "createdAt": "2020-05-02T02:40:38Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/resources/data/expected_transactions_json.txt", "diffHunk": "@@ -0,0 +1,34 @@\n+{\"consensusTimestamp\":1567188600419072000,\"entity\":{\"shardNum\":0,\"realmNum\":0,\"entityNum\":51520,\"type\":1},\"transactionType\":11,\"transaction\":{\"body\":{\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"nodeAccountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"transactionFee\":\"2900000000\",\"transactionValidDuration\":{\"seconds\":\"120\"},\"generateRecord\":false,\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"cryptoCreateAccount\":{\"key\":{\"ed25519\":\"K6NFq0fFq7YX4UYunwggzBEBwB0R7BBYDa9RySpxCiE=\"},\"initialBalance\":\"12\",\"sendRecordThreshold\":\"9223372036854775807\",\"receiveRecordThreshold\":\"9223372036854775807\",\"receiverSigRequired\":false,\"autoRenewPeriod\":{\"seconds\":\"2678400\"}}},\"sigMap\":{\"sigPair\":[{\"pubKeyPrefix\":\"+qHijB5r\",\"ed25519\":\"oX22ol2OV0zfM9XLc6xjquXp+nswC9ek7GoL0V4hvtnFDCV/u2L7ksltw+S6A5ReLyLLcC1vztGUOVvowtoAAg==\"}]}},\"transactionRecord\":{\"receipt\":{\"status\":\"SUCCESS\",\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"exchangeRate\":{\"currentRate\":{\"hbarEquiv\":1,\"centEquiv\":12,\"expirationTime\":{\"seconds\":\"4688462211\"}},\"nextRate\":{\"hbarEquiv\":1,\"centEquiv\":15,\"expirationTime\":{\"seconds\":\"4688462211\"}}},\"topicSequenceNumber\":\"0\",\"topicRunningHash\":\"\",\"topicRunningHashVersion\":\"0\"},\"transactionHash\":\"OJuC42WKbGn1Y6Vp1ijdX6t2GXX3vt+uUWUoAdO2Bk4YyrRSW+0zRfUcvjxO6R5S\",\"consensusTimestamp\":{\"seconds\":\"1567188600\",\"nanos\":419072000},\"transactionID\":{\"transactionValidStart\":{\"seconds\":\"1567188595\",\"nanos\":557211400},\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"}},\"memo\":\"Test Account Instance: Creating Test Account on Network\",\"transactionFee\":\"8466966\",\"transferList\":{\"accountAmounts\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-8466966\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"4\"},\"amount\":\"177816\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"98\"},\"amount\":\"8289150\"}]}},\"nonFeeTransfers\":[{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"1301\"},\"amount\":\"-12\"},{\"accountID\":{\"shardNum\":\"0\",\"realmNum\":\"0\",\"accountNum\":\"51520\"},\"amount\":\"12\"}]}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NDA0NA=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE3MzM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozNjoyMFrOGPSCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNTowOToxMlrOGPfunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzI4OA==", "bodyText": "Why cannot all integration tests extend from IntegrationTest (RecordParserDisabledTest, PubSubIntegrationTest)? Spring Boot should be smart enough to know that it needs to load a new or partial application context depending upon the annotations present. That way the common annotations can all stay in IntegrationTest like cache, database, kubernetes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677288", "createdAt": "2020-05-01T18:36:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwMTY2MA==", "bodyText": "Ah, didn't know @SpringBootTest could work like that. Done now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418901660", "createdAt": "2020-05-02T05:09:12Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzI4OA=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE3NTYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODozNzowM1rOGPSDeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToxNzo1NlrOGQOiaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA==", "bodyText": "Should be abstract. IntegrationTest should also be abstract", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418677624", "createdAt": "2020-05-01T18:37:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwNDgzNQ==", "bodyText": "What's the advantage of making them abstract when they don't have any abstract function?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418904835", "createdAt": "2020-05-02T05:17:28Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MTM0NQ==", "bodyText": "An abstract class just means it can't be instantiated on its own, not necessarily that it contains abstract methods. It's considered good practice since this class is not standalone but intended to be used through inheritance only. Also, if we had @Test in it JUnit might run it multiple times: once standalone and N times for each subclass.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418961345", "createdAt": "2020-05-02T13:49:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2ODU4NA==", "bodyText": "point taken.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419668584", "createdAt": "2020-05-04T19:17:56Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubIntegrationTest.java", "diffHunk": "@@ -20,15 +20,59 @@\n  * \u200d\n  */\n \n+import com.google.api.gax.rpc.NotFoundException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.cloud.gcp.pubsub.PubSubAdmin;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.TestExecutionListeners;\n \n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n @ContextConfiguration(\n-        initializers = {DatabaseApplicationContextInitializer.class, TestPubSubConfiguration.ContextInitializer.class},\n-        classes = TestPubSubConfiguration.class)\n+        initializers = {DatabaseApplicationContextInitializer.class, PubSubEmulatorApplicationContextInitializer.class})\n @TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n         mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n-@SpringBootTest(properties = \"spring.cloud.kubernetes.enabled=false\")\n+@SpringBootTest(properties = {\n+        \"spring.cloud.kubernetes.enabled=false\",\n+        \"spring.cloud.gcp.pubsub.enabled=true\",\n+        \"hedera.mirror.importer.parser.record.entity.enabled=false\"})\n public class PubSubIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NzYyNA=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE4MzUxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo0MDowMlrOGPSIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1NTozOFrOGREBYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw==", "bodyText": "You said you wanted to test at file parser level to test error scenario. But I don't see any error scenario tests.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418678933", "createdAt": "2020-05-01T18:40:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.PubSubIntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+public class PubSubRecordParserTest extends PubSubIntegrationTest {\n+    private static final int NUM_TXNS = 34; // number of transactions in test record files\n+\n+    @TempDir\n+    Path dataPath;\n+    @Value(\"classpath:data\")\n+    Path testResourcesPath;\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+    private FileCopier fileCopier;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        StreamType streamType = StreamType.RECORD;\n+        fileCopier = FileCopier.create(testResourcesPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+    }\n+\n+    @Test\n+    public void testPubSubExporter() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMjIxNw==", "bodyText": "Working on it.\nDigging into spring to see how i can inject a fault-injecting component during test context setup.\nAny ideas?\nSo far i only know TestConfiguration and ApplicationContextInitializer.\nIf i can't get to it now, will punt it to later.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418922217", "createdAt": "2020-05-02T06:49:56Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.PubSubIntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+public class PubSubRecordParserTest extends PubSubIntegrationTest {\n+    private static final int NUM_TXNS = 34; // number of transactions in test record files\n+\n+    @TempDir\n+    Path dataPath;\n+    @Value(\"classpath:data\")\n+    Path testResourcesPath;\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+    private FileCopier fileCopier;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        StreamType streamType = StreamType.RECORD;\n+        fileCopier = FileCopier.create(testResourcesPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+    }\n+\n+    @Test\n+    public void testPubSubExporter() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDg2NQ==", "bodyText": "Punting to later.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544865", "createdAt": "2020-05-06T04:55:38Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordParserTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.PubSubIntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+public class PubSubRecordParserTest extends PubSubIntegrationTest {\n+    private static final int NUM_TXNS = 34; // number of transactions in test record files\n+\n+    @TempDir\n+    Path dataPath;\n+    @Value(\"classpath:data\")\n+    Path testResourcesPath;\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+    private FileCopier fileCopier;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+\n+        StreamType streamType = StreamType.RECORD;\n+        fileCopier = FileCopier.create(testResourcesPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+    }\n+\n+    @Test\n+    public void testPubSubExporter() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODkzMw=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTE5ODMyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo0NTozM1rOGPSSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjozNTo1MFrOGPg6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTM2OQ==", "bodyText": "Doesn't look like we're needing 8682 to be exposed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418681369", "createdAt": "2020-05-01T18:45:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    private static GenericContainer emulator;\n+\n+    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n+    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n+    // to be correctly set and pointing to a running pubsub emulator.\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n+        try {\n+            log.info(\"Starting PubSub emulator\");\n+            var emulator = startPubSubEmulator(projectId);\n+            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n+            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n+            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n+                    .applyTo(applicationContext);\n+        } catch (Exception e) {\n+            log.warn(e.getMessage());\n+        }\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        if (emulator != null && emulator.isRunning()) {\n+            log.info(\"Stopping PubSub emulator\");\n+            emulator.stop();\n+        }\n+    }\n+\n+    private static GenericContainer startPubSubEmulator(String projectId) {\n+        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n+                .withExposedPorts(8681)\n+                .withExposedPorts(8682)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMTAzOQ==", "bodyText": "NA anymore.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418921039", "createdAt": "2020-05-02T06:35:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    private static GenericContainer emulator;\n+\n+    // Try starting pubsub emulator. Will fail if docker daemon is absent on the machine running the tests,\n+    // basically when running in CircleCI. In such cases, spring.cloud.gcp.pubsub.emulator-host is expected\n+    // to be correctly set and pointing to a running pubsub emulator.\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        String projectId = applicationContext.getEnvironment().getProperty(\"spring.cloud.gcp.pubsub.projectId\");\n+        try {\n+            log.info(\"Starting PubSub emulator\");\n+            var emulator = startPubSubEmulator(projectId);\n+            String pubsubEmulatorHost = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8681);\n+            log.info(\"Pubsub emulator running at {}\", pubsubEmulatorHost);\n+            TestPropertyValues.of(\"spring.cloud.gcp.pubsub.emulator-host=\" + pubsubEmulatorHost)\n+                    .applyTo(applicationContext);\n+        } catch (Exception e) {\n+            log.warn(e.getMessage());\n+        }\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        if (emulator != null && emulator.isRunning()) {\n+            log.info(\"Stopping PubSub emulator\");\n+            emulator.stop();\n+        }\n+    }\n+\n+    private static GenericContainer startPubSubEmulator(String projectId) {\n+        emulator = new GenericContainer(\"messagebird/gcloud-pubsub-emulator:latest\")\n+                .withExposedPorts(8681)\n+                .withExposedPorts(8682)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTM2OQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTIxNTA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1MToyMVrOGPScnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1NDoxMFrOGREACg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ==", "bodyText": "Have we considered using testcontainers' Spring Boot embedded-google-pubsub? We can look into maybe switching this and postgres to this as well maybe in future", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418684061", "createdAt": "2020-05-01T18:51:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkwNDk1Mg==", "bodyText": "Really like the suggestion!\nDone.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418904952", "createdAt": "2020-05-02T05:17:47Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMjg5OQ==", "bodyText": "Can't find a way to set embedded.google.pubsub.enabled and embedded.postgres.enabled to false from command line. Any insights?\nTried following, none worked:\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Dspring-boot.run.arguments=--embedded.google.pubsub.enabled=false\n\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Dembedded.google.pubsub.enabled=false\n\nmvn test -pl hedera-mirror-importer -Dtest=PubSubRecordParserTest -Drun.arguments=\"--embedded.google.pubsub.enabled=false\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418922899", "createdAt": "2020-05-02T06:58:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MTczMg==", "bodyText": "Why can't you just set via @SpringBootTest?  Looks like these are set during bootstrap phase, so have to set in bootstrap.yml/properties. Can create file dynamically if needed. Not sure your use case", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418961732", "createdAt": "2020-05-02T13:53:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MjI3Mg==", "bodyText": "Also environment variables might work", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418962272", "createdAt": "2020-05-02T13:58:16Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDUyMg==", "bodyText": "circleci works now. creating file dynamically.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544522", "createdAt": "2020-05-06T04:54:10Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.annotation.PreDestroy;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.OutputFrame;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+@Log4j2\n+class PubSubEmulatorApplicationContextInitializer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NDA2MQ=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTIyNzM5OnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODo1NTozN1rOGPSkLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwNjozNToyN1rOGPg6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NTk5Nw==", "bodyText": "Would be better to use an official image: https://hub.docker.com/r/google/cloud-sdk. It includes the emulator", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418685997", "createdAt": "2020-05-01T18:55:37Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -26,14 +26,21 @@ references:\n       key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n       paths:\n         - ~/.m2\n-  db_docker: &db_docker\n-    docker:\n-      - image: adoptopenjdk:11-jdk-hotspot\n-      - image: postgres:9.6-alpine\n-        environment:\n-          POSTGRES_DB: mirror_node_test\n-          POSTGRES_PASSWORD: mirror_node_pass\n-          POSTGRES_USER: mirror_node\n+  docker_jdk11: &docker_jdk11\n+    image: adoptopenjdk:11-jdk-hotspot\n+  docker_db: &docker_db\n+    image: postgres:9.6-alpine\n+    environment:\n+      POSTGRES_DB: mirror_node_test\n+      POSTGRES_PASSWORD: mirror_node_pass\n+      POSTGRES_USER: mirror_node\n+  docker_pubsub: &docker_pubsub\n+    image: messagebird/gcloud-pubsub-emulator:latest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkyMTAxNQ==", "bodyText": "Done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r418921015", "createdAt": "2020-05-02T06:35:27Z", "author": {"login": "apeksharma"}, "path": ".circleci/config.yml", "diffHunk": "@@ -26,14 +26,21 @@ references:\n       key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n       paths:\n         - ~/.m2\n-  db_docker: &db_docker\n-    docker:\n-      - image: adoptopenjdk:11-jdk-hotspot\n-      - image: postgres:9.6-alpine\n-        environment:\n-          POSTGRES_DB: mirror_node_test\n-          POSTGRES_PASSWORD: mirror_node_pass\n-          POSTGRES_USER: mirror_node\n+  docker_jdk11: &docker_jdk11\n+    image: adoptopenjdk:11-jdk-hotspot\n+  docker_db: &docker_db\n+    image: postgres:9.6-alpine\n+    environment:\n+      POSTGRES_DB: mirror_node_test\n+      POSTGRES_PASSWORD: mirror_node_pass\n+      POSTGRES_USER: mirror_node\n+  docker_pubsub: &docker_pubsub\n+    image: messagebird/gcloud-pubsub-emulator:latest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4NTk5Nw=="}, "originalCommit": {"oid": "63a85e5d66b8461db99c2279a0973479d1705971"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODEwODU4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1MDoxM1rOGPomWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1MzoxNFrOGRD_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzAwMg==", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047002", "createdAt": "2020-05-03T04:50:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.grpc;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+/**\n+ * Sets up application properties based on testcontainers if any enabled.\n+ */\n+public class DatabaseApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.grpc.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMwMw==", "bodyText": "Moved to application.yml (since they need to override props in main/../application.yml, and bootstrap has lower precedence than application)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544303", "createdAt": "2020-05-06T04:53:14Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.hedera.mirror.grpc;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+/**\n+ * Sets up application properties based on testcontainers if any enabled.\n+ */\n+public class DatabaseApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.grpc.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzAwMg=="}, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODExMDExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1MjoxN1rOGPonBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1Mzo0OFrOGRD_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzE3NQ==", "bodyText": "Would be more appropriate in src/test/resources/bootstrap.yml.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047175", "createdAt": "2020-05-03T04:52:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -20,55 +20,29 @@\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n-import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n /**\n- * First try to use a Testcontainer. If Docker is not running or it fails to connect to the Testcontainer, fallback\n- * to a database running on localhost.\n+ * Sets up application properties based on testcontainers if any enabled.\n  */\n-@Log4j2\n-@TestConfiguration\n public class DatabaseApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static PostgreSQLContainer postgresql;\n-\n-    static {\n-        System.setProperty(\"testcontainers.environmentprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.npipesocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.unixsocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.windowsprovider.timeout\", \"1\");\n-    }\n-\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        try {\n-            log.info(\"Starting PostgreSQL\");\n-            postgresql = new PostgreSQLContainer<>(\"postgres:9.6-alpine\");\n-            postgresql.start();\n-\n-            TestPropertyValues\n-                    .of(\"hedera.mirror.importer.db.name=\" + postgresql.getDatabaseName())\n-                    .and(\"hedera.mirror.importer.db.password=\" + postgresql.getPassword())\n-                    .and(\"hedera.mirror.importer.db.username=\" + postgresql.getUsername())\n-                    .and(\"spring.datasource.url=\" + postgresql.getJdbcUrl())\n-                    .applyTo(applicationContext);\n-        } catch (Throwable ex) {\n-            log.warn(ex.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (postgresql != null && postgresql.isRunning()) {\n-            log.info(\"Stopping PostgreSQL\");\n-            postgresql.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.importer.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDQzMg==", "bodyText": "moved to application.yml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544432", "createdAt": "2020-05-06T04:53:48Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/DatabaseApplicationContextInitializer.java", "diffHunk": "@@ -20,55 +20,29 @@\n  * \u200d\n  */\n \n-import javax.annotation.PreDestroy;\n-import lombok.extern.log4j.Log4j2;\n-import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.test.util.TestPropertyValues;\n import org.springframework.context.ApplicationContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n /**\n- * First try to use a Testcontainer. If Docker is not running or it fails to connect to the Testcontainer, fallback\n- * to a database running on localhost.\n+ * Sets up application properties based on testcontainers if any enabled.\n  */\n-@Log4j2\n-@TestConfiguration\n public class DatabaseApplicationContextInitializer\n         implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n \n-    private static PostgreSQLContainer postgresql;\n-\n-    static {\n-        System.setProperty(\"testcontainers.environmentprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.npipesocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.unixsocketprovider.timeout\", \"1\");\n-        System.setProperty(\"testcontainers.windowsprovider.timeout\", \"1\");\n-    }\n-\n     @Override\n     public void initialize(ConfigurableApplicationContext applicationContext) {\n-        try {\n-            log.info(\"Starting PostgreSQL\");\n-            postgresql = new PostgreSQLContainer<>(\"postgres:9.6-alpine\");\n-            postgresql.start();\n-\n-            TestPropertyValues\n-                    .of(\"hedera.mirror.importer.db.name=\" + postgresql.getDatabaseName())\n-                    .and(\"hedera.mirror.importer.db.password=\" + postgresql.getPassword())\n-                    .and(\"hedera.mirror.importer.db.username=\" + postgresql.getUsername())\n-                    .and(\"spring.datasource.url=\" + postgresql.getJdbcUrl())\n-                    .applyTo(applicationContext);\n-        } catch (Throwable ex) {\n-            log.warn(ex.getMessage());\n-        }\n-    }\n-\n-    @PreDestroy\n-    public void stop() {\n-        if (postgresql != null && postgresql.isRunning()) {\n-            log.info(\"Stopping PostgreSQL\");\n-            postgresql.stop();\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.postgresql.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n         }\n+        TestPropertyValues\n+                .of(\"hedera.mirror.importer.db.host=\" + env.getProperty(\"embedded.postgresql.host\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzE3NQ=="}, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODExMjgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1NTo1MFrOGPooSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1MTowN1rOGRD9hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQ5Ng==", "bodyText": "You need to define postgres 9.6 image in a bootstrap.yml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047496", "createdAt": "2020-05-03T04:55:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java", "diffHunk": "@@ -20,77 +20,17 @@\n  * \u200d\n  */\n \n-import java.util.Collection;\n-import javax.annotation.PreDestroy;\n-import javax.annotation.Resource;\n-import lombok.extern.log4j.Log4j2;\n-import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.cache.CacheManager;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.Sql;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n-@ContextConfiguration(initializers = GrpcIntegrationTest.TestDatabaseConfiguration.class)\n-@SpringBootTest\n+@ContextConfiguration(initializers = DatabaseApplicationContextInitializer.class)\n+@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n+        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n+// Same database is used for all tests, so clean it up before each test.\n @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n+@SpringBootTest\n public abstract class GrpcIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Mzg3Ng==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420543876", "createdAt": "2020-05-06T04:51:07Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/GrpcIntegrationTest.java", "diffHunk": "@@ -20,77 +20,17 @@\n  * \u200d\n  */\n \n-import java.util.Collection;\n-import javax.annotation.PreDestroy;\n-import javax.annotation.Resource;\n-import lombok.extern.log4j.Log4j2;\n-import org.junit.jupiter.api.BeforeEach;\n import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.boot.test.context.TestConfiguration;\n-import org.springframework.boot.test.util.TestPropertyValues;\n-import org.springframework.cache.CacheManager;\n-import org.springframework.context.ApplicationContextInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.Sql;\n-import org.testcontainers.containers.PostgreSQLContainer;\n \n-@ContextConfiguration(initializers = GrpcIntegrationTest.TestDatabaseConfiguration.class)\n-@SpringBootTest\n+@ContextConfiguration(initializers = DatabaseApplicationContextInitializer.class)\n+@TestExecutionListeners(value = {ResetCacheTestExecutionListener.class},\n+        mergeMode = TestExecutionListeners.MergeMode.MERGE_WITH_DEFAULTS)\n+// Same database is used for all tests, so clean it up before each test.\n @Sql(executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n @Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:cleanup.sql\")\n+@SpringBootTest\n public abstract class GrpcIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQ5Ng=="}, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODExNDUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1ODoyOFrOGPopEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1NDo1OVrOGREAyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5OQ==", "bodyText": "Would be more appropriate in a src/test/resources/bootstrap-pubsub.yml. Then you can @ActiveProfiles(\"pubsub\") on PubSubIntegrationTest to activate it. Can also throw the enabled=true and other properties in there.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r419047699", "createdAt": "2020-05-03T04:58:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDcxMg==", "bodyText": "using @ActiveProfiles as suggested\nmoved props to application-pubsub.yml", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420544712", "createdAt": "2020-05-06T04:54:59Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/PubSubEmulatorApplicationContextInitializer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.mirror.importer;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+class PubSubEmulatorApplicationContextInitializer\n+        implements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\n+    @Override\n+    public void initialize(ConfigurableApplicationContext applicationContext) {\n+        var env = applicationContext.getEnvironment();\n+        String enabled = env.getProperty(\"embedded.google.pubsub.enabled\");\n+        if (enabled != null && enabled.equals(\"false\")) {\n+            return;\n+        }\n+        TestPropertyValues\n+                .of(\"spring.cloud.gcp.pubsub.projectId=\" + env.getProperty(\"embedded.google.pubsub.project-id\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5OQ=="}, "originalCommit": {"oid": "d18990ddbb060cd51217798982040041d31b2e29"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDY2NjQyOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo0NTozOFrOGReWrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTozMDoxNVrOGRmLDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjMwMA==", "bodyText": "This build application.yaml will get copied into release artifact. Please use a different output directory.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420976300", "createdAt": "2020-05-06T17:45:38Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -84,8 +76,85 @@ commands:\n             )\n             done\n \n+  restore_maven_cache:\n+    description: \"Restore maven cache\"\n+    steps:\n+      - run:\n+          name: Calculate checksum of all pom.xml\n+          command: find . -type f -name \"pom.xml\" | sort -u | xargs sha512sum > pom.xml.checksum\n+      - restore_cache:\n+          keys:\n+            #  Perms on ~/.m2 differ by executor (docker/machine), so {{ arch }} is needed.\n+            - maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+            - maven-v2-{{ arch }}-{{ .Branch }}\n+            - maven-v2-{{ arch }}-\n+\n+  save_maven_cache:\n+    steps:\n+    - save_cache:\n+        key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+        paths:\n+          - ~/.m2\n+\n+  write_spring_override_config:\n+    steps:\n+    - run:\n+        name: Write spring override config\n+        command: |\n+          mkdir -p ${WORKSPACE}\n+          cat >> ${WORKSPACE}/application.yml \\<< EOF", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDA3NQ==", "bodyText": "It won't. /tmp/workspace is just general workspace. /tmp/workspace/artifacts are for artifacts and get copied into release.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r420984075", "createdAt": "2020-05-06T17:57:30Z", "author": {"login": "apeksharma"}, "path": ".circleci/config.yml", "diffHunk": "@@ -84,8 +76,85 @@ commands:\n             )\n             done\n \n+  restore_maven_cache:\n+    description: \"Restore maven cache\"\n+    steps:\n+      - run:\n+          name: Calculate checksum of all pom.xml\n+          command: find . -type f -name \"pom.xml\" | sort -u | xargs sha512sum > pom.xml.checksum\n+      - restore_cache:\n+          keys:\n+            #  Perms on ~/.m2 differ by executor (docker/machine), so {{ arch }} is needed.\n+            - maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+            - maven-v2-{{ arch }}-{{ .Branch }}\n+            - maven-v2-{{ arch }}-\n+\n+  save_maven_cache:\n+    steps:\n+    - save_cache:\n+        key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+        paths:\n+          - ~/.m2\n+\n+  write_spring_override_config:\n+    steps:\n+    - run:\n+        name: Write spring override config\n+        command: |\n+          mkdir -p ${WORKSPACE}\n+          cat >> ${WORKSPACE}/application.yml \\<< EOF", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjMwMA=="}, "originalCommit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwNDM5Ng==", "bodyText": "/tmp/workspace/artifacts is where the output tar goes, not for input. But I can see now that last ${NAME} in tar -czf ${WORKSPACE}/artifacts/${NAME}.tgz -C ${WORKSPACE} ${NAME} ensures that only that sub-folder gets copied, so should be fine.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/729#discussion_r421104396", "createdAt": "2020-05-06T21:30:15Z", "author": {"login": "steven-sheehy"}, "path": ".circleci/config.yml", "diffHunk": "@@ -84,8 +76,85 @@ commands:\n             )\n             done\n \n+  restore_maven_cache:\n+    description: \"Restore maven cache\"\n+    steps:\n+      - run:\n+          name: Calculate checksum of all pom.xml\n+          command: find . -type f -name \"pom.xml\" | sort -u | xargs sha512sum > pom.xml.checksum\n+      - restore_cache:\n+          keys:\n+            #  Perms on ~/.m2 differ by executor (docker/machine), so {{ arch }} is needed.\n+            - maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+            - maven-v2-{{ arch }}-{{ .Branch }}\n+            - maven-v2-{{ arch }}-\n+\n+  save_maven_cache:\n+    steps:\n+    - save_cache:\n+        key: maven-v2-{{ arch }}-{{ .Branch }}-{{ checksum \"pom.xml.checksum\" }}\n+        paths:\n+          - ~/.m2\n+\n+  write_spring_override_config:\n+    steps:\n+    - run:\n+        name: Write spring override config\n+        command: |\n+          mkdir -p ${WORKSPACE}\n+          cat >> ${WORKSPACE}/application.yml \\<< EOF", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjMwMA=="}, "originalCommit": {"oid": "535ba5f7c537fc0183152e7a6b30baf898709876"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1015, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}