{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODUzOTgx", "number": 1195, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMToyOVrOEyDVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxMDoyNVrOEyEZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4ODQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMToyOVrOHoe22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMToyOVrOHoe22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDY1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                                 WHERE  file_hash = $3)) AS rcd`\n          \n          \n            \n                                                                                 WHERE  file_hash = $1)) AS rcd`", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512210651", "createdAt": "2020-10-26T19:21:29Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE5MDQyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMjowMlrOHoe4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMjowMlrOHoe4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex, hash).Scan(rf).RecordNotFound() {\n          \n          \n            \n            \tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex).Scan(rf).RecordNotFound() {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512210958", "createdAt": "2020-10-26T19:22:02Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -141,19 +174,37 @@ func (br *BlockRepository) RetrieveGenesis() (*types.Block, *rTypes.Error) {\n \n // RetrieveLatest retrieves the latest block\n func (br *BlockRepository) RetrieveLatest() (*types.Block, *rTypes.Error) {\n+\tstartingIndex, err := br.getRecordFilesStartingIndex()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \trf := &recordFile{}\n-\tif br.dbClient.Raw(selectLatestWithIndex).Scan(rf).RecordNotFound() {\n+\tif br.dbClient.Raw(selectLatestWithIndex, *startingIndex).Scan(rf).RecordNotFound() {\n+\t\treturn nil, errors.Errors[errors.BlockNotFound]\n+\t}\n+\tif rf.FileHash == \"\" {\n \t\treturn nil, errors.Errors[errors.BlockNotFound]\n \t}\n \n \treturn br.constructBlockResponse(rf, rf.BlockIndex), nil\n }\n \n func (br *BlockRepository) findRecordFileByHash(hash string) (*recordFile, *rTypes.Error) {\n+\tstartingIndex, err := br.getRecordFilesStartingIndex()\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\n \trf := &recordFile{}\n-\tif br.dbClient.Raw(selectByHashWithIndex, hash, hash).Scan(rf).RecordNotFound() {\n+\tif br.dbClient.Raw(selectByHashWithIndex, hash, *startingIndex, hash).Scan(rf).RecordNotFound() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTI1NDg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozOTo1MlrOHoffHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozOTo1MlrOHoffHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMDk1Nw==", "bodyText": "nit:\nthe MIN consensus_timestamp of account_balance_file table", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512220957", "createdAt": "2020-10-26T19:39:52Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTI2ODAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0Mjo1NlrOHofmqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo0Mjo1NlrOHofmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMjg5MQ==", "bodyText": "get the min consensus_timestamp of account balances from account_balance_file should be more performant:\nselect consensus_timestamp\nfrom account_balance_file\norder by consensus_timestamp asc\nlimit 1;\n\nalso, balance file at consensus timestamp T should reflect balance changes for all transactions <= T, so the where condition should be:\nWHERE consensus_end <= min consensus timestamp from account_balance_file table", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512222891", "createdAt": "2020-10-26T19:42:56Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).\n+\t// This way, record files before that timestamp are considered non-existent,\n+\t// and the first record_file (block) will be considered equal or bigger\n+\t// than the consensus_timestamp of the first account_balance\n+\tselectSkippedRecordFilesCount string = `SELECT COUNT(*)\n+                                            FROM record_file\n+                                            WHERE consensus_end < (SELECT MIN(consensus_timestamp) FROM account_balance)`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTI5NTE3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MDo0NlrOHof3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MDo0NlrOHof3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNzE2OQ==", "bodyText": "the query may take quite some time if the table is big. should change to sth like select the latest consensus_timestamp from account_balance_file table", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512227169", "createdAt": "2020-10-26T19:50:46Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -43,26 +44,46 @@ const (\n                                            rcd_index.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  consensus_end = (SELECT MAX(consensus_end)\n-                                                                    FROM   record_file)) AS rd,\n-                                           (SELECT COUNT(*) - 1 AS block_index\n-                                            FROM   record_file) AS rcd_index`\n+                                            WHERE  file_hash = (SELECT status_value FROM t_application_status\n+                                                                WHERE status_code = 'LAST_PROCESSED_RECORD_HASH')) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $1 AS block_index\n+                                            FROM   record_file\n+                                            WHERE  load_end IS NOT NULL) AS rcd_index`\n \n-\t// selectByHashWithIndex - Selects the row with a given file_hash and adds additional info about the position of that row using count.\n-\t//The information about the position is used as Block Index\n+\t// selectByHashWithIndex - Selects the row which is loaded by a given file_hash\n+\t// and adds additional info about the position of that row using count.\n+\t// The information about the position is used as Block Index\n \tselectByHashWithIndex string = `SELECT rd.file_hash,\n                                            rd.consensus_start,\n                                            rd.consensus_end,\n                                            rd.prev_hash,\n                                            rcd.block_index\n                                     FROM   (SELECT *\n                                             FROM   record_file\n-                                            WHERE  file_hash = ?) AS rd,\n-                                           (SELECT Count(*) - 1 AS block_index\n+                                            WHERE  file_hash = $1 AND load_end IS NOT NULL) AS rd,\n+                                           (SELECT COUNT(*) - 1 - $2 AS block_index\n                                             FROM   record_file\n                                             WHERE  consensus_end <= (SELECT consensus_end\n                                                                      FROM   record_file\n-                                                                     WHERE  file_hash = ?)) AS rcd`\n+                                                                     WHERE  file_hash = $3)) AS rcd`\n+\t// selectSkippedRecordFilesCount - Selects the count of rows from the record_file table,\n+\t// where each one's consensus_end is before the MIN consensus_end of address_book table (the first one added).\n+\t// This way, record files before that timestamp are considered non-existent,\n+\t// and the first record_file (block) will be considered equal or bigger\n+\t// than the consensus_timestamp of the first account_balance\n+\tselectSkippedRecordFilesCount string = `SELECT COUNT(*)\n+                                            FROM record_file\n+                                            WHERE consensus_end < (SELECT MIN(consensus_timestamp) FROM account_balance)`\n+\n+\t// selectAccountBalancesCount - Selects the count of rows from account_balance table\n+\tselectAccountBalancesCount string = `SELECT COUNT(*) FROM account_balance`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTMxOTAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1NzoyNFrOHogFeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyNToxMVrOHpH99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA==", "bodyText": "this does not seem to work. The sql query returns the count, func Count count the number of rows in the result.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512230778", "createdAt": "2020-10-26T19:57:24Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)\n+\tif accountBalancesCount == 0 {\n+\t\treturn nil, errors.Errors[errors.NodeIsStarting]\n+\t}\n+\n+\tvar startingIndex int64\n+\tbr.dbClient.Raw(selectSkippedRecordFilesCount).Count(&startingIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MjgxNw==", "bodyText": "It actually works. Example from docs ->\ndb.Table(\"deleted_users\").Select(\"count(distinct(name))\").Count(&count)\n// SELECT count(distinct(name)) FROM deleted_users\n\nThis gorm version's Scan method supports only slice or struct as destination.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512442817", "createdAt": "2020-10-27T06:28:03Z", "author": {"login": "failfmi"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)\n+\tif accountBalancesCount == 0 {\n+\t\treturn nil, errors.Errors[errors.NodeIsStarting]\n+\t}\n+\n+\tvar startingIndex int64\n+\tbr.dbClient.Raw(selectSkippedRecordFilesCount).Count(&startingIndex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA=="}, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NDIxMw==", "bodyText": "thanks for the clarification!", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512884213", "createdAt": "2020-10-27T17:25:11Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)\n+\tif accountBalancesCount == 0 {\n+\t\treturn nil, errors.Errors[errors.NodeIsStarting]\n+\t}\n+\n+\tvar startingIndex int64\n+\tbr.dbClient.Raw(selectSkippedRecordFilesCount).Count(&startingIndex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMDc3OA=="}, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTMzMDQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDowMDo0MlrOHogMlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDowMDo0MlrOHogMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMjU5Ng==", "bodyText": "the query is very inefficient as mentioned above", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512232596", "createdAt": "2020-10-26T20:00:42Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {\n+\tif br.recordFileStartingIndex != nil {\n+\t\treturn br.recordFileStartingIndex, nil\n+\t}\n+\n+\tvar accountBalancesCount int64\n+\n+\tbr.dbClient.Raw(selectAccountBalancesCount).Count(&accountBalancesCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTM2MjMzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxMDoyNVrOHoggUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxMDoyNVrOHoggUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNzY1MQ==", "bodyText": "better to return a int64 instead of *int64", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1195#discussion_r512237651", "createdAt": "2020-10-26T20:10:25Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/persistence/block/block.go", "diffHunk": "@@ -176,3 +227,27 @@ func (br *BlockRepository) constructBlockResponse(rf *recordFile, blockIndex int\n \t\tConsensusEndNanos:   rf.ConsensusEnd,\n \t}\n }\n+\n+func (br *BlockRepository) getRecordFilesStartingIndex() (*int64, *rTypes.Error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a68fdac1ef6002740273884902d3cac26f3e63"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}