{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODg4NDM0", "number": 598, "title": "Updated integrationDbOps.js with more detailed setup logic", "bodyText": "Detailed description:\nREST API tests have been hard to decipher, modify and are sometimes not consistent.\nThese changes provide some scaffolding and changes to improve the integration tests on the REST side\n-Updated files to camelCase\n\nUpdated integrationDbOps files to contain spec setup steps\n\nWhich issue(s) this PR fixes:\nPartially addresses #412 with inspiration from #529\nSpecial notes for your reviewer:\nNext PR will update spec files and make current tests use integrationDbOps setup methods\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-13T17:12:20Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/598", "merged": true, "mergeCommit": {"oid": "69d21ae283e2cd15fa2120fbf6e8dd4a94474319"}, "closed": true, "closedAt": "2020-03-13T20:15:19Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNTcIKgH2gAyMzg3ODg4NDM0OmFkZTAzZDEyMDc4NDk0MmZlOWE2ZDk5N2Y5NTgzNTViMmI2YTc1M2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNT_KWgFqTM3NDQ4MTk3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ade03d120784942fe9a6d997f958355b2b6a753a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ade03d120784942fe9a6d997f958355b2b6a753a", "committedDate": "2020-03-13T17:06:01Z", "message": "Updated integrationDbOps.js with more detailed setup logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NDgxOTcz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/598#pullrequestreview-374481973", "createdAt": "2020-03-13T17:23:34Z", "commit": {"oid": "ade03d120784942fe9a6d997f958355b2b6a753a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMzozNFrOF2MPHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0MzozOVrOF2M5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NzkwMw==", "bodyText": "earlier, many tests were setting up record file due to foreign key restriction in t_transactions.fk_rec_file_id. Now the restriction is gone.\nIf that's the only reason for it to be here, consider removing it in future.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/598#discussion_r392367903", "createdAt": "2020-03-13T17:23:34Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -326,8 +326,19 @@ fs.readdirSync(specPath).forEach(function(file) {\n   let specText = fs.readFileSync(p, 'utf8');\n   var spec = JSON.parse(specText);\n   test(`DB integration test - ${file} - ${spec.url}`, async () => {\n+    // await specSetupSteps(spec);\n     let response = await request(server).get(spec.url);\n     expect(response.status).toEqual(spec.responseStatus);\n     expect(JSON.parse(response.text)).toEqual(spec.responseJson);\n   });\n });\n+\n+const specSetupSteps = async function(spec) {\n+  let recordFile = spec.fileName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ade03d120784942fe9a6d997f958355b2b6a753a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3ODYzMw==", "bodyText": "if there's an existing test case where we add duplicate accounts for testing some corner case, this is okay.\nIf we don't have a reason to accept duplicates here, we should fail explicitly.\nokay in followup.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/598#discussion_r392378633", "createdAt": "2020-03-13T17:43:39Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/integrationDbOps.js", "diffHunk": "@@ -189,11 +268,29 @@ const toAccount = function(str) {\n };\n \n const addAccount = async function(account) {\n+  account = Object.assign({entity_shard: 0, entity_realm: 0, exp_time_ns: null}, account);\n+\n+  let e = accountEntityIds[account.entity_num];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ade03d120784942fe9a6d997f958355b2b6a753a"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3328, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}