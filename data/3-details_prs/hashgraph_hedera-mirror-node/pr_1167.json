{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTYxNzIy", "number": 1167, "title": "Update acceptance tests with v0.21.0 token rest checks", "bodyText": "Detailed description:\nWith v0.21.0 HTS Acceptance Tests should be updated to cover new apis and use more robust checks\n\nAdd Response POJOs to model JSON response\nAdd token verification methods in TokenFeature class\nAdd additional test cases to hts.feature to cover dissociate, wipe, burn, update and delete\nRemove string search in JSON response and replace with POJO property checks\n\nWhich issue(s) this PR fixes:\nFixes #1152\nSpecial notes for your reviewer:\nWould like to port this into v0.21.0 branch also\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-10-22T01:59:50Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167", "merged": true, "mergeCommit": {"oid": "d79ba49fb7dcd64e6621ae5587f5dbc8c556fd79"}, "closed": true, "closedAt": "2020-10-24T02:15:48Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU4Ec6AH2gAyNTA3OTYxNzIyOjk3YTkwMDk2MDU4MTJjNWNkYmJjODQ3NmI3ZGIxOTBkMjY4OTY2ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVhYwQgFqTUxNjE1MDA2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97a9009605812c5cdbbc8476b7db190d268966f5", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/97a9009605812c5cdbbc8476b7db190d268966f5", "committedDate": "2020-10-22T01:55:16Z", "message": "Update acceptance tests with v0.21.0 token rest checks\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f97578d6f84ddb609c3654bd383969fa652bc723", "committedDate": "2020-10-22T19:08:59Z", "message": "Update sdk version\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NzU2NTcy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#pullrequestreview-515756572", "createdAt": "2020-10-23T15:07:54Z", "commit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowNzo1NFrOHnR8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1Mjo0NlrOHnTxwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDQzMA==", "bodyText": "This is more secure than string formatting, but now it's way less readable and maintainable. Why not this?\n@Bean\nWebClient webClient() {\n  return WebClient.create(\"http://host:8080/api/v1\");\n}\n...\nwebClient.get().uri(\"/accounts/{accountId}?order=desc&limit={limit}\", \"0.0.2\", 5);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510950430", "createdAt": "2020-10-23T15:07:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -119,24 +132,76 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n     }\n \n     public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+        log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n+        // build <host>/api/v1/accounts/<accountId>?order=desc&limit=50\n+        URI uri = UriComponentsBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NTE0OQ==", "bodyText": "You should configure ObjectMapper to use snake_case so you don't have to manually map all of these.\nnew ObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510955149", "createdAt": "2020-10-23T15:15:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n+\n+@Data\n+public class MirrorTokenResponse {\n+    @JsonProperty(\"admin_key\")\n+    private MirrorKey adminKey;\n+\n+    @JsonProperty(\"auto_renew_account\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1NzE4MA==", "bodyText": "Do we really need to model all of the fields? Since we can't share domain classes with JavaScript, we should minimize our coupling with its domain model and only model the minimal set of objects and fields that we actually need. That way we don't pay as much of a maintenance cost when we change either side.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510957180", "createdAt": "2020-10-23T15:18:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import com.hedera.mirror.test.e2e.acceptance.props.MirrorKey;\n+\n+@Data\n+public class MirrorTokenResponse {\n+    @JsonProperty(\"admin_key\")\n+    private MirrorKey adminKey;\n+\n+    @JsonProperty(\"auto_renew_account\")\n+    private String autoRenewAccount;\n+\n+    @JsonProperty(\"auto_renew_period\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDU0Ng==", "bodyText": "Where is this used?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r510980546", "createdAt": "2020-10-23T15:52:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TokenFeature.java", "diffHunk": "@@ -199,102 +216,126 @@ public void transferTokens(TokenId tokenId, int amount, AccountId sender, Accoun\n         assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    @Then(\"the mirror node REST API should return status {int}\")\n-    @Retryable(value = {AssertionError.class})\n-    public void verifyMirrorAPIResponses(int status) throws Throwable {\n-        verifyAccounts(status);\n-        verifyBalances(status);\n-        verifyTransactions(status);\n-    }\n-\n-    private void verifyAccounts(int status) {\n-        ClientResponse response = mirrorClient\n-                .verifyAccountRestEndpoint(tokenClient.getSdkClient().getOperatorId().toString(), 5);\n+    @Given(\"I update the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void updateToken() throws HederaStatusException {\n \n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(tokenClient.getSdkClient().getOperatorId().toString());\n-        stringsToVerify.add(tokenId.toString());\n+        networkTransactionResponse = tokenClient\n+                .updateToken(tokenId, tokenClient.getSdkClient().getExpandedOperatorAccountId());\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Given(\"I burn {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void burnToken(int amount) throws HederaStatusException {\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+        networkTransactionResponse = tokenClient.burn(tokenId, amount);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    private void verifyBalances(int status) {\n-        String sender = tokenClient.getSdkClient().getOperatorId().toString();\n-        ClientResponse response = mirrorClient.verifyAccountBalanceRestEndpoint(sender);\n+    @Given(\"I mint {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void mintToken(int amount) throws HederaStatusException {\n \n-        // verify balances response contains sender, recipient and new token id\n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(sender);\n+        networkTransactionResponse = tokenClient.mint(tokenId, amount);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Given(\"I wipe {int} from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void wipeToken(int amount) throws HederaStatusException {\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+        networkTransactionResponse = tokenClient.wipe(tokenId, amount, recipient);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n     }\n \n-    private void verifyTransactions(int status) {\n-        TransactionId transactionId = networkTransactionResponse.getTransactionId();\n+    @Given(\"I dissociate the account from the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void dissociateNewAccountFromToken() throws HederaStatusException {\n+        networkTransactionResponse = tokenClient.disssociate(recipient, tokenId);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        String transactionIdString = transactionId.accountId.toString() + \"-\" + transactionId.validStart\n-                .getEpochSecond() + \"-\" + transactionId.validStart.getNano();\n-        ClientResponse response = mirrorClient.verifyTransactionRestEntity(transactionIdString);\n+    @Given(\"I delete the token\")\n+    @Retryable(value = {StatusRuntimeException.class}, exceptionExpression = \"#{message.contains('UNAVAILABLE') || \" +\n+            \"message.contains('RESOURCE_EXHAUSTED')}\")\n+    public void deleteToken() throws HederaStatusException {\n \n-        List<String> stringsToVerify = new ArrayList<>();\n-        stringsToVerify.add(transactionId.validStart.getEpochSecond() + \".\" + transactionId.validStart.getNano());\n-        stringsToVerify.add(transactionIdString);\n+        networkTransactionResponse = tokenClient\n+                .delete(tokenClient.getSdkClient().getExpandedOperatorAccountId(), tokenId);\n+        assertNotNull(networkTransactionResponse.getTransactionId());\n+        assertNotNull(networkTransactionResponse.getReceipt());\n+    }\n \n-        stringsToVerify.add(tokenId.toString());\n+    @Then(\"the mirror node REST API should return status {int}\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorAPIResponses(int status) {\n+        verifyTransactions(status);\n+    }\n \n-        assertNotNull(response, \"httpStatus null\");\n-        assertNotNull(response.statusCode(), \"httpStatus null\");\n-        assertEquals(status, response.statusCode().value(), \"mirrorResponse matched\");\n+    @Then(\"the mirror node REST API should return status {int} for token fund flow\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorTokenFundFlow(int status) {\n+        verifyBalances(status);\n+        verifyTransactions(status);\n+        verifyToken(status);\n+    }\n \n-        // verify transaction json contains strings, to be replaced with domain mapping comparisons\n-        String json = response.bodyToMono(JsonNode.class).block().toString();\n-        stringsToVerify.stream().forEach(term -> {\n-            assertThat(json).contains(term);\n-        });\n+    @Then(\"the mirror node REST API should return status {int} for token update\")\n+    @Retryable(value = {AssertionError.class, AssertionFailedError.class}, backoff = @Backoff(delay = 5000))\n+    public void verifyMirrorTokenUpdateFlow(int status) {\n+        verifyTokenUpdate(status);\n     }\n \n-    @Then(\"the mirror node {string}} REST API should return status {int}\")\n-    public void verifyMirrorTransactionAPIResponse(String endpoint, int status) throws Throwable {\n-        if (endpoint.equalsIgnoreCase(\"accounts\")) {\n-            verifyAccounts(status);\n-        } else if (endpoint.equalsIgnoreCase(\"balances\")) {\n+    @Then(\"the mirror node {string} REST API should return status {int}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f97578d6f84ddb609c3654bd383969fa652bc723"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/021e3387f49088b4a69ed79c2d349c1f98e1e466", "committedDate": "2020-10-23T21:28:44Z", "message": "Added WebClient bean and removed unneeded domain properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM4MDgz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#pullrequestreview-516038083", "createdAt": "2020-10-23T22:13:24Z", "commit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjoxMzoyNVrOHnf0OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjoxOTowOFrOHnf6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzc4NQ==", "bodyText": "imports should be below license. Otherwise next time we run the license plugin it will add another license to the top.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177785", "createdAt": "2020-10-23T22:13:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTokenAccountBalance.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.hedera.mirror.test.e2e.acceptance.props;\n+\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3NzgzOQ==", "bodyText": "Same", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177839", "createdAt": "2020-10-23T22:13:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/props/MirrorTransfer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.hedera.mirror.test.e2e.acceptance.props;\n+\n+import lombok.Data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3Nzg2OA==", "bodyText": "Same", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511177868", "createdAt": "2020-10-23T22:13:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/response/MirrorTokenBalancesResponse.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.hedera.mirror.test.e2e.acceptance.response;\n+\n+import java.util.List;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODMzMw==", "bodyText": "Would prefer these all named as get or retrieve as they don't actual verify the response. The verification is done in the feature. Also don't like naming it after the transport mechanism. Recommend getAccount().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511178333", "createdAt": "2020-10-23T22:15:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -118,46 +126,53 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+    public ClientResponse verifyAccountRestEndpoint(String accountId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODc1Mg==", "bodyText": "Unused", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511178752", "createdAt": "2020-10-23T22:17:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -51,6 +45,20 @@\n     private final MirrorClient mirrorClient;\n     private final AcceptanceTestProperties acceptanceProps;\n \n+    @Autowired\n+    private WebClient webClient;\n+\n+    // REST ENDPOINTS\n+    private static final String API_V1 = \"/api/v1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3OTMyMQ==", "bodyText": "I'm not a fan of exposing HTTP specific objects to the caller. Would prefer returning the domain object and throwing an exception if any error. But current approach is fine for now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#discussion_r511179321", "createdAt": "2020-10-23T22:19:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/MirrorNodeClient.java", "diffHunk": "@@ -118,46 +126,53 @@ public SubscriptionResponse subscribeToTopicAndRetrieveMessages(MirrorConsensusT\n         return subscriptionResponse;\n     }\n \n-    public ClientResponse verifyAccountRestEndpoint(String accountId, int lastCount) {\n-        log.debug(\"Verify account {} is returned by Mirror Node\", accountId);\n-        String endpoint = String.format(\"/api/v1/accounts/%s?order=desc&limit=%d\", accountId, lastCount);\n-        return verifyRestEndpoint(endpoint);\n+    public ClientResponse verifyAccountRestEndpoint(String accountId) {\n+        log.debug(\"Verify account '{}' is returned by Mirror Node\", accountId);\n+        // build /accounts?account.id=<accountId>\n+        return verifyRestEndpoint(\"/{endpoint}?{key}={accountId}\", ACCOUNTS_ENDPOINT, ACCOUNTS_ID_QUERY, accountId);\n+    }\n+\n+    public ClientResponse verifyAccountTransactionsRestEndpoint(String accountId, int lastCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "021e3387f49088b4a69ed79c2d349c1f98e1e466"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d725e44c001381b00a6ca823909ba7727104c80", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3d725e44c001381b00a6ca823909ba7727104c80", "committedDate": "2020-10-24T01:57:16Z", "message": "Renamed some functions and fixed some strings\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MTUwMDY1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1167#pullrequestreview-516150065", "createdAt": "2020-10-24T02:03:33Z", "commit": {"oid": "3d725e44c001381b00a6ca823909ba7727104c80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3629, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}