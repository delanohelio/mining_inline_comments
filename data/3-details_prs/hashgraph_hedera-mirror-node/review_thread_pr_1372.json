{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTgyMjEw", "number": 1372, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzowMToyN1rOFG8T_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0OToxNFrOFHTgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODIzOTM0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzowMToyN1rOIIMPhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMzowMToyN1rOIIMPhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ2MDEwMw==", "bodyText": "Markdown files were auto formatted by Intellij. I only touched a few lines of this file to update list of components to include monitor. I do think the changes it did are an improvement as it wrapped lines consistently and reduced extra indentation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r545460103", "createdAt": "2020-12-17T23:01:27Z", "author": {"login": "steven-sheehy"}, "path": "README.md", "diffHunk": "@@ -5,109 +5,143 @@\n \n # Hedera Mirror Node\n \n-Hedera Mirror Node exposes Hedera Hashgraph transactions, transaction records, account balances,\n-and events generated by the Hedera mainnet (or testnet, if so configured) via a REST & gRPC API.\n+Hedera Mirror Node exposes Hedera Hashgraph transactions, transaction records, account balances, and events generated by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0430cb68c3a263090ad832bd422fd60ef3b650db"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTYyNDk0OnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1MzozNFrOIIqxuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMjoxMVrOIIxnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MDM3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n          \n          \n            \n            both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n          \n          \n            \n            allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n          \n          \n            \n            it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n          \n          \n            \n            seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n          \n          \n            \n            The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n          \n          \n            \n            both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative,\n          \n          \n            \n            allowing one to express a mixture of transactions and their expected publishing rates, and the tool will do its best to make\n          \n          \n            \n            it so. By default, the monitor is already set up with a basic scenario that creates a topic, submits a message every 10\n          \n          \n            \n            seconds to it, and verifies the messages is received via the mirror node's gRPC and REST APIs.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r545960377", "createdAt": "2020-12-18T16:53:34Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MjM2MA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546072360", "createdAt": "2020-12-18T20:22:11Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MDM3Nw=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTYyOTMwOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1NDo0NlrOIIq0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyMjozMVrOIItxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MTAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n          \n          \n            \n            seconds to it and verifies the messages are received via the mirror node's gRPC and REST APIs.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r545961033", "createdAt": "2020-12-18T16:54:46Z", "author": {"login": "xin-hedera"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwOTQ5NA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546009494", "createdAt": "2020-12-18T18:22:31Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MTAzMw=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTYzNjAxOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1NjoxNlrOIIq4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyMjoyOFrOIItxbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MTk5NQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n          \n          \n            \n            First, make sure the monitor is configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r545961995", "createdAt": "2020-12-18T16:56:16Z", "author": {"login": "xin-hedera"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwOTQ1Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546009453", "createdAt": "2020-12-18T18:22:28Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MTk5NQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTY0MzYwOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1ODoxMVrOIIq8kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyMjoyNFrOIItxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MzE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n          \n          \n            \n            The monitor can be configured to publish multiple transaction types concurrently. It does this by specifying a list of", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r545963155", "createdAt": "2020-12-18T16:58:11Z", "author": {"login": "xin-hedera"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwOTQyNQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546009425", "createdAt": "2020-12-18T18:22:24Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MzE1NQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTk1MTExOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyMjo1NFrOIItyZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMjowN1rOIIxnBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwOTcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n          \n          \n            \n            and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n          \n          \n            \n            `MAINNET`, `PREVIEWNET` or `TESTNET`. If you are not using one of these public environments, the network can be set to `OTHER`,\n          \n          \n            \n            and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546009701", "createdAt": "2020-12-18T18:22:54Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MjMyNQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546072325", "createdAt": "2020-12-18T20:22:07Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwOTcwMQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTk4NDE4OnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODozMjoyOFrOIIuGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNjowMVrOIIxuBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNDc0NQ==", "bodyText": "Something about that last sentence is throwing me off, but I can't figure out a great rephrase.  Maybe\nConnections will be established in a round-robin fashion among available nodes?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546014745", "createdAt": "2020-12-18T18:32:28Z", "author": {"login": "ijungmann"}, "path": "docs/configuration.md", "diffHunk": "@@ -166,13 +171,71 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.retriever.unthrottled.pollingFrequency` | 20ms             | How often to poll for messages when unthrottled. Can accept duration units like `50ms`, `10s` etc |\n | `hedera.mirror.grpc.shard`                                  | 0                | The default shard number that the GRPC component participates in                               |\n \n+## Monitor\n+\n+Similar to the [Importer](#importer), the monitor uses [Spring Boot](https://spring.io/projects/spring-boot) properties\n+to configure the application.\n+\n+The following table lists the available properties along with their default values. Unless you need to set a non-default\n+value, it is recommended to only populate overridden properties in the custom `application.yml`.\n+\n+See the monitor [documentation](monitor.md) for more general information about configuring and using the monitor.\n+\n+Name                                                        | Default    | Description\n+------------------------------------------------------------| -----------| ---------------------------------------\n+`hedera.mirror.monitor.mirrorNode.grpc.host`                | \"\"         | The hostname of the mirror node's gRPC API\n+`hedera.mirror.monitor.mirrorNode.grpc.port`                | 5600       | The port of the mirror node's gRPC API\n+`hedera.mirror.monitor.mirrorNode.rest.host`                | \"\"         | The hostname of the mirror node's REST API\n+`hedera.mirror.monitor.mirrorNode.rest.port`                | 443        | The port of the mirror node's REST API\n+`hedera.mirror.monitor.network`                             | TESTNET    | Which network to connect to. Automatically populates the main node & mirror node endpoints. Can be `MAINNET`, `PREVIEWNET`, `TESTNET` or `OTHER`\n+`hedera.mirror.monitor.nodes[].accountId`                   | \"\"         | The main node's account ID\n+`hedera.mirror.monitor.nodes[].host`                        | \"\"         | The main node's hostname\n+`hedera.mirror.monitor.nodes[].port`                        | 50211      | The main node's port\n+`hedera.mirror.monitor.operator.accountId`                  | \"\"         | Operator account ID used to pay for transactions\n+`hedera.mirror.monitor.operator.privateKey`                 | \"\"         | Operator ED25519 private key used to sign transactions in hex encoded DER format\n+`hedera.mirror.monitor.publish.connections`                 | 5          | How many total connections to open to the main nodes. Connections will be round robin among available nodes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3NDExOQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546074119", "createdAt": "2020-12-18T20:26:01Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -166,13 +171,71 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.retriever.unthrottled.pollingFrequency` | 20ms             | How often to poll for messages when unthrottled. Can accept duration units like `50ms`, `10s` etc |\n | `hedera.mirror.grpc.shard`                                  | 0                | The default shard number that the GRPC component participates in                               |\n \n+## Monitor\n+\n+Similar to the [Importer](#importer), the monitor uses [Spring Boot](https://spring.io/projects/spring-boot) properties\n+to configure the application.\n+\n+The following table lists the available properties along with their default values. Unless you need to set a non-default\n+value, it is recommended to only populate overridden properties in the custom `application.yml`.\n+\n+See the monitor [documentation](monitor.md) for more general information about configuring and using the monitor.\n+\n+Name                                                        | Default    | Description\n+------------------------------------------------------------| -----------| ---------------------------------------\n+`hedera.mirror.monitor.mirrorNode.grpc.host`                | \"\"         | The hostname of the mirror node's gRPC API\n+`hedera.mirror.monitor.mirrorNode.grpc.port`                | 5600       | The port of the mirror node's gRPC API\n+`hedera.mirror.monitor.mirrorNode.rest.host`                | \"\"         | The hostname of the mirror node's REST API\n+`hedera.mirror.monitor.mirrorNode.rest.port`                | 443        | The port of the mirror node's REST API\n+`hedera.mirror.monitor.network`                             | TESTNET    | Which network to connect to. Automatically populates the main node & mirror node endpoints. Can be `MAINNET`, `PREVIEWNET`, `TESTNET` or `OTHER`\n+`hedera.mirror.monitor.nodes[].accountId`                   | \"\"         | The main node's account ID\n+`hedera.mirror.monitor.nodes[].host`                        | \"\"         | The main node's hostname\n+`hedera.mirror.monitor.nodes[].port`                        | 50211      | The main node's port\n+`hedera.mirror.monitor.operator.accountId`                  | \"\"         | Operator account ID used to pay for transactions\n+`hedera.mirror.monitor.operator.privateKey`                 | \"\"         | Operator ED25519 private key used to sign transactions in hex encoded DER format\n+`hedera.mirror.monitor.publish.connections`                 | 5          | How many total connections to open to the main nodes. Connections will be round robin among available nodes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNDc0NQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTk5MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODozNTowOVrOIIuLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMjo0MlrOIIxoQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNjAzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The monitor can automatically create account, token or topic entities on application startup using a special expression\n          \n          \n            \n            The monitor can automatically create account, token, and topic entities on application startup using a special expression", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546016034", "createdAt": "2020-12-18T18:35:09Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MjY0Mg==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546072642", "createdAt": "2020-12-18T20:22:42Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNjAzNA=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTk5NTEyOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODozNTo1NVrOIIuMwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMzowNFrOIIxo0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNjQ0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a\n          \n          \n            \n            The syntax takes the form of `${type.name}` where `type` is one of `account`, `token`, or `topic`, and `name` is a", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546016449", "createdAt": "2020-12-18T18:35:55Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3Mjc4NA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546072784", "createdAt": "2020-12-18T20:23:04Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNjQ0OQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjAwMjYxOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODozODowNlrOIIuRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyMzo0NVrOIIxqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNzYxMw==", "bodyText": "It can do both at the same time if desired, right?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546017613", "createdAt": "2020-12-18T18:38:06Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a\n+descriptive label. Based upon the entity type, it will create the appropriate entity on the network with default values.\n+The name label allows the same entity to be referenced in multiple places but only created once.\n+\n+The following example uses the expression syntax to create the sender and recipient accounts as well as a token. These\n+same entities are created once and reused in both the token associate and the token transfer transaction.\n+\n+```yaml\n+scenarios:\n+  - name: HTS associate\n+    limit: 1\n+    properties:\n+      accountId: ${account.them}\n+      tokenId: ${token.foobar}\n+    tps: 1\n+    type: TOKEN_ASSOCIATE\n+  - name: HTS transfer\n+    properties:\n+      recipientAccountId: ${account.them}\n+      senderAccountId: ${account.me}\n+      tokenId: ${token.foobar}\n+      transferType: BOTH\n+    tps: 1\n+    type: CRYPTO_TRANSFER\n+```\n+\n+### Subscribe\n+\n+The monitor can optionally subscribe to either the mirror node gRPC or REST APIs. Each subscription type can have one or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzEwNg==", "bodyText": "Updated to make that clear", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546073106", "createdAt": "2020-12-18T20:23:45Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a\n+descriptive label. Based upon the entity type, it will create the appropriate entity on the network with default values.\n+The name label allows the same entity to be referenced in multiple places but only created once.\n+\n+The following example uses the expression syntax to create the sender and recipient accounts as well as a token. These\n+same entities are created once and reused in both the token associate and the token transfer transaction.\n+\n+```yaml\n+scenarios:\n+  - name: HTS associate\n+    limit: 1\n+    properties:\n+      accountId: ${account.them}\n+      tokenId: ${token.foobar}\n+    tps: 1\n+    type: TOKEN_ASSOCIATE\n+  - name: HTS transfer\n+    properties:\n+      recipientAccountId: ${account.them}\n+      senderAccountId: ${account.me}\n+      tokenId: ${token.foobar}\n+      transferType: BOTH\n+    tps: 1\n+    type: CRYPTO_TRANSFER\n+```\n+\n+### Subscribe\n+\n+The monitor can optionally subscribe to either the mirror node gRPC or REST APIs. Each subscription type can have one or", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxNzYxMw=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjAwNjIwOnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODozOTowNlrOIIuTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNDoxMFrOIIxqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxODE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            more scenarios. For the REST API, it can verify a percentage of individual transactions have made it to the mirror node\n          \n          \n            \n            more scenarios. For the REST API, it can verify that a percentage of individual transactions have made it to the mirror node", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546018156", "createdAt": "2020-12-18T18:39:06Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a\n+descriptive label. Based upon the entity type, it will create the appropriate entity on the network with default values.\n+The name label allows the same entity to be referenced in multiple places but only created once.\n+\n+The following example uses the expression syntax to create the sender and recipient accounts as well as a token. These\n+same entities are created once and reused in both the token associate and the token transfer transaction.\n+\n+```yaml\n+scenarios:\n+  - name: HTS associate\n+    limit: 1\n+    properties:\n+      accountId: ${account.them}\n+      tokenId: ${token.foobar}\n+    tps: 1\n+    type: TOKEN_ASSOCIATE\n+  - name: HTS transfer\n+    properties:\n+      recipientAccountId: ${account.them}\n+      senderAccountId: ${account.me}\n+      tokenId: ${token.foobar}\n+      transferType: BOTH\n+    tps: 1\n+    type: CRYPTO_TRANSFER\n+```\n+\n+### Subscribe\n+\n+The monitor can optionally subscribe to either the mirror node gRPC or REST APIs. Each subscription type can have one or\n+more scenarios. For the REST API, it can verify a percentage of individual transactions have made it to the mirror node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzI5MA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546073290", "createdAt": "2020-12-18T20:24:10Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n+and `topicId` are available as properties. Only `topicId` doesn't have a default and will be required. Here's a YAML\n+excerpt that specifies some of those properties:\n+\n+```yaml\n+publish:\n+  scenarios:\n+    - name: HCS Pinger\n+      properties:\n+        maxTransactionFee: 1000000\n+        message: Hello world!\n+        retry: true\n+        topicId: 0.0.1000\n+      record: 1.0\n+      tps: 0.1\n+      type: CONSENSUS_SUBMIT_MESSAGE\n+```\n+\n+### Expression Syntax\n+\n+The monitor can automatically create account, token or topic entities on application startup using a special expression\n+syntax. This is useful to avoid boilerplate configuration and manual entity creation steps that vary per environment.\n+The syntax can currently only be used in `hedera.mirror.monitor.publish.scenarios.properties`\n+and `hedera.mirror.monitor.subscribe.grpc.topicId`.\n+\n+The syntax takes the form of `${type.name}` where `type` is one of `account`, `token` or `topic` and `name` is a\n+descriptive label. Based upon the entity type, it will create the appropriate entity on the network with default values.\n+The name label allows the same entity to be referenced in multiple places but only created once.\n+\n+The following example uses the expression syntax to create the sender and recipient accounts as well as a token. These\n+same entities are created once and reused in both the token associate and the token transfer transaction.\n+\n+```yaml\n+scenarios:\n+  - name: HTS associate\n+    limit: 1\n+    properties:\n+      accountId: ${account.them}\n+      tokenId: ${token.foobar}\n+    tps: 1\n+    type: TOKEN_ASSOCIATE\n+  - name: HTS transfer\n+    properties:\n+      recipientAccountId: ${account.them}\n+      senderAccountId: ${account.me}\n+      tokenId: ${token.foobar}\n+      transferType: BOTH\n+    tps: 1\n+    type: CRYPTO_TRANSFER\n+```\n+\n+### Subscribe\n+\n+The monitor can optionally subscribe to either the mirror node gRPC or REST APIs. Each subscription type can have one or\n+more scenarios. For the REST API, it can verify a percentage of individual transactions have made it to the mirror node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxODE1Ng=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjAxNjE0OnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0MjoxM1rOIIuZVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNTowOVrOIIxsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxOTY3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The four components of the Hedera Mirror Node (Importer, Monitor, REST API and gRPC API) all support loading\n          \n          \n            \n            The four components of the Hedera Mirror Node (Importer, Monitor, REST API, and gRPC API) all support loading", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546019670", "createdAt": "2020-12-18T18:42:13Z", "author": {"login": "ijungmann"}, "path": "docs/configuration.md", "diffHunk": "@@ -1,17 +1,18 @@\n # Configuration\n \n-The three components of the Hedera Mirror Node, Importer, REST API and gRPC API, all support loading configuration\n-from an `application.yml` file or via the environment.\n+The four components of the Hedera Mirror Node (Importer, Monitor, REST API and gRPC API) all support loading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzY5NQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546073695", "createdAt": "2020-12-18T20:25:09Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -1,17 +1,18 @@\n # Configuration\n \n-The three components of the Hedera Mirror Node, Importer, REST API and gRPC API, all support loading configuration\n-from an `application.yml` file or via the environment.\n+The four components of the Hedera Mirror Node (Importer, Monitor, REST API and gRPC API) all support loading", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxOTY3MA=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjAyNDMwOnYy", "diffSide": "RIGHT", "path": "docs/installation.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0NTowM1rOIIueQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNjozOVrOIIxvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMDkyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To run the GRPC API, first populate the configuration at one of the supported\n          \n          \n            \n            To run the monitor, first populate the configuration at one of the supported", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546020929", "createdAt": "2020-12-18T18:45:03Z", "author": {"login": "ijungmann"}, "path": "docs/installation.md", "diffHunk": "@@ -36,30 +34,39 @@ psql postgres -f hedera-mirror-importer/src/main/resources/db/scripts/init.sql\n ### Importer\n \n To run the Importer, first populate the configuration at one of the supported\n-[configuration](configuration.md) paths, then run:\n+[configuration](configuration.md#importer) paths, then run:\n \n ```console\n java -jar hedera-mirror-importer/target/hedera-mirror-importer-*.jar\n ```\n \n-Additionally, there is a Systemd unit file located in the `hedera-mirror-importer/scripts/` directory that can be used to\n-manage the process. See the [operations](operations.md) documentation for more information.\n+Additionally, there is a Systemd unit file located in the `hedera-mirror-importer/scripts/` directory that can be used\n+to manage the process. See the [operations](operations.md) documentation for more information.\n \n ### GRPC API\n \n To run the GRPC API, first populate the configuration at one of the supported\n-[configuration](configuration.md) paths, then run:\n+[configuration](configuration.md#grpc-api) paths, then run:\n \n ```console\n java -jar hedera-mirror-grpc/target/hedera-mirror-grpc-*.jar\n ```\n \n-Additionally, there is a Systemd unit file located in the `hedera-mirror-grpc/scripts/` directory that can be used to\n-manage the process. See the [operations](operations.md) documentation for more information.\n+### Monitor\n+\n+To run the GRPC API, first populate the configuration at one of the supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3NDQ2Mg==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546074462", "createdAt": "2020-12-18T20:26:39Z", "author": {"login": "steven-sheehy"}, "path": "docs/installation.md", "diffHunk": "@@ -36,30 +34,39 @@ psql postgres -f hedera-mirror-importer/src/main/resources/db/scripts/init.sql\n ### Importer\n \n To run the Importer, first populate the configuration at one of the supported\n-[configuration](configuration.md) paths, then run:\n+[configuration](configuration.md#importer) paths, then run:\n \n ```console\n java -jar hedera-mirror-importer/target/hedera-mirror-importer-*.jar\n ```\n \n-Additionally, there is a Systemd unit file located in the `hedera-mirror-importer/scripts/` directory that can be used to\n-manage the process. See the [operations](operations.md) documentation for more information.\n+Additionally, there is a Systemd unit file located in the `hedera-mirror-importer/scripts/` directory that can be used\n+to manage the process. See the [operations](operations.md) documentation for more information.\n \n ### GRPC API\n \n To run the GRPC API, first populate the configuration at one of the supported\n-[configuration](configuration.md) paths, then run:\n+[configuration](configuration.md#grpc-api) paths, then run:\n \n ```console\n java -jar hedera-mirror-grpc/target/hedera-mirror-grpc-*.jar\n ```\n \n-Additionally, there is a Systemd unit file located in the `hedera-mirror-grpc/scripts/` directory that can be used to\n-manage the process. See the [operations](operations.md) documentation for more information.\n+### Monitor\n+\n+To run the GRPC API, first populate the configuration at one of the supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMDkyOQ=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjAzOTM4OnYy", "diffSide": "RIGHT", "path": "docs/monitor.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo0OToxNFrOIIum0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDoyNDo0MVrOIIxroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMzEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`\n          \n          \n            \n            class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`,", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546023123", "createdAt": "2020-12-18T18:49:14Z", "author": {"login": "ijungmann"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA3MzUwNA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1372#discussion_r546073504", "createdAt": "2020-12-18T20:24:41Z", "author": {"login": "steven-sheehy"}, "path": "docs/monitor.md", "diffHunk": "@@ -0,0 +1,155 @@\n+# Monitor\n+\n+The monitor verifies end-to-end functionality of the Hedera network and generates metrics from the results. It supports\n+both publishing transactions to HAPI and subscribing to the mirror node API. Configuration is flexible and declarative\n+allowing one to express a mixture of transactions, their expected rate of publish and the tool will do its best to make\n+it so. By default, the monitor is already setup with a basic scenario that creates a topic, submits a message every 10\n+seconds to it and verifies the messages is received via the mirror node's gRPC and REST APIs.\n+\n+## Configuration\n+\n+This section covers the higher level properties to consider before diving into the specific publish and subscribe\n+properties in the next sections. For a full list of configuration options see the [config](/docs/configuration.md)\n+documentation.\n+\n+First, make sure you are configured to talk to the correct Hedera network by setting `hedera.mirror.monitor.network` to\n+`MAINNET`, `PREVIEWNET` or `TESTNET`. If it's not one of these public environments, the network can be set to `OTHER`\n+and `hedera.mirror.monitor.nodes` and `hedera.mirror.monitor.mirrorNode` properties should be filled in.\n+\n+Additionally, the operator information in `hedera.mirror.monitor.operator` is required and needs to be populated with a\n+valid payer account ID and its private key. Ensure this account has the necessary funds to publish transactions at the\n+rate you desire. The following is an example with a custom network configured:\n+\n+```yaml\n+hedera:\n+  mirror:\n+    monitor:\n+      mirrorNode:\n+        grpc:\n+          host: 34.69.90.179\n+          port: 5600\n+        rest:\n+          host: 35.239.255.55\n+          port: 80\n+      network: OTHER\n+      nodes:\n+        - accountId: 0.0.3\n+          host: 34.94.106.61\n+        - accountId: 0.0.4\n+          host: 35.237.119.55\n+        - accountId: 0.0.5\n+          host: 35.245.27.193\n+        - accountId: 0.0.6\n+          host: 34.83.112.116\n+      operator:\n+        accountId: 0.0.1234\n+        privateKey: 104...\n+```\n+\n+### Publish\n+\n+The monitor can be configured to publish multiple transaction types concurrently. It does this be specifying a list of\n+scenarios that should actively publish. A unique scenario name is used as a label for metrics so that each scenario can\n+be monitored separately. Each scenario has a target transactions per second (TPS) and uses a client side rate limiter to\n+achieve the desired rate. Additionally, a percentage of receipts or records can be requested for each transaction to\n+verify transactions are reaching consensus.\n+\n+The monitor can be used to publish at very high TPS, with a single monitor being able to max out the current capability\n+of the Hedera network. To publish at higher rates, the `hedera.mirror.monitor.publish.connections` property will need to\n+be increased. For example, to achieve 10K TPS we set the number of connections to 1000. Please adjust accordingly per\n+your needs. Each connection will open a persistent gRPC channel to one of configured Hedera nodes. The transaction\n+publisher will round-robin this list of connections to determine which node to send to, ensuring the load is distributed\n+evenly across all nodes.\n+\n+The `type` property specifies which transaction type to publish. It also affects which `properties` need to be\n+specified, with different transaction types requiring different properties to be set. See the\n+[TransactionType](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionType.java)\n+enum for a list of possible values for `type`. The properties can be seen as fields on the various\n+[TransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier) classes that\n+the `TransactionType` enum references. Most of these properties have a default and don't need to be explicitly\n+specified, but some are empty and may need to be populated.\n+\n+For example, if you want to publish a topic message, you would open the `TransactionType` class,\n+find `CONSENSUS_SUBMIT_MESSAGE`, then open the\n+[ConsensusSubmitMessageTransactionSupplier](/hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java)\n+class that it references. From there, you can see that fields `maxTransactionFee`, `message`, `retry`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyMzEyMw=="}, "originalCommit": {"oid": "84c15387f35d5f5f71b7c05d2b053f7ae4b2aef8"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1363, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}