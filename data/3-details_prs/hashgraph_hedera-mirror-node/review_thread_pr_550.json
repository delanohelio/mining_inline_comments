{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzk1MzU2", "number": 550, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyMjowM1rODiBAvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozODo1MVrODiX0wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk0NzQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyMjowM1rOFtE98w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyMjowM1rOFtE98w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMTYzNQ==", "bodyText": "Can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382811635", "createdAt": "2020-02-21T21:22:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk2NjM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyOTo1MlrOFtFJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToyOTo1MlrOFtFJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNDY4MA==", "bodyText": "Should use constructor injection for both fields (e.g. make both private final)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382814680", "createdAt": "2020-02-21T21:29:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk3MjI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozMjoyNlrOFtFNbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozMjoyNlrOFtFNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU5Nw==", "bodyText": "This will get run synchronously in the main thread. Also InitializingBean is right after bean created so might race with flyway migration beans. Better to do async event listening:\n@Async\n@EventListener(ApplicationReadyEvent.class)\npublic void load() {\n...\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382815597", "createdAt": "2020-02-21T21:32:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());\n+        entityIdRepository.findAll(pageable); // Seed the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk3OTM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozNTozN1rOFtFR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozNDo0OVrOFtpfPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjczMA==", "bodyText": "Why are we creating a separate entity for the same collection? Is this really just a minimal view of Entities? If so, you can just use interface projection or class-based DTOs for this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382816730", "createdAt": "2020-02-21T21:35:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@Table(name = \"t_entities\")\n+@NoArgsConstructor\n+public class EntityId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwOTk4MQ==", "bodyText": "refactored for DTO-based projection", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383409981", "createdAt": "2020-02-24T17:34:49Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/EntityId.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@Table(name = \"t_entities\")\n+@NoArgsConstructor\n+public class EntityId {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjczMA=="}, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk4Mzk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozNzoxMlrOFtFUaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozNzoxMlrOFtFUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzM4Nw==", "bodyText": "Once you switch to interface projection, just move these methods into existing EntityRepository. You can't use class-level cacheconfig though, of course.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817387", "createdAt": "2020-02-21T21:37:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk4ODAwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozODo1M1rOFtFWzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozMDo1NFrOFtpXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng==", "bodyText": "These would be more reusable as static helper methods on EntityId: EntityId.of(accountID)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382817996", "createdAt": "2020-02-21T21:38:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -1017,6 +1033,30 @@ private static Entities getEntity(long shardNum, long realmNum, long entityNum,\n         });\n     }\n \n+    public static EntityId getEntityId(AccountID accountID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNDYxMA==", "bodyText": "you want the EntityRepository and EntityTypeRepository injected into the EntityId DTO?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383404610", "createdAt": "2020-02-24T17:24:37Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -1017,6 +1033,30 @@ private static Entities getEntity(long shardNum, long realmNum, long entityNum,\n         });\n     }\n \n+    public static EntityId getEntityId(AccountID accountID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng=="}, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwODAzMg==", "bodyText": "No, I was thinking you'd just construct the EntityId object then use that to search the repo in recordfilelogger. Reason is we need a way to normalize this concept of an EntityId that varies per type (account/file/contract/topic). But we can also do this as part of refactor.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383408032", "createdAt": "2020-02-24T17:30:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -1017,6 +1033,30 @@ private static Entities getEntity(long shardNum, long realmNum, long entityNum,\n         });\n     }\n \n+    public static EntityId getEntityId(AccountID accountID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzk5Ng=="}, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk5MDQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozOTo0NlrOFtFYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozOTo0NlrOFtFYLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODM1MA==", "bodyText": "would suggest adding logging before and after findAll. Would tell us how many startup seconds it costs us to warm the cache in prod.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382818350", "createdAt": "2020-02-21T21:39:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/EntityIdCacheLoader.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package com.hedera.mirror.importer.parser.record;\n+\n+import com.hedera.mirror.importer.parser.CommonParserProperties;\n+import com.hedera.mirror.importer.repository.EntityIdRepository;\n+\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import javax.annotation.Resource;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class EntityIdCacheLoader implements InitializingBean {\n+    @Resource\n+    EntityIdRepository entityIdRepository;\n+    private final CommonParserProperties commonParserProperties;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        var pageable = PageRequest.of(0, commonParserProperties.getEntityIdCacheSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDAyNjkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NDo1NlrOFtFuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NDo1NlrOFtFuLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk4MA==", "bodyText": "Are you sure this is updating the cache? With Spring AOP you generally can't call proxied methods from inside a proxied method. It doesn't exit the class and come back in so it doesn't hit the cache decorator. You can increase spring cache logging to confirm.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r382823980", "createdAt": "2020-02-21T21:54:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityIdRepository.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+@CacheConfig(cacheNames = \"entity_ids\", cacheManager = CacheConfiguration.BIG_LRU_CACHE)\n+public interface EntityIdRepository extends PagingAndSortingRepository<EntityId, Long> {\n+\n+    @Cacheable(key = \"{#p0, #p1, #p2}\", sync = true)\n+    @Query(\"from EntityId where entityShard = ?1 and entityRealm = ?2 and entityNum = ?3\")\n+    Optional<EntityId> findByNativeIds(long entityShard, long entityRealm, long entityNum);\n+\n+    @Cacheable(key = \"{#p0.entityShard, #p0.entityRealm, #p0.entityNum}\")\n+    @Override\n+    Page<EntityId> findAll(Pageable pageable);\n+\n+    default EntityId findOrCreateBy(long entityShard, long entityRealm, long entityNum, int entityTypeId) {\n+        var found = findByNativeIds(entityShard, entityRealm, entityNum);\n+        if (!found.isPresent()) {\n+            return save(new EntityId(entityShard, entityRealm, entityNum, entityTypeId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052681ad654f484b6600a33cc6320092c3040f72"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY4NTEzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozODo1MVrOFtlLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTowMToxNVrOFtsJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw==", "bodyText": "q: should this be a configurable property in commonParserProperties?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383339353", "createdAt": "2020-02-24T15:38:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjc3NQ==", "bodyText": "This is used only for caching entity types currently. I don't think it's worth adding a config param", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383406775", "createdAt": "2020-02-24T17:28:36Z", "author": {"login": "mike-burrage-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw=="}, "originalCommit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MzQ4OA==", "bodyText": "Okay", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/550#discussion_r383453488", "createdAt": "2020-02-24T19:01:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CacheConfiguration.java", "diffHunk": "@@ -50,4 +58,19 @@ CacheManager cacheManager30m() {\n         caffeineCacheManager.setCacheSpecification(\"maximumSize=10000,expireAfterWrite=30m\");\n         return caffeineCacheManager;\n     }\n+\n+    // Cache for small sets of DB \"constants\" that don't change and are looked up once.\n+    @Bean(TINY_LRU_CACHE)\n+    CacheManager tinyLruCache() {\n+        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\n+        caffeineCacheManager.setCacheSpecification(\"maximumSize=100\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzOTM1Mw=="}, "originalCommit": {"oid": "354bf627d28122070fd9aea9fce8639dd93efc96"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1165, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}