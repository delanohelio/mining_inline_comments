{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTI0Mzcw", "number": 1339, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTo1NDowMVrOFDs17g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozMzoxOFrOFDtw_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDI0NzUwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTo1NDowMVrOIDe-0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0NzoxM1rOIDiqZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyNDI0Mw==", "bodyText": "It shouldn't be greater than 1. So @Min(0) @Max(1) would be better.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540524243", "createdAt": "2020-12-10T21:54:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDU1MQ==", "bodyText": "Makes sense, I hesitated when I noticed the documentation said doubles aren't supported, but it's working as expected and has been changed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540584551", "createdAt": "2020-12-10T23:47:13Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyNDI0Mw=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMxMjk0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoxMDo0NFrOIDfk4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0Nzo0NVrOIDirTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMzk4Ng==", "bodyText": "Percentage is grammatically used for general measurements and not specific values. We should use percent instead.\nBut really what we're doing here is sampling. Generally that's measured in total sample size or sample rate/frequency. Ours is a sample percentage of the transaction rate. So we should either name it sampleRate or samplePercent to make clear it's a percentage.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540533986", "createdAt": "2020-12-10T22:10:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero\n+    private double validationPercentage = 1.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4NDc4Mg==", "bodyText": "Changed to samplePercent", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540584782", "createdAt": "2020-12-10T23:47:45Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriberProperties.java", "diffHunk": "@@ -38,4 +39,7 @@\n     public long getLimit() {\n         return limit > 0 ? limit : Long.MAX_VALUE;\n     }\n+\n+    @PositiveOrZero\n+    private double validationPercentage = 1.0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMzk4Ng=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMxNjIwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoxMTozNVrOIDfmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMzoyMjowMlrOIDnYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNDQ3Mg==", "bodyText": "We should have tests for 100% and for a percent in between with a large enough sample size. See ConfigurableTransactionGeneratorTest for an example.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540534472", "createdAt": "2020-12-10T22:11:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java", "diffHunk": "@@ -170,6 +170,19 @@ void neverRecovers() throws Exception {\n         assertMetric(0L);\n     }\n \n+    @Test\n+    void zeroValidationPercentage() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY2MTgwNA==", "bodyText": "Added tests for 100% and 75%, and reworked all 3 tests to run 1000 responses.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540661804", "createdAt": "2020-12-11T03:22:02Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/test/java/com/hedera/mirror/monitor/subscribe/RestSubscriberTest.java", "diffHunk": "@@ -170,6 +170,19 @@ void neverRecovers() throws Exception {\n         assertMetric(0L);\n     }\n \n+    @Test\n+    void zeroValidationPercentage() throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNDQ3Mg=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMyNjgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoxNDowMlrOIDfssQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzozOTozNFrOIDieSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTk4NQ==", "bodyText": "Avoid the property reflection penalty by getting the percent once outside the flux as a primitive.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540535985", "createdAt": "2020-12-10T22:14:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -72,12 +74,14 @@ public RestSubscriber(MeterRegistry meterRegistry, MonitorProperties monitorProp\n                         r.totalRetries() + 1, r.failure()));\n \n         directProcessor.doOnSubscribe(s -> log.info(\"Connecting to mirror node {}\", url))\n+                .filter(publishResponse -> shouldFilter(publishResponse, properties.getValidationPercentage()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MTQ1MQ==", "bodyText": "I was wondering if that would have any effect.  Moved out.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540581451", "createdAt": "2020-12-10T23:39:34Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -72,12 +74,14 @@ public RestSubscriber(MeterRegistry meterRegistry, MonitorProperties monitorProp\n                         r.totalRetries() + 1, r.failure()));\n \n         directProcessor.doOnSubscribe(s -> log.info(\"Connecting to mirror node {}\", url))\n+                .filter(publishResponse -> shouldFilter(publishResponse, properties.getValidationPercentage()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzNTk4NQ=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM3MTM1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjoyNTo1MlrOIDgFjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzozOTo0NVrOIDielw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MjM1MQ==", "bodyText": "RANDOM.nextDouble() < validationPercentage) is much more readable than Double.compare() in my opinion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540542351", "createdAt": "2020-12-10T22:25:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double\n+                .compare(RANDOM.nextDouble(), validationPercentage) != -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MTUyNw==", "bodyText": "Changed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540581527", "createdAt": "2020-12-10T23:39:45Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double\n+                .compare(RANDOM.nextDouble(), validationPercentage) != -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0MjM1MQ=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM5ODY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozMzoxOFrOIDgUsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MToyM1rOIDig-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NjIyNw==", "bodyText": "Inverting this logic just for an off by default log statement makes it more verbose and harder to understand. What's wrong with .filter(r -> RANDOM.nextDouble() < samplePercent)?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540546227", "createdAt": "2020-12-10T22:33:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjEzOA==", "bodyText": "I was debating adding a metric here to count the number skipped and moved it all out, then decided against it.  I've put it back to the one line filter.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1339#discussion_r540582138", "createdAt": "2020-12-10T23:41:23Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-monitor/src/main/java/com/hedera/mirror/monitor/subscribe/RestSubscriber.java", "diffHunk": "@@ -98,6 +102,16 @@ private boolean shouldRetry(Throwable t) {\n                 ((WebClientResponseException) t).getStatusCode() == HttpStatus.NOT_FOUND;\n     }\n \n+    //Randomly filter out transactions to only validate a set percentage\n+    private boolean shouldFilter(PublishResponse publishResponse, double validationPercentage) {\n+        boolean filterOut = Double", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NjIyNw=="}, "originalCommit": {"oid": "97ce7363b6f882439a034c9c4c7601250c5c992c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1318, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}