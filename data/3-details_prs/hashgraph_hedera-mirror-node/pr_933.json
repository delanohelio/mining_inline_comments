{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjgxMjc5", "number": 933, "title": "Fix BalanceFileParserTest failure", "bodyText": "Detailed description:\nRemove DatabaseUtilities, refactor balance parser so that during tests with multiple test contexts, the correct DataSource is injected and BalanceFileParserTest write to and read from the same database.\nWhich issue(s) this PR fixes:\nFixes #800\nSpecial notes for your reviewer:\nWhen running test, BalanceFileParserTests will fail. The root cause is\n\nduring test, multiple Spring text contexts will be created since some SpringBootTest test classes have different configurations\nFor BalanceFileParserTest, the repositories in the test cases are from one context while DatabaseUtilities.dataSource used by the code being tested is from a different context, which means, data is written to one database while it's read and verified with another database\n\nPerformance: for the new sample account balance csv file with 373713 account balance lines, the time cost is almost identical, 4.21s before v.s. 4.19s after.\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-08-03T16:38:36Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933", "merged": true, "mergeCommit": {"oid": "90864df02a98a7eb4d849251b9ff391026e5ca94"}, "closed": true, "closedAt": "2020-08-06T21:52:08Z", "author": {"login": "xin-hedera"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7UbrkgH2gAyNDYyMjgxMjc5OjRlY2ZhZTcwMWNlMzFiNTg5MTc1ZmZlMTY2ZWRiMWE4YjU3MjkzZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8XCi0AFqTQ2MjkwMTUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ecfae701ce31b589175ffe166edb1a8b57293eb", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4ecfae701ce31b589175ffe166edb1a8b57293eb", "committedDate": "2020-08-03T16:15:57Z", "message": "fix BalanceFileParserTest failures and refactor balance parser\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a4a7ad96f7e64eaf1a3238afbebe6188cf605c", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e0a4a7ad96f7e64eaf1a3238afbebe6188cf605c", "committedDate": "2020-08-03T16:16:13Z", "message": "Merge remote-tracking branch 'origin/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6259579bf18c6089fc4ec0413408359f25e8a234", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6259579bf18c6089fc4ec0413408359f25e8a234", "committedDate": "2020-08-03T16:23:58Z", "message": "catch SQLException from addBatch so executeBatch gets to run if any is added successfuly\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9adb9ed36c4e87430eeaded55bf8f16fb480116b", "committedDate": "2020-08-03T16:32:45Z", "message": "remove DatabaseUtilities\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTgxMTk0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-460181194", "createdAt": "2020-08-03T16:47:37Z", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0NzozN1rOG7A6Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo0NzozN1rOG7A6Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDA4Nw==", "bodyText": "difference from previous implementation:\nneither an empty line nor a malformed account balance line is considered as a failure. The file is verified, so we should try our best to process as much valid info as we can.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464534087", "createdAt": "2020-08-03T16:47:37Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+    }\n+\n+    @Override\n+    public Stream<AccountBalanceItem> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);\n+            final long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(String::trim)\n+                    .filter(Predicate.not(String::isEmpty))\n+                    .map(line -> {\n+                        try {\n+                            return AccountBalanceItem.of(line, consensusTimestamp);\n+                        } catch(IllegalArgumentException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTgyODky", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-460182892", "createdAt": "2020-08-03T16:50:03Z", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1MDowM1rOG7A_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1MDowM1rOG7A_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNTQyOA==", "bodyText": "the logic of header parsing is preserved here: reading MAX_HEADER_ROWS for a a timestamp header and a column header.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464535428", "createdAt": "2020-08-03T16:50:03Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+    }\n+\n+    @Override\n+    public Stream<AccountBalanceItem> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);\n+            final long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(String::trim)\n+                    .filter(Predicate.not(String::isEmpty))\n+                    .map(line -> {\n+                        try {\n+                            return AccountBalanceItem.of(line, consensusTimestamp);\n+                        } catch(IllegalArgumentException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull);\n+        } catch(IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        // The file should contain:\n+        //  - single header row Timestamp:YYYY-MM-DDTHH:MM:SS.NNNNNNNNZ\n+        //  - shardNum,realmNum,accountNum,balance\n+        // followed by rows of data.\n+        // The logic here is a slight bit more lenient. Look at up to MAX_HEADER_ROWS rows ending at any row containing\n+        // \"shard\" and requiring that one of the rows had \"Timestamp: some value\"\n+        String line = null;\n+        try {\n+            long consensusTimestamp = -1;\n+            for (int i = 0; i < MAX_HEADER_ROWS; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTg2MjM3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-460186237", "createdAt": "2020-08-03T16:55:17Z", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1NToxN1rOG7BKEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1NToxN1rOG7BKEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzODEyOA==", "bodyText": "followed IntelliJ idea suggestion, looks like it's unnecessary", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464538128", "createdAt": "2020-08-03T16:55:17Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/BalanceFileParserTest.java", "diffHunk": "@@ -168,9 +166,9 @@ void assertAccountBalances(BalanceFile... balanceFiles) {\n     }\n \n     @lombok.Value\n-    private class BalanceFile {\n-        private final long consensusTimestamp;\n-        private final long count;\n-        private final String filename;\n+    private static class BalanceFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTY2MDMy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-460966032", "createdAt": "2020-08-04T16:14:36Z", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxNDozN1rOG7noAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjozMTo1NVrOG7oS9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2ODM4Ng==", "bodyText": "nit: an\ni.e Reads 'an' account balance ...", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465168386", "createdAt": "2020-08-04T16:14:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReader.java", "diffHunk": "@@ -20,15 +20,19 @@\n  * \u200d\n  */\n \n-import lombok.Value;\n+import java.io.File;\n+import java.util.stream.Stream;\n \n-@Value\n-public final class NumberedLine {\n-    int lineNumber;\n-    String value;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n \n-    @Override\n-    public String toString() {\n-        return lineNumber + \":\" + value;\n-    }\n+public interface BalanceFileReader {\n+    /**\n+     * Reads a account balance file, parses the header to get the consensus timestamp, and returns a stream of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3ODI3Nw==", "bodyText": "q: Why create AccountBalanceItem instead of utilizing the AccountBalance domain entity?\nThey're almost the same except AccountBalance has realm and num broken out and here you are using the newer and preferred EntityId.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465178277", "createdAt": "2020-08-04T16:30:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/AccountBalanceItem.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n+@Value\n+@RequiredArgsConstructor\n+public class AccountBalanceItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3OTM4Mg==", "bodyText": "Should we consider using Repositories here instead of staying with PreparedStatements?\nIt should simplify the file logic.\nAlso if we utilize the AccountBalance entity object it'd be even smoother.\nIt's fine if the change would cause greater complexity and require significant refactoring but if it's centralized to mostly this file we should consider if it's in scope for this PR", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465179382", "createdAt": "2020-08-04T16:31:55Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -21,194 +21,182 @@\n  */\n \n import com.google.common.base.Stopwatch;\n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.InputStreamReader;\n-import java.nio.file.Path;\n+import java.io.File;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n-import java.time.Instant;\n-import java.util.stream.Stream;\n-import lombok.Getter;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.NonNull;\n import lombok.extern.log4j.Log4j2;\n \n+import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.exception.InvalidDatasetException;\n-import com.hedera.mirror.importer.util.DatabaseUtilities;\n-import com.hedera.mirror.importer.util.TimestampConverter;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n \n /**\n  * Parse an account balances file and load it into the database.\n  */\n @Log4j2\n-public final class AccountBalancesFileLoader implements AutoCloseable {\n-    private final Path filePath;\n-    private final Instant filenameTimestamp;\n-    private final AccountBalancesDataset dataset;\n-    private final TimestampConverter timestampConverter = new TimestampConverter();\n-    private final int insertBatchSize;\n-    private final long systemShardNum;\n-    @Getter\n-    private int validRowCount;\n-    private boolean loaded;\n+@Named\n+public final class AccountBalancesFileLoader {\n+    private static final String INSERT_SET_STATEMENT = \"insert into account_balance_sets (consensus_timestamp) \" +\n+            \"values (?) on conflict do nothing;\";\n+    private static final String INSERT_BALANCE_STATEMENT = \"insert into account_balance \" +\n+            \"(consensus_timestamp, account_realm_num, account_num, balance) values (?, ?, ?, ?) on conflict do nothing;\";\n+    private static final String UPDATE_SET_STATEMENT = \"update account_balance_sets set is_complete = ?, \" +\n+            \"processing_end_timestamp = now() at time zone 'utc' where consensus_timestamp = ? and is_complete = false;\";\n+\n+    enum F_INSERT_SET {\n+        ZERO,\n+        CONSENSUS_TIMESTAMP\n+    }\n \n-    /**\n-     * Read an account balances dataset from a file and begin preprocessing the dataset (ie - reading the header).\n-     *\n-     * @throws IllegalArgumentException if the filename doesn't match known/required format (to extract consensus\n-     *                                  timestamp)\n-     * @throws InvalidDatasetException  invalid file header\n-     * @throws FileNotFoundException\n-     */\n-    public AccountBalancesFileLoader(BalanceParserProperties balanceProperties, Path filePath) throws IllegalArgumentException, InvalidDatasetException,\n-            FileNotFoundException {\n-        this.filePath = filePath;\n-        log.info(\"Starting processing account balances file {}\", filePath.getFileName());\n-        systemShardNum = balanceProperties.getMirrorProperties().getShard();\n-        var info = new AccountBalancesFileInfo(filePath);\n-        filenameTimestamp = info.getFilenameTimestamp();\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath\n-                .toFile())), balanceProperties.getFileBufferSize());\n-        dataset = new AccountBalancesDatasetV2(filePath.getFileName().toString(), reader);\n-        insertBatchSize = balanceProperties.getBatchSize();\n+    enum F_INSERT_BALANCE {\n+        ZERO,\n+        CONSENSUS_TIMESTAMP, ACCOUNT_REALM_NUM, ACCOUNT_NUM, BALANCE\n     }\n \n-    /**\n-     * Process a line (CSV account balance line) and insert it into the DB (or skip it if empty).\n-     */\n-    private void processLine(PreparedStatement ps, long consensusTimestamp, NumberedLine line)\n-            throws InvalidDatasetException, SQLException {\n-        String[] cols = line.getValue().split(\",\");\n-        if (4 != cols.length) {\n-            throw new InvalidDatasetException(String.format(\n-                    \"Invalid line in account balances file %s:line(%d):%s\",\n-                    filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    enum F_UPDATE_SET {\n+        ZERO,\n+        IS_COMPLETE, CONSENSUS_TIMESTAMP\n+    }\n \n-        var shardNum = Long.valueOf(cols[0]);\n-        if (shardNum != systemShardNum) {\n-            throw new InvalidDatasetException(String.format(\n-                    \"Invalid shardNum %d in account balances file %s:line(%d):%s\",\n-                    shardNum, filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    private final long systemShardNum;\n+    private final int insertBatchSize;\n \n-        try {\n-            ps.setLong(1, consensusTimestamp);\n-            ps.setShort(2, Short.valueOf(cols[1])); // realm_num\n-            ps.setInt(3, Integer.valueOf(cols[2])); // num\n-            ps.setLong(4, Long.valueOf(cols[3])); // balance (hbar_tinybars);\n-            ps.addBatch();\n-        } catch (NumberFormatException e) {\n-            throw new InvalidDatasetException(String.format(\"Invalid line in account balances file %s:line(%d):%s\",\n-                    filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    private final DataSource dataSource;\n+    private final BalanceFileReader balanceFileReader;\n+\n+    public AccountBalancesFileLoader(BalanceParserProperties balanceParserProperties, DataSource dataSource,\n+            BalanceFileReader balanceFileReader) {\n+        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n+        this.insertBatchSize = balanceParserProperties.getBatchSize();\n+\n+        this.dataSource = dataSource;\n+        this.balanceFileReader = balanceFileReader;\n     }\n \n     /**\n-     * @return true if all lines in the stream were successfully inserted; false, if any errors were seen.\n+     * Process the file and load all the data into the database.\n+     *\n+     * @return true on success (if the file was completely and fully processed).\n      */\n-    private boolean processRecordStream(PreparedStatement ps, long consensusTimestamp,\n-                                        Stream<NumberedLine> stream) {\n-        var state = new Object() {\n-            int recordsInCurrentBatch = 0;\n-            boolean insertSuccess = true;\n-        };\n-        stream.forEachOrdered((line) -> {\n-            try {\n-                if (line.getValue().isEmpty()) {\n-                    return;\n+    public boolean loadAccountBalances(@NonNull File balanceFile) {\n+        log.info(\"Starting processing account balances file {}\", balanceFile.getPath());\n+        final String fileName = balanceFile.getName();\n+        long timestampFromFileName = Utility.getTimestampFromFilename(balanceFile.getName());\n+        int validItemCount = 0;\n+        int insertedItemCount = 0;\n+        boolean complete = false;\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+\n+        try (Connection connection = dataSource.getConnection();\n+             PreparedStatement insertSetStatement = connection.prepareStatement(INSERT_SET_STATEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjI5MTQ2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-460229146", "createdAt": "2020-08-03T17:55:40Z", "commit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1NTo0MFrOG7DQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMToxOTo1MFrOG7x51w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjUwNw==", "bodyText": "Not closing the file. Should use try with resource to automatically close.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464572507", "createdAt": "2020-08-03T17:55:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+    }\n+\n+    @Override\n+    public Stream<AccountBalanceItem> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNzgyNA==", "bodyText": "Would be good to document here the fields within the line.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464617824", "createdAt": "2020-08-03T19:29:16Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/AccountBalanceItem.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n+@Value\n+@RequiredArgsConstructor\n+public class AccountBalanceItem {\n+    private static final Splitter SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n+    private final EntityId accountId;\n+    private final long balance;\n+    private final long consensusTimestamp;\n+\n+    @Override\n+    public String toString() {\n+        Instant instant = Instant.ofEpochSecond(consensusTimestamp / 1_000_000_000L,\n+                consensusTimestamp % 1_000_000_000L);\n+        return String.format(\"%d.%d.%d=%d,%s\", accountId.getShardNum(), accountId.getRealmNum(),\n+                accountId.getEntityNum(), balance, instant);\n+    }\n+\n+    /**\n+     * Creates an AccountBalanceItem object from a line in the balances csv file and its consensus timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxODU0MQ==", "bodyText": "Would be better to reuse accountId.entityIdToString()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464618541", "createdAt": "2020-08-03T19:30:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/AccountBalanceItem.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n+@Value\n+@RequiredArgsConstructor\n+public class AccountBalanceItem {\n+    private static final Splitter SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n+    private final EntityId accountId;\n+    private final long balance;\n+    private final long consensusTimestamp;\n+\n+    @Override\n+    public String toString() {\n+        Instant instant = Instant.ofEpochSecond(consensusTimestamp / 1_000_000_000L,\n+                consensusTimestamp % 1_000_000_000L);\n+        return String.format(\"%d.%d.%d=%d,%s\", accountId.getShardNum(), accountId.getRealmNum(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxODg2Mg==", "bodyText": "Instant.ofEpochSecond(0, consensusTimestamp);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464618862", "createdAt": "2020-08-03T19:31:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/AccountBalanceItem.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n+@Value\n+@RequiredArgsConstructor\n+public class AccountBalanceItem {\n+    private static final Splitter SPLITTER = Splitter.on(',').omitEmptyStrings().trimResults();\n+\n+    private final EntityId accountId;\n+    private final long balance;\n+    private final long consensusTimestamp;\n+\n+    @Override\n+    public String toString() {\n+        Instant instant = Instant.ofEpochSecond(consensusTimestamp / 1_000_000_000L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzMzE0OQ==", "bodyText": "We should just discard lines that are empty/blank instead of throwing NPE and catching it. We could have potentially have a blank line precede a valid timestamp and shouldn't error out.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r464633149", "createdAt": "2020-08-03T20:03:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+    }\n+\n+    @Override\n+    public Stream<AccountBalanceItem> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);\n+            final long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            return reader.lines()\n+                    .map(String::trim)\n+                    .filter(Predicate.not(String::isEmpty))\n+                    .map(line -> {\n+                        try {\n+                            return AccountBalanceItem.of(line, consensusTimestamp);\n+                        } catch(IllegalArgumentException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull);\n+        } catch(IOException ex) {\n+            throw new InvalidDatasetException(\"Error reading account balance file\", ex);\n+        }\n+    }\n+\n+    private long parseHeaderForConsensusTimestamp(BufferedReader reader) {\n+        // The file should contain:\n+        //  - single header row Timestamp:YYYY-MM-DDTHH:MM:SS.NNNNNNNNZ\n+        //  - shardNum,realmNum,accountNum,balance\n+        // followed by rows of data.\n+        // The logic here is a slight bit more lenient. Look at up to MAX_HEADER_ROWS rows ending at any row containing\n+        // \"shard\" and requiring that one of the rows had \"Timestamp: some value\"\n+        String line = null;\n+        try {\n+            long consensusTimestamp = -1;\n+            for (int i = 0; i < MAX_HEADER_ROWS; i++) {\n+                line = Optional.of(reader.readLine()).get().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODk5MA==", "bodyText": "I'm not a fan of mocking lower level library classes like PreparedStatement, Connection and DataSource. It's brittle and causes the tests to break if we were to switch to repositories or pgcopy. Also, since this class directly writes to the database without repositories, this should test that the POJO gets properly mapped to the database. Currently it just verifies counts but not contents of messages so could miss mapping issues. Recommend it stay as an Integration test.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465318990", "createdAt": "2020-08-04T20:43:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoaderTest.java", "diffHunk": "@@ -20,32 +20,196 @@\n  * \u200d\n  */\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n \n-import java.nio.file.Path;\n-import javax.annotation.Resource;\n+import java.io.File;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+import javax.sql.DataSource;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Value;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.stubbing.Answer;\n \n-import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n \n-public class AccountBalancesFileLoaderTest extends IntegrationTest {\n+@ExtendWith(MockitoExtension.class)\n+public class AccountBalancesFileLoaderTest {\n+    private static final String sampleFileName = \"2019-08-30T18_15_00.016002001Z_Balances.csv\";\n \n-    @Value(\"classpath:data/accountBalances/balance0.0.3/2019-08-30T18_15_00.016002001Z_Balances.csv\")\n-    private Path path;\n+    @Mock\n+    private DataSource dataSource;\n \n-    @Resource\n-    private BalanceParserProperties parserProperties;\n+    @Mock\n+    private Connection connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyOTY0MQ==", "bodyText": "I would disagree with that. An entity object by its definition is a business layer domain object. The only place where it makes sense to create duplicates is for DTOs in the controller layer because you expose them to user.\nAs far as parsing from CSV, that could easily be moved to the reader class or it can live in the entity object as it's just a single, small method.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465329641", "createdAt": "2020-08-04T21:04:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/AccountBalanceItem.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n+@Value\n+@RequiredArgsConstructor\n+public class AccountBalanceItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3ODI3Nw=="}, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzNjc5MQ==", "bodyText": "There's way to optimize repositories to be equivalent to preparedstatements, but we can consider that later.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r465336791", "createdAt": "2020-08-04T21:19:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/AccountBalancesFileLoader.java", "diffHunk": "@@ -21,194 +21,182 @@\n  */\n \n import com.google.common.base.Stopwatch;\n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.InputStreamReader;\n-import java.nio.file.Path;\n+import java.io.File;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n-import java.time.Instant;\n-import java.util.stream.Stream;\n-import lombok.Getter;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+import javax.inject.Named;\n+import javax.sql.DataSource;\n+import lombok.NonNull;\n import lombok.extern.log4j.Log4j2;\n \n+import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.exception.InvalidDatasetException;\n-import com.hedera.mirror.importer.util.DatabaseUtilities;\n-import com.hedera.mirror.importer.util.TimestampConverter;\n+import com.hedera.mirror.importer.parser.domain.AccountBalanceItem;\n+import com.hedera.mirror.importer.util.Utility;\n \n /**\n  * Parse an account balances file and load it into the database.\n  */\n @Log4j2\n-public final class AccountBalancesFileLoader implements AutoCloseable {\n-    private final Path filePath;\n-    private final Instant filenameTimestamp;\n-    private final AccountBalancesDataset dataset;\n-    private final TimestampConverter timestampConverter = new TimestampConverter();\n-    private final int insertBatchSize;\n-    private final long systemShardNum;\n-    @Getter\n-    private int validRowCount;\n-    private boolean loaded;\n+@Named\n+public final class AccountBalancesFileLoader {\n+    private static final String INSERT_SET_STATEMENT = \"insert into account_balance_sets (consensus_timestamp) \" +\n+            \"values (?) on conflict do nothing;\";\n+    private static final String INSERT_BALANCE_STATEMENT = \"insert into account_balance \" +\n+            \"(consensus_timestamp, account_realm_num, account_num, balance) values (?, ?, ?, ?) on conflict do nothing;\";\n+    private static final String UPDATE_SET_STATEMENT = \"update account_balance_sets set is_complete = ?, \" +\n+            \"processing_end_timestamp = now() at time zone 'utc' where consensus_timestamp = ? and is_complete = false;\";\n+\n+    enum F_INSERT_SET {\n+        ZERO,\n+        CONSENSUS_TIMESTAMP\n+    }\n \n-    /**\n-     * Read an account balances dataset from a file and begin preprocessing the dataset (ie - reading the header).\n-     *\n-     * @throws IllegalArgumentException if the filename doesn't match known/required format (to extract consensus\n-     *                                  timestamp)\n-     * @throws InvalidDatasetException  invalid file header\n-     * @throws FileNotFoundException\n-     */\n-    public AccountBalancesFileLoader(BalanceParserProperties balanceProperties, Path filePath) throws IllegalArgumentException, InvalidDatasetException,\n-            FileNotFoundException {\n-        this.filePath = filePath;\n-        log.info(\"Starting processing account balances file {}\", filePath.getFileName());\n-        systemShardNum = balanceProperties.getMirrorProperties().getShard();\n-        var info = new AccountBalancesFileInfo(filePath);\n-        filenameTimestamp = info.getFilenameTimestamp();\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(filePath\n-                .toFile())), balanceProperties.getFileBufferSize());\n-        dataset = new AccountBalancesDatasetV2(filePath.getFileName().toString(), reader);\n-        insertBatchSize = balanceProperties.getBatchSize();\n+    enum F_INSERT_BALANCE {\n+        ZERO,\n+        CONSENSUS_TIMESTAMP, ACCOUNT_REALM_NUM, ACCOUNT_NUM, BALANCE\n     }\n \n-    /**\n-     * Process a line (CSV account balance line) and insert it into the DB (or skip it if empty).\n-     */\n-    private void processLine(PreparedStatement ps, long consensusTimestamp, NumberedLine line)\n-            throws InvalidDatasetException, SQLException {\n-        String[] cols = line.getValue().split(\",\");\n-        if (4 != cols.length) {\n-            throw new InvalidDatasetException(String.format(\n-                    \"Invalid line in account balances file %s:line(%d):%s\",\n-                    filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    enum F_UPDATE_SET {\n+        ZERO,\n+        IS_COMPLETE, CONSENSUS_TIMESTAMP\n+    }\n \n-        var shardNum = Long.valueOf(cols[0]);\n-        if (shardNum != systemShardNum) {\n-            throw new InvalidDatasetException(String.format(\n-                    \"Invalid shardNum %d in account balances file %s:line(%d):%s\",\n-                    shardNum, filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    private final long systemShardNum;\n+    private final int insertBatchSize;\n \n-        try {\n-            ps.setLong(1, consensusTimestamp);\n-            ps.setShort(2, Short.valueOf(cols[1])); // realm_num\n-            ps.setInt(3, Integer.valueOf(cols[2])); // num\n-            ps.setLong(4, Long.valueOf(cols[3])); // balance (hbar_tinybars);\n-            ps.addBatch();\n-        } catch (NumberFormatException e) {\n-            throw new InvalidDatasetException(String.format(\"Invalid line in account balances file %s:line(%d):%s\",\n-                    filePath, line.getLineNumber(), line.getValue()));\n-        }\n+    private final DataSource dataSource;\n+    private final BalanceFileReader balanceFileReader;\n+\n+    public AccountBalancesFileLoader(BalanceParserProperties balanceParserProperties, DataSource dataSource,\n+            BalanceFileReader balanceFileReader) {\n+        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n+        this.insertBatchSize = balanceParserProperties.getBatchSize();\n+\n+        this.dataSource = dataSource;\n+        this.balanceFileReader = balanceFileReader;\n     }\n \n     /**\n-     * @return true if all lines in the stream were successfully inserted; false, if any errors were seen.\n+     * Process the file and load all the data into the database.\n+     *\n+     * @return true on success (if the file was completely and fully processed).\n      */\n-    private boolean processRecordStream(PreparedStatement ps, long consensusTimestamp,\n-                                        Stream<NumberedLine> stream) {\n-        var state = new Object() {\n-            int recordsInCurrentBatch = 0;\n-            boolean insertSuccess = true;\n-        };\n-        stream.forEachOrdered((line) -> {\n-            try {\n-                if (line.getValue().isEmpty()) {\n-                    return;\n+    public boolean loadAccountBalances(@NonNull File balanceFile) {\n+        log.info(\"Starting processing account balances file {}\", balanceFile.getPath());\n+        final String fileName = balanceFile.getName();\n+        long timestampFromFileName = Utility.getTimestampFromFilename(balanceFile.getName());\n+        int validItemCount = 0;\n+        int insertedItemCount = 0;\n+        boolean complete = false;\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+\n+        try (Connection connection = dataSource.getConnection();\n+             PreparedStatement insertSetStatement = connection.prepareStatement(INSERT_SET_STATEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3OTM4Mg=="}, "originalCommit": {"oid": "9adb9ed36c4e87430eeaded55bf8f16fb480116b"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae2dc0b510b3647cb94e824f880273381a2fb1b8", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ae2dc0b510b3647cb94e824f880273381a2fb1b8", "committedDate": "2020-08-05T14:45:31Z", "message": "close reader when the stream closes, put stream in try with resource block\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a621abaa7b65da7bdd26165b5219d0c81d39408d", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a621abaa7b65da7bdd26165b5219d0c81d39408d", "committedDate": "2020-08-05T22:24:14Z", "message": "remove AccountBalanceItem, move the parsing into AccountBalanceLineParser and use the domain class AccountBalance\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff303fd8a8477239d1e3916800667dc4f9bc24e", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2ff303fd8a8477239d1e3916800667dc4f9bc24e", "committedDate": "2020-08-05T22:32:17Z", "message": "update description and method name of AccountBalanceLineParserTest\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e76e3ea197779897330db3b9c08af6788bbd711", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5e76e3ea197779897330db3b9c08af6788bbd711", "committedDate": "2020-08-06T20:37:21Z", "message": "optimization for better balance file parsing performance and add performance test\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzI3Mzgy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-462727382", "createdAt": "2020-08-06T17:23:22Z", "commit": {"oid": "2ff303fd8a8477239d1e3916800667dc4f9bc24e"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyMzoyMlrOG89GuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo1NjozOVrOG9D_ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2ODg4OQ==", "bodyText": "nit: You can just chain this, no need to store stream in a variable first.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r466568889", "createdAt": "2020-08-06T17:23:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/balance/BalanceFileReaderImplV2.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Splitter;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.time.Instant;\n+import java.time.format.DateTimeParseException;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AccountBalance;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+public class BalanceFileReaderImplV2 implements BalanceFileReader {\n+    private static final int MAX_HEADER_ROWS = 10;\n+    private static final String TIMESTAMP_HEADER_PREFIX = \"timestamp:\";\n+    private static final String COLUMN_HEADER_PREFIX = \"shard\";\n+\n+    private final int fileBufferSize;\n+    private final long systemShardNum;\n+    private final AccountBalanceLineParser parser;\n+\n+    public BalanceFileReaderImplV2(BalanceParserProperties balanceParserProperties, AccountBalanceLineParser parser) {\n+        this.fileBufferSize = balanceParserProperties.getFileBufferSize();\n+        this.systemShardNum = balanceParserProperties.getMirrorProperties().getShard();\n+        this.parser = parser;\n+    }\n+\n+    @Override\n+    public Stream<AccountBalance> read(File file) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)), fileBufferSize);\n+            final long consensusTimestamp = parseHeaderForConsensusTimestamp(reader);\n+\n+            Stream<AccountBalance> stream = reader.lines()\n+                    .map(String::trim)\n+                    .filter(Predicate.not(String::isEmpty))\n+                    .map(line -> {\n+                        try {\n+                            return parser.parse(line, consensusTimestamp, systemShardNum);\n+                        } catch(InvalidDatasetException ex) {\n+                            log.error(ex);\n+                            return null;\n+                        }\n+                    })\n+                    .filter(Objects::nonNull);\n+            stream.onClose(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff303fd8a8477239d1e3916800667dc4f9bc24e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MTcyMw==", "bodyText": "The warmup file should be processed in the before method so it doesn't count towards the timeout.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#discussion_r466681723", "createdAt": "2020-08-06T20:56:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/balance/BalanceFileParserPerformanceTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.parser.balance;\n+\n+import java.nio.file.Path;\n+import javax.annotation.Resource;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+\n+@Tag(\"performance\")\n+public class BalanceFileParserPerformanceTest extends IntegrationTest {\n+\n+    @TempDir\n+    static Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private BalanceFileParser balanceFileParser;\n+\n+    @Resource\n+    private BalanceParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Timeout(15)\n+    @Test\n+    void parseAndIngestMultipleBalanceCsvFiles() {\n+        parse(\"*.csv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e76e3ea197779897330db3b9c08af6788bbd711"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODc4MTMx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-462878131", "createdAt": "2020-08-06T21:08:22Z", "commit": {"oid": "5e76e3ea197779897330db3b9c08af6788bbd711"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71d2ed7612915700e898fd22d80401ccbfadd33", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c71d2ed7612915700e898fd22d80401ccbfadd33", "committedDate": "2020-08-06T21:16:21Z", "message": "chain the method calls on stream\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODk4ODI2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-462898826", "createdAt": "2020-08-06T21:47:05Z", "commit": {"oid": "c71d2ed7612915700e898fd22d80401ccbfadd33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTAxNTA1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/933#pullrequestreview-462901505", "createdAt": "2020-08-06T21:52:08Z", "commit": {"oid": "c71d2ed7612915700e898fd22d80401ccbfadd33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3024, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}