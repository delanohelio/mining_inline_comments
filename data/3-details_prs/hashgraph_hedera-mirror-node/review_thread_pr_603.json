{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTEyNzQx", "number": 603, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozMTowOVrODoYo7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoyMFrODofXsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjczMzI2OnYy", "diffSide": "LEFT", "path": "hedera-mirror-rest/__tests__/specs/balances-01-no-args.spec.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozMTowOVrOF25oZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MDo0NlrOF2_Ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMTY1NQ==", "bodyText": "3 is missing. Even if hardcoded it should have same output here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393111655", "createdAt": "2020-03-16T15:31:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/balances-01-no-args.spec.json", "diffHunk": "@@ -32,10 +133,6 @@\n         \"account\": \"0.15.4\",\n         \"balance\": 40\n       },\n-      {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NDc4MA==", "bodyText": "3 is the node account in the tests, so it's intentionally left out in the spec.\nAlso not true that it should have output as the balances query consults with the balance table. Without a balance set for an account it won't have a balance entry.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393184780", "createdAt": "2020-03-16T17:13:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/balances-01-no-args.spec.json", "diffHunk": "@@ -32,10 +133,6 @@\n         \"account\": \"0.15.4\",\n         \"balance\": 40\n       },\n-      {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMTY1NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMDc1MQ==", "bodyText": "I agree, it won't have output if there is no balance entry for it. I meant it should have a balance to match previous behavior.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393200751", "createdAt": "2020-03-16T17:40:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/balances-01-no-args.spec.json", "diffHunk": "@@ -32,10 +133,6 @@\n         \"account\": \"0.15.4\",\n         \"balance\": 40\n       },\n-      {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExMTY1NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc1OTIwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/transactions-none.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNzoxMlrOF255AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyMzowNVrOF2-bgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTkwNQ==", "bodyText": "filename should follow the pattern of <api>-<num>-<test>.spec.json where number is incrementing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393115905", "createdAt": "2020-03-16T15:37:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-none.spec.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDI3Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393190273", "createdAt": "2020-03-16T17:23:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-none.spec.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTkwNQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc2MDI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNzoyNFrOF255ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyMzoxM1rOF2-b0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNjA2Nw==", "bodyText": "filename should follow the pattern of <api>-<num>-<test>.spec.json where number is incrementing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393116067", "createdAt": "2020-03-16T15:37:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "diffHunk": "@@ -0,0 +1,74 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDM1Mw==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393190353", "createdAt": "2020-03-16T17:23:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "diffHunk": "@@ -0,0 +1,74 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNjA2Nw=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc3NDczOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0MDo0NVrOF26Crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0MDo0NVrOF26Crw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExODM4Mw==", "bodyText": "How does this work? The only data in the database is a single cryptotransfer per setup and without Mike's branch to itemize it how is this getting broken up into finer grained transfers? edit: I see now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393118383", "createdAt": "2020-03-16T15:40:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-r3.spec.json", "diffHunk": "@@ -0,0 +1,74 @@\n+{\n+  \"description\": \"R3-style transferlist (already itemized by HAPI)\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 1234\n+      },\n+      {\n+        \"entity_num\": 9876\n+      }\n+    ],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [\n+      {\n+        \"consensus_timestamp\": \"1234567890000000000\",\n+        \"payerAccountId\": \"0.0.9876\",\n+        \"recipientAccountId\": \"0.0.1234\",\n+        \"amount\": 128\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/transactions\",\n+  \"responseStatus\": 200,\n+  \"responseJson\": {\n+    \"transactions\": [\n+      {\n+        \"consensus_timestamp\": \"1234567890.000000000\",\n+        \"valid_start_timestamp\": \"1234567889.999999999\",\n+        \"charged_tx_fee\": 7,\n+        \"memo_base64\": null,\n+        \"result\": \"SUCCESS\",\n+        \"name\": \"CRYPTOTRANSFER\",\n+        \"max_fee\": \"33\",\n+        \"valid_duration_seconds\": \"11\",\n+        \"node\": \"0.0.3\",\n+        \"transaction_id\": \"0.0.9876-1234567889-999999999\",\n+        \"transfers\": [\n+          {\n+            \"account\": \"0.0.3\",\n+            \"amount\": 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjc4NDA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/transactions-02-specific-id.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0Mjo1NVrOF26I2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxNzoxOFrOF2-Oag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExOTk2Mg==", "bodyText": "Do we really need balances to be populated to get transactions? As far as I know it shouldn't join against it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393119962", "createdAt": "2020-03-16T15:42:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-02-specific-id.spec.json", "diffHunk": "@@ -1,31 +1,79 @@\n {\n-  \"url\": \"/api/v1/transactions/0.15.10-0000000000-000001049\",\n+  \"description\": \"Transaction api calls for a specific transactions\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 9\n+      },\n+      {\n+        \"entity_num\": 10\n+      }\n+    ],\n+    \"balances\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjkyMg==", "bodyText": "You're  correct, we don't need it. Will remove", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393186922", "createdAt": "2020-03-16T17:17:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/transactions-02-specific-id.spec.json", "diffHunk": "@@ -1,31 +1,79 @@\n {\n-  \"url\": \"/api/v1/transactions/0.15.10-0000000000-000001049\",\n+  \"description\": \"Transaction api calls for a specific transactions\",\n+  \"setup\": {\n+    \"accounts\": [\n+      {\n+        \"entity_num\": 9\n+      },\n+      {\n+        \"entity_num\": 10\n+      }\n+    ],\n+    \"balances\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExOTk2Mg=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgyNDQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MTo1MVrOF26iQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoxNjoxN1rOF3ERRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ==", "bodyText": "I don't think we should have some data added in spec file and some hardcoded. I would prefer all be added via spec so it's clear from spec alone what state of database is and what output should be.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393126465", "createdAt": "2020-03-16T15:51:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODI2OQ==", "bodyText": "I believe Mike's thinking here was to mimic the normal operations where a node and treasury account already exists before a new account is created.\nHence having that outside outside of the actual test logic and as part of the starting state of the database as you would see in production.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393188269", "createdAt": "2020-03-16T17:19:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzAxNg==", "bodyText": "But treasury and nodes are just accounts themselves and shouldn't be treated differently. Also, what if we want to test a scenario where those accounts don't exist? Like your new no transactions test but for balances?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393203016", "createdAt": "2020-03-16T17:44:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMzE4Nw==", "bodyText": "Let me know if you feel strongly. I can add comments to the spec or I can add node & treasury account creation to the spec.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393233187", "createdAt": "2020-03-16T18:33:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0MTk4NQ==", "bodyText": "Gotcha will modify this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393241985", "createdAt": "2020-03-16T18:50:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4NTk1Ng==", "bodyText": "Moved the config into the spec. Makes sense to have state be more clear", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393285956", "createdAt": "2020-03-16T20:16:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNjQ2NQ=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjg0OTkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1Nzo0MlrOF26yfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoyNTo1NlrOF3AzXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMDYyMA==", "bodyText": "This logic seems to be an improper carryover from Mike's branch to test the itemizing logic. We shouldn't be itemizing/de-itemizing anything, just taking the cryptotransfers as is.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393130620", "createdAt": "2020-03-16T15:57:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));\n+  await addAccount(toAccount(NODE_ACCOUNT_ID));\n+  await loadAccounts(testDataJson['accounts']);\n+  await loadBalances(testDataJson['balances']);\n+  await loadCryptoTransfers(testDataJson['cryptotransfers']);\n+  await loadTransactions(testDataJson['transactions']);\n+};\n+\n+const loadAccounts = async function(accounts) {\n+  if (accounts == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < accounts.length; ++i) {\n+    await addAccount(accounts[i]);\n+  }\n+};\n+\n+const loadBalances = async function(balances) {\n+  if (balances == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < balances.length; ++i) {\n+    await setAccountBalance(balances[i]);\n+  }\n+};\n+\n+const loadCryptoTransfers = async function(cryptoTransfers) {\n+  if (cryptoTransfers == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < cryptoTransfers.length; ++i) {\n+    await addCryptoTransaction(cryptoTransfers[i]);\n+  }\n+};\n+\n+const loadTransactions = async function(transactions) {\n+  if (transactions == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < transactions.length; ++i) {\n+    await addTransaction(transactions[i]);\n+  }\n+};\n+\n+const getAccountId = function(account) {\n+  return account.entity_shard + '.' + account.entity_realm + '.' + account.entity_num;\n+};\n+\n+const toAccount = function(str) {\n+  let tokens = str.split('.');\n+  return {\n+    entity_shard: tokens[0],\n+    entity_realm: tokens[1],\n+    entity_num: tokens[2]\n+  };\n+};\n+\n+const addAccount = async function(account) {\n+  account = Object.assign({entity_shard: 0, entity_realm: 0, exp_time_ns: null}, account);\n+\n+  let e = accountEntityIds[account.entity_num];\n+  if (e) {\n+    return e;\n+  }\n+\n+  let res = await sqlConnection.query(\n+    'insert into t_entities (fk_entity_type_id, entity_shard, entity_realm, entity_num, exp_time_ns, deleted) values ($1, $2, $3, $4, $5, $6) returning id;',\n+    [1, account.entity_shard, account.entity_realm, account.entity_num, account.exp_time_ns, false]\n+  );\n+  e = res.rows[0]['id'];\n+  accountEntityIds[getAccountId(account)] = e;\n+\n+  return e;\n+};\n+\n+const setAccountBalance = async function(account) {\n+  account = Object.assign({timestamp: 0, realm_num: 0, id: null, balance: 0}, account);\n+  await sqlConnection.query(\n+    'insert into account_balances (consensus_timestamp, account_realm_num, account_num, balance) values ($1, $2, $3, $4);',\n+    [account.timestamp, account.realm_num, account.id, account.balance]\n+  );\n+};\n+\n+const aggregateTransfers = function(transaction) {\n+  let set = new Set();\n+  transaction.transfers.forEach(transfer => {\n+    let accountId = getAccountId(transfer);\n+    let val = set[accountId];\n+    if (undefined === val) {\n+      set[accountId] = transfer;\n+    } else {\n+      set[accountId].amount += transfer.amount;\n+    }\n+  });\n+  transaction.transfers = Object.values(set);\n+};\n+\n+const addRecordFile = async function(recordFileName) {\n+  let res = await sqlConnection.query('insert into t_record_files (name) values ($1) returning id;', [recordFileName]);\n+\n+  recordFileId = res.rows[0]['id'];\n+  return recordFileId;\n+};\n+\n+const addTransaction = async function(transaction) {\n+  transaction = Object.assign(\n+    {\n+      type: 14,\n+      result: 22,\n+      max_fee: 33,\n+      valid_duration_seconds: 11,\n+      transfers: [],\n+      non_fee_transfers: [],\n+      charged_tx_fee: NODE_FEE + NETWORK_FEE + SERVICE_FEE\n+    },\n+    transaction\n+  );\n+\n+  transaction.consensus_timestamp = math.bignumber(transaction.consensus_timestamp);\n+\n+  await sqlConnection.query(\n+    'insert into t_transactions (consensus_ns, valid_start_ns, fk_rec_file_id, fk_payer_acc_id, fk_node_acc_id, result, type, valid_duration_seconds, max_fee, charged_tx_fee) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);',\n+    [\n+      transaction.consensus_timestamp.toString(),\n+      transaction.consensus_timestamp.minus(1).toString(),\n+      0,\n+      accountEntityIds[transaction.payerAccountId],\n+      accountEntityIds[NODE_ACCOUNT_ID],\n+      transaction.result,\n+      transaction.type,\n+      transaction.valid_duration_seconds,\n+      transaction.max_fee,\n+      transaction.charged_tx_fee\n+    ]\n+  );\n+\n+  if (transaction['aggregate_transfers']) {\n+    aggregateTransfers(transaction);\n+  }\n+\n+  for (let i = 0; i < transaction.transfers.length; ++i) {\n+    let transfer = transaction.transfers[i];\n+    await sqlConnection.query(\n+      'insert into t_cryptotransferlists (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+\n+  for (let i = 0; i < transaction.non_fee_transfers.length; ++i) {\n+    let transfer = transaction.non_fee_transfers[i];\n+    await sqlConnection.query(\n+      'insert into non_fee_transfers (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+};\n+\n+const addCryptoTransaction = async function(cryptoTransfer) {\n+  if (!('senderAccountId' in cryptoTransfer)) {\n+    cryptoTransfer.senderAccountId = cryptoTransfer.payerAccountId;\n+  }\n+  let sender = toAccount(cryptoTransfer.senderAccountId);\n+  let recipient = toAccount(cryptoTransfer.recipientAccountId);\n+  if (!('transfers' in cryptoTransfer)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyOTE0OA==", "bodyText": "Good note. Reverting to previous logic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393229148", "createdAt": "2020-03-16T18:25:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDomainOps.js", "diffHunk": "@@ -0,0 +1,239 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019-2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+'use strict';\n+\n+const utils = require('../utils');\n+const math = require('mathjs');\n+\n+const TREASURY_ACCOUNT_ID = utils.TREASURY_ACCOUNT_ID;\n+const NODE_ACCOUNT_ID = '0.0.3';\n+const NODE_FEE = 1;\n+const NETWORK_FEE = 2;\n+const SERVICE_FEE = 4;\n+\n+let sqlConnection;\n+let accountEntityIds;\n+let recordFileId;\n+\n+const setUp = async function(testDataJson, sqlconn) {\n+  accountEntityIds = {};\n+  sqlConnection = sqlconn;\n+  await addAccount(toAccount(TREASURY_ACCOUNT_ID));\n+  await addAccount(toAccount(NODE_ACCOUNT_ID));\n+  await loadAccounts(testDataJson['accounts']);\n+  await loadBalances(testDataJson['balances']);\n+  await loadCryptoTransfers(testDataJson['cryptotransfers']);\n+  await loadTransactions(testDataJson['transactions']);\n+};\n+\n+const loadAccounts = async function(accounts) {\n+  if (accounts == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < accounts.length; ++i) {\n+    await addAccount(accounts[i]);\n+  }\n+};\n+\n+const loadBalances = async function(balances) {\n+  if (balances == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < balances.length; ++i) {\n+    await setAccountBalance(balances[i]);\n+  }\n+};\n+\n+const loadCryptoTransfers = async function(cryptoTransfers) {\n+  if (cryptoTransfers == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < cryptoTransfers.length; ++i) {\n+    await addCryptoTransaction(cryptoTransfers[i]);\n+  }\n+};\n+\n+const loadTransactions = async function(transactions) {\n+  if (transactions == null) {\n+    return;\n+  }\n+\n+  for (let i = 0; i < transactions.length; ++i) {\n+    await addTransaction(transactions[i]);\n+  }\n+};\n+\n+const getAccountId = function(account) {\n+  return account.entity_shard + '.' + account.entity_realm + '.' + account.entity_num;\n+};\n+\n+const toAccount = function(str) {\n+  let tokens = str.split('.');\n+  return {\n+    entity_shard: tokens[0],\n+    entity_realm: tokens[1],\n+    entity_num: tokens[2]\n+  };\n+};\n+\n+const addAccount = async function(account) {\n+  account = Object.assign({entity_shard: 0, entity_realm: 0, exp_time_ns: null}, account);\n+\n+  let e = accountEntityIds[account.entity_num];\n+  if (e) {\n+    return e;\n+  }\n+\n+  let res = await sqlConnection.query(\n+    'insert into t_entities (fk_entity_type_id, entity_shard, entity_realm, entity_num, exp_time_ns, deleted) values ($1, $2, $3, $4, $5, $6) returning id;',\n+    [1, account.entity_shard, account.entity_realm, account.entity_num, account.exp_time_ns, false]\n+  );\n+  e = res.rows[0]['id'];\n+  accountEntityIds[getAccountId(account)] = e;\n+\n+  return e;\n+};\n+\n+const setAccountBalance = async function(account) {\n+  account = Object.assign({timestamp: 0, realm_num: 0, id: null, balance: 0}, account);\n+  await sqlConnection.query(\n+    'insert into account_balances (consensus_timestamp, account_realm_num, account_num, balance) values ($1, $2, $3, $4);',\n+    [account.timestamp, account.realm_num, account.id, account.balance]\n+  );\n+};\n+\n+const aggregateTransfers = function(transaction) {\n+  let set = new Set();\n+  transaction.transfers.forEach(transfer => {\n+    let accountId = getAccountId(transfer);\n+    let val = set[accountId];\n+    if (undefined === val) {\n+      set[accountId] = transfer;\n+    } else {\n+      set[accountId].amount += transfer.amount;\n+    }\n+  });\n+  transaction.transfers = Object.values(set);\n+};\n+\n+const addRecordFile = async function(recordFileName) {\n+  let res = await sqlConnection.query('insert into t_record_files (name) values ($1) returning id;', [recordFileName]);\n+\n+  recordFileId = res.rows[0]['id'];\n+  return recordFileId;\n+};\n+\n+const addTransaction = async function(transaction) {\n+  transaction = Object.assign(\n+    {\n+      type: 14,\n+      result: 22,\n+      max_fee: 33,\n+      valid_duration_seconds: 11,\n+      transfers: [],\n+      non_fee_transfers: [],\n+      charged_tx_fee: NODE_FEE + NETWORK_FEE + SERVICE_FEE\n+    },\n+    transaction\n+  );\n+\n+  transaction.consensus_timestamp = math.bignumber(transaction.consensus_timestamp);\n+\n+  await sqlConnection.query(\n+    'insert into t_transactions (consensus_ns, valid_start_ns, fk_rec_file_id, fk_payer_acc_id, fk_node_acc_id, result, type, valid_duration_seconds, max_fee, charged_tx_fee) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);',\n+    [\n+      transaction.consensus_timestamp.toString(),\n+      transaction.consensus_timestamp.minus(1).toString(),\n+      0,\n+      accountEntityIds[transaction.payerAccountId],\n+      accountEntityIds[NODE_ACCOUNT_ID],\n+      transaction.result,\n+      transaction.type,\n+      transaction.valid_duration_seconds,\n+      transaction.max_fee,\n+      transaction.charged_tx_fee\n+    ]\n+  );\n+\n+  if (transaction['aggregate_transfers']) {\n+    aggregateTransfers(transaction);\n+  }\n+\n+  for (let i = 0; i < transaction.transfers.length; ++i) {\n+    let transfer = transaction.transfers[i];\n+    await sqlConnection.query(\n+      'insert into t_cryptotransferlists (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+\n+  for (let i = 0; i < transaction.non_fee_transfers.length; ++i) {\n+    let transfer = transaction.non_fee_transfers[i];\n+    await sqlConnection.query(\n+      'insert into non_fee_transfers (consensus_timestamp, amount, realm_num, entity_num) values ($1, $2, $3, $4);',\n+      [transaction.consensus_timestamp.toString(), transfer.amount, transfer.entity_realm, transfer.entity_num]\n+    );\n+  }\n+};\n+\n+const addCryptoTransaction = async function(cryptoTransfer) {\n+  if (!('senderAccountId' in cryptoTransfer)) {\n+    cryptoTransfer.senderAccountId = cryptoTransfer.payerAccountId;\n+  }\n+  let sender = toAccount(cryptoTransfer.senderAccountId);\n+  let recipient = toAccount(cryptoTransfer.recipientAccountId);\n+  if (!('transfers' in cryptoTransfer)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzMDYyMA=="}, "originalCommit": {"oid": "985507d381e6a359f484a8262c9ccee040c61513"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgzNTU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoxMVrOF3EmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo0OToyNFrOF3FQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM2MA==", "bodyText": "9 xfers?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393291360", "createdAt": "2020-03-16T20:28:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjA0Ng==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393302046", "createdAt": "2020-03-16T20:49:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTM2MA=="}, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzgzNjAxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integration.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDoyODoyMFrOF3EmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo0OTozMFrOF3FQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTQ0MA==", "bodyText": "3 xfers?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393291440", "createdAt": "2020-03-16T20:28:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {\n   let sql = transactions.reqToSql({query: {}});\n   let res = await integrationDbOps.runSqlQuery(sql.query, sql.params);\n   expect(res.rowCount).toEqual(9);\n   expect(mapTransactionResults(res.rows).sort()).toEqual([\n     '@1050: account 10 \\u0127-11',\n-    '@1050: account 2 \\u01271',\n     '@1050: account 9 \\u012710',\n+    '@1050: account 98 \\u01271',\n     '@1051: account 10 \\u0127-21',\n-    '@1051: account 2 \\u01271',\n     '@1051: account 9 \\u012720',\n-    '@1052: account 2 \\u01271',\n+    '@1051: account 98 \\u01271',\n     '@1052: account 8 \\u0127-31',\n-    '@1052: account 9 \\u012730'\n+    '@1052: account 9 \\u012730',\n+    '@1052: account 98 \\u01271'\n   ]);\n });\n \n-test('DB integration test - transactions.reqToSql - single valid account - 1 txn 3 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - single valid account - 1 txn 7 xfers', async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjA4Nw==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/603#discussion_r393302087", "createdAt": "2020-03-16T20:49:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integration.test.js", "diffHunk": "@@ -203,35 +156,41 @@ function extractDurationAndMaxFeeFromTransactionResults(rows) {\n   });\n }\n \n+function extractNameAndResultFromTransactionResults(rows) {\n+  return rows.map(function(v) {\n+    return '@' + v['name'] + ',' + v['result'];\n+  });\n+}\n+\n //\n // TESTS\n //\n \n-test('DB integration test - transactions.reqToSql - no query string - 3 txn 9 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - no query string - 3 txn 21 xfers', async () => {\n   let sql = transactions.reqToSql({query: {}});\n   let res = await integrationDbOps.runSqlQuery(sql.query, sql.params);\n   expect(res.rowCount).toEqual(9);\n   expect(mapTransactionResults(res.rows).sort()).toEqual([\n     '@1050: account 10 \\u0127-11',\n-    '@1050: account 2 \\u01271',\n     '@1050: account 9 \\u012710',\n+    '@1050: account 98 \\u01271',\n     '@1051: account 10 \\u0127-21',\n-    '@1051: account 2 \\u01271',\n     '@1051: account 9 \\u012720',\n-    '@1052: account 2 \\u01271',\n+    '@1051: account 98 \\u01271',\n     '@1052: account 8 \\u0127-31',\n-    '@1052: account 9 \\u012730'\n+    '@1052: account 9 \\u012730',\n+    '@1052: account 98 \\u01271'\n   ]);\n });\n \n-test('DB integration test - transactions.reqToSql - single valid account - 1 txn 3 xfer', async () => {\n+test('DB integration test - transactions.reqToSql - single valid account - 1 txn 7 xfers', async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MTQ0MA=="}, "originalCommit": {"oid": "ddccc4853100451745b4d70ec55999c9a363eb0a"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1229, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}