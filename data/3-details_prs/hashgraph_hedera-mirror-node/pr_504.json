{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjA2Njc1", "number": 504, "title": "BDD HCS E2E tests using SDK", "bodyText": "Detailed description:\nWe seek E2E tests that can be run to verify HCS scenarios.\nAs a result we want a framework that can submit transaction through main net, then query mirror node through GRPC endpoint for HCS feature.\nTo achieve this swell as provide a framework that non devs can use to create tests we decided to use Cucumber BDD tests\nWhich issue(s) this PR fixes:\nFixes #497\nSpecial notes for your reviewer:\nSome scenarios are currently not supported by the SDK yet\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-01-22T00:41:31Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504", "merged": true, "mergeCommit": {"oid": "b4da6ec515718c072e9ae9fb72dbcbdc2d23e7fc"}, "closed": true, "closedAt": "2020-02-11T01:59:06Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8qvPkAH2gAyMzY1NjA2Njc1OmMxODIyODZhNzg1NTkzZDA1ZjlhOGYxNjJiZjMwNmM0NjY2ODU2ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDH4iugFqTM1NjM4NDUxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c182286a785593d05f9a8f162bf306c4666856e0", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c182286a785593d05f9a8f162bf306c4666856e0", "committedDate": "2020-01-22T00:38:00Z", "message": "BDD HCS E2E tests using SDK\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d14db9914a28718198c2ae4f8bbebd18c481442", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9d14db9914a28718198c2ae4f8bbebd18c481442", "committedDate": "2020-01-22T21:56:43Z", "message": "Added env.sample file and cleaned up account.feature\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b07aff60145743df8bfc192b191d56e230b05f7", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8b07aff60145743df8bfc192b191d56e230b05f7", "committedDate": "2020-01-22T22:04:35Z", "message": "Renamed package\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8f639344e050b5432eed64c9199fe7b220a1fa", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3e8f639344e050b5432eed64c9199fe7b220a1fa", "committedDate": "2020-01-22T22:34:33Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c190fbfb911a361df1d96e81734c415c01a75c2", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5c190fbfb911a361df1d96e81734c415c01a75c2", "committedDate": "2020-01-22T22:45:27Z", "message": "Cleaned up pom and took newest sdk version\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c", "committedDate": "2020-01-23T13:30:59Z", "message": "Updated cucumber package reference and eligible tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/00e093054a562270226a1756d70a2bf9c8ae2dd7", "committedDate": "2020-01-23T16:42:55Z", "message": "Fixed validLatency always true issue\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDAwMDkw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#pullrequestreview-347400090", "createdAt": "2020-01-23T15:44:31Z", "commit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0NDozMlrOFhC_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1NzoxMVrOFhK0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NjMzMw==", "bodyText": "Add  %throwable{short}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370196333", "createdAt": "2020-01-23T15:44:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\">\n+    <Appenders>\n+        <Console name=\"console\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d %-5p [%-5t] %c{1.} %m%n\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NzA2NA==", "bodyText": "Recommend either changing to com.hedera.mirror.test or adding new entry for that package at info level to cover non-acceptance tests", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370197064", "createdAt": "2020-01-23T15:45:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/log4j2.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\">\n+    <Appenders>\n+        <Console name=\"console\" target=\"SYSTEM_OUT\">\n+            <PatternLayout pattern=\"%d %-5p [%-5t] %c{1.} %m%n\"/>\n+        </Console>\n+    </Appenders>\n+    <Loggers>\n+        <Logger name=\"com.hedera.mirror.test.e2e.acceptance\" level=\"debug\" additivity=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNjQwMg==", "bodyText": "Never use Pair, it's a code smell. pair.getLeft() and pair.getRight() tell you nothing about the data structure. Just create your own wrapper object using Lombok. if you need it. Here I think you can just throw an exception if latch doesn't reach 0 in time instead of returning the boolean", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370206402", "createdAt": "2020-01-23T16:00:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwNzk1Ng==", "bodyText": "Deprecated, use MirrorClient", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370207956", "createdAt": "2020-01-23T16:03:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIwODE1Mg==", "bodyText": "Shouldn't an exception be thrown if any error and fail the test?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370208152", "createdAt": "2020-01-23T16:03:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxMjc1Nw==", "bodyText": "Remove once your remove Pair", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370212757", "createdAt": "2020-01-23T16:11:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,74 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>1.24.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNDA3NQ==", "bodyText": "Duplicate code. Just set latency = 1 if latency <=0 and combine these blocks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370214075", "createdAt": "2020-01-23T16:14:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,\n+                            message.sequenceNumber,\n+                            Hex.toHexString(message.runningHash));\n+                });\n+\n+        boolean validLatency = true;\n+        if (latency > 0) {\n+            if (!messageLatch.await(latency, TimeUnit.SECONDS)) {\n+                log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        } else {\n+            if (!messageLatch.await(1, TimeUnit.MINUTES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNTcxNg==", "bodyText": "Keep track of last message and validate that consensusTimestamp greater than last and sequenceNumber equals last plus 1.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370215716", "createdAt": "2020-01-23T16:16:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNjMyOQ==", "bodyText": "Probably skip printing message and hash as they can be verbose/binary.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370216329", "createdAt": "2020-01-23T16:17:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzE0Mg==", "bodyText": "Remove println everywhere", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370217142", "createdAt": "2020-01-23T16:19:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.Hbar;\n+import com.hedera.hashgraph.sdk.HbarUnit;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.Transaction;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.account.AccountBalanceQuery;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class AccountHelper {\n+\n+    public AccountHelper() {\n+    }\n+\n+    public static AccountId createDummyAccount(Client client) throws HederaStatusException {\n+        // 1. Generate a Ed25519 private, public key pair\n+        Ed25519PrivateKey newKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey newPublicKey = newKey.publicKey;\n+\n+        System.out.println(\"Private key = \" + newKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIxNzUxNA==", "bodyText": "3 lines of empty constructor can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370217514", "createdAt": "2020-01-23T16:19:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/AccountHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.Hbar;\n+import com.hedera.hashgraph.sdk.HbarUnit;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.Transaction;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.account.AccountBalanceQuery;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class AccountHelper {\n+\n+    public AccountHelper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIyMTA2NA==", "bodyText": "This is not in .env.sample. Why are we even testing separate submit keys? Let's just focus on what impacts mirror API", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370221064", "createdAt": "2020-01-23T16:25:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzE1OA==", "bodyText": "This should probably move to trace level", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370233158", "createdAt": "2020-01-23T16:46:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzMzM3NQ==", "bodyText": "Add a success received X messages log at info", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370233375", "createdAt": "2020-01-23T16:46:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        log.debug(\"Subscribe to topic: {} from {}, expecting {} within {} seconds\", topicId, startTime, numMessages,\n+                latency);\n+        CountDownLatch messageLatch = new CountDownLatch(numMessages);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    messageLatch.countDown();\n+                    log.info(\"Received message: {}, consensus timestamp: {}, topic sequence number: {}, topic running\" +\n+                                    \" hash: {}\", message.getMessageString(), message.consensusTimestamp,\n+                            message.sequenceNumber,\n+                            Hex.toHexString(message.runningHash));\n+                });\n+\n+        boolean validLatency = true;\n+        if (latency > 0) {\n+            if (!messageLatch.await(latency, TimeUnit.SECONDS)) {\n+                log.error(\"{} messages were expected within {} seconds. {} messages left\", numMessages, latency,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        } else {\n+            if (!messageLatch.await(1, TimeUnit.MINUTES)) {\n+                log.error(\"{} messages were expected within default of 1 min. {} messages left\", numMessages,\n+                        messageLatch\n+                                .getCount());\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1e0d81f0a8b3ebf01e2e7e03b170653a57a95c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzODQ2MA==", "bodyText": "We should not be hardcoding topic IDs. The test should create a new topic (multiple if needed) every time, then use that for subsequent tests.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370238460", "createdAt": "2020-01-23T16:55:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/hcs.feature", "diffHunk": "@@ -0,0 +1,127 @@\n+@TopicMessages\n+Feature: HCS Coverage Feature\n+\n+    Background: User has clients\n+        Given User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all clients are established\n+\n+#Verified\n+#    Scenario Outline: Validate topic creation scenarios\n+#        Given I provide a memo <memo> and a max transaction fee of <maxFee>\n+#        When I attempt to create a new topic id\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | memo          | maxFee   |\n+#            | \"HCS topic 1\" | 10000000 |\n+#            | \"HCS topic 2\" | 20000000 |\n+\n+#Verified, then unauthorized\n+#    Scenario Outline: Validate Topic Updates\n+#        Given I provide a topic id <topicId>, memo <memo> and an auto renew period of <renewPeriod>\n+#        When I attempt to update an existing topic\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | topicId | memo                    | renewPeriod |\n+#            | 1175    | \"HCS topic 1 - updated\" | 30          |\n+#            | 1176    | \"HCS topic 2 - updated\" | 60          |\n+\n+#    #Verified\n+    Scenario Outline: Validate Topic subscription\n+        Given I provide a topic id <topicId>\n+        When I subscribe to the topic\n+        Then the network should successfully establish a channel to this topic\n+        Examples:\n+            | topicId |\n+            | 1175    |\n+\n+#    #Verified\n+    Scenario Outline: Validate Topic message submission\n+        Given I provide a topic id <topicId>, a number of messages <numMessages>  and a sleep time between them <sleepBetweenMessages>\n+        When I publish random messages\n+        Then the network should confirm valid transaction receipts for this operation\n+        Examples:\n+            | topicId | numMessages | sleepBetweenMessages |\n+            | 1175    | 0           | 500                  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzOTk5Nw==", "bodyText": "MaxPermSize not used in Java 11", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370239997", "createdAt": "2020-01-23T16:58:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,74 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>1.24.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.9</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M4</version>\n+                <configuration>\n+                    <parallel>classes</parallel>\n+                    <threadCount>10</threadCount>\n+                    <argLine>-Xmx1024m -Xms1024m -XX:MaxPermSize=512m</argLine>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MDIxNw==", "bodyText": "Remove version. Let maven choose the appropriate plugin version", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370240217", "createdAt": "2020-01-23T16:58:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,74 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>1.24.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.9</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M4</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MDQzMA==", "bodyText": "Is this necessary?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370240430", "createdAt": "2020-01-23T16:59:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,74 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>1.24.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>4.8.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.9</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>3.0.0-M4</version>\n+                <configuration>\n+                    <parallel>classes</parallel>\n+                    <threadCount>10</threadCount>\n+                    <argLine>-Xmx1024m -Xms1024m -XX:MaxPermSize=512m</argLine>\n+                    <skipTests>${skipTests}</skipTests>\n+                </configuration>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.maven.surefire</groupId>\n+                        <artifactId>surefire-junit47</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0MTYzNg==", "bodyText": "We should probably use recently released 5.0.0 version", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370241636", "createdAt": "2020-01-23T17:01:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,74 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>1.24.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>4.8.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0Mjc1OA==", "bodyText": "I thought SDK loaded properties for you automatically, didn't realize it was manually like this. In that case, let's remove dotenv and use yaml configuration like we do for the other modules to be consistent.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370242758", "createdAt": "2020-01-23T17:03:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NDczNA==", "bodyText": "Don't use JUnit 4.x API. Replace with JUnit 5.x Assertions", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370244734", "createdAt": "2020-01-23T17:07:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0Njg0Nw==", "bodyText": "Sleep time shouldn't be specified in feature. It's not a business requirement to sleep, just a requirement to get your messages back.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370246847", "createdAt": "2020-01-23T17:12:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/hcs.feature", "diffHunk": "@@ -0,0 +1,127 @@\n+@TopicMessages\n+Feature: HCS Coverage Feature\n+\n+    Background: User has clients\n+        Given User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all clients are established\n+\n+#Verified\n+#    Scenario Outline: Validate topic creation scenarios\n+#        Given I provide a memo <memo> and a max transaction fee of <maxFee>\n+#        When I attempt to create a new topic id\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | memo          | maxFee   |\n+#            | \"HCS topic 1\" | 10000000 |\n+#            | \"HCS topic 2\" | 20000000 |\n+\n+#Verified, then unauthorized\n+#    Scenario Outline: Validate Topic Updates\n+#        Given I provide a topic id <topicId>, memo <memo> and an auto renew period of <renewPeriod>\n+#        When I attempt to update an existing topic\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | topicId | memo                    | renewPeriod |\n+#            | 1175    | \"HCS topic 1 - updated\" | 30          |\n+#            | 1176    | \"HCS topic 2 - updated\" | 60          |\n+\n+#    #Verified\n+    Scenario Outline: Validate Topic subscription\n+        Given I provide a topic id <topicId>\n+        When I subscribe to the topic\n+        Then the network should successfully establish a channel to this topic\n+        Examples:\n+            | topicId |\n+            | 1175    |\n+\n+#    #Verified\n+    Scenario Outline: Validate Topic message submission\n+        Given I provide a topic id <topicId>, a number of messages <numMessages>  and a sleep time between them <sleepBetweenMessages>\n+        When I publish random messages\n+        Then the network should confirm valid transaction receipts for this operation\n+        Examples:\n+            | topicId | numMessages | sleepBetweenMessages |\n+            | 1175    | 0           | 500                  |\n+            | 1175    | 1           | 500                  |\n+            | 1175    | 7           | 500                  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MTYzNQ==", "bodyText": "We should be populating all fields for all consensus HAPI requests. We can't explicitly validate the fields update the mirror DB (without integrating REST API calls), but it will verify we parsed the transactions correctly. We should not be testing all combinations of inputs to HAPI though, just a single transaction with all fields. We can use the same key for submit and admin.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370251635", "createdAt": "2020-01-23T17:21:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java", "diffHunk": "@@ -0,0 +1,131 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+public class TopicHelper {\n+\n+    private final Client client;\n+\n+    public TopicHelper(Client client) {\n+        this.client = client;\n+    }\n+\n+    public TransactionReceipt createTopic(String memo, long maxTransFee) throws HederaStatusException {\n+        Ed25519PrivateKey submitKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+        log.debug(\"Topic creation key : {}\", submitKey);\n+\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setMaxTransactionFee(maxTransFee)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1Mjk2NA==", "bodyText": "Why does this need to be jar?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370252964", "createdAt": "2020-01-23T17:24:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -7,7 +7,7 @@\n     <description>Cross module system and performance tests for the Hedera Mirror Node</description>\n     <modelVersion>4.0.0</modelVersion>\n     <name>Hedera Mirror Node Test</name>\n-    <packaging>pom</packaging>\n+    <packaging>jar</packaging>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1MzQzOA==", "bodyText": "Prefer not to name it technology specific. Maybe AcceptanceTest", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370253438", "createdAt": "2020-01-23T17:25:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/CucumberE2ETest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.hedera.mirror.test.e2e.acceptance;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.junit.Cucumber;\n+import io.cucumber.junit.CucumberOptions;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Cucumber.class)\n+@CucumberOptions(\n+        features = \"src/test/resources\",\n+        glue = \"com.hedera.mirror.test.e2e.acceptance\"\n+)\n+public class CucumberE2ETest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NzExMQ==", "bodyText": "Seems to be unused", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370257111", "createdAt": "2020-01-23T17:32:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1ODUzNw==", "bodyText": "Since we can't verify memo or renewPeriod changed, we can simplify this to not take in any parameters and just populate the update request with new hardcoded values for all fields.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370258537", "createdAt": "2020-01-23T17:35:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/hcs.feature", "diffHunk": "@@ -0,0 +1,127 @@\n+@TopicMessages\n+Feature: HCS Coverage Feature\n+\n+    Background: User has clients\n+        Given User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all clients are established\n+\n+#Verified\n+#    Scenario Outline: Validate topic creation scenarios\n+#        Given I provide a memo <memo> and a max transaction fee of <maxFee>\n+#        When I attempt to create a new topic id\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | memo          | maxFee   |\n+#            | \"HCS topic 1\" | 10000000 |\n+#            | \"HCS topic 2\" | 20000000 |\n+\n+#Verified, then unauthorized\n+#    Scenario Outline: Validate Topic Updates\n+#        Given I provide a topic id <topicId>, memo <memo> and an auto renew period of <renewPeriod>\n+#        When I attempt to update an existing topic\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | topicId | memo                    | renewPeriod |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1ODk3Nw==", "bodyText": "Since we can't verify memo changed and varying maxFee doesn't impact MAPI, we can simplify this to not take in any parameters and just populate the create request with hardcoded values for all fields", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370258977", "createdAt": "2020-01-23T17:36:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/hcs.feature", "diffHunk": "@@ -0,0 +1,127 @@\n+@TopicMessages\n+Feature: HCS Coverage Feature\n+\n+    Background: User has clients\n+        Given User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all clients are established\n+\n+#Verified\n+#    Scenario Outline: Validate topic creation scenarios\n+#        Given I provide a memo <memo> and a max transaction fee of <maxFee>\n+#        When I attempt to create a new topic id\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | memo          | maxFee   |\n+#            | \"HCS topic 1\" | 10000000 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1OTgyNQ==", "bodyText": "This seems to print a stacktrace every time. Let's just change it to ex.getMessage() so error is printed but no stacktrace.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370259825", "createdAt": "2020-01-23T17:38:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");\n+    }\n+\n+    @Then(\"the network should successfully confirm the transaction for this operation\")\n+    public void verifyTransactionId() {\n+        Assert.assertNotNull(transactionId);\n+    }\n+\n+    @Then(\"I unsubscribe from a topic\")\n+    public void verifyUnSubscribeFromChannelConnection() {\n+        mirrorClient.unSubscribeFromTopic(subscription);\n+    }\n+\n+    @Then(\"I attempt to delete the topic\")\n+    public void deleteTopic() throws HederaStatusException {\n+\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.deleteTopic(consensusTopicId));\n+    }\n+\n+    @Then(\"the network should successfully establish a channel to this topic\")\n+    public void verifySubscribeAndUnsubscribeChannelConnection() {\n+        verifySubscriptionChannelConnection();\n+\n+        verifyUnSubscribeFromChannelConnection();\n+    }\n+\n+    @Then(\"I subscribe with a filter to retrieve messages\")\n+    public void retrieveTopicMessages() throws InterruptedException {\n+        messageSubscribeResult = mirrorClient\n+                .subscribeToTopicAndRetrieveMessages(consensusTopicId, startDate, numMessages, latency);\n+        Assert.assertNotNull(messageSubscribeResult);\n+        subscription = messageSubscribeResult.getLeft();\n+    }\n+\n+    @Then(\"the network should successfully observe these messages\")\n+    public void verifyTopicMessageSubscription() {\n+        ConsensusClient.Subscription subscription = messageSubscribeResult.getLeft();\n+        Assert.assertNotNull(subscription);\n+        mirrorClient.unSubscribeFromTopic(subscription);\n+\n+        Assert.assertTrue(messageSubscribeResult.getRight());\n+    }\n+\n+//    @Then(\"the network received a valid transaction receipt\")\n+//    public void verifyTransactionReceipt() {\n+//        Assert.assertNotNull(transactionReceipt);\n+//    }\n+\n+    @Then(\"the network should confirm valid transaction receipts for this operation\")\n+    public void verifyTransactionReceipts() {\n+        for (TransactionReceipt receipt : transactionReceipts) {\n+            Assert.assertNotNull(receipt);\n+        }\n+    }\n+\n+    @After\n+    public void closeClients() {\n+\n+        if (sdkClient != null) {\n+            try {\n+                sdkClient.close();\n+            } catch (Exception ex) {\n+                log.warn(\"Error closing SDK client : {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MDI1MA==", "bodyText": "This client isn't closed @After, generating a stacktrace every time.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370260250", "createdAt": "2020-01-23T17:39:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/AccountCoverage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.mirror.test.e2e.acceptance.util.AccountHelper;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+\n+@Log4j2\n+public class AccountCoverage {\n+    private AccountId accountId;\n+    private long balance;\n+\n+    @Given(\"I provided an account string of {string}\")\n+    public void retrieveAccount(String targetAccount) {\n+        accountId = AccountId.fromString(targetAccount);\n+    }\n+\n+    @When(\"I request balance info for this account\")\n+    public void getAccountBalance() throws HederaStatusException {\n+        Client client = SDKClient.hederaClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MDU3OA==", "bodyText": "Please log at trace level since it happens every test", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370270578", "createdAt": "2020-01-23T18:01:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI3MzE5OQ==", "bodyText": "Can we move SDKClient and MirrorClient creation to @Before so they're run once for all scenarios? I don't think we need the assert not null as they will either be non-null or throw an exception", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370273199", "createdAt": "2020-01-23T18:07:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4Mjk2OQ==", "bodyText": "This method unused?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370282969", "createdAt": "2020-01-23T18:28:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4Mzc0Nw==", "bodyText": "This scenario is pretty redundant and can be removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370283747", "createdAt": "2020-01-23T18:29:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/hcs.feature", "diffHunk": "@@ -0,0 +1,127 @@\n+@TopicMessages\n+Feature: HCS Coverage Feature\n+\n+    Background: User has clients\n+        Given User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all clients are established\n+\n+#Verified\n+#    Scenario Outline: Validate topic creation scenarios\n+#        Given I provide a memo <memo> and a max transaction fee of <maxFee>\n+#        When I attempt to create a new topic id\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | memo          | maxFee   |\n+#            | \"HCS topic 1\" | 10000000 |\n+#            | \"HCS topic 2\" | 20000000 |\n+\n+#Verified, then unauthorized\n+#    Scenario Outline: Validate Topic Updates\n+#        Given I provide a topic id <topicId>, memo <memo> and an auto renew period of <renewPeriod>\n+#        When I attempt to update an existing topic\n+#        Then the network should confirm valid transaction receipts for this operation\n+#        Examples:\n+#            | topicId | memo                    | renewPeriod |\n+#            | 1175    | \"HCS topic 1 - updated\" | 30          |\n+#            | 1176    | \"HCS topic 2 - updated\" | 60          |\n+\n+#    #Verified\n+    Scenario Outline: Validate Topic subscription", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDk4OQ==", "bodyText": "Unused method along with transactionId field?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370284989", "createdAt": "2020-01-23T18:32:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;\n+    Long maxFee;\n+    long topicId;\n+    long autoRenew;\n+    int numMessages;\n+    Long sleepBetweenMessages;\n+    int latency;\n+    Instant startDate = Instant.EPOCH;\n+    Client sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    ConsensusTopicId consensusTopicId;\n+    //    Pair<Ed25519PrivateKey, ConsensusTopicId> createTopicResponse;\n+    TransactionId transactionId;\n+    ConsensusClient.Subscription subscription;\n+    Pair<ConsensusClient.Subscription, Boolean> messageSubscribeResult;\n+    //    TransactionReceipt transactionReceipt;\n+    List<TransactionReceipt> transactionReceipts;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() throws HederaStatusException {\n+        if (sdkClient == null) {\n+            sdkClient = SDKClient.hederaClient();\n+        }\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient();\n+        }\n+    }\n+\n+    @Given(\"I provide a memo {string} and a max transaction fee of {long}\")\n+    public void setTopicCreateParams(String memo, Long maxFee) {\n+        this.memo = memo;\n+        this.maxFee = maxFee;\n+    }\n+\n+    @Given(\"I provide a topic id {long}\")\n+    public void setTopicIdParam(Long topicId) {\n+        this.topicId = topicId;\n+        consensusTopicId = new ConsensusTopicId(0, 0, topicId);\n+        Assert.assertNotNull(consensusTopicId);\n+    }\n+\n+    @Given(\"I provide a topic id {long}, memo {string} and an auto renew period of {long}\")\n+    public void setTopicUpdateParams(Long topicId, String memo, Long autoRenew) {\n+        setTopicIdParam(topicId);\n+        this.memo = memo;\n+        this.autoRenew = autoRenew;\n+    }\n+\n+    @Given(\"I provide a topic id {long}, a number of messages {int}  and a sleep time between them {long}\")\n+    public void setTopicPublishParams(Long topicId, int numMessages, Long sleepBetweenMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.sleepBetweenMessages = sleepBetweenMessages;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a number {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(Long topicId, int numMessages, int latency) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a topic id {long} and a date {string} and a number {int} I want to receive\")\n+    public void setTopicListenParams(Long topicId, String startDate, int numMessages) {\n+        setTopicIdParam(topicId);\n+        this.numMessages = numMessages;\n+        this.startDate = Instant.parse(startDate);\n+    }\n+\n+    @When(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        TransactionReceipt receipt = topicHelper.createTopic(memo, maxFee);\n+        consensusTopicId = receipt.getConsensusTopicId();\n+        transactionReceipts.add(receipt);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicHelper.updateTopic(consensusTopicId, memo, autoRenew));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() {\n+        subscription = mirrorClient.subscribeToTopic(consensusTopicId, Instant.now());\n+        Assert.assertNotNull(subscription);\n+    }\n+\n+    @When(\"I publish random messages\")\n+    public void verifyTopicMessagePublish() throws InterruptedException, HederaStatusException {\n+        TopicHelper topicHelper = new TopicHelper(sdkClient);\n+        Ed25519PrivateKey submitPrivateKey = Ed25519PrivateKey\n+                .fromString(Dotenv.load().get(\"TOPIC_SUBMIT_PRIVATE_KEY\"));\n+        transactionReceipts = topicHelper\n+                .publishMessagesToTopic(consensusTopicId, \"New message\", submitPrivateKey, numMessages,\n+                        sleepBetweenMessages);\n+        Assert.assertEquals(numMessages, transactionReceipts.size());\n+    }\n+\n+    @Then(\"all clients are established\")\n+    public void verifyClients() {\n+        Assert.assertNotNull(sdkClient);\n+        Assert.assertNotNull(mirrorClient);\n+        log.debug(\"Verified non null mirrorClient\");\n+    }\n+\n+    @Then(\"the network should successfully confirm the transaction for this operation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDA2Mw==", "bodyText": "Recommend consolidate subscribetoTopic* with:\npublic Collection<MirrorConsensusTopicResponse> subscribeTopic(MirrorConsensusTopicQuery query, long expectedMessages, int latency) {\n...\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324063", "createdAt": "2020-01-23T19:55:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.spongycastle.util.encoders.Hex;\n+\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final ConsensusClient consensusClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        consensusClient = new ConsensusClient(Objects.requireNonNull(mirrorNodeAddress))\n+//                .setErrorHandler(err -> log.error(\"Error instantiating ConsensusClient : {}\", err))\n+        ;\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(long topicId, Instant startTime) {\n+        return subscribeToTopic(new ConsensusTopicId(0, 0, topicId), startTime);\n+    }\n+\n+    public ConsensusClient.Subscription subscribeToTopic(ConsensusTopicId topicId, Instant startTime) {\n+        log.debug(\"Subscribing to topicId : {} with startTime : {}\", topicId, startTime);\n+        ConsensusClient.Subscription subscription = consensusClient\n+                .subscribe(topicId, startTime, message -> {\n+                    log.info(\"Received message: \" + message.getMessageString()\n+                            + \" consensus timestamp: \" + message.consensusTimestamp\n+                            + \" topic sequence number: \" + message.sequenceNumber\n+                            + \" topic running hash: \" + Hex.toHexString(message.runningHash));\n+                });\n+\n+        return subscription;\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(long topicId,\n+                                                                                           Instant startTime,\n+                                                                                           int numMessages,\n+                                                                                           int latency) throws InterruptedException {\n+        return subscribeToTopicAndRetrieveMessages(new ConsensusTopicId(0, 0, topicId), startTime, numMessages,\n+                latency);\n+    }\n+\n+    public Pair<ConsensusClient.Subscription, Boolean> subscribeToTopicAndRetrieveMessages(ConsensusTopicId topicId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDM3Mw==", "bodyText": "I think these fields can go away based upon other discussion items: memo, maxFee, topicId, autoRenew, sleepBetweenMessages, startDate, createTopicResponse, transactionId, transactionReceipt. Input parameters to mirror can just be stored in MirrorConsensusTopicQuery", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324373", "createdAt": "2020-01-23T19:56:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {\n+    String memo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDY0MA==", "bodyText": "Cucumber calls these features, so AccountFeature and TopicFeature are more appropriate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370324640", "createdAt": "2020-01-23T19:57:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicCoverage.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.Assert;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusClient;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.test.e2e.acceptance.util.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.util.TopicHelper;\n+\n+@Log4j2\n+public class TopicCoverage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e093054a562270226a1756d70a2bf9c8ae2dd7"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4fb15dcb0e5f175317c8a984e24c31fc375e412", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c4fb15dcb0e5f175317c8a984e24c31fc375e412", "committedDate": "2020-01-24T15:22:33Z", "message": " Removed redundant test cases and made them more atomic addressing feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2258146134f7bd43cb3ea7c54339c8251f9247d", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f2258146134f7bd43cb3ea7c54339c8251f9247d", "committedDate": "2020-01-24T15:44:34Z", "message": "Pulled in new MirrorClient logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a755f9340b44c03e0fc22a487e96b87821250500", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a755f9340b44c03e0fc22a487e96b87821250500", "committedDate": "2020-01-24T16:14:04Z", "message": "Adopted MirrorConsensusTopicQuery object for subscription calls\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8143b75792afd6fd7cfcca21cc6f959bfac284c", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a8143b75792afd6fd7cfcca21cc6f959bfac284c", "committedDate": "2020-01-24T18:08:33Z", "message": "Added testnet support\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e787183420430ac2a42b5d50c21258d2a761b3de", "committedDate": "2020-01-24T20:13:44Z", "message": "Added logic to verify messages validity\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MjEyOTgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#pullrequestreview-348212981", "createdAt": "2020-01-24T20:42:56Z", "commit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDo0Mjo1N1rOFhp4KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMTowMzo1N1rOFhqV6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzQ0OA==", "bodyText": "Replace with cucumber-junit-platform-engine (see https://github.com/cucumber/cucumber-jvm/tree/master/junit-platform-engine). Move version to property", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370833448", "createdAt": "2020-01-24T20:42:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,77 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNzQ2Nw==", "bodyText": "Cucumber seems to have its own setting for parallel cucumber.execution.parallel.enabled, is this one here necessary?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370837467", "createdAt": "2020-01-24T20:54:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,77 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <parallel>classes</parallel>\n+                    <threadCount>10</threadCount>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNzU5OA==", "bodyText": "This is probably more appropriate at the integration-test phase. Since JMeter is also probably at that phase, it would be better if you can put both of them into separate maven profiles so they can be ran separately.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370837598", "createdAt": "2020-01-24T20:54:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,77 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <parallel>classes</parallel>\n+                    <threadCount>10</threadCount>\n+                    <argLine>-Xmx1024m -Xms1024m</argLine>\n+                    <skipTests>${skipTests}</skipTests>\n+                    <systemPropertyVariables>\n+                        <log4j.configurationFile>${project.basedir}/src/test/resources/log4j2.xml</log4j.configurationFile>\n+                    </systemPropertyVariables>\n+                </configuration>\n+                <executions>\n+                    <execution>\n+                        <phase>test</phase>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzODMyMA==", "bodyText": "Is this necessary? Log4j2 by default looks in that path", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370838320", "createdAt": "2020-01-24T20:56:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,10 +18,77 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <skipTests>true</skipTests>\n     </properties>\n \n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.cdimascio</groupId>\n+            <artifactId>java-dotenv</artifactId>\n+            <version>5.0.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>5.0.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n     <build>\n         <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <parallel>classes</parallel>\n+                    <threadCount>10</threadCount>\n+                    <argLine>-Xmx1024m -Xms1024m</argLine>\n+                    <skipTests>${skipTests}</skipTests>\n+                    <systemPropertyVariables>\n+                        <log4j.configurationFile>${project.basedir}/src/test/resources/log4j2.xml</log4j.configurationFile>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MDYzMQ==", "bodyText": "I think instead of util/*Helper it should be client/*Client. Reason is they are client wrappers around HAPI and MAPI, not really utility classes. Utility classes are generally static methods grouped into logical classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370840631", "createdAt": "2020-01-24T21:02:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/TopicHelper.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+\n+@Log4j2\n+public class TopicHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg0MTA2Ng==", "bodyText": "This is still just printing. It should rethrow/somehow fail the test", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r370841066", "createdAt": "2020-01-24T21:03:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/util/MirrorNodeClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.hedera.mirror.test.e2e.acceptance.util;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import io.github.cdimascio.dotenv.Dotenv;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.mirror.MirrorClient;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+import com.hedera.hashgraph.sdk.mirror.MirrorSubscriptionHandle;\n+\n+@Log4j2\n+public class MirrorNodeClient {\n+    private final MirrorClient mirrorClient;\n+\n+    public MirrorNodeClient() {\n+        String mirrorNodeAddress = Dotenv.load().get(\"MIRROR_NODE_ADDRESS\");\n+        log.debug(\"Creating Mirror Node client for {}\", mirrorNodeAddress);\n+        mirrorClient = new MirrorClient(Objects.requireNonNull(mirrorNodeAddress));\n+    }\n+\n+    public MirrorSubscriptionHandle subscribeToTopic(MirrorConsensusTopicQuery mirrorConsensusTopicQuery) {\n+        log.debug(\"Subscribing to topic with query: {}\", mirrorConsensusTopicQuery);\n+        return mirrorConsensusTopicQuery\n+                .subscribe(mirrorClient, resp -> {\n+                            String messageAsString = new String(resp.message, StandardCharsets.UTF_8);\n+                            log.info(\"Received message: \" + messageAsString\n+                                    + \" consensus timestamp: \" + resp.consensusTimestamp\n+                                    + \" topic sequence number: \" + resp.sequenceNumber);\n+                        },\n+                        // On gRPC error, print the stack trace\n+                        Throwable::printStackTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e787183420430ac2a42b5d50c21258d2a761b3de"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb9b232995fe8983fd7403e1d67a24f7c76734a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4fb9b232995fe8983fd7403e1d67a24f7c76734a", "committedDate": "2020-01-28T05:29:36Z", "message": "Simplified config for network\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bc27ca930e952fad3d3c1be0d9618dea3d9fa00", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1bc27ca930e952fad3d3c1be0d9618dea3d9fa00", "committedDate": "2020-01-28T05:30:06Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d550e56c8f066411d42f378b60d45788ca4daa9", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2d550e56c8f066411d42f378b60d45788ca4daa9", "committedDate": "2020-01-28T18:46:29Z", "message": "Fixed update and delete topic scenarios. Removed static client creation and opened up some properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3f13bb0395be8df45cf96785458a47e4c3f74d", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b3f13bb0395be8df45cf96785458a47e4c3f74d", "committedDate": "2020-01-28T19:19:49Z", "message": "Grouped clients and updated feature files\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92bb4beec5f6aaa759d383f1dea2fa4d45062fcf", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/92bb4beec5f6aaa759d383f1dea2fa4d45062fcf", "committedDate": "2020-01-29T05:08:57Z", "message": "Crreated SubscriptionResponse to centralize response processing logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb0de31e981eb34e51eac1017021e712ea5a7ac6", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/eb0de31e981eb34e51eac1017021e712ea5a7ac6", "committedDate": "2020-01-29T20:27:15Z", "message": "Moved cucumber and jmeter tests into profiles for integration-tests phase\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2e5960169bd62e614b651eddf46db3647ca445", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3c2e5960169bd62e614b651eddf46db3647ca445", "committedDate": "2020-01-29T21:23:57Z", "message": "Added logic to run tests from IDE and also filter on tests in command line\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3118463b3ec4066c6e530657bdd511de6dca8e09", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3118463b3ec4066c6e530657bdd511de6dca8e09", "committedDate": "2020-01-30T19:58:18Z", "message": "Updated logic to verify messages within a sub time frame\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5c5afdaa5b9c126f6cbcfbe3474414fc359428b", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f5c5afdaa5b9c126f6cbcfbe3474414fc359428b", "committedDate": "2020-01-30T19:59:06Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5bf8ad17e2de7a21d5c0ad7f4b79da7536fa02", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8f5bf8ad17e2de7a21d5c0ad7f4b79da7536fa02", "committedDate": "2020-01-31T07:10:00Z", "message": "Converted module to spring boot to allow for better context management. Inlcuding switching form dotenv to yaml config\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9fd36f3ed622546c09b8cbee2ae9b2be288d934", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d9fd36f3ed622546c09b8cbee2ae9b2be288d934", "committedDate": "2020-01-31T07:10:34Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e60818b35a6a0c93c4ac5677ef7c2fe12740ba12", "committedDate": "2020-01-31T20:13:22Z", "message": "Adding pretty logs and report graphs. Also parallel runs by reordering features. Also added config sla\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f23322795dcd0fe1ccb4a1b0931ba942539445", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e2f23322795dcd0fe1ccb4a1b0931ba942539445", "committedDate": "2020-01-31T23:09:13Z", "message": "Updated README with instructions on test\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e96da7549d6d78969267a5a18a0d6a76455da09f", "committedDate": "2020-01-31T23:10:33Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODE3ODQz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#pullrequestreview-351817843", "createdAt": "2020-01-31T22:38:25Z", "commit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjozODoyNVrOFkZ1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwNDoyODoxMVrOFkcUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjM1OA==", "bodyText": "This file can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373716358", "createdAt": "2020-01-31T22:38:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/.env.sample", "diffHunk": "@@ -0,0 +1,11 @@\n+# Network Node ID and Address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNjg5Mw==", "bodyText": "This can be removed, right?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373716893", "createdAt": "2020-01-31T22:40:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzE5OA==", "bodyText": "Can be removed as it's included transitively via cucumber-junit-platform-engine", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373717198", "createdAt": "2020-01-31T22:41:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit-platform-engine</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-spring</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzI5Mg==", "bodyText": "Can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373717292", "createdAt": "2020-01-31T22:41:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit-platform-engine</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-spring</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-autoconfigure</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzU4NA==", "bodyText": "Should be removed, as we don't want either jmeter or acceptance to run implicitly via mvn install", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373717584", "createdAt": "2020-01-31T22:42:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit-platform-engine</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-spring</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-autoconfigure</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>de.monochromata.cucumber</groupId>\n+            <artifactId>reporting-plugin</artifactId>\n+            <version>4.0.15</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <profiles>\n+        <profile>\n+            <id>acceptance-tests</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNzg2NQ==", "bodyText": "Is this explicit version necessary?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373717865", "createdAt": "2020-01-31T22:43:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit-platform-engine</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-spring</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-autoconfigure</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>de.monochromata.cucumber</groupId>\n+            <artifactId>reporting-plugin</artifactId>\n+            <version>4.0.15</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <profiles>\n+        <profile>\n+            <id>acceptance-tests</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <version>2.21.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxODMzMg==", "bodyText": "performance. Update README with run instructions via profile", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373718332", "createdAt": "2020-01-31T22:45:24Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/pom.xml", "diffHunk": "@@ -18,52 +18,169 @@\n     <properties>\n         <jmeter.test>E2E_Single_User_All_Messages.jmx</jmeter.test>\n         <jmeter.subscribeThreadCount></jmeter.subscribeThreadCount>\n+        <cucumber.version>5.0.0</cucumber.version>\n     </properties>\n \n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>com.lazerycode.jmeter</groupId>\n-                <artifactId>jmeter-maven-plugin</artifactId>\n-                <version>3.0.0</version>\n-                <executions>\n-                    <execution>\n-                        <goals>\n-                            <goal>configure</goal>\n-                            <goal>jmeter</goal>\n-                            <goal>results</goal>\n-                        </goals>\n-                    </execution>\n-                </executions>\n-                <configuration>\n-                    <generateReports>true</generateReports>\n-                    <errorRateThresholdInPercent>0</errorRateThresholdInPercent>\n-                    <excludedArtifacts>\n-                        <excludedArtifact>ch.qos.logback:logback-classic</excludedArtifact>\n-                        <excludedArtifact>log4j:log4j</excludedArtifact>\n-                        <excludedArtifact>org.apache.logging.log4j:log4j-to-slf4j</excludedArtifact>\n-                    </excludedArtifacts>\n-                    <jmeterExtensions>\n-                        <jmeterExtension>io.perfmark:perfmark-api:0.20.1</jmeterExtension>\n-                        <jmeterExtension>io.opencensus:opencensus-api:0.24.0</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:${project.version}</jmeterExtension>\n-                        <jmeterExtension>com.hedera:hedera-mirror-grpc:jar:tests:${project.version}</jmeterExtension>\n-                    </jmeterExtensions>\n-                    <jMeterProcessJVMSettings>\n-                        <arguments>\n-                            <argument>-XX:MaxMetaspaceSize=256m</argument>\n-                            <argument>-Xmx1024m</argument>\n-                            <argument>-Xms1024m</argument>\n-                        </arguments>\n-                    </jMeterProcessJVMSettings>\n-                    <selectedConfiguration>default</selectedConfiguration>\n-                    <testFilesIncluded>${jmeter.test}</testFilesIncluded>\n-                    <propertiesUser>\n-                        <subscribeThreadCount>${jmeter.subscribeThreadCount}</subscribeThreadCount>\n-                    </propertiesUser>\n-                </configuration>\n-            </plugin>\n-        </plugins>\n-    </build>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.hedera.hashgraph</groupId>\n+            <artifactId>sdk</artifactId>\n+            <version>1.1.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.grpc</groupId>\n+            <artifactId>grpc-netty-shaded</artifactId>\n+            <version>${grpc.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-java</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-junit-platform-engine</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.cucumber</groupId>\n+            <artifactId>cucumber-spring</artifactId>\n+            <version>${cucumber.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-log4j2</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-autoconfigure</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.springframework.boot</groupId>\n+                    <artifactId>spring-boot-starter-logging</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>de.monochromata.cucumber</groupId>\n+            <artifactId>reporting-plugin</artifactId>\n+            <version>4.0.15</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <profiles>\n+        <profile>\n+            <id>acceptance-tests</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <version>2.21.0</version>\n+                        <configuration>\n+                            <parallel>methods</parallel>\n+                            <threadCount>10</threadCount>\n+                            <argLine>-Xmx1024m -Xms1024m</argLine>\n+                            <systemPropertyVariables>\n+                                <log4j.configurationFile>${project.basedir}/src/test/resources/log4j2.xml\n+                                </log4j.configurationFile>\n+                            </systemPropertyVariables>\n+                        </configuration>\n+                        <executions>\n+                            <execution>\n+                                <phase>integration-test</phase>\n+                                <goals>\n+                                    <goal>test</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+\n+        </profile>\n+        <profile>\n+            <id>integration-tests</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDA4Nw==", "bodyText": "hedera.mirror.test.acceptance to be consistent with other modules. Update java class as well", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373720087", "createdAt": "2020-01-31T22:52:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/application-default.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+hedera:\n+  test:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMDI2OA==", "bodyText": "Don't think sla needs to be there. Something simpler like messageTimeout would be more appropriate", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373720268", "createdAt": "2020-01-31T22:52:37Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/application-default.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+hedera:\n+  test:\n+    acceptance:\n+      messagewaitsla: 23", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTExMA==", "bodyText": "We've been calling these properties. Config can be confused with Spring Configuration classes. And I prefer naming it with acceptance. AcceptanceProperties or AcceptanceTestProperties", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373721110", "createdAt": "2020-01-31T22:55:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/config/ClientConnectionConfig.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.test.e2e.acceptance.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n+\n+@Data\n+@Component\n+@ConfigurationProperties(prefix = \"hedera.test.acceptance\")\n+public class ClientConnectionConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTI0Mw==", "bodyText": "These should be in camel case like the field names for better readability. Also correct README.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373721243", "createdAt": "2020-01-31T22:55:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/application-default.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+hedera:\n+  test:\n+    acceptance:\n+      messagewaitsla: 23\n+      nodeid: 0.0.3\n+      nodeaddress: testnet\n+      mirrornodeaddress: hcs.testnet.mirrornode.hedera.com:5600", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMTgxNQ==", "bodyText": "These should all be private", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373721815", "createdAt": "2020-01-31T22:57:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcyMjQ3MQ==", "bodyText": "This doesn't need to be a getter as it's only used here", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373722471", "createdAt": "2020-01-31T23:00:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SDKClient.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+\n+@Log4j2\n+@Value\n+public class SDKClient {\n+    private final Client client;\n+    private final Ed25519PublicKey payerPublicKey;\n+    private final AccountId operatorId;\n+    private final boolean testNet;\n+\n+    public SDKClient(ClientConnectionConfig clientConnectionConfig) {\n+\n+        // Grab configuration variables from the .env file\n+        operatorId = AccountId.fromString(clientConnectionConfig.getOperatorId());\n+        var operatorKey = Ed25519PrivateKey.fromString(clientConnectionConfig.getOperatorKey());\n+        payerPublicKey = operatorKey.publicKey;\n+\n+        Client client;\n+        var nodeAddress = clientConnectionConfig.getNodeAddress();\n+        testNet = nodeAddress.equalsIgnoreCase(\"testnet\");\n+        if (isTestNet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60818b35a6a0c93c4ac5677ef7c2fe12740ba12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNjI2NQ==", "bodyText": "This field seems unused but its size is logged", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373736265", "createdAt": "2020-02-01T00:06:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicResponse;\n+import com.hedera.hashgraph.sdk.mirror.MirrorSubscriptionHandle;\n+\n+@Data\n+@Log4j2\n+public class SubscriptionResponse {\n+    private MirrorSubscriptionHandle subscription;\n+    private List<MirrorConsensusTopicResponse> messages;\n+    private Stopwatch elapsedTime;\n+    private Throwable responseError;\n+\n+    public void handleMirrorConsensusTopicResponse(MirrorConsensusTopicResponse topicResponse) {\n+//        messages.add(topicResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNzA5OA==", "bodyText": "Scenario is not clear from file since account input is empty but internally empty indicates check operator account. Recommend scenario be changed to just say it's checking operator account balance and remove unused option to pass account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373737098", "createdAt": "2020-02-01T00:11:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/features/account/account.feature", "diffHunk": "@@ -0,0 +1,15 @@\n+@Accounts @FullSuite\n+Feature: Account Coverage Feature\n+\n+    Background: User has sdk client\n+        Given Config context is loaded\n+        And User obtained SDK client for account feature\n+\n+    @BalanceCheck @Sanity\n+    Scenario Outline: Validate account balance check scenario\n+        Given I provided an account string of <accountId>\n+        When I request balance info for this account\n+        Then the result should be greater than or equal to <threshold>\n+        Examples:\n+            | accountId | threshold |\n+            | \"\"        | 1000000   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczNzM3Mg==", "bodyText": "Should be left empty and @Validated put on properties class and @NotBlank put on fields to validate. May have to add hibernate-validator to classpath", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373737372", "createdAt": "2020-02-01T00:13:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/application-default.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+hedera:\n+  test:\n+    acceptance:\n+      messagewaitsla: 20\n+      nodeid: 0.0.3\n+      nodeaddress: testnet\n+      mirrornodeaddress: hcs.testnet.mirrornode.hedera.com:5600\n+      operatorid: <accountId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzczOTgzNA==", "bodyText": "This class/feature isn't necessary. If the context fails to load the application wouldn't start", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373739834", "createdAt": "2020-02-01T00:28:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/ContextLoadFeature.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.en.Given;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+\n+@Cucumber\n+@SpringBootTest\n+public class ContextLoadFeature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjM3MA==", "bodyText": "Two a's, GRPC misspelled, two to's", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373742370", "createdAt": "2020-02-01T00:47:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/README.md", "diffHunk": "@@ -1,4 +1,62 @@\n-# Performance Testing\n+# 1. E2E Acceptance Testing\n+\n+This section covers the E2E testing strategy deployed by the mirror node for key scenarios\n+\n+## Overview\n+\n+In an effort to quickly confirm product capability during deployment windows we desired to have E2E test that would allow us to confirm functionality on core scenarios that spanned the main and mirror networks.\n+HCS specifically is a a key scenario where transactions are submitted to the main network and the mirror node GRCP endpoint is subscribed to to obtain messages verifying transactions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MjczNw==", "bodyText": "Should only be activated by a certain profile", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373742737", "createdAt": "2020-02-01T00:50:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/README.md", "diffHunk": "@@ -1,4 +1,62 @@\n-# Performance Testing\n+# 1. E2E Acceptance Testing\n+\n+This section covers the E2E testing strategy deployed by the mirror node for key scenarios\n+\n+## Overview\n+\n+In an effort to quickly confirm product capability during deployment windows we desired to have E2E test that would allow us to confirm functionality on core scenarios that spanned the main and mirror networks.\n+HCS specifically is a a key scenario where transactions are submitted to the main network and the mirror node GRCP endpoint is subscribed to to obtain messages verifying transactions.\n+This E2E suite gives us the ability to cover scenarios as external users would and gain the required confidence during development cycles.\n+\n+## Cucumber\n+\n+A BDD approach was desired for our E2E test strategy as it would ensure we more closely tracked valid customer scenarios.\n+Cucumber is one framework that provides tools to follow this methodology. One benefit being that tests can be written in human readable text. This allows developers, PM's and designers to formulate tests that have connected code to run valid customer scenarios.\n+Cucumber use the Gherkin plain language parser to describe tests.\n+Further details may be explored at https://cucumber.io/. Additionally cucumbers BDD approach is explained here https://cucumber.io/docs/bdd/\n+\n+### Test Execution\n+\n+Tests can be compiled and run by running the following command from the root folder\n+\n+    `./mvnw clean install integration-test --projects hedera-mirror-test/`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDUyNQ==", "bodyText": "Missing fields like adminKey, submitKey (can be same as adminKey), expirationTime, autoRenewAccount, autoRenewPeriod", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373744525", "createdAt": "2020-02-01T01:04:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+@Value\n+public class TopicClient {\n+\n+    private final Client client;\n+    private final List<Instant> recordPublishInstants;\n+\n+    public TopicClient(Client client) {\n+        this.client = client;\n+        recordPublishInstants = new ArrayList<>();\n+    }\n+\n+    public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n+\n+        Instant refInstant = Instant.now();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setAdminKey(adminKey)\n+                .setSubmitKey(submitKey)\n+//                .setAutoRenewAccountId(AccountId.fromString(\"0.0.2\")) // AUTORENEW_ACCOUNT_NOT_ALLOWED\n+                .setMaxTransactionFee(1_000_000_000)\n+                .setTopicMemo(\"HCS Topic_\" + refInstant)\n+//                .setAutoRenewPeriod(Duration.ofDays(5)) // AUTORENEW_DURATION_NOT_IN_RANGE - 30 * 86400L\n+//                .setNodeAccountId()\n+//                .setTransactionId()\n+//                .setTransactionMemo(\"HCS Topic Creation_\" + refInstant)\n+//                .setTransactionValidDuration(Duration.ofDays(1))\n+                .execute(client)\n+                .getReceipt(client);\n+\n+        ConsensusTopicId topicId = transactionReceipt.getConsensusTopicId();\n+        log.debug(\"Created new topic {}, with TransactionReceipt : {}\", topicId, transactionReceipt);\n+\n+        return transactionReceipt;\n+    }\n+\n+    public TransactionReceipt updateTopic(ConsensusTopicId topicId) throws HederaStatusException {\n+        String newMemo = \"HCS UpdatedTopic__\" + Instant.now().getNano();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicUpdateTransaction()\n+                .setTopicId(topicId)\n+                .setTopicMemo(newMemo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NDcwMA==", "bodyText": "There's a lot of commented options that aren't set. These should all be enabled and all fields set", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373744700", "createdAt": "2020-02-01T01:06:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.test.e2e.acceptance.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicCreateTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Log4j2\n+@Value\n+public class TopicClient {\n+\n+    private final Client client;\n+    private final List<Instant> recordPublishInstants;\n+\n+    public TopicClient(Client client) {\n+        this.client = client;\n+        recordPublishInstants = new ArrayList<>();\n+    }\n+\n+    public TransactionReceipt createTopic(Ed25519PublicKey adminKey, Ed25519PublicKey submitKey) throws HederaStatusException {\n+\n+        Instant refInstant = Instant.now();\n+        TransactionReceipt transactionReceipt = new ConsensusTopicCreateTransaction()\n+                .setAdminKey(adminKey)\n+                .setSubmitKey(submitKey)\n+//                .setAutoRenewAccountId(AccountId.fromString(\"0.0.2\")) // AUTORENEW_ACCOUNT_NOT_ALLOWED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NTk3MA==", "bodyText": "Now that you have spring autowiring working, it would be more appropriate to make SDKClient, MirrorNodeClient and TopicClient Spring beans and inject them into the features. This would remove the need for User obtained * client checks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373755970", "createdAt": "2020-02-01T04:01:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjEzNA==", "bodyText": "This scenario should be removed. Those topicIds are valid.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756134", "createdAt": "2020-02-01T04:04:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/features/hcs/hcs.feature", "diffHunk": "@@ -0,0 +1,68 @@\n+@TopicMessagesBase @FullSuite\n+Feature: HCS Base Coverage Feature\n+\n+    Background: User has clients\n+        Given Config context is loaded\n+        And User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all setup items were configured\n+\n+    @Sanity\n+    Scenario Outline: Validate Topic message submission\n+        Given I attempt to create a new topic id\n+        And I publish <numMessages> messages\n+        When I provide a number of messages <numMessages> I want to receive\n+        And I subscribe with a filter to retrieve messages\n+        Then the network should successfully observe these messages\n+        Examples:\n+            | numMessages |\n+            | 1           |\n+            | 7           |\n+\n+    Scenario: Validate Topic Updates\n+        Given I attempt to create a new topic id\n+        When I attempt to update an existing topic\n+        Then the network should confirm valid transaction receipts for this operation\n+\n+    Scenario Outline: Validate Topic message listener\n+        Given I attempt to create a new topic id\n+        And I publish <numMessages> messages\n+        When I provide a number of messages <numMessages> I want to receive within <latency> seconds\n+        And I subscribe with a filter to retrieve messages\n+        Then the network should successfully observe these messages\n+        Examples:\n+            | numMessages | latency |\n+            | 2           | 30      |\n+            | 5           | 30      |\n+\n+    @Negative\n+    Scenario Outline: Validate topic subscription with missing topic id\n+        Given I provide a topic id <topicId>\n+        Then the network should observe an error <errorCode>\n+        Examples:\n+            | topicId | errorCode                  |\n+            | \"\"      | \"Missing required topicID\" |\n+\n+    @Negative\n+    Scenario Outline: Validate topic subscription with invalid topic id\n+        Given I provide a topic id <topicId>\n+        Then the network should observe an error <errorCode>\n+        Examples:\n+            | topicId | errorCode                                                                              |\n+            | \"-1\"    | \"INVALID_ARGUMENT: subscribeTopic.filter.topicNum: must be greater than or equal to 0\" |\n+\n+#    # Discussions still out on this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjI0MA==", "bodyText": "These two scenarios can be combined into a single with two entries in the table as they're both invalid topic ids", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756240", "createdAt": "2020-02-01T04:07:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/features/hcs/hcs.feature", "diffHunk": "@@ -0,0 +1,68 @@\n+@TopicMessagesBase @FullSuite\n+Feature: HCS Base Coverage Feature\n+\n+    Background: User has clients\n+        Given Config context is loaded\n+        And User obtained SDK client\n+        Given User obtained Mirror Node Consensus client\n+        Then all setup items were configured\n+\n+    @Sanity\n+    Scenario Outline: Validate Topic message submission\n+        Given I attempt to create a new topic id\n+        And I publish <numMessages> messages\n+        When I provide a number of messages <numMessages> I want to receive\n+        And I subscribe with a filter to retrieve messages\n+        Then the network should successfully observe these messages\n+        Examples:\n+            | numMessages |\n+            | 1           |\n+            | 7           |\n+\n+    Scenario: Validate Topic Updates\n+        Given I attempt to create a new topic id\n+        When I attempt to update an existing topic\n+        Then the network should confirm valid transaction receipts for this operation\n+\n+    Scenario Outline: Validate Topic message listener\n+        Given I attempt to create a new topic id\n+        And I publish <numMessages> messages\n+        When I provide a number of messages <numMessages> I want to receive within <latency> seconds\n+        And I subscribe with a filter to retrieve messages\n+        Then the network should successfully observe these messages\n+        Examples:\n+            | numMessages | latency |\n+            | 2           | 30      |\n+            | 5           | 30      |\n+\n+    @Negative\n+    Scenario Outline: Validate topic subscription with missing topic id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjczNg==", "bodyText": "start date", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756736", "createdAt": "2020-02-01T04:20:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NjgwMA==", "bodyText": "Not used", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373756800", "createdAt": "2020-02-01T04:21:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}\", startTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, String endDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        Instant endTime = FeatureInputHandler.messageQueryDateStringToInstant(endDate, Instant.now());\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startSequence {int} and endSequence {int} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int startSequence, int endSequence, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = topicClient.getInstantOfPublishedMessage(startSequence - 1).minusMillis(10);\n+        Instant endTime = topicClient.getInstantOfPublishedMessage(endSequence - 1).plusMillis(10);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a limit of {int} messages I want to receive\")\n+    public void setTopicListenParamswLimit(String startDate, String endDate, int limit) {\n+        numMessages = limit;\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(FeatureInputHandler.messageQueryDateStringToInstant(startDate))\n+                .setEndTime(FeatureInputHandler.messageQueryDateStringToInstant(endDate))\n+                .setLimit(limit);\n+    }\n+\n+    @When(\"{long} milliseconds pass by\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc1NzA1MQ==", "bodyText": "This is overwriting the transactionsRecepts list, so it is not verifying the topic create receipt. Recommend you just remove transactionsRecepts and the network should confirm valid transaction receipts for this operation clause and just validate receipts inline inside each method where the transaction receipt is created. You should validate the create was successful before moving on to publish anyway instead of validating all at the end.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#discussion_r373757051", "createdAt": "2020-02-01T04:28:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -0,0 +1,301 @@\n+package com.hedera.mirror.test.e2e.acceptance.steps;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import io.cucumber.java.After;\n+import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+import io.cucumber.junit.platform.engine.Cucumber;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import com.hedera.hashgraph.sdk.HederaStatusException;\n+import com.hedera.hashgraph.sdk.TransactionReceipt;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.mirror.MirrorConsensusTopicQuery;\n+import com.hedera.mirror.test.e2e.acceptance.client.MirrorNodeClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SDKClient;\n+import com.hedera.mirror.test.e2e.acceptance.client.SubscriptionResponse;\n+import com.hedera.mirror.test.e2e.acceptance.client.TopicClient;\n+import com.hedera.mirror.test.e2e.acceptance.config.ClientConnectionConfig;\n+import com.hedera.mirror.test.e2e.acceptance.util.FeatureInputHandler;\n+\n+@Log4j2\n+@Cucumber\n+public class TopicFeature {\n+    int numMessages;\n+    int latency;\n+    MirrorConsensusTopicQuery mirrorConsensusTopicQuery;\n+    SDKClient sdkClient;\n+    MirrorNodeClient mirrorClient;\n+    TopicClient topicClient;\n+    ConsensusTopicId consensusTopicId;\n+    SubscriptionResponse subscriptionResponse;\n+    List<TransactionReceipt> transactionReceipts;\n+    Ed25519PrivateKey submitKey;\n+    Instant testInstantReference;\n+\n+    @Autowired\n+    private ClientConnectionConfig clientConnectionConfig;\n+\n+    @Given(\"User obtained SDK client\")\n+    public void getSDKClient() {\n+        if (sdkClient == null) {\n+            sdkClient = new SDKClient(clientConnectionConfig);\n+            topicClient = new TopicClient(sdkClient.getClient());\n+        }\n+\n+        testInstantReference = Instant.now();\n+    }\n+\n+    @Given(\"User obtained Mirror Node Consensus client\")\n+    public void getMirrorNodeClient() {\n+        if (mirrorClient == null) {\n+            mirrorClient = new MirrorNodeClient(clientConnectionConfig);\n+        }\n+    }\n+\n+    @Given(\"I attempt to create a new topic id\")\n+    public void createNewTopic() throws HederaStatusException {\n+        if (consensusTopicId == null) {\n+            topicClient = new TopicClient(sdkClient.getClient());\n+            transactionReceipts = new ArrayList();\n+\n+            submitKey = Ed25519PrivateKey.generate();\n+            Ed25519PublicKey submitPublicKey = submitKey.publicKey;\n+            log.debug(\"Topic creation PrivateKey : {}, PublicKey : {}\", submitKey, submitPublicKey);\n+\n+            TransactionReceipt receipt = topicClient.createTopic(sdkClient.getPayerPublicKey(), submitPublicKey);\n+            consensusTopicId = receipt.getConsensusTopicId();\n+            mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery()\n+                    .setTopicId(consensusTopicId)\n+                    .setStartTime(Instant.EPOCH);\n+\n+            transactionReceipts.add(receipt);\n+        }\n+    }\n+\n+    @Given(\"I provide a topic id {string}\")\n+    public void setTopicIdParam(String topicId) {\n+        mirrorConsensusTopicQuery = new MirrorConsensusTopicQuery();\n+        if (!topicId.isEmpty()) {\n+            consensusTopicId = new ConsensusTopicId(0, 0, Long.parseLong(topicId));\n+            mirrorConsensusTopicQuery.setTopicId(consensusTopicId);\n+        }\n+\n+        numMessages = 0;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int numMessages) {\n+        this.numMessages = numMessages;\n+    }\n+\n+    @Given(\"I provide a number of messages {int} I want to receive within {int} seconds\")\n+    public void setTopicListenParams(int numMessages, int latency) {\n+        this.numMessages = numMessages;\n+        this.latency = latency;\n+    }\n+\n+    @Given(\"I provide a date {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}\", startTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(String startDate, String endDate, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = FeatureInputHandler.messageQueryDateStringToInstant(startDate, testInstantReference);\n+        Instant endTime = FeatureInputHandler.messageQueryDateStringToInstant(endDate, Instant.now());\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startSequence {int} and endSequence {int} and a number of messages {int} I want to receive\")\n+    public void setTopicListenParams(int startSequence, int endSequence, int numMessages) {\n+        this.numMessages = numMessages;\n+\n+        Instant startTime = topicClient.getInstantOfPublishedMessage(startSequence - 1).minusMillis(10);\n+        Instant endTime = topicClient.getInstantOfPublishedMessage(endSequence - 1).plusMillis(10);\n+        log.trace(\"Subscribe mirrorConsensusTopicQuery : StartTime : {}. EndTime : {}\", startTime, endTime);\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(startTime)\n+                .setEndTime(endTime);\n+    }\n+\n+    @Given(\"I provide a startDate {string} and endDate {string} and a limit of {int} messages I want to receive\")\n+    public void setTopicListenParamswLimit(String startDate, String endDate, int limit) {\n+        numMessages = limit;\n+\n+        mirrorConsensusTopicQuery\n+                .setStartTime(FeatureInputHandler.messageQueryDateStringToInstant(startDate))\n+                .setEndTime(FeatureInputHandler.messageQueryDateStringToInstant(endDate))\n+                .setLimit(limit);\n+    }\n+\n+    @When(\"{long} milliseconds pass by\")\n+    public void waitSeconds(long milliSecs) throws InterruptedException {\n+        log.trace(\"Waiting {} seconds\", milliSecs);\n+        Thread.sleep(milliSecs, 0);\n+    }\n+\n+    @When(\"I attempt to update an existing topic\")\n+    public void updateTopic() throws HederaStatusException {\n+        TopicClient topicClient = new TopicClient(sdkClient.getClient());\n+        transactionReceipts = new ArrayList();\n+        transactionReceipts.add(topicClient.updateTopic(consensusTopicId));\n+    }\n+\n+    @When(\"I subscribe to the topic\")\n+    public void verifySubscriptionChannelConnection() throws Throwable {\n+        subscriptionResponse = mirrorClient.subscribeToTopic(mirrorConsensusTopicQuery);\n+        assertNotNull(subscriptionResponse);\n+    }\n+\n+    @When(\"I publish {int} messages\")\n+    public void verifyTopicMessagePublish(int messageCount) throws InterruptedException, HederaStatusException {\n+        numMessages = messageCount;\n+        transactionReceipts = topicClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e96da7549d6d78969267a5a18a0d6a76455da09f"}, "originalPosition": 195}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "012d077b50df1c8a4cf374fc6b33867eac96bc62", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/012d077b50df1c8a4cf374fc6b33867eac96bc62", "committedDate": "2020-02-03T03:55:00Z", "message": "Cleaned up a bit based on pr feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361e9b849de1a23caace5e0616a42187925cf169", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/361e9b849de1a23caace5e0616a42187925cf169", "committedDate": "2020-02-03T03:55:25Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b14e0ec69609e0c2397b3b57bd6e748096df8e1f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b14e0ec69609e0c2397b3b57bd6e748096df8e1f", "committedDate": "2020-02-03T14:57:35Z", "message": "Added workaround for surefire failure on non active profile. Also updated README\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e20396174869772eebab56c3e0ff1d9b15865cd", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9e20396174869772eebab56c3e0ff1d9b15865cd", "committedDate": "2020-02-03T22:29:36Z", "message": "Addressed feedback around  naming and updated README\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5f83aa10adef28c81d41f818b103bb8e237827", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/df5f83aa10adef28c81d41f818b103bb8e237827", "committedDate": "2020-02-04T05:41:57Z", "message": "Added validator logic to properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f3888960a1777af70b70ad6d97da08276fcfd25", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1f3888960a1777af70b70ad6d97da08276fcfd25", "committedDate": "2020-02-04T07:22:36Z", "message": "Made clients spring beans for easy sharing and creation\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee6e056bae6af0302fd98758b6eae9e1240116e", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ee6e056bae6af0302fd98758b6eae9e1240116e", "committedDate": "2020-02-04T19:12:37Z", "message": "Added expiration time set to topic update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902502b0ea9a7809d72dc504139380984dec9580", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/902502b0ea9a7809d72dc504139380984dec9580", "committedDate": "2020-02-04T22:50:26Z", "message": "Updated create and update topic to support more properties\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5861e76dd320aa520fec80a69d5f63fbff28692", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f5861e76dd320aa520fec80a69d5f63fbff28692", "committedDate": "2020-02-06T06:19:16Z", "message": "Merge branch 'master' into hcsbddtests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Mzg0NTEz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/504#pullrequestreview-356384513", "createdAt": "2020-02-11T01:58:57Z", "commit": {"oid": "f5861e76dd320aa520fec80a69d5f63fbff28692"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}