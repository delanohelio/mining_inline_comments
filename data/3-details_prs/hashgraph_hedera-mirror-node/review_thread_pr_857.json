{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTg1MTEw", "number": 857, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNDowN1rOEMuXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNjowMlrOEMuZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzc4MDg4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNDowN1rOGvAENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozNDowNFrOGvWqJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzMzNA==", "bodyText": "q: Wouldn't this time always be smaller than the timing for the 1st transaction?\nThe 1st transaction would wait longer than the rest to be downloaded and verified.\nIn that case shouldn't we go with the 1st transaction so we always get a sense of the worst case scenario and future efforts will look to get that latency down?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r451937334", "createdAt": "2020-07-09T03:04:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -96,13 +97,19 @@ public Downloader(S3AsyncClient s3Client, ApplicationStatusRepository applicatio\n         signatureDownloadThreadPool = Executors.newFixedThreadPool(downloaderProperties.getThreads());\n         Runtime.getRuntime().addShutdownHook(new Thread(signatureDownloadThreadPool::shutdown));\n \n-        signatureVerificationMetric = Counter.builder(\"hedera.mirror.signature.verification\")\n+        signatureVerificationMetric = Counter.builder(\"hedera.mirror.download.signature.verification\")\n                 .description(\"The number of signatures verified from a particular node\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n \n-        streamVerificationMetric = Timer.builder(\"hedera.mirror.stream.verification\")\n+        streamVerificationMetric = Timer.builder(\"hedera.mirror.download.stream.verification\")\n                 .description(\"The duration in seconds it took to verify consensus and hash chain of a stream file\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n+\n+        downloadLatencyMetric = Timer.builder(\"hedera.mirror.download.latency\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTg1Mg==", "bodyText": "No, we're trying to track latencies of the mirror node itself with these metrics not end to end latencies. Specifically with this metric we're trying to track how quick does the downloader retrieve and verify the files after it's available in S3. If we track the first transaction the value would vary greatly depending upon how often transactions flow through that network and trigger the file to close. For example, in perfnet this value would always be above 10s except during perf tests since that's how often the pinger runs, making the metric useless most of the time. Since we don't have S3 timestamps, using the last timestamp in the file gives us the most consistent and accurate answer to this question.\nBut this question did make me think of another useful metric to add. I added a metric to track the latency between the first and last timestamp in the record file. This number is of course out of our control to improve but useful to track to see if the file is closing every 2s.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r452295852", "createdAt": "2020-07-09T15:17:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -96,13 +97,19 @@ public Downloader(S3AsyncClient s3Client, ApplicationStatusRepository applicatio\n         signatureDownloadThreadPool = Executors.newFixedThreadPool(downloaderProperties.getThreads());\n         Runtime.getRuntime().addShutdownHook(new Thread(signatureDownloadThreadPool::shutdown));\n \n-        signatureVerificationMetric = Counter.builder(\"hedera.mirror.signature.verification\")\n+        signatureVerificationMetric = Counter.builder(\"hedera.mirror.download.signature.verification\")\n                 .description(\"The number of signatures verified from a particular node\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n \n-        streamVerificationMetric = Timer.builder(\"hedera.mirror.stream.verification\")\n+        streamVerificationMetric = Timer.builder(\"hedera.mirror.download.stream.verification\")\n                 .description(\"The duration in seconds it took to verify consensus and hash chain of a stream file\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n+\n+        downloadLatencyMetric = Timer.builder(\"hedera.mirror.download.latency\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzMzNA=="}, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzQ5Mw==", "bodyText": "Perfect, yeah that confirms some of my thoughts and I agree with your points. I like the addition of the latency between 1st and last transaction.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r452307493", "createdAt": "2020-07-09T15:34:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -96,13 +97,19 @@ public Downloader(S3AsyncClient s3Client, ApplicationStatusRepository applicatio\n         signatureDownloadThreadPool = Executors.newFixedThreadPool(downloaderProperties.getThreads());\n         Runtime.getRuntime().addShutdownHook(new Thread(signatureDownloadThreadPool::shutdown));\n \n-        signatureVerificationMetric = Counter.builder(\"hedera.mirror.signature.verification\")\n+        signatureVerificationMetric = Counter.builder(\"hedera.mirror.download.signature.verification\")\n                 .description(\"The number of signatures verified from a particular node\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n \n-        streamVerificationMetric = Timer.builder(\"hedera.mirror.stream.verification\")\n+        streamVerificationMetric = Timer.builder(\"hedera.mirror.download.stream.verification\")\n                 .description(\"The duration in seconds it took to verify consensus and hash chain of a stream file\")\n                 .tag(\"type\", downloaderProperties.getStreamType().toString());\n+\n+        downloadLatencyMetric = Timer.builder(\"hedera.mirror.download.latency\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzMzNA=="}, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzc4NDYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/record/RecordFileDownloader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMzowNjowMlrOGvAGVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozNDoyNFrOGvWq-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzg3OA==", "bodyText": "Same thought as above. Wouldn't the 1st transaction and therefore recordFile.getConsensusStart be better?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r451937878", "createdAt": "2020-07-09T03:06:02Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/record/RecordFileDownloader.java", "diffHunk": "@@ -78,6 +80,9 @@ protected boolean verifyDataFile(File file, byte[] verifiedHash) {\n             if (!recordFile.getFileHash().contentEquals(Hex.encodeHexString(verifiedHash))) {\n                 return false;\n             }\n+\n+            Instant consensusEnd = Instant.ofEpochSecond(0, recordFile.getConsensusEnd());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzOTE4MA==", "bodyText": "I pondered this back when I was adding hedera.mirror.parse.delay but wasn't sure. Is we switch to 1st transaction that should also be updated.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r451939180", "createdAt": "2020-07-09T03:11:39Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/record/RecordFileDownloader.java", "diffHunk": "@@ -78,6 +80,9 @@ protected boolean verifyDataFile(File file, byte[] verifiedHash) {\n             if (!recordFile.getFileHash().contentEquals(Hex.encodeHexString(verifiedHash))) {\n                 return false;\n             }\n+\n+            Instant consensusEnd = Instant.ofEpochSecond(0, recordFile.getConsensusEnd());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzg3OA=="}, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzcwNQ==", "bodyText": "Addressed by other response", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/857#discussion_r452307705", "createdAt": "2020-07-09T15:34:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/record/RecordFileDownloader.java", "diffHunk": "@@ -78,6 +80,9 @@ protected boolean verifyDataFile(File file, byte[] verifiedHash) {\n             if (!recordFile.getFileHash().contentEquals(Hex.encodeHexString(verifiedHash))) {\n                 return false;\n             }\n+\n+            Instant consensusEnd = Instant.ofEpochSecond(0, recordFile.getConsensusEnd());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzNzg3OA=="}, "originalCommit": {"oid": "ddb2269e557befa9d674757215f03afb00821a9f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 900, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}