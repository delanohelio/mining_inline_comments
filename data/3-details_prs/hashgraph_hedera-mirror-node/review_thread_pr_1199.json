{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjQ5Mjk1", "number": 1199, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMzozOVrOEzVzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyOToyOVrOEz4_tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcwMDk4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMzozOVrOHqgOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoxOTozMlrOHqj33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMDE5NA==", "bodyText": "Licenses missing from most files", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514330194", "createdAt": "2020-10-29T15:03:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionSupplier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.datagenerator.sdk.supplier;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4OTk4MA==", "bodyText": "Fixed, I think I have everything set up now to auto-generate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514389980", "createdAt": "2020-10-29T16:19:32Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/TransactionSupplier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.datagenerator.sdk.supplier;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMDE5NA=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcxMjg1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNTo1NVrOHqgVXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0MjozNVrOHqncHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMTk5OQ==", "bodyText": "Should probably remove logging of secrets.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514331999", "createdAt": "2020-10-29T15:05:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());\n+    }\n+\n+    private Ed25519PublicKey generateKeys() {\n+        Ed25519PrivateKey privateKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey publicKey = privateKey.publicKey;\n+\n+        log.debug(\"Private key = {}\", privateKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0ODQxNQ==", "bodyText": "Sure, this was mainly for testing purposes so I could reuse the account without generating outside keys.  It's been removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514448415", "createdAt": "2020-10-29T17:42:35Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());\n+    }\n+\n+    private Ed25519PublicKey generateKeys() {\n+        Ed25519PrivateKey privateKey = Ed25519PrivateKey.generate();\n+        Ed25519PublicKey publicKey = privateKey.publicKey;\n+\n+        log.debug(\"Private key = {}\", privateKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMTk5OQ=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcyMzQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNzo1OVrOHqgcBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo1NjoxOVrOHquVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzcwMw==", "bodyText": "Should probably mention mirror node generating this. Mirror node created test account at now()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514333703", "createdAt": "2020-10-29T15:07:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MTM5OA==", "bodyText": "Good idea, all memos should now be reworded to reflect this verbiage.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514561398", "createdAt": "2020-10-29T20:56:19Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long initialBalance = 10_000_000;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountCreateTransaction get() {\n+        return new AccountCreateTransaction()\n+                .setKey(publicKey != null ? publicKey : generateKeys())\n+                .setInitialBalance(initialBalance)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier create account_\" + Instant.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzcwMw=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjczMTI2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowOTozMVrOHqgg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTo0NjoxMlrOHqv4Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNDkzNA==", "bodyText": "Would prefer all fields be built-in Java types so they can be populated dynamically from Spring Boot config. It also keeps SDK classes from leaking outside the suppliers. For example, this field should be String.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514334934", "createdAt": "2020-10-29T15:09:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NjcwMw==", "bodyText": "All fields have been refactored to be Java types.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514586703", "createdAt": "2020-10-29T21:46:12Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountCreateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountCreateTransactionSupplier implements TransactionSupplier<AccountCreateTransaction> {\n+\n+    //Required\n+    private final Ed25519PublicKey publicKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNDkzNA=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc0NjA3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMjozMlrOHqgqAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo1OTo0MlrOHqoIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNzI4Mw==", "bodyText": "Null check here is redundant as setting null has no side effects. Can just add to chaining methods.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514337283", "createdAt": "2020-10-29T15:12:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)\n+                .setKey(publicKey)\n+                .setReceiverSignatureRequired(receiverSignatureRequired)\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier update account_\" + Instant.now());\n+\n+        if (proxyAccountId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1OTY2MQ==", "bodyText": "The builder set method here is internally calling accountId.toProto(), which causes an NPE when it's null.  Seems like the sdk transactions do this to all account ids and all keys at least.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514459661", "createdAt": "2020-10-29T17:59:42Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)\n+                .setKey(publicKey)\n+                .setReceiverSignatureRequired(receiverSignatureRequired)\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier update account_\" + Instant.now());\n+\n+        if (proxyAccountId != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNzI4Mw=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc1MjcwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMzo1MlrOHqguFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyMTowM1rOHqtK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODMyNQ==", "bodyText": "Would prefer fields sorted alphabetically within their required/optional groupings. Would also prefer an extra newline between annotated fields as it's hard to read without.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514338325", "createdAt": "2020-10-29T15:13:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjMwNg==", "bodyText": "Fields should all be alphabetized now, and added a new line before any annotated field.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514542306", "createdAt": "2020-10-29T20:21:03Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODMyNQ=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc1NjQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxNDoyOVrOHqgwRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyMToyMlrOHqtLdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODg4NQ==", "bodyText": "Would prefer chaining invocations sorted.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514338885", "createdAt": "2020-10-29T15:14:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjQ1Mw==", "bodyText": "All chaining should be sorted alphabetically now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514542453", "createdAt": "2020-10-29T20:21:22Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/account/AccountUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.account;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.account.AccountUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+@Log4j2\n+public class AccountUpdateTransactionSupplier implements TransactionSupplier<AccountUpdateTransaction> {\n+\n+    //Required\n+    private final AccountId accountId;\n+    private final Ed25519PublicKey publicKey;\n+\n+    //Optional\n+    private final AccountId proxyAccountId;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+    @Builder.Default\n+    private final boolean receiverSignatureRequired = false;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public AccountUpdateTransaction get() {\n+        AccountUpdateTransaction transaction = new AccountUpdateTransaction()\n+                .setAccountId(accountId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzODg4NQ=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjgwMDgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyMzo0OVrOHqhMjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOToxMjoxNVrOHqqzvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjEyNQ==", "bodyText": "Since we don't have an acronym HAS for accounts, etc. it might be better to name the package after the transaction prefix for consistency with the other network services. e.g. hcs -> consensus and hts -> token", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514346125", "createdAt": "2020-10-29T15:23:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwMzYxNQ==", "bodyText": "Makes sense, done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514503615", "createdAt": "2020-10-29T19:12:15Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NjEyNQ=="}, "originalCommit": {"oid": "4a6f4eff18fd1bdd8a27fa4e54351664bb439afc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzIyNTgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo1MjoxMFrOHqlVkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozNjoyMVrOHqyVzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzk3MA==", "bodyText": "Can we make it so that the timestamp always starts the message and any optional message provided is added to it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMessage(message != null ? message : getMessage())\n          \n          \n            \n                            .setMessage(getMessage() + message != null ? \"_\" + message : '')", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514413970", "createdAt": "2020-10-29T16:52:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final ConsensusTopicId topicId;\n+\n+    //Optional\n+    private final String message;\n+    @Builder.Default\n+    private final int messageSize = 256;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setTopicId(topicId)\n+                .setMessage(message != null ? message : getMessage())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5NTA3MA==", "bodyText": "I'm okay with adding a timestamp to the front, but if someone adds their own message do we want to continue generating random alphanumeric chars to fill it out?  I approached this as either give a complete message or give a message size to generate, not both.\nI've pushed a variation on this where the getMessage() is changed to just append the timestamp to the custom message if applicable, let me know if you think differently.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514595070", "createdAt": "2020-10-29T22:06:00Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final ConsensusTopicId topicId;\n+\n+    //Optional\n+    private final String message;\n+    @Builder.Default\n+    private final int messageSize = 256;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setTopicId(topicId)\n+                .setMessage(message != null ? message : getMessage())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzk3MA=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzAyMg==", "bodyText": "This is correct. Should be encodedTimestamp plus  on of the two, custom message or random message .", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514627022", "createdAt": "2020-10-29T23:36:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hcs/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.datagenerator.sdk.supplier.hcs;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final ConsensusTopicId topicId;\n+\n+    //Optional\n+    private final String message;\n+    @Builder.Default\n+    private final int messageSize = 256;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setTopicId(topicId)\n+                .setMessage(message != null ? message : getMessage())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxMzk3MA=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzMyMDY0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenCreateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxNDoxOFrOHqmR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDozNzozMVrOHqttuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTQwOA==", "bodyText": "This is missing the setFreezeDefault property.\nAssuming default of false this will mean the freezeKey is set accounts onboarded to the token will have an Unfrozen status and can immediately start to transfer tokens.\nSetting it to true would give the opposite effect.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514429408", "createdAt": "2020-10-29T17:14:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenCreateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenCreateTransactionSupplier implements TransactionSupplier<TokenCreateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccount;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final int initialSupply = 1000000000;\n+    @Builder.Default\n+    private boolean freezeDefault = false;\n+    @Builder.Default\n+    private int decimals = 10;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenCreateTransaction get() {\n+        TokenCreateTransaction tokenCreateTransaction = new TokenCreateTransaction()\n+                .setSymbol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setDecimals(decimals)\n+                .setInitialSupply(initialSupply)\n+                .setAutoRenewAccount(treasuryAccount)\n+                .setTreasury(treasuryAccount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Create token_\" + Instant.now());\n+\n+        if (adminKey != null) {\n+            tokenCreateTransaction\n+                    .setAdminKey(adminKey)\n+                    .setSupplyKey(adminKey)\n+                    .setWipeKey(adminKey)\n+                    .setFreezeKey(adminKey)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1MTIyNQ==", "bodyText": "Good catch, I was flip-flopping on setting this field since in the vast majority of cases we would leave it to the default (false/not frozen), but I've added it back since more options probably isn't a bad thing.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514551225", "createdAt": "2020-10-29T20:37:31Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenCreateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenCreateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenCreateTransactionSupplier implements TransactionSupplier<TokenCreateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccount;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final int initialSupply = 1000000000;\n+    @Builder.Default\n+    private boolean freezeDefault = false;\n+    @Builder.Default\n+    private int decimals = 10;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenCreateTransaction get() {\n+        TokenCreateTransaction tokenCreateTransaction = new TokenCreateTransaction()\n+                .setSymbol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setDecimals(decimals)\n+                .setInitialSupply(initialSupply)\n+                .setAutoRenewAccount(treasuryAccount)\n+                .setTreasury(treasuryAccount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Create token_\" + Instant.now());\n+\n+        if (adminKey != null) {\n+            tokenCreateTransaction\n+                    .setAdminKey(adminKey)\n+                    .setSupplyKey(adminKey)\n+                    .setWipeKey(adminKey)\n+                    .setFreezeKey(adminKey)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTQwOA=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzMyNzUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenFreezeTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxNTo0MVrOHqmV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyODoyNlrOHqtaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMDQ1Mg==", "bodyText": "Use maxTransactionFee\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMaxTransactionFee(1_000_000_000)\n          \n          \n            \n                            .setMaxTransactionFee(maxTransactionFee)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514430452", "createdAt": "2020-10-29T17:15:41Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenFreezeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenFreezeTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenFreezeTransactionSupplier implements TransactionSupplier<TokenFreezeTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenFreezeTransaction get() {\n+        return new TokenFreezeTransaction()\n+                .setAccountId(accountId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NjE4MQ==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514546181", "createdAt": "2020-10-29T20:28:26Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenFreezeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenFreezeTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenFreezeTransactionSupplier implements TransactionSupplier<TokenFreezeTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenFreezeTransaction get() {\n+        return new TokenFreezeTransaction()\n+                .setAccountId(accountId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMDQ1Mg=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzMzODI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenRevokeKYCTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxNzo1NlrOHqmcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyODoyMVrOHqtZyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMjA5OQ==", "bodyText": "Use maxTransactionFee\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setMaxTransactionFee(1_000_000_000)\n          \n          \n            \n                            .setMaxTransactionFee(maxTransactionFee)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514432099", "createdAt": "2020-10-29T17:17:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenRevokeKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenRevokeKycTransaction;\n+\n+@Builder\n+@Value\n+public class TokenRevokeKYCTransactionSupplier implements TransactionSupplier<TokenRevokeKycTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenRevokeKycTransaction get() {\n+        return new TokenRevokeKycTransaction()\n+                .setAccountId(accountId)\n+                .setTokenId(tokenId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NjEyMw==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514546123", "createdAt": "2020-10-29T20:28:21Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenRevokeKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenRevokeKycTransaction;\n+\n+@Builder\n+@Value\n+public class TokenRevokeKYCTransactionSupplier implements TransactionSupplier<TokenRevokeKycTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId accountId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenRevokeKycTransaction get() {\n+        return new TokenRevokeKycTransaction()\n+                .setAccountId(accountId)\n+                .setTokenId(tokenId)\n+                .setMaxTransactionFee(1_000_000_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMjA5OQ=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzM1ODkyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenTransferTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyMzowMVrOHqmphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowMToyNFrOHqyypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTQ2Mw==", "bodyText": "Should we update this to be like the HCS submit message and use a timestamp here that will allow us to calculate latency on the perf subscriber side?\nPretty much set it to the same value returned by ConsensusSubmitTransactionSupplier.getMessage()\nIf there's an applicable class that can hold the function for sharing that would be good also.\nI might do this on the acceptance side myself so suggesting it here also.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514435463", "createdAt": "2020-10-29T17:23:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenTransferTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenTransferTransaction;\n+\n+@Builder\n+@Value\n+public class TokenTransferTransactionSupplier implements TransactionSupplier<TokenTransferTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId senderId;\n+    private final AccountId recipientId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final int amount = 1;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public TokenTransferTransaction get() {\n+        return new TokenTransferTransaction()\n+                .addSender(tokenId, senderId, amount)\n+                .addRecipient(tokenId, recipientId, amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Transfer token_\" + Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDQwNQ==", "bodyText": "After some discussion, decided to append an encoded timestamp to the front of all transaction memos in the Suppliers.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514634405", "createdAt": "2020-10-30T00:01:24Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenTransferTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenTransferTransaction;\n+\n+@Builder\n+@Value\n+public class TokenTransferTransactionSupplier implements TransactionSupplier<TokenTransferTransaction> {\n+    //Required\n+    private final TokenId tokenId;\n+    private final AccountId senderId;\n+    private final AccountId recipientId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final int amount = 1;\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Override\n+    public TokenTransferTransaction get() {\n+        return new TokenTransferTransaction()\n+                .addSender(tokenId, senderId, amount)\n+                .addRecipient(tokenId, recipientId, amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Transfer token_\" + Instant.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTQ2Mw=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzM2MzgzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenUpdateTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNDoxMlrOHqmspg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo0MzoxMVrOHqt5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNjI2Mg==", "bodyText": "Missing timestamp which seems to be the convention being establish\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setTransactionMemo(\"Supplier Update token_\");\n          \n          \n            \n                            .setTransactionMemo(\"Supplier Update token_\" +  Instant.now());", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514436262", "createdAt": "2020-10-29T17:24:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenUpdateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenUpdateTransactionSupplier implements TransactionSupplier<TokenUpdateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccountId;\n+    private final TokenId tokenId;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Override\n+    public TokenUpdateTransaction get() {\n+        TokenUpdateTransaction tokenUpdateTransaction = new TokenUpdateTransaction()\n+                .setTokenId(tokenId)\n+                .setSybmol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Update token_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NDI5OA==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514554298", "createdAt": "2020-10-29T20:43:11Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/hts/TokenUpdateTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.hedera.datagenerator.sdk.supplier.hts;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenUpdateTransaction;\n+\n+@Builder\n+@Value\n+public class TokenUpdateTransactionSupplier implements TransactionSupplier<TokenUpdateTransaction> {\n+    //Required\n+    private final AccountId treasuryAccountId;\n+    private final TokenId tokenId;\n+\n+    //Optional\n+    private final Ed25519PublicKey adminKey;\n+    @Builder.Default\n+    private final String symbol = \"HMNT\";\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Override\n+    public TokenUpdateTransaction get() {\n+        TokenUpdateTransaction tokenUpdateTransaction = new TokenUpdateTransaction()\n+                .setTokenId(tokenId)\n+                .setSybmol(symbol)\n+                .setName(symbol + \"_name\")\n+                .setExpirationTime(expirationTime)\n+                .setAutoRenewPeriod(autoRenewPeriod)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTransactionMemo(\"Supplier Update token_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNjI2Mg=="}, "originalCommit": {"oid": "dab5575d0d606af453e5b150ad6432ed98923211"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU3NDQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozMzozMlrOHqySVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowMTo1MFrOHqyzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjEzNQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Base64.encodeBase64String(timeRefBytes) + randomAlphanumeric;\n          \n          \n            \n                    return Utility.getEncodedTimestamp() + \"_\" + randomAlphanumeric;\n          \n      \n    \n    \n  \n\nOr call once and use is both returns\nString encodedTimestamp = Utility.getEncodedTimestamp();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514626135", "createdAt": "2020-10-29T23:33:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;\n+\n+    @Builder.Default\n+    private final int messageSize = 256;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setMessage(getMessage())\n+                .setTopicId(ConsensusTopicId.fromString(topicId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node submitted test message at \" + Instant\n+                        .now());\n+    }\n+\n+    private String getMessage() {\n+        //If a custom message is entered, append the timestamp to the front and leave the message unaltered\n+        if (StringUtils.isNotBlank(message)) {\n+            return Utility.getEncodedTimestamp() + \"_\" + message;\n+        }\n+        //Generate a message from the timestamp and a random alphanumeric String\n+        byte[] timeRefBytes = Longs.toByteArray(Instant.now().toEpochMilli());\n+        int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n+        String randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+        return Base64.encodeBase64String(timeRefBytes) + randomAlphanumeric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDU1MA==", "bodyText": "Went with the call once, use in both approach.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514634550", "createdAt": "2020-10-30T00:01:50Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;\n+\n+    @Builder.Default\n+    private final int messageSize = 256;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+        return new ConsensusMessageSubmitTransaction()\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setMessage(getMessage())\n+                .setTopicId(ConsensusTopicId.fromString(topicId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node submitted test message at \" + Instant\n+                        .now());\n+    }\n+\n+    private String getMessage() {\n+        //If a custom message is entered, append the timestamp to the front and leave the message unaltered\n+        if (StringUtils.isNotBlank(message)) {\n+            return Utility.getEncodedTimestamp() + \"_\" + message;\n+        }\n+        //Generate a message from the timestamp and a random alphanumeric String\n+        byte[] timeRefBytes = Longs.toByteArray(Instant.now().toEpochMilli());\n+        int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n+        String randomAlphanumeric = RandomStringUtils.randomAlphanumeric(additionalBytes);\n+        return Base64.encodeBase64String(timeRefBytes) + randomAlphanumeric;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNjEzNQ=="}, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU5NDc1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenWipeTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0MzozM1rOHqyeAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoxODo0NFrOHqzEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTEyMg==", "bodyText": "I realize we're repeating the encodedTimestamp + message + readable instant time.\nWe could move this into the new Utility class you added and make it easier\n    public static String getTransactionMemo(String message) {\n         return Utility.getEncodedTimestamp() + \"_\" + message + \" at \" + Instant.now();\n     }\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node wiped test token at \" + Instant\n          \n          \n            \n                            .setTransactionMemo(Utility.getTransactionMemo(\"Mirror node wiped test token\"))", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514629122", "createdAt": "2020-10-29T23:43:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenWipeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenWipeTransaction;\n+\n+@Builder\n+@Value\n+public class TokenWipeTransactionSupplier implements TransactionSupplier<TokenWipeTransaction> {\n+    private final String accountId;\n+    private final String tokenId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long amount = 1;\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenWipeTransaction get() {\n+        return new TokenWipeTransaction()\n+                .setAccountId(AccountId.fromString(accountId))\n+                .setAmount(amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTokenId(TokenId.fromString(tokenId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node wiped test token at \" + Instant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODk1NQ==", "bodyText": "Good call, did this for all classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r514638955", "createdAt": "2020-10-30T00:18:44Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenWipeTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.hashgraph.sdk.token.TokenWipeTransaction;\n+\n+@Builder\n+@Value\n+public class TokenWipeTransactionSupplier implements TransactionSupplier<TokenWipeTransaction> {\n+    private final String accountId;\n+    private final String tokenId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long amount = 1;\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public TokenWipeTransaction get() {\n+        return new TokenWipeTransaction()\n+                .setAccountId(AccountId.fromString(accountId))\n+                .setAmount(amount)\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setTokenId(TokenId.fromString(tokenId))\n+                .setTransactionMemo(Utility.getEncodedTimestamp() + \"_Mirror node wiped test token at \" + Instant", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTEyMg=="}, "originalCommit": {"oid": "8a4796d2918952cd55878a3a5ba3dd97c3660f49"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzkwNjIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/common/Utility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxNDo1M1rOHrTmkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0NToyN1rOHrXVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MTk4Nw==", "bodyText": "needs some newlines", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515171987", "createdAt": "2020-10-30T15:14:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/common/Utility.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.datagenerator.common;/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzEyOA==", "bodyText": "Newlines added.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515233128", "createdAt": "2020-10-30T16:45:27Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/common/Utility.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.datagenerator.common;/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MTk4Nw=="}, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODAyNDYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusDeleteTopicTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozOToxMVrOHrUy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzowNjoxMFrOHrYJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MTUwNA==", "bodyText": "Would be simpler if the exception took in the TransactionSupplier object and formatted the message internally.\nthrow new TransactionSupplierException(this, \"topicId\");", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515191504", "createdAt": "2020-10-30T15:39:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusDeleteTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusDeleteTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicDeleteTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicDeleteTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId)) {\n+            throw new TransactionSupplierException(this.getClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0NjUzNw==", "bodyText": "Good call, made this change.  I also moved the required fields list to a static final List field at the top of each class so the calls are identical.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515246537", "createdAt": "2020-10-30T17:06:10Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusDeleteTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicDeleteTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusDeleteTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicDeleteTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicDeleteTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId)) {\n+            throw new TransactionSupplierException(this.getClass()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MTUwNA=="}, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODAzMjA2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0MDo1OFrOHrU3UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0NjoyM1rOHrXX5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MjY1Ng==", "bodyText": "Think this needs a @Builder.Default otherwise it can never be changed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515192656", "createdAt": "2020-10-30T15:40:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzc2Ng==", "bodyText": "Yep, added.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515233766", "createdAt": "2020-10-30T16:46:23Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+    private final String message = StringUtils.EMPTY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MjY1Ng=="}, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODAzNzA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusUpdateTopicTransactionSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0MjowOFrOHrU6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzowMTo1NlrOHrX_TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MzQ0Mg==", "bodyText": "This checks two fields but error only mentions one. Should probably separate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515193442", "createdAt": "2020-10-30T15:42:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusUpdateTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+public class ConsensusUpdateTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicUpdateTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    private final String adminKey;\n+    private final String autoRenewAccountId;\n+\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicUpdateTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId) || StringUtils.isBlank(autoRenewAccountId)) {\n+            throw new TransactionSupplierException(this.getClass()\n+                    .getSimpleName() + \" requires a topicId be provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0Mzg1Mg==", "bodyText": "Yep, copy-paste error, fixed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515243852", "createdAt": "2020-10-30T17:01:56Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusUpdateTopicTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicUpdateTransaction;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PublicKey;\n+\n+@Builder\n+@Value\n+public class ConsensusUpdateTopicTransactionSupplier implements TransactionSupplier<ConsensusTopicUpdateTransaction> {\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    private final String adminKey;\n+    private final String autoRenewAccountId;\n+\n+    @Builder.Default\n+    private final Duration autoRenewPeriod = Duration.ofSeconds(8000000);\n+\n+    @Builder.Default\n+    private final Instant expirationTime = Instant.now().plus(120, ChronoUnit.DAYS);\n+\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000_000;\n+\n+    @Override\n+    public ConsensusTopicUpdateTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId) || StringUtils.isBlank(autoRenewAccountId)) {\n+            throw new TransactionSupplierException(this.getClass()\n+                    .getSimpleName() + \" requires a topicId be provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5MzQ0Mg=="}, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODA1Mjg1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenGrantKYCTransactionSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo0NjowNlrOHrVEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0NDoyMVrOHrXSog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NjAyMQ==", "bodyText": "TokenGrantKycTransactionSupplier to preserve the naming from the SDK and the proto. Same for revoke", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515196021", "createdAt": "2020-10-30T15:46:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenGrantKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenGrantKycTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenGrantKYCTransactionSupplier implements TransactionSupplier<TokenGrantKycTransaction> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjQxOA==", "bodyText": "Renamed both.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515232418", "createdAt": "2020-10-30T16:44:21Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/token/TokenGrantKYCTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.hedera.datagenerator.sdk.supplier.token;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenGrantKycTransaction;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Builder\n+@Value\n+public class TokenGrantKYCTransactionSupplier implements TransactionSupplier<TokenGrantKycTransaction> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NjAyMQ=="}, "originalCommit": {"oid": "ff723c17ca13616cc7e318df25e5d4cc076a7193"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODQ2NjQ2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyOToyOVrOHrZEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyOToyOVrOHrZEVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2MTUyNA==", "bodyText": "nit: It will always be 8 bytes, as it's a long, I should have changed this in the performance side also.\nNo biggie, can change in future PR or if there's a next commit.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n          \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - 8;\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;\n          \n          \n            \n                    int timeByteLength = 8; \n          \n          \n            \n                    int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeByteLength;", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1199#discussion_r515261524", "createdAt": "2020-10-30T17:29:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-datagenerator/src/main/java/com/hedera/datagenerator/sdk/supplier/consensus/ConsensusSubmitMessageTransactionSupplier.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.hedera.datagenerator.sdk.supplier.consensus;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Value;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.hedera.datagenerator.common.Utility;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplier;\n+import com.hedera.datagenerator.sdk.supplier.TransactionSupplierException;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusMessageSubmitTransaction;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+\n+@Builder\n+@Value\n+public class ConsensusSubmitMessageTransactionSupplier implements TransactionSupplier<ConsensusMessageSubmitTransaction> {\n+\n+    private static final List<String> requiredFields = Arrays.asList(\"topicId\");\n+\n+    //Required\n+    private final String topicId;\n+\n+    //Optional\n+    @Builder.Default\n+    private final long maxTransactionFee = 1_000_000;\n+\n+    @Builder.Default\n+    private final String message = StringUtils.EMPTY;\n+\n+    @Builder.Default\n+    private final int messageSize = 256;\n+\n+    @Override\n+    public ConsensusMessageSubmitTransaction get() {\n+\n+        if (StringUtils.isBlank(topicId)) {\n+            throw new TransactionSupplierException(this, requiredFields);\n+        }\n+\n+        return new ConsensusMessageSubmitTransaction()\n+                .setMaxTransactionFee(maxTransactionFee)\n+                .setMessage(getMessage())\n+                .setTopicId(ConsensusTopicId.fromString(topicId))\n+                .setTransactionMemo(Utility.getMemo(\"Mirror node submitted test message\"));\n+    }\n+\n+    private String getMessage() {\n+        String encodedTimestamp = Utility.getEncodedTimestamp();\n+        //If a custom message is entered, append the timestamp to the front and leave the message unaltered\n+        if (StringUtils.isNotBlank(message)) {\n+            return encodedTimestamp + \"_\" + message;\n+        }\n+        //Generate a message from the timestamp and a random alphanumeric String\n+        byte[] timeRefBytes = Longs.toByteArray(Instant.now().toEpochMilli());\n+        int additionalBytes = messageSize <= timeRefBytes.length ? 0 : messageSize - timeRefBytes.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3590c11c15a066e8f09d2bf3871a4d394701ed7"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}