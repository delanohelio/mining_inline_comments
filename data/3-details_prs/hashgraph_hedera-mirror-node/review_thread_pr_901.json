{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mzk2MDg4", "number": 901, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1NDoxNlrOERdcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowOTozN1rOERd5hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzQzNzI5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1NDoxNlrOG2LnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzowODo0OFrOG2Tx0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ==", "bodyText": "nit: the log warning doesn't say why you are ignoring. You should add a reason for easy troubleshooting", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459466601", "createdAt": "2020-07-23T13:54:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwMTc2MA==", "bodyText": "It does, doesn't it? It says it's associated with the previous close interval. You want me to tweak it to say \"the previously processed stream file\"?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459501760", "createdAt": "2020-07-23T14:41:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzcxNg==", "bodyText": "On 2nd read it does. Didn't jump out at me so yeah I'd say \"previously processed stream file\" is more clear.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459593716", "createdAt": "2020-07-23T16:57:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMDMzOQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459600339", "createdAt": "2020-07-23T17:08:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzQ2MzM1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1OTowNVrOG2L3SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NToyN1rOG2VbrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDY2NQ==", "bodyText": "I think you should pull this section into its own method with some comments on the method for clarity.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459470665", "createdAt": "2020-07-23T13:59:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzQzNg==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459627436", "createdAt": "2020-07-23T17:55:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDY2NQ=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzQ5NDk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowNjoxMFrOG2MLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0MzoyMVrOG2VAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA==", "bodyText": "method name seems to be general and therefore not concerned  with file type (balance/record/event), but removeEnd() applied to only Balances.\nYou should either rename the function to highlight Balance or make it work for all 3 types for shared use.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459475790", "createdAt": "2020-07-23T14:06:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNTc4MA==", "bodyText": "The method is named general and does work for all 3 types, as its test shows. True, it's a bit of a hack to do something specific to balance but it saves me from either having 3 different methods or passing in streamtype. Balance file is the only file with an extra suffix of _Balance after the date and before the extension. What do you suggest?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459505780", "createdAt": "2020-07-23T14:46:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwMTU2Mg==", "bodyText": "Yeah the 2 options you noted would have been my 1st suggestions.\nAlthough you only need to add the 1 extra method below right. Then modify this method to take in a String suffix.\npublic static final long getTimestampFromBalanceFile(String filename) { return getTimestampFromFilename(filename, StreamType.BALANCE.getSuffix()); }", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459601562", "createdAt": "2020-07-23T17:10:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNzE0NA==", "bodyText": "Having a concrete method named getTimestampFromBalanceFile means I can no longer use it from the generic Downloader", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459607144", "createdAt": "2020-07-23T17:20:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDQxMQ==", "bodyText": "Used another approach", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459620411", "createdAt": "2020-07-23T17:43:21Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUxMTEwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowOTozN1rOG2MVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0MjoyOVrOG2U-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODM0OA==", "bodyText": "nit: quite the involved setup on files. A few comments might make it easier to read and therefore easier to maintain", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459478348", "createdAt": "2020-07-23T14:09:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -299,15 +302,64 @@ void overwriteOnDownload() throws Exception {\n \n         reset(applicationStatusRepository);\n         // Corrupt the downloaded signatures to test that they get overwritten by good ones on re-download.\n-        Files.walk(downloaderProperties.getSignaturesPath()).filter(this::isSigFile)\n+        Files.walk(downloaderProperties.getSignaturesPath())\n+                .filter(this::isSigFile)\n                 .forEach(AbstractDownloaderTest::corruptFile);\n-        // fileName1 will be used to calculate marker for list request. mockS3 also returns back the marker in the\n-        // results. This is unlike AWS S3 which does not return back the marker.\n-        doReturn(file1).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+        doReturn(\"\").when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         downloader.download();\n         verifyForSuccess();\n     }\n \n+    @Test\n+    @DisplayName(\"Different filenames, same interval\")\n+    void differentFilenamesSameInterval() throws Exception {\n+        differentFilenames(Duration.ofNanos(1L));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, lower bound\")\n+    void differentFilenamesSameIntervalLower() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, upper bound\")\n+    void differentFilenamesSameIntervalUpper() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, previous interval\")\n+    void differentFilenamesPreviousInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, next interval\")\n+    void differentFilenamesNextInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+    }\n+\n+    private void differentFilenames(Duration offset) throws Exception {\n+        fileCopier.filterFiles(file2 + \"*\").copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxOTg4Ng==", "bodyText": "done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459619886", "createdAt": "2020-07-23T17:42:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -299,15 +302,64 @@ void overwriteOnDownload() throws Exception {\n \n         reset(applicationStatusRepository);\n         // Corrupt the downloaded signatures to test that they get overwritten by good ones on re-download.\n-        Files.walk(downloaderProperties.getSignaturesPath()).filter(this::isSigFile)\n+        Files.walk(downloaderProperties.getSignaturesPath())\n+                .filter(this::isSigFile)\n                 .forEach(AbstractDownloaderTest::corruptFile);\n-        // fileName1 will be used to calculate marker for list request. mockS3 also returns back the marker in the\n-        // results. This is unlike AWS S3 which does not return back the marker.\n-        doReturn(file1).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+        doReturn(\"\").when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         downloader.download();\n         verifyForSuccess();\n     }\n \n+    @Test\n+    @DisplayName(\"Different filenames, same interval\")\n+    void differentFilenamesSameInterval() throws Exception {\n+        differentFilenames(Duration.ofNanos(1L));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, lower bound\")\n+    void differentFilenamesSameIntervalLower() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, upper bound\")\n+    void differentFilenamesSameIntervalUpper() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, previous interval\")\n+    void differentFilenamesPreviousInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, next interval\")\n+    void differentFilenamesNextInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+    }\n+\n+    private void differentFilenames(Duration offset) throws Exception {\n+        fileCopier.filterFiles(file2 + \"*\").copy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODM0OA=="}, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 918, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}