{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDk2NzU4", "number": 534, "title": "Add non_fee_transfers table.", "bodyText": "Detailed description:\nA new table is added non_fee_transfers.\nThis is populated (by default) when transactions are parsed/logged that have explicit transfers expressed in the Transaction itself (explicit transfers and initial balances on new entities).\nA new config parameter hedera.mirror.parser.record.persistNonFeeTransfers can be set to true (default false) in order to add rows to non_fee_transfers for all CryptoCreate, CryptoTransfer, ContractCreateInstance and ContractCall transactions.\nWhich issue(s) this PR fixes:\nAddresses the importer-side (not rest-api) of #516\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-02-13T21:29:01Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534", "merged": true, "mergeCommit": {"oid": "b41e3f43873a0d1fb89dd5dac3a1fc254ec090f3"}, "closed": true, "closedAt": "2020-02-18T17:14:24Z", "author": {"login": "mike-burrage-hedera"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEB42ngBqjMwMzY2MDkxMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFldeRgFqTM2MDUwNjM2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0142a82f6509aee40071f9a49c82991e0995d22d", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0142a82f6509aee40071f9a49c82991e0995d22d", "committedDate": "2020-02-13T21:20:38Z", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "bf86931fd4ce3283a2dd8124bef0b918789e560e", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bf86931fd4ce3283a2dd8124bef0b918789e560e", "committedDate": "2020-02-13T21:33:38Z", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd28df67a8c5853cb6061140d6443bd838c63c2d", "committedDate": "2020-02-13T21:55:00Z", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf86931fd4ce3283a2dd8124bef0b918789e560e", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bf86931fd4ce3283a2dd8124bef0b918789e560e", "committedDate": "2020-02-13T21:33:38Z", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}, "afterCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd28df67a8c5853cb6061140d6443bd838c63c2d", "committedDate": "2020-02-13T21:55:00Z", "message": "Add non_fee_transfers table.\nPopulate it from RecordFileLogger.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjM3Mjc5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#pullrequestreview-358637279", "createdAt": "2020-02-14T00:03:49Z", "commit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDowMzo0OVrOFpnxBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDowMzo0OVrOFpnxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ==", "bodyText": "did you want to add an else condition to capture any regressions or new conditions that don't satisfy the above if checks?\nYou can add a warning log to highlight it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379187461", "createdAt": "2020-02-14T00:03:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84", "author": {"user": {"login": "mike-burrage-hedera", "name": "Mike Burrage (Hedera)"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6dedd39f6caaa797acfcc2e9473d5003fe030f84", "committedDate": "2020-02-14T18:35:19Z", "message": "Change setting persistNonFeeTransfersAlways to persisNonFeeTransfers. Either always store them or do not, based on the setting.\n\nSigned-off-by: Mike Burrage <mike.burrage@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTU2MDk4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#pullrequestreview-359156098", "createdAt": "2020-02-14T19:05:44Z", "commit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTowNTo0NFrOFqAr5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxODo1N1rOFqBCOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTc1MA==", "bodyText": "Gotcha", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379595750", "createdAt": "2020-02-14T19:05:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/NonFeeTransferExtractionStrategyImpl.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.springframework.stereotype.Component;\n+import java.util.LinkedList;\n+\n+/**\n+ * Extract non_fee_transfers requested by a transaction into an iterable list of transfers.\n+ */\n+@Component\n+public class NonFeeTransferExtractionStrategyImpl implements NonFeeTransferExtractionStrategy {\n+    /**\n+     * Return a list of non-fee transfer amounts for certain transaction types. These are explicitly requested\n+     * transfers.\n+     * @param payerAccountId\n+     * @param body\n+     * @param transactionRecord\n+     * @return\n+     */\n+    @Override\n+    public Iterable<AccountAmount> extractNonFeeTransfers(AccountID payerAccountId, TransactionBody body,\n+                                                          TransactionRecord transactionRecord) {\n+        LinkedList<AccountAmount> result = new LinkedList<>();\n+        if (body.hasCryptoTransfer()) {\n+            for (var accountAmount : body.getCryptoTransfer().getTransfers().getAccountAmountsList()) {\n+                result.add(accountAmount);\n+            }\n+        } else if (body.hasCryptoCreateAccount()) {\n+            var amount = body.getCryptoCreateAccount().getInitialBalance();\n+            var newAccountId = transactionRecord.getReceipt().getAccountID();\n+            result.add(AccountAmount.newBuilder().setAccountID(newAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCreateInstance()) {\n+            var amount = body.getContractCreateInstance().getInitialBalance();\n+            var contractAccountId = contractIdToAccountId(transactionRecord.getReceipt().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        } else if (body.hasContractCall()) {\n+            var amount = body.getContractCall().getAmount();\n+            var contractAccountId = contractIdToAccountId(body.getContractCall().getContractID());\n+            result.add(AccountAmount.newBuilder().setAccountID(contractAccountId).setAmount(amount).build());\n+            result.add(AccountAmount.newBuilder().setAccountID(payerAccountId).setAmount(0 - amount).build());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NzQ2MQ=="}, "originalCommit": {"oid": "bd28df67a8c5853cb6061140d6443bd838c63c2d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTQ2Ng==", "bodyText": "Did we want an index with EntityNum and Amount?\nNot sure how much traffic we expect to see on the repository call for this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r379601466", "createdAt": "2020-02-14T19:18:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.18.0__non_fee_transfers.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+-- No primary key.\n+-- Table is insert-only (not update), and there's no natural primary key so this is faster on insert and smaller\n+-- footprint.\n+create table non_fee_transfers\n+(\n+    consensus_timestamp nanos_timestamp  not null,\n+    realm_num           entity_realm_num not null,\n+    entity_num          entity_num       not null,\n+    amount              hbar_tinybars    not null\n+);\n+comment on table non_fee_transfers is\n+    'non-fee-related explicitly requested transfers for CryptoTransfer, CryptoCreate, ContractCreate, and ContractCall';\n+\n+create index if not exists idx__non_fee_transfers__cts on non_fee_transfers (consensus_timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTA2MzY2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#pullrequestreview-360506366", "createdAt": "2020-02-18T16:54:23Z", "commit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1NDoyM1rOFrKYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo1MlrOFrLzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzI1Ng==", "bodyText": "Shouldn't we add an auto-generated primary key anyway like we need to add to do on t_cryptotransferlists to make it faster to replicate?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380803256", "createdAt": "2020-02-18T16:54:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NonFeeTransfer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Data;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Data\n+@Entity\n+@Table(name = \"non_fee_transfers\")\n+public class NonFeeTransfer {\n+    // There is not actually a pk on non_fee_transfers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM3Mw==", "bodyText": "Can these be consolidated into one now?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/534#discussion_r380826373", "createdAt": "2020-02-18T17:33:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/CryptoTransferRepository.java", "diffHunk": "@@ -28,4 +28,6 @@\n \n public interface CryptoTransferRepository extends CrudRepository<CryptoTransfer, Long> {\n     Optional<CryptoTransfer> findByConsensusTimestampAndEntityNum(Long consensusTimestamp, Long entityNum);\n+    Optional<CryptoTransfer> findByConsensusTimestampAndEntityNumAndAmount(Long consensusTimestamp, Long entityNum,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dedd39f6caaa797acfcc2e9473d5003fe030f84"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3243, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}