{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTk3MzE3", "number": 1075, "title": "Add a Redis HCS topic listener", "bodyText": "Detailed description:\n\nAdd a RedisEntityListener that uses Redis Pub/Sub to notify the gRPC component of new topic messages\nAdd a RedisTopicListener that consumes topic message notifications from Redis Pub/Sub\nAdd a hedera.mirror.subscribers gauge metric that tracks the current number of active subscribers\nChange bufferTimeout from a number to Duration\n\nWhich issue(s) this PR fixes:\nFixes #893\nSpecial notes for your reviewer:\nHelm chart updates will be done in a follow-up\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-09-24T17:34:17Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075", "merged": true, "mergeCommit": {"oid": "99b91e6135ad80dd3d93150dcfed49aaa091ca61"}, "closed": true, "closedAt": "2020-09-30T22:17:25Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMEmRagH2gAyNDkyNTk3MzE3OmZhYjEzNTZlZGY5YWM1ZTRmYjI3MmYxZTVmMzljM2I3OWI0YTc0ZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOC8_OAFqTQ5OTc5MzEzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fab1356edf9ac5e4fb272f1e5f39c3b79b4a74d3", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fab1356edf9ac5e4fb272f1e5f39c3b79b4a74d3", "committedDate": "2020-09-24T17:25:45Z", "message": "Add a Redis HCS topic listener\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11bdf97fc71d864a800b808dd861b798baac6c1", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f11bdf97fc71d864a800b808dd861b798baac6c1", "committedDate": "2020-09-24T17:49:33Z", "message": "Add Redis to CircleCI\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b1211b184fee41fa749fd9631ed278791a8f95d6", "committedDate": "2020-09-24T19:03:51Z", "message": "Set Redis URL for CircleCI\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTAzNjQ3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#pullrequestreview-495903647", "createdAt": "2020-09-24T19:53:15Z", "commit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1Mzo0NlrOHXqYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDozNjo1MFrOHXruqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MzYzMg==", "bodyText": "nit: Redis and general messages not just topic messages\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `hedera.mirror.importer.parser.record.entity.redis.enabled`                 | true                    | Whether to use PostgreSQL Notify to send topic messages to the gRPC process                    |\n          \n          \n            \n            | `hedera.mirror.importer.parser.record.entity.redis.enabled`                 | true                    | Whether to use Redis Notify to send messages to the gRPC process                    |", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494573632", "createdAt": "2020-09-24T19:53:46Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -81,6 +81,7 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.parser.record.entity.persist.nonFeeTransfers`       | false                   | Persist non-fee transfers for transactions that explicitly request hbar transfers              |\n | `hedera.mirror.importer.parser.record.entity.persist.systemFiles`           | true                    | Persist only system files (number lower than `1000`) to the database                           |\n | `hedera.mirror.importer.parser.record.entity.persist.transactionBytes`      | false                   | Persist raw transaction bytes to the database                                                  |\n+| `hedera.mirror.importer.parser.record.entity.redis.enabled`                 | true                    | Whether to use PostgreSQL Notify to send topic messages to the gRPC process                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY5OQ==", "bodyText": "Should make this Configuration either entity agnostic or specific to TopicMessages in name i.e. RedisConfiguration <T> or RedisTopicMessageConfiguration\nThis was we have a foundation for reuse when we need to expand what we notify out", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494575699", "createdAt": "2020-09-24T19:57:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.grpc.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.msgpack.jackson.dataformat.MessagePackFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.ReactiveRedisConnectionFactory;\n+import org.springframework.data.redis.core.ReactiveRedisOperations;\n+import org.springframework.data.redis.core.ReactiveRedisTemplate;\n+import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.RedisSerializationContext;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+import org.springframework.data.redis.serializer.StringRedisSerializer;\n+\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+\n+@Configuration\n+@RequiredArgsConstructor\n+public class RedisConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3ODY5NA==", "bodyText": "Can the log distinguish between Cancelled and Complete subscriptions.\nOr have an OnCancel() and OnComplete() with appropriate log that call unsubscribe()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494578694", "createdAt": "2020-09-24T20:03:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/RedisTopicListener.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.hedera.mirror.grpc.listener;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.data.redis.connection.ReactiveSubscription.Message;\n+import org.springframework.data.redis.listener.ChannelTopic;\n+import org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainer;\n+import org.springframework.data.redis.listener.Topic;\n+import org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.mirror.grpc.GrpcProperties;\n+import com.hedera.mirror.grpc.domain.TopicMessage;\n+import com.hedera.mirror.grpc.domain.TopicMessageFilter;\n+\n+@Log4j2\n+@Named\n+public class RedisTopicListener extends SharedTopicListener {\n+\n+    private final GrpcProperties grpcProperties;\n+    private final ReactiveRedisMessageListenerContainer container;\n+    private final SerializationPair<String> channelSerializer;\n+    private final SerializationPair<TopicMessage> messageSerializer;\n+    private final Map<String, Flux<TopicMessage>> topicMessages; // Topic name to active subscription\n+\n+    public RedisTopicListener(GrpcProperties grpcProperties,\n+                              ListenerProperties listenerProperties,\n+                              ReactiveRedisMessageListenerContainer container,\n+                              RedisSerializer<TopicMessage> redisSerializer) {\n+        super(listenerProperties);\n+        this.grpcProperties = grpcProperties;\n+        this.container = container;\n+        this.channelSerializer = SerializationPair.fromSerializer(RedisSerializer.string());\n+        this.messageSerializer = SerializationPair.fromSerializer(redisSerializer);\n+        this.topicMessages = new ConcurrentHashMap<>();\n+    }\n+\n+    @Override\n+    protected Flux<TopicMessage> getSharedListener(TopicMessageFilter filter) {\n+        Topic topic = getTopic(filter);\n+        return topicMessages.computeIfAbsent(topic.getTopic(), key -> subscribe(topic))\n+                .doOnSubscribe(s -> log.info(\"Subscribing: {}\", filter));\n+    }\n+\n+    private Topic getTopic(TopicMessageFilter filter) {\n+        return ChannelTopic.of(String.format(\"topic.%d.%d.%d\",\n+                grpcProperties.getShard(), filter.getRealmNum(), filter.getTopicNum()));\n+    }\n+\n+    private Flux<TopicMessage> subscribe(Topic topic) {\n+        Duration frequency = listenerProperties.getFrequency();\n+\n+        return container.receive(Arrays.asList(topic), channelSerializer, messageSerializer)\n+                .map(Message::getMessage)\n+                .name(\"redis\")\n+                .metrics()\n+                .publishOn(Schedulers.boundedElastic())\n+                .doOnCancel(() -> unsubscribe(topic))\n+                .doOnComplete(() -> unsubscribe(topic))\n+                .doOnError(t -> log.error(\"Error listening for messages\", t))\n+                .doOnSubscribe(s -> log.info(\"Creating shared subscription to {}\", topic))\n+                .retryWhen(Retry.backoff(Long.MAX_VALUE, frequency).maxBackoff(frequency.multipliedBy(4L)))\n+                .share();\n+    }\n+\n+    private void unsubscribe(Topic topic) {\n+        topicMessages.remove(topic.getTopic());\n+        log.info(\"Cancelled shared subscription to {}\", topic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzY0Nw==", "bodyText": "Same shared configuration note on this one as previously", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494583647", "createdAt": "2020-09-24T20:13:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RedisConfiguration.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.msgpack.jackson.dataformat.MessagePackFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.data.redis.core.RedisOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n+import org.springframework.data.redis.serializer.RedisSerializer;\n+\n+import com.hedera.mirror.importer.domain.TopicMessage;\n+\n+@Configuration\n+public class RedisConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4NjU5Nw==", "bodyText": "The class notes the general EntityId but is only applicable for AccountID.\nThis should probably be renamed to AbstractEntityIdDeserializer, then have an AccountIdDeserializer that extends this and passes in EntityTypeEnum.ACCOUNT\nSimilar to was we do with the EntityIdConverters", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494586597", "createdAt": "2020-09-24T20:19:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/EntityIdDeserializer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.hedera.mirror.importer.converter;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import java.io.IOException;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+public class EntityIdDeserializer extends JsonDeserializer<EntityId> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NTc1Mw==", "bodyText": "Currently we support multiple listener options at the same time, should we consider making a list of enabled listeners e.g.\nhedera.mirror.importer.parser.record.entity.listeners = [REPOSITORY, SQL, PGNOTIFY, REDIS] That way there's no need to add an enabled configuration every time we add a new entity listener, as is the case with  hedera.mirror.importer.parser.record.entity.redis.enabled`", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r494595753", "createdAt": "2020-09-24T20:36:50Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -81,6 +81,7 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.parser.record.entity.persist.nonFeeTransfers`       | false                   | Persist non-fee transfers for transactions that explicitly request hbar transfers              |\n | `hedera.mirror.importer.parser.record.entity.persist.systemFiles`           | true                    | Persist only system files (number lower than `1000`) to the database                           |\n | `hedera.mirror.importer.parser.record.entity.persist.transactionBytes`      | false                   | Persist raw transaction bytes to the database                                                  |\n+| `hedera.mirror.importer.parser.record.entity.redis.enabled`                 | true                    | Whether to use PostgreSQL Notify to send topic messages to the gRPC process                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1211b184fee41fa749fd9631ed278791a8f95d6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b232c572dd04cfe8589f4bf9180d4f94c6671e84", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b232c572dd04cfe8589f4bf9180d4f94c6671e84", "committedDate": "2020-09-25T19:01:05Z", "message": "Fix failing on startup if Redis is down\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/679ac1a0dd51eef380dd4d4ab5b0cf882a3325e2", "committedDate": "2020-09-28T16:02:41Z", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd", "committedDate": "2020-09-29T22:28:58Z", "message": "Fix tests and switch back to notify by default\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzY0MTM0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#pullrequestreview-499764134", "createdAt": "2020-09-30T19:56:08Z", "commit": {"oid": "f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NjoxMVrOHatGng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTo1NjoxMVrOHatGng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2Mzk5OA==", "bodyText": "Weren't you supposed to leave the default as NOTIFY allowing to be configured to REDIS on demand. Then when you add the Helm stuff then change this to REDIS as default?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#discussion_r497763998", "createdAt": "2020-09-30T19:56:11Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -155,12 +156,12 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.db.username`                            | mirror_grpc      | The username the GRPC API uses to connect to the database                                      |\n | `hedera.mirror.grpc.endTimeInterval`                        | 30s              | How often we should check if a subscription has gone past the end time                         |\n | `hedera.mirror.grpc.entityCacheSize`                        | 50000            | The maximum size of the cache to store entities used for existence check                       |\n-| `hedera.mirror.grpc.listener.bufferTimeout`                 | 4000             | The time in milliseconds to wait for a client to receive all buffered messages after buffer overflow. On timeout, server will send an error |\n+| `hedera.mirror.grpc.listener.bufferTimeout`                 | 4s               | The time to wait for a client to receive all buffered messages after buffer overflow. On timeout, server will send an error. Can accept duration units like `50ms`, `10s`, etc. |\n | `hedera.mirror.grpc.listener.enabled`                       | true             | Whether to listen for incoming massages or not                                                 |\n | `hedera.mirror.grpc.listener.frequency`                     | 500ms            | How often to poll or retry errors (varies by type). Can accept duration units like `50ms`, `10s`, etc. |\n | `hedera.mirror.grpc.listener.maxBufferSize`                 | 16384            | The maximum number of messages the notifying listener or the shared polling listener buffers before sending an error to a client |\n | `hedera.mirror.grpc.listener.maxPageSize`                   | 5000             | The maximum number of messages the listener can return in a single call to the database        |\n-| `hedera.mirror.grpc.listener.type`                          | NOTIFY           | The type of listener to use for incoming messages. Accepts either NOTIFY, POLL or SHARED_POLL  |\n+| `hedera.mirror.grpc.listener.type`                          | REDIS            | The type of listener to use for incoming messages. Accepts either NOTIFY, POLL, REDIS or SHARED_POLL |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8907bf0c911d2f79748a6d5c32cbe4f1d7162bd"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9336f8943e54685ceaadcf40a9db3ba3b09118f", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e9336f8943e54685ceaadcf40a9db3ba3b09118f", "committedDate": "2020-09-30T20:16:21Z", "message": "Switch grpc back to notify\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzkzMTM1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1075#pullrequestreview-499793135", "createdAt": "2020-09-30T20:38:36Z", "commit": {"oid": "e9336f8943e54685ceaadcf40a9db3ba3b09118f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3554, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}