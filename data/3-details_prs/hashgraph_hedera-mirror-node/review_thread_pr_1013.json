{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjI4MDc1", "number": 1013, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0Nzo1OVrOEgDVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1MDo1OFrOEgGJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ0NTEwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0Nzo1OVrOHMs3tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjo0NjozOVrOHMvNDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDExNg==", "bodyText": "Is this a valid scenario? When would we ever pass in a null NodeAddressBook? Should this rather throw?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483080116", "createdAt": "2020-09-03T15:47:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -220,26 +225,52 @@ private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTime\n      */\n     private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n                                                                               long consensusTimestamp) {\n-        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n-\n-        if (nodeAddressBook != null) {\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n-                        .consensusTimestamp(consensusTimestamp)\n-                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n-                        .nodeId(nodeAddressProto.getNodeId())\n-                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n-                        .build();\n-                builder.add(addressBookEntry);\n-            }\n+        if (nodeAddressBook == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d969f28a851ee463399b402e39bea7068c85f1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExODM0OQ==", "bodyText": "The change here is a refactor of the original negative check nodeAddressBook != null.\nIndeed the check is redundant since the only place retrieveNodeAddressesFromAddressBook is called has already made sure nodeAddressBook is not NULL. I'll remove the null check here then.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483118349", "createdAt": "2020-09-03T16:46:39Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -220,26 +225,52 @@ private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTime\n      */\n     private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n                                                                               long consensusTimestamp) {\n-        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n-\n-        if (nodeAddressBook != null) {\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n-                        .consensusTimestamp(consensusTimestamp)\n-                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n-                        .nodeId(nodeAddressProto.getNodeId())\n-                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n-                        .build();\n-                builder.add(addressBookEntry);\n-            }\n+        if (nodeAddressBook == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDExNg=="}, "originalCommit": {"oid": "c8d969f28a851ee463399b402e39bea7068c85f1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDg5NjY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo0ODoxOFrOHMxTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1NzoyM1rOHNRA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MjcxNw==", "bodyText": "I don't think the implementation of this is correct. It's also unnecessarily complex and uses reflection. Both nodeId and port are primitives, so the hasField() implementation returns true if they don't equal the default value (which is zero for both). However, zero is still a valid value for these fields so we still want to set it if it's zero (e.g. testnet's node 0-3).\nI think we can revert to previous logic and use some smarter conditional logic to control them being set. For port, I think it's safe to assume that the main nodes aren't going to use port zero so we can just not set it if it's zero. For nodeId, we can first collect all nodeIds into a set and only set nodeId if the size of that set is greater than one.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483152717", "createdAt": "2020-09-03T17:48:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -220,26 +225,48 @@ private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTime\n      */\n     private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n                                                                               long consensusTimestamp) {\n-        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n-\n-        if (nodeAddressBook != null) {\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n-                        .consensusTimestamp(consensusTimestamp)\n-                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n-                        .nodeId(nodeAddressProto.getNodeId())\n-                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n-                        .build();\n-                builder.add(addressBookEntry);\n-            }\n+        ImmutableList.Builder<AddressBookEntry> listBuilder = ImmutableList.builder();\n+\n+        for (NodeAddress nodeAddressProto : nodeAddressBook.getNodeAddressList()) {\n+            AddressBookEntry.AddressBookEntryBuilder builder = AddressBookEntry.builder()\n+                    .consensusTimestamp(consensusTimestamp);\n+\n+            nodeAddressFieldDescriptors.stream()\n+                    .filter(nodeAddressProto::hasField)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b47fb9ed2cb967a83408b38b013bd2e4563dd9c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MjI3OQ==", "bodyText": "thanks. reverted the changes and implemented the new logic", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483672279", "createdAt": "2020-09-04T14:57:23Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -220,26 +225,48 @@ private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTime\n      */\n     private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n                                                                               long consensusTimestamp) {\n-        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n-\n-        if (nodeAddressBook != null) {\n-            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                    .getNodeAddressList()) {\n-                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n-                        .consensusTimestamp(consensusTimestamp)\n-                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n-                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                        .port(nodeAddressProto.getPortno())\n-                        .publicKey(nodeAddressProto.getRSAPubKey())\n-                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n-                        .nodeId(nodeAddressProto.getNodeId())\n-                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n-                        .build();\n-                builder.add(addressBookEntry);\n-            }\n+        ImmutableList.Builder<AddressBookEntry> listBuilder = ImmutableList.builder();\n+\n+        for (NodeAddress nodeAddressProto : nodeAddressBook.getNodeAddressList()) {\n+            AddressBookEntry.AddressBookEntryBuilder builder = AddressBookEntry.builder()\n+                    .consensusTimestamp(consensusTimestamp);\n+\n+            nodeAddressFieldDescriptors.stream()\n+                    .filter(nodeAddressProto::hasField)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1MjcxNw=="}, "originalCommit": {"oid": "5b47fb9ed2cb967a83408b38b013bd2e4563dd9c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDkwNTc4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1MDo1OFrOHMxZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1NzoyOVrOHNRBHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NDIwNA==", "bodyText": "This test and addressBookWithEmptyAddressBookEntryFields() are very hard to understand and not maintainable. It'd be much simpler to just NodeAddressBook.newBuilder().ip()...build() all fields manually except nodeId and port then assert the current address book has null for those fields.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483154204", "createdAt": "2020-09-03T17:50:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "diffHunk": "@@ -335,9 +344,103 @@ void verifyAddressBookEndPointsAreSet() {\n         assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n     }\n \n+    @Test\n+    void verifyAddressBookWithEmptyAddressBookEntryFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b47fb9ed2cb967a83408b38b013bd2e4563dd9c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MjM0OQ==", "bodyText": "test cases updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1013#discussion_r483672349", "createdAt": "2020-09-04T14:57:29Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImplTest.java", "diffHunk": "@@ -335,9 +344,103 @@ void verifyAddressBookEndPointsAreSet() {\n         assertThat(prevAddressBook.getEndConsensusTimestamp()).isNotNull();\n     }\n \n+    @Test\n+    void verifyAddressBookWithEmptyAddressBookEntryFields() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NDIwNA=="}, "originalCommit": {"oid": "5b47fb9ed2cb967a83408b38b013bd2e4563dd9c"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1614, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}