{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTQ4ODQx", "number": 971, "title": "Adding AWS AssumeRole support to Importer", "bodyText": "Detailed description:\n\nNew properties added for aws sts to get token\nReworked s3 client config to use the new credential provider when needed\n\nWhich issue(s) this PR fixes:\nFixes #900\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-08-20T01:58:03Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971", "merged": true, "mergeCommit": {"oid": "2b90dbecc4d142de06cc68076218b1c3b39d3262"}, "closed": true, "closedAt": "2020-08-25T05:10:02Z", "author": {"login": "ijungmann"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAmSaEAH2gAyNDcwNTQ4ODQxOmFkMDZiMzE1MGY2MmIzYTBlYTVjOTFiZDljMDFkZjk3ZjEzNzlmZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCMPXuAFqTQ3NDAxNzUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ad06b3150f62b3a0ea5c91bd9c01df97f1379ffd", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ad06b3150f62b3a0ea5c91bd9c01df97f1379ffd", "committedDate": "2020-08-20T01:53:44Z", "message": "Adding AWS AssumeRole support to Importer\n - New properties added for aws sts to get token\n - Reworked s3 client config to use the new credential provider when needed\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28a65161e5db2dd4bc939764e820e4044e0e7be", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e28a65161e5db2dd4bc939764e820e4044e0e7be", "committedDate": "2020-08-20T05:40:19Z", "message": "Adding documentation to the config md\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561151240c7aac4fefe8f9eb50a9eccddc5a772a", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/561151240c7aac4fefe8f9eb50a9eccddc5a772a", "committedDate": "2020-08-20T05:56:30Z", "message": "Removing unused code\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1a7b8f5bf03afeb808cc52d614601e0fe16e2b56", "committedDate": "2020-08-21T00:35:52Z", "message": "Adding new config to the helm chart\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNTY1NTQw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-472565540", "createdAt": "2020-08-21T15:00:29Z", "commit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMDoyOVrOHEwp5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxNDo1OVrOHEzNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzUwOA==", "bodyText": "We've been keeping all properties sorted alphabetically.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474753508", "createdAt": "2020-08-21T15:00:29Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTc0NA==", "bodyText": "Since these are S3 specific, let's create a public static class S3 nested class and a private final S3 s3 = new S3(); field here to contain them so they have a s3 in their property path.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474755744", "createdAt": "2020-08-21T15:03:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -60,6 +61,12 @@ public String getBucketName() {\n \n     private String gcpProjectId;\n \n+    private String roleArn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NzYxMQ==", "bodyText": "Misspelled. Can just shorten to AWS", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474757611", "createdAt": "2020-08-21T15:06:51Z", "author": {"login": "steven-sheehy"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MTU4NA==", "bodyText": "Misspelled. Can just shorten to AWS", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474761584", "createdAt": "2020-08-21T15:13:51Z", "author": {"login": "steven-sheehy"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.\n+    title: Importer AWS role ARN\n+  importer.config.hedera.mirror.importer.downloader.externalId:\n+    type: string\n+    description: The Amazone Web Services external id for the role to assume, if one is needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTQ0NQ==", "bodyText": "No need to pass these parameters since downloaderProperties is a class member. Mixing the two approaches doesn't make sense.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474765445", "createdAt": "2020-08-21T15:20:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {\n+            clientBuilder.credentialsProvider(\n+                    awsAssumeRoleCredentialsProvider(downloaderProperties.getAccessKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzc2OA==", "bodyText": "There should be a space after if. Please ensure you:\n\n\nInstall EditorConfig plugin\n\n\nInstall Save Actions plugin\n\n\nConfigure it\n\n\n\nHave default IDE code style for Java (editorconfig should provide most formatting)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474773768", "createdAt": "2020-08-21T15:33:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NTY2Nw==", "bodyText": "I think this is a little tricky to understand the interplay between all these configs. Please add a sub-section to the importer config section above with instructions on what AWS assume role is and how to configure and use it with an example fake config.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474775667", "createdAt": "2020-08-21T15:37:18Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |\n+| `hedera.mirror.importer.downloader.externalId`                       |                         | The external id required to assume the role to connect to S3, if one was set                   |\n+| `hedera.mirror.importer.downloader.roleSessionName`                  | hedera-mirror-node      | A session name for assuming the role to access S3.                                             |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMwOQ==", "bodyText": "Log a statement indicating setting up credentials with AWS Assume Role.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474777309", "createdAt": "2020-08-21T15:40:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {\n+            assumeRoleRequestBuilder.externalId(downloaderProperties.getExternalId());\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw==", "bodyText": "Instead of if statements, it would make more sense to use @ConditionalOnProperty and construct different AwsCredentialsProvider depending upon property values being present. That is, we should have 3 beans of type AwsCredentialsProvider each with different @ConditionalOnProperty. If need be, assume role can be marked primary. It may also make sense to use a nested config class to group by cloudprovider", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474789443", "createdAt": "2020-08-21T16:03:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDc0NA==", "bodyText": "Can this work with anonymous credentials? If not, please throw an error if accessKey or secret key empty.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474794744", "createdAt": "2020-08-21T16:13:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NTM2Nw==", "bodyText": "Code reuse is good, but in this case reusing awsCredentialsProvider() cause a log statement to indicate the wrong credentials were used to setup the client. Also it may not work with anonymous creds. It may be better to just use StaticCredentialsProvider directly.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474795367", "createdAt": "2020-08-21T16:14:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjM3MDQy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-472637042", "createdAt": "2020-08-21T16:41:34Z", "commit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0MTozNFrOHE0Bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NjoyOVrOHE0LJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODc0Mw==", "bodyText": "nit: accessKey, secretKey and region are all pulled from the downloaderProperties which you use in here to get roleArn, roleSessionName and externalId.\nProbably no need to pass them in, that was it makes it consistent and makes for a shorter call.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474808743", "createdAt": "2020-08-21T16:41:34Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDAyMw==", "bodyText": "nit: we like to order these alphabetically. So these 3 probably won't end up side by side. Probably would be like this\nhedera.mirror.importer.downloader.endpointOverride\nhedera.mirror.importer.downloader.externalId\n...\nhedera.mirror.importer.downloader.region\nhedera.mirror.importer.downloader.roleArn\nhedera.mirror.importer.downloader.roleSessionName", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474810023", "createdAt": "2020-08-21T16:44:22Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTE3NA==", "bodyText": "nit: order alphabetically\nimporter.config.hedera.mirror.importer.downloader.endpointOverride\n...\nimporter.config.hedera.mirror.importer.downloader.roleArn\nimporter.config.hedera.mirror.importer.downloader.roleSessionName", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474811174", "createdAt": "2020-08-21T16:46:29Z", "author": {"login": "Nana-EC"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "248f09e9f4c3288b1a29481dfe2639adc86175b4", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/248f09e9f4c3288b1a29481dfe2639adc86175b4", "committedDate": "2020-08-21T21:30:00Z", "message": "Changes for PR comments (documentation and properties rework)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ef6901c1d64dc0258259766732e97cdd2f82df", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/27ef6901c1d64dc0258259766732e97cdd2f82df", "committedDate": "2020-08-21T21:43:22Z", "message": "Addressing PR comments (Config logic change and add exception)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd687072bfcab251046ba1dcc4b1e9e57670ab6", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7cd687072bfcab251046ba1dcc4b1e9e57670ab6", "committedDate": "2020-08-21T22:09:40Z", "message": "PR Comments (fixing bugs)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a041ed72b38c899e9654b75afcdfc51f6f6b7f1", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5a041ed72b38c899e9654b75afcdfc51f6f6b7f1", "committedDate": "2020-08-21T22:15:38Z", "message": "PR Comments (Adding log when assuming role)\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "committedDate": "2020-08-21T22:23:41Z", "message": "Clarifying documentation and logs\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3a9825a1d0d278480e510e530325cac1db31b7c", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e3a9825a1d0d278480e510e530325cac1db31b7c", "committedDate": "2020-08-21T22:18:49Z", "message": "Clarifying documentation and logs"}, "afterCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7ec71ed534bf2d8c822042aba0d74c9c0ec535db", "committedDate": "2020-08-21T22:23:41Z", "message": "Clarifying documentation and logs\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODY0Njgx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-472864681", "createdAt": "2020-08-21T23:25:36Z", "commit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoyNTozNlrOHFAPgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoyNjoyM1rOHFAQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA==", "bodyText": "from AWS SDK doc, an assumeRole session has a duration; S3 calls will fail once the session expires. so we also need to support assumeRole session refresh.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475008898", "createdAt": "2020-08-21T23:25:36Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +145,32 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider() {\n+        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n+        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n+                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n+            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n+        }\n+\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n+                .region(Region.of(downloaderProperties.getRegion()))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getS3().getRoleArn())\n+                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTA1MA==", "bodyText": "copyright header", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475009050", "createdAt": "2020-08-21T23:26:23Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/MissingCredentialsException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.mirror.importer.exception;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e05b9f8a13cbf17ec2e64ddac650416dc38d67", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e6e05b9f8a13cbf17ec2e64ddac650416dc38d67", "committedDate": "2020-08-22T00:36:27Z", "message": "Reworking credential provider to be created as a conditional bean\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e871f4b5e9355aef156527cba4bb5a6bfffa65", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/b5e871f4b5e9355aef156527cba4bb5a6bfffa65", "committedDate": "2020-08-22T00:55:48Z", "message": "Adding copyright and fixing class name typo\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d980ec6f960f2494e4bc283b43be100dce05f16", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4d980ec6f960f2494e4bc283b43be100dce05f16", "committedDate": "2020-08-24T12:41:58Z", "message": "Adding Condition unit tests to confirm boolean logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6714bcda8bea4b5671cc1cf5bcbc106089894e3a", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6714bcda8bea4b5671cc1cf5bcbc106089894e3a", "committedDate": "2020-08-24T15:29:08Z", "message": "Tests and code style fixes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNjcxMjI3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-473671227", "createdAt": "2020-08-24T16:38:24Z", "commit": {"oid": "6714bcda8bea4b5671cc1cf5bcbc106089894e3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzkxNzcx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-473791771", "createdAt": "2020-08-24T19:25:08Z", "commit": {"oid": "6714bcda8bea4b5671cc1cf5bcbc106089894e3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MDE3NTM2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#pullrequestreview-474017536", "createdAt": "2020-08-25T00:40:44Z", "commit": {"oid": "6714bcda8bea4b5671cc1cf5bcbc106089894e3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3054, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}