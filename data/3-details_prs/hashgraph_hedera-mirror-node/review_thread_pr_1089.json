{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTc4MDM3", "number": 1089, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NjowNVrOEpMpgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Mzo1MlrOEqz46g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjM0MzA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenBalance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NjowNVrOHaurGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0NjowNVrOHaurGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc4OTcyMw==", "bodyText": "Removing this so as not to conflict w Ian's PR", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497789723", "createdAt": "2020-09-30T20:46:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenBalance.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.Serializable;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+@Entity\n+\n+public class TokenBalance implements Persistable<TokenBalance.Id> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjM1NDQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0OToyMVrOHaux-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMDo0OToyMVrOHaux-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5MTQ4MA==", "bodyText": "Add a tokenUpdate tests in EntityRecordItemListenerTokenTest.java", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497791480", "createdAt": "2020-09-30T20:49:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -166,6 +190,32 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n                         txRecord.getReceipt().getFileID(), transactionType);\n             } else if (body.hasFileUpdate()) {\n                 insertFileUpdate(consensusNs, body.getFileUpdate(), transactionType);\n+            } else if (body.hasTokenAssociate()) {\n+                insertTokenAssociate(consensusNs, body);\n+            } else if (body.hasTokenBurn()) {\n+                insertTokenBurn(consensusNs, body);\n+            } else if (body.hasTokenCreation()) {\n+                insertTokenCreate(consensusNs, txRecord, body);\n+            } else if (body.hasTokenDeletion()) {\n+                insertTokenDelete(consensusNs, body);\n+            } else if (body.hasTokenDissociate()) {\n+                insertTokenDissociate(consensusNs, body);\n+            } else if (body.hasTokenFreeze()) {\n+                insertTokenAccountFreezeBody(consensusNs, body);\n+            } else if (body.hasTokenGrantKyc()) {\n+                insertTokenAccountGrantKyc(consensusNs, body);\n+            } else if (body.hasTokenMint()) {\n+                insertTokenMint(consensusNs, body);\n+            } else if (body.hasTokenRevokeKyc()) {\n+                insertTokenAccountRevokeKyc(consensusNs, body);\n+            } else if (body.hasTokenTransfers()) {\n+                insertTokenTransfers(consensusNs, txRecord);\n+            } else if (body.hasTokenUnfreeze()) {\n+                insertTokenAccountUnfreeze(consensusNs, body);\n+            } else if (body.hasTokenUpdate()) {\n+                insertTokenUpdate(consensusNs, body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ1NTY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyMDoxM1rOHavvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyMDoxM1rOHavvjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzI0NA==", "bodyText": "remove and use enum. Here and below", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497807244", "createdAt": "2020-09-30T21:20:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +430,262 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ5NDA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozMjoyOVrOHawGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozMjoyOVrOHawGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxMzA4OA==", "bodyText": "remove tokens and tokenAccounts lists for now as we save immediately", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497813088", "createdAt": "2020-09-30T21:32:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -124,6 +139,9 @@ public SqlEntityListener(SqlProperties sqlProperties, DataSource dataSource,\n         liveHashes = new ArrayList<>();\n         entityIds = new HashSet<>();\n         topicMessages = new ArrayList<>();\n+        tokens = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjUwMzI1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozNTo0N1rOHawMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozNTo0N1rOHawMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNDU1NA==", "bodyText": "Add conditional check and add expiry set", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497814554", "createdAt": "2020-09-30T21:35:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        entity.setAutoRenewPeriod(txMessage.getAutoRenewPeriod());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjUwODIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUpdateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozNzoyOVrOHawPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozNzoyOVrOHawPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNTMwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (txMessage.getExpiry() != 0) {\n          \n          \n            \n                    if (txMessage.getAutoRenewPeriod() != 0) {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497815305", "createdAt": "2020-09-30T21:37:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUpdateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenUpdateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenUpdateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenUpdate().getToken());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenUpdateTransactionBody txMessage = recordItem.getTransactionBody().getTokenUpdate();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getExpiry() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjUwOTY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/TokenBalanceRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozODowMFrOHawP4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTozODowMFrOHawP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNTUyMw==", "bodyText": "Delete to not conflict with Ian", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r497815523", "createdAt": "2020-09-30T21:38:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/TokenBalanceRepository.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+import com.hedera.mirror.importer.domain.TokenBalance;\n+\n+public interface TokenBalanceRepository extends CrudRepository<TokenBalance, TokenBalance.Id> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebbfc8b815fdf4ca4df8ea34334fb75f2113434"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDA1NzI3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjozMTozNlrOHbSYMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowODo0OFrOHb-TNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3NDcwNQ==", "bodyText": "Should exclude the hex form as well as it will be quite large. Might be simpler to put the @ToString.Exclude annotation on the fields with this many.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498374705", "createdAt": "2020-10-01T16:31:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDMyNg==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094326", "createdAt": "2020-10-03T00:08:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3NDcwNQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDE2NzY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowNTo0MFrOHbTiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowODo1NFrOHb-TQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MzYxNA==", "bodyText": "Since both clients that use this catch and return null, let's just change the Utility implementation to do so. Then you can use utility directly and don't need wrapper convertByteKeyToHex", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498393614", "createdAt": "2020-10-01T17:05:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {\n+        if (kycKey == null) {\n+            return TokenKycStatus.KycNotApplicable_VALUE;\n+        }\n+\n+        return TokenKycStatus.Revoked_VALUE;\n+    }\n+\n+    private String convertByteKeyToHex(byte[] key) {\n+        try {\n+            return Utility.protobufKeyToHexIfEd25519OrNull(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDMzOA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094338", "createdAt": "2020-10-03T00:08:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {\n+        if (kycKey == null) {\n+            return TokenKycStatus.KycNotApplicable_VALUE;\n+        }\n+\n+        return TokenKycStatus.Revoked_VALUE;\n+    }\n+\n+    private String convertByteKeyToHex(byte[] key) {\n+        try {\n+            return Utility.protobufKeyToHexIfEd25519OrNull(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5MzYxNA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDE3MTUyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowNzowNlrOHbTksQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowOTowMVrOHb-TWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDI4OQ==", "bodyText": "We don't need an embedded id if it's not a composite key. Just use EntityId directly.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498394289", "createdAt": "2020-10-01T17:07:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {\n+        if (kycKey == null) {\n+            return TokenKycStatus.KycNotApplicable_VALUE;\n+        }\n+\n+        return TokenKycStatus.Revoked_VALUE;\n+    }\n+\n+    private String convertByteKeyToHex(byte[] key) {\n+        try {\n+            return Utility.protobufKeyToHexIfEd25519OrNull(key);\n+        } catch (Exception e) {\n+            log.error(\"Invalid ED25519 key could not be translated to hex text for entity {}. Field \" +\n+                    \"will be nulled\", tokenId, e);\n+            return null;\n+        }\n+    }\n+\n+    @Data\n+    @Embeddable\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    public static class Id implements Serializable {\n+\n+        private static final long serialVersionUID = -4595724698253758379L;\n+\n+        @Convert(converter = TokenIdConverter.class)\n+        @JsonSerialize(using = EntityIdSerializer.class)\n+        private EntityId tokenId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NjgwOA==", "bodyText": "Left over logic, meant to change", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498996808", "createdAt": "2020-10-02T18:55:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {\n+        if (kycKey == null) {\n+            return TokenKycStatus.KycNotApplicable_VALUE;\n+        }\n+\n+        return TokenKycStatus.Revoked_VALUE;\n+    }\n+\n+    private String convertByteKeyToHex(byte[] key) {\n+        try {\n+            return Utility.protobufKeyToHexIfEd25519OrNull(key);\n+        } catch (Exception e) {\n+            log.error(\"Invalid ED25519 key could not be translated to hex text for entity {}. Field \" +\n+                    \"will be nulled\", tokenId, e);\n+            return null;\n+        }\n+    }\n+\n+    @Data\n+    @Embeddable\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    public static class Id implements Serializable {\n+\n+        private static final long serialVersionUID = -4595724698253758379L;\n+\n+        @Convert(converter = TokenIdConverter.class)\n+        @JsonSerialize(using = EntityIdSerializer.class)\n+        private EntityId tokenId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDI4OQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDM2Mg==", "bodyText": "Remembered now, hit the issue last week where the Converter wasn't getting honored for @id.\nLeaving as is as discussed offline since as you noted it's not possible with JPA spec - eclipse-ee4j/jpa-api#207", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094362", "createdAt": "2020-10-03T00:09:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {\n+        if (kycKey == null) {\n+            return TokenKycStatus.KycNotApplicable_VALUE;\n+        }\n+\n+        return TokenKycStatus.Revoked_VALUE;\n+    }\n+\n+    private String convertByteKeyToHex(byte[] key) {\n+        try {\n+            return Utility.protobufKeyToHexIfEd25519OrNull(key);\n+        } catch (Exception e) {\n+            log.error(\"Invalid ED25519 key could not be translated to hex text for entity {}. Field \" +\n+                    \"will be nulled\", tokenId, e);\n+            return null;\n+        }\n+    }\n+\n+    @Data\n+    @Embeddable\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    public static class Id implements Serializable {\n+\n+        private static final long serialVersionUID = -4595724698253758379L;\n+\n+        @Convert(converter = TokenIdConverter.class)\n+        @JsonSerialize(using = EntityIdSerializer.class)\n+        private EntityId tokenId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NDI4OQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDE3NjQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzowODo0MlrOHbToEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowOToxN1rOHb-TgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NTE1Mw==", "bodyText": "We shouldn't import protobuf classes into domain classes. We should create our own enum for kyc status and  freeze status and make the domain classes use those.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498395153", "createdAt": "2020-10-01T17:08:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDQwMQ==", "bodyText": "Done. Created our own TokenFreezeStatusEnum and TokenKycStatusEnum", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094401", "createdAt": "2020-10-03T00:09:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")\n+    private String wipeKeyEd25519Hex;\n+\n+    public void setInitialSupply(Long initialSupply) {\n+        this.initialSupply = initialSupply;\n+\n+        // default totalSupply to initial supply\n+        totalSupply = initialSupply;\n+    }\n+\n+    public void setFreezeKey(byte[] key) {\n+        freezeKey = key;\n+        freezeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setKycKey(byte[] key) {\n+        kycKey = key;\n+        kycKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setSupplyKey(byte[] key) {\n+        supplyKey = key;\n+        supplyKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    public void setWipeKey(byte[] key) {\n+        wipeKey = key;\n+        wipeKeyEd25519Hex = convertByteKeyToHex(key);\n+    }\n+\n+    // FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+    // If the token does not have Freeze key, FreezeNotApplicable is returned, if not take value of freezeDefault\n+\n+    /**\n+     * Get initial freeze status for an account being associated with this token. If the token does not have a\n+     * freezeKey, FreezeNotApplicable is returned, if it does account frozen status is set based on freezeDefault.\n+     * FreezeNotApplicable = 0, Frozen = 1, Unfrozen = 2\n+     *\n+     * @return Freeze status code\n+     */\n+    public int getNewAccountFreezeStatus() {\n+        if (freezeKey == null) {\n+            return TokenFreezeStatus.FreezeNotApplicable_VALUE;\n+        }\n+\n+        return freezeDefault ? TokenFreezeStatus.Frozen_VALUE : TokenFreezeStatus.Unfrozen_VALUE;\n+    }\n+\n+    /**\n+     * Get initial kyc status for an account being associated with this token. If the token does not have a kycKey,\n+     * KycNotApplicable is returned, if it does account should be set to Revoked as kyc must be performed.\n+     * KycNotApplicable = 0, Granted = 1, Revoked = 2\n+     *\n+     * @return Kyc status code\n+     */\n+    public int getNewAccountKycStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5NTE1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDMzMzM1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo1NjoxN1rOHbVN5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowOToyMlrOHb-Tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTIyMg==", "bodyText": "We should use primitives for non-null numbers like initialSupply and totalSupply.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498421222", "createdAt": "2020-10-01T17:56:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDQxOQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094419", "createdAt": "2020-10-03T00:09:22Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTIyMg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDMzNDA0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo1NjozMFrOHbVOaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowOToyOFrOHb-TpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTM1Mw==", "bodyText": "Would prefer fields sorted by name.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498421353", "createdAt": "2020-10-01T17:56:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDQzNw==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094437", "createdAt": "2020-10-03T00:09:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTM1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDMzNjY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo1NzoyMlrOHbVQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowOTo0MlrOHb-Tug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTgxNA==", "bodyText": "This is a bigint in the schema. Should the schema be changed or this changed to long?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498421814", "createdAt": "2020-10-01T17:57:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MzUzOA==", "bodyText": "This should be a long, schema is right", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498953538", "createdAt": "2020-10-02T17:26:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTgxNA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDQ1OA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094458", "createdAt": "2020-10-03T00:09:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTgxNA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDM0MTAxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo1ODo0NlrOHbVTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo0Njo1MFrOHb4G8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMjU2MQ==", "bodyText": "Should we rename as wipe_key_ed_25519_hex so we don't have to manually map?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498422561", "createdAt": "2020-10-01T17:58:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1Mzg4OQ==", "bodyText": "Yes, that would be cleaner", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498953889", "createdAt": "2020-10-02T17:27:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMjU2MQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5Mjg4Mw==", "bodyText": "wipe_key_ed_25519_hex would actually still require a mapping as hibernate translates wipeKeyEd25519Hex to wipe_key_ed25519hex.\nIf we want to avoid manual mapping we either set the schema to wipe_key_ed25519hex or rename the member to be wipeKeyHexEd25519 and schema to be wipe_key_hex_ed25519", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498992883", "createdAt": "2020-10-02T18:46:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Token.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.TokenFreezeStatus;\n+import com.hederahashgraph.api.proto.java.TokenKycStatus;\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+@ToString(exclude = {\"freezeKey\", \"kycKey\", \"supplyKey\", \"wipeKey\"})\n+public class Token {\n+    @EmbeddedId\n+    private Token.Id tokenId;\n+\n+    private long createdTimestamp;\n+\n+    private int decimals;\n+\n+    private boolean freezeDefault;\n+\n+    private byte[] freezeKey;\n+\n+    private Long initialSupply;\n+\n+    private Long totalSupply; // Increment with initialSupply and mint amounts, decrement with burn amount\n+\n+    private byte[] kycKey;\n+\n+    private long modifiedTimestamp;\n+\n+    private String name;\n+\n+    private byte[] supplyKey;\n+\n+    private String symbol;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId treasuryAccountId;\n+\n+    private byte[] wipeKey;\n+\n+    @Column(name = \"freeze_key_ed25519_hex\")\n+    private String freezeKeyEd25519Hex;\n+\n+    @Column(name = \"kyc_key_ed25519_hex\")\n+    private String kycKeyEd25519Hex;\n+\n+    @Column(name = \"supply_key_ed25519_hex\")\n+    private String supplyKeyEd25519Hex;\n+\n+    @Column(name = \"wipe_key_ed25519_hex\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMjU2MQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk5NjI3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1MjozNFrOHbb9Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDowMVrOHb-T9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTYxOQ==", "bodyText": "Should use enums for status", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498531619", "createdAt": "2020-10-01T21:52:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+public class TokenAccount {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId accountId;\n+\n+    private boolean associated;\n+\n+    private long createdTimestamp;\n+\n+    private int freezeStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDUxNg==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094516", "createdAt": "2020-10-03T00:10:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+public class TokenAccount {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Convert(converter = AccountIdConverter.class)\n+    private EntityId accountId;\n+\n+    private boolean associated;\n+\n+    private long createdTimestamp;\n+\n+    private int freezeStatus;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMTYxOQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTAzODc1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoxNDowMlrOHbcYUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDoxOVrOHb-UJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzODU3Ng==", "bodyText": "We should avoid doing conditional logic based upon nulls. Would prefer taking advantage of the optional returned by the repo and chaining to ifPresent().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498538576", "createdAt": "2020-10-01T22:14:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDU2NQ==", "bodyText": "Can do", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094565", "createdAt": "2020-10-03T00:10:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzODU3Ng=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM3NjA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenAssociateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNTozMVrOHbzQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDoyNlrOHb-UMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzUxOA==", "bodyText": "This should probably return the account id being associated to allow clients to filter transactions by that entity id and relate it to the transaction.entity_id.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498913518", "createdAt": "2020-10-02T16:05:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenAssociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenAssociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NDYxNA==", "bodyText": "Can't return one account Id since TokenAssociate can be applied to multiple accounts at a time", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498954614", "createdAt": "2020-10-02T17:28:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenAssociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenAssociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzUxOA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTU1Mw==", "bodyText": "Actually, it's the opposite. 1 Account -> Many tokens.\nWill return the Account entity in this case then.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498961553", "createdAt": "2020-10-02T17:43:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenAssociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenAssociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzUxOA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDU3OA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094578", "createdAt": "2020-10-03T00:10:26Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenAssociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenAssociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMzUxOA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM4MTIyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenDissociateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNzoxNFrOHbzUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDozMVrOHb-UOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDM1Mw==", "bodyText": "This should probably return the account id being associated to allow clients to filter transactions by that entity id and relate it to the transaction.entity_id.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498914353", "createdAt": "2020-10-02T16:07:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenDissociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenDissociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NDkyOQ==", "bodyText": "Can't return one account Id since TokenDissociate can be applied to multiple accounts at a time", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498954929", "createdAt": "2020-10-02T17:29:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenDissociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenDissociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDM1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MTYyNA==", "bodyText": "Actually, it's the opposite. 1 Account -> Many tokens.\nWill return the Account entity in this case then.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498961624", "createdAt": "2020-10-02T17:43:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenDissociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenDissociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDM1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDU4NA==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094584", "createdAt": "2020-10-03T00:10:31Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenDissociateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenDissociateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNDM1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM4NTU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowODozMlrOHbzW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDozOFrOHb-USg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNTA0NQ==", "bodyText": "nit: Would prefer a variable name that represents the thing it's holding. e.g. tokenCreateTransactionBody, transactionBody, body.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498915045", "createdAt": "2020-10-02T16:08:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDYwMg==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094602", "createdAt": "2020-10-03T00:10:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNTA0NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzM5NTk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxMTo1MlrOHbzdeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo0ODo1N1rOHcwTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjcyOA==", "bodyText": "Not an issue with your code, but autoRenewPeriod is modeled as a Duration in ConsensusCreateTopic and a uint64 here. Can we ask Michael if this can be switched to Duration?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498916728", "createdAt": "2020-10-02T16:11:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getAutoRenewPeriod() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMzQ3Mg==", "bodyText": "Requested", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499913472", "createdAt": "2020-10-05T22:48:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getAutoRenewPeriod() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjcyOA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQwMjAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxMzo0OVrOHbzhXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMjo0OTowNlrOHcwTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzcyNw==", "bodyText": "Should we ask services to model this as a Timestamp?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498917727", "createdAt": "2020-10-02T16:13:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getAutoRenewPeriod() != 0) {\n+            entity.setAutoRenewPeriod(txMessage.getAutoRenewPeriod());\n+        }\n+\n+        if (txMessage.getExpiry() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1ODU2Mg==", "bodyText": "Yeah, probably better for consistency across entities to just do Timestamp.\nI also need to change this to pull ns as looks like expiry is in epoch seconds", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498958562", "createdAt": "2020-10-02T17:37:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getAutoRenewPeriod() != 0) {\n+            entity.setAutoRenewPeriod(txMessage.getAutoRenewPeriod());\n+        }\n+\n+        if (txMessage.getExpiry() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzcyNw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMzUxNA==", "bodyText": "Requested", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499913514", "createdAt": "2020-10-05T22:49:06Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));\n+        }\n+\n+        if (txMessage.getAutoRenewPeriod() != 0) {\n+            entity.setAutoRenewPeriod(txMessage.getAutoRenewPeriod());\n+        }\n+\n+        if (txMessage.getExpiry() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzcyNw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQwNzAxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenFreezeTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNToyM1rOHbzkiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMDo1MlrOHb-UZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODUzNg==", "bodyText": "Should this be the token or the account? We're not freezing the token we're freezing the account's use of this token. Or more generically, this action is modifying the account not the token.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498918536", "createdAt": "2020-10-02T16:15:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenFreezeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenFreezeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenFreeze().getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Nzg3OA==", "bodyText": "Yeah, I think the confusion comes from the fact that the real thing being modified is the TokenAccount not the Account or the Token in the Freeze/Kyc cases. That's the info that should be extracted on a getEntity.\nNeither Account nor Token are modified by these cases and so it's a toss up in terms of which one to return.\nEither ways you'd need the other for full visibility.\nI think the right thing in a future refactor would be to return the appropriate entity of TokenAccount.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498967878", "createdAt": "2020-10-02T17:57:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenFreezeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenFreezeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenFreeze().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODUzNg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDYzMQ==", "bodyText": "Went ahead and returned Account type", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094631", "createdAt": "2020-10-03T00:10:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenFreezeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenFreezeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenFreeze().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODUzNg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQxMjM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenGrantKycTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNzowMFrOHbzn5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMToxOFrOHb-Upw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxOTM5OQ==", "bodyText": "Should this be the token or the account for the same reasons as above?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498919399", "createdAt": "2020-10-02T16:17:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenGrantKycTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenGrantKycTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenGrantKyc().getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDY5NQ==", "bodyText": "Changed to Account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094695", "createdAt": "2020-10-03T00:11:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenGrantKycTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenGrantKycTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenGrantKyc().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxOTM5OQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQyNDgzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenRevokeKycTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMDo1N1rOHbzvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMToyM1rOHb-UtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMTQyMg==", "bodyText": "Should this be the token or the account for the same reasons as above?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498921422", "createdAt": "2020-10-02T16:20:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenRevokeKycTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenRevokeKycTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenRevokeKyc().getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDcwOQ==", "bodyText": "Changed to Account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094709", "createdAt": "2020-10-03T00:11:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenRevokeKycTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenRevokeKycTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenRevokeKyc().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMTQyMg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQyOTcwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUnfreezeTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMjozNFrOHbzzBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMTozMFrOHb-Uwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjI0Nw==", "bodyText": "Should this be the token or the account for the same reasons as above?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498922247", "createdAt": "2020-10-02T16:22:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUnfreezeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenUnfreezeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenUnfreeze().getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDcyMg==", "bodyText": "Changed to Account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094722", "createdAt": "2020-10-03T00:11:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUnfreezeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenUnfreezeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenUnfreeze().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjI0Nw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQzMjc4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUpdateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMzo0MFrOHbz1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMTozNlrOHb-Uzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjc4MQ==", "bodyText": "Move to transactionHandler.getAutoRenewAccount()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498922781", "createdAt": "2020-10-02T16:23:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUpdateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenUpdateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenUpdateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenUpdate().getToken());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenUpdateTransactionBody txMessage = recordItem.getTransactionBody().getTokenUpdate();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDczNQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094735", "createdAt": "2020-10-03T00:11:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenUpdateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenUpdateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenUpdateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenUpdate().getToken());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenUpdateTransactionBody txMessage = recordItem.getTransactionBody().getTokenUpdate();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjc4MQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQzMzI1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyMzo1MVrOHbz1cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMTo0MFrOHb-U2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjg2NQ==", "bodyText": "Move to transactionHandler.getAutoRenewAccount()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498922865", "createdAt": "2020-10-02T16:23:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDc0NA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094744", "createdAt": "2020-10-03T00:11:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenCreateTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.hederahashgraph.api.proto.java.TokenCreateTransactionBody;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.Entities;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenCreateTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getRecord().getReceipt().getTokenId());\n+    }\n+\n+    @Override\n+    public boolean updatesEntity() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void updateEntity(Entities entity, RecordItem recordItem) {\n+        TokenCreateTransactionBody txMessage = recordItem.getTransactionBody().getTokenCreation();\n+        if (txMessage.hasAdminKey()) {\n+            entity.setKey(txMessage.getAdminKey().toByteArray());\n+        }\n+\n+        if (txMessage.hasAutoRenewAccount()) {\n+            entity.setAutoRenewAccountId(EntityId.of(txMessage.getAutoRenewAccount()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMjg2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQzNjM4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenWipeTransactionsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoyNDo1M1rOHbz3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1OTo0OFrOHcn4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzM1MQ==", "bodyText": "Should this be the token or the account for the same reasons as above?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498923351", "createdAt": "2020-10-02T16:24:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenWipeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenWipeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenWipe().getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Mzk1Ng==", "bodyText": "This one is honestly both. So not sure.\nWipe will burn the number of tokens an account has but also deplore the totalSupply of the actual Token", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499093956", "createdAt": "2020-10-03T00:05:58Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenWipeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenWipeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenWipe().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzM1MQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NTYxOQ==", "bodyText": "Left this as token", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499775619", "createdAt": "2020-10-05T17:59:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/transactionhandler/TokenWipeTransactionsHandler.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.parser.record.transactionhandler;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+@Named\n+@AllArgsConstructor\n+public class TokenWipeTransactionsHandler implements TransactionHandler {\n+    @Override\n+    public EntityId getEntity(RecordItem recordItem) {\n+        return EntityId.of(recordItem.getTransactionBody().getTokenWipe().getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyMzM1MQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzQ1MjM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjozMDowNVrOHb0Bxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMTo0OVrOHb-U5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNjAyMw==", "bodyText": "We don't make use of this id, right? To save space and time it might be better to switch to a composite primary key.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498926023", "createdAt": "2020-10-02T16:30:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+public class TokenAccount {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2ODU4Mw==", "bodyText": "Yeah, it's unused. Composite would be more appropriate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498968583", "createdAt": "2020-10-02T17:58:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+public class TokenAccount {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNjAyMw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDc1OA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499094758", "createdAt": "2020-10-03T00:11:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+public class TokenAccount {\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNjAyMw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzUyNDI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/TokenRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo1Mzo1N1rOHb0vdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxNzo1M1rOHb-YJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNzcxNg==", "bodyText": "This is brittle. What's wrong with using assertThat(expected).isEqualTo(actual) and using ignoringGivenFields if needed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498937716", "createdAt": "2020-10-02T16:53:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/TokenRepositoryTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.importer.repository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import com.google.protobuf.ByteString;\n+import com.hederahashgraph.api.proto.java.Key;\n+import javax.annotation.Resource;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.junit.jupiter.api.Test;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.Token;\n+\n+public class TokenRepositoryTest extends AbstractRepositoryTest {\n+    @Resource\n+    protected TokenRepository tokenRepository;\n+\n+    private final EntityId FOO_COIN_ID = EntityId.of(\"0.0.101\", EntityTypeEnum.TOKEN);\n+    String key = \"0011223344556677889900aabbccddeeff0011223344556677889900aabbccddeeff\";\n+    private final EntityId treasuryAccount = EntityId.of(\"0.0.102\", EntityTypeEnum.ACCOUNT);\n+\n+    @Test\n+    void save() throws DecoderException {\n+        Token token = tokenRepository.save(token(1));\n+        tokenMatch(token, tokenRepository.findById(token.getTokenId())\n+                .get());\n+    }\n+\n+    private Token token(long consensusTimestamp) throws DecoderException {\n+        var hexKey = Key.newBuilder().setEd25519(ByteString.copyFrom(Hex.decodeHex(key))).build().toByteArray();\n+        Token token = new Token();\n+        token.setCreatedTimestamp(1L);\n+        token.setDecimals(1000);\n+        token.setFreezeDefault(false);\n+        token.setFreezeKey(hexKey);\n+        token.setInitialSupply(1_000_000_000L);\n+        token.setKycKey(hexKey);\n+        token.setModifiedTimestamp(3L);\n+        token.setName(\"FOO COIN TOKEN\");\n+        token.setSupplyKey(hexKey);\n+        token.setSymbol(\"FOOTOK\");\n+        token.setTokenId(new Token.Id(FOO_COIN_ID));\n+        token.setTreasuryAccountId(treasuryAccount);\n+        token.setWipeKey(hexKey);\n+        return token;\n+    }\n+\n+    private void tokenMatch(Token expected, Token actual) {\n+        assertAll(\n+                () -> assertNotNull(actual),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NTU5MQ==", "bodyText": "Actually can just do a isEqualTo without ignoring anything", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499095591", "createdAt": "2020-10-03T00:17:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/TokenRepositoryTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.hedera.mirror.importer.repository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import com.google.protobuf.ByteString;\n+import com.hederahashgraph.api.proto.java.Key;\n+import javax.annotation.Resource;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.junit.jupiter.api.Test;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.Token;\n+\n+public class TokenRepositoryTest extends AbstractRepositoryTest {\n+    @Resource\n+    protected TokenRepository tokenRepository;\n+\n+    private final EntityId FOO_COIN_ID = EntityId.of(\"0.0.101\", EntityTypeEnum.TOKEN);\n+    String key = \"0011223344556677889900aabbccddeeff0011223344556677889900aabbccddeeff\";\n+    private final EntityId treasuryAccount = EntityId.of(\"0.0.102\", EntityTypeEnum.ACCOUNT);\n+\n+    @Test\n+    void save() throws DecoderException {\n+        Token token = tokenRepository.save(token(1));\n+        tokenMatch(token, tokenRepository.findById(token.getTokenId())\n+                .get());\n+    }\n+\n+    private Token token(long consensusTimestamp) throws DecoderException {\n+        var hexKey = Key.newBuilder().setEd25519(ByteString.copyFrom(Hex.decodeHex(key))).build().toByteArray();\n+        Token token = new Token();\n+        token.setCreatedTimestamp(1L);\n+        token.setDecimals(1000);\n+        token.setFreezeDefault(false);\n+        token.setFreezeKey(hexKey);\n+        token.setInitialSupply(1_000_000_000L);\n+        token.setKycKey(hexKey);\n+        token.setModifiedTimestamp(3L);\n+        token.setName(\"FOO COIN TOKEN\");\n+        token.setSupplyKey(hexKey);\n+        token.setSymbol(\"FOOTOK\");\n+        token.setTokenId(new Token.Id(FOO_COIN_ID));\n+        token.setTreasuryAccountId(treasuryAccount);\n+        token.setWipeKey(hexKey);\n+        return token;\n+    }\n+\n+    private void tokenMatch(Token expected, Token actual) {\n+        assertAll(\n+                () -> assertNotNull(actual),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNzcxNg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzU3NDM5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzoxMDo0MFrOHb1PPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDo0MDowN1rOHb-jfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NTg1Mw==", "bodyText": "These two repository calls will definitely slow things down. I haven't had time to verify if multiple calls to save will be internally batched. This might be fine for now but we'll need to revisit this next sprint.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498945853", "createdAt": "2020-10-02T17:10:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -239,6 +255,21 @@ public void onLiveHash(LiveHash liveHash) throws ImporterException {\n         liveHashes.add(liveHash);\n     }\n \n+    @Override\n+    public void onToken(Token token) throws ImporterException {\n+        tokenRepository.save(token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5ODQ5Mg==", "bodyText": "Agreed. This is best path to get the ball rolling but we definitely need to scale.\nChallenge is each update needs to ensure it has the correct information  from current state before updating.\ne.g. A token gets created with a freeze and Kyc settings to default to FROZEN and REVOKED.\nAn account then Associates itself with the token, it will be frozen and revoked.\nSay accounts it gets Unfrozen and then soon after gets GrantedKyc.\nWe need to make sure the persistence for the KycGrant picks the fact that it was unfrozen and doesn't accidentally revert the freeze state change.\nThat's why for now I'm just saving immediately, just like Entity updates do.\nCurrently using Spring cache so this should give us some breathing room to explore the right solution for Accounts and Tokens", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499098492", "createdAt": "2020-10-03T00:40:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -239,6 +255,21 @@ public void onLiveHash(LiveHash liveHash) throws ImporterException {\n         liveHashes.add(liveHash);\n     }\n \n+    @Override\n+    public void onToken(Token token) throws ImporterException {\n+        tokenRepository.save(token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NTg1Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY2MjM1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0MDozMlrOHb2HFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMzowODowM1rOHcEFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDE0OA==", "bodyText": "Would be cleaner to pass only RecordItem to all methods as it already contains the necessary fields and will be more encapsulated for future refactoring. I was tempted to do that for existing methods at one point but didn't want the code churn at the time, but since this is new it might make more sense to start here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r498960148", "createdAt": "2020-10-02T17:40:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -166,6 +192,32 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n                         txRecord.getReceipt().getFileID(), transactionType);\n             } else if (body.hasFileUpdate()) {\n                 insertFileUpdate(consensusNs, body.getFileUpdate(), transactionType);\n+            } else if (body.hasTokenAssociate()) {\n+                insertTokenAssociate(consensusNs, body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTQwOQ==", "bodyText": "Was trying to stick to the best practice of passing only the necessary objects in and not redoing conversion work that was already done e.g consensus time extraction.\nRecordItem contains SignatureMap, and not all transactions need the TransactionRecord.\nThough making it more uniform does set the ground work for encapsulating these methods in the appropriate classes later on.\nHow about a shared signature of the below?\nprivate void insertTransactionType(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499099409", "createdAt": "2020-10-03T00:46:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -166,6 +192,32 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n                         txRecord.getReceipt().getFileID(), transactionType);\n             } else if (body.hasFileUpdate()) {\n                 insertFileUpdate(consensusNs, body.getFileUpdate(), transactionType);\n+            } else if (body.hasTokenAssociate()) {\n+                insertTokenAssociate(consensusNs, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDE0OA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjI1Mw==", "bodyText": "All the methods in RecordItem are already converted at this point as it's an immutable object. There's no penalty to pay for calling any of its getters. The getConsensusTimestamp() is a lazy getter and the protos are parsed.\nThere's a slight difference in that consensusNs = Utility.timeStampInNanos(txRecord.getConsensusTimestamp()) and recordItem.getConsensusTimestamp() is Utility.timestampInNanosMax(record.getConsensusTimestamp()), but either approach is equivalent for consensus timestamp in records.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499112253", "createdAt": "2020-10-03T03:40:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -166,6 +192,32 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n                         txRecord.getReceipt().getFileID(), transactionType);\n             } else if (body.hasFileUpdate()) {\n                 insertFileUpdate(consensusNs, body.getFileUpdate(), transactionType);\n+            } else if (body.hasTokenAssociate()) {\n+                insertTokenAssociate(consensusNs, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDE0OA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4OTA4Mw==", "bodyText": "Works for me. Will update them to all to take in RecordItem.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499189083", "createdAt": "2020-10-03T23:08:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -166,6 +192,32 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n                         txRecord.getReceipt().getFileID(), transactionType);\n             } else if (body.hasFileUpdate()) {\n                 insertFileUpdate(consensusNs, body.getFileUpdate(), transactionType);\n+            } else if (body.hasTokenAssociate()) {\n+                insertTokenAssociate(consensusNs, body);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2MDE0OA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMwMjI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo0Mzo0MFrOHb8ZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1MjoyMVrOHcnnqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ==", "bodyText": "All token Ids need to be passed to onEntityId(). All accounts do as well but that should be taken care of by generic handler.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499063065", "createdAt": "2020-10-02T21:43:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTYzNg==", "bodyText": "They already are by the OnItem(). That's how the Entity is added to t_entities.\nSo far as the TransactionHandler implements the getEntity() method then it's covered in that sense", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499099636", "createdAt": "2020-10-03T00:48:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMzI3MA==", "bodyText": "So with my original configuration all these transaction handlers would have had the Token Entity passed to the OnEntityId in the OnItem().\nMy guess is you're going off of your previous suggestions to change some of them to return the Account not Token. In which case I would now have to explicitly  can OnEntityId for which ever of the 2 wasn't covered.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499103270", "createdAt": "2020-10-03T01:27:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMzYyNA==", "bodyText": "This makes me think TransactionHandler interfaces getEntity(RecordItem recordItem) should be swapped/updated to either return all applicable entities or return an entity of a requested type for a given RecordItem. i.e.\nList<EntityId> getEntities(RecordItem recordItem);\n\nor\nEntityId getEntity(RecordItem recordItem, EntityTypeEnum entityTypeEnum);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499103624", "createdAt": "2020-10-03T01:31:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTExMjU4Ng==", "bodyText": "While the current approach is not ideal, I don't think that is a good approach either since it's a Ask Don't Tell. What we eventually want is for the transaction handlers to extract the domain objects and call EntityListener for each one.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499112586", "createdAt": "2020-10-03T03:46:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MTMwNw==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499771307", "createdAt": "2020-10-05T17:52:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2MzA2NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMxNTYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1MTowOVrOHb8hTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozNzozNlrOHcuqRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTE2Nw==", "bodyText": "I don't think we should waste performance updating a timestamp when no other fields on that tokenaccount changed. We should treat the timestamp as audit info that only gets updated when a field on it changes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499065167", "createdAt": "2020-10-02T21:51:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 351}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5OTgxMg==", "bodyText": "Fair enough. In that case Wipe operations will be a no-op for TokenAccounts", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499099812", "createdAt": "2020-10-03T00:50:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTE2Nw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 351}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NjY2MA==", "bodyText": "Actually wipe has an amount which currently needs to be deducted from the token totalSupply. Updating that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499886660", "createdAt": "2020-10-05T21:37:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTE2Nw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMxNzk2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1MjoyMlrOHb8isg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1MzowMFrOHcnpIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTUyMg==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499065522", "createdAt": "2020-10-02T21:52:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMDAyMw==", "bodyText": "Token is already passed through in OnItem.\nWe shouldn't need to repass Account because it will always be a valid already create account and no Token transactions affect the actual Hedera account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499100023", "createdAt": "2020-10-03T00:52:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTUyMg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MTY4MQ==", "bodyText": "Updating to have all TokenId's/AccountId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499771681", "createdAt": "2020-10-05T17:53:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTUyMg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMyMDk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1NDowMlrOHb8kmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1MzowOVrOHcnpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjAxMA==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499066010", "createdAt": "2020-10-02T21:54:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMDA4OA==", "bodyText": "Token is already passed through in OnItem.\nWe shouldn't need to repass Account because it will always be a valid already create account and no Token transactions affect the actual Hedera account", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499100088", "createdAt": "2020-10-03T00:52:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjAxMA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MTc3OQ==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499771779", "createdAt": "2020-10-05T17:53:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjAxMA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMyNTIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1NjoyM1rOHb8nHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo0NDowOVrOHcu1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjY1NQ==", "bodyText": "We should create it if it's not returned from the database. All methods that use this object should remove null check. This is how we handle the only other updateable object Entities. In theory it should never happen that we get a freeze/grant/revoke/unfreeze without an associate first, but if we have a stream reset like at OA it is possible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499066655", "createdAt": "2020-10-02T21:56:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMTY0MA==", "bodyText": "Hmm, as is we won't have sufficient information to create an appropriate TokenAccount.\nfreeze/grant/revoke/unfreeze/burn only have the tokenId.\nThis would result in unexpected kyc & freeze behavior for accounts as initial freeze and kyc statuses after this shallow creation will likely be wrong for many cases.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499101640", "createdAt": "2020-10-03T01:08:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjY1NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4OTQwOQ==", "bodyText": "Per internal discussions we'll go with logging in these cases to avoid unexpected issues. Expectation is 3rd party should have a mirror node start time that covers the creation of desired tokens.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499889409", "createdAt": "2020-10-05T21:44:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NjY1NQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMyNjAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1Njo1MlrOHb8nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTo0NDoxOFrOHcu1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Njc4Mg==", "bodyText": "We should create it if it's not returned from the database. All methods that use this object should remove null check. This is how we handle the only other updateable object Entities. In theory it should never happen that we get a update/delete/etc without a create first, but if we have a stream reset like at OA it is possible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499066782", "createdAt": "2020-10-02T21:56:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);\n+    }\n+\n+    private Token retrieveToken(TokenID tokenID) {\n+        return tokenRepository\n+                .findById(new Token.Id(EntityId.of(tokenID)))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 366}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMTMzOA==", "bodyText": "Hmm, as is we won't have sufficient information to create an appropriate Token.\nUpdate has the largest amount of info but doesn't have initialSupply, decimals etc.\ndelete/wipe/mint/burn only have the tokenId.\nThis would result in unexpected kyc & freeze behavior for accounts onboarded after this shallow creation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499101338", "createdAt": "2020-10-03T01:05:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);\n+    }\n+\n+    private Token retrieveToken(TokenID tokenID) {\n+        return tokenRepository\n+                .findById(new Token.Id(EntityId.of(tokenID)))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Njc4Mg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 366}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4OTQ2OQ==", "bodyText": "Per internal discussions we'll go with logging in these cases to avoid unexpected issues. Expectation is 3rd party should have a mirror node start time that covers the creation of desired tokens.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499889469", "createdAt": "2020-10-05T21:44:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountUnfreeze(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUnfreezeAccountTransactionBody tokenUnfreezeAccountTransactionBody = txBody.getTokenUnfreeze();\n+            TokenID tokenID = tokenUnfreezeAccountTransactionBody.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenUnfreezeAccountTransactionBody\n+                    .getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Unfrozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountWipe(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenWipeAccountTransactionBody tokenWipeAccountTransactionBody = txBody.getTokenWipe();\n+\n+            // update token total supply similar to TokenBurn transaction\n+            Token token = retrieveToken(tokenWipeAccountTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                token.setTotalSupply(token.getTotalSupply() - tokenWipeAccountTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+\n+            // Mirror relies on CSV balances change from network, flag change with modified update\n+            TokenID tokenID = tokenWipeAccountTransactionBody.getToken();\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenWipeAccountTransactionBody.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private TokenAccount retrieveTokenAccount(TokenID tokenID, AccountID accountID) {\n+        return tokenAccountRepository\n+                .findByTokenIdAndAccountId(EntityId.of(tokenID), EntityId.of(accountID))\n+                .orElse(null);\n+    }\n+\n+    private Token retrieveToken(TokenID tokenID) {\n+        return tokenRepository\n+                .findById(new Token.Id(EntityId.of(tokenID)))\n+                .orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2Njc4Mg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 366}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMyODkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1ODoxOFrOHb8pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1MzozMlrOHcnqZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzIyNg==", "bodyText": "Token and treasury should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499067226", "createdAt": "2020-10-02T21:58:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMTg2MA==", "bodyText": "Token is. Treasury will be an already created account.\nI'm guessing this is also the Pre OA case that we need to cover", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499101860", "createdAt": "2020-10-03T01:11:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzIyNg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MjAwNA==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499772004", "createdAt": "2020-10-05T17:53:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = txBody.getTokenUpdate();\n+            Token token = retrieveToken(tokenUpdateTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    token.setTreasuryAccountId(EntityId.of(tokenUpdateTransactionBody.getTreasury()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzIyNg=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzMTYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1OTo1OFrOHb8rFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjoyNFrOHcn92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzY2OQ==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499067669", "createdAt": "2020-10-02T21:59:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3Njk4NA==", "bodyText": "Will add for token, missed on last commit", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499776984", "createdAt": "2020-10-05T18:02:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenTransfers(long consensusTimestamp, TransactionRecord txRecord) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            txRecord.getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(consensusTimestamp, accountAmount", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzY2OQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzMjY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMDozMFrOHb8rvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1NTo0MFrOHcnvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzgzOA==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499067838", "createdAt": "2020-10-02T22:00:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MzIxMw==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499773213", "createdAt": "2020-10-05T17:55:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Granted_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenMint(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = txBody.getTokenMint();\n+            Token token = retrieveToken(tokenMintTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() + tokenMintTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKyc = txBody.getTokenRevokeKyc();\n+            TokenID tokenID = tokenRevokeKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenRevokeKyc.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setKycStatus(TokenKycStatus.Revoked_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NzgzOA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzNTgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMjoyM1rOHb8tyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1NTo0OFrOHcnvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODM2MA==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499068360", "createdAt": "2020-10-02T22:02:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MzI5MQ==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499773291", "createdAt": "2020-10-05T17:55:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());\n+            if (tokenAccount != null) {\n+                tokenAccount.setFreezeStatus(TokenFreezeStatus.Frozen_VALUE);\n+                tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onTokenAccount(tokenAccount);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKyc = txBody.getTokenGrantKyc();\n+            TokenID tokenID = tokenGrantKyc.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenGrantKyc.getAccount());\n+            if (tokenAccount != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODM2MA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzNjA5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMjozNVrOHb8t9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1NTo1MlrOHcnvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODQwNQ==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499068405", "createdAt": "2020-10-02T22:02:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MzMzOQ==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499773339", "createdAt": "2020-10-05T17:55:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);\n+                if (tokenAccount != null) {\n+                    tokenAccount.setAssociated(false);\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreeze = txBody.getTokenFreeze();\n+            TokenID tokenID = tokenFreeze.getToken();\n+\n+            TokenAccount tokenAccount = retrieveTokenAccount(tokenID, tokenFreeze.getAccount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODQwNQ=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzNjgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMjo1N1rOHb8uYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1NTo1OVrOHcnv2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODUxNA==", "bodyText": "Account and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499068514", "createdAt": "2020-10-02T22:02:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3MzQwMg==", "bodyText": "Updating to have all TokenId's be passed to OnEntityId where the OnItem() method doesn't already handle this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499773402", "createdAt": "2020-10-05T17:55:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociate = txBody.getTokenDissociate();\n+            AccountID accountID = tokenDissociate.getAccount();\n+            tokenDissociate.getTokensList().forEach(token -> {\n+                TokenAccount tokenAccount = retrieveTokenAccount(token, accountID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODUxNA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzNzc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowMzozOFrOHb8vFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMToxMjozOFrOHb-xMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODY5NA==", "bodyText": "Should we also have a delete flag on token?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499068694", "createdAt": "2020-10-02T22:03:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEwMjAwMg==", "bodyText": "This already exists on the Entities object.\nThe assumption is any API call filtering on deleted will do the necessary join to pull that info.\nOtherwise it'll be a duplication of data between the tables.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499102002", "createdAt": "2020-10-03T01:12:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));\n+            }\n+\n+            if (tokenCreation.hasWipeKey()) {\n+                token.setWipeKey(tokenCreation.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeletion = txBody.getTokenDeletion();\n+            Token token = retrieveToken(tokenDeletion.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODY5NA=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMzOTUwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMjowNDozMlrOHb8wIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMjoyNDoxMlrOHcMFBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODk2Mw==", "bodyText": "Treasury and token should be passed to onEntityId either here or in handler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499068963", "createdAt": "2020-10-02T22:04:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyMDA2OA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499320068", "createdAt": "2020-10-05T02:24:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +432,260 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociate = txBody.getTokenAssociate();\n+            AccountID accountID = tokenAssociate.getAccount();\n+            tokenAssociate.getTokensList().forEach(token -> {\n+                if (retrieveTokenAccount(token, accountID) == null) {\n+                    Token storedToken = retrieveToken(token);\n+                    TokenAccount tokenAccount = new TokenAccount();\n+                    tokenAccount.setAssociated(true);\n+                    tokenAccount.setCreatedTimestamp(consensusTimestamp);\n+                    tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                    tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+                    tokenAccount.setAccountId(EntityId.of(accountID));\n+                    tokenAccount.setTokenId(EntityId.of(token));\n+                    entityListener.onTokenAccount(tokenAccount);\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(long consensusTimestamp, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = txBody.getTokenBurn();\n+            Token token = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (token != null) {\n+                token.setModifiedTimestamp(consensusTimestamp);\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(long consensusTimestamp, TransactionRecord txRecord, TransactionBody txBody) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreation = txBody.getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(consensusTimestamp);\n+            token.setDecimals(tokenCreation.getDecimals());\n+            token.setFreezeDefault(tokenCreation.getFreezeDefault());\n+            token.setInitialSupply(tokenCreation.getInitialSupply());\n+            token.setModifiedTimestamp(consensusTimestamp);\n+            token.setName(tokenCreation.getName());\n+            token.setSymbol(tokenCreation.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(txRecord.getReceipt().getTokenId())));\n+\n+            if (tokenCreation.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreation.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasKycKey()) {\n+                token.setKycKey(tokenCreation.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreation.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreation.hasTreasury()) {\n+                token.setTreasuryAccountId(EntityId.of(tokenCreation.getTreasury()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2ODk2Mw=="}, "originalCommit": {"oid": "f2bd2dc85bf7b2bb76bf4d56de12dc3a3fa0fc53"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTA4MDYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMjozNVrOHcmqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzoyMjozNVrOHcmqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTU4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // if not onboarded create create TokenAccount based off of Token details\n          \n          \n            \n                                // if not onboarded create TokenAccount based on Token details", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499755586", "createdAt": "2020-10-05T17:22:35Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+                Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(token, accountID);\n+                TokenAccount tokenAccount = null;\n+                if (retrieveTokenAccount(token, accountID).isPresent()) {\n+                    tokenAccount = optionalTokenAccount.get();\n+                } else {\n+                    // if not onboarded create create TokenAccount based off of Token details", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEwODE1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMDo1NVrOHcm76w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMDo1NVrOHcm76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDEwNw==", "bodyText": "Remove a already handled in OnItem()\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        entityListener.onEntityId(accountEntityId);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499760107", "createdAt": "2020-10-05T17:30:55Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTExMzYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMjozOFrOHcm_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMjozOFrOHcm_Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MDk3MA==", "bodyText": "Remove since covered by OnItem()\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        entityListener.onEntityId(accountEntityId);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499760970", "createdAt": "2020-10-05T17:32:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+                Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(token, accountID);\n+                TokenAccount tokenAccount = null;\n+                if (retrieveTokenAccount(token, accountID).isPresent()) {\n+                    tokenAccount = optionalTokenAccount.get();\n+                } else {\n+                    // if not onboarded create create TokenAccount based off of Token details\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        tokenAccount = new TokenAccount(EntityId.of(token), accountEntityId);\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    }\n+                }\n+\n+                tokenAccount.setAssociated(true);\n+                tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onTokenAccount(tokenAccount);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            Optional<Token> optionalToken = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            Optional<Token> optionalToken = retrieveToken(tokenDeleteTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTExNjg0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMzozMlrOHcnBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozMzozMlrOHcnBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MTQ4Nw==", "bodyText": "Add OnEntityId for every Token\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), token, accountID, true, false, false);\n          \n          \n            \n                            entityListener.onEntityId(EntityId.of(token));\n          \n          \n            \n                            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), token, accountID, true, false, false);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499761487", "createdAt": "2020-10-05T17:33:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+                Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(token, accountID);\n+                TokenAccount tokenAccount = null;\n+                if (retrieveTokenAccount(token, accountID).isPresent()) {\n+                    tokenAccount = optionalTokenAccount.get();\n+                } else {\n+                    // if not onboarded create create TokenAccount based off of Token details\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        tokenAccount = new TokenAccount(EntityId.of(token), accountEntityId);\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    }\n+                }\n+\n+                tokenAccount.setAssociated(true);\n+                tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onTokenAccount(tokenAccount);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            Optional<Token> optionalToken = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            Optional<Token> optionalToken = retrieveToken(tokenDeleteTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), token, accountID, true, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEyNTA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNTo1OFrOHcnGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNTo1OFrOHcnGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mjc4Mg==", "bodyText": "Swap to do for Token since Account is covered by OnItem()\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        entityListener.onEntityId(accountEntityId);\n          \n          \n            \n            TokenID tokenID = tokenFreezeAccountTransactionBody.getToken();\n          \n          \n            \n            EntityId.of(tokenID)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499762782", "createdAt": "2020-10-05T17:35:58Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+                Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(token, accountID);\n+                TokenAccount tokenAccount = null;\n+                if (retrieveTokenAccount(token, accountID).isPresent()) {\n+                    tokenAccount = optionalTokenAccount.get();\n+                } else {\n+                    // if not onboarded create create TokenAccount based off of Token details\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        tokenAccount = new TokenAccount(EntityId.of(token), accountEntityId);\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    }\n+                }\n+\n+                tokenAccount.setAssociated(true);\n+                tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onTokenAccount(tokenAccount);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            Optional<Token> optionalToken = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            Optional<Token> optionalToken = retrieveToken(tokenDeleteTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), token, accountID, true, false, false);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+            AccountID accountID = tokenFreezeAccountTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTEzMTk1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozODowNlrOHcnKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozODowNlrOHcnKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2Mzg5NQ==", "bodyText": "Swap to do token", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499763895", "createdAt": "2020-10-05T17:38:06Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +431,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+                Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(token, accountID);\n+                TokenAccount tokenAccount = null;\n+                if (retrieveTokenAccount(token, accountID).isPresent()) {\n+                    tokenAccount = optionalTokenAccount.get();\n+                } else {\n+                    // if not onboarded create create TokenAccount based off of Token details\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        tokenAccount = new TokenAccount(EntityId.of(token), accountEntityId);\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                    }\n+                }\n+\n+                tokenAccount.setAssociated(true);\n+                tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onTokenAccount(tokenAccount);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            Optional<Token> optionalToken = retrieveToken(tokenBurnTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                // mirror will calculate new totalSupply as an interim solution until network returns it\n+                token.setTotalSupply(token.getTotalSupply() - tokenBurnTransactionBody.getAmount());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            Optional<Token> optionalToken = retrieveToken(tokenDeleteTransactionBody.getToken());\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                entityListener.onToken(token);\n+            }\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), token, accountID, true, false, false);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+            AccountID accountID = tokenFreezeAccountTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenFreezeAccountTransactionBody\n+                    .getToken(), accountID, false, true, false);\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenGrantKyc();\n+            AccountID accountID = tokenGrantKycTransactionBody.getAccount();\n+            EntityId accountEntityId = EntityId.of(accountID);\n+            entityListener.onEntityId(accountEntityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1055f75c69e20a1a63c3fd59c595f2181f71acb"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDEzNTQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenKycStatusEnum.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxODo1M1rOHcw3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyODoyN1rOHdSccw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjcwNQ==", "bodyText": "nit: Generally enum values are named like static constants in upper snake case, so NOT_APPLICABLE.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499922705", "createdAt": "2020-10-05T23:18:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenKycStatusEnum.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@Getter\n+@RequiredArgsConstructor\n+public enum TokenKycStatusEnum {\n+\n+    NOTAPPLICABLE(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3Mjk0Nw==", "bodyText": "Changing to NOT_APPLICABLE", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500472947", "createdAt": "2020-10-06T17:28:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenKycStatusEnum.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+@Getter\n+@RequiredArgsConstructor\n+public enum TokenKycStatusEnum {\n+\n+    NOTAPPLICABLE(0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMjcwNQ=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDE1MjIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoyNjo0OVrOHcxAiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyNToyOFrOHdQBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyNTEyOA==", "bodyText": "I'm not a fan of these toggle methods. If we get two freeze accounts transactions back to back (not sure if possible), then it would be unfrozen. Would prefer simpler setters to avoid this even if platform makes this impossible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r499925128", "createdAt": "2020-10-05T23:26:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.Serializable;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+public class TokenAccount {\n+    @EmbeddedId\n+    @JsonUnwrapped\n+    private TokenAccount.Id id;\n+\n+    private boolean associated;\n+\n+    private long createdTimestamp;\n+\n+    @Enumerated(EnumType.ORDINAL)\n+    private TokenFreezeStatusEnum freezeStatus;\n+\n+    @Enumerated(EnumType.ORDINAL)\n+    private TokenKycStatusEnum kycStatus;\n+\n+    private long modifiedTimestamp;\n+\n+    public TokenAccount(EntityId tokenId, EntityId accountId) {\n+        id = new TokenAccount.Id(tokenId, accountId);\n+    }\n+\n+    public void toggleAssociatedStatus() {\n+        associated = !associated;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzIxOA==", "bodyText": "That's a good point. Can change it back to simple sets", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500433218", "createdAt": "2020-10-06T16:25:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/TokenAccount.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.Serializable;\n+import javax.persistence.Convert;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.converter.AccountIdConverter;\n+import com.hedera.mirror.importer.converter.EntityIdSerializer;\n+import com.hedera.mirror.importer.converter.TokenIdConverter;\n+\n+@Data\n+@Entity\n+@Log4j2\n+@NoArgsConstructor\n+public class TokenAccount {\n+    @EmbeddedId\n+    @JsonUnwrapped\n+    private TokenAccount.Id id;\n+\n+    private boolean associated;\n+\n+    private long createdTimestamp;\n+\n+    @Enumerated(EnumType.ORDINAL)\n+    private TokenFreezeStatusEnum freezeStatus;\n+\n+    @Enumerated(EnumType.ORDINAL)\n+    private TokenKycStatusEnum kycStatus;\n+\n+    private long modifiedTimestamp;\n+\n+    public TokenAccount(EntityId tokenId, EntityId accountId) {\n+        id = new TokenAccount.Id(tokenId, accountId);\n+    }\n+\n+    public void toggleAssociatedStatus() {\n+        associated = !associated;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyNTEyOA=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI0MDM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0OTo1M1rOHdOhpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNzoyN1rOHdSx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODc0MQ==", "bodyText": "Not a fan of these generic methods that then have transaction specific checks within them. Also not ideal because it denormalizes the token account object into a bunch of parameters, which is less maintainable when those change. Code reuse should not be done at the expense of maintainability and encapsulation.\nTransaction specific logic should be contained within the insertToken... methods.  This encapsulates the logic and will allow us to lift and shift it to the transaction handlers later. You can achieve something similar without this by pushing most of this common logic into the retrieve method.\nWe can always change this in a follow up or when we move to transaction handlers, though.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500408741", "createdAt": "2020-10-06T15:49:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                        tokenAccount.setAssociated(true);\n+                        tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                        entityListener.onTokenAccount(tokenAccount);\n+                    } else {\n+                        log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENASSOCIATE,\n+                                consensusTimeStamp);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenBurnTransactionBody\n+                    .getToken(), tokenBurnTransactionBody.getAmount(), TransactionTypeEnum.TOKENBURN);\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenDeleteTransactionBody\n+                    .getToken(), 0, TransactionTypeEnum.TOKENDELETION);\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem\n+                        .getConsensusTimestamp(), token, accountID, TransactionTypeEnum.TOKENDISSOCIATE);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenFreezeAccountTransactionBody\n+                    .getToken(), tokenFreezeAccountTransactionBody.getAccount(), TransactionTypeEnum.TOKENFREEZE);\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenGrantKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenGrantKycTransactionBody\n+                    .getToken(), tokenGrantKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENGRANTKYC);\n+        }\n+    }\n+\n+    private void insertTokenMint(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = recordItem.getTransactionBody().getTokenMint();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenMintTransactionBody\n+                    .getToken(), tokenMintTransactionBody.getAmount(), TransactionTypeEnum.TOKENMINT);\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenRevokeKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenRevokeKycTransactionBody\n+                    .getToken(), tokenRevokeKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENREVOKEKYC);\n+        }\n+    }\n+\n+    private void insertTokenTransfers(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            recordItem.getRecord().getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                entityListener.onEntityId(tokenId);\n+\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+                    entityListener.onEntityId(accountId);\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(recordItem.getConsensusTimestamp(), accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = recordItem.getTransactionBody().getTokenUpdate();\n+            TokenID tokenID = tokenUpdateTransactionBody.getToken();\n+\n+            Optional<Token> optionalToken = retrieveToken(tokenID);\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    EntityId treasuryEntityId = EntityId.of(tokenUpdateTransactionBody.getTreasury());\n+                    entityListener.onEntityId(treasuryEntityId);\n+                    token.setTreasuryAccountId(treasuryEntityId);\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            } else {\n+                log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENDELETION, recordItem\n+                        .getConsensusTimestamp());\n+            }\n+        }\n+    }\n+\n+    private boolean insertTokenAccountUpdate(long consensusTimestamp, TokenID tokenID, AccountID accountID,\n+                                             TransactionTypeEnum transactionTypeEnum) {\n+        entityListener.onEntityId(EntityId.of(tokenID));\n+\n+        Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(tokenID, accountID);\n+        boolean tokenAccountFound = optionalTokenAccount.isPresent();\n+        if (tokenAccountFound) {\n+\n+            TokenAccount tokenAccount = optionalTokenAccount.get();\n+            tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+\n+            if (transactionTypeEnum == TransactionTypeEnum.TOKENASSOCIATE || transactionTypeEnum == TransactionTypeEnum.TOKENDISSOCIATE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMjU3MQ==", "bodyText": "Yeah my hope was this would leave mostly boiler plate code to copy and paste into the transaction handlers when we made that move", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500432571", "createdAt": "2020-10-06T16:24:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                        tokenAccount.setAssociated(true);\n+                        tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                        entityListener.onTokenAccount(tokenAccount);\n+                    } else {\n+                        log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENASSOCIATE,\n+                                consensusTimeStamp);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenBurnTransactionBody\n+                    .getToken(), tokenBurnTransactionBody.getAmount(), TransactionTypeEnum.TOKENBURN);\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenDeleteTransactionBody\n+                    .getToken(), 0, TransactionTypeEnum.TOKENDELETION);\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem\n+                        .getConsensusTimestamp(), token, accountID, TransactionTypeEnum.TOKENDISSOCIATE);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenFreezeAccountTransactionBody\n+                    .getToken(), tokenFreezeAccountTransactionBody.getAccount(), TransactionTypeEnum.TOKENFREEZE);\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenGrantKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenGrantKycTransactionBody\n+                    .getToken(), tokenGrantKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENGRANTKYC);\n+        }\n+    }\n+\n+    private void insertTokenMint(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = recordItem.getTransactionBody().getTokenMint();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenMintTransactionBody\n+                    .getToken(), tokenMintTransactionBody.getAmount(), TransactionTypeEnum.TOKENMINT);\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenRevokeKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenRevokeKycTransactionBody\n+                    .getToken(), tokenRevokeKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENREVOKEKYC);\n+        }\n+    }\n+\n+    private void insertTokenTransfers(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            recordItem.getRecord().getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                entityListener.onEntityId(tokenId);\n+\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+                    entityListener.onEntityId(accountId);\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(recordItem.getConsensusTimestamp(), accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = recordItem.getTransactionBody().getTokenUpdate();\n+            TokenID tokenID = tokenUpdateTransactionBody.getToken();\n+\n+            Optional<Token> optionalToken = retrieveToken(tokenID);\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    EntityId treasuryEntityId = EntityId.of(tokenUpdateTransactionBody.getTreasury());\n+                    entityListener.onEntityId(treasuryEntityId);\n+                    token.setTreasuryAccountId(treasuryEntityId);\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            } else {\n+                log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENDELETION, recordItem\n+                        .getConsensusTimestamp());\n+            }\n+        }\n+    }\n+\n+    private boolean insertTokenAccountUpdate(long consensusTimestamp, TokenID tokenID, AccountID accountID,\n+                                             TransactionTypeEnum transactionTypeEnum) {\n+        entityListener.onEntityId(EntityId.of(tokenID));\n+\n+        Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(tokenID, accountID);\n+        boolean tokenAccountFound = optionalTokenAccount.isPresent();\n+        if (tokenAccountFound) {\n+\n+            TokenAccount tokenAccount = optionalTokenAccount.get();\n+            tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+\n+            if (transactionTypeEnum == TransactionTypeEnum.TOKENASSOCIATE || transactionTypeEnum == TransactionTypeEnum.TOKENDISSOCIATE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODc0MQ=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1Nzc4OA==", "bodyText": "Changing now", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500457788", "createdAt": "2020-10-06T17:04:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                        tokenAccount.setAssociated(true);\n+                        tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                        entityListener.onTokenAccount(tokenAccount);\n+                    } else {\n+                        log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENASSOCIATE,\n+                                consensusTimeStamp);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenBurnTransactionBody\n+                    .getToken(), tokenBurnTransactionBody.getAmount(), TransactionTypeEnum.TOKENBURN);\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenDeleteTransactionBody\n+                    .getToken(), 0, TransactionTypeEnum.TOKENDELETION);\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem\n+                        .getConsensusTimestamp(), token, accountID, TransactionTypeEnum.TOKENDISSOCIATE);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenFreezeAccountTransactionBody\n+                    .getToken(), tokenFreezeAccountTransactionBody.getAccount(), TransactionTypeEnum.TOKENFREEZE);\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenGrantKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenGrantKycTransactionBody\n+                    .getToken(), tokenGrantKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENGRANTKYC);\n+        }\n+    }\n+\n+    private void insertTokenMint(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = recordItem.getTransactionBody().getTokenMint();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenMintTransactionBody\n+                    .getToken(), tokenMintTransactionBody.getAmount(), TransactionTypeEnum.TOKENMINT);\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenRevokeKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenRevokeKycTransactionBody\n+                    .getToken(), tokenRevokeKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENREVOKEKYC);\n+        }\n+    }\n+\n+    private void insertTokenTransfers(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            recordItem.getRecord().getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                entityListener.onEntityId(tokenId);\n+\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+                    entityListener.onEntityId(accountId);\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(recordItem.getConsensusTimestamp(), accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = recordItem.getTransactionBody().getTokenUpdate();\n+            TokenID tokenID = tokenUpdateTransactionBody.getToken();\n+\n+            Optional<Token> optionalToken = retrieveToken(tokenID);\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    EntityId treasuryEntityId = EntityId.of(tokenUpdateTransactionBody.getTreasury());\n+                    entityListener.onEntityId(treasuryEntityId);\n+                    token.setTreasuryAccountId(treasuryEntityId);\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            } else {\n+                log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENDELETION, recordItem\n+                        .getConsensusTimestamp());\n+            }\n+        }\n+    }\n+\n+    private boolean insertTokenAccountUpdate(long consensusTimestamp, TokenID tokenID, AccountID accountID,\n+                                             TransactionTypeEnum transactionTypeEnum) {\n+        entityListener.onEntityId(EntityId.of(tokenID));\n+\n+        Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(tokenID, accountID);\n+        boolean tokenAccountFound = optionalTokenAccount.isPresent();\n+        if (tokenAccountFound) {\n+\n+            TokenAccount tokenAccount = optionalTokenAccount.get();\n+            tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+\n+            if (transactionTypeEnum == TransactionTypeEnum.TOKENASSOCIATE || transactionTypeEnum == TransactionTypeEnum.TOKENDISSOCIATE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODc0MQ=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3ODQ2Mg==", "bodyText": "Moved logic back into insertToken...\nMoved missing Token or TokenAccount to retrieveMethod, but had to pass current transactionType and timestamp to make long informational", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500478462", "createdAt": "2020-10-06T17:37:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+                        tokenAccount.setFreezeStatus(storedToken.getNewAccountFreezeStatus());\n+                        tokenAccount.setKycStatus(storedToken.getNewAccountKycStatus());\n+                        tokenAccount.setAssociated(true);\n+                        tokenAccount.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+                        entityListener.onTokenAccount(tokenAccount);\n+                    } else {\n+                        log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENASSOCIATE,\n+                                consensusTimeStamp);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private void insertTokenBurn(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenBurnTransactionBody tokenBurnTransactionBody = recordItem.getTransactionBody().getTokenBurn();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenBurnTransactionBody\n+                    .getToken(), tokenBurnTransactionBody.getAmount(), TransactionTypeEnum.TOKENBURN);\n+        }\n+    }\n+\n+    private void insertTokenCreate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            // pull token details from TokenCreation body and TokenId from receipt\n+            TokenCreateTransactionBody tokenCreateTransactionBody = recordItem.getTransactionBody().getTokenCreation();\n+            Token token = new Token();\n+            token.setCreatedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setDecimals(tokenCreateTransactionBody.getDecimals());\n+            token.setFreezeDefault(tokenCreateTransactionBody.getFreezeDefault());\n+            token.setInitialSupply(tokenCreateTransactionBody.getInitialSupply());\n+            token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+            token.setName(tokenCreateTransactionBody.getName());\n+            token.setSymbol(tokenCreateTransactionBody.getSymbol());\n+            token.setTokenId(new Token.Id(EntityId.of(recordItem.getRecord().getReceipt().getTokenId())));\n+\n+            if (tokenCreateTransactionBody.hasFreezeKey()) {\n+                token.setFreezeKey(tokenCreateTransactionBody.getFreezeKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasKycKey()) {\n+                token.setKycKey(tokenCreateTransactionBody.getKycKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasSupplyKey()) {\n+                token.setSupplyKey(tokenCreateTransactionBody.getSupplyKey().toByteArray());\n+            }\n+\n+            if (tokenCreateTransactionBody.hasTreasury()) {\n+                EntityId treasuryEntityId = EntityId.of(tokenCreateTransactionBody.getTreasury());\n+                entityListener.onEntityId(treasuryEntityId);\n+                token.setTreasuryAccountId(treasuryEntityId);\n+            }\n+\n+            if (tokenCreateTransactionBody.hasWipeKey()) {\n+                token.setWipeKey(tokenCreateTransactionBody.getWipeKey().toByteArray());\n+            }\n+\n+            entityListener.onToken(token);\n+        }\n+    }\n+\n+    private void insertTokenDelete(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDeleteTransactionBody tokenDeleteTransactionBody = recordItem.getTransactionBody().getTokenDeletion();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenDeleteTransactionBody\n+                    .getToken(), 0, TransactionTypeEnum.TOKENDELETION);\n+        }\n+    }\n+\n+    private void insertTokenDissociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenDissociateTransactionBody tokenDissociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenDissociate();\n+            AccountID accountID = tokenDissociateTransactionBody.getAccount();\n+\n+            tokenDissociateTransactionBody.getTokensList().forEach(token -> {\n+                insertTokenAccountUpdate(recordItem\n+                        .getConsensusTimestamp(), token, accountID, TransactionTypeEnum.TOKENDISSOCIATE);\n+            });\n+        }\n+    }\n+\n+    private void insertTokenAccountFreezeBody(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenFreezeAccountTransactionBody tokenFreezeAccountTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenFreeze();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenFreezeAccountTransactionBody\n+                    .getToken(), tokenFreezeAccountTransactionBody.getAccount(), TransactionTypeEnum.TOKENFREEZE);\n+        }\n+    }\n+\n+    private void insertTokenAccountGrantKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenGrantKycTransactionBody tokenGrantKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenGrantKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenGrantKycTransactionBody\n+                    .getToken(), tokenGrantKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENGRANTKYC);\n+        }\n+    }\n+\n+    private void insertTokenMint(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenMintTransactionBody tokenMintTransactionBody = recordItem.getTransactionBody().getTokenMint();\n+            insertSingleTokenPropertyUpdate(recordItem.getConsensusTimestamp(), tokenMintTransactionBody\n+                    .getToken(), tokenMintTransactionBody.getAmount(), TransactionTypeEnum.TOKENMINT);\n+        }\n+    }\n+\n+    private void insertTokenAccountRevokeKyc(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenRevokeKycTransactionBody tokenRevokeKycTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenRevokeKyc();\n+\n+            insertTokenAccountUpdate(recordItem.getConsensusTimestamp(), tokenRevokeKycTransactionBody\n+                    .getToken(), tokenRevokeKycTransactionBody.getAccount(), TransactionTypeEnum.TOKENREVOKEKYC);\n+        }\n+    }\n+\n+    private void insertTokenTransfers(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            recordItem.getRecord().getTokenTransferListsList().forEach(tokenTransferList -> {\n+                EntityId tokenId = EntityId.of(tokenTransferList.getToken());\n+                entityListener.onEntityId(tokenId);\n+\n+                tokenTransferList.getTransfersList().forEach(accountAmount -> {\n+                    EntityId accountId = EntityId.of(accountAmount.getAccountID());\n+                    entityListener.onEntityId(accountId);\n+\n+                    entityListener.onTokenTransfer(new TokenTransfer(recordItem.getConsensusTimestamp(), accountAmount\n+                            .getAmount(), tokenId, accountId));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void insertTokenUpdate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenUpdateTransactionBody tokenUpdateTransactionBody = recordItem.getTransactionBody().getTokenUpdate();\n+            TokenID tokenID = tokenUpdateTransactionBody.getToken();\n+\n+            Optional<Token> optionalToken = retrieveToken(tokenID);\n+            if (optionalToken.isPresent()) {\n+                Token token = optionalToken.get();\n+                token.setModifiedTimestamp(recordItem.getConsensusTimestamp());\n+\n+                if (tokenUpdateTransactionBody.hasFreezeKey()) {\n+                    token.setFreezeKey(tokenUpdateTransactionBody.getFreezeKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasKycKey()) {\n+                    token.setKycKey(tokenUpdateTransactionBody.getKycKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasSupplyKey()) {\n+                    token.setSupplyKey(tokenUpdateTransactionBody.getSupplyKey().toByteArray());\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasTreasury()) {\n+                    EntityId treasuryEntityId = EntityId.of(tokenUpdateTransactionBody.getTreasury());\n+                    entityListener.onEntityId(treasuryEntityId);\n+                    token.setTreasuryAccountId(treasuryEntityId);\n+                }\n+\n+                if (tokenUpdateTransactionBody.hasWipeKey()) {\n+                    token.setWipeKey(tokenUpdateTransactionBody.getWipeKey().toByteArray());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getName().isEmpty()) {\n+                    token.setName(tokenUpdateTransactionBody.getName());\n+                }\n+\n+                if (!tokenUpdateTransactionBody.getSymbol().isEmpty()) {\n+                    token.setSymbol(tokenUpdateTransactionBody.getSymbol());\n+                }\n+\n+                entityListener.onToken(token);\n+            } else {\n+                log.warn(MISSING_TOKEN_MESSAGE, tokenID, TransactionTypeEnum.TOKENDELETION, recordItem\n+                        .getConsensusTimestamp());\n+            }\n+        }\n+    }\n+\n+    private boolean insertTokenAccountUpdate(long consensusTimestamp, TokenID tokenID, AccountID accountID,\n+                                             TransactionTypeEnum transactionTypeEnum) {\n+        entityListener.onEntityId(EntityId.of(tokenID));\n+\n+        Optional<TokenAccount> optionalTokenAccount = retrieveTokenAccount(tokenID, accountID);\n+        boolean tokenAccountFound = optionalTokenAccount.isPresent();\n+        if (tokenAccountFound) {\n+\n+            TokenAccount tokenAccount = optionalTokenAccount.get();\n+            tokenAccount.setModifiedTimestamp(consensusTimestamp);\n+\n+            if (transactionTypeEnum == TransactionTypeEnum.TOKENASSOCIATE || transactionTypeEnum == TransactionTypeEnum.TOKENDISSOCIATE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwODc0MQ=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI1ODAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Mzo1MlrOHdOs7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNjowOFrOHdSvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMTYyOQ==", "bodyText": "nit: Already have consensusTimeStamp variable extracted that you can use for both timestamps.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500411629", "createdAt": "2020-10-06T15:53:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NzcwNQ==", "bodyText": "Picking this up and other places", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1089#discussion_r500477705", "createdAt": "2020-10-06T17:36:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -380,4 +435,292 @@ private void updateEntity(\n         }\n         entityRepository.save(entity);\n     }\n+\n+    private void insertTokenAssociate(RecordItem recordItem) {\n+        if (entityProperties.getPersist().isTokens()) {\n+            TokenAssociateTransactionBody tokenAssociateTransactionBody = recordItem.getTransactionBody()\n+                    .getTokenAssociate();\n+            AccountID accountID = tokenAssociateTransactionBody.getAccount();\n+\n+            tokenAssociateTransactionBody.getTokensList().forEach(token -> {\n+\n+                long consensusTimeStamp = recordItem.getConsensusTimestamp();\n+                if (!insertTokenAccountUpdate(consensusTimeStamp, token, accountID,\n+                        TransactionTypeEnum.TOKENASSOCIATE)) {\n+                    // if not onboarded create TokenAccount based on Token details\n+                    EntityId tokenID = EntityId.of(token);\n+                    Optional<Token> optionalToken = retrieveToken(token);\n+                    if (optionalToken.isPresent()) {\n+                        Token storedToken = optionalToken.get();\n+                        TokenAccount tokenAccount = new TokenAccount(tokenID, EntityId.of(accountID));\n+                        tokenAccount.setCreatedTimestamp(recordItem.getConsensusTimestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMTYyOQ=="}, "originalCommit": {"oid": "4a40fbc3922abf545401ad950fb7a2d610708b1f"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1514, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}