{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MjI3MjEz", "number": 1344, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NjozM1rOFEGXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0Njo1MlrOFEHiSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQyOTQxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NjozM1rOIEDrfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NjozM1rOIEDrfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNTUwMQ==", "bodyText": "This should extend the new MirrorBaseJavaMigration\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class V1_32_0__Missing_StreamFile_Record extends BaseJavaMigration {\n          \n          \n            \n            public class V1_32_0__Missing_StreamFile_Record extends MirrorBaseJavaMigration {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1344#discussion_r541125501", "createdAt": "2020-12-11T17:56:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import com.hedera.mirror.importer.domain.AccountBalanceFile;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.domain.StreamFile;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.downloader.balance.BalanceDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.record.RecordDownloaderProperties;\n+import com.hedera.mirror.importer.repository.AccountBalanceFileRepository;\n+import com.hedera.mirror.importer.repository.RecordFileRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class V1_32_0__Missing_StreamFile_Record extends BaseJavaMigration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bc912d56225041f7af11ddbcd02c9e4d396a50"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQzMTQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NzowM1rOIEDsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1NzowM1rOIEDsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyNTc4OQ==", "bodyText": "This would become doMigrate()\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void migrate(final Context context) {\n          \n          \n            \n                public void doMigrate(final Context context) {", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1344#discussion_r541125789", "createdAt": "2020-12-11T17:57:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import com.hedera.mirror.importer.domain.AccountBalanceFile;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.domain.StreamFile;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.downloader.balance.BalanceDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.record.RecordDownloaderProperties;\n+import com.hedera.mirror.importer.repository.AccountBalanceFileRepository;\n+import com.hedera.mirror.importer.repository.RecordFileRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class V1_32_0__Missing_StreamFile_Record extends BaseJavaMigration {\n+\n+    public static final EntityId DEFAULT_NODE_ACCOUNT_ID = EntityId.of(0, 0, 3, EntityTypeEnum.ACCOUNT);\n+\n+    private final BalanceDownloaderProperties balanceDownloaderProperties;\n+    private final AccountBalanceFileRepository accountBalanceFileRepository;\n+    private final RecordDownloaderProperties recordDownloaderProperties;\n+    private final RecordFileRepository recordFileRepository;\n+\n+    @Override\n+    public void migrate(final Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bc912d56225041f7af11ddbcd02c9e4d396a50"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYyMDkxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0Njo1MlrOIEFbjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0Njo1MlrOIEFbjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NDE5MQ==", "bodyText": "Looks like we're missing a test for this.\nIn this case you could have the directory not exist or have the FIleCopier put a file instead of the directory", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1344#discussion_r541154191", "createdAt": "2020-12-11T18:46:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_32_0__Missing_StreamFile_Record.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+\n+import com.hedera.mirror.importer.domain.AccountBalanceFile;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.domain.StreamFile;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.downloader.DownloaderProperties;\n+import com.hedera.mirror.importer.downloader.balance.BalanceDownloaderProperties;\n+import com.hedera.mirror.importer.downloader.record.RecordDownloaderProperties;\n+import com.hedera.mirror.importer.repository.AccountBalanceFileRepository;\n+import com.hedera.mirror.importer.repository.RecordFileRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class V1_32_0__Missing_StreamFile_Record extends BaseJavaMigration {\n+\n+    public static final EntityId DEFAULT_NODE_ACCOUNT_ID = EntityId.of(0, 0, 3, EntityTypeEnum.ACCOUNT);\n+\n+    private final BalanceDownloaderProperties balanceDownloaderProperties;\n+    private final AccountBalanceFileRepository accountBalanceFileRepository;\n+    private final RecordDownloaderProperties recordDownloaderProperties;\n+    private final RecordFileRepository recordFileRepository;\n+\n+    @Override\n+    public void migrate(final Context context) {\n+        addStreamFileRecords(balanceDownloaderProperties);\n+        addStreamFileRecords(recordDownloaderProperties);\n+    }\n+\n+    private void addStreamFileRecords(DownloaderProperties downloaderProperties) {\n+        int count = 0;\n+        StreamType streamType = downloaderProperties.getStreamType();\n+        Path validPath = downloaderProperties.getValidPath();\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+\n+        try {\n+            File file = validPath.toFile();\n+            if (!file.isDirectory()) {\n+                log.error(\"ValidPath {} for {} downloader is not a directory\", validPath, streamType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bc912d56225041f7af11ddbcd02c9e4d396a50"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1325, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}