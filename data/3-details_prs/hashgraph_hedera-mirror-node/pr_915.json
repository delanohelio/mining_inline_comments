{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTE3Nzk5", "number": 915, "title": "fix the issue importer gets stuck when >=2 groups of signature files in same bucket", "bodyText": "Signed-off-by: Xin Li xin.li@swirlds.com\n\nDetailed description:\nThere are a couple of occurrences in the DEMO bucket that adjacent groups of record signature files' timestamp difference\n< 2s, and all these signature files are VALID.\nThe fix to address the balance files timestamp issue assumed that when >= 2 groups of signature files fall into the same bucket (based on predefined close interval), only one is valid and all but the verified group will be dropped. In addition, the dropped groups will be again dropped on next try since its timestamp falls into the bucket of last processed signature files.\nSo the importer will get stuck and could not continue processing the record files in the DEMO bucket.\nTo fix it, most part of the previous fix is reverted and a loose restriction is adopted:\n\nsignatures files are grouped by its timestamp as before\nwhen a group of signature files fail to verify and its not the last in the batch, we will skip it and try to process the next group of signature files\n\nThis can address the balance file issue, since the single balance file will fail the signature verification:\n\nif it's not the last in the batch, the next group of balance signature files will pass verification so the single file will be skipped forever\nif it's the last in the batch, it'll be downloaded again in the next batch and become the first, then it'll be skipped and the next group of signature files in the new batch will pass verification so the single file will be skipped forever\n\nWhich issue(s) this PR fixes:\nFixes #914\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-07-28T23:58:29Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915", "merged": true, "mergeCommit": {"oid": "8c05ee67a7703a14852d374d997ddbef7af5a69f"}, "closed": true, "closedAt": "2020-07-29T23:02:05Z", "author": {"login": "xin-hedera"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5fEirgH2gAyNDU4MTE3Nzk5OjEyZmUyNWQ0NzQ4MjVhZTEzOGY3N2ZjYWI3Nzk3ZWJkYzU3ZjlmZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5zEesgFqTQ1Nzk1MTE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12fe25d474825ae138f77fcab7797ebdc57f9fd8", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/12fe25d474825ae138f77fcab7797ebdc57f9fd8", "committedDate": "2020-07-28T23:31:47Z", "message": "fix the issue when >= 2 groups of valid signature files fall into same bucket, all but the first will be dropped so importer gets stuck\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f768c93cce0dccb843a46ad76f45d002a5e179e5", "committedDate": "2020-07-29T02:01:31Z", "message": "remove closeInterval\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjUxOTQx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#pullrequestreview-457651941", "createdAt": "2020-07-29T15:43:54Z", "commit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0Mzo1NVrOG4-nyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjoxODoxMlrOG5AFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5OTQzNQ==", "bodyText": "Converting to long I think is no longer necessary if we don't need to calculate offsets from it. It would be more efficient to use the String filename like it did in the previous release.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462399435", "createdAt": "2020-07-29T15:43:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -223,15 +221,8 @@ protected void downloadNextBatch() {\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                long groupTimestamp = getGroupTimestamp(lastValidTimestamp, closeInterval,\n-                                        fileStreamSignature);\n-\n-                                if (groupTimestamp > 0) {\n-                                    sigFilesMap.put(groupTimestamp, fileStreamSignature);\n-                                } else {\n-                                    log.warn(\"Ignoring signature associated with the previously processed stream \" +\n-                                            \"file: {}\", fileStreamSignature);\n-                                }\n+                                long timestamp = Utility.getTimestampFromFilename(sigFile.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMTU1NQ==", "bodyText": "This method's comment needs to be tweaked due to the changes", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462401555", "createdAt": "2020-07-29T15:46:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjkxMA==", "bodyText": "We should add a test case that captures the scenario experienced with the demo bucket, if possible.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462402910", "createdAt": "2020-07-29T15:48:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -322,25 +321,25 @@ void differentFilenamesSameInterval() throws Exception {\n     @Test\n     @DisplayName(\"Different filenames, same interval, lower bound\")\n     void differentFilenamesSameIntervalLower() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated());\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, same interval, upper bound\")\n     void differentFilenamesSameIntervalUpper() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+        differentFilenames(getCloseInterval().dividedBy(2L).minusNanos(1));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, previous interval\")\n     void differentFilenamesPreviousInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+        differentFilenames(getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n     }\n \n     @Test\n     @DisplayName(\"Different filenames, next interval\")\n     void differentFilenamesNextInterval() throws Exception {\n-        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+        differentFilenames(getCloseInterval().dividedBy(2L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDIxNA==", "bodyText": "Can use nodeCount", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462404214", "createdAt": "2020-07-29T15:50:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -122,22 +96,22 @@ private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         for (String key : signatureHashMap.keySet()) {\n             Collection<FileStreamSignature> validatedSignatures = signatureHashMap.get(key);\n \n-            if (consensusReached(validatedSignatures.size(), nodeIDPubKeyMap.size())) {\n+            if (canReachConsensus(validatedSignatures.size(), nodeIDPubKeyMap.size())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQwMw==", "bodyText": "This still is not quite correct. It could potentially discard valid files just because one node is really quick at uploading. For a better fix, we should only skip file once next batch has reached consensus. Currently it skips file when at least one file is in next batch. This may require separating signature verification loop from signed file download/verification loop.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462416403", "createdAt": "2020-07-29T16:07:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyMzMxNw==", "bodyText": "nit: signatures.stream().map(FileStreamSignature::getFile).map(File::getName).findFirst().orElse(null);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462423317", "createdAt": "2020-07-29T16:18:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -67,43 +66,18 @@ private static boolean consensusReached(long actualNodes, long expectedNodes) {\n      * @throws SignatureVerificationException\n      */\n     public void verify(Collection<FileStreamSignature> signatures) throws SignatureVerificationException {\n-        Multimap<String, FileStreamSignature> signaturesByName = TreeMultimap.create();\n-        signatures.forEach(s -> signaturesByName.put(s.getFile().getName(), s));\n-        Collection<String> filenames = signaturesByName.keySet();\n-\n-        if (filenames.size() > 1) {\n-            log.warn(\"Found {} unique filenames for stream interval: {}\", filenames.size(), signatures);\n-        }\n-\n-        for (String filename : filenames) {\n-            if (verifyFileGroup(signaturesByName.get(filename))) {\n-                return;\n-            }\n-        }\n-\n-        throw new SignatureVerificationException(\"Signature verification failed for files \" + filenames + \": \" + statusMap(signatures));\n-    }\n-\n-    /**\n-     * Since balance files can occasionally generate a file with a different timestamp from different nodes or a rogue\n-     * node can send a bad filename, we group files into time buckets then within that bucket check if a particular\n-     * filename reaches consensus.\n-     *\n-     * @param signatures grouped by filename\n-     * @return whether this file was verified\n-     * @throws SignatureVerificationException\n-     */\n-    private boolean verifyFileGroup(Collection<FileStreamSignature> signatures) {\n         Multimap<String, FileStreamSignature> signatureHashMap = HashMultimap.create();\n-        String filename = null;\n+        String filename = !signatures.isEmpty() ? signatures.stream().findFirst().get().getFile().getName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODYyMTY4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#pullrequestreview-457862168", "createdAt": "2020-07-29T20:14:11Z", "commit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNDoxMVrOG5Idpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxNDoxMVrOG5Idpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MDY3OQ==", "bodyText": "Please add the filename to the log. This log statement is the only indication that we might've skipped a non-consensus file. We should update to reflect that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#discussion_r462560679", "createdAt": "2020-07-29T20:14:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -362,17 +324,24 @@ private void verifySigsAndDownloadDataFiles(Multimap<Long, FileStreamSignature>\n         NodeSignatureVerifier nodeSignatureVerifier = new NodeSignatureVerifier(networkAddressBook);\n         Path validPath = downloaderProperties.getValidPath();\n \n-        for (Long groupId : sigFilesMap.keySet()) {\n+        for (var groupIdIterator = sigFilesMap.keySet().iterator(); groupIdIterator.hasNext(); ) {\n             if (ShutdownHelper.isStopping()) {\n                 return;\n             }\n \n             Instant startTime = Instant.now();\n+            long groupId = groupIdIterator.next();\n             Collection<FileStreamSignature> signatures = sigFilesMap.get(groupId);\n             boolean valid = false;\n \n             try {\n                 nodeSignatureVerifier.verify(signatures);\n+            } catch (SignatureVerificationException ex) {\n+                if (groupIdIterator.hasNext()) {\n+                    log.warn(\"Signature verification failed but still have files in the batch, try to process the next group\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f768c93cce0dccb843a46ad76f45d002a5e179e5"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "352044ae866f9f3b482ed8cb1d30e2864f478b3e", "author": {"user": {"login": "xin-hedera", "name": "Xin Li"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/352044ae866f9f3b482ed8cb1d30e2864f478b3e", "committedDate": "2020-07-29T21:14:38Z", "message": "address review comments\n\nSigned-off-by: Xin Li <xin.li@swirlds.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTUxMTQ5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/915#pullrequestreview-457951149", "createdAt": "2020-07-29T22:49:49Z", "commit": {"oid": "352044ae866f9f3b482ed8cb1d30e2864f478b3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3021, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}