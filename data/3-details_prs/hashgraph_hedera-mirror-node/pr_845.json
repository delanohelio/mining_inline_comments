{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjA2OTkx", "number": 845, "title": "Update JMeter Performance Test to Submit Transactions to Simulate High TPS", "bodyText": "Detailed description:\nCurrently Jmeter perf tests utilize the SDK to subscribe and can be scaled appropriately. However, it's missing transaction publish logic that can help simulate high TPS. This change\n\nAdd a TopicMessagePublish client and sampler that submits messages to a network\nInitial customization include number of messages, message size, interval being loop, transaction verification and timeout\nUpdated docker and run tests script to support new test plan\nAdd acs-perf-message-submit.yml Kubernetes job to run test in cluster\n\nWhich issue(s) this PR fixes:\nFixes #839\nSpecial notes for your reviewer:\n\nStill working on finding the right default values to sustain TPS\nDoes not include smarts to update tps dynamically\n\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-06-25T19:10:55Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845", "merged": true, "mergeCommit": {"oid": "87b5f32e1d94863775bf086abc0a540c7714bd0f"}, "closed": true, "closedAt": "2020-07-09T02:49:30Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwtZTogH2gAyNDQwMjA2OTkxOmU1NjBlOTJlNDc1M2ZiMTZmOTQ2ZTk3ZjJkNDRlZThkMjNlM2E5ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczDfcmgFqTQ0NTIwNTA1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e560e92e4753fb16f946e97f2d44ee8d23e3a9f3", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e560e92e4753fb16f946e97f2d44ee8d23e3a9f3", "committedDate": "2020-07-01T17:07:49Z", "message": "Initial scaffolding to spport executor service publishing\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdc4985a888097377405c801806be87ebea28994", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bdc4985a888097377405c801806be87ebea28994", "committedDate": "2020-07-01T17:07:49Z", "message": "Centralized client creating and cleanup logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf26aaf693cd83c95de8509a0bf41672c7f3d9d", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4bf26aaf693cd83c95de8509a0bf41672c7f3d9d", "committedDate": "2020-07-01T17:07:49Z", "message": "Added rate calculation logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffee41a99209f9df6e7c9063f25ca54334fcc87a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ffee41a99209f9df6e7c9063f25ca54334fcc87a", "committedDate": "2020-07-01T17:07:49Z", "message": "Expose high tps support in dockerfile\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c720990474ee7038da682f02f7faa70becc6a7", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e9c720990474ee7038da682f02f7faa70becc6a7", "committedDate": "2020-07-01T17:07:49Z", "message": "Added hcs-perf-message-submit job\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7014b22c24b53e1200a6f2e9eaa96a5cf75b105c", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7014b22c24b53e1200a6f2e9eaa96a5cf75b105c", "committedDate": "2020-07-01T17:07:49Z", "message": "Added transaction recipt verification logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6f099cabc7841acdf0a32fc5929d03ea823ecf", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd6f099cabc7841acdf0a32fc5929d03ea823ecf", "committedDate": "2020-07-01T17:07:49Z", "message": "Make verify configureable\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd0c6deba723c94809422ea0ade1d283ff6eb35", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8cd0c6deba723c94809422ea0ade1d283ff6eb35", "committedDate": "2020-07-01T17:07:49Z", "message": "Correct job defaults\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8962826e7e04dc720bfc51d521a4169724f7bd97", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/8962826e7e04dc720bfc51d521a4169724f7bd97", "committedDate": "2020-07-01T17:07:49Z", "message": "Revert TopicFeature update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "defd2f65111cb1b34f2640212b6dfe81e0161f9f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/defd2f65111cb1b34f2640212b6dfe81e0161f9f", "committedDate": "2020-07-01T17:07:49Z", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8f80eb3d73931b85c41d0d7deeb710a5e77ec8", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1d8f80eb3d73931b85c41d0d7deeb710a5e77ec8", "committedDate": "2020-07-01T17:11:03Z", "message": "Initial scaffolding to spport executor service publishing\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46698a66c1a273957fe17d488bc020ec32cf364b", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/46698a66c1a273957fe17d488bc020ec32cf364b", "committedDate": "2020-07-01T17:15:16Z", "message": "Centralized client creating and cleanup logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12a87d4b75ae44d4afe94a6ef774e85cb5ba790a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/12a87d4b75ae44d4afe94a6ef774e85cb5ba790a", "committedDate": "2020-07-01T17:18:35Z", "message": "Added rate calculation logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bafe24fc2b79417d5146043c290059d16c6c37a", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6bafe24fc2b79417d5146043c290059d16c6c37a", "committedDate": "2020-07-01T17:20:46Z", "message": "Added hcs-perf-message-submit job\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4254cf86a102e0859b04c45a762b331b0fc7a0f6", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4254cf86a102e0859b04c45a762b331b0fc7a0f6", "committedDate": "2020-07-01T17:21:32Z", "message": "Added transaction recipt verification logic\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ccf9ce69ef1f7a6df680837d4dded4683f390c3", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/1ccf9ce69ef1f7a6df680837d4dded4683f390c3", "committedDate": "2020-07-01T17:21:32Z", "message": "Revert TopicFeature update\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde3369c0d27d7893975a6b5927222e7e6ed2a90", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bde3369c0d27d7893975a6b5927222e7e6ed2a90", "committedDate": "2020-07-01T17:21:47Z", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0761b8f56f552234ed8b8de215fac824c7f99c2", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d0761b8f56f552234ed8b8de215fac824c7f99c2", "committedDate": "2020-07-01T16:58:46Z", "message": "Merge branch 'jmeter-publish-hightps' of https://github.com/hashgraph/hedera-mirror-node into jmeter-publish-hightps"}, "afterCommit": {"oid": "bde3369c0d27d7893975a6b5927222e7e6ed2a90", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bde3369c0d27d7893975a6b5927222e7e6ed2a90", "committedDate": "2020-07-01T17:21:47Z", "message": "Add counter to jmeter response\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5cc055e7487a7bf7a1165187b9c609ff89a4a1", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5cc055e7487a7bf7a1165187b9c609ff89a4a1", "committedDate": "2020-07-02T20:52:11Z", "message": "Merge perf stats in\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d994bf9a94df8f9f7c7c7cacd3421f4660b4a5", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38d994bf9a94df8f9f7c7c7cacd3421f4660b4a5", "committedDate": "2020-07-04T05:05:28Z", "message": "Added error handling for threads allowing for improved TPS\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20eef5ef322aa6fc71b7deef3a4eb7646d91f71", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f20eef5ef322aa6fc71b7deef3a4eb7646d91f71", "committedDate": "2020-07-06T14:55:38Z", "message": "Updated property specifications\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/38a037808748c98c02853f092da21ee11c904d2f", "committedDate": "2020-07-06T21:04:47Z", "message": "Added support for encoded or normal instant publish in message\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDU3NDM2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#pullrequestreview-444057436", "createdAt": "2020-07-07T16:27:58Z", "commit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyNzo1OFrOGuGYMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NDowM1rOGuHWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MjE3Nw==", "bodyText": "Why 12? If this is supposed to be the cpu core count you can use int cores = Runtime.getRuntime().availableProcessors();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450992177", "createdAt": "2020-07-07T16:27:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/TopicMessagePublishClient.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.hedera.mirror.grpc.jmeter.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.TopicMessagePublisher;\n+import com.hedera.mirror.grpc.jmeter.sampler.TopicMessagesPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TopicMessagePublishClient extends AbstractJavaSamplerClient {\n+\n+    private PropertiesHandler propHandler;\n+    private List<SDKClient> clientList;\n+    private Long topicNum;\n+    private int messagesPerBatchCount;\n+    private int messageByteSize;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        topicNum = propHandler.getLongTestParam(\"topicId\", 0L);\n+        messagesPerBatchCount = propHandler.getIntTestParam(\"messagesPerBatchCount\", 0);\n+        publishInterval = propHandler.getIntTestParam(\"publishInterval\", 20000);\n+        publishTimeout = propHandler.getIntTestParam(\"publishTimeout\", 60);\n+        messageByteSize = propHandler.getIntTestParam(\"messagesByteSize\", 16);\n+        verifyTransactions = Boolean.valueOf(propHandler.getTestParam(\"verifyTransactions\", \"true\"));\n+        printStatusInterval = propHandler.getLongTestParam(\"statusPrintIntervalMinutes\", 1L);\n+        operatorId = AccountId.fromString(propHandler.getTestParam(\"operatorId\", \"0\"));\n+        operatorPrivateKey = Ed25519PrivateKey.fromString(propHandler.getTestParam(\"operatorKey\", \"0\"));\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        String[] nodeList = propHandler.getTestParam(\"networkNodes\", \"localhost:0.0.3:50211\").split(\",\");\n+        clientList = Arrays.asList(nodeList).stream()\n+                .map(x -> new SDKClient(x, operatorId, operatorPrivateKey))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Arguments getDefaultParameters() {\n+        Arguments defaultParameters = new Arguments();\n+        defaultParameters.addArgument(\"propertiesBase\", \"hedera.mirror.test.performance\");\n+        return defaultParameters;\n+    }\n+\n+    @Override\n+    public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n+        boolean success = false;\n+        SampleResult result = new SampleResult();\n+        result.sampleStart();\n+\n+        // kick off batched message publish\n+        TopicMessagePublisher topicMessagePublisher = TopicMessagePublisher.builder()\n+                .consensusTopicId(new ConsensusTopicId(0, 0, topicNum))\n+                .messageByteSize(messageByteSize)\n+                .publishInterval(publishInterval)\n+                .publishTimeout(publishTimeout)\n+                .messagesPerBatchCount(messagesPerBatchCount)\n+                .operatorId(operatorId)\n+                .operatorPrivateKey(operatorPrivateKey)\n+                .build();\n+\n+        // publish message executor service\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(clientList.size() * 12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5Mzk5Ng==", "bodyText": "Should use logger instead", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450993996", "createdAt": "2020-07-07T16:30:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/TopicMessagePublishClient.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.hedera.mirror.grpc.jmeter.client;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import lombok.Value;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.Client;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.TopicMessagePublisher;\n+import com.hedera.mirror.grpc.jmeter.sampler.TopicMessagesPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TopicMessagePublishClient extends AbstractJavaSamplerClient {\n+\n+    private PropertiesHandler propHandler;\n+    private List<SDKClient> clientList;\n+    private Long topicNum;\n+    private int messagesPerBatchCount;\n+    private int messageByteSize;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        topicNum = propHandler.getLongTestParam(\"topicId\", 0L);\n+        messagesPerBatchCount = propHandler.getIntTestParam(\"messagesPerBatchCount\", 0);\n+        publishInterval = propHandler.getIntTestParam(\"publishInterval\", 20000);\n+        publishTimeout = propHandler.getIntTestParam(\"publishTimeout\", 60);\n+        messageByteSize = propHandler.getIntTestParam(\"messagesByteSize\", 16);\n+        verifyTransactions = Boolean.valueOf(propHandler.getTestParam(\"verifyTransactions\", \"true\"));\n+        printStatusInterval = propHandler.getLongTestParam(\"statusPrintIntervalMinutes\", 1L);\n+        operatorId = AccountId.fromString(propHandler.getTestParam(\"operatorId\", \"0\"));\n+        operatorPrivateKey = Ed25519PrivateKey.fromString(propHandler.getTestParam(\"operatorKey\", \"0\"));\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        String[] nodeList = propHandler.getTestParam(\"networkNodes\", \"localhost:0.0.3:50211\").split(\",\");\n+        clientList = Arrays.asList(nodeList).stream()\n+                .map(x -> new SDKClient(x, operatorId, operatorPrivateKey))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Arguments getDefaultParameters() {\n+        Arguments defaultParameters = new Arguments();\n+        defaultParameters.addArgument(\"propertiesBase\", \"hedera.mirror.test.performance\");\n+        return defaultParameters;\n+    }\n+\n+    @Override\n+    public SampleResult runTest(JavaSamplerContext javaSamplerContext) {\n+        boolean success = false;\n+        SampleResult result = new SampleResult();\n+        result.sampleStart();\n+\n+        // kick off batched message publish\n+        TopicMessagePublisher topicMessagePublisher = TopicMessagePublisher.builder()\n+                .consensusTopicId(new ConsensusTopicId(0, 0, topicNum))\n+                .messageByteSize(messageByteSize)\n+                .publishInterval(publishInterval)\n+                .publishTimeout(publishTimeout)\n+                .messagesPerBatchCount(messagesPerBatchCount)\n+                .operatorId(operatorId)\n+                .operatorPrivateKey(operatorPrivateKey)\n+                .build();\n+\n+        // publish message executor service\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(clientList.size() * 12);\n+\n+        // print status executor service\n+        ScheduledExecutorService loggerScheduler = Executors.newSingleThreadScheduledExecutor();\n+\n+        try {\n+            log.info(\"Schedule client tasks every publishInterval: {} ms\", publishInterval);\n+            AtomicInteger counter = new AtomicInteger(0);\n+            Stopwatch totalStopwatch = Stopwatch.createStarted();\n+            clientList.forEach(x -> {\n+                executor.scheduleAtFixedRate(\n+                        () -> {\n+                            TopicMessagesPublishSampler topicMessagesPublishSampler =\n+                                    new TopicMessagesPublishSampler(topicMessagePublisher, x, verifyTransactions);\n+                            counter.addAndGet(topicMessagesPublishSampler.submitConsensusMessageTransactions());\n+                        },\n+                        0,\n+                        publishInterval,\n+                        TimeUnit.MILLISECONDS);\n+            });\n+\n+            // log progress every minute\n+            loggerScheduler.scheduleAtFixedRate(() -> {\n+                printStatus(counter.get(), totalStopwatch);\n+            }, 0, printStatusInterval, TimeUnit.MINUTES);\n+\n+            log.info(\"Executor await termination publishTimeout: {} secs\", publishTimeout);\n+            executor.awaitTermination(publishTimeout, TimeUnit.SECONDS);\n+            printStatus(counter.get(), totalStopwatch);\n+            success = true;\n+            result.setResponseMessage(String.valueOf(counter.get()));\n+            result.setResponseCodeOK();\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5NjQyNQ==", "bodyText": "Publisher is a verb, indicating this class is a service class doing the actual publishing. Since it's not, maybe TopicMessagePublishRequest would be more accurate?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450996425", "createdAt": "2020-07-07T16:34:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODU4NA==", "bodyText": "Shouldn't generate a new Random object every message as it will return the same value in the same millisecond sometimes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r450998584", "createdAt": "2020-07-07T16:38:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {\n+    private final ConsensusTopicId consensusTopicId;\n+    private final int messagesPerBatchCount;\n+    private final int messageByteSize;\n+    private final long publishInterval;\n+    private final long publishTimeout;\n+\n+    private AccountId operatorId;\n+\n+    @ToString.Exclude\n+    private Ed25519PrivateKey operatorPrivateKey;\n+\n+    private byte[] additionalChars;\n+\n+    public String getMessage() {\n+        int timeStampBytes = 8;\n+        int additionalBytes = messageByteSize <= timeStampBytes ? 0 : messageByteSize - 8;\n+\n+        // cache additional random bytes once to fit desired message byte array size\n+        if (additionalChars == null) {\n+            additionalChars = new byte[additionalBytes];\n+            new Random().nextBytes(additionalChars);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjg3Mg==", "bodyText": "This method is a bit complex. Can we leverage a library Apache RandomStringUtils instead for the majority of the logic then just prepend the timestamp? Something like(Instant.now().toEpochMilli() + RandomStringUtils.randomAlphanumeric(x)).getBytes(\"UTF-8\")?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451002872", "createdAt": "2020-07-07T16:45:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/TopicMessagePublisher.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.hedera.mirror.grpc.jmeter.props;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.primitives.Longs;\n+import java.time.Instant;\n+import java.util.Random;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.consensus.ConsensusTopicId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+\n+@Data\n+@Builder\n+public class TopicMessagePublisher {\n+    private final ConsensusTopicId consensusTopicId;\n+    private final int messagesPerBatchCount;\n+    private final int messageByteSize;\n+    private final long publishInterval;\n+    private final long publishTimeout;\n+\n+    private AccountId operatorId;\n+\n+    @ToString.Exclude\n+    private Ed25519PrivateKey operatorPrivateKey;\n+\n+    private byte[] additionalChars;\n+\n+    public String getMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNTU5MQ==", "bodyText": "Do we really need to base64 encode the timestamp? Is that just to match Jeffrey's code? That's not what it was doing before and a simple Instant.now().toEpochMilli() + \"_\" + baseMessage + \"_\" + i + 1; would be easier and clearer.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451005591", "createdAt": "2020-07-07T16:49:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/TopicClient.java", "diffHunk": "@@ -123,10 +124,8 @@ public TransactionReceipt deleteTopic(ConsensusTopicId topicId) throws HederaSta\n         log.debug(\"Publishing {} message(s) to topicId : {}.\", numMessages, topicId);\n         List<TransactionReceipt> transactionReceiptList = new ArrayList<>();\n         for (int i = 0; i < numMessages; i++) {\n-            Instant instantRef = Instant.now();\n-            byte[] byteArray = ByteBuffer.allocate(8).putLong(instantRef.toEpochMilli()).array();\n-            String refInstant = new String(byteArray);\n-            String message = refInstant + \"_\" + baseMessage + \"_\" + i + 1;\n+            byte[] byteArray = Longs.toByteArray(Instant.now().toEpochMilli());\n+            String message = Base64.encodeBase64String(byteArray) + \"_\" + baseMessage + \"_\" + i + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNzE3Nw==", "bodyText": "Should use Long.BYTES for clarity here and other places.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451007177", "createdAt": "2020-07-07T16:52:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/client/SubscriptionResponse.java", "diffHunk": "@@ -63,8 +66,9 @@ public void validateReceivedMessages() throws Exception {\n             MirrorConsensusTopicResponse mirrorConsensusTopicResponse = mirrorHCSResponseResponse\n                     .getMirrorConsensusTopicResponse();\n \n-            Long publishMillis = Longs.fromByteArray(Arrays.copyOfRange(mirrorConsensusTopicResponse.message, 0, 8));\n-            Instant publishInstant = Instant.ofEpochMilli(publishMillis);\n+            byte[] retrievedBytes = Arrays.copyOfRange(Base64.decodeBase64(mirrorConsensusTopicResponse.message), 0, 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODA2NA==", "bodyText": "These 3 variables should be declared private and final", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#discussion_r451008064", "createdAt": "2020-07-07T16:54:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/TransactionSubmissionResult.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.result;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+@Data\n+@Log4j2\n+public class TransactionSubmissionResult {\n+\n+    private AtomicInteger counter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a037808748c98c02853f092da21ee11c904d2f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "443ffd868161a4026598d8dd57a55f52fa4f37eb", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/443ffd868161a4026598d8dd57a55f52fa4f37eb", "committedDate": "2020-07-07T23:40:44Z", "message": "Addressed feedback\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjA1MDU2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/845#pullrequestreview-445205056", "createdAt": "2020-07-09T00:00:17Z", "commit": {"oid": "443ffd868161a4026598d8dd57a55f52fa4f37eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4049, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}