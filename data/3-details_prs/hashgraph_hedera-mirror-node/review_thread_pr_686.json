{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDAxMjg4", "number": 686, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1ODowN1rODzCwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0NDowOVrOD009mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODQ5MDI2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1ODowN1rOGHc4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTo1MDo0MFrOGHeI5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NjM1OA==", "bodyText": "nit: You should move L67-76 into a separate method that deals with building the PubSubMessage", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410466358", "createdAt": "2020-04-17T20:58:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.Lists;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.io.IOException;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.MessageBuilder;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.NonFeeTransferExtractionStrategy;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class PubSubRecordItemListener implements RecordItemListener {\n+\n+    private final MessageChannel pubsubOutputChannel;\n+    private final NetworkAddressBook networkAddressBook;\n+    private final NonFeeTransferExtractionStrategy nonFeeTransfersExtractor;\n+    private final TransactionHandlerFactory transactionHandlerFactory;\n+\n+    @Override\n+    public void onItem(RecordItem recordItem) throws ImporterException {\n+        TransactionBody body = recordItem.getTransactionBody();\n+        TransactionRecord txRecord = recordItem.getRecord();\n+        TransactionHandler transactionHandler = transactionHandlerFactory.create(body);\n+        log.trace(\"Storing transaction body: {}\", () -> Utility.printProtoMessage(body));\n+\n+        PubSubMessage pubSubMessage = new PubSubMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NzAxNQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410487015", "createdAt": "2020-04-17T21:50:40Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.Lists;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.io.IOException;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.MessageBuilder;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.NonFeeTransferExtractionStrategy;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class PubSubRecordItemListener implements RecordItemListener {\n+\n+    private final MessageChannel pubsubOutputChannel;\n+    private final NetworkAddressBook networkAddressBook;\n+    private final NonFeeTransferExtractionStrategy nonFeeTransfersExtractor;\n+    private final TransactionHandlerFactory transactionHandlerFactory;\n+\n+    @Override\n+    public void onItem(RecordItem recordItem) throws ImporterException {\n+        TransactionBody body = recordItem.getTransactionBody();\n+        TransactionRecord txRecord = recordItem.getRecord();\n+        TransactionHandler transactionHandler = transactionHandlerFactory.create(body);\n+        log.trace(\"Storing transaction body: {}\", () -> Utility.printProtoMessage(body));\n+\n+        PubSubMessage pubSubMessage = new PubSubMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NjM1OA=="}, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODUxMzk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTowNjo1NlrOGHdG_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyMToxMlrOGHewzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MDE0MQ==", "bodyText": "q: Why the need for this config if it's just the same as hedera.mirror.parser.record.pubsub?\nIs it beacuse you want to decouple the configs and allow cloud.gcp.x.enabled to be set regardless of pubs or when there's more than just the pubs option?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410470141", "createdAt": "2020-04-17T21:06:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -34,6 +43,13 @@ spring:\n   application:\n     name: hedera-mirror-importer\n   cloud:\n+    gcp:\n+      core: # Initializes credentials, which may be not set if pubsub is disabled.\n+        enabled: ${hedera.mirror.parser.record.pubsub.enabled}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzIyOA==", "bodyText": "not needed anymore. Recently changed to use credentials under spring.cloud.gpc.pubsub.\nReason for its need earlier:\nSpring cloud core tries to instantiate default CredentialProvider if any spring-cloud-gcp-starter-* dependency is imported. So irrespective of pubsub.enabled value, it tried to use ...gcp.credentials.location to instantiate CredentialProvider. However, that config is empty when pubsub is disabled which lead to exceptions and importer failure.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410497228", "createdAt": "2020-04-17T22:21:12Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -34,6 +43,13 @@ spring:\n   application:\n     name: hedera-mirror-importer\n   cloud:\n+    gcp:\n+      core: # Initializes credentials, which may be not set if pubsub is disabled.\n+        enabled: ${hedera.mirror.parser.record.pubsub.enabled}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MDE0MQ=="}, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODUzMTE2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMToxMzoyOVrOGHdRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoxMDozMlrOGHekUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MjgyMA==", "bodyText": "just move the null check into isFileAddressBook()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410472820", "createdAt": "2020-04-17T21:13:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.Lists;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.io.IOException;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.MessageBuilder;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.NonFeeTransferExtractionStrategy;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class PubSubRecordItemListener implements RecordItemListener {\n+\n+    private final MessageChannel pubsubOutputChannel;\n+    private final NetworkAddressBook networkAddressBook;\n+    private final NonFeeTransferExtractionStrategy nonFeeTransfersExtractor;\n+    private final TransactionHandlerFactory transactionHandlerFactory;\n+\n+    @Override\n+    public void onItem(RecordItem recordItem) throws ImporterException {\n+        TransactionBody body = recordItem.getTransactionBody();\n+        TransactionRecord txRecord = recordItem.getRecord();\n+        TransactionHandler transactionHandler = transactionHandlerFactory.create(body);\n+        log.trace(\"Storing transaction body: {}\", () -> Utility.printProtoMessage(body));\n+\n+        PubSubMessage pubSubMessage = new PubSubMessage();\n+        long consensusTimestamp = Utility.timeStampInNanos(txRecord.getConsensusTimestamp());\n+        pubSubMessage.setConsensusTimestamp(consensusTimestamp);\n+        EntityId entity = transactionHandler.getEntityId(recordItem);\n+        pubSubMessage.setEntity(entity);\n+        pubSubMessage.setTransaction(recordItem.getTransaction().toBuilder()\n+                .clearBodyBytes()\n+                .setBody(recordItem.getTransactionBody()) // setting deprecated field makes json conversion easier\n+                .build());\n+        pubSubMessage.setTransactionRecord(recordItem.getRecord());\n+        pubSubMessage.setNonFeeTransfers(addNonFeeTransfers(body, txRecord));\n+        log.debug(\"Publishing transaction : {}\", consensusTimestamp);\n+        try {\n+            pubsubOutputChannel.send(MessageBuilder.withPayload(pubSubMessage).build());\n+            log.info(\"Published transaction : {}\", consensusTimestamp);\n+        } catch (Exception e) {\n+            // This will make RecordFileParser to retry whole file, thus sending duplicates of previous transactions\n+            // in this file. In needed in future, this can be optimized to resend only the txns with consensusTimestamp\n+            // greater than that of last correctly sent txn.\n+            throw new ParserException(\"Error sending transaction to pubsub\", e);\n+        }\n+\n+        if (entity != null && isFileAddressBook(entity)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDAzNA==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r410494034", "createdAt": "2020-04-17T22:10:32Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubRecordItemListener.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.Lists;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.io.IOException;\n+import java.util.List;\n+import javax.inject.Named;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.MessageBuilder;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.NonFeeTransferExtractionStrategy;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@RequiredArgsConstructor\n+public class PubSubRecordItemListener implements RecordItemListener {\n+\n+    private final MessageChannel pubsubOutputChannel;\n+    private final NetworkAddressBook networkAddressBook;\n+    private final NonFeeTransferExtractionStrategy nonFeeTransfersExtractor;\n+    private final TransactionHandlerFactory transactionHandlerFactory;\n+\n+    @Override\n+    public void onItem(RecordItem recordItem) throws ImporterException {\n+        TransactionBody body = recordItem.getTransactionBody();\n+        TransactionRecord txRecord = recordItem.getRecord();\n+        TransactionHandler transactionHandler = transactionHandlerFactory.create(body);\n+        log.trace(\"Storing transaction body: {}\", () -> Utility.printProtoMessage(body));\n+\n+        PubSubMessage pubSubMessage = new PubSubMessage();\n+        long consensusTimestamp = Utility.timeStampInNanos(txRecord.getConsensusTimestamp());\n+        pubSubMessage.setConsensusTimestamp(consensusTimestamp);\n+        EntityId entity = transactionHandler.getEntityId(recordItem);\n+        pubSubMessage.setEntity(entity);\n+        pubSubMessage.setTransaction(recordItem.getTransaction().toBuilder()\n+                .clearBodyBytes()\n+                .setBody(recordItem.getTransactionBody()) // setting deprecated field makes json conversion easier\n+                .build());\n+        pubSubMessage.setTransactionRecord(recordItem.getRecord());\n+        pubSubMessage.setNonFeeTransfers(addNonFeeTransfers(body, txRecord));\n+        log.debug(\"Publishing transaction : {}\", consensusTimestamp);\n+        try {\n+            pubsubOutputChannel.send(MessageBuilder.withPayload(pubSubMessage).build());\n+            log.info(\"Published transaction : {}\", consensusTimestamp);\n+        } catch (Exception e) {\n+            // This will make RecordFileParser to retry whole file, thus sending duplicates of previous transactions\n+            // in this file. In needed in future, this can be optimized to resend only the txns with consensusTimestamp\n+            // greater than that of last correctly sent txn.\n+            throw new ParserException(\"Error sending transaction to pubsub\", e);\n+        }\n+\n+        if (entity != null && isFileAddressBook(entity)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MjgyMA=="}, "originalCommit": {"oid": "f5ac81be1933227289beed951abd66b5ef9a6c49"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzkxMDkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo1ODowNFrOGIpZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoxMToyMVrOGIxmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDA5Mg==", "bodyText": "@NotNull not applicable for primitive types.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411720092", "createdAt": "2020-04-20T21:58:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubProperties.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.parser.record.pubsub\")\n+public class PubSubProperties {\n+\n+    // Field here only for namesake. Override in yml config file, setting value here will not take effect.\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NDM0Ng==", "bodyText": "removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411854346", "createdAt": "2020-04-21T04:11:21Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubProperties.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+@Data\n+@Validated\n+@ConfigurationProperties(\"hedera.mirror.parser.record.pubsub\")\n+public class PubSubProperties {\n+\n+    // Field here only for namesake. Override in yml config file, setting value here will not take effect.\n+    @NotNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDA5Mg=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODExNjM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/PubSubRecordItemListenerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowNDo0NlrOGIrNNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzoxMTowOFrOGJhUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTY4NA==", "bodyText": "We should use private access by default for all fields, not a mix of package private, protected and private.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411749684", "createdAt": "2020-04-20T23:04:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/PubSubRecordItemListenerTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.protobuf.ByteString;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ConsensusSubmitMessageTransactionBody;\n+import com.hederahashgraph.api.proto.java.CryptoTransferTransactionBody;\n+import com.hederahashgraph.api.proto.java.FileAppendTransactionBody;\n+import com.hederahashgraph.api.proto.java.FileID;\n+import com.hederahashgraph.api.proto.java.FileUpdateTransactionBody;\n+import com.hederahashgraph.api.proto.java.ResponseCodeEnum;\n+import com.hederahashgraph.api.proto.java.TopicID;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionReceipt;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import com.hederahashgraph.api.proto.java.TransferList;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PubSubRecordItemListenerTest {\n+    private static final Long CONSENSUS_TIMESTAMP = 100L;\n+    private static final TransactionRecord DEFAULT_RECORD = TransactionRecord.newBuilder()\n+            .setConsensusTimestamp(Utility.instantToTimestamp(Instant.ofEpochSecond(0L, CONSENSUS_TIMESTAMP)))\n+            .setReceipt(TransactionReceipt.newBuilder().setStatus(ResponseCodeEnum.SUCCESS).build())\n+            .build();\n+    private static final byte[] DEFAULT_RECORD_BYTES = DEFAULT_RECORD.toByteArray();\n+    private static final FileID ADDRESS_BOOK_FILE_ID = FileID.newBuilder().setFileNum(102).build();\n+\n+    @Mock\n+    MessageChannel messageChannel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzNjM2NA==", "bodyText": "Done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412636364", "createdAt": "2020-04-22T03:11:08Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/PubSubRecordItemListenerTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.protobuf.ByteString;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ConsensusSubmitMessageTransactionBody;\n+import com.hederahashgraph.api.proto.java.CryptoTransferTransactionBody;\n+import com.hederahashgraph.api.proto.java.FileAppendTransactionBody;\n+import com.hederahashgraph.api.proto.java.FileID;\n+import com.hederahashgraph.api.proto.java.FileUpdateTransactionBody;\n+import com.hederahashgraph.api.proto.java.ResponseCodeEnum;\n+import com.hederahashgraph.api.proto.java.TopicID;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionReceipt;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import com.hederahashgraph.api.proto.java.TransferList;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+\n+import com.hedera.mirror.importer.addressbook.NetworkAddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.exception.ParserException;\n+import com.hedera.mirror.importer.parser.domain.PubSubMessage;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandler;\n+import com.hedera.mirror.importer.parser.record.transactionhandler.TransactionHandlerFactory;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PubSubRecordItemListenerTest {\n+    private static final Long CONSENSUS_TIMESTAMP = 100L;\n+    private static final TransactionRecord DEFAULT_RECORD = TransactionRecord.newBuilder()\n+            .setConsensusTimestamp(Utility.instantToTimestamp(Instant.ofEpochSecond(0L, CONSENSUS_TIMESTAMP)))\n+            .setReceipt(TransactionReceipt.newBuilder().setStatus(ResponseCodeEnum.SUCCESS).build())\n+            .build();\n+    private static final byte[] DEFAULT_RECORD_BYTES = DEFAULT_RECORD.toByteArray();\n+    private static final FileID ADDRESS_BOOK_FILE_ID = FileID.newBuilder().setFileNum(102).build();\n+\n+    @Mock\n+    MessageChannel messageChannel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTY4NA=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE2OTMwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoyNDozOVrOGIrqoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoxMjozOVrOGIxnVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NzIxNw==", "bodyText": "Fields should all be private. Would also be nice to be final and use @Value if possible and doesn't cause Jackson issues.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411757217", "createdAt": "2020-04-20T23:24:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NDY3Ng==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411854676", "createdAt": "2020-04-21T04:12:39Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NzIxNw=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE5MTQ3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzozMDoyN1rOGIr3UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo1NDo1OVrOGJhAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MDQ2NQ==", "bodyText": "Can these be removed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411760465", "createdAt": "2020-04-20T23:30:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;\n+    EntityId entity;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    Transaction transaction;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    TransactionRecord transactionRecord;\n+    /*\n+    Transaction transaction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzMTIwMQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412631201", "createdAt": "2020-04-22T02:54:59Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;\n+    EntityId entity;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    Transaction transaction;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    TransactionRecord transactionRecord;\n+    /*\n+    Transaction transaction;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MDQ2NQ=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODIxMjc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzozNTo1NVrOGIsDdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzowNjo0MFrOGJhPMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzU3Mw==", "bodyText": "I've no idea what other places you're referring to here. In general, the dependency inversion principle recommends you use the highest level interface you can. List is fine here though.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411763573", "createdAt": "2020-04-20T23:35:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;\n+    EntityId entity;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    Transaction transaction;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    TransactionRecord transactionRecord;\n+    /*\n+    Transaction transaction;\n+    // Transaction.body is deprecated, and using Transaction.bodyBytes would require de-serializing again. Hence,\n+    // making TransactionBody a field here despite it being part of Transaction itself.\n+    TransactionBody transactionBody;\n+    TransactionRecord transactionRecord;\n+    */\n+    // TODO: it might be better to change other places to List<> too? Returning an object with type way up the hierarchy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzNDkzMQ==", "bodyText": "Cool. Changed to Iterable.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412634931", "createdAt": "2020-04-22T03:06:40Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import java.util.List;\n+import lombok.Data;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Data\n+public class PubSubMessage {\n+    Long consensusTimestamp;\n+    EntityId entity;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    Transaction transaction;\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    TransactionRecord transactionRecord;\n+    /*\n+    Transaction transaction;\n+    // Transaction.body is deprecated, and using Transaction.bodyBytes would require de-serializing again. Hence,\n+    // making TransactionBody a field here despite it being part of Transaction itself.\n+    TransactionBody transactionBody;\n+    TransactionRecord transactionRecord;\n+    */\n+    // TODO: it might be better to change other places to List<> too? Returning an object with type way up the hierarchy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzU3Mw=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODI0MTUxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo0NzowMlrOGIsTag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMzozNjo0N1rOGJhz7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NzY1OA==", "bodyText": "I think even if we don't have a composite class, we should design the properties such that multiple can be enabled simultaneously in the future without a breaking change. Hence, I would prefer hedera.mirror.parser.record.pubsub.enabled and hedera.mirror.parser.record.entity.enabled=true. You already have the former property. This also dovetails nicely with our parser re-organization detailed in #687.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411767658", "createdAt": "2020-04-20T23:47:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();\n+    }\n+\n+    /**\n+     * Enable components to persist transactions into database\n+     */\n+    @ConditionalOnProperty(prefix = \"hedera.mirror.parser.record.persist\", name = \"to\", havingValue = \"DATABASE\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY0NDMzNQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412644335", "createdAt": "2020-04-22T03:36:47Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();\n+    }\n+\n+    /**\n+     * Enable components to persist transactions into database\n+     */\n+    @ConditionalOnProperty(prefix = \"hedera.mirror.parser.record.persist\", name = \"to\", havingValue = \"DATABASE\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NzY1OA=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODI2NDY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo1NTozMlrOGIsgHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo1MDo1MVrOGJg7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MDkxMA==", "bodyText": "This should be within PubSubConfiguration. Also, might not be needed to explicitly declare as Spring Integration usually automatically creates direct channels implicitly that are referenced.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411770910", "createdAt": "2020-04-20T23:55:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyOTg5OA==", "bodyText": "Spring Integration usually automatically creates direct channels implicitly that are referenced.\n\nI was expecting same since docs mentioned it too. However, wasn't happening.\nspring-projects/spring-integration#3111\nPrefer explicit creation rather than @Lazy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412629898", "createdAt": "2020-04-22T02:50:51Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MDkxMA=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODI4MDc2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDowMTo1NVrOGIsozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo1NDo0NFrOGJhAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzEzNA==", "bodyText": "This is very strange bean configuration.  PostgresWritingRecordParsedItemHandler is already a component scanned bean, you're just creating a new bean for the same object and marking it as primary it looks like. It would be clearer and reduce startup/memory to not create PostgresWritingRecordParsedItemHandler at all if it's not enabled instead of always creating it regardless.\nSame comment applies to  recordItemListener and pubsub listeners.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411773134", "createdAt": "2020-04-21T00:01:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();\n+    }\n+\n+    /**\n+     * Enable components to persist transactions into database\n+     */\n+    @ConditionalOnProperty(prefix = \"hedera.mirror.parser.record.persist\", name = \"to\", havingValue = \"DATABASE\",\n+            matchIfMissing = true)\n+    protected static class DatabaseConfiguration {\n+        @Bean\n+        @Primary\n+        RecordItemListener recordItemListener(RecordItemParser recordItemParser) {\n+            return recordItemParser;\n+        }\n+\n+        @Bean\n+        @Primary\n+        RecordStreamFileListener recordStreamFileListener(\n+                PostgresWritingRecordParsedItemHandler postgresWritingRecordParsedItemHandler) {\n+            return postgresWritingRecordParsedItemHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYzMTEzOQ==", "bodyText": "Made bean creation more sophisticated.\nInstantiated based on @Conditionals now.\nHad to dig a bit into spring docs to understand and compare so many different @ConditionalOn*  options.\nIf there's a substantial better way in your mind, please let me know, i'll include it in integration tests PR. (Unless there's something incorrect with current approach, in which case we'll fix it now) :)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412631139", "createdAt": "2020-04-22T02:54:44Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/RecordParserConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultPublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.DefaultSubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.PostgresWritingRecordParsedItemHandler;\n+import com.hedera.mirror.importer.parser.record.RecordItemListener;\n+import com.hedera.mirror.importer.parser.record.RecordItemParser;\n+import com.hedera.mirror.importer.parser.record.RecordStreamFileListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordItemListener;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubRecordStreamFileListener;\n+\n+@Configuration\n+@Log4j2\n+@RequiredArgsConstructor\n+public class RecordParserConfiguration {\n+\n+    // Required by PubSubRecordItemListener\n+    @Bean\n+    MessageChannel pubsubOutputChannel() {\n+        return new DirectChannel();\n+    }\n+\n+    /**\n+     * Enable components to persist transactions into database\n+     */\n+    @ConditionalOnProperty(prefix = \"hedera.mirror.parser.record.persist\", name = \"to\", havingValue = \"DATABASE\",\n+            matchIfMissing = true)\n+    protected static class DatabaseConfiguration {\n+        @Bean\n+        @Primary\n+        RecordItemListener recordItemListener(RecordItemParser recordItemParser) {\n+            return recordItemParser;\n+        }\n+\n+        @Bean\n+        @Primary\n+        RecordStreamFileListener recordStreamFileListener(\n+                PostgresWritingRecordParsedItemHandler postgresWritingRecordParsedItemHandler) {\n+            return postgresWritingRecordParsedItemHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzEzNA=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODMxNzU4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxNjoyOVrOGIs82g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoxODo1MFrOGIxuig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODI2Ng==", "bodyText": "Not completely against current approach, but should we just document and expose the spring.cloud.gcp.pubsub.*  directly instead of duplicating properties? I don't see any value with the duplication currently like we have do with the db properties for abstracting database driver (jdbc vs r2dbc) or construct composite properties like url. And don't like all the Field here only for namesake comments", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411778266", "createdAt": "2020-04-21T00:16:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -34,6 +43,12 @@ spring:\n   application:\n     name: hedera-mirror-importer\n   cloud:\n+    gcp:\n+      pubsub:\n+        enabled: ${hedera.mirror.parser.record.pubsub.enabled}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NjUyMg==", "bodyText": "I liked the encapsulation of all pubsub properties together. But either is fine by me.\nRemoved them in PubSubProperties too. Added non-java doc comment in that class explaining unexpectedly small properties set.\nDocs to follow in later PR.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r411856522", "createdAt": "2020-04-21T04:18:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/resources/application.yml", "diffHunk": "@@ -34,6 +43,12 @@ spring:\n   application:\n     name: hedera-mirror-importer\n   cloud:\n+    gcp:\n+      pubsub:\n+        enabled: ${hedera.mirror.parser.record.pubsub.enabled}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODI2Ng=="}, "originalCommit": {"oid": "19fa4043fe1659317a222a6f1f281460b814c23a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDUyNjQxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1MToyNFrOGJkhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1MToyNFrOGJkhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4ODc3MQ==", "bodyText": "Can't do anything about this. https://developers.google.com/protocol-buffers/docs/proto3#json\nWe can't also have a general policy to add deprecated fields to ignored fields (feature of JsonFormat) since it'll break backward compatibility.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r412688771", "createdAt": "2020-04-22T05:51:24Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/domain/PubSubMessageTest.java", "diffHunk": "@@ -0,0 +1,238 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.protobuf.ByteString;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ConsensusSubmitMessageTransactionBody;\n+import com.hederahashgraph.api.proto.java.Duration;\n+import com.hederahashgraph.api.proto.java.ResponseCodeEnum;\n+import com.hederahashgraph.api.proto.java.SignatureMap;\n+import com.hederahashgraph.api.proto.java.SignaturePair;\n+import com.hederahashgraph.api.proto.java.Timestamp;\n+import com.hederahashgraph.api.proto.java.TopicID;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionID;\n+import com.hederahashgraph.api.proto.java.TransactionReceipt;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import com.hederahashgraph.api.proto.java.TransferList;\n+import java.time.Instant;\n+import org.junit.jupiter.api.Test;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+class PubSubMessageTest {\n+    private static final Long DEFAULT_TIMESTAMP_LONG = 123456789L;\n+    private static final Timestamp TIMESTAMP =\n+            Utility.instantToTimestamp(Instant.ofEpochSecond(0L, DEFAULT_TIMESTAMP_LONG));\n+    private static final AccountID ACCOUNT_ID = AccountID.newBuilder().setAccountNum(10L).build();\n+    private static final TopicID TOPIC_ID = TopicID.newBuilder().setTopicNum(20L).build();\n+    private static final ByteString BYTE_STRING = ByteString.copyFromUtf8(\"abcdef\");\n+    private static final Long INT64_VALUE = 100_000_000L;\n+\n+    // Tests\n+    //   1. all fields set\n+    //   2. entityNull and nonFeeTransfers null\n+\n+    @Test\n+    void testSerializationAllFieldsSet() throws Exception {\n+        Iterable<AccountAmount> nonFeeTransfers = Lists.newArrayList(\n+                AccountAmount.newBuilder().setAccountID(ACCOUNT_ID).setAmount(INT64_VALUE).build(),\n+                AccountAmount.newBuilder().setAccountID(ACCOUNT_ID).setAmount(INT64_VALUE).build());\n+        PubSubMessage pubSubMessage = new PubSubMessage(\n+                DEFAULT_TIMESTAMP_LONG,\n+                EntityId.of(TOPIC_ID),\n+                getTransaction(),\n+                getTransactionRecord(),\n+                nonFeeTransfers);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JsonNode actual = objectMapper.readTree(objectMapper.writeValueAsString(pubSubMessage));\n+        JsonNode expected = objectMapper.readTree(\"{\" +\n+                \"  \\\"consensusTimestamp\\\" : 123456789,\" +\n+                \"  \\\"entity\\\" : {\" +\n+                \"    \\\"entityShard\\\" : 0,\" +\n+                \"    \\\"entityRealm\\\" : 0,\" +\n+                \"    \\\"entityNum\\\" : 20,\" +\n+                \"    \\\"entityTypeId\\\" : 4\" +\n+                \"  },\" +\n+                getExpectedTransactionJson() + \",\" +\n+                getExpectedTransactionRecord() + \",\" +\n+                \"  \\\"nonFeeTransfers\\\" : [ {\" +\n+                \"    \\\"accountID\\\": {\" +\n+                \"      \\\"shardNum\\\": \\\"0\\\",\" +\n+                \"      \\\"realmNum\\\": \\\"0\\\",\" +\n+                \"      \\\"accountNum\\\": \\\"10\\\"\" +\n+                \"      },\" +\n+                \"    \\\"amount\\\": \\\"100000000\\\"\" +\n+                \"  }, {\" +\n+                \"    \\\"accountID\\\": {\" +\n+                \"      \\\"shardNum\\\": \\\"0\\\",\" +\n+                \"      \\\"realmNum\\\": \\\"0\\\",\" +\n+                \"      \\\"accountNum\\\": \\\"10\\\"\" +\n+                \"      },\" +\n+                \"    \\\"amount\\\": \\\"100000000\\\"\" +\n+                \"  } ]\" +\n+                \"}\");\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testSerializationWithNullFields() throws Exception {\n+        PubSubMessage pubSubMessage = new PubSubMessage(DEFAULT_TIMESTAMP_LONG, null, getTransaction(),\n+                getTransactionRecord(), null);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JsonNode actual = objectMapper.readTree(objectMapper.writeValueAsString(pubSubMessage));\n+        JsonNode expected = objectMapper.readTree(\"{\" +\n+                \"  \\\"consensusTimestamp\\\" : 123456789,\" +\n+                getExpectedTransactionJson() + \",\" +\n+                getExpectedTransactionRecord() +\n+                \"}\");\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    private static Transaction getTransaction() {\n+        return Transaction.newBuilder()\n+                .setBody(TransactionBody.newBuilder()\n+                        .setTransactionID(TransactionID.newBuilder()\n+                                .setTransactionValidStart(TIMESTAMP)\n+                                .setAccountID(ACCOUNT_ID)\n+                                .build())\n+                        .setNodeAccountID(ACCOUNT_ID)\n+                        .setTransactionFee(INT64_VALUE)\n+                        .setTransactionValidDuration(Duration.newBuilder().setSeconds(INT64_VALUE).build())\n+                        .setMemoBytes(BYTE_STRING)\n+                        .setConsensusSubmitMessage(ConsensusSubmitMessageTransactionBody.newBuilder()\n+                                .setTopicID(TOPIC_ID)\n+                                .setMessage(BYTE_STRING)\n+                                .build())\n+                        .build())\n+                .setSigMap(SignatureMap.newBuilder()\n+                        .addSigPair(SignaturePair.newBuilder()\n+                                .setEd25519(BYTE_STRING)\n+                                .setPubKeyPrefix(BYTE_STRING)\n+                                .build())\n+                        .build())\n+                .build();\n+    }\n+\n+    private static String getExpectedTransactionJson() {\n+        return \"\\\"transaction\\\" : {\" +\n+                \"  \\\"body\\\": {\" +\n+                \"    \\\"transactionID\\\": {\" +\n+                \"      \\\"transactionValidStart\\\": {\" +\n+                \"        \\\"seconds\\\": \\\"0\\\",\" +\n+                \"        \\\"nanos\\\": 123456789\" +\n+                \"      },\" +\n+                \"      \\\"accountID\\\": {\" +\n+                \"        \\\"shardNum\\\": \\\"0\\\",\" +\n+                \"        \\\"realmNum\\\": \\\"0\\\",\" +\n+                \"        \\\"accountNum\\\": \\\"10\\\"\" +\n+                \"      }\" +\n+                \"    },\" +\n+                \"    \\\"nodeAccountID\\\": {\" +\n+                \"      \\\"shardNum\\\": \\\"0\\\",\" +\n+                \"      \\\"realmNum\\\": \\\"0\\\",\" +\n+                \"      \\\"accountNum\\\": \\\"10\\\"\" +\n+                \"    },\" +\n+                \"    \\\"transactionFee\\\": \\\"100000000\\\",\" +\n+                \"    \\\"transactionValidDuration\\\": {\" +\n+                \"      \\\"seconds\\\": \\\"100000000\\\"\" +\n+                \"    },\" +\n+                \"    \\\"generateRecord\\\": false,\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA5NzUxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyNDo1MFrOGJ8beA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyNDo1MFrOGJ8beA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MDQ0MA==", "bodyText": "Looks like it's TODONE? :)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r413080440", "createdAt": "2020-04-22T15:24:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/domain/PubSubMessage.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.hedera.mirror.importer.parser.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.hederahashgraph.api.proto.java.AccountAmount;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import lombok.Value;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.serializer.ProtoJsonSerializer;\n+\n+@Value\n+public class PubSubMessage {\n+    private final Long consensusTimestamp;\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    private final EntityId entity;\n+\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    private final Transaction transaction;\n+\n+    @JsonSerialize(using = ProtoJsonSerializer.class)\n+    private final TransactionRecord transactionRecord;\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    @JsonSerialize(contentUsing = ProtoJsonSerializer.class)\n+    private final Iterable<AccountAmount> nonFeeTransfers; // TODO: try iterable here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE0MjExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityEnabledCondition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMjo1N1rOGJ82Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMjo1N1rOGJ82Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NzMxMA==", "bodyText": "Can just use Spring's annotation inheritance:\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.TYPE, ElementType.METHOD })\n@ConditionalOnProperty(prefix = \"hedera.mirror.parser.record\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n@ConditionalOnProperty(...)\npublic @interface ConditionalOnEntity {}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r413087310", "createdAt": "2020-04-22T15:32:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityEnabledCondition.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hedera.mirror.importer.parser.record.entity;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+public class EntityEnabledCondition implements Condition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE1MjI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNDo0OFrOGJ88RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNDo0OFrOGJ88RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4ODgzNg==", "bodyText": "@NotBlank", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r413088836", "createdAt": "2020-04-22T15:34:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/pubsub/PubSubProperties.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hedera.mirror.importer.parser.record.pubsub;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.validation.constraints.NotNull;\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.validation.annotation.Validated;\n+\n+// Exporting to PubSub can be configured using properties in spring.cloud.gcp.pubsub.* and here. See configuration\n+// docs for more details.\n+@Data\n+@Validated\n+@Conditional(PubSubEnabledCondition.class)\n+@ConfigurationProperties(\"hedera.mirror.parser.record.pubsub\")\n+public class PubSubProperties {\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE4NjExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordParserProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MTowNlrOGJ9QjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MTowNlrOGJ9QjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NDAyOQ==", "bodyText": "Can be removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r413094029", "createdAt": "2020-04-22T15:41:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordParserProperties.java", "diffHunk": "@@ -24,6 +24,7 @@\n import java.time.Duration;\n import javax.validation.constraints.NotNull;\n import lombok.Data;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzIwMjgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/PubSubAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0NDowOVrOGJ9aQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0NDowOVrOGJ9aQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NjUxNQ==", "bodyText": "Not needed with @ConfigurationPropertiesScan", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/686#discussion_r413096515", "createdAt": "2020-04-22T15:44:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/PubSubAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.hedera.mirror.importer.config;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.pubsub.GcpPubSubAutoConfiguration;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.PublisherFactory;\n+import org.springframework.cloud.gcp.pubsub.support.SubscriberFactory;\n+import org.springframework.cloud.gcp.pubsub.support.converter.JacksonPubSubMessageConverter;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.DirectChannel;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubEnabledCondition;\n+import com.hedera.mirror.importer.parser.record.pubsub.PubSubProperties;\n+\n+@Configuration\n+@AutoConfigureAfter(GcpPubSubAutoConfiguration.class)  // for SubscriberFactory and PublisherFactory\n+@Conditional(PubSubEnabledCondition.class)\n+@EnableConfigurationProperties(PubSubProperties.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8539dd4ec993df334ac2658ce3a0d956cbf215"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 975, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}