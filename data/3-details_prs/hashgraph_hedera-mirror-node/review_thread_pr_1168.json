{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTYzNzI3", "number": 1168, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NDo1M1rOEx8J9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMjo0NVrOEy5jFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODAxMjcxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/constants.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1NDo1M1rOHoTcmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxNjo1MFrOHoXWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMzcwNg==", "bodyText": "Should TOKENID also be swapped to lowercase?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512023706", "createdAt": "2020-10-26T14:54:53Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -35,7 +35,7 @@ const filterKeys = {\n   TOKENID: 'tokenId',\n   TOKEN_ID: 'token.id',\n   CREDIT_TYPE: 'type',\n-  TRANSACTION_TYPE: 'transactionType',\n+  TRANSACTION_TYPE: 'transactiontype',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc76589090c0f8316f419dbca3325b732d0db05"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4NzY1NA==", "bodyText": "Yeah, thanks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512087654", "createdAt": "2020-10-26T16:16:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -35,7 +35,7 @@ const filterKeys = {\n   TOKENID: 'tokenId',\n   TOKEN_ID: 'token.id',\n   CREDIT_TYPE: 'type',\n-  TRANSACTION_TYPE: 'transactionType',\n+  TRANSACTION_TYPE: 'transactiontype',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMzcwNg=="}, "originalCommit": {"oid": "2fc76589090c0f8316f419dbca3325b732d0db05"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODU0MDEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0NDoyMVrOHoYjfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToyMjo0NFrOHpRhWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzM5MQ==", "bodyText": "Might make sense to add a comment here so that it's not lumped in as \"logging middleware\".", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512107391", "createdAt": "2020-10-26T16:44:21Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -102,6 +102,7 @@ app.use(cors());\n \n // logging middleware\n app.use(requestLogger);\n+app.use(requestQueryKeyFormatter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0MDczMA==", "bodyText": "Moved up under a different log", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513040730", "createdAt": "2020-10-27T21:22:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -102,6 +102,7 @@ app.use(cors());\n \n // logging middleware\n app.use(requestLogger);\n+app.use(requestQueryKeyFormatter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzM5MQ=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDI1NTgxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/requestHandler.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjowMzozNFrOHoouCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxNzo0NFrOHpRX2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3MjIzMg==", "bodyText": "there is performance issue. in utils.js,\nconst buildFilterObject = (filters) => {\n  let filterObject = [];\n  if (filters === null) {\n    return null;\n  }\n\n  for (const [key, values] of Object.entries(filters)) {\nthe time complexity is O(n^2). this can be exploited by sending queries with a large number of query params.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512372232", "createdAt": "2020-10-27T02:03:34Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {\n+    get: (target, name) => target[Object.keys(target).find((key) => key.toLowerCase() === name.toLowerCase())],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3NTQ0Mg==", "bodyText": "this also does not handle the case where the same param appears in different lower-upper case combinations, e.g.,\ntimestamp=gt:100&Timestamp=lt:200\n\nexpress will parse it into {timestamp: 'gt:100', Timestamp: 'lt:200'}\nwith the middleware, req.query['timestamp'] will always return the first match, which is 'gt:100'", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512375442", "createdAt": "2020-10-27T02:15:28Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {\n+    get: (target, name) => target[Object.keys(target).find((key) => key.toLowerCase() === name.toLowerCase())],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3MjIzMg=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzODI5Nw==", "bodyText": "Good points.\nI decided to go with a customer query parser.\nAlso changed for a for in which is more performant than Object.entries()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513038297", "createdAt": "2020-10-27T21:17:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {\n+    get: (target, name) => target[Object.keys(target).find((key) => key.toLowerCase() === name.toLowerCase())],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM3MjIzMg=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjkzMzgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyNDozMFrOHpCFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxODo1N1rOHpRZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4Nzg0MQ==", "bodyText": "Not a fan of returning all lowercase to the user when the docs will show the camel case. See my other comment for a possible solution with classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512787841", "createdAt": "2020-10-27T15:24:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -50,7 +50,7 @@\n     \"_status\": {\n       \"messages\": [\n         {\n-          \"message\": \"Invalid parameter: tokenId\"\n+          \"message\": \"Invalid parameter: tokenid\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzODgzNw==", "bodyText": "I agree it'd be nice to maintain camelCase for responses and docs.\nHowever, providing that and case insensitive has additional implementation overhead which I'm not sure is worth it right now.\nFor instance we'd have to ensure that someone who typed in tokenid/TokenId/Tokenid/tokenId still got the response message using tokenId.\nWhen we were case sensitive this was easy, but with case insensitive support the above requires extra mapping back to the camelCase form.\nWe should  lump it into the eventual refactor though, unless you have a quick suggestion with the existing logic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513038837", "createdAt": "2020-10-27T21:18:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/token-info-02-invalid-id.spec.json", "diffHunk": "@@ -50,7 +50,7 @@\n     \"_status\": {\n       \"messages\": [\n         {\n-          \"message\": \"Invalid parameter: tokenId\"\n+          \"message\": \"Invalid parameter: tokenid\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4Nzg0MQ=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzAzNzkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/requestHandler.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo0MzowOVrOHpDGxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToyMDowNFrOHpRcRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNDU1MQ==", "bodyText": "Creating a proxy seems like a much heavier weight approach than just calling lowercase when validating the parameter. Besides probably being slower as Xin points out, the use of a reflective wrapper object probably has some performance penalty.\nI would suggest moving away from the switch statement and use a more OO approach. We already have filter constants and logic spread around too many classes. It might be time to consolidate them into a class. Pseudo code:\n// filters.js\nvar filters = {};\n\nclass Filter {\n  constructor(name, validator, comparator) {\n    this.name = name;\n    this.validator = validator;\n    this.comparator = comparator;\n  }\n}\n\nfunc addFilter(tokenId) {\n  filters[tokenId.name.toLowerCase()] = tokenId;\n}\n\nfunc validate(key, value) {\n  const filter = filters[param.toLowerCase()];\n  if (filter) {\n    filter.validator(value);\n  }\n}\n\naddFilter(new Filter('tokenId', (value) => ...));\n...", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512804551", "createdAt": "2020-10-27T15:43:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNDgxMQ==", "bodyText": "Yeah this is a good approach. I had opened a ticket a while ago to solve this with a 3rd party framework, but this might give us more control over the data flow through the API", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r512834811", "createdAt": "2020-10-27T16:18:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNDU1MQ=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzOTQyOA==", "bodyText": "I think this should go under #712\nI think we could combine this with the custom query filter I added to optimize the whole flow better.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513039428", "createdAt": "2020-10-27T21:20:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -25,6 +25,22 @@ const requestLogger = function (req, res, next) {\n   return next();\n };\n \n+/**\n+ * Support case insensitive retrieval from request parameters\n+ * @param req\n+ * @param res\n+ * @param next\n+ * @returns Query param value\n+ */\n+const requestQueryKeyFormatter = function (req, res, next) {\n+  req.query = new Proxy(req.query, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNDU1MQ=="}, "originalCommit": {"oid": "d95bfb7ec277976ec89d35004f82176c8e1e9b30"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzg0NDkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/requestHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNTo0NzoxN1rOHpw1nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMDo1NlrOHp1Pdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1MzgyMQ==", "bodyText": "nit: Think this is a typo.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // handle repeated values. Add to array if applicable of convert to array\n          \n          \n            \n                  // handle repeated values. Add to array if applicable or convert to array", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513553821", "createdAt": "2020-10-28T15:47:17Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const qs = require('qs');\n+\n+const requestLogger = function (req, res, next) {\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return next();\n+};\n+\n+/**\n+ * Manage request query params to support case insensitive keys\n+ * Express default query parer uses qs, other option is querystring, both are case sensitive\n+ * Parse using default qs logic and use to populate a new map in which all keys are lowercased\n+ * @param queryString\n+ * @returns Query string map object\n+ */\n+const requestQueryParser = (queryString) => {\n+  // parse first to benefit from qs query handling\n+  const parsedQueryString = qs.parse(queryString);\n+\n+  const caseInsensitiveQueryString = {};\n+  for (const key of Object.keys(parsedQueryString)) {\n+    const lowerKey = key.toLowerCase();\n+    const currentValue = caseInsensitiveQueryString[lowerKey];\n+    if (currentValue) {\n+      // handle repeated values. Add to array if applicable of convert to array", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d55a50b4d0cb53e758a3f98dbccfa10d46aa6e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNTk3NA==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513625974", "createdAt": "2020-10-28T17:20:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const qs = require('qs');\n+\n+const requestLogger = function (req, res, next) {\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return next();\n+};\n+\n+/**\n+ * Manage request query params to support case insensitive keys\n+ * Express default query parer uses qs, other option is querystring, both are case sensitive\n+ * Parse using default qs logic and use to populate a new map in which all keys are lowercased\n+ * @param queryString\n+ * @returns Query string map object\n+ */\n+const requestQueryParser = (queryString) => {\n+  // parse first to benefit from qs query handling\n+  const parsedQueryString = qs.parse(queryString);\n+\n+  const caseInsensitiveQueryString = {};\n+  for (const key of Object.keys(parsedQueryString)) {\n+    const lowerKey = key.toLowerCase();\n+    const currentValue = caseInsensitiveQueryString[lowerKey];\n+    if (currentValue) {\n+      // handle repeated values. Add to array if applicable of convert to array", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1MzgyMQ=="}, "originalCommit": {"oid": "9d55a50b4d0cb53e758a3f98dbccfa10d46aa6e8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODA3MTI2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/requestHandler.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMjo0NVrOHpzDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMDo0MFrOHp1O1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MDE1Mw==", "bodyText": "this does not handle the case:\ntransactiontype=bar&transactionType=xyz&transactionType=ppp\n\nexpected: {transactiontype: ['bar', 'xyz', 'ppp']}\nactual: {transactiontype: ['bar', ['xyz', 'ppp']]}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513590153", "createdAt": "2020-10-28T16:32:45Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const qs = require('qs');\n+\n+const requestLogger = function (req, res, next) {\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return next();\n+};\n+\n+/**\n+ * Manage request query params to support case insensitive keys\n+ * Express default query parer uses qs, other option is querystring, both are case sensitive\n+ * Parse using default qs logic and use to populate a new map in which all keys are lowercased\n+ * @param queryString\n+ * @returns Query string map object\n+ */\n+const requestQueryParser = (queryString) => {\n+  // parse first to benefit from qs query handling\n+  const parsedQueryString = qs.parse(queryString);\n+\n+  const caseInsensitiveQueryString = {};\n+  for (const key of Object.keys(parsedQueryString)) {\n+    const lowerKey = key.toLowerCase();\n+    const currentValue = caseInsensitiveQueryString[lowerKey];\n+    if (currentValue) {\n+      // handle repeated values. Add to array if applicable of convert to array\n+      if (Array.isArray(currentValue)) {\n+        caseInsensitiveQueryString[lowerKey].push(parsedQueryString[key]);\n+      } else {\n+        caseInsensitiveQueryString[lowerKey] = [currentValue, parsedQueryString[key]];\n+      }\n+    } else {\n+      caseInsensitiveQueryString[lowerKey] = parsedQueryString[key];\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d55a50b4d0cb53e758a3f98dbccfa10d46aa6e8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMDEyMg==", "bodyText": "Good catch. I need to concat in the case of arrays", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513620122", "createdAt": "2020-10-28T17:12:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const qs = require('qs');\n+\n+const requestLogger = function (req, res, next) {\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return next();\n+};\n+\n+/**\n+ * Manage request query params to support case insensitive keys\n+ * Express default query parer uses qs, other option is querystring, both are case sensitive\n+ * Parse using default qs logic and use to populate a new map in which all keys are lowercased\n+ * @param queryString\n+ * @returns Query string map object\n+ */\n+const requestQueryParser = (queryString) => {\n+  // parse first to benefit from qs query handling\n+  const parsedQueryString = qs.parse(queryString);\n+\n+  const caseInsensitiveQueryString = {};\n+  for (const key of Object.keys(parsedQueryString)) {\n+    const lowerKey = key.toLowerCase();\n+    const currentValue = caseInsensitiveQueryString[lowerKey];\n+    if (currentValue) {\n+      // handle repeated values. Add to array if applicable of convert to array\n+      if (Array.isArray(currentValue)) {\n+        caseInsensitiveQueryString[lowerKey].push(parsedQueryString[key]);\n+      } else {\n+        caseInsensitiveQueryString[lowerKey] = [currentValue, parsedQueryString[key]];\n+      }\n+    } else {\n+      caseInsensitiveQueryString[lowerKey] = parsedQueryString[key];\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MDE1Mw=="}, "originalCommit": {"oid": "9d55a50b4d0cb53e758a3f98dbccfa10d46aa6e8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNTgxNA==", "bodyText": "Added above as a test case and added a new test with multi key and case repetitions that verifies the handling of array value", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1168#discussion_r513625814", "createdAt": "2020-10-28T17:20:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/requestHandler.js", "diffHunk": "@@ -0,0 +1,63 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+'use strict';\n+\n+const qs = require('qs');\n+\n+const requestLogger = function (req, res, next) {\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return next();\n+};\n+\n+/**\n+ * Manage request query params to support case insensitive keys\n+ * Express default query parer uses qs, other option is querystring, both are case sensitive\n+ * Parse using default qs logic and use to populate a new map in which all keys are lowercased\n+ * @param queryString\n+ * @returns Query string map object\n+ */\n+const requestQueryParser = (queryString) => {\n+  // parse first to benefit from qs query handling\n+  const parsedQueryString = qs.parse(queryString);\n+\n+  const caseInsensitiveQueryString = {};\n+  for (const key of Object.keys(parsedQueryString)) {\n+    const lowerKey = key.toLowerCase();\n+    const currentValue = caseInsensitiveQueryString[lowerKey];\n+    if (currentValue) {\n+      // handle repeated values. Add to array if applicable of convert to array\n+      if (Array.isArray(currentValue)) {\n+        caseInsensitiveQueryString[lowerKey].push(parsedQueryString[key]);\n+      } else {\n+        caseInsensitiveQueryString[lowerKey] = [currentValue, parsedQueryString[key]];\n+      }\n+    } else {\n+      caseInsensitiveQueryString[lowerKey] = parsedQueryString[key];\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5MDE1Mw=="}, "originalCommit": {"oid": "9d55a50b4d0cb53e758a3f98dbccfa10d46aa6e8"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1588, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}