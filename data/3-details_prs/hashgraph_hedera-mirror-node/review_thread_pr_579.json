{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjY3MDYy", "number": 579, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0ODowOVrODkd0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTowNFrODksz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTYzOTA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0ODowOVrOFwzhWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0ODowOVrOFwzhWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDA4OA==", "bodyText": "these 3 functions look funny right now. In followup, the logic from RFLogger will move to these functions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720088", "createdAt": "2020-03-02T23:48:09Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY0MDk4OnYy", "diffSide": "LEFT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0OTowOVrOFwziiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0OTowOVrOFwziiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDM5Mw==", "bodyText": "moved filesystem dependent code to one level up.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720393", "createdAt": "2020-03-02T23:49:09Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY0NzU2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo1MjoxNVrOFwzmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo1MjoxNVrOFwzmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMTQzMA==", "bodyText": "re-aligning is throwing the differ off, and results in big lumps of red and green.\nKeeping it un-aligned explicitly for easy review.\nOn approval, will push a commit to shift code left.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386721430", "createdAt": "2020-03-02T23:52:15Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);\n-        String newFileHash = \"\";\n-\n-        if (file.exists() == false) {\n-            log.warn(\"File does not exist {}\", fileName);\n+    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+                                   String thisFileHash) {\n+        var result = initFile(fileName);\n+        if (result == RecordFileLogger.INIT_RESULT.SKIP) {\n+            return true; // skip this fle\n+        } else if (result == RecordFileLogger.INIT_RESULT.FAIL) {\n             return false;\n         }\n         long counter = 0;\n-        byte[] readFileHash = new byte[48];\n-        RecordFileLogger.INIT_RESULT initFileResult = RecordFileLogger.initFile(fileName);\n         Stopwatch stopwatch = Stopwatch.createStarted();\n         Integer recordFileVersion = 0;\n         Boolean success = false;\n \n-        if (initFileResult == RecordFileLogger.INIT_RESULT.OK) {\n-            try (DataInputStream dis = new DataInputStream(new FileInputStream(file))) {\n+            try (DataInputStream dis = new DataInputStream(inputStream)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA5NTExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTowNFrOFxKrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMDozNVrOFxS4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA==", "bodyText": "nit: missing inputStream", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387099578", "createdAt": "2020-03-03T15:31:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMzgwMw==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387233803", "createdAt": "2020-03-03T19:10:35Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA=="}, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1199, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}