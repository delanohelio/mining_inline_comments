{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODUzMDc0", "number": 597, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjozNTowNFrODoBp7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTo1Mjo0NVrODojpLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk2NzUwOnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjozNTowNFrOF2XTMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMDozNTo1NlrOF2ifyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTE3MQ==", "bodyText": "nit: since we changed from r2dbc you could note this is with a hibernate ORM", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549171", "createdAt": "2020-03-14T02:35:04Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -98,10 +99,10 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.netty.maxInboundMetadataSize`          | 1024                    | The maximum size of metadata allowed to be received                                            |\n | `hedera.mirror.grpc.port`                                  | 5600                    | The GRPC API port                                                                              |\n | `hedera.mirror.grpc.retriever.enabled`                     | true                    | Whether to retrieve historical massages or not                                                 |\n-| `hedera.mirror.grpc.retriever.maxPageSize`                 | 200                     | The maximum number of messages the retriever can return in a single call to the database       |\n+| `hedera.mirror.grpc.retriever.maxPageSize`                 | 1000                    | The maximum number of messages the retriever can return in a single call to the database       |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mjc0Mg==", "bodyText": "I feel specifying the specific ORM in an otherwise generic config option couples it to a particular implementation unnecessarily.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392552742", "createdAt": "2020-03-14T03:30:52Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -98,10 +99,10 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.netty.maxInboundMetadataSize`          | 1024                    | The maximum size of metadata allowed to be received                                            |\n | `hedera.mirror.grpc.port`                                  | 5600                    | The GRPC API port                                                                              |\n | `hedera.mirror.grpc.retriever.enabled`                     | true                    | Whether to retrieve historical massages or not                                                 |\n-| `hedera.mirror.grpc.retriever.maxPageSize`                 | 200                     | The maximum number of messages the retriever can return in a single call to the database       |\n+| `hedera.mirror.grpc.retriever.maxPageSize`                 | 1000                    | The maximum number of messages the retriever can return in a single call to the database       |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTE3MQ=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjczMjYxOA==", "bodyText": "Understood.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392732618", "createdAt": "2020-03-16T00:35:56Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -98,10 +99,10 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.grpc.netty.maxInboundMetadataSize`          | 1024                    | The maximum size of metadata allowed to be received                                            |\n | `hedera.mirror.grpc.port`                                  | 5600                    | The GRPC API port                                                                              |\n | `hedera.mirror.grpc.retriever.enabled`                     | true                    | Whether to retrieve historical massages or not                                                 |\n-| `hedera.mirror.grpc.retriever.maxPageSize`                 | 200                     | The maximum number of messages the retriever can return in a single call to the database       |\n+| `hedera.mirror.grpc.retriever.maxPageSize`                 | 1000                    | The maximum number of messages the retriever can return in a single call to the database       |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTE3MQ=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk2ODAyOnYy", "diffSide": "LEFT", "path": "hedera-mirror-grpc/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjozNjowMFrOF2XTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjozNjowMFrOF2XTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTI0Mg==", "bodyText": "\ud83d\ude2d but ah well", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549242", "createdAt": "2020-03-14T02:36:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/pom.xml", "diffHunk": "@@ -41,15 +45,6 @@\n             <groupId>io.projectreactor.addons</groupId>\n             <artifactId>reactor-extra</artifactId>\n         </dependency>\n-        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk3MTc3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo0MzoxMVrOF2XVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzoyMDo1MVrOF2XeuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTczNg==", "bodyText": "q: did you not need topicNum?\nThen maybe additionally sequenceNumber and realm_num?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549736", "createdAt": "2020-03-14T02:43:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;\n+    }\n+\n+    public static class TopicMessageBuilder {\n+        private long consensusTimestamp;\n+\n+        public TopicMessageBuilder consensusTimestamp(Instant consensusTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MjEyMQ==", "bodyText": "It's added automatically by Lombok.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392552121", "createdAt": "2020-03-14T03:20:51Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;\n+    }\n+\n+    public static class TopicMessageBuilder {\n+        private long consensusTimestamp;\n+\n+        public TopicMessageBuilder consensusTimestamp(Instant consensusTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTczNg=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk3MzE3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo0NTo1MVrOF2XWEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzoyNToxM1rOF2Xftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTkwNQ==", "bodyText": "Just checking that the benefits of the limit 1 are no longer valid or needed here? Just in case you missed it in your refactor", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392549905", "createdAt": "2020-03-14T02:45:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MjM3NA==", "bodyText": "True, since it's a native query Hibernate/Spring isn't going to add that automatically. Technically this is a unique composite key so there are never more than one, but will add to be safe.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392552374", "createdAt": "2020-03-14T03:25:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0OTkwNQ=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk3NjMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo1MTozN1rOF2XXkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMToxOTozMlrOF2boVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDI5MQ==", "bodyText": "q: So do we have other options for getting those metrics? Not sure how crucial the were.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550291", "createdAt": "2020-03-14T02:51:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -39,37 +40,32 @@\n @RequiredArgsConstructor\n public class TopicMessageRepositoryCustomImpl implements TopicMessageRepositoryCustom {\n \n-    private final DatabaseClient databaseClient;\n-    private final InstantToLongConverter instantToLongConverter;\n+    private final EntityManager entityManager;\n+    private final InstantToLongConverter converter;\n \n     @Override\n-    public Flux<TopicMessage> findByFilter(TopicMessageFilter filter) {\n-        Criteria whereClause = Criteria.where(\"realm_num\")\n-                .is(filter.getRealmNum())\n-                .and(\"topic_num\")\n-                .is(filter.getTopicNum())\n-                .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+    public Stream<TopicMessage> findByFilter(TopicMessageFilter filter) {\n+        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n+        CriteriaQuery<TopicMessage> query = cb.createQuery(TopicMessage.class);\n+        Root<TopicMessage> root = query.from(TopicMessage.class);\n+\n+        Predicate predicate = cb.and(\n+                cb.equal(root.get(\"realmNum\"), filter.getRealmNum()),\n+                cb.equal(root.get(\"topicNum\"), filter.getTopicNum()),\n+                cb.greaterThanOrEqualTo(root.get(\"consensusTimestamp\"), converter.convert(filter.getStartTime()))\n+        );\n \n         if (filter.getEndTime() != null) {\n-            whereClause = whereClause.and(\"consensus_timestamp\")\n-                    .lessThan(instantToLongConverter.convert(filter.getEndTime()));\n+            predicate = cb.and(predicate, cb\n+                    .lessThan(root.get(\"consensusTimestamp\"), converter.convert(filter.getEndTime())));\n         }\n \n-        Pageable pageable = filter.hasLimit() ? PageRequest.of(0, (int) filter.getLimit()) : Pageable.unpaged();\n+        query = query.select(root).where(predicate).orderBy(cb.asc(root.get(\"consensusTimestamp\")));\n \n-        return databaseClient.select()\n-                .from(TopicMessage.class)\n-                .matching(whereClause)\n-                .orderBy(Sort.by(\"consensus_timestamp\"))\n-                .page(pageable)\n-                .fetch()\n-                .all()\n-                .name(\"findByFilter\")\n-                .metrics()\n-                .doOnSubscribe(s -> log.debug(\"Executing query: {}\", filter))\n-                .doOnCancel(() -> log.debug(\"[{}] Cancelled query\", filter.getSubscriberId()))\n-                .doOnComplete(() -> log.debug(\"[{}] Completed query\", filter.getSubscriberId()))\n-                .doOnNext(t -> log.trace(\"[{}] Next message: {}\", filter.getSubscriberId(), t));\n+        TypedQuery<TopicMessage> typedQuery = entityManager.createQuery(query);\n+        if (filter.hasLimit()) {\n+            typedQuery.setMaxResults((int) filter.getLimit());\n+        }\n+        return typedQuery.getResultList().stream(); // getResultStream()'s cursor doesn't work with reactive streams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMDExNg==", "bodyText": "I found a way by putting it in the retriever.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392620116", "createdAt": "2020-03-14T21:19:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/TopicMessageRepositoryCustomImpl.java", "diffHunk": "@@ -39,37 +40,32 @@\n @RequiredArgsConstructor\n public class TopicMessageRepositoryCustomImpl implements TopicMessageRepositoryCustom {\n \n-    private final DatabaseClient databaseClient;\n-    private final InstantToLongConverter instantToLongConverter;\n+    private final EntityManager entityManager;\n+    private final InstantToLongConverter converter;\n \n     @Override\n-    public Flux<TopicMessage> findByFilter(TopicMessageFilter filter) {\n-        Criteria whereClause = Criteria.where(\"realm_num\")\n-                .is(filter.getRealmNum())\n-                .and(\"topic_num\")\n-                .is(filter.getTopicNum())\n-                .and(\"consensus_timestamp\")\n-                .greaterThanOrEquals(instantToLongConverter.convert(filter.getStartTime()));\n+    public Stream<TopicMessage> findByFilter(TopicMessageFilter filter) {\n+        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\n+        CriteriaQuery<TopicMessage> query = cb.createQuery(TopicMessage.class);\n+        Root<TopicMessage> root = query.from(TopicMessage.class);\n+\n+        Predicate predicate = cb.and(\n+                cb.equal(root.get(\"realmNum\"), filter.getRealmNum()),\n+                cb.equal(root.get(\"topicNum\"), filter.getTopicNum()),\n+                cb.greaterThanOrEqualTo(root.get(\"consensusTimestamp\"), converter.convert(filter.getStartTime()))\n+        );\n \n         if (filter.getEndTime() != null) {\n-            whereClause = whereClause.and(\"consensus_timestamp\")\n-                    .lessThan(instantToLongConverter.convert(filter.getEndTime()));\n+            predicate = cb.and(predicate, cb\n+                    .lessThan(root.get(\"consensusTimestamp\"), converter.convert(filter.getEndTime())));\n         }\n \n-        Pageable pageable = filter.hasLimit() ? PageRequest.of(0, (int) filter.getLimit()) : Pageable.unpaged();\n+        query = query.select(root).where(predicate).orderBy(cb.asc(root.get(\"consensusTimestamp\")));\n \n-        return databaseClient.select()\n-                .from(TopicMessage.class)\n-                .matching(whereClause)\n-                .orderBy(Sort.by(\"consensus_timestamp\"))\n-                .page(pageable)\n-                .fetch()\n-                .all()\n-                .name(\"findByFilter\")\n-                .metrics()\n-                .doOnSubscribe(s -> log.debug(\"Executing query: {}\", filter))\n-                .doOnCancel(() -> log.debug(\"[{}] Cancelled query\", filter.getSubscriberId()))\n-                .doOnComplete(() -> log.debug(\"[{}] Completed query\", filter.getSubscriberId()))\n-                .doOnNext(t -> log.trace(\"[{}] Next message: {}\", filter.getSubscriberId(), t));\n+        TypedQuery<TopicMessage> typedQuery = entityManager.createQuery(query);\n+        if (filter.hasLimit()) {\n+            typedQuery.setMaxResults((int) filter.getLimit());\n+        }\n+        return typedQuery.getResultList().stream(); // getResultStream()'s cursor doesn't work with reactive streams", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDI5MQ=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk3Njg5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/retriever/PollingTopicMessageRetriever.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo1MzowOVrOF2XX7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMToyMDoxM1rOF2bobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDM4MA==", "bodyText": "q: curious, why the change to Stream vs converting to Flux?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550380", "createdAt": "2020-03-14T02:53:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/retriever/PollingTopicMessageRetriever.java", "diffHunk": "@@ -61,36 +61,34 @@ public PollingTopicMessageRetriever(RetrieverProperties retrieverProperties,\n         }\n \n         PollingContext context = new PollingContext(filter);\n-        Duration frequency = retrieverProperties.getPollingFrequency();\n-\n-        return Flux.defer(() -> poll(context))\n+        return Flux.fromStream(() -> poll(context))\n                 .repeatWhen(Repeat.create(r -> !context.isComplete(), Long.MAX_VALUE)\n-                        .fixedBackoff(frequency)\n+                        .fixedBackoff(retrieverProperties.getPollingFrequency())\n                         .jitter(Jitter.random(0.1))\n                         .withBackoffScheduler(scheduler))\n                 .name(\"retriever\")\n                 .metrics()\n                 .timeout(retrieverProperties.getTimeout(), scheduler)\n                 .doOnCancel(context::onComplete)\n                 .doOnComplete(context::onComplete)\n-                .doOnNext(context::onNext)\n-                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms: {}\", frequency.toMillis(), filter));\n+                .doOnNext(context::onNext);\n     }\n \n-    private Flux<TopicMessage> poll(PollingContext context) {\n+    private Stream<TopicMessage> poll(PollingContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyMDE0MA==", "bodyText": "Because the database layer can't be a flux and it wasn't really necessary to have it be reactive. But since I added back the metrics it became useful so converted it back to a flux", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392620140", "createdAt": "2020-03-14T21:20:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/retriever/PollingTopicMessageRetriever.java", "diffHunk": "@@ -61,36 +61,34 @@ public PollingTopicMessageRetriever(RetrieverProperties retrieverProperties,\n         }\n \n         PollingContext context = new PollingContext(filter);\n-        Duration frequency = retrieverProperties.getPollingFrequency();\n-\n-        return Flux.defer(() -> poll(context))\n+        return Flux.fromStream(() -> poll(context))\n                 .repeatWhen(Repeat.create(r -> !context.isComplete(), Long.MAX_VALUE)\n-                        .fixedBackoff(frequency)\n+                        .fixedBackoff(retrieverProperties.getPollingFrequency())\n                         .jitter(Jitter.random(0.1))\n                         .withBackoffScheduler(scheduler))\n                 .name(\"retriever\")\n                 .metrics()\n                 .timeout(retrieverProperties.getTimeout(), scheduler)\n                 .doOnCancel(context::onComplete)\n                 .doOnComplete(context::onComplete)\n-                .doOnNext(context::onNext)\n-                .doOnSubscribe(s -> log.info(\"Starting to poll every {}ms: {}\", frequency.toMillis(), filter));\n+                .doOnNext(context::onNext);\n     }\n \n-    private Flux<TopicMessage> poll(PollingContext context) {\n+    private Stream<TopicMessage> poll(PollingContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDM4MA=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjk3NzQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMjo1NDo0NlrOF2XYPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMDozNzoyM1rOF2igfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDQ2Mw==", "bodyText": "nit: left over from local debugging?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392550463", "createdAt": "2020-03-14T02:54:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/resources/application.yml", "diffHunk": "@@ -20,6 +15,8 @@ logging:\n   level:\n     root: warn\n     com.hedera.mirror.grpc: info\n+    # org.hibernate.SQL: debug", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MjQ0OA==", "bodyText": "Yes and no. I like to keep these particular two around as we use them all the time and it's easier to uncomment than google for their name each time.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392552448", "createdAt": "2020-03-14T03:26:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/resources/application.yml", "diffHunk": "@@ -20,6 +15,8 @@ logging:\n   level:\n     root: warn\n     com.hedera.mirror.grpc: info\n+    # org.hibernate.SQL: debug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDQ2Mw=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjczMjc5Ng==", "bodyText": "Works for me.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r392732796", "createdAt": "2020-03-16T00:37:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/resources/application.yml", "diffHunk": "@@ -20,6 +15,8 @@ logging:\n   level:\n     root: warn\n     com.hedera.mirror.grpc: info\n+    # org.hibernate.SQL: debug", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MDQ2Mw=="}, "originalCommit": {"oid": "092e879fc86b35d1d99476135a391c9c0c026144"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkyMTEzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNDoxOFrOF27f6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyMDoxN1rOF2-VKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MjI1MQ==", "bodyText": "q: should this be conditional on consensusTimestamp being not null?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393142251", "createdAt": "2020-03-16T16:14:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODY0OQ==", "bodyText": "topic_message.consensus_timestamp can never be null, it's a required field. We don't ever update topic messages, we only insert. Hence why we can avoid the query for existence that JPA does for natural IDs by always returning true for isNew.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393188649", "createdAt": "2020-03-16T17:20:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/domain/TopicMessage.java", "diffHunk": "@@ -50,4 +63,31 @@\n     public int compareTo(TopicMessage other) {\n         return Comparator.nullsFirst(Comparator.comparingLong(TopicMessage::getSequenceNumber)).compare(this, other);\n     }\n+\n+    public Instant getConsensusTimestampInstant() {\n+        return longToInstantConverter.convert(consensusTimestamp);\n+    }\n+\n+    @Override\n+    public Long getId() {\n+        return consensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MjI1MQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUwMTEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozMDozMlrOF3LCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowOTo0M1rOF3oNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjkyOQ==", "bodyText": "Thinking about new topics.\nSay i create a new topic, and immediately subscribe for it. The topic will take ~5-10 seconds to be created in db. So the first lookup will return empty, and also all the subsequent lookups until cache gets invalidated.\nI believe the tests may be working since they share the Repo instance, but that won't be the case in prod were importer inserts the data.\nIf we cache only non-null values, that should work and should be okay (since this isn't anywhere near being the perf bottleneck in our system). Further optimizations can be in future.\nSide question for my understanding: does the cache has any internal time based invalidation too if size limit is never reached? Not saying we need it, just random q.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393396929", "createdAt": "2020-03-17T01:30:32Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3 limit 1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNDUxMA==", "bodyText": "Good catch. I've pushed a fix to not cache if null.\nThere is no cache invalidation for this particular cache. I didn't feel we needed it since entities are never deleted and we aren't using any of the fields that are mutable by the importer.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393424510", "createdAt": "2020-03-17T03:23:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3 limit 1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjkyOQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDgzMg==", "bodyText": "This was critical bug we just found, there should be a test for this.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393874832", "createdAt": "2020-03-17T18:09:43Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/repository/EntityRepository.java", "diffHunk": "@@ -20,14 +20,18 @@\n  * \u200d\n  */\n \n-import org.springframework.data.r2dbc.repository.Query;\n-import org.springframework.data.repository.reactive.ReactiveCrudRepository;\n-import reactor.core.publisher.Mono;\n+import java.util.Optional;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n \n+import com.hedera.mirror.grpc.config.CacheConfiguration;\n import com.hedera.mirror.grpc.domain.Entity;\n \n-public interface EntityRepository extends ReactiveCrudRepository<Entity, Long> {\n+public interface EntityRepository extends CrudRepository<Entity, Long> {\n \n-    @Query(\"select * from t_entities where entity_shard = $1 and entity_realm = $2 and entity_num = $3 limit 1\")\n-    Mono<Entity> findByCompositeKey(long shard, long realm, long num);\n+    @Cacheable(cacheNames = \"entity\", cacheManager = CacheConfiguration.ENTITY_CACHE, sync = true)\n+    @Query(value = \"select * from t_entities where entity_shard = ?1 and entity_realm = ?2 and entity_num = ?3 limit 1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5NjkyOQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUxMzE1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/resources/application-default.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTozODoyNFrOF3LKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoxNDozNVrOF3Mm4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5ODc5NQ==", "bodyText": "why do we need to disable it?\nLet's also add the comment to the config itself.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393398795", "createdAt": "2020-03-17T01:38:24Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/resources/application-default.yml", "diffHunk": "@@ -15,10 +15,13 @@ hedera:\n         username: mirror_node\n       endTimeInterval: 100ms\n       listener:\n+        enabled: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMjU2MA==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393422560", "createdAt": "2020-03-17T03:14:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/resources/application-default.yml", "diffHunk": "@@ -15,10 +15,13 @@ hedera:\n         username: mirror_node\n       endTimeInterval: 100ms\n       listener:\n+        enabled: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5ODc5NQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUxNzkxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTo0MToxM1rOF3LM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoxNjo0MVrOF3Mo0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5OTUyMw==", "bodyText": "in future,  maybe we can let domainBuilder keep track of seq numbers for topics.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393399523", "createdAt": "2020-03-17T01:41:13Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -446,13 +456,13 @@ void bothMessagesWithTopicNum() {\n     void bothMessagesWithRealmNum() {\n         domainBuilder.entity(e -> e.entityRealm(1L)).block();\n         domainBuilder.entity(e -> e.entityRealm(2L)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(0)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(1)).block();\n+        domainBuilder.topicMessage(t -> t.realmNum(0).sequenceNumber(1)).block();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzA1OA==", "bodyText": "DomainBuilder does keep track of sequenceNumbers for simple case of same sequence number for all topic/realm numbers. But I didn't feel it was worth updating it for separate sequence numbers for multiple topic/realm numbers since it's only done in a couple tests and would make it more complex.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393423058", "createdAt": "2020-03-17T03:16:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/service/TopicMessageServiceTest.java", "diffHunk": "@@ -446,13 +456,13 @@ void bothMessagesWithTopicNum() {\n     void bothMessagesWithRealmNum() {\n         domainBuilder.entity(e -> e.entityRealm(1L)).block();\n         domainBuilder.entity(e -> e.entityRealm(2L)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(0)).block();\n-        domainBuilder.topicMessage(t -> t.realmNum(1)).block();\n+        domainBuilder.topicMessage(t -> t.realmNum(0).sequenceNumber(1)).block();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5OTUyMw=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODUzNjEzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTo1Mjo0NVrOF3LXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoyNzowNlrOF3o1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwMjMxNQ==", "bodyText": "We should not use grpc server's Repository instances (here and in other places) to insert data.\nCorrect setup, and one analogous to production would be, where writers and readers are isolated. Writers would be analogous to mirror-node-importer, and readers would be grpc server's repository instances (since the tests are to test them).", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393402315", "createdAt": "2020-03-17T01:52:45Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "diffHunk": "@@ -103,12 +106,13 @@ void setup() {\n         return Flux.concat(publishers);\n     }\n \n-    private <T> Mono<?> insert(T domainObject) {\n-        return databaseClient.insert()\n-                .into((Class<T>) domainObject.getClass())\n-                .using(domainObject)\n-                .fetch()\n-                .first()\n-                .doOnNext(d -> log.debug(\"Inserted: {}\", domainObject));\n+    private Mono<Entity> insert(Entity entity) {\n+        return Mono.defer(() -> Mono.just(entityRepository.save(entity)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNDA5MQ==", "bodyText": "I would disagree with you. Repository should be the only means of interacting with the database for both reading and writing. This is the entire point of a repository: to act as the higher level API for CRUD operations to a backend database. Using a Repository allows us to swap out the implementation easily (e.g. PostgreSQL to BigQuery/MongoDB/etc).\nCase in point, if we would've use the repository in the domain builder for R2DBC then we would've minimized our changes when switching to Hibernate.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393424091", "createdAt": "2020-03-17T03:21:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "diffHunk": "@@ -103,12 +106,13 @@ void setup() {\n         return Flux.concat(publishers);\n     }\n \n-    private <T> Mono<?> insert(T domainObject) {\n-        return databaseClient.insert()\n-                .into((Class<T>) domainObject.getClass())\n-                .using(domainObject)\n-                .fetch()\n-                .first()\n-                .doOnNext(d -> log.debug(\"Inserted: {}\", domainObject));\n+    private Mono<Entity> insert(Entity entity) {\n+        return Mono.defer(() -> Mono.just(entityRepository.save(entity)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwMjMxNQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg4NTAyNg==", "bodyText": "The tests right now are violating a major correctness abstraction - there are separate writer (importer) and readers (grpc) in production, but in tests, same instance is both reader and writer.\nThat coupled with the fact that a feature which majorly interacts with reads/writes - caching - is disabled in tests but enabled in production just seems very wrong to me.\nImo, correctness comes first, then design.\nWe should strive for correct testing. Whether it's with or without repository, am agnostic to that.\nDo or not, up to you, just stating my strong opinion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/597#discussion_r393885026", "createdAt": "2020-03-17T18:27:06Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/domain/DomainBuilder.java", "diffHunk": "@@ -103,12 +106,13 @@ void setup() {\n         return Flux.concat(publishers);\n     }\n \n-    private <T> Mono<?> insert(T domainObject) {\n-        return databaseClient.insert()\n-                .into((Class<T>) domainObject.getClass())\n-                .using(domainObject)\n-                .fetch()\n-                .first()\n-                .doOnNext(d -> log.debug(\"Inserted: {}\", domainObject));\n+    private Mono<Entity> insert(Entity entity) {\n+        return Mono.defer(() -> Mono.just(entityRepository.save(entity)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwMjMxNQ=="}, "originalCommit": {"oid": "49558a05a8d4999dd02b54e70a0e03a49956b6b3"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1221, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}