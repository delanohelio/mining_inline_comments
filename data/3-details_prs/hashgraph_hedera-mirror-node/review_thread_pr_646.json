{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzM0MTk5", "number": 646, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxODowMFrODukbUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1MjoxNlrODvUZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTU3OTA1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusCreateTopicTransactionHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxODowMFrOGAnj9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoyODo0MFrOGDsqYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMTM2NA==", "bodyText": "the string should be a constant.\nAlternatively you can have \"record.receipt\" as the const and a method that take in the additional part and the method adds \"topicID\"", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r403301364", "createdAt": "2020-04-03T20:18:00Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusCreateTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusCreateTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusCreateTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"record.receipt.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyODkwNA==", "bodyText": "will do the latter in the followup.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r403328904", "createdAt": "2020-04-03T20:54:13Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusCreateTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusCreateTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusCreateTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"record.receipt.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMTM2NA=="}, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMDY1Ng==", "bodyText": "function got removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r406530656", "createdAt": "2020-04-09T23:28:40Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusCreateTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusCreateTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusCreateTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"record.receipt.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMTM2NA=="}, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTU4NTUyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusDeleteTopicTransactionHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDoxOTowOVrOGAnnRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoyODo1MVrOGDsqmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMjIxMw==", "bodyText": "Same thing with body.x.y. Would make the tests cleaner and easy to modify with a single method that returns the key for use here", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r403302213", "createdAt": "2020-04-03T20:19:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusDeleteTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusDeleteTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusDeleteTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"body.consensusDeleteTopic.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyODk0Ng==", "bodyText": "same.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r403328946", "createdAt": "2020-04-03T20:54:18Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusDeleteTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusDeleteTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusDeleteTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"body.consensusDeleteTopic.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMjIxMw=="}, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMDcxNQ==", "bodyText": "function got removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r406530715", "createdAt": "2020-04-09T23:28:51Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/ConsensusDeleteTopicTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,18 @@\n  * \u200d\n  */\n \n+import java.util.Map;\n+\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+\n class ConsensusDeleteTopicTransactionHandlerTest extends AbstractTransactionHandlerTest {\n+    @Override\n+    protected TransactionHandler getTransactionHandler() {\n+        return new ConsensusDeleteTopicTransactionHandler();\n+    }\n \n+    @Override\n+    protected Map<String, Integer> getEntityIdFields() {\n+        return Map.of(\"body.consensusDeleteTopic.topicID\", EntityTypeEnum.TOPIC.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMwMjIxMw=="}, "originalCommit": {"oid": "ad1a2f29843f65daf983e955c8d2976667390044"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTQzODQxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/AbstractTransactionHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTo1MjoxNlrOGBrRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzowODoyNlrOGDsS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMDgxNQ==", "bodyText": "This is a bit complex and adds yet another way to create these proto objects to our code. If there's a bug in this approach it would be hard to catch. Why not just add a default way to create a transactionBody and record for each sub-class?\n    protected abstract TransactionBody.Builder getTransactionBody();\n    protected abstract TransactionRecord.Builder getTransactionRecord();\nThen parent class can set any common defaults on those objects and wrap them in a RecordItem and call the generic tests in parent. For children classes, then can call getTransactionBody() and clear and set any additional fields per test case, then construct a recorditem:\ngetTransactionBody().getConsensusCreateTopicBuilder().clearMemo().setMemo(\"foo\").clearAdminKey();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r404410815", "createdAt": "2020-04-06T21:52:16Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/AbstractTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,114 @@\n  * \u200d\n  */\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.Message;\n+\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.FileID;\n+import com.hederahashgraph.api.proto.java.TopicID;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.testcontainers.shaded.org.bouncycastle.util.Strings;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n public abstract class AbstractTransactionHandlerTest {\n+    private static final Long DEFAULT_ENTITY_NUM = 100L;\n+\n+    private TransactionHandler transactionHandler;\n+\n+    protected abstract TransactionHandler getTransactionHandler();\n+    // Map from field name to entity type\n+    protected abstract Map<String, Integer> getEntityIdFields();\n+\n+    @BeforeEach\n+    void beforeEach(TestInfo testInfo) {\n+        System.out.println(\"Before test: \" + testInfo.getTestMethod().get().getName());\n+        transactionHandler = getTransactionHandler();\n+    }\n+\n+    @Test\n+    void testNullEntityId() {\n+        assertExpectedEntityId(TransactionBody.newBuilder(), TransactionRecord.newBuilder(), null);\n+    }\n+\n+    // Tests that TransactionHandler.getEntityId() returns expected entity id.\n+    // Entity id is set using protocol buffer reflection.\n+    @Test\n+    void testGetEntityId() {\n+        // given\n+        Message.Builder transactionBodyBuilder = TransactionBody.newBuilder();\n+        Message.Builder transactionRecordBuilder = TransactionRecord.newBuilder();\n+        Map<String, Integer> entityIdFields = getEntityIdFields();\n+        for (var entityIdField : entityIdFields.entrySet()) {\n+            Iterator<String> fields = Arrays.stream(Strings.split(entityIdField.getKey(), '.')).iterator();\n+            String fieldName = fields.next();\n+            if (fieldName.equals(\"body\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f92c76e7537c37af354fe3273bfc500970bc88eb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNDY1OQ==", "bodyText": "Yeah it is indeed a bit complex.\nThe thing i don't like about common setups like those are, tests become coupled in weird and unexpected ways.\nCould have made reflection logic much simpler, but having plain java logic is more maintainable as a team.\nSo i'll go with your suggestion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/646#discussion_r406524659", "createdAt": "2020-04-09T23:08:26Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/transactionhandler/AbstractTransactionHandlerTest.java", "diffHunk": "@@ -20,6 +20,114 @@\n  * \u200d\n  */\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Fail.fail;\n+\n+import com.google.protobuf.Descriptors;\n+import com.google.protobuf.Message;\n+\n+import com.hederahashgraph.api.proto.java.AccountID;\n+import com.hederahashgraph.api.proto.java.ContractID;\n+import com.hederahashgraph.api.proto.java.FileID;\n+import com.hederahashgraph.api.proto.java.TopicID;\n+import com.hederahashgraph.api.proto.java.Transaction;\n+import com.hederahashgraph.api.proto.java.TransactionBody;\n+import com.hederahashgraph.api.proto.java.TransactionRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.testcontainers.shaded.org.bouncycastle.util.Strings;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.parser.domain.RecordItem;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n public abstract class AbstractTransactionHandlerTest {\n+    private static final Long DEFAULT_ENTITY_NUM = 100L;\n+\n+    private TransactionHandler transactionHandler;\n+\n+    protected abstract TransactionHandler getTransactionHandler();\n+    // Map from field name to entity type\n+    protected abstract Map<String, Integer> getEntityIdFields();\n+\n+    @BeforeEach\n+    void beforeEach(TestInfo testInfo) {\n+        System.out.println(\"Before test: \" + testInfo.getTestMethod().get().getName());\n+        transactionHandler = getTransactionHandler();\n+    }\n+\n+    @Test\n+    void testNullEntityId() {\n+        assertExpectedEntityId(TransactionBody.newBuilder(), TransactionRecord.newBuilder(), null);\n+    }\n+\n+    // Tests that TransactionHandler.getEntityId() returns expected entity id.\n+    // Entity id is set using protocol buffer reflection.\n+    @Test\n+    void testGetEntityId() {\n+        // given\n+        Message.Builder transactionBodyBuilder = TransactionBody.newBuilder();\n+        Message.Builder transactionRecordBuilder = TransactionRecord.newBuilder();\n+        Map<String, Integer> entityIdFields = getEntityIdFields();\n+        for (var entityIdField : entityIdFields.entrySet()) {\n+            Iterator<String> fields = Arrays.stream(Strings.split(entityIdField.getKey(), '.')).iterator();\n+            String fieldName = fields.next();\n+            if (fieldName.equals(\"body\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxMDgxNQ=="}, "originalCommit": {"oid": "f92c76e7537c37af354fe3273bfc500970bc88eb"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1277, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}