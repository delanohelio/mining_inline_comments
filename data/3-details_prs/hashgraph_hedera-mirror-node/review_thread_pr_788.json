{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDIyMTE2", "number": 788, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MDoyOVrOD_18SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToyMDowOFrOD_2eLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjcwNjY1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/responseHandler.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MDoyOVrOGav15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxNTo1NFrOGawl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDAwNA==", "bodyText": "Would be preferable to throw NotFoundError here and let it be handled by httpErrorHandler instead of deal with next() and adding new middleware", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430700004", "createdAt": "2020-05-26T20:50:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/responseHandler.js", "diffHunk": "@@ -21,11 +21,18 @@\n \n const constants = require('../constants.js');\n \n-// response middleware that pull response data passed through request and sets in json response\n+// response middleware that pulls response data passed through request and sets in json response\n // next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n-const responseHandler = (req, res, next) => {\n-  // set response json\n-  res.json(res.locals[constants.responseDataLabel]);\n+const responseHandler = async (req, res, next) => {\n+  const responseData = res.locals[constants.responseDataLabel];\n+  if (responseData === undefined) {\n+    // unmatched route will have no response data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNTcwMA==", "bodyText": "Considered that option. I'm okay with doing that too. Will just have to reorganize uses", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430705700", "createdAt": "2020-05-26T21:01:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/responseHandler.js", "diffHunk": "@@ -21,11 +21,18 @@\n \n const constants = require('../constants.js');\n \n-// response middleware that pull response data passed through request and sets in json response\n+// response middleware that pulls response data passed through request and sets in json response\n // next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n-const responseHandler = (req, res, next) => {\n-  // set response json\n-  res.json(res.locals[constants.responseDataLabel]);\n+const responseHandler = async (req, res, next) => {\n+  const responseData = res.locals[constants.responseDataLabel];\n+  if (responseData === undefined) {\n+    // unmatched route will have no response data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDAwNA=="}, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMjMxNg==", "bodyText": "More like remove the use().\nUpdated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430712316", "createdAt": "2020-05-26T21:15:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/responseHandler.js", "diffHunk": "@@ -21,11 +21,18 @@\n \n const constants = require('../constants.js');\n \n-// response middleware that pull response data passed through request and sets in json response\n+// response middleware that pulls response data passed through request and sets in json response\n // next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n-const responseHandler = (req, res, next) => {\n-  // set response json\n-  res.json(res.locals[constants.responseDataLabel]);\n+const responseHandler = async (req, res, next) => {\n+  const responseData = res.locals[constants.responseDataLabel];\n+  if (responseData === undefined) {\n+    // unmatched route will have no response data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDAwNA=="}, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjcwODU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MTowNVrOGav3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxNjowOFrOGawmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDMyNg==", "bodyText": "handleError should be async, right?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430700326", "createdAt": "2020-05-26T20:51:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,14 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNjA1MA==", "bodyText": "Should be yeah. But dependency handles it well. I'll set them async", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430706050", "createdAt": "2020-05-26T21:02:26Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,14 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDMyNg=="}, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMjQzNQ==", "bodyText": "Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430712435", "createdAt": "2020-05-26T21:16:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,14 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDMyNg=="}, "originalCommit": {"oid": "e61b4eeddf0e41d08ce547e879890b86efbc65c5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc4NzYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/server.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxODowNFrOGawqGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTo1MToxM1rOGaxjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzM2OA==", "bodyText": "Can be removed as this is no longer exported/existing", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430713368", "createdAt": "2020-05-26T21:18:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -33,7 +33,7 @@ const transactions = require('./transactions.js');\n const balances = require('./balances.js');\n const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n-const {handleError} = require('./middleware/httpErrorHandler');\n+const {handleError, pageNotFound} = require('./middleware/httpErrorHandler');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyODA4NA==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430728084", "createdAt": "2020-05-26T21:51:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/server.js", "diffHunk": "@@ -33,7 +33,7 @@ const transactions = require('./transactions.js');\n const balances = require('./balances.js');\n const accounts = require('./accounts.js');\n const topicmessage = require('./topicmessage.js');\n-const {handleError} = require('./middleware/httpErrorHandler');\n+const {handleError, pageNotFound} = require('./middleware/httpErrorHandler');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzM2OA=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc5MDU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/responseHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxOToxNFrOGawsAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTo1MToxMFrOGaxjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzg1OQ==", "bodyText": "Log not necessary, error handler already logs URL and error message at error level", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430713859", "createdAt": "2020-05-26T21:19:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/responseHandler.js", "diffHunk": "@@ -20,12 +20,20 @@\n 'use strict';\n \n const constants = require('../constants.js');\n+const {NotFoundError} = require('../errors/notFoundError');\n \n-// response middleware that pull response data passed through request and sets in json response\n+// response middleware that pulls response data passed through request and sets in json response\n // next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n-const responseHandler = (req, res, next) => {\n-  // set response json\n-  res.json(res.locals[constants.responseDataLabel]);\n+const responseHandler = async (req, res, next) => {\n+  const responseData = res.locals[constants.responseDataLabel];\n+  if (responseData === undefined) {\n+    // unmatched route will have no response data, pass NotFoundError to next middleware\n+    logger.debug(`Unsupported API endpoint: ${req.originalUrl}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyODA2Nw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430728067", "createdAt": "2020-05-26T21:51:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/responseHandler.js", "diffHunk": "@@ -20,12 +20,20 @@\n 'use strict';\n \n const constants = require('../constants.js');\n+const {NotFoundError} = require('../errors/notFoundError');\n \n-// response middleware that pull response data passed through request and sets in json response\n+// response middleware that pulls response data passed through request and sets in json response\n // next param is required to ensure express maps to this middleware and can also be used to pass onto future middleware\n-const responseHandler = (req, res, next) => {\n-  // set response json\n-  res.json(res.locals[constants.responseDataLabel]);\n+const responseHandler = async (req, res, next) => {\n+  const responseData = res.locals[constants.responseDataLabel];\n+  if (responseData === undefined) {\n+    // unmatched route will have no response data, pass NotFoundError to next middleware\n+    logger.debug(`Unsupported API endpoint: ${req.originalUrl}`);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzg1OQ=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc5MTQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxOTozMlrOGawslQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNzo0N1rOGbXIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDAwNQ==", "bodyText": "Do we still need this?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430714005", "createdAt": "2020-05-26T21:19:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,8 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+\n+  next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyNzMxMg==", "bodyText": "It's good practice to pass this along, unless we 100% want to mark this as the end of the flow and block any middleware placed after this.\nI'm fine as is since I didn't want to make it hard for someone to be wondering why their middleware wasn't getting picked up. I can remove it if you prefer.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430727312", "createdAt": "2020-05-26T21:49:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,8 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+\n+  next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDAwNQ=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyODMwNA==", "bodyText": "I'm fine with keeping, just more of a question to make sure it wasn't a refactoring leftover", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430728304", "createdAt": "2020-05-26T21:51:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,8 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+\n+  next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDAwNQ=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0Mzc1MA==", "bodyText": "just a fyi for future: https://stackoverflow.com/questions/16810449/when-to-use-next-and-return-next-in-node-js", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r431343750", "createdAt": "2020-05-27T18:07:47Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -62,6 +62,8 @@ const handleError = (err, req, res, next) => {\n       logger.trace(`Unhandled error encountered: ${err.message}`);\n       res.status(httpStatusCodes.INTERNAL_ERROR).json(errorMessageFormat(httpErrorMessages.INTERNAL_ERROR));\n   }\n+\n+  next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDAwNQ=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc5MzQwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToyMDowOFrOGawttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTo1MTowN1rOGaxjcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDI5Mw==", "bodyText": "Not needed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430714293", "createdAt": "2020-05-26T21:20:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -21,7 +21,7 @@\n \n const {DbError} = require('../errors/dbError');\n const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n-const {NotFoundError} = require('../errors/notFoundError');\n+const {NotFoundError, NotFoundErrorMessage} = require('../errors/notFoundError');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyODA0OQ==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/788#discussion_r430728049", "createdAt": "2020-05-26T21:51:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/middleware/httpErrorHandler.js", "diffHunk": "@@ -21,7 +21,7 @@\n \n const {DbError} = require('../errors/dbError');\n const {InvalidArgumentError} = require('../errors/invalidArgumentError');\n-const {NotFoundError} = require('../errors/notFoundError');\n+const {NotFoundError, NotFoundErrorMessage} = require('../errors/notFoundError');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDI5Mw=="}, "originalCommit": {"oid": "ef8a7f6aa1a877fa5e413eaf9fe7e766c143423e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1063, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}