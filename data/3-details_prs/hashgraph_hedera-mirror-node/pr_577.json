{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTA0MzMz", "number": 577, "title": "Use RecordItem in tests", "bodyText": "RecordFileLogger tests are written in a very non-modular way.\nChanging storeRecord(..) fans out to changes in 50+ places in tests.\nThis PR is not changing any prod code (to make review easier), it is\nrefactoring part of these tests so that the PR changing prod-code looks sane.\nBonus: Since Transfer list is part of TransactionRecord proto, updated\nassertRecord() to directly call assertRecordTransfer().\nSigned-off-by: Apekshit Sharma apekshit.sharma@hedera.com\nDetailed description:\nWhich issue(s) this PR fixes:\nPartially fixes #566\nSpecial notes for your reviewer:\nThis PR is independent of other PRs and can be merged in directly anytime.\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-01T22:36:20Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/577", "merged": true, "mergeCommit": {"oid": "4613fa0f7b02db06c51c193216550d17ad3620f7"}, "closed": true, "closedAt": "2020-03-02T17:33:47Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJg9LRgH2gAyMzgyMTA0MzMzOmVlOTNmMTk3ZjFlZWIzZDliY2NhMDE3M2NmM2NjNGVjYjEwOWI0ZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJwhDmgFqTM2NzM1MDY1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6", "committedDate": "2020-03-01T22:35:11Z", "message": "Use RecordItem in tests\n\nRecordFileLogger tests are written in a very non-modular way.\nChanging storeRecord(..) fans out to changes in 50+ places in tests.\nThis PR is not changing any prod code (to make review easier), it is\nrefactoring part of these tests so that the PR changing prod-code looks sane.\n\nBonus: Since Transfer list is part of TransactionRecord proto, updated\nassertRecord() to directly call assertRecordTransfer().\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzUwNjU1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/577#pullrequestreview-367350655", "createdAt": "2020-03-02T16:41:41Z", "commit": {"oid": "ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0MTo0MVrOFwmtxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjo0MTo0MVrOFwmtxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxMDI3OQ==", "bodyText": "I presume you removed the amount comparison because by definition you used the amount in cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount() to find the CryptoTransfer?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/577#discussion_r386510279", "createdAt": "2020-03-02T16:41:41Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/AbstractRecordFileLoggerTest.java", "diffHunk": "@@ -132,44 +130,48 @@ protected final void assertContract(ContractID contractId, com.hedera.mirror.imp\n                 .isEqualTo(entityTypeRepository.findByName(\"contract\").get().getId());\n     }\n \n-    protected final void assertRecordTransfers(TransactionRecord record) {\n-        TransferList transferList = record.getTransferList();\n-        for (AccountAmount accountAmount : transferList.getAccountAmountsList()) {\n-            AccountID xferAccountId = accountAmount.getAccountID();\n-            Optional<com.hedera.mirror.importer.domain.Entities> accountId = entityRepository\n-                    .findByPrimaryKey(xferAccountId.getShardNum(), xferAccountId.getRealmNum(), xferAccountId\n-                            .getAccountNum());\n-\n-            var accountNum = accountId.get().getEntityNum();\n-            var cryptoTransfer = cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount(\n-                    Utility.timeStampInNanos(record.getConsensusTimestamp()),\n-                    accountNum, accountAmount.getAmount()).get();\n-            Assertions.assertEquals(accountAmount.getAmount(), cryptoTransfer.getAmount());\n-            Assertions.assertEquals(accountAmount.getAccountID().getRealmNum(), cryptoTransfer.getRealmNum());\n+    protected void parseRecordItemAndCommit(RecordItem recordItem) throws Exception {\n+        RecordFileLogger.storeRecord(recordItem.getTransaction(), recordItem.getRecord());\n+        RecordFileLogger.completeFile(\"\", \"\");\n+    }\n+\n+    protected void assertRecordTransfers(TransactionRecord record) {\n+        long consensusTimestamp = Utility.timeStampInNanos(record.getConsensusTimestamp());\n+        if (parserProperties.isPersistCryptoTransferAmounts()) {\n+            TransferList transferList = record.getTransferList();\n+            for (AccountAmount accountAmount : transferList.getAccountAmountsList()) {\n+                AccountID account = accountAmount.getAccountID();\n+                var cryptoTransfer = cryptoTransferRepository.findByConsensusTimestampAndEntityNumAndAmount(\n+                        consensusTimestamp, account.getAccountNum(), accountAmount.getAmount()).get();\n+                assertEquals(account.getRealmNum(), cryptoTransfer.getRealmNum());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee93f197f1eeb3d9bcca0173cf3cc4ecb109b4f6"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3292, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}