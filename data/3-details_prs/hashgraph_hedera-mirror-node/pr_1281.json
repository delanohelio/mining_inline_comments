{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NDU4MTk2", "number": 1281, "title": "Support Default Credentials Provider for AWS", "bodyText": "Signed-off-by: Ian Jungmann ian.jungmann@hedera.com\nDetailed description:\nBy utilizing the AWS Default Credentials Provider Chain, the mirror node can allow for greater flexibility when it comes to configuring access to S3 buckets, and the chain will actually reduce the amount of code required to support the different configurations.\n\nAdd support for AWS Default Credentials Provider Chain, in instances where the cloud provider is S3 and the static credentials are not present in the config.\nAdd allowAnonymousAccess flag to support buckets that do not require authentication, mostly directed at the demo bucket/non requester pays buckets (Default Credentials Provider Chain does not allow for anonymous access and will error out after trying to locate credentials that may not be present.)\n\nWhich issue(s) this PR fixes:\nFixes #1044\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-11-20T06:09:42Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281", "merged": true, "mergeCommit": {"oid": "59b70d37ac8a9ea8825b4c4b77e58c4d79ce6167"}, "closed": true, "closedAt": "2020-11-30T17:14:24Z", "author": {"login": "ijungmann"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeRBY6AH2gAyNTI0NDU4MTk2OjVjNGVlMWE2ZTljYTE3N2RjMzRkYmI0YTBkMzgwMDZmMjM0MjMyOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhoZBQAFqTU0MTEwODI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c4ee1a6e9ca177dc34dbb4a0d38006f2342329d", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5c4ee1a6e9ca177dc34dbb4a0d38006f2342329d", "committedDate": "2020-11-20T06:04:52Z", "message": "Support Default Credentials Provider for AWS\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc28ff59628655bb675fc1574a781786322d641", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bbc28ff59628655bb675fc1574a781786322d641", "committedDate": "2020-11-20T18:31:21Z", "message": "Test fixes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "176536c0d90ce1a62318b34a774db55c29a13af6", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/176536c0d90ce1a62318b34a774db55c29a13af6", "committedDate": "2020-11-24T06:54:29Z", "message": "Refactor credentials logic, revert region logic, and document\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef47019ce599c6f025cb495778e3f64d4bd5e139", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ef47019ce599c6f025cb495778e3f64d4bd5e139", "committedDate": "2020-11-24T06:57:19Z", "message": "Revert region logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570cfd17f4ea7713267dfea5f02e6cd7fc203252", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/570cfd17f4ea7713267dfea5f02e6cd7fc203252", "committedDate": "2020-11-24T17:35:48Z", "message": "Rename anonymous access\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f715868e44ca02c7f07d70841feb1e7561e451ff", "committedDate": "2020-11-24T17:42:01Z", "message": "Clarify static creds provider logic\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODIyMDM5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#pullrequestreview-537822039", "createdAt": "2020-11-24T19:05:56Z", "commit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowNTo1N1rOH5ROxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowNTo1N1rOH5ROxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMzE5MA==", "bodyText": "We could go one step further with this and have S3 users only use the Default Credentials Provider and never the static creds provider, it would make this a bit cleaner (if S3, use Default, if GCP use Static), the only caveat would be S3 users would be forced to set up their creds the AWS way and would break any existing users that use the old config.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529813190", "createdAt": "2020-11-24T19:05:57Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {\n+        //If the cloud provider is GCP, it must use the static provider.  If the static credentials are both present,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODgxMTE4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#pullrequestreview-537881118", "createdAt": "2020-11-24T20:32:09Z", "commit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDozMjowOVrOH5UGOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMTo0NVrOH5VA2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MDE1Mw==", "bodyText": "These need to be removed from config table as well.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529860153", "createdAt": "2020-11-24T20:32:09Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -108,21 +109,15 @@ Importer can be configured to publish transactions (in json format) to a Pubsub\n See [Spring Cloud documentation](https://cloud.spring.io/spring-cloud-static/spring-cloud-gcp/1.2.2.RELEASE/reference/html/#pubsub-configuration)\n for more info about `spring.cloud.gcp.*` properties.\n \n-#### Connect to S3 with AssumeRole\n+#### Connect to S3 with the Default Credentials Provider\n \n-Importer can be configured to connect to S3 using temporary security credentials via AssumeRole.  This is only available\n-when using AWS S3 as the cloud provider.  With this, a user that does not have permission to access an AWS resource can\n-request a temporary role that will grant them that permission.  This is useful when dealing with multiple accounts\n-where a user in one account needs access to a resource in another account, and is generally considered more secure than\n-using long-term credentials.\n+When connecting to an AWS S3 bucket that requires authentication (such as a requester pays bucket), you can opt to allow\n+the AWS Default Credentials Provider Chain to handle the authentication for you, instead of providing your static access and secret\n+keys in the config.  This will also allow you to take advantage of alternative authorization modes such as AssumeRole.\n+If the mirror node is configured to connect to an S3 bucket that requires authenticaion, and the static credentails are not provided\n+in the config, the mirror node will default to using this provider.  For more information and to see how you can set up your\n+environment to take advantage of this, see [the AWS Credentials Documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html)\n \n-The following properties are used to enable this:\n-\n--   `hedera.mirror.importer.downloader.accessKey` (The access key of the user requesting access)\n--   `hedera.mirror.importer.downloader.secretKey` (The secret key of the user requesting access)\n--   `hedera.mirror.importer.downloader.s3.externalId` (An external ID is an optional property attached to the role in AWS to make it more secure)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MDc2NA==", "bodyText": "Bean needs to be renamed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529860764", "createdAt": "2020-11-24T20:33:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2MTcyMw==", "bodyText": "Yeah, let's not break users.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529861723", "createdAt": "2020-11-24T20:35:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {\n+        //If the cloud provider is GCP, it must use the static provider.  If the static credentials are both present,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMzE5MA=="}, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDI1Mg==", "bodyText": "This will break users using these properties. This is probably worth the trade off but we need to call it out in the release notes and directly give a few users we know who are using it a heads up.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529864252", "createdAt": "2020-11-24T20:40:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -70,16 +70,4 @@ public String getBucketName() {\n \n         private final String endpoint;\n     }\n-\n-    @Data\n-    @Validated\n-    public static class S3 {\n-\n-        private String externalId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NjYxOQ==", "bodyText": "Don't compare enums by string or by equals(), you can just use downloaderProperties.getCloudProvider() == CommonDownloaderProperties.CloudProvider.GCP. This way avoids a possible NPE, is type safe and faster.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529866619", "createdAt": "2020-11-24T20:45:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {\n+        //If the cloud provider is GCP, it must use the static provider.  If the static credentials are both present,\n+        //force the mirror node to use the static provider.\n+        return StringUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NzA5Mw==", "bodyText": "Any guidance on how to take advantage of this provider within Docker or Kubernetes?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529867093", "createdAt": "2020-11-24T20:46:08Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -108,21 +109,15 @@ Importer can be configured to publish transactions (in json format) to a Pubsub\n See [Spring Cloud documentation](https://cloud.spring.io/spring-cloud-static/spring-cloud-gcp/1.2.2.RELEASE/reference/html/#pubsub-configuration)\n for more info about `spring.cloud.gcp.*` properties.\n \n-#### Connect to S3 with AssumeRole\n+#### Connect to S3 with the Default Credentials Provider\n \n-Importer can be configured to connect to S3 using temporary security credentials via AssumeRole.  This is only available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NTE2MA==", "bodyText": "Keeping in mind encapsulation and to reduce verbosity of their implementation, these helpers might be more appropriate within CommonDownloaderProperties as isStaticCredentials() and isAnonymousCredentials().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r529875160", "createdAt": "2020-11-24T21:01:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/CredentialsProviderConfiguration.java", "diffHunk": "@@ -23,74 +23,52 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.annotation.EnableAsync;\n import software.amazon.awssdk.auth.credentials.AnonymousCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\n import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n-import software.amazon.awssdk.regions.Region;\n-import software.amazon.awssdk.services.sts.StsClient;\n-import software.amazon.awssdk.services.sts.auth.StsAssumeRoleCredentialsProvider;\n-import software.amazon.awssdk.services.sts.model.AssumeRoleRequest;\n \n-import com.hedera.mirror.importer.config.condition.AwsAssumeRoleCondition;\n-import com.hedera.mirror.importer.config.condition.StaticCredentialsCondition;\n+import com.hedera.mirror.importer.MirrorProperties;\n import com.hedera.mirror.importer.downloader.CommonDownloaderProperties;\n-import com.hedera.mirror.importer.exception.MissingCredentialsException;\n \n @Configuration\n @EnableAsync\n @Log4j2\n @RequiredArgsConstructor\n public class CredentialsProviderConfiguration {\n \n+    private final MirrorProperties mirrorProperties;\n     private final CommonDownloaderProperties downloaderProperties;\n \n     @Bean\n-    @Conditional(StaticCredentialsCondition.class)\n     public AwsCredentialsProvider staticCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using provided access/secret key\");\n-        return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n-                downloaderProperties.getSecretKey()));\n-    }\n-\n-    @Bean\n-    @Conditional(AwsAssumeRoleCondition.class)\n-    public AwsCredentialsProvider stsAssumeRoleCredentialsProvider() {\n-        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n-        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n-                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n-            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n-        }\n-\n-        StsClient stsClient = StsClient.builder()\n-                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n-                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n-                .region(Region.of(downloaderProperties.getRegion()))\n-                .build();\n-\n-        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n-                .roleArn(downloaderProperties.getS3().getRoleArn())\n-                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());\n-\n-        if (StringUtils.isNotBlank(downloaderProperties.getS3().getExternalId())) {\n-            assumeRoleRequestBuilder.externalId(downloaderProperties.getS3().getExternalId());\n+        if (useAnonymousCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using anonymous credentials\");\n+            return AnonymousCredentialsProvider.create();\n+        } else if (useStaticCredentialsProvider()) {\n+            log.info(\"Setting up S3 async client using provided access/secret key\");\n+            return StaticCredentialsProvider.create(AwsBasicCredentials.create(downloaderProperties.getAccessKey(),\n+                    downloaderProperties.getSecretKey()));\n         }\n+        return DefaultCredentialsProvider.create();\n+    }\n \n-        return StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient)\n-                .refreshRequest(assumeRoleRequestBuilder.build())\n-                .build();\n+    private boolean useStaticCredentialsProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f715868e44ca02c7f07d70841feb1e7561e451ff"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa6337abad4401d9480b5f892968d88e9277eba", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3fa6337abad4401d9480b5f892968d88e9277eba", "committedDate": "2020-11-24T23:56:44Z", "message": "Remove old config values\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a01feba7045f26344a3e34c3f0ab9d92590013", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/98a01feba7045f26344a3e34c3f0ab9d92590013", "committedDate": "2020-11-24T23:59:12Z", "message": "Rename bean and fix enum comparision\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e011bd751e4bb013bf38f79c641077e36e7869bf", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e011bd751e4bb013bf38f79c641077e36e7869bf", "committedDate": "2020-11-25T00:05:31Z", "message": "Remove extra parentheses\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca523f6b3d95a5fb4a7fc4dea7b0b8835023ab2", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/fca523f6b3d95a5fb4a7fc4dea7b0b8835023ab2", "committedDate": "2020-11-25T00:12:54Z", "message": "Move logic for checking provider type\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77922615081f5bf909808d20e51bc4920cbeaab8", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/77922615081f5bf909808d20e51bc4920cbeaab8", "committedDate": "2020-11-25T00:28:55Z", "message": "Add more documentation\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5f9c9db940f07b8f3a7bba5ad5922e247a4b2200", "committedDate": "2020-11-25T00:49:33Z", "message": "Merge branch 'master' into aws_default_creds_provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTE2MjE5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#pullrequestreview-538116219", "createdAt": "2020-11-25T02:43:16Z", "commit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjo0MzoxNlrOH5hCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjo0NTo1MFrOH5hFZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3MjExMg==", "bodyText": "credentials", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530072112", "createdAt": "2020-11-25T02:43:16Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -108,39 +106,24 @@ Importer can be configured to publish transactions (in json format) to a Pubsub\n See [Spring Cloud documentation](https://cloud.spring.io/spring-cloud-static/spring-cloud-gcp/1.2.2.RELEASE/reference/html/#pubsub-configuration)\n for more info about `spring.cloud.gcp.*` properties.\n \n-#### Connect to S3 with AssumeRole\n+#### Connect to S3 with the Default Credentials Provider\n \n-Importer can be configured to connect to S3 using temporary security credentials via AssumeRole.  This is only available\n-when using AWS S3 as the cloud provider.  With this, a user that does not have permission to access an AWS resource can\n-request a temporary role that will grant them that permission.  This is useful when dealing with multiple accounts\n-where a user in one account needs access to a resource in another account, and is generally considered more secure than\n-using long-term credentials.\n-\n-The following properties are used to enable this:\n-\n--   `hedera.mirror.importer.downloader.accessKey` (The access key of the user requesting access)\n--   `hedera.mirror.importer.downloader.secretKey` (The secret key of the user requesting access)\n--   `hedera.mirror.importer.downloader.s3.externalId` (An external ID is an optional property attached to the role in AWS to make it more secure)\n--   `hedera.mirror.importer.downloader.s3.roleArn` (Amazon Resource Name)\n--   `hedera.mirror.importer.downloader.s3.roleSessionName` (A name to give to the session.  Defaults to \"hedera-mirror-node\")\n+When connecting to an AWS S3 bucket that requires authentication (such as a requester pays bucket), you can opt to allow\n+the AWS Default Credentials Provider Chain to handle the authentication for you, instead of providing your static access and secret\n+keys in the config.  This will also allow you to take advantage of alternative authorization modes such as AssumeRole.\n+If the mirror node is configured to connect to an S3 bucket that requires authenticaion, and the static credentails are not provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3MjUyOQ==", "bodyText": "Technically don't think this is valid yaml. Should be 2 spaces indentation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530072529", "createdAt": "2020-11-25T02:44:27Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -108,39 +106,24 @@ Importer can be configured to publish transactions (in json format) to a Pubsub\n See [Spring Cloud documentation](https://cloud.spring.io/spring-cloud-static/spring-cloud-gcp/1.2.2.RELEASE/reference/html/#pubsub-configuration)\n for more info about `spring.cloud.gcp.*` properties.\n \n-#### Connect to S3 with AssumeRole\n+#### Connect to S3 with the Default Credentials Provider\n \n-Importer can be configured to connect to S3 using temporary security credentials via AssumeRole.  This is only available\n-when using AWS S3 as the cloud provider.  With this, a user that does not have permission to access an AWS resource can\n-request a temporary role that will grant them that permission.  This is useful when dealing with multiple accounts\n-where a user in one account needs access to a resource in another account, and is generally considered more secure than\n-using long-term credentials.\n-\n-The following properties are used to enable this:\n-\n--   `hedera.mirror.importer.downloader.accessKey` (The access key of the user requesting access)\n--   `hedera.mirror.importer.downloader.secretKey` (The secret key of the user requesting access)\n--   `hedera.mirror.importer.downloader.s3.externalId` (An external ID is an optional property attached to the role in AWS to make it more secure)\n--   `hedera.mirror.importer.downloader.s3.roleArn` (Amazon Resource Name)\n--   `hedera.mirror.importer.downloader.s3.roleSessionName` (A name to give to the session.  Defaults to \"hedera-mirror-node\")\n+When connecting to an AWS S3 bucket that requires authentication (such as a requester pays bucket), you can opt to allow\n+the AWS Default Credentials Provider Chain to handle the authentication for you, instead of providing your static access and secret\n+keys in the config.  This will also allow you to take advantage of alternative authorization modes such as AssumeRole.\n+If the mirror node is configured to connect to an S3 bucket that requires authenticaion, and the static credentails are not provided\n+in the config, the mirror node will default to using this provider.  For more information and to see how you can set up your\n+environment to take advantage of this, see [the AWS Credentials Documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html)\n+When running in Docker or Kubernetes, credentials can be attached in a variety of ways, including by using volumes and secrets\n+to directly add static credentials or an existing AWS credentials file, by using other tools such as Vault or AWS Secrets Manager,\n+and many more.\n \n+`Docker-compose.yml`\n ```yaml\n-hedera:\n-  mirror:\n-    importer:\n-      downloader:\n-        accessKey: access_key\n-        secretKey: secret_key\n-        s3:\n-          externalId: external_id\n-          roleArn: arn:aws:iam::123123123123:role/testrole\n-          roleSessionName: test_session\n+volumes:\n+      - ~/.aws/:/root/.aws:ro", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA3MjkzNA==", "bodyText": "Should link keyword AssumeRole to assume role docs.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#discussion_r530072934", "createdAt": "2020-11-25T02:45:50Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -108,39 +106,24 @@ Importer can be configured to publish transactions (in json format) to a Pubsub\n See [Spring Cloud documentation](https://cloud.spring.io/spring-cloud-static/spring-cloud-gcp/1.2.2.RELEASE/reference/html/#pubsub-configuration)\n for more info about `spring.cloud.gcp.*` properties.\n \n-#### Connect to S3 with AssumeRole\n+#### Connect to S3 with the Default Credentials Provider\n \n-Importer can be configured to connect to S3 using temporary security credentials via AssumeRole.  This is only available\n-when using AWS S3 as the cloud provider.  With this, a user that does not have permission to access an AWS resource can\n-request a temporary role that will grant them that permission.  This is useful when dealing with multiple accounts\n-where a user in one account needs access to a resource in another account, and is generally considered more secure than\n-using long-term credentials.\n-\n-The following properties are used to enable this:\n-\n--   `hedera.mirror.importer.downloader.accessKey` (The access key of the user requesting access)\n--   `hedera.mirror.importer.downloader.secretKey` (The secret key of the user requesting access)\n--   `hedera.mirror.importer.downloader.s3.externalId` (An external ID is an optional property attached to the role in AWS to make it more secure)\n--   `hedera.mirror.importer.downloader.s3.roleArn` (Amazon Resource Name)\n--   `hedera.mirror.importer.downloader.s3.roleSessionName` (A name to give to the session.  Defaults to \"hedera-mirror-node\")\n+When connecting to an AWS S3 bucket that requires authentication (such as a requester pays bucket), you can opt to allow\n+the AWS Default Credentials Provider Chain to handle the authentication for you, instead of providing your static access and secret\n+keys in the config.  This will also allow you to take advantage of alternative authorization modes such as AssumeRole.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53cd86d126fd835264b503911cf5378427d44835", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/53cd86d126fd835264b503911cf5378427d44835", "committedDate": "2020-11-30T16:48:37Z", "message": "Reword config documentation\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMDk4NjQ1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#pullrequestreview-541098645", "createdAt": "2020-11-30T16:50:25Z", "commit": {"oid": "5f9c9db940f07b8f3a7bba5ad5922e247a4b2200"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac12837ff32b323c9facbc4f745a5f35441d7589", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ac12837ff32b323c9facbc4f745a5f35441d7589", "committedDate": "2020-11-30T16:50:27Z", "message": "Fix typo\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTA4MjUz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1281#pullrequestreview-541108253", "createdAt": "2020-11-30T17:00:16Z", "commit": {"oid": "ac12837ff32b323c9facbc4f745a5f35441d7589"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3525, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}