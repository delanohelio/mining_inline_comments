{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDc0MjY4", "number": 532, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyODoxNFrODf-osw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyODoxNFrODf-osw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODU4Njc1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODoyODoxNFrOFp_s5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo0MDo0MFrOFqFo_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3OTYyMQ==", "bodyText": "nit I publish and verify {int} messages sent to differentiate from the receive of X messages", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/532#discussion_r379579621", "createdAt": "2020-02-14T18:28:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -169,12 +189,23 @@ public void verifySubscriptionChannelConnection() throws Throwable {\n         assertNotNull(subscriptionResponse);\n     }\n \n-    @When(\"I publish {int} messages\")\n-    public void verifyTopicMessagePublish(int messageCount) throws InterruptedException, HederaStatusException {\n-        numMessages = messageCount;\n-        List<TransactionReceipt> transactionReceipts = topicClient\n-                .publishMessagesToTopic(consensusTopicId, \"New message\", submitKey, messageCount);\n-        assertEquals(messageCount, transactionReceipts.size());\n+    @When(\"I publish {int} batches of {int} messages every {long} milliseconds\")\n+    public void publishTopicMessages(int numGroups, int messageCount, long milliSleep) throws InterruptedException,\n+            HederaStatusException {\n+        for (int i = 0; i < numGroups; i++) {\n+            topicClient.publishMessagesToTopic(consensusTopicId, \"New message\", submitKey, messageCount, false);\n+            Thread.sleep(milliSleep, 0);\n+        }\n+\n+        messageSubscribeCount = numGroups * messageCount;\n+    }\n+\n+    @When(\"I publish and verify {int} messages\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d006bf1334268e0cef68793b7b7ae79351832f5"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjkyNA==", "bodyText": "Will update in next PR.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/532#discussion_r379676924", "createdAt": "2020-02-14T22:40:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/java/com/hedera/mirror/test/e2e/acceptance/steps/TopicFeature.java", "diffHunk": "@@ -169,12 +189,23 @@ public void verifySubscriptionChannelConnection() throws Throwable {\n         assertNotNull(subscriptionResponse);\n     }\n \n-    @When(\"I publish {int} messages\")\n-    public void verifyTopicMessagePublish(int messageCount) throws InterruptedException, HederaStatusException {\n-        numMessages = messageCount;\n-        List<TransactionReceipt> transactionReceipts = topicClient\n-                .publishMessagesToTopic(consensusTopicId, \"New message\", submitKey, messageCount);\n-        assertEquals(messageCount, transactionReceipts.size());\n+    @When(\"I publish {int} batches of {int} messages every {long} milliseconds\")\n+    public void publishTopicMessages(int numGroups, int messageCount, long milliSleep) throws InterruptedException,\n+            HederaStatusException {\n+        for (int i = 0; i < numGroups; i++) {\n+            topicClient.publishMessagesToTopic(consensusTopicId, \"New message\", submitKey, messageCount, false);\n+            Thread.sleep(milliSleep, 0);\n+        }\n+\n+        messageSubscribeCount = numGroups * messageCount;\n+    }\n+\n+    @When(\"I publish and verify {int} messages\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU3OTYyMQ=="}, "originalCommit": {"oid": "6d006bf1334268e0cef68793b7b7ae79351832f5"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1141, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}