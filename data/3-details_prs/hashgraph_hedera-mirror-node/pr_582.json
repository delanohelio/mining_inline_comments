{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNjI0NzY2", "number": 582, "title": "JUnit parser performance tests for 1k tps record files", "bodyText": "Detailed description:\nWe'd like an automated approach to verifying parser only performance.\nThese changes\n\nAdd integration tests using JUnit that verify the success and timing below a threshold of the parser for files that represent 1k tips traffic.\nAdds a profile managed way of running the integration tests only\n\nWhich issue(s) this PR fixes:\nPartially addresses #559\nSpecial notes for your reviewer:\nTo run the tests use the command ./mvnw clean integration-test --projects hedera-mirror-importer/ -P performance-test\nThreshold seconds in tests are optional, they exist more so to catch a regression that may make processing take longer than we've seen.\nThe remaining items for #559 include testing again a large db and running in CI. The former should work so far as docker is not running. Only issue being once a file is ingested its transaction can't be imported again. Will have to consider how to keep a large db static to be able to run the tests multiple times.\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-04T15:09:55Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582", "merged": true, "mergeCommit": {"oid": "a0c041b53b943962b3583d6bfa28e6317fe0b719"}, "closed": true, "closedAt": "2020-03-10T00:03:51Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKOz9cgH2gAyMzgzNjI0NzY2OjNmZWFmMTgwNDYyOTk1NTZjYTZkNWEzODcyYjExYTY4YjkwMjM5NGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMFV1igFqTM3MTU2MTQwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3feaf18046299556ca6d5a3872b11a68b902394d", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3feaf18046299556ca6d5a3872b11a68b902394d", "committedDate": "2020-03-04T04:00:45Z", "message": "Junit parser performance tests for 1k tps record files\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476f0434f9b175cdf193923841525534733594f4", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/476f0434f9b175cdf193923841525534733594f4", "committedDate": "2020-03-04T15:19:55Z", "message": "Add circle ci maven_ perf stage\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e4bd903cd1353fa627b29bba5c9bbf6ceb39d7", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a6e4bd903cd1353fa627b29bba5c9bbf6ceb39d7", "committedDate": "2020-03-04T15:26:14Z", "message": "Updated circleci config with restore and save maven_cache. Also moved perf to end\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe", "committedDate": "2020-03-04T15:37:15Z", "message": "Added missing checkout step for perf_maven\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDMyNzAx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#pullrequestreview-369032701", "createdAt": "2020-03-04T18:49:59Z", "commit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0OTo1OVrOFx5Vgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNToyMlrOFx6Kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MzkzOA==", "bodyText": "can be assigned to a yaml alias for reuse in job build_maven\nsimilarly the docker params below.\nFor eg\nreferences:\n  maven_docker: &maven_docker\n      docker:\n        - image: adoptopenjdk:11-jdk-hotspot\n        - image: postgres:9.6-alpine\n          environment:\n            POSTGRES_DB: mirror_node_test\n            POSTGRES_PASSWORD: mirror_node_pass\n            POSTGRES_USER: mirror_node\n\nand then here\n-*maven_docker", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387863938", "createdAt": "2020-03-04T18:49:59Z", "author": {"login": "apeksharma"}, "path": ".circleci/config.yml", "diffHunk": "@@ -116,6 +122,27 @@ jobs:\n             tar -czf ${WORKSPACE}/artifacts/${NAME}.tgz -C ${WORKSPACE} ${NAME}\n       - *persist_artifacts\n \n+  perf_maven:\n+    environment:\n+      MAVEN_CLI_OPTS: --batch-mode --no-transfer-progress --show-version -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NTQwNw==", "bodyText": "version in properties like other deps.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387865407", "createdAt": "2020-03-04T18:52:48Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -208,6 +226,35 @@\n                 <groupId>pl.project13.maven</groupId>\n                 <artifactId>git-commit-id-plugin</artifactId>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>default-test</id>\n+                        <configuration>\n+                            <skipTests>${skip.unit.tests}</skipTests>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2ODQ1OQ==", "bodyText": "do we want to keep this general (and add balance tests here in future) or keep it just for record and isolate balance test in other class?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387868459", "createdAt": "2020-03-04T18:58:18Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MTAxNg==", "bodyText": "we can make filter string a param and move rest of the code here to parse(..) too", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387871016", "createdAt": "2020-03-04T19:02:59Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Test\n+    void parseAndIngestSingleFile5000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NDUwNQ==", "bodyText": "imo, running it for every commit might be overkill right now since it doesn't need to be run for grpc, rest, and most general commits. That said, perf regressions can creep in unexpectedly. So maybe later on, we should setup to run perf test in nightly/periodic manner.\nup to you, just suggestion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387874505", "createdAt": "2020-03-04T19:09:35Z", "author": {"login": "apeksharma"}, "path": ".circleci/config.yml", "diffHunk": "@@ -61,6 +61,12 @@ workflows:\n               ignore: /.*/\n             tags:\n               only: /^.*/\n+      - perf_maven:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NzU0Nw==", "bodyText": "imo, just this one  is enough.\nOthers will have too less of runtime and data (data point for single file) to be of much significance.\nJust this test is perfect, one run of this will be good enough data point to be significant since it's ingesting multiple files(so in a way, it's aggregate of multiple data points), and running for extended time.\nUp to you, just a suggestion.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387877547", "createdAt": "2020-03-04T19:15:22Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Test\n+    void parseAndIngestSingleFile5000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_00.000084Z.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(40);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles10000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_0*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(70);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles60000Transactions() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDYxMjM4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#pullrequestreview-369061238", "createdAt": "2020-03-04T19:31:04Z", "commit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozMTowNFrOFx6tDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MDoxN1rOFx7WVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NjM1MQ==", "bodyText": "It's more important to run cleanup before than after, but can just add both", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387886351", "createdAt": "2020-03-04T19:31:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODg5MQ==", "bodyText": "Recommend just using @Timeout on each test method and removing this parse method. Logging not necessary", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387888891", "createdAt": "2020-03-04T19:35:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Test\n+    void parseAndIngestSingleFile5000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_00.000084Z.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(40);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles10000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_0*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(70);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles60000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(400);\n+    }\n+\n+    private void parse(long parseTimeThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4OTM2Mw==", "bodyText": "There should be some sort of warmup in a @BeforeAll or @BeforeEach to get accurate performance numbers", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387889363", "createdAt": "2020-03-04T19:36:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTQ1MA==", "bodyText": "Agreed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387891450", "createdAt": "2020-03-04T19:40:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Test\n+    void parseAndIngestSingleFile5000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_00.000084Z.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(40);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles10000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")\n+                .filterFiles(\"2020-02-09T18_30_0*.rcd\")\n+                .to(streamType.getPath(), streamType.getValid());\n+        fileCopier.copy();\n+        parse(70);\n+    }\n+\n+    @Test\n+    void parseAndIngestMultipleFiles60000Transactions() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NzU0Nw=="}, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTUzNw==", "bodyText": "These files should be in a different folder than the normal v1 and v2 tests. Suggestion: src/test/resources/data/recordstreams/performance/. It doesn't need the name of the node account id.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387891537", "createdAt": "2020-03-04T19:40:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {\n+\n+    @TempDir\n+    Path dataPath;\n+\n+    @Value(\"classpath:data\")\n+    Path testPath;\n+\n+    @Resource\n+    private RecordFileParser recordFileParser;\n+\n+    @Resource\n+    private RecordParserProperties parserProperties;\n+\n+    private FileCopier fileCopier;\n+\n+    private StreamType streamType;\n+\n+    @BeforeEach\n+    void before() {\n+        streamType = parserProperties.getStreamType();\n+        parserProperties.getMirrorProperties().setDataPath(dataPath);\n+        parserProperties.init();\n+    }\n+\n+    @Test\n+    void parseAndIngestSingleFile5000Transactions() throws Exception {\n+        fileCopier = FileCopier.create(testPath, dataPath)\n+                .from(streamType.getPath(), \"v2\", \"record0.0.3_1k_tps\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjYzMg==", "bodyText": "You shouldn't need to hardcode it, let it inherit from spring boot if possible", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387892632", "createdAt": "2020-03-04T19:42:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -208,6 +226,35 @@\n                 <groupId>pl.project13.maven</groupId>\n                 <artifactId>git-commit-id-plugin</artifactId>\n             </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>default-test</id>\n+                        <configuration>\n+                            <skipTests>${skip.unit.tests}</skipTests>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.2</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NTQwNw=="}, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDc3NA==", "bodyText": "I would like to see JUnit tags used to find performance tests instead of properties. That is, go ahead and run both unit and integration tests and configure excludedGroups to be !performance. We could potentially have unit tests that micro benchmark classes that we want to run as part of this profile too.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387894774", "createdAt": "2020-03-04T19:46:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -174,6 +176,22 @@\n         </dependencies>\n     </dependencyManagement>\n \n+    <profiles>\n+        <profile>\n+            <id>dev</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+        </profile>\n+        <profile>\n+            <id>performance-test</id>\n+            <properties>\n+                <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjkxNw==", "bodyText": "@Tag(\"performance\"). Also, since most of our tests can be considered integration tests (they all extend IntegrationTest and start a DB), can we rename this to end in test? I think if you use groups and tags to include/exclude maven failsafe it should pick that suffix up.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r387896917", "createdAt": "2020-03-04T19:50:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/benchmark/ParserIngestionIT.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.hedera.mirror.importer.benchmark;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Resource;\n+import lombok.extern.log4j.Log4j2;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.test.context.jdbc.Sql;\n+\n+import com.hedera.mirror.importer.FileCopier;\n+import com.hedera.mirror.importer.IntegrationTest;\n+import com.hedera.mirror.importer.domain.StreamType;\n+import com.hedera.mirror.importer.parser.record.RecordFileParser;\n+import com.hedera.mirror.importer.parser.record.RecordParserProperties;\n+\n+@Log4j2\n+@Sql(executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD, scripts = \"classpath:db/scripts/cleanup.sql\")\n+public class ParserIngestionIT extends IntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "285a13d37ca7674e254ebe7ddc4f75b52bf2e5fe"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f6ee6d65a19c290e6d3c69ded775be60cd9076", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d5f6ee6d65a19c290e6d3c69ded775be60cd9076", "committedDate": "2020-03-05T00:12:41Z", "message": "Reduced perf test down to 60k transactions. Renamed file with Record.\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzQ3NDc3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#pullrequestreview-369747477", "createdAt": "2020-03-05T17:00:35Z", "commit": {"oid": "d5f6ee6d65a19c290e6d3c69ded775be60cd9076"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18b056ac44385d138e7f0e7cbf94db8d20150a99", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/18b056ac44385d138e7f0e7cbf94db8d20150a99", "committedDate": "2020-03-05T17:44:47Z", "message": "Utilized junit5 tag feature instead of pom properties to filter\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd98e06fc2e3b30c2727f6f0cf6bbe7f30b90ad", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6fd98e06fc2e3b30c2727f6f0cf6bbe7f30b90ad", "committedDate": "2020-03-05T21:51:25Z", "message": "Used special mapping keys for docker alias in circle ci yaml\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "747b7c3e4a049a8e303c0d73582532ef5e153eea", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/747b7c3e4a049a8e303c0d73582532ef5e153eea", "committedDate": "2020-03-09T21:22:55Z", "message": "Added warmUp method\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bb6d17bdf03bce2f253c9daace8f63801f22467", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/5bb6d17bdf03bce2f253c9daace8f63801f22467", "committedDate": "2020-03-09T21:26:03Z", "message": "Fixed parseAndIngestMultipleFiles60000Transactions test calling single file\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTUxNzg0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#pullrequestreview-371551784", "createdAt": "2020-03-09T21:47:03Z", "commit": {"oid": "5bb6d17bdf03bce2f253c9daace8f63801f22467"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0NzowM1rOFz6gcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0NzowM1rOFz6gcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDI3Mg==", "bodyText": "These can be removed now, I believe", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#discussion_r389980272", "createdAt": "2020-03-09T21:47:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/pom.xml", "diffHunk": "@@ -174,6 +174,54 @@\n         </dependencies>\n     </dependencyManagement>\n \n+    <profiles>\n+        <profile>\n+            <id>dev</id>\n+            <activation>\n+                <activeByDefault>true</activeByDefault>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>default-test</id>\n+                                <configuration>\n+                                    <excludedGroups>performance</excludedGroups>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+        <profile>\n+            <id>performance-test</id>\n+            <properties>\n+                <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb6d17bdf03bce2f253c9daace8f63801f22467"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd12f1203513838b9927cb1ba39fbb1284f4dd3f", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/bd12f1203513838b9927cb1ba39fbb1284f4dd3f", "committedDate": "2020-03-09T21:55:02Z", "message": "Removing skip.integration.tests and skip.unit.tests properties that are no longer used\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTYxNDA4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/582#pullrequestreview-371561408", "createdAt": "2020-03-09T22:06:33Z", "commit": {"oid": "bd12f1203513838b9927cb1ba39fbb1284f4dd3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}