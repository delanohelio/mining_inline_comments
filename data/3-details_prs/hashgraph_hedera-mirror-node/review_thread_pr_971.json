{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTQ4ODQx", "number": 971, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMDoyOVrOEbAEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoyNjoyM1rOEbJ5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzQ4MTU4OnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMDoyOVrOHEwp5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTo0NDoxN1rOHE-p2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzUwOA==", "bodyText": "We've been keeping all properties sorted alphabetically.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474753508", "createdAt": "2020-08-21T15:00:29Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk4Mjg3NA==", "bodyText": "Added s3 to properties and sorted alphabetically.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474982874", "createdAt": "2020-08-21T21:44:17Z", "author": {"login": "ijungmann"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzUwOA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzQ5NTcxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowMzozNVrOHEwyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjowOTo1OVrOHE_JDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTc0NA==", "bodyText": "Since these are S3 specific, let's create a public static class S3 nested class and a private final S3 s3 = new S3(); field here to contain them so they have a s3 in their property path.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474755744", "createdAt": "2020-08-21T15:03:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -60,6 +61,12 @@ public String getBucketName() {\n \n     private String gcpProjectId;\n \n+    private String roleArn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MDg2MQ==", "bodyText": "Added static class S3.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474990861", "createdAt": "2020-08-21T22:09:59Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/CommonDownloaderProperties.java", "diffHunk": "@@ -60,6 +61,12 @@ public String getBucketName() {\n \n     private String gcpProjectId;\n \n+    private String roleArn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTc0NA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzUwNzY3OnYy", "diffSide": "RIGHT", "path": "charts/marketplace/gcp/schema.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTowNjo1MVrOHEw56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMDozOFrOHE_J0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NzYxMQ==", "bodyText": "Misspelled. Can just shorten to AWS", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474757611", "createdAt": "2020-08-21T15:06:51Z", "author": {"login": "steven-sheehy"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTA1Nw==", "bodyText": "Corrected.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991057", "createdAt": "2020-08-21T22:10:38Z", "author": {"login": "ijungmann"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NzYxMQ=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzUzMjU5OnYy", "diffSide": "RIGHT", "path": "charts/marketplace/gcp/schema.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToxMzo1MVrOHExJcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMToyMlrOHE_Kng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MTU4NA==", "bodyText": "Misspelled. Can just shorten to AWS", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474761584", "createdAt": "2020-08-21T15:13:51Z", "author": {"login": "steven-sheehy"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.\n+    title: Importer AWS role ARN\n+  importer.config.hedera.mirror.importer.downloader.externalId:\n+    type: string\n+    description: The Amazone Web Services external id for the role to assume, if one is needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTI2Mg==", "bodyText": "Corrected.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991262", "createdAt": "2020-08-21T22:11:22Z", "author": {"login": "ijungmann"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:\n+    type: string\n+    description: The Amazone Web Services Amazon Resource Name for the role to assume.  This is only needed in order to use temporary security credentials.\n+    title: Importer AWS role ARN\n+  importer.config.hedera.mirror.importer.downloader.externalId:\n+    type: string\n+    description: The Amazone Web Services external id for the role to assume, if one is needed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MTU4NA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzU1NzY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNToyMDoxMFrOHExYhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMTo0M1rOHE_LCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTQ0NQ==", "bodyText": "No need to pass these parameters since downloaderProperties is a class member. Mixing the two approaches doesn't make sense.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474765445", "createdAt": "2020-08-21T15:20:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {\n+            clientBuilder.credentialsProvider(\n+                    awsAssumeRoleCredentialsProvider(downloaderProperties.getAccessKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTM3MA==", "bodyText": "Removed the parameters.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991370", "createdAt": "2020-08-21T22:11:43Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {\n+            clientBuilder.credentialsProvider(\n+                    awsAssumeRoleCredentialsProvider(downloaderProperties.getAccessKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2NTQ0NQ=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYxMjMwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozMzo1NVrOHEx5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNToyOTozNFrOHFqerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzc2OA==", "bodyText": "There should be a space after if. Please ensure you:\n\n\nInstall EditorConfig plugin\n\n\nInstall Save Actions plugin\n\n\nConfigure it\n\n\n\nHave default IDE code style for Java (editorconfig should provide most formatting)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474773768", "createdAt": "2020-08-21T15:33:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwMDkwOQ==", "bodyText": "Added these settings and fixed the if ( issue", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475700909", "createdAt": "2020-08-24T15:29:34Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Mzc2OA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYyNDM0OnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozNzoxOFrOHEyAcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMjozNlrOHE_MHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NTY2Nw==", "bodyText": "I think this is a little tricky to understand the interplay between all these configs. Please add a sub-section to the importer config section above with instructions on what AWS assume role is and how to configure and use it with an example fake config.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474775667", "createdAt": "2020-08-21T15:37:18Z", "author": {"login": "steven-sheehy"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |\n+| `hedera.mirror.importer.downloader.externalId`                       |                         | The external id required to assume the role to connect to S3, if one was set                   |\n+| `hedera.mirror.importer.downloader.roleSessionName`                  | hedera-mirror-node      | A session name for assuming the role to access S3.                                             |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTY0NQ==", "bodyText": "Added a sub-section describing AssumeRole, gave an example and the needed properties, and provided some links for further details.  Let me know if it's missing anything", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991645", "createdAt": "2020-08-21T22:12:36Z", "author": {"login": "ijungmann"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |\n+| `hedera.mirror.importer.downloader.externalId`                       |                         | The external id required to assume the role to connect to S3, if one was set                   |\n+| `hedera.mirror.importer.downloader.roleSessionName`                  | hedera-mirror-node      | A session name for assuming the role to access S3.                                             |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NTY2Nw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYzNDgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0MDoxOVrOHEyG3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxOTowM1rOHE_S-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMwOQ==", "bodyText": "Log a statement indicating setting up credentials with AWS Assume Role.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474777309", "createdAt": "2020-08-21T15:40:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {\n+            assumeRoleRequestBuilder.externalId(downloaderProperties.getExternalId());\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MzQwMw==", "bodyText": "Added a log for this", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993403", "createdAt": "2020-08-21T22:19:03Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))\n+                .region(Region.of(region))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getRoleArn())\n+                .roleSessionName(downloaderProperties.getRoleSessionName());\n+\n+        if(StringUtils.isNotBlank(downloaderProperties.getExternalId())) {\n+            assumeRoleRequestBuilder.externalId(downloaderProperties.getExternalId());\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMwOQ=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzcxMTkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowMzoxMFrOHEy2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo0NTo1OVrOHFBG7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw==", "bodyText": "Instead of if statements, it would make more sense to use @ConditionalOnProperty and construct different AwsCredentialsProvider depending upon property values being present. That is, we should have 3 beans of type AwsCredentialsProvider each with different @ConditionalOnProperty. If need be, assume role can be marked primary. It may also make sense to use a nested config class to group by cloudprovider", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474789443", "createdAt": "2020-08-21T16:03:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg5ODIzOQ==", "bodyText": "I like the idea, the only ways I can come up to implement it though are either with a conditional expression or an enum to explicitly state which provider to use.  With just ConditionalOnProperty I need a way to specify a property must NOT be present, otherwise the AnonymousCredentialsProvider would get created every time, and I have not found a good way to do that operation.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474898239", "createdAt": "2020-08-21T19:35:47Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk0NDAwMA==", "bodyText": "Use @ConditionalOnProperty(value = \"hedera.mirror.importer.downloader.accessKey\", matchIfMissing = true) for anonymous.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474944000", "createdAt": "2020-08-21T20:32:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk1Nzk1Nw==", "bodyText": "Would that not still create the anonymous provider if the accessKey is provided?  My understanding of matchIfMissing is it only applies if the property is not provided, so if the keys are provided it will still create both the anonymous and the static providers", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474957957", "createdAt": "2020-08-21T20:49:06Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3ODA0OQ==", "bodyText": "That's true. So you'd have to use conditional expression or a custom condition. If that makes the code less readable/simple, I'm okay with current approach.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474978049", "createdAt": "2020-08-21T21:29:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5Mzc5MQ==", "bodyText": "I will test out an expression and see how it looks.  All other comments thus far should be addressed now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993791", "createdAt": "2020-08-21T22:20:27Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMzA4NA==", "bodyText": "I wrote some custom Condition classes and moved the credentialProvider bean creation into a separate class, with this change it appears to work as expected, let me know if this change is too much.\nAlso, I have the AssumeRoleCondition only checking for the roleArn, realistically it will need the keys too, but I figure better to throw an exception in the creation logic than have it bump down to the Anonymous creds if those are missing.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475023084", "createdAt": "2020-08-22T00:45:59Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -96,12 +102,22 @@ public SdkHttpRequest modifyHttpRequest(\n     public S3AsyncClient s3CloudStorageClient() {\n         log.info(\"Configured to download from S3 in region {} with bucket name '{}'\",\n                 downloaderProperties.getRegion(), downloaderProperties.getBucketName());\n-        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(downloaderProperties.getRegion());\n+        S3AsyncClientBuilder clientBuilder = asyncClientBuilder(\n+                downloaderProperties.getRegion());\n         String endpointOverride = downloaderProperties.getEndpointOverride();\n         if (endpointOverride != null) {\n             log.info(\"Overriding s3 client endpoint to {}\", endpointOverride);\n             clientBuilder.endpointOverride(URI.create(endpointOverride));\n         }\n+        if(StringUtils.isNotBlank(downloaderProperties.getRoleArn())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4OTQ0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc0NDI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxMzo0MVrOHEzK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMzo1OFrOHE_Npg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDc0NA==", "bodyText": "Can this work with anonymous credentials? If not, please throw an error if accessKey or secret key empty.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474794744", "createdAt": "2020-08-21T16:13:41Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MjAzOA==", "bodyText": "Removed the call that would allow it to try to use anonymous credentials, and did a check/throw exception if the keys are not provided.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474992038", "createdAt": "2020-08-21T22:13:58Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDc0NA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc0ODMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxNDo1OVrOHEzNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoxMzoxOFrOHE_M2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NTM2Nw==", "bodyText": "Code reuse is good, but in this case reusing awsCredentialsProvider() cause a log statement to indicate the wrong credentials were used to setup the client. Also it may not work with anonymous creds. It may be better to just use StaticCredentialsProvider directly.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474795367", "createdAt": "2020-08-21T16:14:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MTgzMg==", "bodyText": "Good call, removed this and built my own StaticCredentialsProvider.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474991832", "createdAt": "2020-08-21T22:13:18Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(awsCredentialsProvider(accessKey, secretKey))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NTM2Nw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzgzMjMzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0MTozNFrOHE0Bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoyMDo1OVrOHE_VEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODc0Mw==", "bodyText": "nit: accessKey, secretKey and region are all pulled from the downloaderProperties which you use in here to get roleArn, roleSessionName and externalId.\nProbably no need to pass them in, that was it makes it consistent and makes for a shorter call.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474808743", "createdAt": "2020-08-21T16:41:34Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5MzkzOQ==", "bodyText": "Removed the parameters.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474993939", "createdAt": "2020-08-21T22:20:59Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +143,25 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider(String accessKey, String secretKey, String region) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODc0Mw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg0MDQxOnYy", "diffSide": "RIGHT", "path": "docs/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NDoyMlrOHE0Gpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoyMjoxM1rOHE_WOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDAyMw==", "bodyText": "nit: we like to order these alphabetically. So these 3 probably won't end up side by side. Probably would be like this\nhedera.mirror.importer.downloader.endpointOverride\nhedera.mirror.importer.downloader.externalId\n...\nhedera.mirror.importer.downloader.region\nhedera.mirror.importer.downloader.roleArn\nhedera.mirror.importer.downloader.roleSessionName", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474810023", "createdAt": "2020-08-21T16:44:22Z", "author": {"login": "Nana-EC"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDIzMw==", "bodyText": "Alphabetized.  Per Steven's comments, the new config was added to a static config class S3, so they now sit together.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474994233", "createdAt": "2020-08-21T22:22:13Z", "author": {"login": "ijungmann"}, "path": "docs/configuration.md", "diffHunk": "@@ -37,6 +37,9 @@ value, it is recommended to only populate overridden properties in the custom `a\n | `hedera.mirror.importer.downloader.bucketName`                       |                         | The cloud storage bucket name to download streamed files. This value takes priority over network hardcoded bucket names regardless of `hedera.mirror.importer.network` value.|\n | `hedera.mirror.importer.downloader.cloudProvider`                    | S3                      | The cloud provider to download files from. Either `S3` or `GCP`                                |\n | `hedera.mirror.importer.downloader.endpointOverride`                 |                         | Can be specified to download streams from a source other than S3 and GCP. Should be S3 compatible |\n+| `hedera.mirror.importer.downloader.roleArn`                          |                         | The ARN for the role that needs to be assumed to connect to S3.  Only required if wishing to use temporary security credentials |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDAyMw=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzg0NzY3OnYy", "diffSide": "RIGHT", "path": "charts/marketplace/gcp/schema.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NjoyOVrOHE0LJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMjoyMjozNVrOHE_WjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTE3NA==", "bodyText": "nit: order alphabetically\nimporter.config.hedera.mirror.importer.downloader.endpointOverride\n...\nimporter.config.hedera.mirror.importer.downloader.roleArn\nimporter.config.hedera.mirror.importer.downloader.roleSessionName", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474811174", "createdAt": "2020-08-21T16:46:29Z", "author": {"login": "Nana-EC"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk5NDMxNg==", "bodyText": "Alphabetized", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r474994316", "createdAt": "2020-08-21T22:22:35Z", "author": {"login": "ijungmann"}, "path": "charts/marketplace/gcp/schema.yaml", "diffHunk": "@@ -128,6 +128,18 @@ properties:\n     type: string\n     description: The Google Cloud secret key used to pay for downloaded streamed files\n     title: Importer GCP secret key\n+  importer.config.hedera.mirror.importer.downloader.roleArn:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMTE3NA=="}, "originalCommit": {"oid": "1a7b8f5bf03afeb808cc52d614601e0fe16e2b56"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA5MDU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoyNTozNlrOHFAPgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjo1NTo0MlrOHFS-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA==", "bodyText": "from AWS SDK doc, an assumeRole session has a duration; S3 calls will fail once the session expires. so we also need to support assumeRole session refresh.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475008898", "createdAt": "2020-08-21T23:25:36Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +145,32 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider() {\n+        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n+        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n+                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n+            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n+        }\n+\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n+                .region(Region.of(downloaderProperties.getRegion()))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getS3().getRoleArn())\n+                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMzg4NA==", "bodyText": "I may be mistaken, I believe this is taken care of by the refreshRequest on the credentials provider\nreturn StsAssumeRoleCredentialsProvider.builder().stsClient(stsClient) .refreshRequest(assumeRoleRequestBuilder.build())\nThe description here seems to imply this is handled", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475023884", "createdAt": "2020-08-22T00:52:09Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +145,32 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider() {\n+        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n+        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n+                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n+            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n+        }\n+\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n+                .region(Region.of(downloaderProperties.getRegion()))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getS3().getRoleArn())\n+                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA=="}, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxNTkzNg==", "bodyText": "yes you are correct", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475315936", "createdAt": "2020-08-24T02:55:42Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/config/MirrorImporterConfiguration.java", "diffHunk": "@@ -129,6 +145,32 @@ private AwsCredentialsProvider awsCredentialsProvider(String accessKey, String s\n         }\n     }\n \n+    private AwsCredentialsProvider awsAssumeRoleCredentialsProvider() {\n+        log.info(\"Setting up S3 async client using temporary credentials (AWS AssumeRole)\");\n+        if (StringUtils.isBlank(downloaderProperties.getAccessKey())\n+                || StringUtils.isBlank(downloaderProperties.getSecretKey())) {\n+            throw new MissingCredentialsException(\"Cannot connect to S3 using AssumeRole without user keys\");\n+        }\n+\n+        StsClient stsClient = StsClient.builder()\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                        downloaderProperties.getAccessKey(), downloaderProperties.getSecretKey())))\n+                .region(Region.of(downloaderProperties.getRegion()))\n+                .build();\n+\n+        AssumeRoleRequest.Builder assumeRoleRequestBuilder = AssumeRoleRequest.builder()\n+                .roleArn(downloaderProperties.getS3().getRoleArn())\n+                .roleSessionName(downloaderProperties.getS3().getRoleSessionName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwODg5OA=="}, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTA5MTU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/MissingCredentialsException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMzoyNjoyM1rOHFAQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1NjowOVrOHFBL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTA1MA==", "bodyText": "copyright header", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475009050", "createdAt": "2020-08-21T23:26:23Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/MissingCredentialsException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.mirror.importer.exception;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDM3Mg==", "bodyText": "Fixed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/971#discussion_r475024372", "createdAt": "2020-08-22T00:56:09Z", "author": {"login": "ijungmann"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/exception/MissingCredentialsException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.hedera.mirror.importer.exception;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAwOTA1MA=="}, "originalCommit": {"oid": "7ec71ed534bf2d8c822042aba0d74c9c0ec535db"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}