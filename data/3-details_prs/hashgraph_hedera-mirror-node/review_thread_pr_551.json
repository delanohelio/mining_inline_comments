{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDQ1NTcw", "number": 551, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozMjoyMFrODiBKUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MDoyOFrODiBSIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk3MjAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozMjoyMFrOFtFNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjowMDo1MFrOFtF2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU2Mg==", "bodyText": "q: what quantity is this? # messages or bytes or seconds? Might be worth noting", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382815562", "createdAt": "2020-02-21T21:32:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "diffHunk": "@@ -32,10 +33,21 @@\n public class ListenerProperties {\n \n     @NotNull\n-    private Duration pollingFrequency = Duration.ofSeconds(2);\n+    private Duration bufferInitial = Duration.ofSeconds(5);\n+\n+    @Min(1)\n+    private int bufferSize = 50_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNjIzOQ==", "bodyText": "It's noted in the configuration doc as being for number of messages", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382826239", "createdAt": "2020-02-21T22:00:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/ListenerProperties.java", "diffHunk": "@@ -32,10 +33,21 @@\n public class ListenerProperties {\n \n     @NotNull\n-    private Duration pollingFrequency = Duration.ofSeconds(2);\n+    private Duration bufferInitial = Duration.ofSeconds(5);\n+\n+    @Min(1)\n+    private int bufferSize = 50_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNTU2Mg=="}, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk3NTI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTozMzo1MFrOFtFPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTowMTozM1rOFtsJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA==", "bodyText": "Maybe we should make this configureable in the properties file also", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382816080", "createdAt": "2020-02-21T21:33:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "diffHunk": "@@ -40,15 +44,20 @@\n \n     private final ListenerProperties listenerProperties;\n     private final TopicMessageRepository topicMessageRepository;\n+    private final Scheduler scheduler = Schedulers\n+            .newParallel(\"poll\", 4 * Runtime.getRuntime().availableProcessors(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNjQwMQ==", "bodyText": "Yeah, I was trying to avoid having to write and maintain the constructor, but if you think it's worth it I can.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382836401", "createdAt": "2020-02-21T22:28:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "diffHunk": "@@ -40,15 +44,20 @@\n \n     private final ListenerProperties listenerProperties;\n     private final TopicMessageRepository topicMessageRepository;\n+    private final Scheduler scheduler = Schedulers\n+            .newParallel(\"poll\", 4 * Runtime.getRuntime().availableProcessors(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1NjEzNw==", "bodyText": "Yeah. I think in the future when we get to really fine tuning and tweaking all the thread properties we'll want to be able to configure these on the fly.\nSince it's a parallel scheduler it makes sense to leave it as a multiple of the availableProcessors like reactor does.\nYou can make the multiple (4 in this case - make this default) configurable in the listenerProperties.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r383356137", "createdAt": "2020-02-24T16:04:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "diffHunk": "@@ -40,15 +44,20 @@\n \n     private final ListenerProperties listenerProperties;\n     private final TopicMessageRepository topicMessageRepository;\n+    private final Scheduler scheduler = Schedulers\n+            .newParallel(\"poll\", 4 * Runtime.getRuntime().availableProcessors(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MzY0Nw==", "bodyText": "Done for PollingTopicMessageRetriever. PollingTopicListener not used now and will soon go away so not worth adding the property.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r383453647", "createdAt": "2020-02-24T19:01:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/PollingTopicListener.java", "diffHunk": "@@ -40,15 +44,20 @@\n \n     private final ListenerProperties listenerProperties;\n     private final TopicMessageRepository topicMessageRepository;\n+    private final Scheduler scheduler = Schedulers\n+            .newParallel(\"poll\", 4 * Runtime.getRuntime().availableProcessors(), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjA4MA=="}, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk5MTY3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MDoxOFrOFtFY7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMjowMzoxMVrOFtF6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODU0MQ==", "bodyText": "nit: you're not using the subscription argument", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382818541", "createdAt": "2020-02-21T21:40:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -89,12 +116,32 @@ private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n     @Data\n     private class PollingContext {\n \n-        private volatile Instant lastConsensusTimestamp = Instant.now();\n-        private volatile boolean running = false;\n+        private final AtomicLong count = new AtomicLong(0L);\n+        private final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        private volatile Instant lastConsensusTimestamp = Instant.now().minus(listenerProperties.getBufferInitial());\n \n         void onNext(TopicMessage topicMessage) {\n+            count.incrementAndGet();\n             lastConsensusTimestamp = topicMessage.getConsensusTimestamp();\n             log.trace(\"Next message: {}\", topicMessage);\n         }\n+\n+        void onPollEnd() {\n+            var elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+            var rate = elapsed > 0 ? (int) (1000.0 * count.get() / elapsed) : 0;\n+            log.debug(\"Finished querying with {} messages in {} ({}/s)\", count, stopwatch, rate);\n+        }\n+\n+        void onPollStart(Subscription subscription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNzA5Mg==", "bodyText": "It's so I can use the slightly cleaner and performant method reference approach", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382827092", "createdAt": "2020-02-21T22:03:11Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -89,12 +116,32 @@ private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n     @Data\n     private class PollingContext {\n \n-        private volatile Instant lastConsensusTimestamp = Instant.now();\n-        private volatile boolean running = false;\n+        private final AtomicLong count = new AtomicLong(0L);\n+        private final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        private volatile Instant lastConsensusTimestamp = Instant.now().minus(listenerProperties.getBufferInitial());\n \n         void onNext(TopicMessage topicMessage) {\n+            count.incrementAndGet();\n             lastConsensusTimestamp = topicMessage.getConsensusTimestamp();\n             log.trace(\"Next message: {}\", topicMessage);\n         }\n+\n+        void onPollEnd() {\n+            var elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+            var rate = elapsed > 0 ? (int) (1000.0 * count.get() / elapsed) : 0;\n+            log.debug(\"Finished querying with {} messages in {} ({}/s)\", count, stopwatch, rate);\n+        }\n+\n+        void onPollStart(Subscription subscription) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODU0MQ=="}, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTk5MjAwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MDoyOFrOFtFZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0MDoyOFrOFtFZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxODYwNQ==", "bodyText": "nit: you're not using the subscription argument", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/551#discussion_r382818605", "createdAt": "2020-02-21T21:40:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/main/java/com/hedera/mirror/grpc/listener/SharedPollingTopicListener.java", "diffHunk": "@@ -89,12 +116,32 @@ private boolean filterMessage(TopicMessage message, TopicMessageFilter filter) {\n     @Data\n     private class PollingContext {\n \n-        private volatile Instant lastConsensusTimestamp = Instant.now();\n-        private volatile boolean running = false;\n+        private final AtomicLong count = new AtomicLong(0L);\n+        private final Stopwatch stopwatch = Stopwatch.createUnstarted();\n+        private volatile Instant lastConsensusTimestamp = Instant.now().minus(listenerProperties.getBufferInitial());\n \n         void onNext(TopicMessage topicMessage) {\n+            count.incrementAndGet();\n             lastConsensusTimestamp = topicMessage.getConsensusTimestamp();\n             log.trace(\"Next message: {}\", topicMessage);\n         }\n+\n+        void onPollEnd() {\n+            var elapsed = stopwatch.elapsed(TimeUnit.MILLISECONDS);\n+            var rate = elapsed > 0 ? (int) (1000.0 * count.get() / elapsed) : 0;\n+            log.debug(\"Finished querying with {} messages in {} ({}/s)\", count, stopwatch, rate);\n+        }\n+\n+        void onPollStart(Subscription subscription) {\n+            count.set(0L);\n+            stopwatch.reset().start();\n+            log.debug(\"Querying for messages after timestamp {}\", lastConsensusTimestamp);\n+        }\n+\n+        // Backfill the buffer on startup\n+        void onStart(Subscription subscription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dbc30a93983bffdc7941e47a4cecd2f509af31"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1167, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}