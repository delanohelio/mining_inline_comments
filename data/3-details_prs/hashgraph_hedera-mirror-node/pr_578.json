{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjAwNTQ1", "number": 578, "title": "Postgres Writer #3 : Move transaction and batching", "bodyText": "Detailed description:\nMove transaction and batching to PostgresWritingRecordParserItemHandlerTest.\nFollowups from previous reviews:\n\nAdd NotImplementedException to methods missing logic\nshare code between two insertFile*() functions\n\nSigned-off-by: Apekshit Sharma apekshit.sharma@hedera.com\nWhich issue(s) this PR fixes:\nPartially fixes #566\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-02T20:49:23Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578", "merged": true, "mergeCommit": {"oid": "740b6f5aed635da1d0af182df97ecda9d2af52cc"}, "closed": true, "closedAt": "2020-03-02T23:30:57Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ0BGeAH2gAyMzgyNjAwNTQ1OjM0NzhkZThlNWU1NDA3NTEzYzI4YjVlNzRiNjk2NWRkMGY5OTRlNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKdUG0AFqTM2OTExMDA0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3478de8e5e5407513c28b5e74b6965dd0f994e62", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3478de8e5e5407513c28b5e74b6965dd0f994e62", "committedDate": "2020-03-02T20:47:40Z", "message": "Postgres Writer #3 : Move transaction and batching\n\nFollowups from previous reviews:\n- Add NotImplementedException to methods missing logic\n- share code between two insertFile*() functions\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cc912467eb3ff82f2e6b1060d2b04845169c05", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/45cc912467eb3ff82f2e6b1060d2b04845169c05", "committedDate": "2020-03-02T20:56:27Z", "message": "remove old test for batch size\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTI5NTI4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#pullrequestreview-367529528", "createdAt": "2020-03-02T21:10:46Z", "commit": {"oid": "45cc912467eb3ff82f2e6b1060d2b04845169c05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDo0NlrOFwvXLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDo0NlrOFwvXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MTk0OA==", "bodyText": "not needed now that there's test for batching in PostgresWritingRecordParserItemHandlerTest.\nEven before, it wasn't testing batching correctly.\nSince the test always commits explicitly by calling completeFile and then only checks for number of rows in the table, it would pass even if batching was not working correctly. Verified it locally on master branch by commenting call to executeBatches() that was there in RecordFileLogger.storeRecord().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r386651948", "createdAt": "2020-03-02T21:10:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileLoggerCryptoTest.java", "diffHunk": "@@ -137,29 +137,6 @@ void cryptoCreate() throws Exception {\n         verifyRepoCryptoTransferList(record);\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45cc912467eb3ff82f2e6b1060d2b04845169c05"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6c14c40e71e67903d2967b2aea5961cdd3f5ca18", "committedDate": "2020-03-02T21:30:18Z", "message": "close connection\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NTU3OTg5", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#pullrequestreview-367557989", "createdAt": "2020-03-02T21:56:28Z", "commit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo1NjoyOFrOFwwwww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo1NjoyOFrOFwwwww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NDg4Mw==", "bodyText": "So my thought here was that if the PreparedStatement could be retrieved by test code then we could eventually down ingestion only tests for performance, and we'd avoid test code and product code getting out of sync.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r386674883", "createdAt": "2020-03-02T21:56:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -36,18 +37,31 @@\n import com.hedera.mirror.importer.exception.ImporterException;\n import com.hedera.mirror.importer.exception.ParserSQLException;\n \n+import org.apache.commons.lang3.NotImplementedException;\n+\n @Log4j2\n @Named\n+@RequiredArgsConstructor\n public class PostgresWritingRecordParsedItemHandler implements RecordParsedItemHandler {\n+    private long batch_count = 0;\n+    private PreparedStatement sqlInsertTransaction;\n     private PreparedStatement sqlInsertTransferList;\n     private PreparedStatement sqlInsertNonFeeTransfers;\n     private PreparedStatement sqlInsertFileData;\n     private PreparedStatement sqlInsertContractResult;\n     private PreparedStatement sqlInsertLiveHashes;\n     private PreparedStatement sqlInsertTopicMessage;\n+    private final PostgresWriterProperties properties;\n \n     void initSqlStatements(Connection connection) throws ParserSQLException {\n         try {\n+            sqlInsertTransaction = connection.prepareStatement(\"INSERT INTO t_transactions\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTEwMDQz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#pullrequestreview-369110043", "createdAt": "2020-03-04T20:47:05Z", "commit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo0NzowNVrOFx9C2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo1NDowM1rOFx9QNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNDY5OQ==", "bodyText": "Why is this added here if it is a standalone bean used in a standalone fashion in the handler?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r387924699", "createdAt": "2020-03-04T20:47:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordParserProperties.java", "diffHunk": "@@ -60,6 +60,8 @@\n     // bytes on the t_transaction table\n     private boolean persistTransactionBytes = false;\n \n+    private final PostgresWriterProperties postgresWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNTExMA==", "bodyText": "Needs @Min(1)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r387925110", "createdAt": "2020-03-04T20:47:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWriterProperties.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+import lombok.Data;\n+import javax.inject.Named;\n+\n+@Data\n+@Named\n+public class PostgresWriterProperties {\n+    /**\n+     * PreparedStatement.executeBatch() is called after every batchSize number of transactions from record stream file.\n+     */\n+    private int batchSize = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNjAzOQ==", "bodyText": "Missing @ConfigurationProperties(\"hedera.mirror.parser.record.postgresql\") and @Validated. @Named can be removed as it's auto-scanned.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r387926039", "createdAt": "2020-03-04T20:49:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWriterProperties.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.hedera.mirror.importer.parser.record;\n+\n+import lombok.Data;\n+import javax.inject.Named;\n+\n+@Data\n+@Named\n+public class PostgresWriterProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyODExOQ==", "bodyText": "Why was this check removed?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/578#discussion_r387928119", "createdAt": "2020-03-04T20:54:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileLogger.java", "diffHunk": "@@ -740,28 +693,21 @@ private static void insertConsensusTopicMessage(ConsensusSubmitMessageTransactio\n         postgresWriter.onTopicMessage(topicMessage);\n     }\n \n-    private static void insertFileCreate(long consensusTimestamp, FileCreateTransactionBody transactionBody,\n-                                         TransactionRecord transactionRecord) {\n+    private static void insertFileData(long consensusTimestamp, byte[] contents, FileID fileID) {\n         if (parserProperties.isPersistFiles() ||\n-                (parserProperties.isPersistSystemFiles() && transactionRecord.getReceipt().getFileID()\n-                        .getFileNum() < 1000)) {\n-            byte[] contents = transactionBody.getContents().toByteArray();\n+                (parserProperties.isPersistSystemFiles() && fileID.getFileNum() < 1000)) {\n             postgresWriter.onFileData(new FileData(consensusTimestamp, contents));\n         }\n     }\n \n     private static void insertFileAppend(long consensusTimestamp, FileAppendTransactionBody transactionBody)\n             throws IOException {\n-        if (parserProperties.isPersistFiles() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c14c40e71e67903d2967b2aea5961cdd3f5ca18"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}