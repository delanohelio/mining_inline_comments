{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTg1MDc1", "number": 644, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1OToxM1rODul2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjoyNjowMVrODvU-UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTgxMjI3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessages-01-no-args.spec.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo1OToxM1rOGApdtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMDozM1rOGBqVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjUzMg==", "bodyText": "Description is inaccurate", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r403332532", "createdAt": "2020-04-03T20:59:13Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-01-no-args.spec.json", "diffHunk": "@@ -0,0 +1,56 @@\n+{\n+  \"description\": \"Get single message by valid consensus timestamp\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTQyOQ==", "bodyText": "Updating", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404395429", "createdAt": "2020-04-06T21:20:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-01-no-args.spec.json", "diffHunk": "@@ -0,0 +1,56 @@\n+{\n+  \"description\": \"Get single message by valid consensus timestamp\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjUzMg=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODYwMDY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utils.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0ODozOVrOGBjHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMDoyM1rOGBqVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NzAzOA==", "bodyText": "Why would seqnum=2 translate to lt:2?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404277038", "createdAt": "2020-04-06T17:48:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/__tests__/utils.test.js", "diffHunk": "@@ -193,3 +194,241 @@ describe('Utils isValidEntityNum tests', () => {\n     expect(utils.isValidEntityNum('0.2.3')).toBe(true);\n   });\n });\n+\n+describe('utils buildComparatorFilter tests', () => {\n+  test('Verify buildComparatorFilter for seqnum=lt:2', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, 'lt:2', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'lt',\n+      value: '2'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for seqnum=lte:3', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, 'lte:3', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'lte',\n+      value: '3'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for seqnum=4', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, '4', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'eq',\n+      value: '4'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for timestamp=gte:1234567890.000000004', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.TIMESTAMP, 'gte:1234567890.000000005', {\n+      key: constants.filterKeys.TIMESTAMP,\n+      operator: 'gte',\n+      value: '1234567890.000000005'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for timestamp=gt:6', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.TIMESTAMP, 'gt:1234567890.000000006', {\n+      key: constants.filterKeys.TIMESTAMP,\n+      operator: 'gt',\n+      value: '1234567890.000000006'\n+    });\n+  });\n+});\n+\n+const verifyBuildComparatorFilter = (key, val, expectedFilter) => {\n+  let filter = utils.buildComparatorFilter(key, val);\n+\n+  verifyFilter(filter, expectedFilter.key, expectedFilter.operator, expectedFilter.value);\n+};\n+\n+const verifyFilter = (filter, key, op, val) => {\n+  expect(filter.key).toStrictEqual(key);\n+  expect(filter.operator).toStrictEqual(op);\n+  expect(filter.value).toStrictEqual(val);\n+};\n+\n+describe('utils buildFilterObject tests', () => {\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?seqnum=2', () => {\n+    const filters = {\n+      seqnum: '2'\n+    };\n+\n+    let formattedFilters = utils.buildFilterObject(filters);\n+\n+    expect(formattedFilters.length).toBe(1);\n+    verifyFilter(formattedFilters[0], constants.filterKeys.SEQUENCE_NUMBER, 'eq', '2');\n+  });\n+\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?timestamp=1234567890.000000004', () => {\n+    const filters = {\n+      timestamp: '1234567890.000000004'\n+    };\n+\n+    let formattedFilters = utils.buildFilterObject(filters);\n+\n+    expect(formattedFilters.length).toBe(1);\n+    verifyFilter(formattedFilters[0], constants.filterKeys.TIMESTAMP, 'eq', '1234567890.000000004');\n+  });\n+\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?seqnum=2&seqnum=gte:3&timestamp=1234567890.000000004&order=desc&limit=5', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTMyMw==", "bodyText": "Wrong label. Test logic is correct.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404395323", "createdAt": "2020-04-06T21:20:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/utils.test.js", "diffHunk": "@@ -193,3 +194,241 @@ describe('Utils isValidEntityNum tests', () => {\n     expect(utils.isValidEntityNum('0.2.3')).toBe(true);\n   });\n });\n+\n+describe('utils buildComparatorFilter tests', () => {\n+  test('Verify buildComparatorFilter for seqnum=lt:2', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, 'lt:2', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'lt',\n+      value: '2'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for seqnum=lte:3', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, 'lte:3', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'lte',\n+      value: '3'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for seqnum=4', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.SEQUENCE_NUMBER, '4', {\n+      key: constants.filterKeys.SEQUENCE_NUMBER,\n+      operator: 'eq',\n+      value: '4'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for timestamp=gte:1234567890.000000004', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.TIMESTAMP, 'gte:1234567890.000000005', {\n+      key: constants.filterKeys.TIMESTAMP,\n+      operator: 'gte',\n+      value: '1234567890.000000005'\n+    });\n+  });\n+\n+  test('Verify buildComparatorFilter for timestamp=gt:6', () => {\n+    verifyBuildComparatorFilter(constants.filterKeys.TIMESTAMP, 'gt:1234567890.000000006', {\n+      key: constants.filterKeys.TIMESTAMP,\n+      operator: 'gt',\n+      value: '1234567890.000000006'\n+    });\n+  });\n+});\n+\n+const verifyBuildComparatorFilter = (key, val, expectedFilter) => {\n+  let filter = utils.buildComparatorFilter(key, val);\n+\n+  verifyFilter(filter, expectedFilter.key, expectedFilter.operator, expectedFilter.value);\n+};\n+\n+const verifyFilter = (filter, key, op, val) => {\n+  expect(filter.key).toStrictEqual(key);\n+  expect(filter.operator).toStrictEqual(op);\n+  expect(filter.value).toStrictEqual(val);\n+};\n+\n+describe('utils buildFilterObject tests', () => {\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?seqnum=2', () => {\n+    const filters = {\n+      seqnum: '2'\n+    };\n+\n+    let formattedFilters = utils.buildFilterObject(filters);\n+\n+    expect(formattedFilters.length).toBe(1);\n+    verifyFilter(formattedFilters[0], constants.filterKeys.SEQUENCE_NUMBER, 'eq', '2');\n+  });\n+\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?timestamp=1234567890.000000004', () => {\n+    const filters = {\n+      timestamp: '1234567890.000000004'\n+    };\n+\n+    let formattedFilters = utils.buildFilterObject(filters);\n+\n+    expect(formattedFilters.length).toBe(1);\n+    verifyFilter(formattedFilters[0], constants.filterKeys.TIMESTAMP, 'eq', '1234567890.000000004');\n+  });\n+\n+  test('Verify buildComparatorFilter for /api/v1/topic/7?seqnum=2&seqnum=gte:3&timestamp=1234567890.000000004&order=desc&limit=5', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NzAzOA=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODk2NjE0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/constants.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyOTo1M1rOGBms6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMDo1NFrOGBqWQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNTg1MQ==", "bodyText": "I would prefer this spelled out and not abbreviated. We don't seem to have another multi-word (except maybe account.publickey?) param so not sure whether it should be:\nsequencenumber\nsequenceNumber\nsequence_number\nI think first would work best.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404335851", "createdAt": "2020-04-06T19:29:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const filterKeys = {\n+  ACCOUNT_ID: 'account.id',\n+  ACCOUNT_BALANCE: 'account.balance',\n+  ACCOUNT_PUBLICKEY: 'account.publickey',\n+  LIMIT: 'limit',\n+  ORDER: 'order',\n+  RESULT: 'result',\n+  SEQUENCE_NUMBER: 'seqnum',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTU4NQ==", "bodyText": "1st one it is", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404395585", "createdAt": "2020-04-06T21:20:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/constants.js", "diffHunk": "@@ -0,0 +1,44 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+'use strict';\n+\n+const filterKeys = {\n+  ACCOUNT_ID: 'account.id',\n+  ACCOUNT_BALANCE: 'account.balance',\n+  ACCOUNT_PUBLICKEY: 'account.publickey',\n+  LIMIT: 'limit',\n+  ORDER: 'order',\n+  RESULT: 'result',\n+  SEQUENCE_NUMBER: 'seqnum',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNTg1MQ=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTAzOTU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MTozMVrOGBnaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTowNDo1NVrOGBvV4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzQ5Nw==", "bodyText": "This allows limit up to 9999, is that correct? That seems a bit high. We may want to have the regex and some max value like 1000 or 2000. Also should check non-zero", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404347497", "createdAt": "2020-04-06T19:51:31Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -84,44 +110,58 @@ const paramValidityChecks = function(param, opAndVal) {\n     return ret;\n   }\n \n+  return filterValidityChecks(param, op, val);\n+};\n+\n+const filterValidityChecks = function(param, op, val) {\n+  let ret = false;\n+\n+  if (op === undefined || val === undefined) {\n+    return ret;\n+  }\n+\n   // Validate operator\n   if (!/^(gte?|lte?|eq|ne)$/.test(op)) {\n     return ret;\n   }\n \n   // Validate the value\n   switch (param) {\n-    case 'account.id':\n+    case filterKeys.ACCOUNT_ID:\n       // Accepted forms: shard.realm.num or num\n       ret = isValidEntityNum(val);\n       break;\n-    case 'timestamp':\n+    case filterKeys.TIMESTAMP:\n       ret = isValidTimestampParam(val);\n       break;\n-    case 'account.balance':\n+    case filterKeys.ACCOUNT_BALANCE:\n       // Accepted forms: Upto 50 billion\n       ret = /^\\d{1,19}$/.test(val);\n       break;\n-    case 'account.publickey':\n+    case filterKeys.ACCOUNT_PUBLICKEY:\n       // Acceptable forms: exactly 64 characters or +12 bytes (DER encoded)\n       ret = /^[0-9a-fA-F]{64}$/.test(val) || /^[0-9a-fA-F]{88}$/.test(val);\n       break;\n-    case 'limit':\n+    case filterKeys.LIMIT:\n       // Acceptable forms: upto 4 digits\n-      ret = /^\\d{1,4}$/.test(val);\n+      ret = isValidLimitNum(val);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1ODI0MQ==", "bodyText": "Boxed it to 0 - max limit", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404458241", "createdAt": "2020-04-06T23:58:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -84,44 +110,58 @@ const paramValidityChecks = function(param, opAndVal) {\n     return ret;\n   }\n \n+  return filterValidityChecks(param, op, val);\n+};\n+\n+const filterValidityChecks = function(param, op, val) {\n+  let ret = false;\n+\n+  if (op === undefined || val === undefined) {\n+    return ret;\n+  }\n+\n   // Validate operator\n   if (!/^(gte?|lte?|eq|ne)$/.test(op)) {\n     return ret;\n   }\n \n   // Validate the value\n   switch (param) {\n-    case 'account.id':\n+    case filterKeys.ACCOUNT_ID:\n       // Accepted forms: shard.realm.num or num\n       ret = isValidEntityNum(val);\n       break;\n-    case 'timestamp':\n+    case filterKeys.TIMESTAMP:\n       ret = isValidTimestampParam(val);\n       break;\n-    case 'account.balance':\n+    case filterKeys.ACCOUNT_BALANCE:\n       // Accepted forms: Upto 50 billion\n       ret = /^\\d{1,19}$/.test(val);\n       break;\n-    case 'account.publickey':\n+    case filterKeys.ACCOUNT_PUBLICKEY:\n       // Acceptable forms: exactly 64 characters or +12 bytes (DER encoded)\n       ret = /^[0-9a-fA-F]{64}$/.test(val) || /^[0-9a-fA-F]{88}$/.test(val);\n       break;\n-    case 'limit':\n+    case filterKeys.LIMIT:\n       // Acceptable forms: upto 4 digits\n-      ret = /^\\d{1,4}$/.test(val);\n+      ret = isValidLimitNum(val);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzQ5Nw=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NzQxMA==", "bodyText": "Shouldn't it be >0?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404477410", "createdAt": "2020-04-07T01:04:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -84,44 +110,58 @@ const paramValidityChecks = function(param, opAndVal) {\n     return ret;\n   }\n \n+  return filterValidityChecks(param, op, val);\n+};\n+\n+const filterValidityChecks = function(param, op, val) {\n+  let ret = false;\n+\n+  if (op === undefined || val === undefined) {\n+    return ret;\n+  }\n+\n   // Validate operator\n   if (!/^(gte?|lte?|eq|ne)$/.test(op)) {\n     return ret;\n   }\n \n   // Validate the value\n   switch (param) {\n-    case 'account.id':\n+    case filterKeys.ACCOUNT_ID:\n       // Accepted forms: shard.realm.num or num\n       ret = isValidEntityNum(val);\n       break;\n-    case 'timestamp':\n+    case filterKeys.TIMESTAMP:\n       ret = isValidTimestampParam(val);\n       break;\n-    case 'account.balance':\n+    case filterKeys.ACCOUNT_BALANCE:\n       // Accepted forms: Upto 50 billion\n       ret = /^\\d{1,19}$/.test(val);\n       break;\n-    case 'account.publickey':\n+    case filterKeys.ACCOUNT_PUBLICKEY:\n       // Acceptable forms: exactly 64 characters or +12 bytes (DER encoded)\n       ret = /^[0-9a-fA-F]{64}$/.test(val) || /^[0-9a-fA-F]{88}$/.test(val);\n       break;\n-    case 'limit':\n+    case filterKeys.LIMIT:\n       // Acceptable forms: upto 4 digits\n-      ret = /^\\d{1,4}$/.test(val);\n+      ret = isValidLimitNum(val);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzQ5Nw=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA1NDIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1NTozMlrOGBnjiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMToyODoyMFrOGBvuaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTgzMw==", "bodyText": "Should add the utils.errorHandler here (just merged)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404349833", "createdAt": "2020-04-06T19:55:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -144,10 +285,19 @@ const getMessageByTopicAndSequenceRequest = function(req, res) {\n   return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n+const getTopicMessages = (req, res) => {\n+  logger.debug('--------------------  getTopicMessages --------------------');\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return processGetTopicMessages(req, res);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMDczMw==", "bodyText": "Already merged this in.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404400733", "createdAt": "2020-04-06T21:30:52Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -144,10 +285,19 @@ const getMessageByTopicAndSequenceRequest = function(req, res) {\n   return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n+const getTopicMessages = (req, res) => {\n+  logger.debug('--------------------  getTopicMessages --------------------');\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return processGetTopicMessages(req, res);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTgzMw=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzExNA==", "bodyText": "You merged but did not add this to new method...", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404403114", "createdAt": "2020-04-06T21:35:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -144,10 +285,19 @@ const getMessageByTopicAndSequenceRequest = function(req, res) {\n   return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n+const getTopicMessages = (req, res) => {\n+  logger.debug('--------------------  getTopicMessages --------------------');\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return processGetTopicMessages(req, res);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTgzMw=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4MzY5MQ==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404483691", "createdAt": "2020-04-07T01:28:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -144,10 +285,19 @@ const getMessageByTopicAndSequenceRequest = function(req, res) {\n   return processGetMessageByTopicAndSequenceRequest(req.params, res);\n };\n \n+const getTopicMessages = (req, res) => {\n+  logger.debug('--------------------  getTopicMessages --------------------');\n+  logger.debug(`Client: [ ${req.ip} ] URL: ${req.originalUrl}`);\n+  return processGetTopicMessages(req, res);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTgzMw=="}, "originalCommit": {"oid": "00c80bf428011e6edbb56a26d137960ec8d95609"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTIwMzY2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/balances.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozODo0M1rOGBo_fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTozMTozOFrOGBqr5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MzM3Mg==", "bodyText": "Is your IDE or prettier adding these commas and removing parantheses? Doesn't matter we just need to make sure we're all doing the same formatting.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404373372", "createdAt": "2020-04-06T20:38:43Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/balances.js", "diffHunk": "@@ -150,15 +146,15 @@ const getBalances = function(req, res) {\n       }\n       ret.balances.push({\n         account: row.account,\n-        balance: Number(row.balance)\n+        balance: Number(row.balance),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMTEyNg==", "bodyText": "I think it's my IDE", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404401126", "createdAt": "2020-04-06T21:31:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/balances.js", "diffHunk": "@@ -150,15 +146,15 @@ const getBalances = function(req, res) {\n       }\n       ret.balances.push({\n         account: row.account,\n-        balance: Number(row.balance)\n+        balance: Number(row.balance),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MzM3Mg=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTIxMjY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo0MToyN1rOGBpFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0MTowMFrOGCJzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NDg1NA==", "bodyText": "Would it better practice to use select * to avoid having to change later if the fields are altered?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404374854", "createdAt": "2020-04-06T20:41:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMTg0Nw==", "bodyText": "My mindset was rather to control the columns we expose.\nIf you like I can make it * and if we add a column that we don't want to expose we can make it as above.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404401847", "createdAt": "2020-04-06T21:33:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NDg1NA=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMDg5Ng==", "bodyText": "Ok, let's keep it as is for now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404910896", "createdAt": "2020-04-07T15:41:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NDg1NA=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTIzMDc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo0NzowM1rOGBpQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTozNToxM1rOGBqzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3Nzc3Nw==", "bodyText": "This limit seems to be only set if a limit param is supplied. Thus if a query with no limit returned larger than default page size, there would be no next link it looks like.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404377777", "createdAt": "2020-04-06T20:47:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjk1MA==", "bodyText": "Good catch.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404402950", "createdAt": "2020-04-06T21:35:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3Nzc3Nw=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTIzNTgzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo0ODo0MlrOGBpT_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTozNTozMlrOGBv2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3ODYyMw==", "bodyText": "There is no check that this is below config.api.maxLimit or a default being set. Why are we not using parseLimitAndOrderParams?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404378623", "createdAt": "2020-04-06T20:48:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +\n+    ' from topic_message where realm_num = $1 and topic_num = $2';\n+  let nextParamCount = 3;\n+  let pgSqlParams = [entity.realm, entity.num];\n+\n+  // add filters\n+  let limit;\n+  let order = 'asc';\n+  for (let filter of filters) {\n+    if (filter.key === constants.filterKeys.LIMIT) {\n+      limit = filter.value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwODA3OQ==", "bodyText": "I've update the validation method for limit to check the range.\nNot using parseLimitAndOrderParams because it does validation and sql query creation in one go only for the limit param.\nThe logic I'm defining here and hoping will be used by other routes is to have all the queries and filters validated before trying to create the sql. This split up the logic and I think makes it easier to follow and test.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404408079", "createdAt": "2020-04-06T21:46:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +\n+    ' from topic_message where realm_num = $1 and topic_num = $2';\n+  let nextParamCount = 3;\n+  let pgSqlParams = [entity.realm, entity.num];\n+\n+  // add filters\n+  let limit;\n+  let order = 'asc';\n+  for (let filter of filters) {\n+    if (filter.key === constants.filterKeys.LIMIT) {\n+      limit = filter.value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3ODYyMw=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NzgxMw==", "bodyText": "You still need a default limit.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404477813", "createdAt": "2020-04-07T01:06:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +\n+    ' from topic_message where realm_num = $1 and topic_num = $2';\n+  let nextParamCount = 3;\n+  let pgSqlParams = [entity.realm, entity.num];\n+\n+  // add filters\n+  let limit;\n+  let order = 'asc';\n+  for (let filter of filters) {\n+    if (filter.key === constants.filterKeys.LIMIT) {\n+      limit = filter.value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3ODYyMw=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4NTY4OQ==", "bodyText": "Default limit from the config file is set a few lines below", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404485689", "createdAt": "2020-04-07T01:35:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -106,11 +151,94 @@ const processGetMessageByTopicAndSequenceRequest = (params, httpResponse) => {\n   return getMessage(pgSqlQuery, pgSqlParams, httpResponse);\n };\n \n+const processGetTopicMessages = (req, res) => {\n+  // retrieve param and filters from request\n+  const topicId = req.params.id;\n+  const filters = utils.buildFilterObject(req.query);\n+\n+  // validate params\n+  const validQuery = validateGetTopicMessagesRequest(topicId, filters, res);\n+  if (!validQuery) {\n+    return Promise.resolve;\n+  }\n+\n+  // build sql query validated param and filters\n+  let {query, params, order, limit} = extractSqlFromTopicMessagesRequest(topicId, filters);\n+\n+  let topicMessagesResponse = {\n+    messages: [],\n+    links: {\n+      next: null,\n+    },\n+  };\n+\n+  // get results and return formatted response\n+  getMessages(query, params).then((messages) => {\n+    topicMessagesResponse.messages = messages;\n+\n+    // populate next\n+    if (limit) {\n+      let lastTimeStamp =\n+        messages.length > 0 ? messages[messages.length - 1][topicMessageColumns.CONSENSUS_TIMESTAMP] : null;\n+      topicMessagesResponse.links.next = utils.getPaginationLink(\n+        req,\n+        topicMessagesResponse.messages.length !== limit,\n+        constants.filterKeys.TIMESTAMP,\n+        lastTimeStamp,\n+        order\n+      );\n+    }\n+\n+    res.json(topicMessagesResponse);\n+  });\n+};\n+\n+const extractSqlFromTopicMessagesRequest = (topicId, filters) => {\n+  const entity = utils.parseEntityId(topicId);\n+  let pgSqlQuery =\n+    'select consensus_timestamp, realm_num, topic_num, message, running_hash, sequence_number' +\n+    ' from topic_message where realm_num = $1 and topic_num = $2';\n+  let nextParamCount = 3;\n+  let pgSqlParams = [entity.realm, entity.num];\n+\n+  // add filters\n+  let limit;\n+  let order = 'asc';\n+  for (let filter of filters) {\n+    if (filter.key === constants.filterKeys.LIMIT) {\n+      limit = filter.value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3ODYyMw=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTI1NTIwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/utils.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NDoyNVrOGBpf6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjowMDo0NlrOGBrhgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTY3Mg==", "bodyText": "Why would a sequence number be an entity num? entity nums accept 0.0.1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404381672", "createdAt": "2020-04-06T20:54:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -85,44 +111,58 @@ const paramValidityChecks = function(param, opAndVal) {\n     return ret;\n   }\n \n+  return filterValidityChecks(param, op, val);\n+};\n+\n+const filterValidityChecks = function (param, op, val) {\n+  let ret = false;\n+\n+  if (op === undefined || val === undefined) {\n+    return ret;\n+  }\n+\n   // Validate operator\n   if (!/^(gte?|lte?|eq|ne)$/.test(op)) {\n     return ret;\n   }\n \n   // Validate the value\n   switch (param) {\n-    case 'account.id':\n+    case filterKeys.ACCOUNT_ID:\n       // Accepted forms: shard.realm.num or num\n       ret = isValidEntityNum(val);\n       break;\n-    case 'timestamp':\n+    case filterKeys.TIMESTAMP:\n       ret = isValidTimestampParam(val);\n       break;\n-    case 'account.balance':\n+    case filterKeys.ACCOUNT_BALANCE:\n       // Accepted forms: Upto 50 billion\n       ret = /^\\d{1,19}$/.test(val);\n       break;\n-    case 'account.publickey':\n+    case filterKeys.ACCOUNT_PUBLICKEY:\n       // Acceptable forms: exactly 64 characters or +12 bytes (DER encoded)\n       ret = /^[0-9a-fA-F]{64}$/.test(val) || /^[0-9a-fA-F]{88}$/.test(val);\n       break;\n-    case 'limit':\n+    case filterKeys.LIMIT:\n       // Acceptable forms: upto 4 digits\n-      ret = /^\\d{1,4}$/.test(val);\n+      ret = isValidLimitNum(val);\n       break;\n-    case 'order':\n+    case filterKeys.ORDER:\n       // Acceptable words: asc or desc\n       ret = ['asc', 'desc'].includes(val);\n       break;\n-    case 'type':\n+    case filterKeys.TYPE:\n       // Acceptable words: credit or debig\n       ret = ['credit', 'debit'].includes(val);\n       break;\n-    case 'result':\n+    case filterKeys.RESULT:\n       // Acceptable words: success or fail\n       ret = ['success', 'fail'].includes(val);\n       break;\n+    case filterKeys.SEQUENCE_NUMBER:\n+      // Acceptable words: bigint\n+      ret = isValidEntityNum(val);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNDg0OQ==", "bodyText": "Added a isValidNum()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404414849", "createdAt": "2020-04-06T22:00:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/utils.js", "diffHunk": "@@ -85,44 +111,58 @@ const paramValidityChecks = function(param, opAndVal) {\n     return ret;\n   }\n \n+  return filterValidityChecks(param, op, val);\n+};\n+\n+const filterValidityChecks = function (param, op, val) {\n+  let ret = false;\n+\n+  if (op === undefined || val === undefined) {\n+    return ret;\n+  }\n+\n   // Validate operator\n   if (!/^(gte?|lte?|eq|ne)$/.test(op)) {\n     return ret;\n   }\n \n   // Validate the value\n   switch (param) {\n-    case 'account.id':\n+    case filterKeys.ACCOUNT_ID:\n       // Accepted forms: shard.realm.num or num\n       ret = isValidEntityNum(val);\n       break;\n-    case 'timestamp':\n+    case filterKeys.TIMESTAMP:\n       ret = isValidTimestampParam(val);\n       break;\n-    case 'account.balance':\n+    case filterKeys.ACCOUNT_BALANCE:\n       // Accepted forms: Upto 50 billion\n       ret = /^\\d{1,19}$/.test(val);\n       break;\n-    case 'account.publickey':\n+    case filterKeys.ACCOUNT_PUBLICKEY:\n       // Acceptable forms: exactly 64 characters or +12 bytes (DER encoded)\n       ret = /^[0-9a-fA-F]{64}$/.test(val) || /^[0-9a-fA-F]{88}$/.test(val);\n       break;\n-    case 'limit':\n+    case filterKeys.LIMIT:\n       // Acceptable forms: upto 4 digits\n-      ret = /^\\d{1,4}$/.test(val);\n+      ret = isValidLimitNum(val);\n       break;\n-    case 'order':\n+    case filterKeys.ORDER:\n       // Acceptable words: asc or desc\n       ret = ['asc', 'desc'].includes(val);\n       break;\n-    case 'type':\n+    case filterKeys.TYPE:\n       // Acceptable words: credit or debig\n       ret = ['credit', 'debit'].includes(val);\n       break;\n-    case 'result':\n+    case filterKeys.RESULT:\n       // Acceptable words: success or fail\n       ret = ['success', 'fail'].includes(val);\n       break;\n+    case filterKeys.SEQUENCE_NUMBER:\n+      // Acceptable words: bigint\n+      ret = isValidEntityNum(val);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTY3Mg=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTI1NjkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/topicmessage.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NDo1M1rOGBpg8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjowMjoxNlrOGBrjvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTkzNw==", "bodyText": "Why would a sequence number be an entity num? entity nums accept 0.0.1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404381937", "createdAt": "2020-04-06T20:54:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -35,29 +50,59 @@ const validateConsensusTimestampParam = function(consensusTimestamp) {\n /**\n  * Verify topicId and seqNum meet entity_num format\n  */\n-const validateGetSequenceMessageParams = function(topicId, seqNum) {\n+const validateGetSequenceMessageParams = function (topicId, seqNum) {\n   let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject('topic_num'));\n+    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n   }\n \n   if (!utils.isValidEntityNum(seqNum)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTQyMw==", "bodyText": "Fixed w isValidNum()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404415423", "createdAt": "2020-04-06T22:02:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/topicmessage.js", "diffHunk": "@@ -35,29 +50,59 @@ const validateConsensusTimestampParam = function(consensusTimestamp) {\n /**\n  * Verify topicId and seqNum meet entity_num format\n  */\n-const validateGetSequenceMessageParams = function(topicId, seqNum) {\n+const validateGetSequenceMessageParams = function (topicId, seqNum) {\n   let badParams = [];\n   if (!utils.isValidEntityNum(topicId)) {\n-    badParams.push(utils.getInvalidParameterMessageObject('topic_num'));\n+    badParams.push(utils.getInvalidParameterMessageObject(topicMessageColumns.TOPIC_NUM));\n   }\n \n   if (!utils.isValidEntityNum(seqNum)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTkzNw=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTQ2ODY1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/integrationDbOps.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjowMjozOFrOGBrkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMTo0ODowM1rOGBwD4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTU2Ng==", "bodyText": "i think my editor reverses these :D\nnana, you are the boss. Later, please pick a default for these and let's add them in .editorconfig if possible so our IDEs are in sync.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404415566", "createdAt": "2020-04-06T22:02:38Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/integrationDbOps.js", "diffHunk": "@@ -52,9 +52,9 @@ const SERVICE_FEE = 4;\n \n let accountEntityIds = {};\n \n-const isDockerInstalled = function() {\n-  return new Promise(resolve => {\n-    exec('docker --version', err => {\n+const isDockerInstalled = function () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ4OTE4Ng==", "bodyText": "Done, exported my settings and added here", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404489186", "createdAt": "2020-04-07T01:48:03Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/integrationDbOps.js", "diffHunk": "@@ -52,9 +52,9 @@ const SERVICE_FEE = 4;\n \n let accountEntityIds = {};\n \n-const isDockerInstalled = function() {\n-  return new Promise(resolve => {\n-    exec('docker --version', err => {\n+const isDockerInstalled = function () {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTU2Ng=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTQ3MzgzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/specs/topicmessages-02-specific-sequence.spec.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjowNDoyMFrOGBrnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzowOTo0N1rOGBtMIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjM1MA==", "bodyText": "Weren't we going for /topic/:id/messages/:seq in the new apis to be consistent with kabuto and github?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404416350", "createdAt": "2020-04-06T22:04:20Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-02-specific-sequence.spec.json", "diffHunk": "@@ -0,0 +1,42 @@\n+{\n+  \"description\": \"Get single message by valid topic and sequence\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": [\n+      {\n+        \"timestamp\": \"1234567890000000001\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 1\n+      },\n+      {\n+        \"timestamp\": \"1234567890000000002\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 2\n+      },\n+      {\n+        \"timestamp\": \"1234567890000000003\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 3\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/topic/7?seqnum=2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0MjE0Ng==", "bodyText": "I already implemented the above in the last sprint.\nSee server.js and see the spec files for topicmessage-04 to topicmessage-07\nThis is for the /topic:id or /topics:id endpoints where sequence number is a filter on the collection, not a parameter.\nIt allows the api to handle ranges instead of just a single sequencenumber\nLet me know if that's now what you meant", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404442146", "createdAt": "2020-04-06T23:09:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/specs/topicmessages-02-specific-sequence.spec.json", "diffHunk": "@@ -0,0 +1,42 @@\n+{\n+  \"description\": \"Get single message by valid topic and sequence\",\n+  \"setup\": {\n+    \"accounts\": [],\n+    \"balances\": [],\n+    \"transactions\": [],\n+    \"cryptotransfers\": [],\n+    \"topicmessages\": [\n+      {\n+        \"timestamp\": \"1234567890000000001\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 1\n+      },\n+      {\n+        \"timestamp\": \"1234567890000000002\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 2\n+      },\n+      {\n+        \"timestamp\": \"1234567890000000003\",\n+        \"topic_num\": 7,\n+        \"seq_num\": 3\n+      }\n+    ]\n+  },\n+  \"url\": \"/api/v1/topic/7?seqnum=2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjM1MA=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTUzMjk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/utils.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjoyNjowMVrOGBsLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDowMDozOVrOGBuNxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNTY1MA==", "bodyText": "As we add more tests, this file is gonna bloat up a lot since utils.js itself is bloated.\nWhile refactoring utils.js is not important right now, we can at least avoid bloating up utils.test.js only to split it again in future.\nI'd suggest to move these tests in standalone file, say filter.test.js\nbetter to have these in separate file filter.tests.js or `", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404425650", "createdAt": "2020-04-06T22:26:01Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/utils.test.js", "diffHunk": "@@ -193,3 +194,241 @@ describe('Utils isValidEntityNum tests', () => {\n     expect(utils.isValidEntityNum('0.2.3')).toBe(true);\n   });\n });\n+\n+describe('utils buildComparatorFilter tests', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1ODk1MA==", "bodyText": "Good suggestion", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/644#discussion_r404458950", "createdAt": "2020-04-07T00:00:39Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/utils.test.js", "diffHunk": "@@ -193,3 +194,241 @@ describe('Utils isValidEntityNum tests', () => {\n     expect(utils.isValidEntityNum('0.2.3')).toBe(true);\n   });\n });\n+\n+describe('utils buildComparatorFilter tests', () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNTY1MA=="}, "originalCommit": {"oid": "05a3c2d276226cbb71b2bb8a18c98e32a16de98b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1272, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}