{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDEzNDQ5", "number": 585, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNzowMFrODlmGkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozODo1MFrODl-vdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ4MTc5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNzowMFrOFylEEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MTo0NlrOFzDlkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDM2OA==", "bodyText": "I don't agree with this change, which is apparently the entire purpose of this PR. The connection should be internal state managed by the PostgresWritingRecordParsedItemHandler. With connection pools, opening and closing it for every file doesn't mean a new connection is actually opened or closed, negating any performance benefits.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388580368", "createdAt": "2020-03-05T21:37:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;\n+    private Connection connect;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMDYzMA==", "bodyText": "I agree with this. The DB connection logic should stay within the PostrgresWriter and not be known to RecordFileParser.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388610630", "createdAt": "2020-03-05T22:45:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;\n+    private Connection connect;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDM2OA=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDQ2Nw==", "bodyText": "absolutely, i was planning to change to per-file connection in followup (had the change in a local branch). Well, it's in this PR now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389080467", "createdAt": "2020-03-06T18:51:46Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;\n+    private Connection connect;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDM2OA=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ4NDQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNzo1NFrOFylFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MjoyNVrOFzDmsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDgwOQ==", "bodyText": "The RecordFileParser should not be tightly coupled to a concrete implementation of ParsedItemHandler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388580809", "createdAt": "2020-03-05T21:37:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNDI4Mw==", "bodyText": "Would you suggest an interfaced wrapper, that hides the fact that it's Postgres and allows for it to be configureable without RecordFileParser knowing the difference?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388614283", "createdAt": "2020-03-05T22:54:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDgwOQ=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYzNzcwNg==", "bodyText": "There already is an interface wrapper: ParsedItemHandler", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388637706", "createdAt": "2020-03-06T00:11:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDgwOQ=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDc1Mw==", "bodyText": "after latest change, it now only depends on interfaces.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389080753", "createdAt": "2020-03-06T18:52:25Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +71,8 @@\n     private final RecordParserProperties parserProperties;\n     private final MeterRegistry meterRegistry;\n     private final RecordItemParser recordItemParser;\n+    private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDgwOQ=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ4OTk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozOTo1NVrOFylJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MzowN1rOFzDoKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MTY5OA==", "bodyText": "This method should be moved to a repository to separate db logic from application logic. This method can be used as is or better yet, the f_file_create be deleted and repositories used directly. There can be an argument to using copymanager for performance reasons in itemhandlers, but record files only occur once per file and can definitely use repository. Stored procedures can't participate in an existing transaction anyway so have it using the same connection and rolling back, etc is pointless.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388581698", "createdAt": "2020-03-05T21:39:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {\n+        try {\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connect.prepareCall(\"{? = call f_file_create( ? ) }\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MTEzMA==", "bodyText": "will be done in followup where fileID is being removed. In this PR, just moving the logic as is.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389081130", "createdAt": "2020-03-06T18:53:07Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {\n+        try {\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connect.prepareCall(\"{? = call f_file_create( ? ) }\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MTY5OA=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ5MTI4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0MDoyM1rOFylKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0MDoyM1rOFylKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MTg5Ng==", "bodyText": "Should be private", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388581896", "createdAt": "2020-03-05T21:40:23Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ5MjE0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0MDo0M1rOFylKjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0MDo0M1rOFylKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MjAyOA==", "bodyText": "private", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388582028", "createdAt": "2020-03-05T21:40:43Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {\n+        try {\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connect.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+            } else {\n+                log.trace(\"Added file {} to the database.\", fileName);\n+            }\n+            return fileId;\n+        } catch (SQLException e) {\n+            log.error(\"Error saving file in database: {}\",  fileName, e);\n+            return -1L;\n+        }\n+    }\n+\n+    public void closeFileAndCommit(long fileId, String fileHash, String previousHash) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ5ODU2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0Mjo0OVrOFylObg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NDozNVrOFzDrDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MzAyMg==", "bodyText": "Same statement above about repository", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388583022", "createdAt": "2020-03-05T21:42:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {\n+        try {\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connect.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+            } else {\n+                log.trace(\"Added file {} to the database.\", fileName);\n+            }\n+            return fileId;\n+        } catch (SQLException e) {\n+            log.error(\"Error saving file in database: {}\",  fileName, e);\n+            return -1L;\n+        }\n+    }\n+\n+    public void closeFileAndCommit(long fileId, String fileHash, String previousHash) throws SQLException {\n+        try (CallableStatement fileClose = connect.prepareCall(\"{call f_file_complete( ?, ?, ? ) }\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MTg2OA==", "bodyText": "let's tackle t_record_files related parts in followup. Moving it as in for now.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389081868", "createdAt": "2020-03-06T18:54:35Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,16 +138,85 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n+    /**\n+     * @return 0 if row with given filename already exists, otherwise id of newly added row.\n+     *         In case of failure, returns -1;\n+     */\n+    public long initFile(String fileName) {\n+        try {\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connect.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+            } else {\n+                log.trace(\"Added file {} to the database.\", fileName);\n+            }\n+            return fileId;\n+        } catch (SQLException e) {\n+            log.error(\"Error saving file in database: {}\",  fileName, e);\n+            return -1L;\n+        }\n+    }\n+\n+    public void closeFileAndCommit(long fileId, String fileHash, String previousHash) throws SQLException {\n+        try (CallableStatement fileClose = connect.prepareCall(\"{call f_file_complete( ?, ?, ? ) }\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MzAyMg=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUxNDU3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0ODowMVrOFylYKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NjoyMlrOFzDuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTUxMg==", "bodyText": "Should not increase visibility of methods just for testing. Just test the parse method", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388585512", "createdAt": "2020-03-05T21:48:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -149,12 +229,12 @@ private void rollback() {\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+    public boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxNTYwOA==", "bodyText": "I do see the desire to improve testability. Can we utilize a different scope that allows for testing but doesn't open it up publicly?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388615608", "createdAt": "2020-03-05T22:58:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -149,12 +229,12 @@ private void rollback() {\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+    public boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTUxMg=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MjcxMw==", "bodyText": "we'll be changing RecordFileParser to following (from design) where this function will be public, so i believe it's okay for now.\npublic class RecordFileParser {\n\n    private final RecordItemListener recordItemListener;  // injected dependency\n    private final RecordParsedItemHandler recordParsedItemHandler;  // injected dependency\n\n    void onFile(StreamFileData streamFileData) {\n        // process stream file\n    }\n}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389082713", "createdAt": "2020-03-06T18:56:22Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -149,12 +229,12 @@ private void rollback() {\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+    public boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTUxMg=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUyNTQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1MDowOVrOFyld0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NzoxN1rOFzDv9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4Njk2Mw==", "bodyText": "This logic is unnecessarily complex (before and after change). It would be a lot clearer for initFile to return a Optional<RecordFile>.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388586963", "createdAt": "2020-03-05T21:50:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -149,12 +229,12 @@ private void rollback() {\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+    public boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n                                    String thisFileHash) {\n-        var result = initFile(fileName);\n-        if (result == RecordItemParser.INIT_RESULT.SKIP) {\n+        var fileId = initFile(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MzEyNg==", "bodyText": "change to Optional and exception based failing.\nCan do further improvements later.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389083126", "createdAt": "2020-03-06T18:57:17Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -149,12 +229,12 @@ private void rollback() {\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+    public boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n                                    String thisFileHash) {\n-        var result = initFile(fileName);\n-        if (result == RecordItemParser.INIT_RESULT.SKIP) {\n+        var fileId = initFile(fileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4Njk2Mw=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUzMDgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1MjowMVrOFylhIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NzozN1rOFzDwcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NzgwOQ==", "bodyText": "RecordItemParser should not know about a concrete implementation of ParsedItemHandler. This negates the whole purpose of this parser refactoring: to easily swap out implementations or support multiple different implementations concurrently (e.g. send to postgres and bigquery).", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388587809", "createdAt": "2020-03-05T21:52:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java", "diffHunk": "@@ -84,10 +78,6 @@\n     private final Predicate<com.hedera.mirror.importer.domain.Transaction> transactionFilter;\n     private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MzI1MQ==", "bodyText": "after latest changes, it depends on only interface.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389083251", "createdAt": "2020-03-06T18:57:37Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordItemParser.java", "diffHunk": "@@ -84,10 +78,6 @@\n     private final Predicate<com.hedera.mirror.importer.domain.Transaction> transactionFilter;\n     private final PostgresWritingRecordParsedItemHandler postgresWriter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NzgwOQ=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3MTQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMzoyNVrOFyl4og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1MDoyMVrOF2O4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzgyNg==", "bodyText": "If you're removing t_transactions.fk_rec_file_id in the future, it makes t_record_files pretty pointless. Have we checked with BRD if they're not using it so we can remove the table entirely? Or if we need to keep it do we need to add start and end transaction consensus timestamp to it so the associated transactions can be calculated that way?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388593826", "createdAt": "2020-03-05T22:03:25Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "diffHunk": "@@ -64,7 +64,9 @@\n     @ManyToOne(cascade = CascadeType.PERSIST)\n     private Entities entity;\n \n+    // Deprecated, value set to 0 until removed.\n     @Column(name = \"fk_rec_file_id\")\n+    @Deprecated(forRemoval = true, since = \"v0.7.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MzM5OA==", "bodyText": "in followup :)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389083398", "createdAt": "2020-03-06T18:57:53Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "diffHunk": "@@ -64,7 +64,9 @@\n     @ManyToOne(cascade = CascadeType.PERSIST)\n     private Entities entity;\n \n+    // Deprecated, value set to 0 until removed.\n     @Column(name = \"fk_rec_file_id\")\n+    @Deprecated(forRemoval = true, since = \"v0.7.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzgyNg=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxMTE5Ng==", "bodyText": "#600", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r392411196", "createdAt": "2020-03-13T18:50:21Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "diffHunk": "@@ -64,7 +64,9 @@\n     @ManyToOne(cascade = CascadeType.PERSIST)\n     private Entities entity;\n \n+    // Deprecated, value set to 0 until removed.\n     @Column(name = \"fk_rec_file_id\")\n+    @Deprecated(forRemoval = true, since = \"v0.7.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzgyNg=="}, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3NDExOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNDoyMlrOFyl6OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNDoyMlrOFyl6OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDIzMg==", "bodyText": "This should be private and not leaked to upper layers", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r388594232", "createdAt": "2020-03-05T22:04:22Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -90,16 +90,12 @@ void initSqlStatements(Connection connection) throws ParserSQLException {\n         }\n     }\n \n-    public void finish() {\n-        closeStatements();\n-    }\n-\n     @Override\n     public void onFileComplete() {\n         executeBatches();\n     }\n \n-    private void closeStatements() {\n+    public void closeStatements() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6803b540b924cd29d57d8397b72a7126ec97151b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQwNDcxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxNDozN1rOFzKMHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxODozNDowMFrOFzWusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4ODYzNg==", "bodyText": "any improvements suggestions here?\nwould like to make this neater in next PR ('fileId removal')", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389188636", "createdAt": "2020-03-06T23:14:37Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,43 +136,33 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n-    }\n-\n-    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n-        recordItemParser.completeFile(fileHash, previousHash);\n-    }\n-\n-    private void rollback() {\n-        recordItemParser.rollback();\n-    }\n-\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName             the name of record file to read\n-     * @param inputStream          input stream of bytes in the record file\n-     * @param expectedPrevFileHash the hash of the previous record file in the series\n-     * @param thisFileHash         the hash of this file\n+     * @param streamFileData containing information about file to be processed\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n-                                   String thisFileHash) {\n-        var result = initFile(fileName);\n-        if (result == RecordItemParser.INIT_RESULT.SKIP) {\n-            return true; // skip this fle\n-        } else if (result == RecordItemParser.INIT_RESULT.FAIL) {\n-            rollback();\n+    public boolean loadRecordFile(StreamFileData streamFileData, String thisFileHash, String expectedPrevFileHash) {\n+        String fileName = streamFileData.getFilename();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075404b0bfb8a1856d87a6c219f7874f3c2488ed"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNjE0NQ==", "bodyText": "For next PR, I would suggest not returning boolean and let exceptions propagate. The current hash should be loaded within RecordFileParser and passed to it. I would also suggest not keeping previous hash around and passing to loadRecordFile. This can be retrieved from applicationStatus each time. While slightly less efficient, it makes the interface cleaner and the parser more self contained and less coupled.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389216145", "createdAt": "2020-03-07T01:51:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,43 +136,33 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n-    }\n-\n-    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n-        recordItemParser.completeFile(fileHash, previousHash);\n-    }\n-\n-    private void rollback() {\n-        recordItemParser.rollback();\n-    }\n-\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName             the name of record file to read\n-     * @param inputStream          input stream of bytes in the record file\n-     * @param expectedPrevFileHash the hash of the previous record file in the series\n-     * @param thisFileHash         the hash of this file\n+     * @param streamFileData containing information about file to be processed\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n-                                   String thisFileHash) {\n-        var result = initFile(fileName);\n-        if (result == RecordItemParser.INIT_RESULT.SKIP) {\n-            return true; // skip this fle\n-        } else if (result == RecordItemParser.INIT_RESULT.FAIL) {\n-            rollback();\n+    public boolean loadRecordFile(StreamFileData streamFileData, String thisFileHash, String expectedPrevFileHash) {\n+        String fileName = streamFileData.getFilename();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4ODYzNg=="}, "originalCommit": {"oid": "075404b0bfb8a1856d87a6c219f7874f3c2488ed"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NDA5OQ==", "bodyText": "Followup: #587", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389394099", "createdAt": "2020-03-08T18:34:00Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -127,43 +136,33 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n-    private RecordItemParser.INIT_RESULT initFile(String filename) {\n-        return recordItemParser.initFile(filename);\n-    }\n-\n-    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n-        recordItemParser.completeFile(fileHash, previousHash);\n-    }\n-\n-    private void rollback() {\n-        recordItemParser.rollback();\n-    }\n-\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName             the name of record file to read\n-     * @param inputStream          input stream of bytes in the record file\n-     * @param expectedPrevFileHash the hash of the previous record file in the series\n-     * @param thisFileHash         the hash of this file\n+     * @param streamFileData containing information about file to be processed\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n-                                   String thisFileHash) {\n-        var result = initFile(fileName);\n-        if (result == RecordItemParser.INIT_RESULT.SKIP) {\n-            return true; // skip this fle\n-        } else if (result == RecordItemParser.INIT_RESULT.FAIL) {\n-            rollback();\n+    public boolean loadRecordFile(StreamFileData streamFileData, String thisFileHash, String expectedPrevFileHash) {\n+        String fileName = streamFileData.getFilename();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4ODYzNg=="}, "originalCommit": {"oid": "075404b0bfb8a1856d87a6c219f7874f3c2488ed"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQxMjM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOTowNlrOFzKQmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoxOTowNlrOFzKQmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE4OTc4Nw==", "bodyText": "mocked in test.\nIf there's a better way, let's revisit this when moving to repository.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389189787", "createdAt": "2020-03-06T23:19:06Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -52,8 +60,88 @@\n     private PreparedStatement sqlInsertLiveHashes;\n     private PreparedStatement sqlInsertTopicMessage;\n     private final PostgresWriterProperties properties;\n+    private final DataSource dataSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075404b0bfb8a1856d87a6c219f7874f3c2488ed"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5ODUwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMTozOVrOFzLFHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMzo0MlrOFzLqvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzIyOQ==", "bodyText": "given when then is the typical bdd expression used.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389203229", "createdAt": "2020-03-07T00:21:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "diffHunk": "@@ -73,88 +94,177 @@ void before() {\n                 .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n                 .filterFiles(\"*.rcd\")\n                 .to(streamType.getPath(), streamType.getValid());\n+        file1 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_00.419072Z.rcd\").toFile();\n+        file2 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n+        recordFile1 = new RecordFile(0L, file1.getPath(), 0L, 0L,\n+                \"591558e059bd1629ee386c4e35a6875b4c67a096718f5d225772a651042715189414df7db5588495efb2a85dc4a0ffda\",\n+                \"\");\n+        recordFile2 = new RecordFile(0L, file2.getPath(), 0L, 0L,\n+                \"5ed51baeff204eb6a2a68b76bbaadcb9b6e7074676c1746b99681d075bef009e8d57699baaa6342feec4e83726582d36\",\n+                recordFile1.getFileHash());\n     }\n \n-    @Test\n-    void parse() throws Exception {\n-        fileCopier.copy();\n-        recordFileParser.parse();\n+    // Asserts that recordStreamFileListener.onStart is called exactly with given fileNames.\n+    private void assertOnStart(String... fileNames) {\n+        ArgumentCaptor<StreamFileData> captor = ArgumentCaptor.forClass(StreamFileData.class);\n+        verify(recordStreamFileListener, times(fileNames.length)).onStart(captor.capture());\n+        List<StreamFileData> actualArgs = captor.getAllValues();\n+        assertThat(actualArgs)\n+                .extracting(StreamFileData::getFilename)\n+                .contains(fileNames);\n+    }\n \n+    // Asserts that recordStreamFileListener.onEnd is called exactly with given params, in given order\n+    private void assertOnEnd(RecordFile... recordFiles) {\n+        ArgumentCaptor<RecordFile> captor = ArgumentCaptor.forClass(RecordFile.class);\n+        verify(recordStreamFileListener, times(recordFiles.length)).onEnd(captor.capture());\n+        List<RecordFile> actualArgs = captor.getAllValues();\n+        for (int i = 0; i < recordFiles.length; i++) {\n+            RecordFile actual = actualArgs.get(i);\n+            RecordFile expected = recordFiles[i];\n+            assertEquals(expected.getId(), actual.getId());\n+            assertEquals(expected.getName(), actual.getName());\n+            assertEquals(expected.getFileHash(), actual.getFileHash());\n+            assertEquals(expected.getPreviousHash(), actual.getPreviousHash());\n+        }\n+    }\n+\n+    // Asserts that parsed directory contains exactly the files with given fileNames\n+    private void assertParsedFiles(String... fileNames) throws Exception {\n         assertThat(Files.walk(parserProperties.getParsedPath()))\n                 .filteredOn(p -> !p.toFile().isDirectory())\n-                .hasSize(2)\n+                .hasSize(fileNames.length)\n                 .extracting(Path::getFileName)\n-                .contains(Paths.get(\"2019-08-30T18_10_05.249678Z.rcd\"))\n-                .contains(Paths.get(\"2019-08-30T18_10_00.419072Z.rcd\"));\n+                .extracting(Path::toString)\n+                .contains(fileNames);\n+    }\n \n-        Assertions.assertThat(transactionRepository.findAll())\n-                .hasSize(19 + 15)\n-                .extracting(Transaction::getType)\n-                .containsOnlyElementsOf(Sets.newHashSet(11, 12, 14));\n+    @Test\n+    void parse() throws Exception {\n+        // setup\n+        fileCopier.copy();\n+        when(recordStreamFileListener.onStart(any())).thenAnswer(invocation -> {\n+            StreamFileData streamFileData = invocation.getArgument(0, StreamFileData.class);\n+            RecordFile recordFile = new RecordFile();\n+            recordFile.setId(0L);\n+            recordFile.setName(streamFileData.getFilename());\n+            return Optional.of(recordFile);\n+        });\n+\n+        // when\n+        recordFileParser.parse();\n+\n+        // expect\n+        assertParsedFiles(file1.getName(), file2.getName());\n+        verify(recordItemListener, times(NUM_TXNS_FILE_1 + NUM_TXNS_FILE_2)).onItem(any());\n+        assertOnStart(file1.getPath(), file2.getPath());\n+        assertOnEnd(recordFile1, recordFile2);\n     }\n \n     @Test\n     void disabled() throws Exception {\n+        // setup\n         parserProperties.setEnabled(false);\n         fileCopier.copy();\n+\n+        // when\n         recordFileParser.parse();\n-        assertThat(Files.walk(parserProperties.getParsedPath())).filteredOn(p -> !p.toFile().isDirectory()).hasSize(0);\n-        assertThat(transactionRepository.count()).isEqualTo(0L);\n+\n+        // expect\n+        assertParsedFiles();\n+        verifyNoInteractions(recordItemListener);\n+        verifyNoInteractions(recordStreamFileListener);\n     }\n \n     @Test\n     void noFiles() throws Exception {\n+        // when\n         recordFileParser.parse();\n-        assertThat(Files.walk(parserProperties.getParsedPath())).filteredOn(p -> !p.toFile().isDirectory()).hasSize(0);\n-        assertThat(transactionRepository.count()).isEqualTo(0L);\n+\n+        // expect\n+        assertParsedFiles();\n+        verifyNoInteractions(recordItemListener);\n+        verifyNoInteractions(recordStreamFileListener);\n     }\n \n     @Test\n     void invalidFile() throws Exception {\n-        File recordFile = dataPath.resolve(streamType.getPath()).resolve(streamType.getValid())\n-                .resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n-        FileUtils.writeStringToFile(recordFile, \"corrupt\", \"UTF-8\");\n+        // setup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjg2Mw==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389212863", "createdAt": "2020-03-07T01:23:42Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "diffHunk": "@@ -73,88 +94,177 @@ void before() {\n                 .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n                 .filterFiles(\"*.rcd\")\n                 .to(streamType.getPath(), streamType.getValid());\n+        file1 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_00.419072Z.rcd\").toFile();\n+        file2 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n+        recordFile1 = new RecordFile(0L, file1.getPath(), 0L, 0L,\n+                \"591558e059bd1629ee386c4e35a6875b4c67a096718f5d225772a651042715189414df7db5588495efb2a85dc4a0ffda\",\n+                \"\");\n+        recordFile2 = new RecordFile(0L, file2.getPath(), 0L, 0L,\n+                \"5ed51baeff204eb6a2a68b76bbaadcb9b6e7074676c1746b99681d075bef009e8d57699baaa6342feec4e83726582d36\",\n+                recordFile1.getFileHash());\n     }\n \n-    @Test\n-    void parse() throws Exception {\n-        fileCopier.copy();\n-        recordFileParser.parse();\n+    // Asserts that recordStreamFileListener.onStart is called exactly with given fileNames.\n+    private void assertOnStart(String... fileNames) {\n+        ArgumentCaptor<StreamFileData> captor = ArgumentCaptor.forClass(StreamFileData.class);\n+        verify(recordStreamFileListener, times(fileNames.length)).onStart(captor.capture());\n+        List<StreamFileData> actualArgs = captor.getAllValues();\n+        assertThat(actualArgs)\n+                .extracting(StreamFileData::getFilename)\n+                .contains(fileNames);\n+    }\n \n+    // Asserts that recordStreamFileListener.onEnd is called exactly with given params, in given order\n+    private void assertOnEnd(RecordFile... recordFiles) {\n+        ArgumentCaptor<RecordFile> captor = ArgumentCaptor.forClass(RecordFile.class);\n+        verify(recordStreamFileListener, times(recordFiles.length)).onEnd(captor.capture());\n+        List<RecordFile> actualArgs = captor.getAllValues();\n+        for (int i = 0; i < recordFiles.length; i++) {\n+            RecordFile actual = actualArgs.get(i);\n+            RecordFile expected = recordFiles[i];\n+            assertEquals(expected.getId(), actual.getId());\n+            assertEquals(expected.getName(), actual.getName());\n+            assertEquals(expected.getFileHash(), actual.getFileHash());\n+            assertEquals(expected.getPreviousHash(), actual.getPreviousHash());\n+        }\n+    }\n+\n+    // Asserts that parsed directory contains exactly the files with given fileNames\n+    private void assertParsedFiles(String... fileNames) throws Exception {\n         assertThat(Files.walk(parserProperties.getParsedPath()))\n                 .filteredOn(p -> !p.toFile().isDirectory())\n-                .hasSize(2)\n+                .hasSize(fileNames.length)\n                 .extracting(Path::getFileName)\n-                .contains(Paths.get(\"2019-08-30T18_10_05.249678Z.rcd\"))\n-                .contains(Paths.get(\"2019-08-30T18_10_00.419072Z.rcd\"));\n+                .extracting(Path::toString)\n+                .contains(fileNames);\n+    }\n \n-        Assertions.assertThat(transactionRepository.findAll())\n-                .hasSize(19 + 15)\n-                .extracting(Transaction::getType)\n-                .containsOnlyElementsOf(Sets.newHashSet(11, 12, 14));\n+    @Test\n+    void parse() throws Exception {\n+        // setup\n+        fileCopier.copy();\n+        when(recordStreamFileListener.onStart(any())).thenAnswer(invocation -> {\n+            StreamFileData streamFileData = invocation.getArgument(0, StreamFileData.class);\n+            RecordFile recordFile = new RecordFile();\n+            recordFile.setId(0L);\n+            recordFile.setName(streamFileData.getFilename());\n+            return Optional.of(recordFile);\n+        });\n+\n+        // when\n+        recordFileParser.parse();\n+\n+        // expect\n+        assertParsedFiles(file1.getName(), file2.getName());\n+        verify(recordItemListener, times(NUM_TXNS_FILE_1 + NUM_TXNS_FILE_2)).onItem(any());\n+        assertOnStart(file1.getPath(), file2.getPath());\n+        assertOnEnd(recordFile1, recordFile2);\n     }\n \n     @Test\n     void disabled() throws Exception {\n+        // setup\n         parserProperties.setEnabled(false);\n         fileCopier.copy();\n+\n+        // when\n         recordFileParser.parse();\n-        assertThat(Files.walk(parserProperties.getParsedPath())).filteredOn(p -> !p.toFile().isDirectory()).hasSize(0);\n-        assertThat(transactionRepository.count()).isEqualTo(0L);\n+\n+        // expect\n+        assertParsedFiles();\n+        verifyNoInteractions(recordItemListener);\n+        verifyNoInteractions(recordStreamFileListener);\n     }\n \n     @Test\n     void noFiles() throws Exception {\n+        // when\n         recordFileParser.parse();\n-        assertThat(Files.walk(parserProperties.getParsedPath())).filteredOn(p -> !p.toFile().isDirectory()).hasSize(0);\n-        assertThat(transactionRepository.count()).isEqualTo(0L);\n+\n+        // expect\n+        assertParsedFiles();\n+        verifyNoInteractions(recordItemListener);\n+        verifyNoInteractions(recordStreamFileListener);\n     }\n \n     @Test\n     void invalidFile() throws Exception {\n-        File recordFile = dataPath.resolve(streamType.getPath()).resolve(streamType.getValid())\n-                .resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n-        FileUtils.writeStringToFile(recordFile, \"corrupt\", \"UTF-8\");\n+        // setup", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzIyOQ=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5OTM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMjoyNlrOFzLFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToyMzozM1rOFzLqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzM2MA==", "bodyText": "helpers should be at the bottom of the class so that tests are more visible", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389203360", "createdAt": "2020-03-07T00:22:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "diffHunk": "@@ -73,88 +94,177 @@ void before() {\n                 .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n                 .filterFiles(\"*.rcd\")\n                 .to(streamType.getPath(), streamType.getValid());\n+        file1 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_00.419072Z.rcd\").toFile();\n+        file2 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n+        recordFile1 = new RecordFile(0L, file1.getPath(), 0L, 0L,\n+                \"591558e059bd1629ee386c4e35a6875b4c67a096718f5d225772a651042715189414df7db5588495efb2a85dc4a0ffda\",\n+                \"\");\n+        recordFile2 = new RecordFile(0L, file2.getPath(), 0L, 0L,\n+                \"5ed51baeff204eb6a2a68b76bbaadcb9b6e7074676c1746b99681d075bef009e8d57699baaa6342feec4e83726582d36\",\n+                recordFile1.getFileHash());\n     }\n \n-    @Test\n-    void parse() throws Exception {\n-        fileCopier.copy();\n-        recordFileParser.parse();\n+    // Asserts that recordStreamFileListener.onStart is called exactly with given fileNames.\n+    private void assertOnStart(String... fileNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjg0MQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389212841", "createdAt": "2020-03-07T01:23:33Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/RecordFileParserTest.java", "diffHunk": "@@ -73,88 +94,177 @@ void before() {\n                 .from(streamType.getPath(), \"v2\", \"record0.0.3\")\n                 .filterFiles(\"*.rcd\")\n                 .to(streamType.getPath(), streamType.getValid());\n+        file1 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_00.419072Z.rcd\").toFile();\n+        file2 = parserProperties.getValidPath().resolve(\"2019-08-30T18_10_05.249678Z.rcd\").toFile();\n+        recordFile1 = new RecordFile(0L, file1.getPath(), 0L, 0L,\n+                \"591558e059bd1629ee386c4e35a6875b4c67a096718f5d225772a651042715189414df7db5588495efb2a85dc4a0ffda\",\n+                \"\");\n+        recordFile2 = new RecordFile(0L, file2.getPath(), 0L, 0L,\n+                \"5ed51baeff204eb6a2a68b76bbaadcb9b6e7074676c1746b99681d075bef009e8d57699baaa6342feec4e83726582d36\",\n+                recordFile1.getFileHash());\n     }\n \n-    @Test\n-    void parse() throws Exception {\n-        fileCopier.copy();\n-        recordFileParser.parse();\n+    // Asserts that recordStreamFileListener.onStart is called exactly with given fileNames.\n+    private void assertOnStart(String... fileNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzM2MA=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUxMjU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozMzo0M1rOFzLNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMzo1NDowOFrOFzMayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTQwOA==", "bodyText": "This should return Optional.empty() to match the previous behavior of skipping if already exists", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389205408", "createdAt": "2020-03-07T00:33:43Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -52,8 +60,88 @@\n     private PreparedStatement sqlInsertLiveHashes;\n     private PreparedStatement sqlInsertTopicMessage;\n     private final PostgresWriterProperties properties;\n+    private final DataSource dataSource;\n+    private Connection connection;\n \n-    void initSqlStatements(Connection connection) throws ParserSQLException {\n+    @Override\n+    public Optional<RecordFile> onStart(StreamFileData streamFileData) {\n+        String fileName = streamFileData.getFilename();\n+        try {\n+            initConnectionAndStatements();\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connection.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+                closeConnectionAndStatements();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjc3OA==", "bodyText": "emm, it's returning in next line?\nit wasn't earlier though, i believe you saw it when it wasn't :)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389212778", "createdAt": "2020-03-07T01:23:01Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -52,8 +60,88 @@\n     private PreparedStatement sqlInsertLiveHashes;\n     private PreparedStatement sqlInsertTopicMessage;\n     private final PostgresWriterProperties properties;\n+    private final DataSource dataSource;\n+    private Connection connection;\n \n-    void initSqlStatements(Connection connection) throws ParserSQLException {\n+    @Override\n+    public Optional<RecordFile> onStart(StreamFileData streamFileData) {\n+        String fileName = streamFileData.getFilename();\n+        try {\n+            initConnectionAndStatements();\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connection.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+                closeConnectionAndStatements();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTQwOA=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyNTE2Mg==", "bodyText": "You're right, didn't see your previous commit.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389225162", "createdAt": "2020-03-07T03:54:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/PostgresWritingRecordParsedItemHandler.java", "diffHunk": "@@ -52,8 +60,88 @@\n     private PreparedStatement sqlInsertLiveHashes;\n     private PreparedStatement sqlInsertTopicMessage;\n     private final PostgresWriterProperties properties;\n+    private final DataSource dataSource;\n+    private Connection connection;\n \n-    void initSqlStatements(Connection connection) throws ParserSQLException {\n+    @Override\n+    public Optional<RecordFile> onStart(StreamFileData streamFileData) {\n+        String fileName = streamFileData.getFilename();\n+        try {\n+            initConnectionAndStatements();\n+            long fileId;\n+\n+            try (CallableStatement fileCreate = connection.prepareCall(\"{? = call f_file_create( ? ) }\")) {\n+                fileCreate.registerOutParameter(1, Types.BIGINT);\n+                fileCreate.setString(2, fileName);\n+                fileCreate.execute();\n+                fileId = fileCreate.getLong(1);\n+            }\n+\n+            if (fileId == 0) {\n+                log.trace(\"File {} already exists in the database.\", fileName);\n+                closeConnectionAndStatements();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNTQwOA=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTUxODYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/RecordStreamFileListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDozODo1MFrOFzLRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNzozNzo1M1rOFzQ5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjMzOQ==", "bodyText": "None of these methods need to be overridden in the sub-interface. Please remove", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389206339", "createdAt": "2020-03-07T00:38:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/RecordStreamFileListener.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.hedera.mirror.importer.parser;\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.parser.domain.StreamFileData;\n+\n+public interface RecordStreamFileListener extends StreamFileListener<RecordFile> {\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjgwNg==", "bodyText": "oops.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389212806", "createdAt": "2020-03-07T01:23:13Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/RecordStreamFileListener.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.hedera.mirror.importer.parser;\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.parser.domain.StreamFileData;\n+\n+public interface RecordStreamFileListener extends StreamFileListener<RecordFile> {\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjMzOQ=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyNTMxOA==", "bodyText": "You just removed the override annotations. I meant the methods themselves don't need to be there as they're in the parent and it uses generics. I won't block this PR for that though, so please fix in follow up.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389225318", "createdAt": "2020-03-07T03:56:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/RecordStreamFileListener.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.hedera.mirror.importer.parser;\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.parser.domain.StreamFileData;\n+\n+public interface RecordStreamFileListener extends StreamFileListener<RecordFile> {\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjMzOQ=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI5ODQ0NA==", "bodyText": "\ud83d\udc4d included in followup PR.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/585#discussion_r389298444", "createdAt": "2020-03-07T17:37:53Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/RecordStreamFileListener.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.hedera.mirror.importer.parser;\n+\n+import java.util.Optional;\n+\n+import com.hedera.mirror.importer.domain.RecordFile;\n+import com.hedera.mirror.importer.exception.ImporterException;\n+import com.hedera.mirror.importer.parser.domain.StreamFileData;\n+\n+public interface RecordStreamFileListener extends StreamFileListener<RecordFile> {\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNjMzOQ=="}, "originalCommit": {"oid": "44baf34f4535439c52d2787105db64476b3bce20"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1209, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}