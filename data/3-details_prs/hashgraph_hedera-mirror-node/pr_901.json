{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1Mzk2MDg4", "number": 901, "title": "Recover from account balance files with different timestamps", "bodyText": "Detailed description:\n\nAdd hedera.mirror.importer.downloader.(balance|event|record).closeInterval for use in calculating expected buckets\nMove stream close metric to parent so it can be used later with events\nChange signature verification to group files into time buckets then group by filename within that bucket and ensure at least one file in bucket reaches 1/3 consensus\n\nWhich issue(s) this PR fixes:\nFixes #804\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-07-22T22:58:46Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901", "merged": true, "mergeCommit": {"oid": "11d37e83a6f463257f44c26c96021ad24a761720"}, "closed": true, "closedAt": "2020-07-23T20:52:49Z", "author": {"login": "steven-sheehy"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3i_1mgH2gAyNDU1Mzk2MDg4OjI5MDkyMDgzNmNjN2JhYzUwN2U3MmViMTQzNTM2NzEzZDEzOTQ3YmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc31LxygFqTQ1NDQ1OTI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "290920836cc7bac507e72eb143536713d13947bd", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/290920836cc7bac507e72eb143536713d13947bd", "committedDate": "2020-07-22T22:58:25Z", "message": "Recover from account balance files with different timestamps\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTU1Mjcz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#pullrequestreview-454155273", "createdAt": "2020-07-23T13:54:15Z", "commit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1NDoxNlrOG2LnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowOTozN1rOG2MVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYwMQ==", "bodyText": "nit: the log warning doesn't say why you are ignoring. You should add a reason for easy troubleshooting", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459466601", "createdAt": "2020-07-23T13:54:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {\n+                                    sigFilesMap.put(currentTimestamp, fileStreamSignature);\n+                                } else {\n+                                    double interval = (double) (currentTimestamp - lastValidTimestamp);\n+                                    long bucket = Math.round(interval / closeInterval);\n+                                    long groupTimestamp = lastValidTimestamp + bucket * closeInterval +\n+                                            closeInterval / 2;\n+\n+                                    if (bucket > 0) {\n+                                        sigFilesMap.put(groupTimestamp, fileStreamSignature);\n+                                    } else {\n+                                        log.warn(\"Ignoring signature file {} from node {} associated with the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDY2NQ==", "bodyText": "I think you should pull this section into its own method with some comments on the method for clarity.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459470665", "createdAt": "2020-07-23T13:59:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -211,18 +215,36 @@ protected void downloadNextBatch() {\n                      * of downloaded signature files.\n                      */\n                     AtomicLong count = new AtomicLong();\n-                    pendingDownloads.forEach((pd) -> {\n+                    pendingDownloads.forEach(pendingDownload -> {\n                         try {\n-                            if (pd.waitForCompletion()) {\n+                            if (pendingDownload.waitForCompletion()) {\n                                 count.incrementAndGet();\n-                                File sigFile = pd.getFile();\n+                                File sigFile = pendingDownload.getFile();\n                                 FileStreamSignature fileStreamSignature = new FileStreamSignature();\n                                 fileStreamSignature.setFile(sigFile);\n                                 fileStreamSignature.setNode(nodeAccountId);\n-                                sigFilesMap.put(sigFile.getName(), fileStreamSignature);\n+                                long currentTimestamp = Utility.getTimestampFromFilename(sigFile.getName());\n+\n+                                // Initial file has no previous so we can't calculate offset from that\n+                                if (lastValidTimestamp <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTc5MA==", "bodyText": "method name seems to be general and therefore not concerned  with file type (balance/record/event), but removeEnd() applied to only Balances.\nYou should either rename the function to highlight Balance or make it work for all 3 types for shared use.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459475790", "createdAt": "2020-07-23T14:06:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/util/Utility.java", "diffHunk": "@@ -401,6 +403,17 @@ public static File getResource(String path) {\n         }\n     }\n \n+    public static final long getTimestampFromFilename(String filename) {\n+        if (StringUtils.isBlank(filename)) {\n+            return 0L;\n+        }\n+\n+        String nameWithoutExtension = FilenameUtils.removeExtension(filename);\n+        String date = StringUtils.removeEnd(nameWithoutExtension, StreamType.BALANCE.getSuffix()).replace('_', ':');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODM0OA==", "bodyText": "nit: quite the involved setup on files. A few comments might make it easier to read and therefore easier to maintain", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#discussion_r459478348", "createdAt": "2020-07-23T14:09:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -299,15 +302,64 @@ void overwriteOnDownload() throws Exception {\n \n         reset(applicationStatusRepository);\n         // Corrupt the downloaded signatures to test that they get overwritten by good ones on re-download.\n-        Files.walk(downloaderProperties.getSignaturesPath()).filter(this::isSigFile)\n+        Files.walk(downloaderProperties.getSignaturesPath())\n+                .filter(this::isSigFile)\n                 .forEach(AbstractDownloaderTest::corruptFile);\n-        // fileName1 will be used to calculate marker for list request. mockS3 also returns back the marker in the\n-        // results. This is unlike AWS S3 which does not return back the marker.\n-        doReturn(file1).when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n+        doReturn(\"\").when(applicationStatusRepository).findByStatusCode(downloader.getLastValidDownloadedFileKey());\n         downloader.download();\n         verifyForSuccess();\n     }\n \n+    @Test\n+    @DisplayName(\"Different filenames, same interval\")\n+    void differentFilenamesSameInterval() throws Exception {\n+        differentFilenames(Duration.ofNanos(1L));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, lower bound\")\n+    void differentFilenamesSameIntervalLower() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated());\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, same interval, upper bound\")\n+    void differentFilenamesSameIntervalUpper() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).minusNanos(1));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, previous interval\")\n+    void differentFilenamesPreviousInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L).negated().minusNanos(2));\n+    }\n+\n+    @Test\n+    @DisplayName(\"Different filenames, next interval\")\n+    void differentFilenamesNextInterval() throws Exception {\n+        differentFilenames(downloaderProperties.getCloseInterval().dividedBy(2L));\n+    }\n+\n+    private void differentFilenames(Duration offset) throws Exception {\n+        fileCopier.filterFiles(file2 + \"*\").copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "290920836cc7bac507e72eb143536713d13947bd"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f65cd2a990da035ed58ecb0f11bad4ddc439d215", "author": {"user": {"login": "steven-sheehy", "name": "Steven Sheehy"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f65cd2a990da035ed58ecb0f11bad4ddc439d215", "committedDate": "2020-07-23T17:55:16Z", "message": "Address review feedback\n\nSigned-off-by: Steven Sheehy <steven.sheehy@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDUyODYx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#pullrequestreview-454452861", "createdAt": "2020-07-23T19:59:51Z", "commit": {"oid": "f65cd2a990da035ed58ecb0f11bad4ddc439d215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDU5Mjkw", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/901#pullrequestreview-454459290", "createdAt": "2020-07-23T20:09:45Z", "commit": {"oid": "f65cd2a990da035ed58ecb0f11bad4ddc439d215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}