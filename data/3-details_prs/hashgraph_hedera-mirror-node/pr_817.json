{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTIzODMz", "number": 817, "title": "Remove foreign keys on entity id", "bodyText": "Detailed description:\n\nReplace foreign keys columns - cud entity, payer account, node account - with encoded entity ids\nUse encoded ids in REST to remove joins with t_entities table\nMigration testing: Migrating db with ~2.93m transactions took ~20sec. Extrapolating, mainnet with ~150m txns should take less than 30min\n\nMigration is done by creating new transactions table. Index idx_t_transactions_node_account is not created for the new table (#548)\n\n\nChange DataGenerator to use EntityId rather than just a long for entity num\nRemove dead functions from EntityRepository\nNow auto renew accounts and proxy accounts are inserted in batch (with other PreparedStatements) rather than synchronously during transaction processing\nThere is one remaining entity lookup, will fix that later. It won't affect performance of crypto transfer heavy workloads\n\nPerf testing:\nImporter:\n- Setup\nDb preloaded with 2.93 million transactions\nWorkload: ~700k txns (20k tps, 7 files)\n- Stats\nMigration time: 20s\nTPS:\n2020-06-09 05:02:54,076 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 100034 transactions from record file ./data/recordstreams/valid/2020-02-09T20_00_00.004108Z.rcd in 16888ms (5923/s)\n2020-06-09 05:03:06,175 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 99995 transactions from record file ./data/recordstreams/valid/2020-02-09T20_01_40.009724Z.rcd in 12061ms (8290/s)\n2020-06-09 05:03:18,396 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 99997 transactions from record file ./data/recordstreams/valid/2020-02-09T20_03_20.004973Z.rcd in 12209ms (8190/s)\n2020-06-09 05:03:30,431 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 100028 transactions from record file ./data/recordstreams/valid/2020-02-09T20_05_00.011814Z.rcd in 12023ms (8319/s)\n2020-06-09 05:03:42,546 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 100004 transactions from record file ./data/recordstreams/valid/2020-02-09T20_06_40.019463Z.rcd in 12104ms (8262/s)\n2020-06-09 05:04:00,857 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 99998 transactions from record file ./data/recordstreams/valid/2020-02-09T20_08_20.006814Z.rcd in 18300ms (5464/s)\n2020-06-09 05:04:24,795 INFO  [scheduling-4] c.h.m.i.p.r.RecordFileParser Finished parsing 100008 transactions from record file ./data/recordstreams/valid/2020-02-09T20_10_00.001180Z.rcd in 23927ms (4179/s)\n\nWhich issue(s) this PR fixes:\nFixes #570\nPartly addresses #548\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-06-09T04:12:16Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817", "merged": true, "mergeCommit": {"oid": "620cc9a4b7138158c6739930a6439303f156257b"}, "closed": true, "closedAt": "2020-06-11T18:32:41Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpdIWugBqjM0MjI5MzY2OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqRJlCgFqTQyOTEwMTE4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea6d2f058d55917da259a457d64785923ecece7b", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ea6d2f058d55917da259a457d64785923ecece7b", "committedDate": "2020-06-08T20:44:30Z", "message": "Denormalize entities"}, "afterCommit": {"oid": "ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778", "committedDate": "2020-06-09T04:13:10Z", "message": "Denormalize entities\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2Nzc5Nzcx", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-426779771", "createdAt": "2020-06-09T04:26:49Z", "commit": {"oid": "ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoyNjo0OVrOGg4UKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoyNjo0OVrOGg4UKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMDI4MA==", "bodyText": "weird git diffing.\nanyways, hope is that gradually rest code will adopt this abstraction.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r437130280", "createdAt": "2020-06-09T04:26:49Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/entityId.js", "diffHunk": "@@ -19,13 +17,19 @@\n  * limitations under the License.\n  * \u200d\n  */\n+'use strict';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8e5648a0bdccedb744fb7d3f4dadf5b6a11778"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74bf388ff658b574abe93b50e3d9f8903dbb004f", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/74bf388ff658b574abe93b50e3d9f8903dbb004f", "committedDate": "2020-06-09T20:18:48Z", "message": "Denormalize entities\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80302393cfeef138172b427684409af01da36012", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/80302393cfeef138172b427684409af01da36012", "committedDate": "2020-06-09T20:18:49Z", "message": "cleanups\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfd2437dd5efea39d6b3783e9920fffb0310405", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ccfd2437dd5efea39d6b3783e9920fffb0310405", "committedDate": "2020-06-09T20:18:49Z", "message": "optimize migration\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "committedDate": "2020-06-09T20:18:49Z", "message": "add getProxyAccount and getAutoRenewAccount to TransactionHandler\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e63bd196d5352dbb094710c07e194f9ed22b8844", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e63bd196d5352dbb094710c07e194f9ed22b8844", "committedDate": "2020-06-09T04:50:05Z", "message": "optimize migration\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}, "afterCommit": {"oid": "9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9a5ed4c3b2f9f75abde9b4be75d173fc996b8352", "committedDate": "2020-06-09T20:18:49Z", "message": "add getProxyAccount and getAutoRenewAccount to TransactionHandler\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "723e4bbdb76d487b297ca211dd632e40299bdd8c", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/723e4bbdb76d487b297ca211dd632e40299bdd8c", "committedDate": "2020-06-09T23:37:50Z", "message": "migrate txns using new table\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbb66883051700641a011ac8ce4b293803b8ec5b", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/dbb66883051700641a011ac8ce4b293803b8ec5b", "committedDate": "2020-06-10T02:18:40Z", "message": "Use encoded ids in js to remove unnecessary joins."}, "afterCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "committedDate": "2020-06-10T02:56:21Z", "message": "Use encoded ids in js to remove unnecessary joins."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Mzg0ODU3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-428384857", "createdAt": "2020-06-10T20:00:33Z", "commit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowMDozNFrOGiEUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTo1MTo0NlrOGiHjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NTQ4Nw==", "bodyText": "We should later convert this id to EntityId", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438375487", "createdAt": "2020-06-10T20:00:34Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Entities.java", "diffHunk": "@@ -38,9 +36,7 @@\n @Table(name = \"t_entities\")\n @ToString(exclude = {\"key\", \"submitKey\"})\n public class Entities {\n-\n     @Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTU2NQ==", "bodyText": "We should be using JPA Attribute Converters to automatically do the conversion for these two fields.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438401565", "createdAt": "2020-06-10T20:52:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Entities.java", "diffHunk": "@@ -85,6 +80,14 @@ public void setKey(byte[] key) {\n     }\n \n     public EntityId toEntityId() {\n-        return new EntityId(id, entityShard, entityRealm, entityNum, entityTypeId);\n+        return new EntityId(entityShard, entityRealm, entityNum, entityTypeId);\n+    }\n+\n+    public void setAutoRenewAccount(EntityId autoRenewAccount) {\n+        autoRenewAccountId = autoRenewAccount.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMjA5Mg==", "bodyText": "Same comment. Use JPA Attribute Converter", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438402092", "createdAt": "2020-06-10T20:53:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/Transaction.java", "diffHunk": "@@ -73,9 +66,16 @@\n \n     private byte[] transactionBytes;\n \n-    // Helper to avoid having to update a 100 places in tests\n-    public Long getEntityId() {\n-        return entity != null ? entity.getId() : null;\n+    public void setEntity(EntityId entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMzQ3OQ==", "bodyText": "There's probably a ton of duplicate entities inserted as a result of this change especially for node and treasury IDs that might slow things down a bit. Would definitely be better to batch this in a list or use JPA/transactions to batch.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438413479", "createdAt": "2020-06-10T21:17:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/sql/SqlEntityListener.java", "diffHunk": "@@ -217,6 +225,20 @@ public void onTransaction(Transaction transaction) throws ImporterException {\n         }\n     }\n \n+    @Override\n+    public void onEntityId(EntityId entityId) throws ImporterException {\n+        try {\n+            sqlInsertEntityId.setLong(F_ENTITY_ID.ID.ordinal(), entityId.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNDYyMg==", "bodyText": "Since you'll have to pass this entity to EntityListener soon anyway, this suggests that EntityListener.onEntityId(EntityId) should really be EntityListener.onEntity(Entities) to be reusable by both.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438414622", "createdAt": "2020-06-10T21:19:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -323,30 +336,27 @@ private void insertContractResults(\n     }\n \n     /**\n+     * @param entityId entity to be updated. Should not be null.\n      * @return entity associated with the transaction. Entity is guaranteed to be persisted in repo.\n      */\n-    private Entities getEntity(\n-            RecordItem recordItem, TransactionHandler transactionHandler, EntityId entityId, boolean isSuccessful) {\n-        // Irrespective of transaction failure/success, if entityId is not null, it will be inserted into repo since:\n-        //   (1) it is guaranteed to be valid entity on network (validated to exist in pre-consensus checks)\n-        //   (2) fk_cud_entity_id is foreign key in t_transactions\n-        //\n-        // Additionally, if transaction is successful:\n-        // - Fields of 'entity' will be updated.\n-        // - proxyAccountId/autoRenewAccountId: If present, the account's id are looked up (from big cache) or created\n-        //   immediately in TransactionHandler.updateEntity(..).\n-        if (transactionHandler.updatesEntity() && isSuccessful && entityId != null) {\n-            Entities entity = entityRepository.findByPrimaryKey(\n-                    entityId.getShardNum(), entityId.getRealmNum(), entityId.getEntityNum())\n-                    .orElseGet(entityId::toEntity);\n-            transactionHandler.updateEntity(entity, recordItem);\n-            return entityRepository.save(entity);\n-        } else if (entityId != null) {\n-            Entities entity = entityId.toEntity();\n-            entity.setId(entityRepository.lookupOrCreateId(entityId)); // look up in big cache\n-            return entity;\n+    private void updateEntity(\n+            RecordItem recordItem, TransactionHandler transactionHandler, EntityId entityId) {\n+        // TODO: remove lookup and batch this update with rest of the db operations. Options: upsert.\n+        Entities entity = entityRepository.findById(entityId.getId())\n+                .orElseGet(entityId::toEntity);\n+        transactionHandler.updateEntity(entity, recordItem);\n+        EntityId autoRenewAccount = transactionHandler.getAutoRenewAccount(recordItem);\n+        if (autoRenewAccount != null) {\n+            entityListener.onEntityId(autoRenewAccount);\n+            entity.setAutoRenewAccount(autoRenewAccount);\n+        }\n+        // Stream contains transactions with proxyAccountID explicitly set to '0.0.0'. However it's not a valid entity,\n+        // so no need to persist it to repo.\n+        EntityId proxyAccount = transactionHandler.getProxyAccount(recordItem);\n+        if (proxyAccount != null) {\n+            entityListener.onEntityId(proxyAccount);\n+            entity.setProxyAccount(proxyAccount);\n         }\n-        // else leave tx.entity null\n-        return null;\n+        entityRepository.save(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTY4MA==", "bodyText": "This doesn't match EntityIdEncoder which has 15 bits for shard.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438415680", "createdAt": "2020-06-10T21:22:17Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -0,0 +1,105 @@\n+create domain entity_id as bigint;\n+\n+create function encodeEntityId(shard bigint, realm bigint, num bigint)\n+returns entity_id as $$\n+begin\n+    -- Encoding: 16 bits for shard, followed by 16 bits for realm, followed by 32 bits for num\n+    return (num & 4294967295) | ((realm & 65535) << 32) | ((shard & 65535) << 48);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyNDczNQ==", "bodyText": "You don't need the @Query anymore as it overrides the parent method and just adds caching.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438424735", "createdAt": "2020-06-10T21:42:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/EntityRepository.java", "diffHunk": "@@ -29,27 +29,15 @@\n \n import com.hedera.mirror.importer.config.CacheConfiguration;\n import com.hedera.mirror.importer.domain.Entities;\n-import com.hedera.mirror.importer.domain.EntityId;\n \n @CacheConfig(cacheNames = \"entities\", cacheManager = CacheConfiguration.EXPIRE_AFTER_30M)\n-public interface EntityRepository extends PagingAndSortingRepository<Entities, Long>, EntityRepositoryCustom {\n+public interface EntityRepository extends PagingAndSortingRepository<Entities, Long> {\n \n-    @Cacheable(key = \"{#p0, #p1, #p2}\", sync = true)\n-    @Query(\"from Entities where entityShard = ?1 and entityRealm = ?2 and entityNum = ?3\")\n-    Optional<Entities> findByPrimaryKey(long entityShard, long entityRealm, long entityNum);\n+    @Cacheable(key = \"{#p0}\", sync = true)\n+    @Query(\"from Entities where id = ?1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyODYxMQ==", "bodyText": "Looks like leftover debug logs", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438428611", "createdAt": "2020-06-10T21:51:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-rest/accounts.js", "diffHunk": "@@ -41,36 +41,30 @@ const processRow = function (row) {\n   accRecord.auto_renew_period = row.auto_renew_period === null ? null : Number(row.auto_renew_period);\n   accRecord.key = row.key === null ? null : utils.encodeKey(row.key);\n   accRecord.deleted = row.deleted;\n+  logger.info(typeof row.id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7447370d46ef75db96d5fcc53c7415f797eed7", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/7b7447370d46ef75db96d5fcc53c7415f797eed7", "committedDate": "2020-06-10T23:51:14Z", "message": "Use encoded ids in js to remove unnecessary joins.\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bfc0331a0f7290e655491348b294021b545f17", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c5bfc0331a0f7290e655491348b294021b545f17", "committedDate": "2020-06-10T23:51:17Z", "message": "add decode fn for entity id\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/487486fe734991bf4d049a9be6eb019186e9f5f3", "committedDate": "2020-06-10T23:51:17Z", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/6ca7b7dffcfa798b506bb5f4009cfe2e1f5ea475", "committedDate": "2020-06-10T02:56:21Z", "message": "Use encoded ids in js to remove unnecessary joins."}, "afterCommit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/487486fe734991bf4d049a9be6eb019186e9f5f3", "committedDate": "2020-06-10T23:51:17Z", "message": "address review comments\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTA1NDEz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-428505413", "createdAt": "2020-06-10T23:58:14Z", "commit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1ODoxNVrOGiKFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzo1ODoxNVrOGiKFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MDA1OQ==", "bodyText": "We should probably drop this function at the end unless you have other plans for it", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438470059", "createdAt": "2020-06-10T23:58:15Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -0,0 +1,105 @@\n+create domain entity_id as bigint;\n+\n+create function encodeEntityId(shard bigint, realm bigint, num bigint)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTI2NDky", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-428526492", "createdAt": "2020-06-11T01:07:46Z", "commit": {"oid": "c5bfc0331a0f7290e655491348b294021b545f17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTowNzo0NlrOGiLMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTowNzo0NlrOGiLMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4ODE0Nw==", "bodyText": "comment is still wrong", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438488147", "createdAt": "2020-06-11T01:07:46Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -4,7 +4,7 @@ create function encodeEntityId(shard bigint, realm bigint, num bigint)\n returns entity_id as $$\n begin\n     -- Encoding: 16 bits for shard, followed by 16 bits for realm, followed by 32 bits for num", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bfc0331a0f7290e655491348b294021b545f17"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTM5OTUz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-428539953", "createdAt": "2020-06-11T01:51:50Z", "commit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDg1ODQz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-429085843", "createdAt": "2020-06-11T16:29:34Z", "commit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyOTozNFrOGilY6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0Mzo0NlrOGil5cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNzM1NQ==", "bodyText": "I think you meant 15 bits for shard", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438917355", "createdAt": "2020-06-11T16:29:34Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -4,7 +4,7 @@ create function encodeEntityId(shard bigint, realm bigint, num bigint)\n returns entity_id as $$\n begin\n     -- Encoding: 16 bits for shard, followed by 16 bits for realm, followed by 32 bits for num", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ4ODE0Nw=="}, "originalCommit": {"oid": "c5bfc0331a0f7290e655491348b294021b545f17"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxOTU0Ng==", "bodyText": "Nit you should put in a comment the relevance of the above numbers for context", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438919546", "createdAt": "2020-06-11T16:33:15Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -0,0 +1,105 @@\n+create domain entity_id as bigint;\n+\n+create function encodeEntityId(shard bigint, realm bigint, num bigint)\n+returns entity_id as $$\n+begin\n+    -- Encoding: 16 bits for shard, followed by 16 bits for realm, followed by 32 bits for num\n+    return (num & 4294967295) | ((realm & 65535) << 32) | ((shard & 32767) << 48);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMjc0OQ==", "bodyText": "nit: I'd say  remove the 'if exists' from the renaming. That way you have the failsafe of failing migration if for some reason there are issues with the t_transactions_new table", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438922749", "createdAt": "2020-06-11T16:38:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -0,0 +1,105 @@\n+create domain entity_id as bigint;\n+\n+create function encodeEntityId(shard bigint, realm bigint, num bigint)\n+returns entity_id as $$\n+begin\n+    -- Encoding: 16 bits for shard, followed by 16 bits for realm, followed by 32 bits for num\n+    return (num & 4294967295) | ((realm & 65535) << 32) | ((shard & 32767) << 48);\n+end\n+$$ language plpgsql;\n+\n+-------------------\n+-- t_entities table\n+-------------------\n+\n+alter table if exists t_entities\n+    add column if not exists encoded_id entity_id null,\n+    add column if not exists proxy_account_id entity_id null;\n+\n+-- Compute encoded ids once. Simple udpate is okay since entities table is very small.\n+update t_entities e\n+set encoded_id = encodeEntityId(entity_shard, entity_realm, entity_num);\n+\n+alter table if exists t_entities\n+    alter column encoded_id set not null;\n+\n+-- Migrate auto renew accounts and proxy accounts\n+update t_entities e\n+set auto_renew_account_id = e2.encoded_id\n+from t_entities e2\n+where e.auto_renew_account_id = e2.id\n+  and e.auto_renew_account_id is not null;\n+\n+update t_entities e\n+set proxy_account_id = e2.encoded_id\n+from t_entities e2\n+where e.fk_prox_acc_id = e2.id\n+  and e.fk_prox_acc_id is not null;\n+\n+-------------------\n+-- t_transactions table\n+-------------------\n+\n+create table if not exists t_transactions_new (\n+  consensus_ns bigint not null,\n+  type smallint not null,\n+  result smallint not null,\n+  payer_account_id entity_id not null ,\n+  valid_start_ns bigint not null,\n+  valid_duration_seconds bigint,\n+  node_account_id entity_id not null,\n+  entity_id entity_id null,\n+  initial_balance bigint default 0,\n+  max_fee hbar_tinybars,\n+  charged_tx_fee bigint,\n+  memo bytea,\n+  transaction_hash bytea,\n+  transaction_bytes bytea\n+);\n+\n+-- Migrate data\n+\n+insert into t_transactions_new\n+    (consensus_ns, type, result, payer_account_id, valid_start_ns, valid_duration_seconds, node_account_id, entity_id,\n+     initial_balance, max_fee, charged_tx_fee, memo, transaction_hash, transaction_bytes)\n+select\n+    consensus_ns, type, result, payer.encoded_id, valid_start_ns, valid_duration_seconds, node.encoded_id,\n+     e.encoded_id, initial_balance, max_fee, charged_tx_fee, t_transactions.memo, transaction_hash, transaction_bytes\n+from t_transactions\n+join t_entities node on t_transactions.fk_node_acc_id = node.id\n+join t_entities payer on t_transactions.fk_payer_acc_id = payer.id\n+left join t_entities e on t_transactions.fk_cud_entity_id = e.id;\n+\n+-- Move table and recreate indexes\n+\n+drop index if exists idx_t_transactions_node_account; -- drop explicitly for history since it is not re-created\n+drop table if exists t_transactions;\n+alter table if exists t_transactions_new rename to t_transactions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTY4Mw==", "bodyText": "q: Do we have protection from negative shard, realm and num values?\nI think we do since contents are from record file but if not you should add coverage for negative longs so we at least capture the expected behaviour in case of bugs", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#discussion_r438925683", "createdAt": "2020-06-11T16:43:46Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/util/EntityIdEndecTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.hedera.mirror.importer.util;\n+\n+import static com.hedera.mirror.importer.domain.EntityTypeEnum.ACCOUNT;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.NUM_BITS;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.REALM_BITS;\n+import static com.hedera.mirror.importer.util.EntityIdEndec.SHARD_BITS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+class EntityIdEndecTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTAxMTgy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/817#pullrequestreview-429101182", "createdAt": "2020-06-11T16:49:45Z", "commit": {"oid": "487486fe734991bf4d049a9be6eb019186e9f5f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3184, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}