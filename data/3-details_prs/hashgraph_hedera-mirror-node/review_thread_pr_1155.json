{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDAyNzYw", "number": 1155, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1MzoyMlrOEwgVgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1NDoxNVrOEwgXLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk2ODk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/domain/services/encoding/entityid_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1MzoyM1rOHmHmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1MzoyM1rOHmHmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMjUwOQ==", "bodyText": "should use testify/assert as the other test files", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1155#discussion_r509732509", "createdAt": "2020-10-21T21:53:23Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/domain/services/encoding/entityid_test.go", "diffHunk": "@@ -22,6 +22,7 @@ package entityid\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb3e2aa3586d91ef2cf8e29e540aa3da1bafaf6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk3MzI1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rosetta/app/domain/services/encoding/entityid_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1NDoxNVrOHmHpiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo1NDoxNVrOHmHpiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMzI1Ng==", "bodyText": "need to assert error is nil", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1155#discussion_r509733256", "createdAt": "2020-10-21T21:54:15Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/domain/services/encoding/entityid_test.go", "diffHunk": "@@ -64,6 +65,55 @@ func TestEntityIdEncodeThrows(t *testing.T) {\n \t}\n }\n \n+func TestEntityIdFromString(t *testing.T) {\n+\tvar testData = []struct {\n+\t\texpected *EntityId\n+\t\tentity   string\n+\t}{\n+\t\t{&EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 0,\n+\t\t}, \"0.0.0\"},\n+\t\t{&EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 10,\n+\t\t}, \"0.0.10\"},\n+\t\t{&EntityId{\n+\t\t\tShardNum:  0,\n+\t\t\tRealmNum:  0,\n+\t\t\tEntityNum: 4294967295,\n+\t\t}, \"0.0.4294967295\"},\n+\t}\n+\n+\tfor _, tt := range testData {\n+\t\tres, _ := FromString(tt.entity)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb3e2aa3586d91ef2cf8e29e540aa3da1bafaf6"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1572, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}