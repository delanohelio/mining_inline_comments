{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDExNzg3", "number": 1134, "title": "HTS e2e Performance Tests", "bodyText": "Signed-off-by: Ian Jungmann ian.jungmann@hedera.com\nDetailed description:\n\nAdd performance test Token_Transfer_Publish_And_Retrieve.jmx, which will publish and immediately retrieve (via Mirror Node REST call) batches of token transfer transactions to ensure e2e functionality and show performance metrics.\nAdd performance test Token_Transfer_Publish_Batch_Validate_Batch.jmx, which will publish token transfer transactions to test publishing performance, and then retrieve each transaction (via Mirror Node REST call) to ensure all messages were processed and received by the mirror node.\n\nWhich issue(s) this PR fixes:\nFixes #1108\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-10-15T22:02:31Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134", "merged": true, "mergeCommit": {"oid": "de06b1cb9adcf770411ac7f55c7d75326b4c5520"}, "closed": true, "closedAt": "2020-10-21T03:24:24Z", "author": {"login": "ijungmann"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS5I1xgH2gAyNTA0NDExNzg3OjkwOGIzYjdiZjUyMmUxNDJjZjJmYmY3Y2EzOWQ2YzQ0NjNlMmFjMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUgo3RgFqTUxMzE4NTE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "908b3b7bf522e142cf2fbf7ca39d6c4463e2ac24", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/908b3b7bf522e142cf2fbf7ca39d6c4463e2ac24", "committedDate": "2020-10-15T22:02:07Z", "message": "Add performance test for token transfer publish only\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2246d71276472e6ee3f8beac3dd2a52a7618719f", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2246d71276472e6ee3f8beac3dd2a52a7618719f", "committedDate": "2020-10-17T00:01:18Z", "message": "Add initial REST query part of HTS Performance test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b851c07d741bd3b344ec5c32fcef60eb3e3cbc4", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/9b851c07d741bd3b344ec5c32fcef60eb3e3cbc4", "committedDate": "2020-10-18T23:47:30Z", "message": "Add new performance test for HTS e2e and adjust existing test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d49aaaf3d0f853ca09aaed09c203260d4c85724", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/4d49aaaf3d0f853ca09aaed09c203260d4c85724", "committedDate": "2020-10-19T05:24:23Z", "message": "Refactor Token Transfer Publish and Retrieve test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27d09fabbe24978dac75b31b985af0bb67a4439", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c27d09fabbe24978dac75b31b985af0bb67a4439", "committedDate": "2020-10-19T06:57:37Z", "message": "Refactor HTS Batch Publish Batch Retrieve test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57", "committedDate": "2020-10-19T07:02:20Z", "message": "Merge branch 'master' into hts_performance_tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTg4NDk2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#pullrequestreview-511988496", "createdAt": "2020-10-19T17:22:21Z", "commit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyMjoyMVrOHkZK2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzo1OTo0M1rOHkbJOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMzE2Mw==", "bodyText": "Missing license info", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507923163", "createdAt": "2020-10-19T17:22:21Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishAndRetrieveClient.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyODMyNA==", "bodyText": "Update comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // read in nodes list, topic id, number of messages, message size\n          \n          \n            \n                    // read in nodes list, token id, number of transfers", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507928324", "createdAt": "2020-10-19T17:30:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransfersPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TokenTransferPublishClient extends AbstractJavaSamplerClient {\n+    public static final String TRANSACTION_IDS_PROPERTY = \"transactionIds\";\n+    private PropertiesHandler propHandler;\n+    private List<SDKClientHandler> clientList;\n+    private TokenId tokenId;\n+    private int messagesPerBatchCount;\n+    private AccountId operatorId;\n+    private Ed25519PrivateKey operatorPrivateKey;\n+    private AccountId recipientId;\n+    private long transferAmount;\n+    private long publishTimeout;\n+    private long publishInterval;\n+    private boolean verifyTransactions;\n+    private long printStatusInterval;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTA0Nw==", "bodyText": "Potential other name\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int messagesPerBatchCount;\n          \n          \n            \n                private int transfersPerBatchCount;", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507929047", "createdAt": "2020-10-19T17:31:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferPublishClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.crypto.ed25519.Ed25519PrivateKey;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransfersPublishSampler;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+public class TokenTransferPublishClient extends AbstractJavaSamplerClient {\n+    public static final String TRANSACTION_IDS_PROPERTY = \"transactionIds\";\n+    private PropertiesHandler propHandler;\n+    private List<SDKClientHandler> clientList;\n+    private TokenId tokenId;\n+    private int messagesPerBatchCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMjIwNg==", "bodyText": "Update comment", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507932206", "createdAt": "2020-10-19T17:36:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransferRESTBatchSampler;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchClient extends AbstractJavaSamplerClient {\n+    private PropertiesHandler propHandler;\n+    private List<String> formattedTransactionIds;\n+    private String restBaseUrl;\n+    private int expectedTransactionCount;\n+    private int restMaxRetry;\n+    private int restRetryBackoffMs;\n+    private int batchRestTimeoutSeconds;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        restBaseUrl = propHandler.getTestParam(\"restBaseUrl\", \"localhost:5551\");\n+        expectedTransactionCount = propHandler.getIntTestParam(\"expectedTransactionCount\", 0);\n+        restMaxRetry = propHandler.getIntTestParam(\"restMaxRetry\", 1000);\n+        restRetryBackoffMs = propHandler.getIntTestParam(\"restRetryBackoffMs\", 50);\n+        batchRestTimeoutSeconds = propHandler.getIntTestParam(\"batchRestTimeoutSeconds\", 10);\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNDU0MQ==", "bodyText": "TransactionId contains the accountId and validStart, you could use those to create the desired String transactionId format\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return transactionId;\n          \n          \n            \n                    return transactionId.accountId.toString() + \"-\" + transactionId.validStart\n          \n          \n            \n                            .getEpochSecond() + \"-\" + transactionId.validStart.getNano();", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507934541", "createdAt": "2020-10-19T17:39:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java", "diffHunk": "@@ -120,6 +123,18 @@ public TransactionId submitCryptoTransfer(AccountId operatorId, AccountId recipi\n         return transactionId;\n     }\n \n+    public TransactionId submitTokenTransfer(TokenId tokenId, AccountId operatorId, AccountId recipientId,\n+                                             long transferAmount) throws HederaStatusException {\n+        TransactionId transactionId = new TokenTransferTransaction()\n+                .addSender(tokenId, operatorId, transferAmount)\n+                .addRecipient(tokenId, recipientId, transferAmount)\n+                .setMaxTransactionFee(1_000_000)\n+                .setTransactionMemo(\"Token Transfer_\" + Instant.now())\n+                .execute(client);\n+\n+        return transactionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNzQ5OQ==", "bodyText": "I made a suggestion in submitTokenTransfer\nAssuming it doesn't impact the submission performance that's one way.\nAnother way would be to do the same over here instead\nformattedTransactionIds.add(transactionId.accountId.toString() + \"-\" + transactionId.validStart\n                .getEpochSecond() + \"-\" + transactionId.validStart.getNano());", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507937499", "createdAt": "2020-10-19T17:41:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransferRESTBatchSampler;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchClient extends AbstractJavaSamplerClient {\n+    private PropertiesHandler propHandler;\n+    private List<String> formattedTransactionIds;\n+    private String restBaseUrl;\n+    private int expectedTransactionCount;\n+    private int restMaxRetry;\n+    private int restRetryBackoffMs;\n+    private int batchRestTimeoutSeconds;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        restBaseUrl = propHandler.getTestParam(\"restBaseUrl\", \"localhost:5551\");\n+        expectedTransactionCount = propHandler.getIntTestParam(\"expectedTransactionCount\", 0);\n+        restMaxRetry = propHandler.getIntTestParam(\"restMaxRetry\", 1000);\n+        restRetryBackoffMs = propHandler.getIntTestParam(\"restRetryBackoffMs\", 50);\n+        batchRestTimeoutSeconds = propHandler.getIntTestParam(\"batchRestTimeoutSeconds\", 10);\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        List<TransactionId> transactionIds = (List<TransactionId>) javaSamplerContext.getJMeterVariables()\n+                .getObject(TRANSACTION_IDS_PROPERTY);\n+        formattedTransactionIds = new ArrayList<>();\n+        for (TransactionId transactionId : transactionIds) {\n+            //TODO There has to be a better way to do this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzOTM3Mg==", "bodyText": "Or just make a method of it\npublic String getRESTCompliantTransactionIdString(TransactionId transactionId) {\n  return transactionId.accountId.toString() + \"-\" + transactionId.validStart\n                .getEpochSecond() + \"-\" + transactionId.validStart.getNano();\n}\n\nTake your pick of whichever works best for you", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507939372", "createdAt": "2020-10-19T17:43:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/hts/TokenTransferRESTBatchClient.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hedera.mirror.grpc.jmeter.client.hts;\n+\n+import static com.hedera.mirror.grpc.jmeter.client.hts.TokenTransferPublishClient.TRANSACTION_IDS_PROPERTY;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.jmeter.config.Arguments;\n+import org.apache.jmeter.protocol.java.sampler.AbstractJavaSamplerClient;\n+import org.apache.jmeter.protocol.java.sampler.JavaSamplerContext;\n+import org.apache.jmeter.samplers.SampleResult;\n+\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.PropertiesHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.hts.TokenTransferRESTBatchSampler;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchClient extends AbstractJavaSamplerClient {\n+    private PropertiesHandler propHandler;\n+    private List<String> formattedTransactionIds;\n+    private String restBaseUrl;\n+    private int expectedTransactionCount;\n+    private int restMaxRetry;\n+    private int restRetryBackoffMs;\n+    private int batchRestTimeoutSeconds;\n+\n+    @Override\n+    public void setupTest(JavaSamplerContext javaSamplerContext) {\n+        propHandler = new PropertiesHandler(javaSamplerContext);\n+\n+        // read in nodes list, topic id, number of messages, message size\n+        restBaseUrl = propHandler.getTestParam(\"restBaseUrl\", \"localhost:5551\");\n+        expectedTransactionCount = propHandler.getIntTestParam(\"expectedTransactionCount\", 0);\n+        restMaxRetry = propHandler.getIntTestParam(\"restMaxRetry\", 1000);\n+        restRetryBackoffMs = propHandler.getIntTestParam(\"restRetryBackoffMs\", 50);\n+        batchRestTimeoutSeconds = propHandler.getIntTestParam(\"batchRestTimeoutSeconds\", 10);\n+\n+        // node info expected in comma separated list of <node_IP>:<node_accountId>:<node_port>\n+        List<TransactionId> transactionIds = (List<TransactionId>) javaSamplerContext.getJMeterVariables()\n+                .getObject(TRANSACTION_IDS_PROPERTY);\n+        formattedTransactionIds = new ArrayList<>();\n+        for (TransactionId transactionId : transactionIds) {\n+            //TODO There has to be a better way to do this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzNzQ5OQ=="}, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzOTk4OA==", "bodyText": "remove\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        AtomicInteger counter = new AtomicInteger(0);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507939988", "createdAt": "2020-10-19T17:44:39Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/handler/SDKClientHandler.java", "diffHunk": "@@ -140,4 +155,27 @@ public int getValidTransactionsCount(List<TransactionId> transactionIds) {\n         log.debug(\"{} out of {} transactions returned a Success status\", counter.get(), transactionIds.size());\n         return counter.get();\n     }\n+\n+    public List<TransactionId> getValidTransactions(List<TransactionId> transactionIds) {\n+        log.debug(\"Verify Transactions {}\", transactionIds.size());\n+//        AtomicInteger counter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0MTA1NQ==", "bodyText": "This seems generic and could be applied to other existing and future entities.\nShould we rename it more generically?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507941055", "createdAt": "2020-10-19T17:46:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferGetRequest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.hedera.mirror.grpc.jmeter.props.hts;\n+\n+import java.util.List;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@Value\n+@Builder\n+public class TokenTransferGetRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0Mjc1OQ==", "bodyText": "You should have TokenTransferRequest inherit from the generic class noted above.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507942759", "createdAt": "2020-10-19T17:47:47Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/props/hts/TokenTransferRequest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.hedera.mirror.grpc.jmeter.props.hts;\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.hashgraph.sdk.account.AccountId;\n+import com.hedera.hashgraph.sdk.token.TokenId;\n+\n+@Data\n+@Builder\n+@Log4j2\n+public class TokenTransferRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk0OTY4MA==", "bodyText": "I used similar logic in my acceptance tests and Steven had noted better to use the  UriBuilder feature in WebClient.\nIf not too much overhead, could be applicable here also", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507949680", "createdAt": "2020-10-19T17:54:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransferRESTBatchSampler.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.log4j.Log4j2;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferGetRequest;\n+\n+@Log4j2\n+public class TokenTransferRESTBatchSampler {\n+    private final TokenTransferGetRequest tokenTransferGetRequest;\n+    private final WebClient webClient;\n+    private Stopwatch stopwatch;\n+    private static final String REST_PATH = \"/api/v1/transactions/\";\n+\n+    public TokenTransferRESTBatchSampler(TokenTransferGetRequest tokenTransferGetRequest) {\n+        this.tokenTransferGetRequest = tokenTransferGetRequest;\n+        webClient = WebClient.create(tokenTransferGetRequest.getRestBaseUrl());\n+    }\n+\n+    public int retrieveTransaction() {\n+        stopwatch = Stopwatch.createStarted();\n+        List<String> transactions = Flux.fromIterable(tokenTransferGetRequest.getTransactionIds())\n+                //TODO this may be overkill.\n+                .parallel()\n+                .runOn(Schedulers.parallel())\n+                .flatMap(transactionId -> getTransaction(transactionId).onErrorResume(ex -> {\n+                    log.info(\"Failed to retrieve transaction {}: {}\", transactionId, ex);\n+                    return Mono.empty();\n+                }))\n+                .sequential()\n+                .collectList()\n+                .block();\n+\n+        log.info(\"Retrieved {} transactions in {} ms\", transactions.size(), stopwatch.elapsed(TimeUnit.MILLISECONDS));\n+        return transactions.size();\n+    }\n+\n+    private Mono<String> getTransaction(String transactionId) {\n+        return webClient.get().uri(REST_PATH + transactionId).retrieve()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1MzM1NA==", "bodyText": "See method suggestion of TransactionId to compliant rest transaction Id noted earlier", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507953354", "createdAt": "2020-10-19T17:57:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+import org.json.JSONObject;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.hts.TokenTransferPublishAndRetrieveResult;\n+\n+@Log4j2\n+public class TokenTransfersPublishAndRetrieveSampler {\n+    private final TokenTransferRequest request;\n+    private final SDKClientHandler sdkClient;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+    private final WebClient webClient;\n+    private static final String REST_PATH = \"/api/v1/transactions/\";\n+\n+    public TokenTransfersPublishAndRetrieveSampler(TokenTransferRequest request,\n+                                                   SDKClientHandler sdkClient) {\n+        this.request = request;\n+        this.sdkClient = sdkClient;\n+        this.webClient = WebClient.create(request.getRestBaseUrl());\n+    }\n+\n+    @SneakyThrows\n+    public long submitTokenTransferTransactions() {\n+        TokenTransferPublishAndRetrieveResult result = new TokenTransferPublishAndRetrieveResult(sdkClient.getNodeInfo()\n+                .getNodeId());\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id\n+        log.trace(\"Submit transaction to {}, tokenTransferPublisher: {}\", sdkClient\n+                .getNodeInfo(), request);\n+\n+        for (int i = 0; i < request.getMessagesPerBatchCount(); i++) {\n+\n+            try {\n+                publishStopwatch = Stopwatch.createStarted();\n+                TransactionId transactionId = sdkClient\n+                        .submitTokenTransfer(request.getTokenId(), request.getOperatorId(), request\n+                                .getRecipientId(), request.getTransferAmount());\n+                publishTokenTransferLatencyStats.addValue(publishStopwatch.elapsed(TimeUnit.MILLISECONDS));\n+                String retrievedTransaction = getTransaction(convertTransactionId(transactionId.toString()));\n+                Instant received = Instant.now();\n+                //TODO Having trouble wrangling the result object into a POJO, this is a workaround.\n+                JSONObject obj = new JSONObject(retrievedTransaction).getJSONArray(\"transactions\")\n+                        .getJSONObject(0);\n+                //TODO Make sure the valid start time is equivalent of publish time for metrics\n+                result.onNext(obj.getString(\"consensus_timestamp\"),\n+                        obj.getString(\"valid_start_timestamp\"), received);\n+            } catch (HederaPrecheckStatusException preEx) {\n+                hederaResponseCodeEx.compute(preEx.status, (key, val) -> (val == null) ? 1 : val + 1);\n+            } catch (HederaNetworkException preEx) {\n+                networkFailures.incrementAndGet();\n+            } catch (Exception ex) {\n+                unknownFailures.incrementAndGet();\n+                log.error(\"Unexpected exception publishing message {} to {}: {}\", i,\n+                        sdkClient.getNodeInfo().getNodeId(), ex);\n+            }\n+        }\n+        printPublishStats();\n+        result.onComplete();\n+        return result.getTransactionCount();\n+    }\n+\n+    private void printPublishStats() {\n+        // Compute some statistics\n+        double min = publishTokenTransferLatencyStats.getMin();\n+        double max = publishTokenTransferLatencyStats.getMax();\n+        double mean = publishTokenTransferLatencyStats.getMean();\n+        double median = publishTokenTransferLatencyStats.getPercentile(50);\n+        double seventyFifthPercentile = publishTokenTransferLatencyStats.getPercentile(75);\n+        double ninetyFifthPercentile = publishTokenTransferLatencyStats.getPercentile(95);\n+\n+        log.info(\"Token Transfer publish node {}: stats, min: {} ms, max: {} ms, avg: {} ms, median: {} ms, 75th\" +\n+                        \" percentile: {} ms,\" +\n+                        \" 95th percentile: {} ms\", sdkClient.getNodeInfo().getNodeId(), String.format(\"%.03f\", min),\n+                String.format(\"%.03f\", max), String.format(\"%.03f\", mean), String.format(\"%.03f\", median),\n+                String.format(\"%.03f\", seventyFifthPercentile), String.format(\"%.03f\", ninetyFifthPercentile));\n+    }\n+\n+    //TODO Is there a better way of doing this?\n+    private String convertTransactionId(String transactionId) {\n+        int indexOfBadPeriod = transactionId.lastIndexOf(\".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NDM5Mw==", "bodyText": "Here and in other places comments still refer to topic instead of tokens", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507954393", "createdAt": "2020-10-19T17:58:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+@RequiredArgsConstructor\n+public class TokenTransfersPublishSampler {\n+    private final TokenTransferRequest tokenTransferRequest;\n+    private final SDKClientHandler sdkClient;\n+    private final boolean verifyTransactions;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+\n+    @SneakyThrows\n+    public List<TransactionId> submitTokenTransferTransactions() {\n+        TransactionSubmissionResult result = new TransactionSubmissionResult();\n+        Stopwatch totalStopwatch = Stopwatch.createStarted();\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NTUxMg==", "bodyText": "Should we consider moving this to a shared class, so all *PublishSampler classes can utilize it and other shared sampler logic?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r507955512", "createdAt": "2020-10-19T17:59:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishSampler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.TransactionSubmissionResult;\n+\n+@Log4j2\n+@RequiredArgsConstructor\n+public class TokenTransfersPublishSampler {\n+    private final TokenTransferRequest tokenTransferRequest;\n+    private final SDKClientHandler sdkClient;\n+    private final boolean verifyTransactions;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();\n+    private Stopwatch publishStopwatch;\n+\n+    @SneakyThrows\n+    public List<TransactionId> submitTokenTransferTransactions() {\n+        TransactionSubmissionResult result = new TransactionSubmissionResult();\n+        Stopwatch totalStopwatch = Stopwatch.createStarted();\n+        AtomicInteger networkFailures = new AtomicInteger();\n+        AtomicInteger unknownFailures = new AtomicInteger();\n+        Map<Status, Integer> hederaResponseCodeEx = new HashMap<>();\n+\n+        // publish MessagesPerBatchCount number of messages to the noted topic id\n+        log.trace(\"Submit transaction to {}, tokenTransferPublisher: {}\", sdkClient\n+                .getNodeInfo(), tokenTransferRequest);\n+\n+        for (int i = 0; i < tokenTransferRequest.getMessagesPerBatchCount(); i++) {\n+\n+            try {\n+                publishStopwatch = Stopwatch.createStarted();\n+                TransactionId transactionId = sdkClient\n+                        .submitTokenTransfer(tokenTransferRequest.getTokenId(), tokenTransferRequest\n+                                .getOperatorId(), tokenTransferRequest\n+                                .getRecipientId(), tokenTransferRequest.getTransferAmount());\n+                publishTokenTransferLatencyStats.addValue(publishStopwatch.elapsed(TimeUnit.MILLISECONDS));\n+                result.onNext(transactionId);\n+            } catch (HederaPrecheckStatusException preEx) {\n+                hederaResponseCodeEx.compute(preEx.status, (key, val) -> (val == null) ? 1 : val + 1);\n+            } catch (HederaNetworkException preEx) {\n+                networkFailures.incrementAndGet();\n+            } catch (Exception ex) {\n+                unknownFailures.incrementAndGet();\n+                log.error(\"Unexpected exception publishing message {} to {}: {}\", i,\n+                        sdkClient.getNodeInfo().getNodeId(), ex);\n+            }\n+        }\n+\n+        log.info(\"Submitted {} token transfers for token {} from {} to {} in {} on node {}. {} preCheckErrors, {} \" +\n+                        \"networkErrors, {} unknown errors\", tokenTransferRequest\n+                        .getMessagesPerBatchCount(), tokenTransferRequest.getTokenId(),\n+                tokenTransferRequest\n+                        .getOperatorId(), tokenTransferRequest.getRecipientId(), totalStopwatch,\n+                sdkClient.getNodeInfo().getNodeId(),\n+                StringUtils.join(hederaResponseCodeEx), networkFailures.get(), unknownFailures.get());\n+        printPublishStats();\n+        result.onComplete();\n+\n+        // verify transactions\n+        if (verifyTransactions) {\n+            return sdkClient.getValidTransactions(result.getTransactionIdList());\n+        }\n+\n+        return result.getTransactionIdList();\n+    }\n+\n+    private void printPublishStats() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTgwOTYy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#pullrequestreview-512180962", "createdAt": "2020-10-19T21:42:40Z", "commit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0Mjo0MFrOHkiu2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0Mjo0MFrOHkiu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3OTgzNQ==", "bodyText": "Don't use DescriptiveStatistics as it keeps all values in memory and has resulted in memory leaks in the past. Use SummaryStatistics instead even though we miss out on percentiles. Can you change everywhere else using  DescriptiveStatistics including existing classes?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#discussion_r508079835", "createdAt": "2020-10-19T21:42:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/hts/TokenTransfersPublishAndRetrieveSampler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.hedera.mirror.grpc.jmeter.sampler.hts;\n+\n+import com.google.common.base.Stopwatch;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.SneakyThrows;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n+import org.json.JSONObject;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import reactor.util.retry.Retry;\n+\n+import com.hedera.hashgraph.sdk.HederaNetworkException;\n+import com.hedera.hashgraph.sdk.HederaPrecheckStatusException;\n+import com.hedera.hashgraph.sdk.Status;\n+import com.hedera.hashgraph.sdk.TransactionId;\n+import com.hedera.mirror.grpc.jmeter.handler.SDKClientHandler;\n+import com.hedera.mirror.grpc.jmeter.props.hts.TokenTransferRequest;\n+import com.hedera.mirror.grpc.jmeter.sampler.result.hts.TokenTransferPublishAndRetrieveResult;\n+\n+@Log4j2\n+public class TokenTransfersPublishAndRetrieveSampler {\n+    private final TokenTransferRequest request;\n+    private final SDKClientHandler sdkClient;\n+    private final DescriptiveStatistics publishTokenTransferLatencyStats = new DescriptiveStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad507ae1c1c4f7e1b9a22c3580000a4fc94c0a57"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/00521b19e6c9f13e6c7dd2ccc652dcf64f295aca", "committedDate": "2020-10-19T23:08:48Z", "message": "Add license info to new classes\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc504d2f7f2b13bd9cfb830fa521dc6119e8f45", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/ecc504d2f7f2b13bd9cfb830fa521dc6119e8f45", "committedDate": "2020-10-20T00:01:20Z", "message": "Refactor, update comments\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5982cfd81f03df4a6c4f384a12c2ad7d8f42072", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/a5982cfd81f03df4a6c4f384a12c2ad7d8f42072", "committedDate": "2020-10-20T00:07:21Z", "message": "Add Utility class and remove commented code\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "826f2ee300322384206ae6107a9d1f454e86362a", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/826f2ee300322384206ae6107a9d1f454e86362a", "committedDate": "2020-10-20T00:20:22Z", "message": "Change DescriptiveStatistics to SummaryStatistics due to memory issues\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48582b9a740f44a6cb2e330fed50d8815dae71a5", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/48582b9a740f44a6cb2e330fed50d8815dae71a5", "committedDate": "2020-10-20T02:14:56Z", "message": "Refactor to move printPublishStats into superclass\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d900cfb4048be21e22c37d012bd75f6229bb10e9", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d900cfb4048be21e22c37d012bd75f6229bb10e9", "committedDate": "2020-10-20T02:38:45Z", "message": "Refactor request objects to be more generic and reusable\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52e78b72b9e95181455e0f7934499c2a48d747b", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e52e78b72b9e95181455e0f7934499c2a48d747b", "committedDate": "2020-10-20T02:43:05Z", "message": "Fix formatting of log statement\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cb4171882baeaed5cac3f747503ce2704a056f5", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/3cb4171882baeaed5cac3f747503ce2704a056f5", "committedDate": "2020-10-20T02:53:34Z", "message": "Refactor PublishRequest to be even more reusable\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229a6588077893e36f76be49ad13fe36f5da51d7", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/229a6588077893e36f76be49ad13fe36f5da51d7", "committedDate": "2020-10-20T02:58:07Z", "message": "Add license info to PublishSampler\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTIyNjky", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#pullrequestreview-513122692", "createdAt": "2020-10-20T20:50:51Z", "commit": {"oid": "229a6588077893e36f76be49ad13fe36f5da51d7"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0185ee35aff1880e93ef0c3ed90b1c143dbacb", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cc0185ee35aff1880e93ef0c3ed90b1c143dbacb", "committedDate": "2020-10-20T21:58:51Z", "message": "Add documentation and k8s file\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d35ff52ec89e9387a3ee61342777be0761df02f2", "author": {"user": {"login": "ijungmann", "name": "Ian Jungmann"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/d35ff52ec89e9387a3ee61342777be0761df02f2", "committedDate": "2020-10-20T22:16:47Z", "message": "Add documentation and k8s file for other hts test\n\nSigned-off-by: Ian Jungmann <ian.jungmann@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTg1MTg2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1134#pullrequestreview-513185186", "createdAt": "2020-10-20T22:37:19Z", "commit": {"oid": "d35ff52ec89e9387a3ee61342777be0761df02f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}