{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzI3MTk2", "number": 588, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMzo0MFrODnHWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjo1MFrODnPULg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzQxNDkwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowMzo0MFrOF07C-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMTo0MFrOF1HxKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzY5MQ==", "bodyText": "Negative for now() is a bit weird. I would suggest changing it to boxed type and allowing null for now:\nLong startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, null);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391037691", "createdAt": "2020-03-11T15:03:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "diffHunk": "@@ -63,11 +64,20 @@ public void setupTest(JavaSamplerContext context) {\n         int port = propHandler.getIntTestParam(\"port\", \"5600\");\n         boolean sharedChannel = Boolean.valueOf(propHandler.getTestParam(\"sharedChannel\", \"false\"));\n         long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, \"0\");\n+        int nanoStartTime = 0;\n+\n+        // allow for subscribe from now\n+        if (startTime < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjEyMw==", "bodyText": "Fixed. Updated some methods in PropertiesHandler to make this easier", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391246123", "createdAt": "2020-03-11T20:21:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "diffHunk": "@@ -63,11 +64,20 @@ public void setupTest(JavaSamplerContext context) {\n         int port = propHandler.getIntTestParam(\"port\", \"5600\");\n         boolean sharedChannel = Boolean.valueOf(propHandler.getTestParam(\"sharedChannel\", \"false\"));\n         long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, \"0\");\n+        int nanoStartTime = 0;\n+\n+        // allow for subscribe from now\n+        if (startTime < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzNzY5MQ=="}, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzQyMzE0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowNTozNVrOF07IXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjoxMVrOF1HyDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzOTA3MQ==", "bodyText": "Should be \"failed: \" to avoid concatenating without a space in between", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391039071", "createdAt": "2020-03-11T15:05:35Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -71,13 +73,15 @@ public void onNext(T result) {\n     }\n \n     public void onComplete() {\n-        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}\", historicalMessageCount,\n-                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" : \"failed\");\n+        String errorMessage = subscribeError == null ? \"\" : \" : with \" + subscribeError.getMessage();\n+        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}. Last message received {} ago\",\n+                historicalMessageCount,\n+                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" :\n+                        \"failed\" + errorMessage, lastMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjM1MQ==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391246351", "createdAt": "2020-03-11T20:22:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -71,13 +73,15 @@ public void onNext(T result) {\n     }\n \n     public void onComplete() {\n-        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}\", historicalMessageCount,\n-                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" : \"failed\");\n+        String errorMessage = subscribeError == null ? \"\" : \" : with \" + subscribeError.getMessage();\n+        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}. Last message received {} ago\",\n+                historicalMessageCount,\n+                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" :\n+                        \"failed\" + errorMessage, lastMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzOTA3MQ=="}, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzQzMjY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTowNzo1MFrOF07OqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMTo0OVrOF1HxcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MDY4MQ==", "bodyText": "Succes/failure with error should be at end of message.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391040681", "createdAt": "2020-03-11T15:07:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -71,13 +73,15 @@ public void onNext(T result) {\n     }\n \n     public void onComplete() {\n-        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}\", historicalMessageCount,\n-                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" : \"failed\");\n+        String errorMessage = subscribeError == null ? \"\" : \" : with \" + subscribeError.getMessage();\n+        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}. Last message received {} ago\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjE5Mg==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391246192", "createdAt": "2020-03-11T20:21:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/sampler/result/HCSSamplerResult.java", "diffHunk": "@@ -71,13 +73,15 @@ public void onNext(T result) {\n     }\n \n     public void onComplete() {\n-        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}\", historicalMessageCount,\n-                incomingMessageCount, stopwatch, getMessageRate(), success ? \"success\" : \"failed\");\n+        String errorMessage = subscribeError == null ? \"\" : \" : with \" + subscribeError.getMessage();\n+        log.info(\"Observed {} historic and {} incoming messages in {} ({}/s): {}. Last message received {} ago\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MDY4MQ=="}, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzQ0NTczOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-test/src/test/resources/features/hcs/hcs.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNToxMDo0NFrOF07XBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMTo1OVrOF1HxuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MjgyMw==", "bodyText": "Should use normal English for scenario. Also should use timestamp in place of date:\nAnd I provide a starting timestamp <startTimestamp>", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391042823", "createdAt": "2020-03-11T15:10:44Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-test/src/test/resources/features/hcs/hcs.feature", "diffHunk": "@@ -26,12 +26,12 @@ Feature: HCS Base Coverage Feature\n     @SubscribeOnly @Acceptance\n     Scenario Outline: Validate topic message subscription only\n         Given I provide a topic id <topicId>\n-        When I provide a number of messages <numMessages> I want to receive\n-        And I subscribe with a filter to retrieve messages\n+        And I provide a startDate <startDate> and a number of messages <numMessages> I want to receive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjI2NQ==", "bodyText": "Updated", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391246265", "createdAt": "2020-03-11T20:21:59Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-test/src/test/resources/features/hcs/hcs.feature", "diffHunk": "@@ -26,12 +26,12 @@ Feature: HCS Base Coverage Feature\n     @SubscribeOnly @Acceptance\n     Scenario Outline: Validate topic message subscription only\n         Given I provide a topic id <topicId>\n-        When I provide a number of messages <numMessages> I want to receive\n-        And I subscribe with a filter to retrieve messages\n+        And I provide a startDate <startDate> and a number of messages <numMessages> I want to receive", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MjgyMw=="}, "originalCommit": {"oid": "184587d65ff9411aecf50e5bebe149a411ced405"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDcxOTgyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMDoyMjo1MFrOF1Hzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTowMzoxNlrOF1JAmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjcyMg==", "bodyText": "imo, nanos precision seems unnecessary. Or maybe am missing some nuance?\n(just a note, not changes needed)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391246722", "createdAt": "2020-03-11T20:22:50Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "diffHunk": "@@ -60,18 +60,27 @@ private static synchronized void setChannel(String host, int port) {\n     public void setupTest(JavaSamplerContext context) {\n         propHandler = new PropertiesHandler(context);\n         String host = propHandler.getTestParam(\"host\", \"localhost\");\n-        int port = propHandler.getIntTestParam(\"port\", \"5600\");\n+        int port = propHandler.getIntTestParam(\"port\", 5600);\n         boolean sharedChannel = Boolean.valueOf(propHandler.getTestParam(\"sharedChannel\", \"false\"));\n-        long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, \"0\");\n-        long endTimeSecs = propHandler.getLongClientTestParam(\"EndTime\", 0, \"0\");\n-        long limit = propHandler.getLongClientTestParam(\"Limit\", 0, \"100\");\n+        Long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, null);\n+        int nanoStartTime = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a7f7680bff9585aece5dcade8b30f683c33db8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI2NjQ1OQ==", "bodyText": "This was an enhancement to help identify clients on the gRPC side. I use the timestamp for subscription to see which 1 out of say 200 clients got a specific error on the gaps server. Open to suggestions on another way to uniquely identify each client", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/588#discussion_r391266459", "createdAt": "2020-03-11T21:03:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-grpc/src/test/java/com/hedera/mirror/grpc/jmeter/client/SingleTopicHCSClient.java", "diffHunk": "@@ -60,18 +60,27 @@ private static synchronized void setChannel(String host, int port) {\n     public void setupTest(JavaSamplerContext context) {\n         propHandler = new PropertiesHandler(context);\n         String host = propHandler.getTestParam(\"host\", \"localhost\");\n-        int port = propHandler.getIntTestParam(\"port\", \"5600\");\n+        int port = propHandler.getIntTestParam(\"port\", 5600);\n         boolean sharedChannel = Boolean.valueOf(propHandler.getTestParam(\"sharedChannel\", \"false\"));\n-        long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, \"0\");\n-        long endTimeSecs = propHandler.getLongClientTestParam(\"EndTime\", 0, \"0\");\n-        long limit = propHandler.getLongClientTestParam(\"Limit\", 0, \"100\");\n+        Long startTime = propHandler.getLongClientTestParam(\"StartTime\", 0, null);\n+        int nanoStartTime = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0NjcyMg=="}, "originalCommit": {"oid": "57a7f7680bff9585aece5dcade8b30f683c33db8"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1215, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}