{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjY3MDYy", "number": 579, "title": "Prepare RecordFileParser for file init/complete logic.", "bodyText": "Detailed description:\n\nRight now record file init/complete logic is in RecordFileLogger. In new design, we want to move\nit to RecordFileParser.\nThis change (part 1 of 2) refactors RFP so that actual logic move (followup, part 2 of 2) can be neat.\nNew functions - initFile, closeFileAndCommit, rollback - are where the logic will be moved to.\nMake loadRecordFile filesystem agnostic.\nAlthough a lot of code being touched here can be improved in many other ways, keeping this PR refactor only for easy review\n\nSigned-off-by: Apekshit Sharma apekshit.sharma@hedera.com\nWhich issue(s) this PR fixes:\nPartially fixes #566\nSpecial notes for your reviewer:\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-03-02T23:46:27Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579", "merged": true, "mergeCommit": {"oid": "29aebdaed205b66861c0ecdd02285fa76d19e3ba"}, "closed": true, "closedAt": "2020-03-03T19:31:16Z", "author": {"login": "apeksharma"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ2iN_gH2gAyMzgyNjY3MDYyOmYxYzc2MmMzYjJjOWM1M2M5MjFkOTBjYzU1YjM2MTdjMTNlYTFmN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKHgM7AFqTM2ODI2MTg1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d", "committedDate": "2020-03-02T23:43:39Z", "message": "Prepare RecordFileParser for file init/complete logic.\n\n- Right now record file init/complete logic is in RecordFileLogger. In new design, we want to move\n  it to RecordFileParser.\n- This change (part 1 of 2) refactors RFP so that actual logic move (followup, part 2 of 2) can be neat.\n- New functions - initFile, closeFileAndCommit, rollback - are where the logic will be moved to.\n- Make loadRecordFile filesystem agnostic.\n- Although a lot of code being touched here can be improved in many other ways, keeping this PR refactor only for easy review\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjEyNDYy", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#pullrequestreview-367612462", "createdAt": "2020-03-02T23:48:09Z", "commit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo0ODowOVrOFwzhWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzo1MjoxNVrOFwzmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDA4OA==", "bodyText": "these 3 functions look funny right now. In followup, the logic from RFLogger will move to these functions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720088", "createdAt": "2020-03-02T23:48:09Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMDM5Mw==", "bodyText": "moved filesystem dependent code to one level up.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386720393", "createdAt": "2020-03-02T23:49:09Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMTQzMA==", "bodyText": "re-aligning is throwing the differ off, and results in big lumps of red and green.\nKeeping it un-aligned explicitly for easy review.\nOn approval, will push a commit to shift code left.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r386721430", "createdAt": "2020-03-02T23:52:15Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series\n+     * @param thisFileHash         the hash of this file\n      * @return return boolean indicating method success\n      * @throws Exception\n      */\n-    private boolean loadRecordFile(String fileName, String previousFileHash, String thisFileHash) throws Exception {\n-\n-        File file = new File(fileName);\n-        String newFileHash = \"\";\n-\n-        if (file.exists() == false) {\n-            log.warn(\"File does not exist {}\", fileName);\n+    private boolean loadRecordFile(String fileName, InputStream inputStream, String expectedPrevFileHash,\n+                                   String thisFileHash) {\n+        var result = initFile(fileName);\n+        if (result == RecordFileLogger.INIT_RESULT.SKIP) {\n+            return true; // skip this fle\n+        } else if (result == RecordFileLogger.INIT_RESULT.FAIL) {\n             return false;\n         }\n         long counter = 0;\n-        byte[] readFileHash = new byte[48];\n-        RecordFileLogger.INIT_RESULT initFileResult = RecordFileLogger.initFile(fileName);\n         Stopwatch stopwatch = Stopwatch.createStarted();\n         Integer recordFileVersion = 0;\n         Boolean success = false;\n \n-        if (initFileResult == RecordFileLogger.INIT_RESULT.OK) {\n-            try (DataInputStream dis = new DataInputStream(new FileInputStream(file))) {\n+            try (DataInputStream dis = new DataInputStream(inputStream)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDc4Njk3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#pullrequestreview-368078697", "createdAt": "2020-03-03T15:31:04Z", "commit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTowNFrOFxKrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTowNFrOFxKrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA==", "bodyText": "nit: missing inputStream", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387099578", "createdAt": "2020-03-03T15:31:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "692c537573715dfe5b96cdb02dd0989143645c54", "author": {"user": {"login": "apeksharma", "name": "Apekshit Sharma"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/692c537573715dfe5b96cdb02dd0989143645c54", "committedDate": "2020-03-03T19:11:39Z", "message": "add @param. realign 'try' block in loadRecordFile\n\nSigned-off-by: Apekshit Sharma <apekshit.sharma@hedera.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjQ4ODIz", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#pullrequestreview-368248823", "createdAt": "2020-03-03T19:10:34Z", "commit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMDozNVrOFxS4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMDozNVrOFxS4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMzgwMw==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#discussion_r387233803", "createdAt": "2020-03-03T19:10:35Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -120,37 +123,45 @@ public static String readPrevFileHash(String fileName) {\n         return null;\n     }\n \n+    private RecordFileLogger.INIT_RESULT initFile(String filename) {\n+        return RecordFileLogger.initFile(filename);\n+    }\n+\n+    private void closeFileAndCommit(String fileHash, String previousHash) throws SQLException {\n+        RecordFileLogger.completeFile(fileHash, previousHash);\n+    }\n+\n+    private void rollback() {\n+        RecordFileLogger.rollback();\n+    }\n+\n     /**\n      * Given a service record name, read and parse and return as a list of service record pair\n      *\n-     * @param fileName         the name of record file to read\n-     * @param previousFileHash the hash of the previous record file in the series\n-     * @param thisFileHash     the hash of this file\n+     * @param fileName             the name of record file to read\n+     * @param expectedPrevFileHash the hash of the previous record file in the series", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTU3OA=="}, "originalCommit": {"oid": "f1c762c3b2c9c53c921d90cc55b3617c13ea1f7d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjYxODU4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/579#pullrequestreview-368261858", "createdAt": "2020-03-03T19:29:50Z", "commit": {"oid": "692c537573715dfe5b96cdb02dd0989143645c54"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3298, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}