{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MzY2ODU0", "number": 834, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NDowOVrOEG6Bgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMzo1NlrOEHowCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc3NTcxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-rest/__tests__/transactions.test.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NDowOVrOGl_jMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToyODo1OVrOGmA2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MTY5Nw==", "bodyText": "nit: remove or fix", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442491697", "createdAt": "2020-06-18T20:44:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-rest/__tests__/transactions.test.js", "diffHunk": "@@ -79,6 +79,8 @@ const validateAccNumRange = function (transactions, low, high) {\n   for (const tx of transactions) {\n     for (const xfer of tx.transfers) {\n       const accNum = xfer.account.split('.')[2];\n+      // epxect(accNum).toBeGreaterThanOrEqual(low);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMzAyMA==", "bodyText": "ahh, remains from some test debugging. removed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442513020", "createdAt": "2020-06-18T21:28:59Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-rest/__tests__/transactions.test.js", "diffHunk": "@@ -79,6 +79,8 @@ const validateAccNumRange = function (transactions, low, high) {\n   for (const tx of transactions) {\n     for (const xfer of tx.transfers) {\n       const accNum = xfer.account.split('.')[2];\n+      // epxect(accNum).toBeGreaterThanOrEqual(low);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MTY5Nw=="}, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjgxODYwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo1ODo0M1rOGl__RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNToyNzo0MFrOGnF00w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5ODg4NQ==", "bodyText": "i understand the assumption of the shard=0, however i worry that means that migrations below this version must be done on shard 0. Should this migration ever occur on a future != 0 shard this'll cause incorrect data.\nI'm weighing if it's better to play it safe now and have a longer migration that do this and potentially have it fall through the cracks", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442498885", "createdAt": "2020-06-18T20:58:43Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -104,3 +104,45 @@ alter table if exists t_entities\n \n alter table if exists t_entities\n     add primary key (id);\n+\n+-------------------\n+-- cryptotransferlists table\n+-------------------\n+\n+create table if not exists cryptotransferlists (\n+  entity_id entity_id not null,\n+  consensus_timestamp nanos_timestamp not null,\n+  amount hbar_tinybars not null\n+);\n+\n+-- Current assumption in t_cryptotransferlists is that shard = 0. Below migration builds on that assumption.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNzk1NA==", "bodyText": "If there is data with shard != 0 in mirror node version < 0.14.x, damage has already been done in past since mirror node silently drops shard.\nLogically, there's nothing one can do about it since that data doesn't exist to migrate.\nThat said, it's not worth our worries since shard won't be anything else than 0 for at least a year (and possibly more). No one should be running < 0.14.x when (IF) shard becomes relevant.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442517954", "createdAt": "2020-06-18T21:40:44Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -104,3 +104,45 @@ alter table if exists t_entities\n \n alter table if exists t_entities\n     add primary key (id);\n+\n+-------------------\n+-- cryptotransferlists table\n+-------------------\n+\n+create table if not exists cryptotransferlists (\n+  entity_id entity_id not null,\n+  consensus_timestamp nanos_timestamp not null,\n+  amount hbar_tinybars not null\n+);\n+\n+-- Current assumption in t_cryptotransferlists is that shard = 0. Below migration builds on that assumption.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5ODg4NQ=="}, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0MzA5MQ==", "bodyText": "Understood", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r443643091", "createdAt": "2020-06-22T15:27:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.0__denormalize_entities.sql", "diffHunk": "@@ -104,3 +104,45 @@ alter table if exists t_entities\n \n alter table if exists t_entities\n     add primary key (id);\n+\n+-------------------\n+-- cryptotransferlists table\n+-------------------\n+\n+create table if not exists cryptotransferlists (\n+  entity_id entity_id not null,\n+  consensus_timestamp nanos_timestamp not null,\n+  amount hbar_tinybars not null\n+);\n+\n+-- Current assumption in t_cryptotransferlists is that shard = 0. Below migration builds on that assumption.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5ODg4NQ=="}, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjgzMzQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTowMzo1M1rOGmAJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToyODoyOVrOGmA1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTM4OA==", "bodyText": "Not really much point to have this method anymore", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442501388", "createdAt": "2020-06-18T21:03:53Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -304,31 +301,28 @@ private void insertCryptoCreateTransferList(\n         TransferList transferList = txRecord.getTransferList();\n         for (int i = 0; i < transferList.getAccountAmountsCount(); ++i) {\n             var aa = transferList.getAccountAmounts(i);\n-            var accountId = aa.getAccountID();\n-            entityListener.onEntityId(EntityId.of(accountId));\n-            long accountNum = accountId.getAccountNum();\n-            addCryptoTransferList(consensusTimestamp, accountId.getRealmNum(), accountNum, aa.getAmount());\n+            var account = EntityId.of(aa.getAccountID());\n+            entityListener.onEntityId(account);\n+            addCryptoTransferList(consensusTimestamp, aa.getAmount(), account);\n \n-            if (addInitialBalance && (initialBalance == aa.getAmount()) && (accountNum == createdAccountNum)) {\n+            if (addInitialBalance && (initialBalance == aa.getAmount())\n+                    && (account.getEntityNum() == createdAccountNum)) {\n                 addInitialBalance = false;\n             }\n         }\n \n         if (addInitialBalance) {\n-            AccountID payerAccountId = body.getTransactionID().getAccountID();\n-            AccountID createdAccountId = txRecord.getReceipt().getAccountID();\n-            entityListener.onEntityId(EntityId.of(payerAccountId));\n-            entityListener.onEntityId(EntityId.of(createdAccountId));\n-            addCryptoTransferList(consensusTimestamp, payerAccountId.getRealmNum(), payerAccountId\n-                    .getAccountNum(), -initialBalance);\n-            addCryptoTransferList(consensusTimestamp, createdAccountId\n-                    .getRealmNum(), createdAccountNum, initialBalance);\n+            var payerAccount = EntityId.of(body.getTransactionID().getAccountID());\n+            var createdAccount = EntityId.of(txRecord.getReceipt().getAccountID());\n+            entityListener.onEntityId(payerAccount);\n+            entityListener.onEntityId(createdAccount);\n+            addCryptoTransferList(consensusTimestamp, -initialBalance, payerAccount);\n+            addCryptoTransferList(consensusTimestamp, initialBalance, createdAccount);\n         }\n     }\n \n-    private void addCryptoTransferList(long consensusTimestamp, long realmNum, long accountNum, long amount) {\n-        entityListener\n-                .onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, realmNum, accountNum));\n+    private void addCryptoTransferList(long consensusTimestamp, long amount, EntityId account) {\n+        entityListener.onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, account));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMjgxMQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442512811", "createdAt": "2020-06-18T21:28:29Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -304,31 +301,28 @@ private void insertCryptoCreateTransferList(\n         TransferList transferList = txRecord.getTransferList();\n         for (int i = 0; i < transferList.getAccountAmountsCount(); ++i) {\n             var aa = transferList.getAccountAmounts(i);\n-            var accountId = aa.getAccountID();\n-            entityListener.onEntityId(EntityId.of(accountId));\n-            long accountNum = accountId.getAccountNum();\n-            addCryptoTransferList(consensusTimestamp, accountId.getRealmNum(), accountNum, aa.getAmount());\n+            var account = EntityId.of(aa.getAccountID());\n+            entityListener.onEntityId(account);\n+            addCryptoTransferList(consensusTimestamp, aa.getAmount(), account);\n \n-            if (addInitialBalance && (initialBalance == aa.getAmount()) && (accountNum == createdAccountNum)) {\n+            if (addInitialBalance && (initialBalance == aa.getAmount())\n+                    && (account.getEntityNum() == createdAccountNum)) {\n                 addInitialBalance = false;\n             }\n         }\n \n         if (addInitialBalance) {\n-            AccountID payerAccountId = body.getTransactionID().getAccountID();\n-            AccountID createdAccountId = txRecord.getReceipt().getAccountID();\n-            entityListener.onEntityId(EntityId.of(payerAccountId));\n-            entityListener.onEntityId(EntityId.of(createdAccountId));\n-            addCryptoTransferList(consensusTimestamp, payerAccountId.getRealmNum(), payerAccountId\n-                    .getAccountNum(), -initialBalance);\n-            addCryptoTransferList(consensusTimestamp, createdAccountId\n-                    .getRealmNum(), createdAccountNum, initialBalance);\n+            var payerAccount = EntityId.of(body.getTransactionID().getAccountID());\n+            var createdAccount = EntityId.of(txRecord.getReceipt().getAccountID());\n+            entityListener.onEntityId(payerAccount);\n+            entityListener.onEntityId(createdAccount);\n+            addCryptoTransferList(consensusTimestamp, -initialBalance, payerAccount);\n+            addCryptoTransferList(consensusTimestamp, initialBalance, createdAccount);\n         }\n     }\n \n-    private void addCryptoTransferList(long consensusTimestamp, long realmNum, long accountNum, long amount) {\n-        entityListener\n-                .onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, realmNum, accountNum));\n+    private void addCryptoTransferList(long consensusTimestamp, long amount, EntityId account) {\n+        entityListener.onCryptoTransfer(new CryptoTransfer(consensusTimestamp, amount, account));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTM4OA=="}, "originalCommit": {"oid": "bfaeb38a602b48df4552c150822c2b7e53329180"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzAxNzY0OnYy", "diffSide": "LEFT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/CryptoTransferRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoxNDo0MFrOGmB8_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo0NjowOVrOGnOkgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTA3MQ==", "bodyText": "Should still have a test that verifies the custom repository method works as expected.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r442531071", "createdAt": "2020-06-18T22:14:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/CryptoTransferRepositoryTest.java", "diffHunk": "@@ -1,49 +0,0 @@\n-package com.hedera.mirror.importer.repository;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import com.hedera.mirror.importer.domain.CryptoTransfer;\n-import com.hedera.mirror.importer.domain.Transaction;\n-\n-public class CryptoTransferRepositoryTest extends AbstractRepositoryTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc0761bb979d0e285bf6f356788716448c4ee7f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NjM3MQ==", "bodyText": "Done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r443786371", "createdAt": "2020-06-22T19:46:09Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/CryptoTransferRepositoryTest.java", "diffHunk": "@@ -1,49 +0,0 @@\n-package com.hedera.mirror.importer.repository;\n-\n-/*-\n- * \u200c\n- * Hedera Mirror Node\n- * \u200b\n- * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n- * \u200b\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- * \u200d\n- */\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import com.hedera.mirror.importer.domain.CryptoTransfer;\n-import com.hedera.mirror.importer.domain.Transaction;\n-\n-public class CryptoTransferRepositoryTest extends AbstractRepositoryTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTA3MQ=="}, "originalCommit": {"oid": "6dc0761bb979d0e285bf6f356788716448c4ee7f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQzMTQ1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.1__denormalize_transfer_tables.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMzo1NlrOGnHU0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo0NTo0MVrOGnOjtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NzY2NQ==", "bodyText": "Talked it over with Nana, we would both prefer crypto_transfer", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r443667665", "createdAt": "2020-06-22T16:03:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.1__denormalize_transfer_tables.sql", "diffHunk": "@@ -0,0 +1,45 @@\n+-------------------\n+-- crypto_transfers table\n+-------------------\n+\n+create table if not exists crypto_transfers (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc0761bb979d0e285bf6f356788716448c4ee7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NjE2NQ==", "bodyText": "done.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/834#discussion_r443786165", "createdAt": "2020-06-22T19:45:41Z", "author": {"login": "apeksharma"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.25.1__denormalize_transfer_tables.sql", "diffHunk": "@@ -0,0 +1,45 @@\n+-------------------\n+-- crypto_transfers table\n+-------------------\n+\n+create table if not exists crypto_transfers (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NzY2NQ=="}, "originalCommit": {"oid": "6dc0761bb979d0e285bf6f356788716448c4ee7f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1103, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}