{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjgzNTQ3", "number": 1228, "title": "Ensure entities are inserted only on create", "bodyText": "Detailed description:\nCurrently mirror node will create entities that don't exist even on failed transactions.\nWe should create entities only on the 5 create transactions and accounts in the record transfer list\n\nAdd createsEntity() to transactionHandler interface\nUpdate crypto account.contract.file/topic/file create handlers to returns true with createsEntity()\nUpdate EntityRecordItemListener to create entities only when transactionHandler.createsEntity() is true\nRearrange EntityRecordItemListener.onItem() inner calls to be easier to fall and move calls that should be only done on success into if successful statement\n\nWhich issue(s) this PR fixes:\nPartially addresses #1201\nSpecial notes for your reviewer:\nThis prevents further issues but lacks migration logic, which will be added in a future PR.\nChecklist\n\n Documentation added\n Tests updated", "createdAt": "2020-11-04T22:51:56Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228", "merged": true, "mergeCommit": {"oid": "39fde86a2a69ac4344256f65da1313e4292aa6ea"}, "closed": true, "closedAt": "2020-11-09T16:59:08Z", "author": {"login": "Nana-EC"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ6b4CgFqTUyNTM1NTQ2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABda3ZWYAFqTUyNjQyMTQ4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzU1NDY0", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#pullrequestreview-525355464", "createdAt": "2020-11-06T17:30:17Z", "commit": {"oid": "2f8110315b9778263692f479199d0829e6d69476"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDQwMjk1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#pullrequestreview-524440295", "createdAt": "2020-11-05T16:28:20Z", "commit": {"oid": "f41eca2a4078eb535457dfab95175fc2f5493116"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyODoyMFrOHuLiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODozNzo1OFrOHu5PcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4NTUzNg==", "bodyText": "What was wrong with the previous approach? Why do we keep taking fields out of RecordItem and passing them separately? It breaks encapsulation and is not OO. We can simply pass record item.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#discussion_r518185536", "createdAt": "2020-11-05T16:28:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -227,18 +229,17 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         log.debug(\"Storing transaction: {}\", tx);\n     }\n \n-    private Transaction buildTransaction(long consensusTimestamp, RecordItem recordItem) {\n+    private Transaction buildTransaction(long consensusTimestamp, TransactionBody body, TransactionRecord txRecord,\n+                                         EntityId entityId, int transactionType, byte[] transactionBytes) {\n         Transaction tx = new Transaction();\n-        TransactionBody body = recordItem.getTransactionBody();\n-        TransactionRecord txRecord = recordItem.getRecord();\n         tx.setChargedTxFee(txRecord.getTransactionFee());\n         tx.setConsensusNs(consensusTimestamp);\n         tx.setMemo(body.getMemoBytes().toByteArray());\n         tx.setMaxFee(body.getTransactionFee());\n         tx.setResult(txRecord.getReceipt().getStatusValue());\n-        tx.setType(recordItem.getTransactionType());\n-        tx.setTransactionBytes(entityProperties.getPersist().isTransactionBytes() ?\n-                recordItem.getTransactionBytes() : null);\n+        tx.setEntityId(entityId);\n+        tx.setType(transactionType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41eca2a4078eb535457dfab95175fc2f5493116"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTAwNA==", "bodyText": "This seems to set the entityId on the transaction even if it's unsuccessful and doesn't get added to the entities table later. Should probably be moved into the isSuccessful block. We should add this check to tests.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#discussion_r518891004", "createdAt": "2020-11-06T17:16:08Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -227,18 +229,17 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n         log.debug(\"Storing transaction: {}\", tx);\n     }\n \n-    private Transaction buildTransaction(long consensusTimestamp, RecordItem recordItem) {\n+    private Transaction buildTransaction(long consensusTimestamp, TransactionBody body, TransactionRecord txRecord,\n+                                         EntityId entityId, int transactionType, byte[] transactionBytes) {\n         Transaction tx = new Transaction();\n-        TransactionBody body = recordItem.getTransactionBody();\n-        TransactionRecord txRecord = recordItem.getRecord();\n         tx.setChargedTxFee(txRecord.getTransactionFee());\n         tx.setConsensusNs(consensusTimestamp);\n         tx.setMemo(body.getMemoBytes().toByteArray());\n         tx.setMaxFee(body.getTransactionFee());\n         tx.setResult(txRecord.getReceipt().getStatusValue());\n-        tx.setType(recordItem.getTransactionType());\n-        tx.setTransactionBytes(entityProperties.getPersist().isTransactionBytes() ?\n-                recordItem.getTransactionBytes() : null);\n+        tx.setEntityId(entityId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f8110315b9778263692f479199d0829e6d69476"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzMzc5Nw==", "bodyText": "Curious: Why did this previously not include the file entity and be a count of 4?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#discussion_r518933797", "createdAt": "2020-11-06T18:36:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerContractTest.java", "diffHunk": "@@ -100,7 +101,7 @@ void contractCreateFailedWithResult() throws Exception {\n \n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count()),\n-                () -> assertEquals(3, entityRepository.count()),\n+                () -> assertEquals(3, entityRepository.count()), // payer, node, treasury", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f8110315b9778263692f479199d0829e6d69476"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzNDM4NA==", "bodyText": "Why wasn't this previously 4? We should probably look into changing these count asserts into a dedicated method that is more explicit and passes the expected EntityIds. Maybe add the method and put it in a few spots and we can later refactor the other places.\nvoid assertEntities(EntityId... entityIds) {...}", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#discussion_r518934384", "createdAt": "2020-11-06T18:37:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListenerCryptoTest.java", "diffHunk": "@@ -136,7 +136,7 @@ void cryptoCreateFailedTransaction() throws Exception {\n \n         assertAll(\n                 () -> assertEquals(1, transactionRepository.count())\n-                , () -> assertEquals(3, entityRepository.count())\n+                , () -> assertEquals(3, entityRepository.count()) // payer, node, treasury", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f8110315b9778263692f479199d0829e6d69476"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e744295a3dea0d5254104da2ade45a3d0f2a2ec0", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e744295a3dea0d5254104da2ade45a3d0f2a2ec0", "committedDate": "2020-11-07T02:54:42Z", "message": "Move transaction entity create into success and improve tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f8110315b9778263692f479199d0829e6d69476", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/2f8110315b9778263692f479199d0829e6d69476", "committedDate": "2020-11-05T22:28:23Z", "message": "Fix tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}, "afterCommit": {"oid": "e744295a3dea0d5254104da2ade45a3d0f2a2ec0", "author": {"user": {"login": "Nana-EC", "name": null}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/e744295a3dea0d5254104da2ade45a3d0f2a2ec0", "committedDate": "2020-11-07T02:54:42Z", "message": "Move transaction entity create into success and improve tests\n\nSigned-off-by: Nana-EC <56320167+Nana-EC@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDA0ODc3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#pullrequestreview-526404877", "createdAt": "2020-11-09T16:01:48Z", "commit": {"oid": "e744295a3dea0d5254104da2ade45a3d0f2a2ec0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDIxNDg2", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#pullrequestreview-526421486", "createdAt": "2020-11-09T16:19:07Z", "commit": {"oid": "e744295a3dea0d5254104da2ade45a3d0f2a2ec0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxOTowN1rOHv2c9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxOTowN1rOHv2c9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNzI2OQ==", "bodyText": "nit: This is a bit inefficient to count and then find each individually. A better approach would be to just entityRepository.findAll() then compare the list size and compare it against the expected in memory. We can optimize later though.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1228#discussion_r519937269", "createdAt": "2020-11-09T16:19:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/parser/record/entity/AbstractEntityRecordItemListenerTest.java", "diffHunk": "@@ -351,4 +359,17 @@ protected void assertTransactionInRepository(\n                     .returns(entityId, t -> t.getEntityId().getId());\n         }\n     }\n+\n+    protected void assertEntities(EntityId... entityIds) {\n+        if (entityIds == null) {\n+            return;\n+        }\n+\n+        assertEquals(entityIds.length, entityRepository.count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e744295a3dea0d5254104da2ade45a3d0f2a2ec0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3483, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}