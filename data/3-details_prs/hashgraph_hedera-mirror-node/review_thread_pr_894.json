{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMTM2MjAy", "number": 894, "reviewThreads": {"totalCount": 71, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozODo0OFrOEQTd7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxMDoyOFrOET5Xxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMxNjMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozODo0OFrOG0Yg5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzozODo0OFrOG0Yg5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MDc3NQ==", "bodyText": "redundant not null for primary key", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457580775", "createdAt": "2020-07-20T17:38:48Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMyODAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MTo1NlrOG0YoKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MTo1NlrOG0YoKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MjYzMg==", "bodyText": "fail early here by throwing an exception? since address book data is not loaded, should not continue to parse it and eventually throw an exception when checking getAddress().isEmpty().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457582632", "createdAt": "2020-07-20T17:41:56Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM4MjU5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1Njo0NlrOG0ZJtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1Njo0NlrOG0ZJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MTIyMQ==", "bodyText": "should guard it by checking incomingAddressBook != null?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457591221", "createdAt": "2020-07-20T17:56:46Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                log.error(\"Unable to parse address book: {}\", e.getMessage());\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n             throw new IllegalStateException(\"Unable to load a valid address book\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n-\n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsFalseOrderByConsensusTimestampDesc(EntityId.of(fileID));\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+            if (optionalAddressBook.isPresent()) {\n+                AddressBook addressBook = optionalAddressBook.get();\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder = builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        // if address book is complete update end time of previous address book and start time of this\n+        if (incomingAddressBook != null && incomingAddressBook.isComplete()) {\n+            // retrieve last complete address book for fileID and update endConsensusTimestamp\n+            Optional<AddressBook> addressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook.getFileId());\n+            if (addressBook.isPresent()) {\n+                addressBookRepository\n+                        .updateEndConsensusTimestamp(addressBook.get().getConsensusTimestamp(), consensusTimestamp - 1);\n+            }\n+        }\n+\n+        // store address book.\n+        // Potential to also remove incomplete address books entries in the db table\n+        addressBookRepository.save(incomingAddressBook);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 336}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQxNTE4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowNTo1NVrOG0Zd1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1NToxNFrOG2gRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NjM3Mw==", "bodyText": "update addressBook.endConsensusTimestamp and use save() to make the update, if performance is not a concern.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457596373", "createdAt": "2020-07-20T18:05:55Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                log.error(\"Unable to parse address book: {}\", e.getMessage());\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n             throw new IllegalStateException(\"Unable to load a valid address book\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n-\n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsFalseOrderByConsensusTimestampDesc(EntityId.of(fileID));\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+            if (optionalAddressBook.isPresent()) {\n+                AddressBook addressBook = optionalAddressBook.get();\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder = builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        // if address book is complete update end time of previous address book and start time of this\n+        if (incomingAddressBook != null && incomingAddressBook.isComplete()) {\n+            // retrieve last complete address book for fileID and update endConsensusTimestamp\n+            Optional<AddressBook> addressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook.getFileId());\n+            if (addressBook.isPresent()) {\n+                addressBookRepository\n+                        .updateEndConsensusTimestamp(addressBook.get().getConsensusTimestamp(), consensusTimestamp - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTEwMg==", "bodyText": "We're going for insert only operations where possible", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459805102", "createdAt": "2020-07-24T00:55:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                log.error(\"Unable to parse address book: {}\", e.getMessage());\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n             throw new IllegalStateException(\"Unable to load a valid address book\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n-\n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsFalseOrderByConsensusTimestampDesc(EntityId.of(fileID));\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+            if (optionalAddressBook.isPresent()) {\n+                AddressBook addressBook = optionalAddressBook.get();\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder = builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        // if address book is complete update end time of previous address book and start time of this\n+        if (incomingAddressBook != null && incomingAddressBook.isComplete()) {\n+            // retrieve last complete address book for fileID and update endConsensusTimestamp\n+            Optional<AddressBook> addressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook.getFileId());\n+            if (addressBook.isPresent()) {\n+                addressBookRepository\n+                        .updateEndConsensusTimestamp(addressBook.get().getConsensusTimestamp(), consensusTimestamp - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5NjM3Mw=="}, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQ5NTM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyOTowOFrOG0aPaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxNzo1MFrOG2deNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTA2NA==", "bodyText": "should it be entityId.getEntityNum() == 102?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457609064", "createdAt": "2020-07-20T18:29:08Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NTA2Nw==", "bodyText": "That's effectively the check. I made the default mirrorProperties.AddressBookFileIdEntityNum = 102.\nWill have to revisit this should there ever be a new address book fileID that needs to be supported", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r458295067", "createdAt": "2020-07-21T18:13:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTA2NA=="}, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1OTE1OA==", "bodyText": "Seems like there's no need for me to make this a property so I'll revert it but still do a 101 and 102 check", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459759158", "createdAt": "2020-07-23T22:17:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTA2NA=="}, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTY2Mjk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxNzoxMVrOG0b2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxODowNVrOG2degg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTQzOA==", "bodyText": "redundant: assign the build to itself.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r457635438", "createdAt": "2020-07-20T19:17:11Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                log.error(\"Unable to parse address book: {}\", e.getMessage());\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n             throw new IllegalStateException(\"Unable to load a valid address book\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n-\n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsFalseOrderByConsensusTimestampDesc(EntityId.of(fileID));\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+            if (optionalAddressBook.isPresent()) {\n+                AddressBook addressBook = optionalAddressBook.get();\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder = builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1OTIzNA==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459759234", "createdAt": "2020-07-23T22:18:05Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n \n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n+\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(TransactionBody transactionBody, long consensusTimeStamp, FileID fileID) {\n+        byte[] contents = null;\n+        boolean isAppendOperation = false;\n+\n+        if (transactionBody.hasFileAppend()) {\n+            contents = transactionBody.getFileAppend().getContents().toByteArray();\n+            isAppendOperation = true;\n+        } else if (transactionBody.hasFileUpdate()) {\n+            contents = transactionBody.getFileUpdate().getContents().toByteArray();\n+        } else if (transactionBody.hasFileCreate()) {\n+            contents = transactionBody.getFileCreate().getContents().toByteArray();\n+        }\n+\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                log.error(\"Unable to copy address book from {} to {}\", mirrorProperties\n+                        .getNetwork(), addressBookPath, e);\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                log.error(\"Unable to parse address book: {}\", e.getMessage());\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n             throw new IllegalStateException(\"Unable to load a valid address book\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n-\n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                    .findTopByFileIdAndIsCompleteIsFalseOrderByConsensusTimestampDesc(EntityId.of(fileID));\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+            if (optionalAddressBook.isPresent()) {\n+                AddressBook addressBook = optionalAddressBook.get();\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder = builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTQzOA=="}, "originalCommit": {"oid": "d39f16caea10cf920550a8d833a4163b09d41a9c"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzUzNTg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/MirrorProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowNDoyOVrOG1muqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMToyNVrOG2djVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MjI1MA==", "bodyText": "I don't think this needs to be a property. 102 is a well-known system file that council members will be signing. If it changes the entire ecosystem would be at risk. Also, it's confusing since we're also watching 101 but hardcoding that.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r458862250", "createdAt": "2020-07-22T15:04:29Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/MirrorProperties.java", "diffHunk": "@@ -56,6 +56,8 @@\n \n     private Long topicRunningHashV2AddedTimestamp;\n \n+    private Long addressBookFileIdEntityNum = 102L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093fa2bb1e993cf2c39d912e3edeb6a64d62eb9b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MDQ2OA==", "bodyText": "Will revert. Can have 101 and 102 as static fields within NetworkAddressBook so it's easy to reference", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459760468", "createdAt": "2020-07-23T22:21:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/MirrorProperties.java", "diffHunk": "@@ -56,6 +56,8 @@\n \n     private Long topicRunningHashV2AddedTimestamp;\n \n+    private Long addressBookFileIdEntityNum = 102L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MjI1MA=="}, "originalCommit": {"oid": "093fa2bb1e993cf2c39d912e3edeb6a64d62eb9b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzkzMDIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTo0MToyN1rOG2Qclg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTo0MToyN1rOG2Qclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NTc1MA==", "bodyText": "We should remove converter and store in db as string as that is what comes via the protobuf.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459545750", "createdAt": "2020-07-23T15:41:27Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "diffHunk": "@@ -24,24 +24,51 @@\n import java.security.PublicKey;\n import java.security.spec.EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n-\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n-import lombok.Value;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.apache.commons.codec.binary.Hex;\n \n-@Builder\n-@Value\n+import com.hedera.mirror.importer.converter.EntityIdConverter;\n+import com.hedera.mirror.importer.converter.StringToByteArrayConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n public class NodeAddress {\n \n-    private String id;\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    private Long consensusTimestamp;\n+\n+    @Convert(converter = StringToByteArrayConverter.class)\n+    private String memo;\n \n     private String ip;\n \n     @Builder.Default\n     private int port = 50211;\n \n+    @Convert(converter = StringToByteArrayConverter.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Nzk1NDYzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTo0NzowOVrOG2Qr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTo0NzowOVrOG2Qr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0OTY2OQ==", "bodyText": "We should store as varchar(1024) since it's a hex encoded string and is modeled as string in the protobuf", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459549669", "createdAt": "2020-07-23T15:47:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null,\n+    is_complete                 boolean         not null default false\n+);\n+\n+create index if not exists address_book__fileId_isComplete\n+    on address_book (file_id, is_complete);\n+\n+-- add node address table\n+create table if not exists node_address\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    bytea           not null,\n+    public_key              bytea           null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY4MTEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/FileIdConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNTozNlrOG2X0gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo0NDozMFrOG4S7og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjU2MA==", "bodyText": "Either a) we don't really care about the type for our purposes and can use generic EntityIdConverter or b) we should extend EntityIdConverter for reuse and supply EntityTypeEnum to parent constructor.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459666560", "createdAt": "2020-07-23T19:05:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/FileIdConverter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hedera.mirror.importer.converter;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import javax.persistence.AttributeConverter;\n+import org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Named\n+@javax.persistence.Converter\n+@ConfigurationPropertiesBinding\n+public class FileIdConverter implements AttributeConverter<EntityId, Long>, Converter<String, EntityId> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4MzYxOA==", "bodyText": "We do care about the type. The encoding leaves out the entity type and that will result in match failures when EntityId is read from Db and the type not updated.\nAdded a AbstractEntityIdConverter class. Since the COnverters are stated as attributes using the class the FileId and AccountId converter extend that and pass in their relative type", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461683618", "createdAt": "2020-07-28T15:44:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/converter/FileIdConverter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hedera.mirror.importer.converter;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.inject.Named;\n+import javax.persistence.AttributeConverter;\n+import org.springframework.boot.context.properties.ConfigurationPropertiesBinding;\n+import org.springframework.core.convert.converter.Converter;\n+\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Named\n+@javax.persistence.Converter\n+@ConfigurationPropertiesBinding\n+public class FileIdConverter implements AttributeConverter<EntityId, Long>, Converter<String, EntityId> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjU2MA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY5MzAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowOToxNFrOG2X7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowOToxNFrOG2X7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2ODQyOQ==", "bodyText": "There's no point in storing as bytea if we only ever use it as string. We should use string in both places or byte array in both places. Recommend string in both and removing converter.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459668429", "createdAt": "2020-07-23T19:09:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "diffHunk": "@@ -24,24 +24,51 @@\n import java.security.PublicKey;\n import java.security.spec.EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n-\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n-import lombok.Value;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.apache.commons.codec.binary.Hex;\n \n-@Builder\n-@Value\n+import com.hedera.mirror.importer.converter.EntityIdConverter;\n+import com.hedera.mirror.importer.converter.StringToByteArrayConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n public class NodeAddress {\n \n-    private String id;\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    private Long consensusTimestamp;\n+\n+    @Convert(converter = StringToByteArrayConverter.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcxMjcyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNToxNFrOG2YH6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo0NTozM1rOG4S-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTUyOQ==", "bodyText": "From the protobuf usage to store account ID is deprecated. We should use getNodeAccountId() and if need be internally it should get from memo if it is null to be backwards compatible. This will make it clearer our intent.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459671529", "createdAt": "2020-07-23T19:15:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -159,7 +159,7 @@ protected void downloadNextBatch() {\n \n         Set<String> nodeAccountIds = networkAddressBook.getAddresses()\n                 .stream()\n-                .map(NodeAddress::getId)\n+                .map(NodeAddress::getMemo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4NDM3OA==", "bodyText": "Done. On null memo is used with AccountId as default", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461684378", "createdAt": "2020-07-28T15:45:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/Downloader.java", "diffHunk": "@@ -159,7 +159,7 @@ protected void downloadNextBatch() {\n \n         Set<String> nodeAccountIds = networkAddressBook.getAddresses()\n                 .stream()\n-                .map(NodeAddress::getId)\n+                .map(NodeAddress::getMemo)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTUyOQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcxNDMwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNTozOFrOG2YI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNTozOFrOG2YI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTc3MA==", "bodyText": "getNodeAccountId()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459671770", "createdAt": "2020-07-23T19:15:38Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/downloader/NodeSignatureVerifier.java", "diffHunk": "@@ -49,7 +49,7 @@ public NodeSignatureVerifier(NetworkAddressBook networkAddressBook) {\n         nodeIDPubKeyMap = networkAddressBook\n                 .getAddresses()\n                 .stream()\n-                .collect(Collectors.toMap(NodeAddress::getId, NodeAddress::getPublicKeyAsObject));\n+                .collect(Collectors.toMap(NodeAddress::getMemo, NodeAddress::getPublicKeyAsObject));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcyNzI1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxOTo0MlrOG2YREA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1MDoxMVrOG4TLpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mzg3Mg==", "bodyText": "We shouldn't update address book if file transaction was unsuccessful. Since we are no longer writing files and/or updating in memory byte arrays we can push this logic into insertFileData and let db transactions handle whether it gets saved or not.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459673872", "createdAt": "2020-07-23T19:19:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileCreate()) {\n-                insertFileData(consensusNs, body.getFileCreate().getContents().toByteArray(),\n-                        txRecord.getReceipt().getFileID());\n+                fileID = txRecord.getReceipt().getFileID();\n+                fileBytes = body.getFileCreate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileUpdate()) {\n-                insertFileUpdate(consensusNs, body.getFileUpdate());\n+                fileID = body.getFileUpdate().getFileID();\n+                fileBytes = body.getFileUpdate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             }\n         }\n \n         entityListener.onTransaction(tx);\n         log.debug(\"Storing transaction: {}\", tx);\n \n-        if (NetworkAddressBook.isAddressBook(entityId)) {\n-            networkAddressBook.updateFrom(body);\n+        if (networkAddressBook.isAddressBook(entityId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4NzcxNg==", "bodyText": "Moved this into successful branch only.\nHowever I think the isAddressBook check is valuable outside to allow for deduplication of effort i.e. allow AddressBook to save to fileData table as it encounters a file. This needs to be done as seen and not left to the batching so we can ensure data is present in the db to concatenate when an Append transaction is seen.\nAgreed on moving into the insertFileData. Did that", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461687716", "createdAt": "2020-07-28T15:50:11Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileCreate()) {\n-                insertFileData(consensusNs, body.getFileCreate().getContents().toByteArray(),\n-                        txRecord.getReceipt().getFileID());\n+                fileID = txRecord.getReceipt().getFileID();\n+                fileBytes = body.getFileCreate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileUpdate()) {\n-                insertFileUpdate(consensusNs, body.getFileUpdate());\n+                fileID = body.getFileUpdate().getFileID();\n+                fileBytes = body.getFileUpdate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             }\n         }\n \n         entityListener.onTransaction(tx);\n         log.debug(\"Storing transaction: {}\", tx);\n \n-        if (NetworkAddressBook.isAddressBook(entityId)) {\n-            networkAddressBook.updateFrom(body);\n+        if (networkAddressBook.isAddressBook(entityId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Mzg3Mg=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODc0NjQyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyNTowN1rOG2Yc1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1Mzo0MlrOG4TWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Njg4NQ==", "bodyText": "insertFileAppend and insertFileUpdate are now unused methods. Not a fan of moving the per type logic from the individual methods to this if statement. Recommend we keep the more self-contained original approach of single line calls to methods that can handle the types. Also because we later want to refactor this into the separate file handler classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459676885", "createdAt": "2020-07-23T19:25:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MDQ0NQ==", "bodyText": "Reverted to the former layout with support for fileData object creation for addressBook case", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461690445", "createdAt": "2020-07-28T15:53:42Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3Njg4NQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODc2MjU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTozMDowOVrOG2YnIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyNjoxN1rOG2dqdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3OTUyMA==", "bodyText": "Recommend normalized FileData object be passed to NetworkAddressBook. Can add a field to FileData to indicate create, update or append.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459679520", "createdAt": "2020-07-23T19:30:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileCreate()) {\n-                insertFileData(consensusNs, body.getFileCreate().getContents().toByteArray(),\n-                        txRecord.getReceipt().getFileID());\n+                fileID = txRecord.getReceipt().getFileID();\n+                fileBytes = body.getFileCreate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileUpdate()) {\n-                insertFileUpdate(consensusNs, body.getFileUpdate());\n+                fileID = body.getFileUpdate().getFileID();\n+                fileBytes = body.getFileUpdate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             }\n         }\n \n         entityListener.onTransaction(tx);\n         log.debug(\"Storing transaction: {}\", tx);\n \n-        if (NetworkAddressBook.isAddressBook(entityId)) {\n-            networkAddressBook.updateFrom(body);\n+        if (networkAddressBook.isAddressBook(entityId)) {\n+            networkAddressBook.updateFrom(consensusNs, fileBytes, fileID, isAppendOperation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MjI5Mw==", "bodyText": "Yeah was working towards this, had just added the TransactionType to FileData. Will complete it in next commit.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459762293", "createdAt": "2020-07-23T22:26:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/entity/EntityRecordItemListener.java", "diffHunk": "@@ -150,26 +150,35 @@ public void onItem(RecordItem recordItem) throws ImporterException {\n             insertContractCreateInstance(consensusNs, body.getContractCreateInstance(), txRecord);\n         }\n \n+        FileID fileID = null;\n+        byte[] fileBytes = null;\n+        boolean isAppendOperation = false;\n         if (isSuccessful) {\n             if (body.hasConsensusSubmitMessage()) {\n                 insertConsensusTopicMessage(body.getConsensusSubmitMessage(), txRecord);\n             } else if (body.hasCryptoAddLiveHash()) {\n                 insertCryptoAddLiveHash(consensusNs, body.getCryptoAddLiveHash());\n             } else if (body.hasFileAppend()) {\n-                insertFileAppend(consensusNs, body.getFileAppend());\n+                fileID = body.getFileAppend().getFileID();\n+                fileBytes = body.getFileAppend().getContents().toByteArray();\n+                isAppendOperation = true;\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileCreate()) {\n-                insertFileData(consensusNs, body.getFileCreate().getContents().toByteArray(),\n-                        txRecord.getReceipt().getFileID());\n+                fileID = txRecord.getReceipt().getFileID();\n+                fileBytes = body.getFileCreate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             } else if (body.hasFileUpdate()) {\n-                insertFileUpdate(consensusNs, body.getFileUpdate());\n+                fileID = body.getFileUpdate().getFileID();\n+                fileBytes = body.getFileUpdate().getContents().toByteArray();\n+                insertFileData(consensusNs, fileBytes, fileID);\n             }\n         }\n \n         entityListener.onTransaction(tx);\n         log.debug(\"Storing transaction: {}\", tx);\n \n-        if (NetworkAddressBook.isAddressBook(entityId)) {\n-            networkAddressBook.updateFrom(body);\n+        if (networkAddressBook.isAddressBook(entityId)) {\n+            networkAddressBook.updateFrom(consensusNs, fileBytes, fileID, isAppendOperation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3OTUyMA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg5NDU4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMTozMlrOG2Z4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxMTozMlrOG2Z4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMDM5Mg==", "bodyText": "I understand it was called NodeAdress previously and the protobuf calls it a NodeAddress, but in terms of domain driven design the AddressBook is the aggregate and this class is its dependent child. Any references to this class have to come via the aggregate as this is not a standalone class without the context that the parent provides. As a result, I recommend we call it something that denotes this dependency like AddressBookEntry.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459700392", "createdAt": "2020-07-23T20:11:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/NodeAddress.java", "diffHunk": "@@ -24,24 +24,51 @@\n import java.security.PublicKey;\n import java.security.spec.EncodedKeySpec;\n import java.security.spec.X509EncodedKeySpec;\n-\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n-import lombok.Value;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n import org.apache.commons.codec.binary.Hex;\n \n-@Builder\n-@Value\n+import com.hedera.mirror.importer.converter.EntityIdConverter;\n+import com.hedera.mirror.importer.converter.StringToByteArrayConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n public class NodeAddress {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkwNjg2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNTozM1rOG2aARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NToxMFrOG4TaJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjM0MA==", "bodyText": "Being that this is the aggregate, we should probably model this with @OneToMany and eagerly fetch a list of address book entries directly in the domain. This would reduce the need to use multiple repositories and simplify the code that uses the address book.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459702340", "createdAt": "2020-07-23T20:15:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import com.hedera.mirror.importer.converter.FileIdConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class AddressBook {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTQyOQ==", "bodyText": "Good suggestion. Done", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461691429", "createdAt": "2020-07-28T15:55:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+import com.hedera.mirror.importer.converter.FileIdConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class AddressBook {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMjM0MA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODkxNjI1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxODoyNlrOG2aGFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxODoyNlrOG2aGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMzgyOQ==", "bodyText": "This is too complex. Now that we have the address book in the database we should simply delete or modify the necessary rows there for these tests or use repository mocks.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459703829", "createdAt": "2020-07-23T20:18:26Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -206,10 +217,17 @@ void partialConsensus() throws Exception {\n     @DisplayName(\"Exactly 1/3 consensus\")\n     void oneThirdConsensus() throws Exception {\n         // Remove last node from current 4 node address book\n-        byte[] addressBook = Files.readAllBytes(mirrorProperties.getAddressBookPath());\n+        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+        Resource resource = new ClassPathResource(resourcePath, getClass());\n+        byte[] addressBook = IOUtils.toByteArray(resource.getInputStream());\n         int index = Bytes.lastIndexOf(addressBook, (byte) '\\n');\n         addressBook = Arrays.copyOfRange(addressBook, 0, index);\n-        networkAddressBook.update(addressBook);\n+        networkAddressBook.updateFrom(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODk4NDIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/AbstractRepositoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDozOToxMlrOG2awDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NTo1N1rOG4TcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNDU3Mg==", "bodyText": "I'm not sure why people keep adding repositories here. We don't need to add to the parent class unless multiple children need it, which they currently don't.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459714572", "createdAt": "2020-07-23T20:39:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/AbstractRepositoryTest.java", "diffHunk": "@@ -53,6 +53,10 @@\n     protected TransactionTypeRepository transactionTypeRepository;\n     @Resource\n     protected EntityTypeRepository entityTypeRepository;\n+    @Resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MTk1Mg==", "bodyText": "Reverted and fair point", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461691952", "createdAt": "2020-07-28T15:55:57Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/repository/AbstractRepositoryTest.java", "diffHunk": "@@ -53,6 +53,10 @@\n     protected TransactionTypeRepository transactionTypeRepository;\n     @Resource\n     protected EntityTypeRepository entityTypeRepository;\n+    @Resource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNDU3Mg=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODk4OTk5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo0MDo1OFrOG2azlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo0MDo1OFrOG2azlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNTQ3OA==", "bodyText": "network", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459715478", "createdAt": "2020-07-23T20:40:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA2ODI2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowNToxMlrOG2bi4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowNToxMlrOG2bi4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNzU4Nw==", "bodyText": "As mentioned previously, recommend FileData be only input. nit: Don't like updateFrom, would prefer update(FileData filedata)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459727587", "createdAt": "2020-07-23T21:05:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA3MTIwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowNjowMVrOG2bkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1Nzo1NVrOG4ThgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODAwNw==", "bodyText": "We should not have public methods for tests", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459728007", "createdAt": "2020-07-23T21:06:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MzMxMw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461693313", "createdAt": "2020-07-28T15:57:55Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODAwNw=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA3NDIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowNzowNFrOG2bmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1ODo0OVrOG4Tj4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODUyNQ==", "bodyText": "private or package protected for tests. Though this method should go away when we don't store in memory objects.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459728525", "createdAt": "2020-07-23T21:07:04Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {\n+        // if incomingAddressBook is a match use it if not retrieve last address book for given file from Db\n+        if (incomingAddressBook != null && incomingAddressBook.getFileId().getEntityNum() == fileID.getFileNum()) {\n+            return incomingAddressBook;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findTopByFileIdOrderByConsensusTimestampDesc(EntityId.of(fileID));\n+\n+        return optionalAddressBook.isPresent() ? optionalAddressBook.get() : null;\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        if (incomingAddressBook != null) {\n+\n+            // if address book is complete update end time of previous address book and start time of this\n+            if (incomingAddressBook.isComplete()) {\n+                // retrieve last complete address book for fileID and update endConsensusTimestamp\n+                Optional<AddressBook> addressBook = addressBookRepository\n+                        .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook\n+                                .getFileId());\n+                if (addressBook.isPresent()) {\n+                    addressBookRepository\n+                            .updateEndConsensusTimestamp(addressBook.get()\n+                                    .getConsensusTimestamp(), consensusTimestamp - 1);\n+                }\n+            }\n+\n+            // store address book.\n+            // Potential to also remove incomplete address books entries in the db table\n+            addressBookRepository.save(incomingAddressBook);\n+            log.info(\"Saved new address book to db: {}\", incomingAddressBook);\n+        }\n+    }\n+\n+    private void saveNodeAddresses(long consensusTimestamp) {\n+        // update current node address for matching address file\n+        if (!incomingNodeAddresses.isEmpty()) {\n+            for (NodeAddress nodeAddress : incomingNodeAddresses) {\n+                // set consensusTimestamp\n+                nodeAddress.setConsensusTimestamp(consensusTimestamp);\n+            }\n+\n+            // store node addresses\n+            nodeAddressRepository.saveAll(incomingNodeAddresses);\n+            log.info(\"Saved {} new node address to db: {}\", incomingNodeAddresses.size());\n+\n+            // update currentAddressBook and nodeAddresses for supported addressBook and matching fileID's only\n+            if (isSupportedAddressBookEntityNum(incomingAddressBook.getFileId().getEntityNum())) {\n+                if (currentAddressBook == null || currentAddressBook.getFileId().getId() == incomingAddressBook\n+                        .getFileId().getId()) {\n+\n+                    // update current and reset incoming\n+                    log.info(\"Updating address book in use from {} to {}\", currentAddressBook, incomingAddressBook);\n+                    currentNodeAddresses = new ArrayList(incomingNodeAddresses);\n+                    currentAddressBook = incomingAddressBook.toBuilder().build();\n+                }\n+            }\n+        }\n+    }\n+\n+    public void loadAddressBookFromDB() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MzkyMQ==", "bodyText": "Made private. Method is still necessary as we should be loading from db when picking up address book info for use.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461693921", "createdAt": "2020-07-28T15:58:49Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {\n+        // if incomingAddressBook is a match use it if not retrieve last address book for given file from Db\n+        if (incomingAddressBook != null && incomingAddressBook.getFileId().getEntityNum() == fileID.getFileNum()) {\n+            return incomingAddressBook;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findTopByFileIdOrderByConsensusTimestampDesc(EntityId.of(fileID));\n+\n+        return optionalAddressBook.isPresent() ? optionalAddressBook.get() : null;\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        if (incomingAddressBook != null) {\n+\n+            // if address book is complete update end time of previous address book and start time of this\n+            if (incomingAddressBook.isComplete()) {\n+                // retrieve last complete address book for fileID and update endConsensusTimestamp\n+                Optional<AddressBook> addressBook = addressBookRepository\n+                        .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook\n+                                .getFileId());\n+                if (addressBook.isPresent()) {\n+                    addressBookRepository\n+                            .updateEndConsensusTimestamp(addressBook.get()\n+                                    .getConsensusTimestamp(), consensusTimestamp - 1);\n+                }\n+            }\n+\n+            // store address book.\n+            // Potential to also remove incomplete address books entries in the db table\n+            addressBookRepository.save(incomingAddressBook);\n+            log.info(\"Saved new address book to db: {}\", incomingAddressBook);\n+        }\n+    }\n+\n+    private void saveNodeAddresses(long consensusTimestamp) {\n+        // update current node address for matching address file\n+        if (!incomingNodeAddresses.isEmpty()) {\n+            for (NodeAddress nodeAddress : incomingNodeAddresses) {\n+                // set consensusTimestamp\n+                nodeAddress.setConsensusTimestamp(consensusTimestamp);\n+            }\n+\n+            // store node addresses\n+            nodeAddressRepository.saveAll(incomingNodeAddresses);\n+            log.info(\"Saved {} new node address to db: {}\", incomingNodeAddresses.size());\n+\n+            // update currentAddressBook and nodeAddresses for supported addressBook and matching fileID's only\n+            if (isSupportedAddressBookEntityNum(incomingAddressBook.getFileId().getEntityNum())) {\n+                if (currentAddressBook == null || currentAddressBook.getFileId().getId() == incomingAddressBook\n+                        .getFileId().getId()) {\n+\n+                    // update current and reset incoming\n+                    log.info(\"Updating address book in use from {} to {}\", currentAddressBook, incomingAddressBook);\n+                    currentNodeAddresses = new ArrayList(incomingNodeAddresses);\n+                    currentAddressBook = incomingAddressBook.toBuilder().build();\n+                }\n+            }\n+        }\n+    }\n+\n+    public void loadAddressBookFromDB() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyODUyNQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 368}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTA4NDAyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxMDozNlrOG2bswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo0MDo0NFrOG4VPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDExMw==", "bodyText": "You said you removed the filesystem address book but this is still present. It should be removed and mirrorProperties.getAddressBookPath() also removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459730113", "createdAt": "2020-07-23T21:10:36Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2Mzk1OA==", "bodyText": "I understood it as a single backup scenario of 1st start. Load file file system if not present then form classpath.\nIf fileSystem addressBook and classPath are the same then yeah makes sense to totally remove this remaining filesystem one.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459763958", "createdAt": "2020-07-23T22:30:51Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDExMw=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MTkxMA==", "bodyText": "Loading from filesystem or from classpath should only occur on very first start of this release (e.g. migration). And the filesystem load should only be from initialAddressBookPath not data path.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459771910", "createdAt": "2020-07-23T22:54:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDExMw=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMTQ2MQ==", "bodyText": "Gotcha. Non db loading is now just on initial start if no address book is returned from db and loads from initialPath/classpath in that order", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461721461", "createdAt": "2020-07-28T16:40:44Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDExMw=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEwNDcxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxNzo1OVrOG2b52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoxNDozM1rOG4UN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzQ2NA==", "bodyText": "We should not store address books (current or incoming) or list of node addresses (current or incoming) in memory. Everything should be stored in the database. Besides making the code more complex to understand and maintain, it is functionally wrong since if we restart the importer between a fileupdate and a fileappend it will be lost. This was why we had the tmp file previously to ensure no loss of data during this gap.\nIf we need to cache some repository methods to make them performant then we should do so.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459733464", "createdAt": "2020-07-23T21:17:59Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTM1Ng==", "bodyText": "Yeah wanted to reduce the number of db calls\nCaching is a good solution and given address book updates are rare the optimization I had in mind to manage updates across files might not be as valuable as first thought.\nNotably. the logic does cover the case of importer going down between update and append. The in memory values are set based n db reads and confirmed writes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459765356", "createdAt": "2020-07-23T22:34:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzQ2NA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwNDY4Nw==", "bodyText": "Agreed on storing every address book file in db.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461704687", "createdAt": "2020-07-28T16:14:33Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMzQ2NA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTExMDkzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMDowM1rOG2b9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzo0MjowOFrOG2fKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDQxNQ==", "bodyText": "I believe this entire method goes away and moves to a database migration.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459734415", "createdAt": "2020-07-23T21:20:03Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4Njc4Ng==", "bodyText": "Yeah goes away.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459786786", "createdAt": "2020-07-23T23:42:08Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDQxNQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTExNzIzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMjowMVrOG2cBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoyMzowN1rOG4UjoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTM1OA==", "bodyText": "Instead of having two public methods where the call to the second is conditional on the first returning true, we should move isAddressBook into updateFrom. This would better encapsulate this logic.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459735358", "createdAt": "2020-07-23T21:22:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxMDI0MQ==", "bodyText": "update is no longer calling isAddressBook", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461710241", "createdAt": "2020-07-28T16:23:07Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTM1OA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEyMTUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMzoxMlrOG2cDoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoyMzo1OFrOG4UmAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTk2OQ==", "bodyText": "Since we're now dealing with an address book domain, would recommend renaming to AddressBookServiceImpl and an AddressBookService interface created.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459735969", "createdAt": "2020-07-23T21:23:12Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxMDg0OQ==", "bodyText": "Applied suggestion", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461710849", "createdAt": "2020-07-28T16:23:58Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNTk2OQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTEzMzM4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyNzoxNFrOG2cK2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjo0MjozNlrOG2hoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNzgxNw==", "bodyText": "This does not parse the fields from the 101 file (node cert hash, etc)", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459737817", "createdAt": "2020-07-23T21:27:14Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {\n+        // if incomingAddressBook is a match use it if not retrieve last address book for given file from Db\n+        if (incomingAddressBook != null && incomingAddressBook.getFileId().getEntityNum() == fileID.getFileNum()) {\n+            return incomingAddressBook;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findTopByFileIdOrderByConsensusTimestampDesc(EntityId.of(fileID));\n+\n+        return optionalAddressBook.isPresent() ? optionalAddressBook.get() : null;\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNzI4OQ==", "bodyText": "Missed nodeCertHash, nodeId and nodeAccountId. Updated.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459827289", "createdAt": "2020-07-24T02:42:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {\n+        // if incomingAddressBook is a match use it if not retrieve last address book for given file from Db\n+        if (incomingAddressBook != null && incomingAddressBook.getFileId().getEntityNum() == fileID.getFileNum()) {\n+            return incomingAddressBook;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findTopByFileIdOrderByConsensusTimestampDesc(EntityId.of(fileID));\n+\n+        return optionalAddressBook.isPresent() ? optionalAddressBook.get() : null;\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNzgxNw=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE2NTYyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTozODo1OFrOG2ce9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoyNjoxOFrOG4UsYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Mjk2NA==", "bodyText": "I think we can greatly simplify this class if we always pull the bytes from the file data table. We wouldn't need to have partial address books in the database or an is_complete flag and can just keep the bytes in file data until we get that last filecreate/fileupdate/fileappend that parses. It also makes it easier for readers of the address book to understand that they are only present if valid. Also allows us to be insert only and make fields as non-null like end timestamp.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459742964", "createdAt": "2020-07-23T21:38:58Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4OTE3OA==", "bodyText": "Fair point. I was going for insert only. Challenge is file_data is updated as part of batching, this is sort of like a pitstop before that logic happens so the byte[] contents won't actually be in file_data table yet.\nThat's not a problem though if I know when the first update occurred as I can query fileRepository from then till now and concatenate all the bytes including this and store the address book.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459789178", "createdAt": "2020-07-23T23:50:28Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Mjk2NA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxMjQ4Mw==", "bodyText": "Updated. address_book is only updated with complete entries. file_data will be updated with all address book files regardless", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461712483", "createdAt": "2020-07-28T16:26:18Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Mjk2NA=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE3MTQ0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0MDo0OFrOG2ciWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0MDo0OFrOG2ciWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MzgzMw==", "bodyText": "This method goes away if you nest List<AddressBookEntry> entries in AddressBook as suggested. Then you can cascade the persist in one call to addressBookRepository.save(incomingAddressBook).", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459743833", "createdAt": "2020-07-23T21:40:48Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/NetworkAddressBook.java", "diffHunk": "@@ -21,152 +21,309 @@\n  */\n \n import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.FileID;\n import com.hederahashgraph.api.proto.java.NodeAddressBook;\n-import com.hederahashgraph.api.proto.java.TransactionBody;\n import java.io.File;\n-import java.io.IOException;\n import java.nio.file.Files;\n-import java.nio.file.OpenOption;\n import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Optional;\n import javax.inject.Named;\n import lombok.extern.log4j.Log4j2;\n import org.apache.commons.io.IOUtils;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n \n import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n import com.hedera.mirror.importer.domain.EntityId;\n import com.hedera.mirror.importer.domain.EntityTypeEnum;\n import com.hedera.mirror.importer.domain.NodeAddress;\n-import com.hedera.mirror.importer.exception.ParserException;\n-import com.hedera.mirror.importer.util.Utility;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.NodeAddressRepository;\n \n @Log4j2\n @Named\n public class NetworkAddressBook {\n-\n     private final MirrorProperties mirrorProperties;\n-    private volatile Collection<NodeAddress> nodeAddresses;\n+    private final AddressBookRepository addressBookRepository;\n+    private final NodeAddressRepository nodeAddressRepository;\n+\n+    private volatile Collection<NodeAddress> currentNodeAddresses;\n+    private volatile Collection<NodeAddress> incomingNodeAddresses;\n+    private volatile AddressBook currentAddressBook;\n+    private volatile AddressBook incomingAddressBook;\n+    private final Path addressBookPath;\n \n-    public NetworkAddressBook(MirrorProperties mirrorProperties) {\n+    public NetworkAddressBook(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                              NodeAddressRepository nodeAddressRepository) {\n         this.mirrorProperties = mirrorProperties;\n-        nodeAddresses = Collections.emptyList();\n+        this.addressBookRepository = addressBookRepository;\n+        this.nodeAddressRepository = nodeAddressRepository;\n+        currentNodeAddresses = Collections.emptyList();\n+        incomingNodeAddresses = Collections.emptyList();\n+        currentAddressBook = null;\n+        incomingAddressBook = null;\n+        addressBookPath = mirrorProperties.getAddressBookPath();\n         init();\n     }\n \n-    public static boolean isAddressBook(EntityId entityId) {\n-        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId()\n-                && entityId.getEntityNum() == 102 && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == mirrorProperties\n+                        .getAddressBookFileIdEntityNum())\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n     }\n \n-    public void updateFrom(TransactionBody transactionBody) {\n+    public void updateFrom(long consensusTimeStamp, byte[] contents, FileID fileID, boolean isAppendOperation) {\n+        if (contents == null || contents.length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n         try {\n-            if (transactionBody.hasFileAppend()) {\n-                append(transactionBody.getFileAppend().getContents().toByteArray());\n-            } else if (transactionBody.hasFileUpdate()) {\n-                update(transactionBody.getFileUpdate().getContents().toByteArray());\n-            }\n-        } catch (IOException e) {\n-            throw new ParserException(\"Error appending to network address book\", e);\n+            parse(contents, consensusTimeStamp, fileID, isAppendOperation);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n         }\n+\n+        persistAddressBookToDB(consensusTimeStamp);\n     }\n \n     public Collection<NodeAddress> getAddresses() {\n-        return nodeAddresses;\n+        return currentNodeAddresses;\n+    }\n+\n+    public AddressBook getCurrentAddressBook() {\n+        return currentAddressBook;\n+    }\n+\n+    public AddressBook getPartialAddressBook() {\n+        return incomingAddressBook;\n+    }\n+\n+    private boolean isSupportedAddressBookEntityNum(long entityNum) {\n+        return mirrorProperties.getAddressBookFileIdEntityNum() == entityNum;\n     }\n \n     private void init() {\n-        Path path = mirrorProperties.getAddressBookPath();\n-        try {\n-            File addressBookFile = path.toFile();\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n \n-            if (!addressBookFile.canRead()) {\n-                if (addressBookFile.exists()) {\n-                    log.warn(\"Backing up unreadable address book: {}\", path);\n-                    Files.move(path, path.resolveSibling(path + \".unreadable\"));\n-                }\n+        if (currentAddressBook == null) {\n+            // no addressBook present in db, load from fileSystem\n+            byte[] addressBookBytes = null;\n+            try {\n+                File addressBookFile = addressBookPath.toFile();\n \n-                byte[] addressBookBytes = null;\n-                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (!addressBookFile.canRead()) {\n+                    if (addressBookFile.exists()) {\n+                        log.warn(\"Backing up unreadable address book: {}\", addressBookPath);\n+                        Files.move(addressBookPath, addressBookPath.resolveSibling(addressBookPath + \".unreadable\"));\n+                    }\n \n-                if (initialAddressBook != null) {\n-                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n-                    log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+\n+                    if (initialAddressBook != null) {\n+                        addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                        log.info(\"Loading bootstrap address book from {}\", initialAddressBook);\n+                    } else {\n+                        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                        String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                        Resource resource = new ClassPathResource(resourcePath, getClass());\n+                        addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                        log.info(\"Loading bootstrap address book from {}\", resource);\n+                    }\n                 } else {\n-                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n-                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n-                    Resource resource = new ClassPathResource(resourcePath, getClass());\n-                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n-                    log.info(\"Loading bootstrap address book from {}\", resource);\n+                    log.info(\"Restoring existing address book {}\", addressBookPath);\n+                    addressBookBytes = Files.readAllBytes(addressBookPath);\n                 }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(String\n+                        .format(\"Unable to load valid address book from %s\", addressBookPath));\n+            }\n \n-                Utility.ensureDirectory(path.getParent());\n-                update(addressBookBytes);\n-            } else {\n-                log.info(\"Restoring existing address book {}\", path);\n-                update(Files.readAllBytes(path));\n+            try {\n+                parse(addressBookBytes, 0L, FileID.newBuilder()\n+                        .setShardNum(mirrorProperties.getShard()).setRealmNum(0)\n+                        .setFileNum(mirrorProperties.getAddressBookFileIdEntityNum()).build(), false);\n+                persistAddressBookToDB(0);\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n             }\n-        } catch (Exception e) {\n-            log.error(\"Unable to copy address book from {} to {}\", mirrorProperties.getNetwork(), path, e);\n+        } else {\n+            // addressBook loaded from db\n+            log.info(\"Loaded addressBook details from DB. Valid from {}, {} nodes, fileSize {} B\",\n+                    currentAddressBook.getStartConsensusTimestamp(), currentAddressBook.getNodeCount(),\n+                    currentAddressBook.getFileData().length);\n         }\n \n         if (getAddresses().isEmpty()) {\n-            throw new IllegalStateException(\"Unable to load a valid address book\");\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n         }\n     }\n \n-    public void update(byte[] newContents) throws IOException {\n-        saveToDisk(newContents, StandardOpenOption.TRUNCATE_EXISTING);\n-    }\n+    private void parse(byte[] contents, Long consensusTimestamp, FileID fileID, boolean append) throws Exception {\n+        byte[] addressBookBytes = null;\n+        if (append) {\n+            // concatenate bytes for impartial address books\n+            AddressBook addressBook = getPreviousAddressBookToAppendTo(fileID);\n \n-    private void append(byte[] extraContents) throws IOException {\n-        saveToDisk(extraContents, StandardOpenOption.APPEND);\n+            if (addressBook != null) {\n+                byte[] incompleteBytes = addressBook.getFileData();\n+                byte[] combinedBytes = new byte[incompleteBytes.length + contents.length];\n+                System.arraycopy(incompleteBytes, 0, combinedBytes, 0, incompleteBytes.length);\n+                System.arraycopy(contents, 0, combinedBytes, incompleteBytes.length, contents.length);\n+                addressBookBytes = combinedBytes;\n+                log.info(\"Combined incomplete addressBook from {} of size {} B with bytes from {} of {} B. Combined \" +\n+                                \"length is {}\", addressBook.getConsensusTimestamp(), incompleteBytes.length,\n+                        consensusTimestamp, contents.length, combinedBytes.length);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = contents;\n+        }\n+\n+        retrieveAddressBook(addressBookBytes, consensusTimestamp, fileID);\n     }\n \n-    private void saveToDisk(byte[] contents, OpenOption openOption) throws IOException {\n-        if (contents == null || contents.length == 0) {\n-            log.warn(\"Ignored empty byte array\");\n-            return;\n+    private AddressBook getPreviousAddressBookToAppendTo(FileID fileID) {\n+        // if incomingAddressBook is a match use it if not retrieve last address book for given file from Db\n+        if (incomingAddressBook != null && incomingAddressBook.getFileId().getEntityNum() == fileID.getFileNum()) {\n+            return incomingAddressBook;\n         }\n \n-        Path path = mirrorProperties.getAddressBookPath();\n-        Path tempPath = path.resolveSibling(path.getFileName() + \".tmp\");\n-        Files.write(tempPath, contents, StandardOpenOption.CREATE, StandardOpenOption.WRITE, openOption);\n-        log.info(\"Saved {}B partial address book update to {}\", contents.length, tempPath);\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findTopByFileIdOrderByConsensusTimestampDesc(EntityId.of(fileID));\n+\n+        return optionalAddressBook.isPresent() ? optionalAddressBook.get() : null;\n+    }\n+\n+    private void retrieveAddressBook(byte[] addressBookBytes, long consensusTimestamp, FileID fileID) {\n+        AddressBook.AddressBookBuilder builder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(EntityId.of(fileID));\n \n         try {\n-            Collection<NodeAddress> nodeAddresses = parse(tempPath);\n-            if (!nodeAddresses.isEmpty()) {\n-                Files.move(tempPath, path, StandardCopyOption.REPLACE_EXISTING);\n-                this.nodeAddresses = nodeAddresses;\n-                log.info(\"New address book with {} addresses successfully parsed and saved to {}\",\n-                        nodeAddresses.size(), path);\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+                builder\n+                        .isComplete(true)\n+                        .nodeCount(nodeAddressBook.getNodeAddressCount())\n+                        .startConsensusTimestamp(consensusTimestamp);\n+\n+                Collection<NodeAddress> nodeAddresses = retrieveNodeAddressesFromAddressBook(nodeAddressBook);\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    incomingNodeAddresses = nodeAddresses;\n+                }\n             }\n         } catch (Exception e) {\n             log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            incomingNodeAddresses = Collections.emptyList();\n         }\n+\n+        incomingAddressBook = builder.build();\n     }\n \n-    private Collection<NodeAddress> parse(Path path) throws Exception {\n-        byte[] addressBookBytes = Files.readAllBytes(path);\n-        NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+    private Collection<NodeAddress> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook) {\n         ImmutableList.Builder<NodeAddress> builder = ImmutableList.builder();\n \n-        for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n-                .getNodeAddressList()) {\n-            NodeAddress nodeAddress = NodeAddress.builder()\n-                    .id(nodeAddressProto.getMemo().toStringUtf8())\n-                    .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n-                    .port(nodeAddressProto.getPortno())\n-                    .publicKey(nodeAddressProto.getRSAPubKey())\n-                    .build();\n-            builder.add(nodeAddress);\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                NodeAddress nodeAddress = NodeAddress.builder()\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .build();\n+                builder.add(nodeAddress);\n+            }\n         }\n \n         return builder.build();\n     }\n+\n+    private void persistAddressBookToDB(long consensusTimestamp) {\n+        // store complete address book\n+        saveAddressBook(consensusTimestamp);\n+\n+        // store node addresses\n+        saveNodeAddresses(consensusTimestamp);\n+    }\n+\n+    private void saveAddressBook(long consensusTimestamp) {\n+        if (incomingAddressBook != null) {\n+\n+            // if address book is complete update end time of previous address book and start time of this\n+            if (incomingAddressBook.isComplete()) {\n+                // retrieve last complete address book for fileID and update endConsensusTimestamp\n+                Optional<AddressBook> addressBook = addressBookRepository\n+                        .findTopByFileIdAndIsCompleteIsTrueOrderByConsensusTimestampDesc(incomingAddressBook\n+                                .getFileId());\n+                if (addressBook.isPresent()) {\n+                    addressBookRepository\n+                            .updateEndConsensusTimestamp(addressBook.get()\n+                                    .getConsensusTimestamp(), consensusTimestamp - 1);\n+                }\n+            }\n+\n+            // store address book.\n+            // Potential to also remove incomplete address books entries in the db table\n+            addressBookRepository.save(incomingAddressBook);\n+            log.info(\"Saved new address book to db: {}\", incomingAddressBook);\n+        }\n+    }\n+\n+    private void saveNodeAddresses(long consensusTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE4NTk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0NTo0MFrOG2cq9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToyMDoyOVrOG5Pp0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjAzOQ==", "bodyText": "Not sure it makes sense to have consensus_timestamp in this table as this data comes from a blob that potentially spans transactions. It makes more sense to have a foreign key back to address_book table instead.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459746039", "createdAt": "2020-07-23T21:45:40Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null,\n+    is_complete                 boolean         not null default false\n+);\n+\n+create index if not exists address_book__fileId_isComplete\n+    on address_book (file_id, is_complete);\n+\n+-- add node address table\n+create table if not exists node_address\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4OTQ2NA==", "bodyText": "Good idea", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459789464", "createdAt": "2020-07-23T23:51:30Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null,\n+    is_complete                 boolean         not null default false\n+);\n+\n+create index if not exists address_book__fileId_isComplete\n+    on address_book (file_id, is_complete);\n+\n+-- add node address table\n+create table if not exists node_address\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjAzOQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3ODQ4Mw==", "bodyText": "Removed addition of constraint and defined foreign key in the table directly", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462678483", "createdAt": "2020-07-30T01:20:29Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,42 @@\n+-------------------\n+-- Support db storage of netowrk address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null,\n+    is_complete                 boolean         not null default false\n+);\n+\n+create index if not exists address_book__fileId_isComplete\n+    on address_book (file_id, is_complete);\n+\n+-- add node address table\n+create table if not exists node_address\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NjAzOQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE5MTU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0NzozOVrOG2cuSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoyNzozOFrOG4Uvyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Njg5MQ==", "bodyText": "Most of these methods go away with my other suggestions.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r459746891", "createdAt": "2020-07-23T21:47:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(\"from AddressBook where consensusTimestamp <= ?1 and fileId = ?2 and isComplete = true order by \" +\n+            \"consensusTimestamp asc\")\n+    List<AddressBook> findCompleteAddressBooks(long consensusTimestamp, EntityId fileId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxMzM1NA==", "bodyText": "Some, but had to add more for migrate flow", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461713354", "createdAt": "2020-07-28T16:27:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(\"from AddressBook where consensusTimestamp <= ?1 and fileId = ?2 and isComplete = true order by \" +\n+            \"consensusTimestamp asc\")\n+    List<AddressBook> findCompleteAddressBooks(long consensusTimestamp, EntityId fileId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0Njg5MQ=="}, "originalCommit": {"oid": "1159393216a6b7fdc3b26617b1afd2c36c70047e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzU5MTgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozMjowMlrOG4fqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToyMjo1NlrOG5PsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MjE3NQ==", "bodyText": "Having an index on a field with only two potential values (101 and 102) is not useful", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461892175", "createdAt": "2020-07-28T21:32:02Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTA5Ng==", "bodyText": "Yeah, initially I designed it with the capability to expand on fileID's so yeah this is no longer needed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462679096", "createdAt": "2020-07-30T01:22:56Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MjE3NQ=="}, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzU5Nzc2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozNDowNlrOG4fuDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToyMzo1NFrOG5PtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MzEzNQ==", "bodyText": "I think int would be better for when we go permissionless and doesn't add too much storage for such a small table.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461893135", "createdAt": "2020-07-28T21:34:06Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTMzMQ==", "bodyText": "Fair point", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462679331", "createdAt": "2020-07-30T01:23:54Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MzEzNQ=="}, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYwMjIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozNTozMFrOG4fwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToyODowNFrOG5PxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MzgyNQ==", "bodyText": "Are we sure 101 has a memo? Memo is deprecated and they might not populate it in the future. We should probably not force it to be not null", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461893825", "createdAt": "2020-07-28T21:35:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MDQzNg==", "bodyText": "Correct, 101 deprecate memo so yeah it shouldn't be forced to have an entry.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462680436", "createdAt": "2020-07-30T01:28:04Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5MzgyNQ=="}, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzYxMTEyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTozODo1NFrOG4f2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzozOToyMFrOG5tNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTI2OQ==", "bodyText": "It would be cleaner to return EntityId and clients can convert to string only if needed.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461895269", "createdAt": "2020-07-28T21:38:54Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "diffHunk": "@@ -52,4 +78,8 @@ public PublicKey getPublicKeyAsObject() {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    public String getNodeAccountId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4NDYxNw==", "bodyText": "getNodeAccountId() already returns EntityId and clients are calling it as needed.\nThis method exists to manage the 2 different address books where NodeAccountId may be null and the account Id is stated in the memo. e.g. NodeSignatureVerifier constructor and Downloader.downloadSigFiles()\nIn that case it's cleaner to have that logic centralized here.\nPlease clarify if you are referring to other scenarios", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462684617", "createdAt": "2020-07-30T01:41:19Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "diffHunk": "@@ -52,4 +78,8 @@ public PublicKey getPublicKeyAsObject() {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    public String getNodeAccountId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTI2OQ=="}, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2MjgwMQ==", "bodyText": "Circling back I understand the notion and agree getNodeAccountId() should return EntityId.\nWill add an extra getNodeAccountIdString() to return the desired String representation", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463162801", "createdAt": "2020-07-30T17:39:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "diffHunk": "@@ -52,4 +78,8 @@ public PublicKey getPublicKeyAsObject() {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    public String getNodeAccountId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg5NTI2OQ=="}, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzY5NTQ4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1NToyOFrOG4goIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTo1NToyOFrOG4goIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkwODAwMw==", "bodyText": "nit: Would prefer addressBook.getEntries() instead of redundant within context addressBook.getAddressBookEntries().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r461908003", "createdAt": "2020-07-28T21:55:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.FileIdConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@ToString(exclude = {\"fileData\"})\n+public class AddressBook implements Persistable<Long> {\n+    @Id\n+    private Long consensusTimestamp; // transaction consensusTimestamp\n+\n+    private Long startConsensusTimestamp; // first transaction parsed with this address book\n+\n+    private Long endConsensusTimestamp; // consensusTimestamp 1 ns prior to next address book startConsensusTimestamp\n+\n+    @Convert(converter = FileIdConverter.class)\n+    private EntityId fileId;\n+\n+    private Integer nodeCount;\n+\n+    private byte[] fileData;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"consensusTimestamp\")\n+    private List<AddressBookEntry> addressBookEntries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea6a08866f4e8adf7cb0bfff4403b9a00be7724"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzE3MDgwOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1NTo1MFrOG5BfXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1NTo1MFrOG5BfXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NjQyOA==", "bodyText": "AddressBook is the aggregate and we should return that for our API. Also we should indicate this is the current in method. Recommend AddressBook getCurrent() so that it's clear when invoking addressBookService.getCurrent().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462446428", "createdAt": "2020-07-29T16:55:50Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookService.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.Collection;\n+\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.FileData;\n+\n+public interface AddressBookService {\n+\n+    boolean isAddressBook(EntityId entityId);\n+\n+    void update(FileData fileData);\n+\n+    Collection<AddressBookEntry> getAddresses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzE4MTIxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1ODozOVrOG5BmBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyNDo1M1rOG5UvRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0ODEzNQ==", "bodyText": "Should still probably check isAddressBook here even if it's also done elsewhere to ensure correctness for future users of this method.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462448135", "createdAt": "2020-07-29T16:58:39Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MTc5OA==", "bodyText": "Had put the check in parse() will move it up into update()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462761798", "createdAt": "2020-07-30T06:24:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0ODEzNQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzE4MjczOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1OTowMVrOG5Bm9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjo1OTowMVrOG5Bm9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0ODM3Mw==", "bodyText": "I think we can print the full stacktrace since we already catch and log the common scenario of partial address book elsewhere.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462448373", "createdAt": "2020-07-29T16:59:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI2MDcyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxOTo0MlrOG5CYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0MToyNVrOG5tR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MTAxNw==", "bodyText": "Again, we should not store data in memory even for caching purposes. The more places you have data the more likely they are to be out of sync. We should rely on frameworks to provide caching like @Cacheable on a repository method or the service method if it makes sense there.\nCase in point, this addressBookEntries is currently not changed on calls to update() and only populated on startup.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462461017", "createdAt": "2020-07-29T17:19:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMjYwNg==", "bodyText": "This retains the logic that existed which had private volatile Collection<NodeAddress> nodeAddresses; before.\nMore importantly this is by design, addressBookEntries should not be updated on update() or during the running session of the Importer. Rather, we should only apply the update on startup.\nAddress book changes from the network are currently sent right before a network FREEZE during maintenance.\nThe address book update should only be applied after the network has been restarted.\nSince maintenance times are variable, the expectation is that mirror node should also be restarted to take any address book  changes.\nOnce the details the Connect are hashed out on the network we can then figure out the right approach to take address book changes from the mirror node within a session.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462712606", "createdAt": "2020-07-30T03:27:37Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MTAxNw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2MzkwMw==", "bodyText": "Circling back on this.\nIndeed no need to cache in memory AddressBook for now. Will update to make repository call to get latest address book from DB. If performance becomes an issue we can explore caching in a future PR as the call will be made once per record file", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463163903", "createdAt": "2020-07-30T17:41:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MTAxNw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI3NzY5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyNDoxOFrOG5CjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0MjozMlrOG5tUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MzgxOQ==", "bodyText": "Again, this whole method goes away. Loading from the classpath or the filesystem should be handled by the migration and done once (not once per startup). From then on the database is the source of truth.\nYour current implementation is wrong because it repeatedly reloads from classpath/filesystem on startup, completely ignoring the addressbook in the database. So clients will always get the initial address book and not the latest.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462463819", "createdAt": "2020-07-29T17:24:18Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMzc2Mg==", "bodyText": "The current logic does not \"repeatedly reload from classpath/filesystem on startup\". It specifically checks the DB first. It only loads from the filesystem/classpath as a back up if no valid address book is retrieved from the DB, which is expected on 1st startup. I even added tests to ensure this is the case.\nHowever, I fully agree it would be an improvement to move the filePath/classpath load to the migration and only ever pull from the DB in this class. I'll make that change", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462713762", "createdAt": "2020-07-30T03:32:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MzgxOQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4MDgxMw==", "bodyText": "Moved logic to migration. Preserved the classpath load for now as removing it creates a huge fallout in many tests since the repository won't contain a valid address book at start as most tests clear the db before and after test methods.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462780813", "createdAt": "2020-07-30T06:56:40Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MzgxOQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NDQ5NQ==", "bodyText": "Circling back. With no in memory representation indeed the init() is no longer needed on startup as migration will cover populating the db with at least the bootstrap version", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463164495", "createdAt": "2020-07-30T17:42:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2MzgxOQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI4NTY4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyNjoxOVrOG5CoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOToxNjozMlrOG5a9Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NTA4MA==", "bodyText": "Might make sense to have helper methods like fileData.isAppend()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462465080", "createdAt": "2020-07-29T17:26:19Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDIxNw==", "bodyText": "Good idea", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462714217", "createdAt": "2020-07-30T03:34:20Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NTA4MA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2MzcwMw==", "bodyText": "Tried to go for isAppend() but kept getting Hibernate issues looking for the append column. @Transient wasn't honored so I went with a transactionTypeIsAppend().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462863703", "createdAt": "2020-07-30T09:16:32Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NTA4MA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI5MDI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyNzozMFrOG5Cq-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzowMjoyNFrOG5WKfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NTc4NQ==", "bodyText": "Once you remove init(), this if statement is duplicated by similar check in update()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462465785", "createdAt": "2020-07-29T17:27:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4NTE0OA==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462785148", "createdAt": "2020-07-30T07:02:24Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NTc4NQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzI5NDg0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoyODo1NVrOG5Ct9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozNDowNlrOG5R1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NjU0OA==", "bodyText": "nit: Not much point to a two line method that's not reused.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462466548", "createdAt": "2020-07-29T17:28:55Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                bos.write(firstPartialAddressBook.getFileData());\n+                for (int i = 0; i < appendFileDataEntries.size(); i++) {\n+                    bos.write(appendFileDataEntries.get(i).getFileData());\n+                }\n+\n+                bos.write(fileData.getFileData());\n+                combinedBytes = bos.toByteArray();\n+            } catch (Exception ex) {\n+                log.error(\"Error concatenating partial address book fileData entries\", ex);\n+            }\n+        }\n+\n+        return combinedBytes;\n+    }\n+\n+    private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTimestamp, EntityId fileID) {\n+        AddressBook.AddressBookBuilder addressBookBuilder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(fileID);\n+\n+        try {\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    addressBookBuilder.nodeCount(nodeAddressBook.getNodeAddressCount());\n+                    Collection<AddressBookEntry> addressBookEntryCollection =\n+                            retrieveNodeAddressesFromAddressBook(nodeAddressBook, consensusTimestamp);\n+\n+                    addressBookBuilder.addressBookEntries((List<AddressBookEntry>) addressBookEntryCollection);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            return null;\n+        }\n+\n+        return addressBookBuilder.build();\n+    }\n+\n+    private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n+                                                                              long consensusTimestamp) {\n+        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n+\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n+                        .consensusTimestamp(consensusTimestamp)\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n+                        .nodeId(nodeAddressProto.getNodeId())\n+                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n+                        .build();\n+                builder.add(addressBookEntry);\n+            }\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private void saveAddressBook(AddressBook addressBook) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDE2MA==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462714160", "createdAt": "2020-07-30T03:34:06Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                bos.write(firstPartialAddressBook.getFileData());\n+                for (int i = 0; i < appendFileDataEntries.size(); i++) {\n+                    bos.write(appendFileDataEntries.get(i).getFileData());\n+                }\n+\n+                bos.write(fileData.getFileData());\n+                combinedBytes = bos.toByteArray();\n+            } catch (Exception ex) {\n+                log.error(\"Error concatenating partial address book fileData entries\", ex);\n+            }\n+        }\n+\n+        return combinedBytes;\n+    }\n+\n+    private AddressBook buildAddressBook(byte[] addressBookBytes, long consensusTimestamp, EntityId fileID) {\n+        AddressBook.AddressBookBuilder addressBookBuilder = AddressBook.builder()\n+                .fileData(addressBookBytes)\n+                .consensusTimestamp(consensusTimestamp)\n+                .fileId(fileID);\n+\n+        try {\n+            NodeAddressBook nodeAddressBook = NodeAddressBook.parseFrom(addressBookBytes);\n+            if (nodeAddressBook != null) {\n+\n+                if (nodeAddressBook.getNodeAddressCount() > 0) {\n+                    addressBookBuilder.nodeCount(nodeAddressBook.getNodeAddressCount());\n+                    Collection<AddressBookEntry> addressBookEntryCollection =\n+                            retrieveNodeAddressesFromAddressBook(nodeAddressBook, consensusTimestamp);\n+\n+                    addressBookBuilder.addressBookEntries((List<AddressBookEntry>) addressBookEntryCollection);\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+            return null;\n+        }\n+\n+        return addressBookBuilder.build();\n+    }\n+\n+    private Collection<AddressBookEntry> retrieveNodeAddressesFromAddressBook(NodeAddressBook nodeAddressBook,\n+                                                                              long consensusTimestamp) {\n+        ImmutableList.Builder<AddressBookEntry> builder = ImmutableList.builder();\n+\n+        if (nodeAddressBook != null) {\n+            for (com.hederahashgraph.api.proto.java.NodeAddress nodeAddressProto : nodeAddressBook\n+                    .getNodeAddressList()) {\n+                AddressBookEntry addressBookEntry = AddressBookEntry.builder()\n+                        .consensusTimestamp(consensusTimestamp)\n+                        .memo(nodeAddressProto.getMemo().toStringUtf8())\n+                        .ip(nodeAddressProto.getIpAddress().toStringUtf8())\n+                        .port(nodeAddressProto.getPortno())\n+                        .publicKey(nodeAddressProto.getRSAPubKey())\n+                        .nodeCertHash(nodeAddressProto.getNodeCertHash().toByteArray())\n+                        .nodeId(nodeAddressProto.getNodeId())\n+                        .nodeAccountId(EntityId.of(nodeAddressProto.getNodeAccountId()))\n+                        .build();\n+                builder.add(addressBookEntry);\n+            }\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private void saveAddressBook(AddressBook addressBook) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ2NjU0OA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzM5Nzk3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1NTo0NVrOG5Dtqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo1NTo0NVrOG5Dtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4Mjg1OA==", "bodyText": "return ADDRESS_BOOK_101_ENTITY_ID.equals(entityId) || ADDRESS_BOOK_102_ENTITY_ID.equals(entityId);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462482858", "createdAt": "2020-07-29T17:55:45Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxODM0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MzoxNlrOG5Jv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOToyN1rOG5R6Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTc1Nw==", "bodyText": "It looks like if we get a fileappend without a corresponding create or update, we still create an address book entry and it will have null bytes. This probably shouldn't happen, but we should probably handle and throw an error.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462581757", "createdAt": "2020-07-29T20:53:16Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTQ2Mw==", "bodyText": "Good point. Engineering assured me an append will always follow a create / update but you're right it's good to check for it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462715463", "createdAt": "2020-07-30T03:39:27Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTc1Nw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODA1OTM2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowNTowN1rOG5KJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0NjozOFrOG5SBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4ODI1MQ==", "bodyText": "Probably shouldn't swallow this error", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462588251", "createdAt": "2020-07-29T21:05:07Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                bos.write(firstPartialAddressBook.getFileData());\n+                for (int i = 0; i < appendFileDataEntries.size(); i++) {\n+                    bos.write(appendFileDataEntries.get(i).getFileData());\n+                }\n+\n+                bos.write(fileData.getFileData());\n+                combinedBytes = bos.toByteArray();\n+            } catch (Exception ex) {\n+                log.error(\"Error concatenating partial address book fileData entries\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNzI4NQ==", "bodyText": "Will throw new InvalidDatasetException", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462717285", "createdAt": "2020-07-30T03:46:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                bos.write(firstPartialAddressBook.getFileData());\n+                for (int i = 0; i < appendFileDataEntries.size(); i++) {\n+                    bos.write(appendFileDataEntries.get(i).getFileData());\n+                }\n+\n+                bos.write(fileData.getFileData());\n+                combinedBytes = bos.toByteArray();\n+            } catch (Exception ex) {\n+                log.error(\"Error concatenating partial address book fileData entries\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4ODI1MQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODA3MjQ2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowODo1MlrOG5KRQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNDoyM1rOG5Wykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MDI3Mw==", "bodyText": "Can at least set initial size to first address contents size as an optimization. Can also just return initialbytes if appends.size == 0.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462590273", "createdAt": "2020-07-29T21:08:52Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTQxMA==", "bodyText": "Optimization of setting to firstAddressBook size is good and I'll apply that.\nYou wouldn't want to return initalBytes on appendFileDataEntries.size() == 0 because that would ignore the case of a single create/update and 1 append sequence.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462795410", "createdAt": "2020-07-30T07:14:23Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,271 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.MirrorProperties;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+\n+@Log4j2\n+@Named\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final MirrorProperties mirrorProperties;\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+    private Collection<AddressBookEntry> addressBookEntries;\n+\n+    public AddressBookServiceImpl(MirrorProperties mirrorProperties, AddressBookRepository addressBookRepository,\n+                                  FileDataRepository fileDataRepository) {\n+        this.mirrorProperties = mirrorProperties;\n+        this.addressBookRepository = addressBookRepository;\n+        this.fileDataRepository = fileDataRepository;\n+        addressBookEntries = Collections.emptyList();\n+        init();\n+    }\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.warn(\"Unable to parse address book: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public Collection<AddressBookEntry> getAddresses() {\n+        return addressBookEntries;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return entityId != null && entityId.getType() == EntityTypeEnum.FILE.getId() &&\n+                (entityId.getEntityNum() == 101 || entityId.getEntityNum() == 102)\n+                && entityId.getShardNum() == 0 && entityId.getRealmNum() == 0;\n+    }\n+\n+    private void init() {\n+        // load most recent addressBook\n+        loadAddressBookFromDB();\n+\n+        if (CollectionUtils.isEmpty(addressBookEntries)) {\n+            // no addressBook present in db, load from classpath\n+            byte[] addressBookBytes = null;\n+            try {\n+                Path initialAddressBook = mirrorProperties.getInitialAddressBook();\n+                if (initialAddressBook != null) {\n+                    addressBookBytes = Files.readAllBytes(initialAddressBook);\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length,\n+                            initialAddressBook);\n+                } else {\n+                    MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+                    String resourcePath = String.format(\"/addressbook/%s\", hederaNetwork.name().toLowerCase());\n+                    Resource resource = new ClassPathResource(resourcePath, getClass());\n+                    addressBookBytes = IOUtils.toByteArray(resource.getInputStream());\n+                    log.info(\"Loading bootstrap address book of {} B from {}\", addressBookBytes.length, resource);\n+                }\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to load valid address book from classpath\");\n+            }\n+\n+            try {\n+                FileData fileData = new FileData(0L, addressBookBytes, ADDRESS_BOOK_102_ENTITY_ID,\n+                        TransactionTypeEnum.FILECREATE.getProtoId());\n+                AddressBook addressBook = parse(fileData);\n+                addressBookEntries = addressBook.getAddressBookEntries();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Unable to parse address book: \", e);\n+            }\n+        } else {\n+            log.info(\"Loaded addressBook w {} nodes from DB. \", addressBookEntries.size());\n+        }\n+\n+        if (getAddresses().isEmpty()) {\n+            throw new IllegalStateException(\"Unable to load a valid address book with node addresses\");\n+        }\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private AddressBook parse(FileData fileData) throws Exception {\n+        byte[] addressBookBytes = null;\n+        AddressBook addressBook = null;\n+\n+        if (fileData.getTransactionType() == TransactionTypeEnum.FILEAPPEND.getProtoId()) {\n+            // concatenate bytes from partial address book file data in db\n+            if (fileData.getFileData() != null && fileData.getFileData().length > 0) {\n+                addressBookBytes = combinePreviousFileDataContents(fileData);\n+            } else {\n+                log.error(\"Previous incomplete address book entry expected but not found\");\n+            }\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileDataRepository.save(fileData);\n+\n+        addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            saveAddressBook(addressBook);\n+        }\n+\n+        return addressBook;\n+    }\n+\n+    private byte[] combinePreviousFileDataContents(FileData fileData) {\n+        Optional<FileData> optionalFileData = fileDataRepository.\n+                findLatestMatchingFile(fileData\n+                        .getConsensusTimestamp(), fileData.getEntityId().getId(), List\n+                        .of(TransactionTypeEnum.FILECREATE.getProtoId(), TransactionTypeEnum.FILEUPDATE.getProtoId()));\n+        byte[] combinedBytes = null;\n+        if (optionalFileData.isPresent()) {\n+            FileData firstPartialAddressBook = optionalFileData.get();\n+            long consensusTimeStamp = firstPartialAddressBook.getConsensusTimestamp();\n+            List<FileData> appendFileDataEntries = fileDataRepository\n+                    .findFilesInRange(\n+                            consensusTimeStamp + 1, fileData.getConsensusTimestamp() - 1, firstPartialAddressBook\n+                                    .getEntityId().getId(),\n+                            TransactionTypeEnum.FILEAPPEND.getProtoId());\n+\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MDI3Mw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI0MjU1OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookEntryRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowNDo1N1rOG5L5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNDozOFrOG5WzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjg0MA==", "bodyText": "Bad practice to add custom methods just for tests.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462616840", "createdAt": "2020-07-29T22:04:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookEntryRepository.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+\n+public interface AddressBookEntryRepository extends CrudRepository<AddressBookEntry, Long> {\n+    List<AddressBookEntry> findAddressBookEntriesByConsensusTimestamp(Long consensusTimeStamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTYxMQ==", "bodyText": "Yeah I was thinking of a special case as this is what the State Proof TEST API will likely call, but I should rely on the REST module to cover tests for that.\nRemoved", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462795611", "createdAt": "2020-07-30T07:14:38Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookEntryRepository.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+\n+public interface AddressBookEntryRepository extends CrudRepository<AddressBookEntry, Long> {\n+    List<AddressBookEntry> findAddressBookEntriesByConsensusTimestamp(Long consensusTimeStamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjg0MA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI2NDg4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoxMzowMVrOG5MGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNTowMVrOG5W0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMDIwOQ==", "bodyText": "Find object, then update statement doesn't make sense. Just addressBookRepository.save().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462620209", "createdAt": "2020-07-29T22:13:01Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {\n+\n+        log.info(\"**startConsensusTimestamp: {}\", startConsensusTimestamp);\n+        // to:do - explore whether shutdown hook is a better place for address book consensusTimestamp boundary sets\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(startConsensusTimestamp, AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID\n+                        .getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+\n+            // set StartConsensusTimestamp of addressBook as first transaction in record file if not set already\n+            if (addressBook.getStartConsensusTimestamp() == null) {\n+                addressBook.setStartConsensusTimestamp(startConsensusTimestamp);\n+                addressBookRepository\n+                        .updateStartConsensusTimestamp(addressBook.getConsensusTimestamp(), startConsensusTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTkwOA==", "bodyText": "Left over logic exploration. Meant to save() and remove custom repository calls", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462795908", "createdAt": "2020-07-30T07:15:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {\n+\n+        log.info(\"**startConsensusTimestamp: {}\", startConsensusTimestamp);\n+        // to:do - explore whether shutdown hook is a better place for address book consensusTimestamp boundary sets\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(startConsensusTimestamp, AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID\n+                        .getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+\n+            // set StartConsensusTimestamp of addressBook as first transaction in record file if not set already\n+            if (addressBook.getStartConsensusTimestamp() == null) {\n+                addressBook.setStartConsensusTimestamp(startConsensusTimestamp);\n+                addressBookRepository\n+                        .updateStartConsensusTimestamp(addressBook.getConsensusTimestamp(), startConsensusTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMDIwOQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI2NTAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoxMzowNVrOG5MGSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNToxM1rOG5W06A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMDIzMw==", "bodyText": "Find object, then update statement doesn't make sense. Just addressBookRepository.save().", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462620233", "createdAt": "2020-07-29T22:13:05Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {\n+\n+        log.info(\"**startConsensusTimestamp: {}\", startConsensusTimestamp);\n+        // to:do - explore whether shutdown hook is a better place for address book consensusTimestamp boundary sets\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(startConsensusTimestamp, AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID\n+                        .getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+\n+            // set StartConsensusTimestamp of addressBook as first transaction in record file if not set already\n+            if (addressBook.getStartConsensusTimestamp() == null) {\n+                addressBook.setStartConsensusTimestamp(startConsensusTimestamp);\n+                addressBookRepository\n+                        .updateStartConsensusTimestamp(addressBook.getConsensusTimestamp(), startConsensusTimestamp);\n+            }\n+\n+            // close off previous addressBook\n+            Optional<AddressBook> previousOptionalAddressBook = addressBookRepository\n+                    .findLatestAddressBook(addressBook\n+                            .getConsensusTimestamp(), AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID.getId());\n+            if (previousOptionalAddressBook.isPresent()) {\n+                AddressBook previousAddressbook = previousOptionalAddressBook.get();\n+\n+                // set EndConsensusTimestamp of addressBook as first transaction - 1ns in record file if not set already\n+                if (previousAddressbook.getEndConsensusTimestamp() == null) {\n+                    previousAddressbook.setEndConsensusTimestamp(startConsensusTimestamp - 1);\n+                    addressBookRepository.updateEndConsensusTimestamp(previousAddressbook", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjAwOA==", "bodyText": "Left over logic exploration. Meant to save() and remove custom repository calls", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462796008", "createdAt": "2020-07-30T07:15:13Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {\n+\n+        log.info(\"**startConsensusTimestamp: {}\", startConsensusTimestamp);\n+        // to:do - explore whether shutdown hook is a better place for address book consensusTimestamp boundary sets\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(startConsensusTimestamp, AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID\n+                        .getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+\n+            // set StartConsensusTimestamp of addressBook as first transaction in record file if not set already\n+            if (addressBook.getStartConsensusTimestamp() == null) {\n+                addressBook.setStartConsensusTimestamp(startConsensusTimestamp);\n+                addressBookRepository\n+                        .updateStartConsensusTimestamp(addressBook.getConsensusTimestamp(), startConsensusTimestamp);\n+            }\n+\n+            // close off previous addressBook\n+            Optional<AddressBook> previousOptionalAddressBook = addressBookRepository\n+                    .findLatestAddressBook(addressBook\n+                            .getConsensusTimestamp(), AddressBookServiceImpl.ADDRESS_BOOK_102_ENTITY_ID.getId());\n+            if (previousOptionalAddressBook.isPresent()) {\n+                AddressBook previousAddressbook = previousOptionalAddressBook.get();\n+\n+                // set EndConsensusTimestamp of addressBook as first transaction - 1ns in record file if not set already\n+                if (previousAddressbook.getEndConsensusTimestamp() == null) {\n+                    previousAddressbook.setEndConsensusTimestamp(startConsensusTimestamp - 1);\n+                    addressBookRepository.updateEndConsensusTimestamp(previousAddressbook", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMDIzMw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI4OTAzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoyMjowMFrOG5MU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0NDoxMlrOG5tXxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMzk2OQ==", "bodyText": "This causes extra queries to run for every record file even if address book wasn't updated in that file. Also, this logic is not necessary. If the intent is to only \"activate\" the address book when finished processing the record file, we can do that purely with transactions. This logic should move to AddressBookService and once an address book is successfully parsed we should set start and end time appropriately.\nI don't think the start time should be the start of the first tx in the record file as the opening and closing of that file holds no special significance in the platform. So until the platform supports updating address book without a restart, we should just set currentaddressbook.start = lastappend.timestamp and previousaddressbook.end= lastappend.timestamp - 1.\nAnd even if this logic is somehow needed, it definitely should not be in RecordFileParser but in AddressBookService.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462623969", "createdAt": "2020-07-29T22:22:00Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1OTMzNQ==", "bodyText": "Similar to my previous explanation the current address book should only be retired after a network restart.\nOnly when the network starts up again should transactions use the new address book.\nThe end timestamp in a sense should be inclusive of the maintenance window, not the start timestamp.\nIt would therefore be incorrect to set end and start based off of last append. Rather it should be off of the first transaction post the restart. Which is the logic in the RecordFIleParser mentioned\nThe current logic does have a gap as it relies on the orchestration of network and mirror node restarts which might not be possible.\nEspecially since we want mirror nodes to pickup the address book change without forced restart where possible, but only after the network has restarted.\nOne option would be to rely on the FREEZE transaction coming through and using that as a trigger to reload from db.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462759335", "createdAt": "2020-07-30T06:18:22Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMzk2OQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NjI4Nw==", "bodyText": "Added logic to call loadAddressBook() when a FREEZE transaction is sent.\nAgain when Connect logic on network is submitted we can update the logic to set the current addressbook upon a successful update()", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462866287", "createdAt": "2020-07-30T09:21:09Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMzk2OQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2NTM4MA==", "bodyText": "Circling back. The logic is complex and in flux and outside of scope.\nAs such will adopt use current methodology and we can explore usage of FREEZE or other flags in future.\nGiven the updates of address book so far picking up an address book too early won't cause issues in importer.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463165380", "createdAt": "2020-07-30T17:44:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -272,4 +281,46 @@ public void parse() {\n             log.error(\"Error parsing files\", e);\n         }\n     }\n+\n+    /**\n+     * Address book updates currently span record files as well as a network shutdown. To account for this verify start\n+     * and end of addressbook are set after a record file is processed. If not set based on first and last transaction\n+     * in record file\n+     *\n+     * @param startConsensusTimestamp\n+     */\n+    private void updateAddressBook(long startConsensusTimestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMzk2OQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI5MzI0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoyMzo0OVrOG5MXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDozNjoxNFrOG5SwYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDYzNQ==", "bodyText": "Why native here and jpql for others? Query looks simple enough", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462624635", "createdAt": "2020-07-29T22:23:49Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@CacheConfig(cacheNames = \"address_book\", cacheManager = CacheConfiguration.NEVER_EXPIRE_LARGE)\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"consensus_timestamp desc limit 1\", nativeQuery = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTMxMg==", "bodyText": "jpql doesn't support limits, so the nativeQuery was required.\nIt was either this or utilize Pageable, have an increase code footprint.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462729312", "createdAt": "2020-07-30T04:36:14Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@CacheConfig(cacheNames = \"address_book\", cacheManager = CacheConfiguration.NEVER_EXPIRE_LARGE)\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"consensus_timestamp desc limit 1\", nativeQuery = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDYzNQ=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODI5NDM3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoyNDoyMFrOG5MYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDozNzo1M1rOG5Sx2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDgwNw==", "bodyText": "These look like leftover cacheevicts", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462624807", "createdAt": "2020-07-29T22:24:20Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@CacheConfig(cacheNames = \"address_book\", cacheManager = CacheConfiguration.NEVER_EXPIRE_LARGE)\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"consensus_timestamp desc limit 1\", nativeQuery = true)\n+    Optional<AddressBook> findLatestAddressBook(long consensusTimestamp, long encodedFileId);\n+\n+    @Query(\"from AddressBook where consensusTimestamp <= ?1 and fileId = ?2 order by \" +\n+            \"consensusTimestamp asc\")\n+    List<AddressBook> findLatestAddressBooks(long consensusTimestamp, EntityId fileId);\n+\n+    @CacheEvict(key = \"#p0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTY4OQ==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462729689", "createdAt": "2020-07-30T04:37:53Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import javax.transaction.Transactional;\n+import org.springframework.cache.annotation.CacheConfig;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.hedera.mirror.importer.config.CacheConfiguration;\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+@CacheConfig(cacheNames = \"address_book\", cacheManager = CacheConfiguration.NEVER_EXPIRE_LARGE)\n+@Transactional\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"consensus_timestamp desc limit 1\", nativeQuery = true)\n+    Optional<AddressBook> findLatestAddressBook(long consensusTimestamp, long encodedFileId);\n+\n+    @Query(\"from AddressBook where consensusTimestamp <= ?1 and fileId = ?2 order by \" +\n+            \"consensusTimestamp asc\")\n+    List<AddressBook> findLatestAddressBooks(long consensusTimestamp, EntityId fileId);\n+\n+    @CacheEvict(key = \"#p0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDgwNw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM3ODM4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo1ODo0N1rOG5NJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDozODoxN1rOG5SyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzQ4MA==", "bodyText": "nit: It's more isolate if the constraint is declared inside the create table.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462637480", "createdAt": "2020-07-29T22:58:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,\n+    public_key              varchar(1024)   null,\n+    node_id                 bigint          null,\n+    node_account_id         entity_id       null,\n+    node_cert_hash          bytea           null\n+);\n+\n+create index if not exists address_book_entry__id_timestamp\n+    on address_book_entry (id, consensus_timestamp);\n+\n+-- add foreign key\n+alter table address_book_entry\n+    add constraint fk__address_book foreign key (consensus_timestamp) references address_book (consensus_timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTc4NQ==", "bodyText": "Moved it into the table creation", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462729785", "createdAt": "2020-07-30T04:38:17Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,\n+    public_key              varchar(1024)   null,\n+    node_id                 bigint          null,\n+    node_account_id         entity_id       null,\n+    node_cert_hash          bytea           null\n+);\n+\n+create index if not exists address_book_entry__id_timestamp\n+    on address_book_entry (id, consensus_timestamp);\n+\n+-- add foreign key\n+alter table address_book_entry\n+    add constraint fk__address_book foreign key (consensus_timestamp) references address_book (consensus_timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzQ4MA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODM4MDE2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo1OTozM1rOG5NKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDo0MDoyNlrOG5S0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzc0Mw==", "bodyText": "why would id be included? If we had the id we wouldn't need to query by consensus_timestamp", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462637743", "createdAt": "2020-07-29T22:59:33Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,\n+    public_key              varchar(1024)   null,\n+    node_id                 bigint          null,\n+    node_account_id         entity_id       null,\n+    node_cert_hash          bytea           null\n+);\n+\n+create index if not exists address_book_entry__id_timestamp\n+    on address_book_entry (id, consensus_timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMDI4Nw==", "bodyText": "Should just be consensus_timestamp", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462730287", "createdAt": "2020-07-30T04:40:26Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/resources/db/migration/V1.28.0__address_book.sql", "diffHunk": "@@ -0,0 +1,53 @@\n+-------------------\n+-- Support db storage of network address books\n+-------------------\n+\n+-- add address book table\n+create table if not exists address_book\n+(\n+    consensus_timestamp         nanos_timestamp primary key,\n+    start_consensus_timestamp   nanos_timestamp null,\n+    end_consensus_timestamp     nanos_timestamp null,\n+    file_id                     entity_id       not null,\n+    node_count                  smallint        null,\n+    file_data                   bytea           not null\n+);\n+\n+create index if not exists address_book__fileId\n+    on address_book (consensus_timestamp, file_id);\n+\n+-- add node address table\n+create table if not exists address_book_entry\n+(\n+    id                      serial          primary key,\n+    consensus_timestamp     nanos_timestamp not null,\n+    ip                      varchar(128)    null,\n+    port                    integer         null,\n+    memo                    varchar(128)    not null,\n+    public_key              varchar(1024)   null,\n+    node_id                 bigint          null,\n+    node_account_id         entity_id       null,\n+    node_cert_hash          bytea           null\n+);\n+\n+create index if not exists address_book_entry__id_timestamp\n+    on address_book_entry (id, consensus_timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzNzc0Mw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ0Nzc5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozMTo1NlrOG5Nyiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozNTowOVrOG5l4hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Nzk0Nw==", "bodyText": "q: Are all the casts necessary? Also, wouldn't a simple entity_id in (101, 102) suffice?", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462647947", "createdAt": "2020-07-29T23:31:56Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;\n+import org.flywaydb.core.internal.jdbc.RowMapper;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Log4j2\n+@Named\n+public class V1_28_1__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > cast(? as \" +\n+            \"nanos_timestamp) and (entity_id = cast(? as int) or entity_id = cast(? as int)) order by \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczMTIyMA==", "bodyText": "I was hitting errors without the casts because the query was treating them as varchar. Maybe there's another way to do this.\nI was having similar issues with the in and went with this to get it working. Can revisit it.\nUnless you're suggesting hardcoding entity_id in (101, 102) which is certainly a much simpler option too", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462731220", "createdAt": "2020-07-30T04:44:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;\n+import org.flywaydb.core.internal.jdbc.RowMapper;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Log4j2\n+@Named\n+public class V1_28_1__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > cast(? as \" +\n+            \"nanos_timestamp) and (entity_id = cast(? as int) or entity_id = cast(? as int)) order by \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Nzk0Nw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA0MjY5Mw==", "bodyText": "Yeah, just hardcode the entity_ids. For the others, JdbcTemplate isn't guessing the correct types so you can manually specify the types using one of its overloaded methods. Specifically create a PreparedStatementSetter and pass it.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463042693", "createdAt": "2020-07-30T14:35:09Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;\n+import org.flywaydb.core.internal.jdbc.RowMapper;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Log4j2\n+@Named\n+public class V1_28_1__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > cast(? as \" +\n+            \"nanos_timestamp) and (entity_id = cast(? as int) or entity_id = cast(? as int)) order by \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0Nzk0Nw=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ1NjMxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzozNjoxMFrOG5N3lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDo1ODozNlrOG5TKLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTIzNg==", "bodyText": "Missing logic to load from classpath/filesystem.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462649236", "createdAt": "2020-07-29T23:36:10Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;\n+import org.flywaydb.core.internal.jdbc.RowMapper;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Log4j2\n+@Named\n+public class V1_28_1__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > cast(? as \" +\n+            \"nanos_timestamp) and (entity_id = cast(? as int) or entity_id = cast(? as int)) order by \" +\n+            \"consensus_timestamp asc limit cast(? as int)\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V1_28_1__Address_Book(@Lazy AddressBookService addressBookService) {\n+        this.addressBookService = addressBookService;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        jdbcTemplate = new JdbcTemplate(context.getConnection());\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+\n+        // starting from consensusTimeStamp = 0 retrieve pages of fileData entries\n+        int pageSize = 1000; // option to parameterize this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczNTkxNw==", "bodyText": "Yeah, moving from AddressBookServiceImpl to here", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462735917", "createdAt": "2020-07-30T04:58:36Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;\n+import org.flywaydb.core.internal.jdbc.RowMapper;\n+import org.springframework.context.annotation.Lazy;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.hedera.mirror.importer.addressbook.AddressBookService;\n+import com.hedera.mirror.importer.addressbook.AddressBookServiceImpl;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.util.EntityIdEndec;\n+\n+@Log4j2\n+@Named\n+public class V1_28_1__Address_Book extends BaseJavaMigration {\n+    private final AddressBookService addressBookService;\n+    private final String FILE_DATA_SQL = \"select * from file_data where consensus_timestamp > cast(? as \" +\n+            \"nanos_timestamp) and (entity_id = cast(? as int) or entity_id = cast(? as int)) order by \" +\n+            \"consensus_timestamp asc limit cast(? as int)\";\n+    private JdbcTemplate jdbcTemplate;\n+\n+    public V1_28_1__Address_Book(@Lazy AddressBookService addressBookService) {\n+        this.addressBookService = addressBookService;\n+    }\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+        jdbcTemplate = new JdbcTemplate(context.getConnection());\n+        Stopwatch stopwatch = Stopwatch.createStarted();\n+        AtomicLong currentConsensusTimestamp = new AtomicLong(0);\n+        AtomicLong fileDataEntries = new AtomicLong(0);\n+\n+        // starting from consensusTimeStamp = 0 retrieve pages of fileData entries\n+        int pageSize = 1000; // option to parameterize this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY0OTIzNg=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ4Njg3OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo1MDoyOFrOG5OI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTozNDoxMlrOG5Tu7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MzY2MA==", "bodyText": "How are we mocking address book repository when Downloader only has a reference to AddressBookService? We're testing too many layers here. We should just mock the AddressBookService and remove  the filesystem manipulation and repository. This is the same thing I said before.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462653660", "createdAt": "2020-07-29T23:50:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -211,14 +228,23 @@ void partialConsensus() throws Exception {\n     @Test\n     @DisplayName(\"Exactly 1/3 consensus\")\n     void oneThirdConsensus() throws Exception {\n-        // Remove last node from current 4 node address book\n-        byte[] addressBook = Files.readAllBytes(mirrorProperties.getAddressBookPath());\n+        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+        Path addressBookPath = ResourceUtils.getFile(String\n+                .format(\"classpath:addressbook/%s\", hederaNetwork.name().toLowerCase())).toPath();\n+        byte[] addressBook = Files.readAllBytes(addressBookPath);\n         int index = Bytes.lastIndexOf(addressBook, (byte) '\\n');\n         addressBook = Arrays.copyOfRange(addressBook, 0, index);\n-        networkAddressBook.update(addressBook);\n+        EntityId entityId = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+        long now = Instant.now().getEpochSecond();\n+\n+        doReturn(Optional.of(addressBookFromBytes(addressBook, now, entityId)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc0NTMyNg==", "bodyText": "Agreed, mocking just the AddressBookService is cleaner", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r462745326", "createdAt": "2020-07-30T05:34:12Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/test/java/com/hedera/mirror/importer/downloader/AbstractDownloaderTest.java", "diffHunk": "@@ -211,14 +228,23 @@ void partialConsensus() throws Exception {\n     @Test\n     @DisplayName(\"Exactly 1/3 consensus\")\n     void oneThirdConsensus() throws Exception {\n-        // Remove last node from current 4 node address book\n-        byte[] addressBook = Files.readAllBytes(mirrorProperties.getAddressBookPath());\n+        MirrorProperties.HederaNetwork hederaNetwork = mirrorProperties.getNetwork();\n+        Path addressBookPath = ResourceUtils.getFile(String\n+                .format(\"classpath:addressbook/%s\", hederaNetwork.name().toLowerCase())).toPath();\n+        byte[] addressBook = Files.readAllBytes(addressBookPath);\n         int index = Bytes.lastIndexOf(addressBook, (byte) '\\n');\n         addressBook = Arrays.copyOfRange(addressBook, 0, index);\n-        networkAddressBook.update(addressBook);\n+        EntityId entityId = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+        long now = Instant.now().getEpochSecond();\n+\n+        doReturn(Optional.of(addressBookFromBytes(addressBook, now, entityId)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MzY2MA=="}, "originalCommit": {"oid": "9f91d29ee4143c257c181403c26fe0fa27a7d9b9"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDk3OTI5OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDozMDo0MlrOG5lrcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjo0OTo1MFrOG52cyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzOTM0Nw==", "bodyText": "Use Spring JdbcTemplate not internal Flyway classes.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463039347", "createdAt": "2020-07-30T14:30:42Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a094d091407ca77c32e46e4cda52f6886b1e88"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxNDEyMw==", "bodyText": "Switched to Spring JdbcTemplate", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463314123", "createdAt": "2020-07-30T22:49:50Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/migration/V1_28_1__Address_Book.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.hedera.mirror.importer.migration;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.base.Stopwatch;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.inject.Named;\n+import lombok.extern.log4j.Log4j2;\n+import org.apache.commons.io.IOUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.flywaydb.core.internal.jdbc.JdbcTemplate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAzOTM0Nw=="}, "originalCommit": {"oid": "36a094d091407ca77c32e46e4cda52f6886b1e88"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkzMDQzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo0MTozMlrOG54Zfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MzoxNlrOG56aYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjA0Nw==", "bodyText": "Test only repository method", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463346047", "createdAt": "2020-07-31T00:41:32Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where start_consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"start_consensus_timestamp desc limit 1\", nativeQuery = true)\n+    Optional<AddressBook> findLatestAddressBook(long consensusTimestamp, long encodedFileId);\n+\n+    @Query(\"from AddressBook where startConsensusTimestamp <= ?1 and fileId = ?2 order by startConsensusTimestamp asc\")\n+    List<AddressBook> findLatestAddressBooks(long consensusTimestamp, EntityId fileId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTA0MA==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379040", "createdAt": "2020-07-31T02:53:16Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/repository/AddressBookRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.hedera.mirror.importer.repository;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Optional;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.CrudRepository;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.EntityId;\n+\n+public interface AddressBookRepository extends CrudRepository<AddressBook, Long> {\n+    @Query(value = \"select * from address_book where start_consensus_timestamp <= ?1 and file_id = ?2 order by \" +\n+            \"start_consensus_timestamp desc limit 1\", nativeQuery = true)\n+    Optional<AddressBook> findLatestAddressBook(long consensusTimestamp, long encodedFileId);\n+\n+    @Query(\"from AddressBook where startConsensusTimestamp <= ?1 and fileId = ?2 order by startConsensusTimestamp asc\")\n+    List<AddressBook> findLatestAddressBooks(long consensusTimestamp, EntityId fileId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjA0Nw=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkzMjA4OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo0MjoyOFrOG54aZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MzoyNVrOG56ahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjI3Nw==", "bodyText": "Looks like leftover from refactoring.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463346277", "createdAt": "2020-07-31T00:42:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +65,7 @@\n public class RecordFileParser implements FileParser {\n \n     private final ApplicationStatusRepository applicationStatusRepository;\n+    private final AddressBookRepository addressBookRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTA3Nw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379077", "createdAt": "2020-07-31T02:53:25Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/parser/record/RecordFileParser.java", "diffHunk": "@@ -64,6 +65,7 @@\n public class RecordFileParser implements FileParser {\n \n     private final ApplicationStatusRepository applicationStatusRepository;\n+    private final AddressBookRepository addressBookRepository;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NjI3Nw=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk1MDUzOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1MDo1N1rOG54kZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1MzozNFrOG56aow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0ODgzOA==", "bodyText": "This annotation is not applicable here.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463348838", "createdAt": "2020-07-31T00:50:57Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "diffHunk": "@@ -52,4 +79,18 @@ public PublicKey getPublicKeyAsObject() {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    public EntityId getNodeAccountId() {\n+        if (nodeAccountId == null) {\n+            return memo == null ? null : EntityId.of(memo, EntityTypeEnum.ACCOUNT);\n+        }\n+\n+        return nodeAccountId;\n+    }\n+\n+    @Lazy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTEwNw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379107", "createdAt": "2020-07-31T02:53:34Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBookEntry.java", "diffHunk": "@@ -52,4 +79,18 @@ public PublicKey getPublicKeyAsObject() {\n             throw new RuntimeException(e);\n         }\n     }\n+\n+    public EntityId getNodeAccountId() {\n+        if (nodeAccountId == null) {\n+            return memo == null ? null : EntityId.of(memo, EntityTypeEnum.ACCOUNT);\n+        }\n+\n+        return nodeAccountId;\n+    }\n+\n+    @Lazy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0ODgzOA=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk2MDQ2OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDo1NjozMFrOG54qKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1NDoxMFrOG56bNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDMxMw==", "bodyText": "startConsensusTimestamp is always non-null. Can remove Persistable", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463350313", "createdAt": "2020-07-31T00:56:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.FileIdConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@ToString(exclude = {\"fileData\"})\n+public class AddressBook implements Persistable<Long> {\n+    // consensusTimestamp + 1ns of transaction containing final fileAppend operation\n+    @Id\n+    private Long startConsensusTimestamp;\n+\n+    // consensusTimestamp of transaction containing final fileAppend operation of next address book\n+    private Long endConsensusTimestamp;\n+\n+    @Convert(converter = FileIdConverter.class)\n+    private EntityId fileId;\n+\n+    private Integer nodeCount;\n+\n+    private byte[] fileData;\n+\n+    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"consensusTimestamp\")\n+    private List<AddressBookEntry> entries;\n+\n+    @Override\n+    public Long getId() {\n+        return startConsensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return startConsensusTimestamp == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTI1Mw==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379253", "createdAt": "2020-07-31T02:54:10Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/domain/AddressBook.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.hedera.mirror.importer.domain;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToMany;\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import lombok.ToString;\n+import org.springframework.data.domain.Persistable;\n+\n+import com.hedera.mirror.importer.converter.FileIdConverter;\n+\n+@Builder(toBuilder = true)\n+@Data\n+@Entity\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@ToString(exclude = {\"fileData\"})\n+public class AddressBook implements Persistable<Long> {\n+    // consensusTimestamp + 1ns of transaction containing final fileAppend operation\n+    @Id\n+    private Long startConsensusTimestamp;\n+\n+    // consensusTimestamp of transaction containing final fileAppend operation of next address book\n+    private Long endConsensusTimestamp;\n+\n+    @Convert(converter = FileIdConverter.class)\n+    private EntityId fileId;\n+\n+    private Integer nodeCount;\n+\n+    private byte[] fileData;\n+\n+    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true, fetch = FetchType.EAGER)\n+    @JoinColumn(name = \"consensusTimestamp\")\n+    private List<AddressBookEntry> entries;\n+\n+    @Override\n+    public Long getId() {\n+        return startConsensusTimestamp;\n+    }\n+\n+    @Override\n+    public boolean isNew() {\n+        return startConsensusTimestamp == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MDMxMw=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk2NzYxOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMDo0N1rOG54uVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1NDo0OFrOG56bvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM4MA==", "bodyText": "I don't think any current user of this method can handle a null returned object, so we'll get NPEs. Better to throw a meaningful exception as it's truly an invalid state if we don't have at least one address book. Thus, most of this method can be collapsed to\nreturn addressBookRepository.findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId()).orElseThrow(() -> new IllegalStateException(\"\"));", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463351380", "createdAt": "2020-07-31T01:00:47Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),\n+                    addressBook.getNodeSet());\n+            return addressBook;\n+        }\n+\n+        log.warn(\"No addressBooks before {} were found.\", consensus_timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTM5MA==", "bodyText": "Funny had as a throw when I started too. Took your simplification also.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379390", "createdAt": "2020-07-31T02:54:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),\n+                    addressBook.getNodeSet());\n+            return addressBook;\n+        }\n+\n+        log.warn(\"No addressBooks before {} were found.\", consensus_timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTM4MA=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk3MDIyOnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMjoxNlrOG54v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1NTozNFrOG56cYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTc2Mw==", "bodyText": "Please remove this log. It will be printed many times per second in Downloader.", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463351763", "createdAt": "2020-07-31T01:02:16Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTU1NQ==", "bodyText": "Removed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379555", "createdAt": "2020-07-31T02:55:34Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MTc2Mw=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk3MzU0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowNDozMFrOG54x5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1NTo0OFrOG56cnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MjI5NA==", "bodyText": "camelCase please", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463352294", "createdAt": "2020-07-31T01:04:30Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTYxMg==", "bodyText": "Fixed", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379612", "createdAt": "2020-07-31T02:55:48Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MjI5NA=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjk4Mzc0OnYy", "diffSide": "RIGHT", "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMToxMDoyOFrOG543zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjo1NjowMVrOG56c0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzgwNA==", "bodyText": "nit: Comment could be removed if the method name was more accurately named updatePreviousAddressBook", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463353804", "createdAt": "2020-07-31T01:10:28Z", "author": {"login": "steven-sheehy"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),\n+                    addressBook.getNodeSet());\n+            return addressBook;\n+        }\n+\n+        log.warn(\"No addressBooks before {} were found.\", consensus_timestamp);\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return ADDRESS_BOOK_101_ENTITY_ID.equals(entityId) || ADDRESS_BOOK_102_ENTITY_ID.equals(entityId);\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private void parse(FileData fileData) {\n+        byte[] addressBookBytes = null;\n+        if (fileData.transactionTypeIsAppend()) {\n+            // concatenate bytes from partial address book file data in db\n+            addressBookBytes = combinePreviousFileDataContents(fileData);\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileData = fileDataRepository.save(fileData);\n+\n+        AddressBook addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            addressBook = addressBookRepository.save(addressBook);\n+            log.info(\"Saved new address book to db: {}\", addressBook);\n+\n+            // update previous addressBook", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3OTY2Nw==", "bodyText": "Adjusted", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/894#discussion_r463379667", "createdAt": "2020-07-31T02:56:01Z", "author": {"login": "Nana-EC"}, "path": "hedera-mirror-importer/src/main/java/com/hedera/mirror/importer/addressbook/AddressBookServiceImpl.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package com.hedera.mirror.importer.addressbook;\n+\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ * \u200b\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ * \u200b\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+import com.google.common.collect.ImmutableList;\n+import com.hederahashgraph.api.proto.java.NodeAddressBook;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.inject.Named;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.log4j.Log4j2;\n+\n+import com.hedera.mirror.importer.domain.AddressBook;\n+import com.hedera.mirror.importer.domain.AddressBookEntry;\n+import com.hedera.mirror.importer.domain.EntityId;\n+import com.hedera.mirror.importer.domain.EntityTypeEnum;\n+import com.hedera.mirror.importer.domain.FileData;\n+import com.hedera.mirror.importer.domain.TransactionTypeEnum;\n+import com.hedera.mirror.importer.exception.InvalidDatasetException;\n+import com.hedera.mirror.importer.repository.AddressBookRepository;\n+import com.hedera.mirror.importer.repository.FileDataRepository;\n+import com.hedera.mirror.importer.util.Utility;\n+\n+@Log4j2\n+@Named\n+@AllArgsConstructor\n+public class AddressBookServiceImpl implements AddressBookService {\n+    public static final EntityId ADDRESS_BOOK_101_ENTITY_ID = EntityId.of(0, 0, 101, EntityTypeEnum.FILE);\n+    public static final EntityId ADDRESS_BOOK_102_ENTITY_ID = EntityId.of(0, 0, 102, EntityTypeEnum.FILE);\n+\n+    private final AddressBookRepository addressBookRepository;\n+    private final FileDataRepository fileDataRepository;\n+\n+    @Override\n+    public void update(FileData fileData) {\n+        if (!isAddressBook(fileData.getEntityId())) {\n+            log.warn(\"Not an address book File ID. Skipping processing ...\");\n+            return;\n+        }\n+\n+        if (fileData.getFileData() == null || fileData.getFileData().length == 0) {\n+            log.warn(\"Byte array contents were empty. Skipping processing ...\");\n+            return;\n+        }\n+\n+        try {\n+            parse(fileData);\n+        } catch (Exception e) {\n+            log.error(\"Unable to parse address book\", e);\n+        }\n+    }\n+\n+    @Override\n+    public AddressBook getCurrent() {\n+        Instant now = Instant.now();\n+        long consensus_timestamp = Utility.convertToNanos(Instant.now().getEpochSecond(), now.getNano());\n+        Optional<AddressBook> optionalAddressBook = addressBookRepository\n+                .findLatestAddressBook(consensus_timestamp, ADDRESS_BOOK_102_ENTITY_ID.getId());\n+\n+        if (optionalAddressBook.isPresent()) {\n+            AddressBook addressBook = optionalAddressBook.get();\n+            log.info(\"Loaded addressBook from {} with nodes ({}).\", addressBook.getStartConsensusTimestamp(),\n+                    addressBook.getNodeSet());\n+            return addressBook;\n+        }\n+\n+        log.warn(\"No addressBooks before {} were found.\", consensus_timestamp);\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isAddressBook(EntityId entityId) {\n+        return ADDRESS_BOOK_101_ENTITY_ID.equals(entityId) || ADDRESS_BOOK_102_ENTITY_ID.equals(entityId);\n+    }\n+\n+    /**\n+     * find last fileData for given entityId where operation was create/update using consensusTimestamp find all\n+     * fileData since  that time for given entityId concatenate all binary data in order and attempt to parse if\n+     * successful save\n+     *\n+     * @param fileData file data with timestamp, contents, entity type and transactions type for parsing\n+     * @return Parsed addressbook object if valid. Null otherwise.\n+     * @throws Exception\n+     */\n+    private void parse(FileData fileData) {\n+        byte[] addressBookBytes = null;\n+        if (fileData.transactionTypeIsAppend()) {\n+            // concatenate bytes from partial address book file data in db\n+            addressBookBytes = combinePreviousFileDataContents(fileData);\n+        } else {\n+            addressBookBytes = fileData.getFileData();\n+        }\n+\n+        // store fileData information\n+        fileData = fileDataRepository.save(fileData);\n+\n+        AddressBook addressBook = buildAddressBook(addressBookBytes, fileData.getConsensusTimestamp(), fileData\n+                .getEntityId());\n+        if (addressBook != null) {\n+            addressBook = addressBookRepository.save(addressBook);\n+            log.info(\"Saved new address book to db: {}\", addressBook);\n+\n+            // update previous addressBook", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MzgwNA=="}, "originalCommit": {"oid": "a1502ba448a5b3477724480eab01e70f0551bc50"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 915, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}