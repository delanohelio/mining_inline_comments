{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODc3OTM2", "number": 1136, "title": "Rosetta: Unit test Account, Block, Mempool & Network API Services", "bodyText": "Changes\n1. Account Unit Tests\n1.1. TestNewAccountAPIService <- tests whether the constructor for AccountAPIService works correctly\n1.2. TestAccountBalance <- straight case test for AccountService's AccountBalance method\n1.3. TestAccountBalanceWithBlockIdentifier <- straight case test for AccountService's AccountBalance method with a valid BlockIdentifier\n1.4 TestAccountBalanceThrowsWhenRetrieveLatestFails <- AccountBalance test which asserts that the function throws a Rosetta Error when RetrieveLatest() fails\n1.5 TestAccountBalanceThrowsWhenRetrieveBlockFails <-AccountBalance test which asserts that the function throws a Rosetta Error when RetrieveBlock() fails\n1.6 TestAccountBalanceThrowsWhenRetrieveBalanceAtBlockFails <- AccountBalance test which asserts that the function throws a Rosetta Error when RetrieveBalanceAtBlock() fails after the logic before it passes successfully\n2. Block Unit Tests\n2.1 TestNewBlockAPIService <- tests whether the constructor for BlockAPIService works correctly\n2.2 TestBlock <- tests whether the Block() function returns the correct response and no error (straight case)\n2.3 TestBlockThrowsWhenFindByIdentifierFails <- asserts that Block() throws a Rosetta error when BlockRepository's FindByIdentifier() fails\n2.4 TestBlockThrowsWhenFindBetweenFails <- asserts that Block() throws a Rosetta error when TransactionRepository's FindBetween() fails\n2.5 TestBlockTransaction <- tests whether the BlockTransaction() function returns the correct response and no error (straight case)\n2.6 TestBlockTransactionThrowsWhenFindByIdentifierFails <- asserts that BlockTransaction() throws a Rosetta error when BlockRepository's FindByIdentifier() fails\n2.7 TestBlockTransactionThrowsWhenFindByHashInBlockFails <- asserts that BlockTransaction() throws a Rosetta error when TransactionRepository's FindByHashInBlock() fails\n3. Mempool Unit Tests\n3.1 TestNewMempoolAPIService <- tests whether the constructor for MempoolAPIService works correctly\n3.2 TestMempool <- straight case for Mempool() function\n3.2 TestMempoolTransaction <- straight case for MempoolTransaction() function\n4. Network Unit Tests\n4.1 TestNewNetworkAPIService <- tests whether the constructor for NetworkAPIService works correctly\n4.2 TestNetworkList <- straight case for the NetworkList() function, asserts that it returns the correct list of networks, previously assigned to the NetworkAPIService\n4.3 TestNetworkOptions <- straight case for the NetworkOptions() function, asserts that it returns the correct list of options, preciously assigned to the NetworkAPIService\n4.4 TestNetworkOptionsThrowsWhenStatusesFails <- asserts that NetworkOptions() throws a Rosetta error when TransactionRepository's Statuses() fails\n4.5 TestNetworkOptionsThrowsWhenTypesAsArrayFails <- asserts that NetworkOptions() throws a Rosetta error when TransactionRepository's TypesAsArray() fails\n4.6 TestNetworkStatus <- asserts that the NetworkStatus() returns the correct StatusResponse, given dummy genesis block, dummy latest block and entries\n4.7 TestNetworkStatusThrowsWhenRetrieveGenesisFails <- asserts that NetworkStatus() throws a Rosetta Error, when BlockRepository's RetrieveGenesis() function fails\n4.8 TestNetworkStatusThrowsWhenRetrieveLatestFails <- asserts that NetworkStatus() throws a Rosetta Error, when BlockRepository's RetrieveLatest() function fails\n4.9 TestNetworkStatusThrowsWhenEntriesFail <- asserts that NetworkStatus() throws a Rosetta Error, when AddressBookEntryRepository's Entries() function fails", "createdAt": "2020-10-16T14:07:42Z", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136", "merged": true, "mergeCommit": {"oid": "377a5c9702a6b7cf2640f4c5480688dc0af53ae7"}, "closed": true, "closedAt": "2020-10-20T14:44:05Z", "author": {"login": "georgiyazovaliiski"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTGmlJAH2gAyNTA0ODc3OTM2OmMyYmZmZjRiMjMzZTM5NWNiYzIwZjdhYzA0YTZkZGU3ZGY1ZGE0N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUZvfOgFqTUxMjc4ODgzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c2bfff4b233e395cbc20f7ac04a6dde7df5da47a", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/c2bfff4b233e395cbc20f7ac04a6dde7df5da47a", "committedDate": "2020-10-16T13:43:22Z", "message": "Tests: Account, Block, Mempool, Network API Services (#149)\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>\r\nSigned-off-by: Daniel Ivanov <daniel.k.ivanov95@gmail.com>\r\nSigned-off-by: Daniel <Daniel.K.Ivanov95@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTUwNDg3", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#pullrequestreview-511950487", "createdAt": "2020-10-19T16:34:39Z", "commit": {"oid": "c2bfff4b233e395cbc20f7ac04a6dde7df5da47a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNDozOVrOHkXWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjozNDozOVrOHkXWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MzM3Ng==", "bodyText": "should check the values in the Errors slice equal", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#discussion_r507893376", "createdAt": "2020-10-19T16:34:39Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "diffHunk": "@@ -0,0 +1,247 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package network\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/server\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/services/base\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tests/mocks/repository\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"testing\"\n+)\n+\n+func getSubject() server.NetworkAPIServicer {\n+\tbaseService := base.NewBaseService(repository.MBlockRepository, repository.MTransactionRepository)\n+\treturn networkAPIService(baseService)\n+}\n+\n+func dummyGenesisBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               1,\n+\t\tHash:                \"0x123jsjs\",\n+\t\tConsensusStartNanos: 1000000,\n+\t\tConsensusEndNanos:   20000000,\n+\t\tParentIndex:         0,\n+\t\tParentHash:          \"\",\n+\t}\n+}\n+\n+func dummyLatestBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"0x1323jsjs\",\n+\t\tConsensusStartNanos: 40000000,\n+\t\tConsensusEndNanos:   70000000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"0x123jsjs\",\n+\t}\n+}\n+\n+func networkAPIService(base base.BaseService) server.NetworkAPIServicer {\n+\treturn NewNetworkAPIService(\n+\t\tbase,\n+\t\trepository.MAddressBookEntryRepository,\n+\t\t&rTypes.NetworkIdentifier{\n+\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\tMetadata: nil,\n+\t\t\t},\n+\t\t},\n+\t\t&rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t)\n+}\n+\n+func TestNewNetworkAPIService(t *testing.T) {\n+\trepository.Setup()\n+\tassert.IsType(t, &NetworkAPIService{}, getSubject())\n+}\n+\n+func TestNetworkList(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkListResponse{\n+\t\tNetworkIdentifiers: []*rTypes.NetworkIdentifier{\n+\t\t\t{\n+\t\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\t\tMetadata: nil,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\n+\t// when:\n+\tres, e := getSubject().NetworkList(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult, res)\n+\tassert.Nil(t, e)\n+}\n+\n+func TestNetworkOptions(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkOptionsResponse{\n+\t\tVersion: &rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t\tAllow: &rTypes.Allow{\n+\t\t\tOperationStatuses: []*rTypes.OperationStatus{\n+\t\t\t\t{\n+\t\t\t\t\tStatus:     \"Pending\",\n+\t\t\t\t\tSuccessful: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tOperationTypes:          []string{\"Transfer\"},\n+\t\t\tErrors:                  maphelper.GetErrorValuesFromStringErrorMap(errors.Errors),\n+\t\t\tHistoricalBalanceLookup: true,\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\trepository.MTransactionRepository.On(\"Statuses\").Return(map[int]string{1: \"Pending\"}, repository.NilError)\n+\trepository.MTransactionRepository.On(\"TypesAsArray\").Return([]string{\"Transfer\"}, repository.NilError)\n+\n+\t// when:\n+\tres, e := getSubject().NetworkOptions(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult.Version, res.Version)\n+\tassert.Equal(t, expectedResult.Allow.HistoricalBalanceLookup, res.Allow.HistoricalBalanceLookup)\n+\tassert.Equal(t, expectedResult.Allow.OperationStatuses, res.Allow.OperationStatuses)\n+\tassert.Equal(t, expectedResult.Allow.OperationTypes, res.Allow.OperationTypes)\n+\tassert.Equal(t, len(expectedResult.Allow.Errors), len(res.Allow.Errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2bfff4b233e395cbc20f7ac04a6dde7df5da47a"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def3c7e8f0f892d74c0b50a2c818289b45505e3b", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/def3c7e8f0f892d74c0b50a2c818289b45505e3b", "committedDate": "2020-10-20T08:12:20Z", "message": "Assertion of equal, unordered Error elements function\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde549244da3a6c93c13c8a7b858707e5b478844", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/cde549244da3a6c93c13c8a7b858707e5b478844", "committedDate": "2020-10-20T08:13:01Z", "message": "remove unnecessary assertion\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32fde97e1799c56cf9fc37dabadfc563b658f743", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/32fde97e1799c56cf9fc37dabadfc563b658f743", "committedDate": "2020-10-20T09:19:05Z", "message": "Refactor Equals method\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de14c302e0a1596121e26970e708152a1e2cf21", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0de14c302e0a1596121e26970e708152a1e2cf21", "committedDate": "2020-10-20T09:24:48Z", "message": "efficiency refactor\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea66a387458bd3915345544f2300309197f64fc", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/0ea66a387458bd3915345544f2300309197f64fc", "committedDate": "2020-10-20T10:17:27Z", "message": "remove unnecessary test\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c49fee2a151bfb650ae0fa77084f283a66a6c2", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/13c49fee2a151bfb650ae0fa77084f283a66a6c2", "committedDate": "2020-10-20T13:32:55Z", "message": "Error comparison method rename\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d5b6580e7757a708653cfe67da18c9146a57ef", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/79d5b6580e7757a708653cfe67da18c9146a57ef", "committedDate": "2020-10-20T13:56:01Z", "message": "Merge pull request #155 from LimeChain/tests/data-api-unit-tests-rework\n\nPR Comments resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzU1OTA4", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#pullrequestreview-512755908", "createdAt": "2020-10-20T14:06:30Z", "commit": {"oid": "79d5b6580e7757a708653cfe67da18c9146a57ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjozMFrOHk-smg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjozMFrOHk-smg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzODAxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tassert.True(t, errorsAreEqual(expectedResult.Allow.Errors, res.Allow.Errors))\n          \n          \n            \n            \tassert.ElementsMatch(t, expectedResult.Allow.Errors, res.Allow.Errors);", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#discussion_r508538010", "createdAt": "2020-10-20T14:06:30Z", "author": {"login": "xin-hedera"}, "path": "hedera-mirror-rosetta/app/services/network/network_service_test.go", "diffHunk": "@@ -0,0 +1,268 @@\n+/*-\n+ * \u200c\n+ * Hedera Mirror Node\n+ *\n+ * Copyright (C) 2019 - 2020 Hedera Hashgraph, LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \u200d\n+ */\n+\n+package network\n+\n+import (\n+\t\"github.com/coinbase/rosetta-sdk-go/server\"\n+\trTypes \"github.com/coinbase/rosetta-sdk-go/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/domain/types\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/errors\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/app/services/base\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tests/mocks/repository\"\n+\t\"github.com/hashgraph/hedera-mirror-node/hedera-mirror-rosetta/tools/maphelper\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+func getSubject() server.NetworkAPIServicer {\n+\tbaseService := base.NewBaseService(repository.MBlockRepository, repository.MTransactionRepository)\n+\treturn networkAPIService(baseService)\n+}\n+\n+func dummyGenesisBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               1,\n+\t\tHash:                \"0x123jsjs\",\n+\t\tConsensusStartNanos: 1000000,\n+\t\tConsensusEndNanos:   20000000,\n+\t\tParentIndex:         0,\n+\t\tParentHash:          \"\",\n+\t}\n+}\n+\n+func dummyLatestBlock() *types.Block {\n+\treturn &types.Block{\n+\t\tIndex:               2,\n+\t\tHash:                \"0x1323jsjs\",\n+\t\tConsensusStartNanos: 40000000,\n+\t\tConsensusEndNanos:   70000000,\n+\t\tParentIndex:         1,\n+\t\tParentHash:          \"0x123jsjs\",\n+\t}\n+}\n+\n+func networkAPIService(base base.BaseService) server.NetworkAPIServicer {\n+\treturn NewNetworkAPIService(\n+\t\tbase,\n+\t\trepository.MAddressBookEntryRepository,\n+\t\t&rTypes.NetworkIdentifier{\n+\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\tMetadata: nil,\n+\t\t\t},\n+\t\t},\n+\t\t&rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t)\n+}\n+\n+func TestNewNetworkAPIService(t *testing.T) {\n+\trepository.Setup()\n+\tassert.IsType(t, &NetworkAPIService{}, getSubject())\n+}\n+\n+func TestNetworkList(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkListResponse{\n+\t\tNetworkIdentifiers: []*rTypes.NetworkIdentifier{\n+\t\t\t{\n+\t\t\t\tBlockchain: \"SomeBlockchain\",\n+\t\t\t\tNetwork:    \"SomeNetwork\",\n+\t\t\t\tSubNetworkIdentifier: &rTypes.SubNetworkIdentifier{\n+\t\t\t\t\tNetwork:  \"SomeSubNetwork\",\n+\t\t\t\t\tMetadata: nil,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\n+\t// when:\n+\tres, e := getSubject().NetworkList(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult, res)\n+\tassert.Nil(t, e)\n+}\n+\n+func TestNetworkOptions(t *testing.T) {\n+\t// given:\n+\texpectedResult := &rTypes.NetworkOptionsResponse{\n+\t\tVersion: &rTypes.Version{\n+\t\t\tRosettaVersion:    \"1\",\n+\t\t\tNodeVersion:       \"1\",\n+\t\t\tMiddlewareVersion: nil,\n+\t\t\tMetadata:          nil,\n+\t\t},\n+\t\tAllow: &rTypes.Allow{\n+\t\t\tOperationStatuses: []*rTypes.OperationStatus{\n+\t\t\t\t{\n+\t\t\t\t\tStatus:     \"Pending\",\n+\t\t\t\t\tSuccessful: true,\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tOperationTypes:          []string{\"Transfer\"},\n+\t\t\tErrors:                  maphelper.GetErrorValuesFromStringErrorMap(errors.Errors),\n+\t\t\tHistoricalBalanceLookup: true,\n+\t\t},\n+\t}\n+\n+\trepository.Setup()\n+\trepository.MTransactionRepository.On(\"Statuses\").Return(map[int]string{1: \"Pending\"}, repository.NilError)\n+\trepository.MTransactionRepository.On(\"TypesAsArray\").Return([]string{\"Transfer\"}, repository.NilError)\n+\n+\t// when:\n+\tres, e := getSubject().NetworkOptions(nil, nil)\n+\n+\t// then:\n+\tassert.Equal(t, expectedResult.Version, res.Version)\n+\tassert.Equal(t, expectedResult.Allow.HistoricalBalanceLookup, res.Allow.HistoricalBalanceLookup)\n+\tassert.Equal(t, expectedResult.Allow.OperationStatuses, res.Allow.OperationStatuses)\n+\tassert.Equal(t, expectedResult.Allow.OperationTypes, res.Allow.OperationTypes)\n+\tassert.True(t, errorsAreEqual(expectedResult.Allow.Errors, res.Allow.Errors))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d5b6580e7757a708653cfe67da18c9146a57ef"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23f7dffe63f3dc84dae72a2ccb98696432704b29", "author": {"user": {"login": "georgiyazovaliiski", "name": "Georgi Yazovaliyski"}}, "url": "https://github.com/hashgraph/hedera-mirror-node/commit/23f7dffe63f3dc84dae72a2ccb98696432704b29", "committedDate": "2020-10-20T14:31:37Z", "message": "ElementsMatch\n\nSigned-off-by: Georgi Yazovaliyski <georgi.yazovaliiski@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzg4ODM1", "url": "https://github.com/hashgraph/hedera-mirror-node/pull/1136#pullrequestreview-512788835", "createdAt": "2020-10-20T14:35:13Z", "commit": {"oid": "23f7dffe63f3dc84dae72a2ccb98696432704b29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3608, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}