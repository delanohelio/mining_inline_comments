{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzg1NTUx", "number": 593, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowMjowMlrOFAQb-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0NToyNlrOFASIOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODEzNjI1OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/bsp/FastpassUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowMjowMlrOH-dHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDoxMjo1NVrOH-dniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MDc2Mw==", "bodyText": "What happens if fastpass/bin/fastpass doesn't exist? For instance, what if I use this plugin in any other repo? Should we return an empty optional if the file doesn't exist?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/593#discussion_r535250763", "createdAt": "2020-12-03T14:02:02Z", "author": {"login": "Duhemm"}, "path": "src/com/twitter/intellij/pants/bsp/FastpassUtils.java", "diffHunk": "@@ -68,32 +69,27 @@\n     });\n   }\n \n-\n-  private static List<String> coursierPart(){\n-    return Arrays.asList(\"launch\", \"org.scalameta:fastpass_2.12:latest.stable\",\n-                         \"--main\", \"scala.meta.fastpass.Fastpass\",\n-                         \"--\"\n-    );\n-  }\n-\n-  public static Path coursierPath() throws IOException {\n-    Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"pants-plugin-coursier\");\n-    if (!Files.exists(destination)) {\n-      URL url = new URL(\"https://git.io/coursier-cli\");\n-      Files.copy(url.openConnection().getInputStream(), destination);\n-      destination.toFile().setExecutable(true);\n+  @NotNull\n+  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) {\n+    Optional<Path> fastpassPath = getFastpassPath(project);\n+    if(fastpassPath.isPresent()) {\n+      GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+      commandLine.setExePath(fastpassPath.get().toString());\n+      commandLine.addParameters(new ArrayList<>(amendPart));\n+      return commandLine;\n+    } else {\n+      throw new PantsException(\"Could not find fastpass executable\");\n     }\n-    return destination;\n   }\n \n   @NotNull\n-  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) throws IOException {\n-    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n-    String coursier = FastpassUtils.coursierPath().toString();\n-    commandLine.setExePath(coursier);\n-    commandLine.addParameters(coursierPart());\n-    commandLine.addParameters(new ArrayList<>(amendPart));\n-    return commandLine;\n+  public static Optional<Path> getFastpassPath(Project project) {\n+    Optional<Path> root = PantsUtil.findPantsExecutable(project).map(VirtualFile::getParent).map(r -> Paths.get(r.getCanonicalPath()));\n+    if(!root.isPresent()){\n+      throw new PantsException(\"Not a pants project\");\n+    }\n+\n+    return root.map(r -> r.resolve(\"fastpass/bin/fastpass\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88ee0e6b0ba6ca299f97d85a840b727f31d2d03"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1OTAxNg==", "bodyText": "Done", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/593#discussion_r535259016", "createdAt": "2020-12-03T14:12:55Z", "author": {"login": "tpasternak"}, "path": "src/com/twitter/intellij/pants/bsp/FastpassUtils.java", "diffHunk": "@@ -68,32 +69,27 @@\n     });\n   }\n \n-\n-  private static List<String> coursierPart(){\n-    return Arrays.asList(\"launch\", \"org.scalameta:fastpass_2.12:latest.stable\",\n-                         \"--main\", \"scala.meta.fastpass.Fastpass\",\n-                         \"--\"\n-    );\n-  }\n-\n-  public static Path coursierPath() throws IOException {\n-    Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"pants-plugin-coursier\");\n-    if (!Files.exists(destination)) {\n-      URL url = new URL(\"https://git.io/coursier-cli\");\n-      Files.copy(url.openConnection().getInputStream(), destination);\n-      destination.toFile().setExecutable(true);\n+  @NotNull\n+  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) {\n+    Optional<Path> fastpassPath = getFastpassPath(project);\n+    if(fastpassPath.isPresent()) {\n+      GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+      commandLine.setExePath(fastpassPath.get().toString());\n+      commandLine.addParameters(new ArrayList<>(amendPart));\n+      return commandLine;\n+    } else {\n+      throw new PantsException(\"Could not find fastpass executable\");\n     }\n-    return destination;\n   }\n \n   @NotNull\n-  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) throws IOException {\n-    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n-    String coursier = FastpassUtils.coursierPath().toString();\n-    commandLine.setExePath(coursier);\n-    commandLine.addParameters(coursierPart());\n-    commandLine.addParameters(new ArrayList<>(amendPart));\n-    return commandLine;\n+  public static Optional<Path> getFastpassPath(Project project) {\n+    Optional<Path> root = PantsUtil.findPantsExecutable(project).map(VirtualFile::getParent).map(r -> Paths.get(r.getCanonicalPath()));\n+    if(!root.isPresent()){\n+      throw new PantsException(\"Not a pants project\");\n+    }\n+\n+    return root.map(r -> r.resolve(\"fastpass/bin/fastpass\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MDc2Mw=="}, "originalCommit": {"oid": "e88ee0e6b0ba6ca299f97d85a840b727f31d2d03"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODQxMzM2OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/bsp/FastpassUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0NToyNlrOH-fj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0NToyNlrOH-fj7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5MDg2Mg==", "bodyText": "I think it would be easier to understand that way:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(fastpassPath.map(p -> p.toFile().exists()).orElse(false)){\n          \n          \n            \n                  return fastpassPath;\n          \n          \n            \n                } else {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                return fastpassPath.filter(p -> p.toFile().exists());", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/593#discussion_r535290862", "createdAt": "2020-12-03T14:45:26Z", "author": {"login": "Duhemm"}, "path": "src/com/twitter/intellij/pants/bsp/FastpassUtils.java", "diffHunk": "@@ -68,32 +69,32 @@\n     });\n   }\n \n-\n-  private static List<String> coursierPart(){\n-    return Arrays.asList(\"launch\", \"org.scalameta:fastpass_2.12:latest.stable\",\n-                         \"--main\", \"scala.meta.fastpass.Fastpass\",\n-                         \"--\"\n-    );\n-  }\n-\n-  public static Path coursierPath() throws IOException {\n-    Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"pants-plugin-coursier\");\n-    if (!Files.exists(destination)) {\n-      URL url = new URL(\"https://git.io/coursier-cli\");\n-      Files.copy(url.openConnection().getInputStream(), destination);\n-      destination.toFile().setExecutable(true);\n+  @NotNull\n+  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) {\n+    Optional<Path> fastpassPath = getFastpassPath(project);\n+    if(fastpassPath.isPresent()) {\n+      GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+      commandLine.setExePath(fastpassPath.get().toString());\n+      commandLine.addParameters(new ArrayList<>(amendPart));\n+      return commandLine;\n+    } else {\n+      throw new PantsException(\"Could not find fastpass executable\");\n     }\n-    return destination;\n   }\n \n   @NotNull\n-  public static GeneralCommandLine makeFastpassCommand(Project project, @NotNull Collection<String> amendPart) throws IOException {\n-    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n-    String coursier = FastpassUtils.coursierPath().toString();\n-    commandLine.setExePath(coursier);\n-    commandLine.addParameters(coursierPart());\n-    commandLine.addParameters(new ArrayList<>(amendPart));\n-    return commandLine;\n+  public static Optional<Path> getFastpassPath(Project project) {\n+    Optional<Path> root = PantsUtil.findPantsExecutable(project).map(VirtualFile::getParent).map(r -> Paths.get(r.getCanonicalPath()));\n+    if(!root.isPresent()){\n+      throw new PantsException(\"Not a Pants project\");\n+    }\n+\n+    Optional<Path> fastpassPath = root.map(r -> r.resolve(\"fastpass/bin/fastpass\"));\n+    if(fastpassPath.map(p -> p.toFile().exists()).orElse(false)){\n+      return fastpassPath;\n+    } else {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409baccbdabf3e9bd6d91da7ecc404d5e4f468ec"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2025, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}