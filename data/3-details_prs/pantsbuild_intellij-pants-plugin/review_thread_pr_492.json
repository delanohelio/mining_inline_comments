{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDAxMDM0", "number": 492, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozMzoyMVrODedDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0ODowNFrODe-USQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjU5ODQzOnYy", "diffSide": "RIGHT", "path": "tests/com/twitter/intellij/pants/integration/TargetFileCompletionIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozMzoyMVrOFnmIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozMzoyMVrOFnmIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2MzU5MA==", "bodyText": "The method name is actually self-descripting :)", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r377063590", "createdAt": "2020-02-10T13:33:21Z", "author": {"login": "tpasternak"}, "path": "tests/com/twitter/intellij/pants/integration/TargetFileCompletionIntegrationTest.java", "diffHunk": "@@ -90,6 +93,10 @@ private void completionTest(String stringToComplete, String[] expected) {\n     String fullStringToComplete = \"\\n\\n\" + stringToComplete;\n     // should be only tested with pants versions above 1.24.0\n     if (PantsUtil.isCompatiblePantsVersion(myProjectRoot.getPath(), \"1.24.0\")) {\n+      // invalidate caches", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1811ac35e58ee624eac1a50a5b2feec9f803d14e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAzNTE2OnYy", "diffSide": "RIGHT", "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0MzozNlrOFoaP7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0MzozNlrOFoaP7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNzQyMg==", "bodyText": "can inline\nCollections.singletonList(\"test\")", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r377917422", "createdAt": "2020-02-11T21:43:36Z", "author": {"login": "wisechengyi"}, "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "diffHunk": "@@ -20,48 +20,41 @@\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiMethod;\n import com.intellij.psi.PsiPackage;\n-import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.testFramework.MapDataContext;\n import com.twitter.intellij.pants.PantsManager;\n+import com.twitter.intellij.pants.util.ProjectTestJvms;\n import com.twitter.intellij.pants.service.task.PantsTaskManager;\n import com.twitter.intellij.pants.settings.PantsExecutionSettings;\n import com.twitter.intellij.pants.testFramework.OSSPantsIntegrationTest;\n import com.twitter.intellij.pants.util.PantsUtil;\n import org.jetbrains.annotations.NotNull;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n \n public class OSSPantsJvmRunConfigurationIntegrationTest extends OSSPantsIntegrationTest {\n   public void testClassRunConfiguration() throws Throwable {\n     doImport(\"testprojects/tests/java/org/pantsbuild/testproject/testjvms\");\n \n-    String classReference = \"org.pantsbuild.testproject.testjvms.TestSix\";\n-\n-    PsiClass testClass = JavaPsiFacade.getInstance(myProject).findClass(classReference, GlobalSearchScope.allScope(myProject));\n-    assertNotNull(testClass);\n+    PsiClass testClass = ProjectTestJvms.anyTestClass(myProject, getProjectPath());\n \n     ExternalSystemRunConfiguration esc = getExternalSystemRunConfiguration(testClass);\n \n     // Make sure task name is `test` goal.\n-    assertEquals(Collections.singletonList(\"test\"), esc.getSettings().getTaskNames());\n+    String testTask = \"test\";\n+    assertEquals(Collections.singletonList(testTask), esc.getSettings().getTaskNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d73e59402f1ee7bfa99c0c7c6b8974f76c27b1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA0NzkyOnYy", "diffSide": "LEFT", "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0Nzo1MVrOFoaX6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzozMzo1MFrOFo3_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTQ2Ng==", "bodyText": "Do you think it'd be possible to wrap this around\nif (PantsUtil.isCompatiblePantsVersion(getProjectPath(), \"1.25.0\")) { \n...\n} \nelse {\n// testprojects/tests/java/org/pantsbuild/testproject/testjvms:base\n// testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight\n// testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight-test-platform\n}", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r377919466", "createdAt": "2020-02-11T21:47:51Z", "author": {"login": "wisechengyi"}, "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "diffHunk": "@@ -20,48 +20,41 @@\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiMethod;\n import com.intellij.psi.PsiPackage;\n-import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.testFramework.MapDataContext;\n import com.twitter.intellij.pants.PantsManager;\n+import com.twitter.intellij.pants.util.ProjectTestJvms;\n import com.twitter.intellij.pants.service.task.PantsTaskManager;\n import com.twitter.intellij.pants.settings.PantsExecutionSettings;\n import com.twitter.intellij.pants.testFramework.OSSPantsIntegrationTest;\n import com.twitter.intellij.pants.util.PantsUtil;\n import org.jetbrains.annotations.NotNull;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n \n public class OSSPantsJvmRunConfigurationIntegrationTest extends OSSPantsIntegrationTest {\n   public void testClassRunConfiguration() throws Throwable {\n     doImport(\"testprojects/tests/java/org/pantsbuild/testproject/testjvms\");\n \n-    String classReference = \"org.pantsbuild.testproject.testjvms.TestSix\";\n-\n-    PsiClass testClass = JavaPsiFacade.getInstance(myProject).findClass(classReference, GlobalSearchScope.allScope(myProject));\n-    assertNotNull(testClass);\n+    PsiClass testClass = ProjectTestJvms.anyTestClass(myProject, getProjectPath());\n \n     ExternalSystemRunConfiguration esc = getExternalSystemRunConfiguration(testClass);\n \n     // Make sure task name is `test` goal.\n-    assertEquals(Collections.singletonList(\"test\"), esc.getSettings().getTaskNames());\n+    String testTask = \"test\";\n+    assertEquals(Collections.singletonList(testTask), esc.getSettings().getTaskNames());\n \n     List<String> configScriptParameters = PantsUtil.parseCmdParameters(Optional.ofNullable(esc.getSettings().getScriptParameters()));\n-\n-    List<String> expectedConfigScriptParameters = Arrays.asList(\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight-test-platform\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:six\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:seven\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:base\",\n-      \"--test-junit-test=\" + classReference\n-    );\n-    assertEquals(expectedConfigScriptParameters, configScriptParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d73e59402f1ee7bfa99c0c7c6b8974f76c27b1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMjk4MA==", "bodyText": "Sorry, I don't think I follow.\nThe highlighted code is removed from repository as it is no longer necessary - now, we don't use hardcoded names of the files but rather inspect the directory and get expected names from there. This should work the same way regardless of the pants version.\nCould you rephrase your intention so that I can understand it better?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r378222980", "createdAt": "2020-02-12T12:34:17Z", "author": {"login": "mzarnowski"}, "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "diffHunk": "@@ -20,48 +20,41 @@\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiMethod;\n import com.intellij.psi.PsiPackage;\n-import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.testFramework.MapDataContext;\n import com.twitter.intellij.pants.PantsManager;\n+import com.twitter.intellij.pants.util.ProjectTestJvms;\n import com.twitter.intellij.pants.service.task.PantsTaskManager;\n import com.twitter.intellij.pants.settings.PantsExecutionSettings;\n import com.twitter.intellij.pants.testFramework.OSSPantsIntegrationTest;\n import com.twitter.intellij.pants.util.PantsUtil;\n import org.jetbrains.annotations.NotNull;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n \n public class OSSPantsJvmRunConfigurationIntegrationTest extends OSSPantsIntegrationTest {\n   public void testClassRunConfiguration() throws Throwable {\n     doImport(\"testprojects/tests/java/org/pantsbuild/testproject/testjvms\");\n \n-    String classReference = \"org.pantsbuild.testproject.testjvms.TestSix\";\n-\n-    PsiClass testClass = JavaPsiFacade.getInstance(myProject).findClass(classReference, GlobalSearchScope.allScope(myProject));\n-    assertNotNull(testClass);\n+    PsiClass testClass = ProjectTestJvms.anyTestClass(myProject, getProjectPath());\n \n     ExternalSystemRunConfiguration esc = getExternalSystemRunConfiguration(testClass);\n \n     // Make sure task name is `test` goal.\n-    assertEquals(Collections.singletonList(\"test\"), esc.getSettings().getTaskNames());\n+    String testTask = \"test\";\n+    assertEquals(Collections.singletonList(testTask), esc.getSettings().getTaskNames());\n \n     List<String> configScriptParameters = PantsUtil.parseCmdParameters(Optional.ofNullable(esc.getSettings().getScriptParameters()));\n-\n-    List<String> expectedConfigScriptParameters = Arrays.asList(\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight-test-platform\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:six\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:seven\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:base\",\n-      \"--test-junit-test=\" + classReference\n-    );\n-    assertEquals(expectedConfigScriptParameters, configScriptParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTQ2Ng=="}, "originalCommit": {"oid": "a9d73e59402f1ee7bfa99c0c7c6b8974f76c27b1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNDYzMA==", "bodyText": "I see. I guess that works, too. Thanks!\nMy original thought was to keep the existing mechanism, and assert on different targets based on the pants version in the pantsbuild/pants repo.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r378404630", "createdAt": "2020-02-12T17:33:50Z", "author": {"login": "wisechengyi"}, "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "diffHunk": "@@ -20,48 +20,41 @@\n import com.intellij.psi.PsiElement;\n import com.intellij.psi.PsiMethod;\n import com.intellij.psi.PsiPackage;\n-import com.intellij.psi.search.GlobalSearchScope;\n import com.intellij.testFramework.MapDataContext;\n import com.twitter.intellij.pants.PantsManager;\n+import com.twitter.intellij.pants.util.ProjectTestJvms;\n import com.twitter.intellij.pants.service.task.PantsTaskManager;\n import com.twitter.intellij.pants.settings.PantsExecutionSettings;\n import com.twitter.intellij.pants.testFramework.OSSPantsIntegrationTest;\n import com.twitter.intellij.pants.util.PantsUtil;\n import org.jetbrains.annotations.NotNull;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n \n public class OSSPantsJvmRunConfigurationIntegrationTest extends OSSPantsIntegrationTest {\n   public void testClassRunConfiguration() throws Throwable {\n     doImport(\"testprojects/tests/java/org/pantsbuild/testproject/testjvms\");\n \n-    String classReference = \"org.pantsbuild.testproject.testjvms.TestSix\";\n-\n-    PsiClass testClass = JavaPsiFacade.getInstance(myProject).findClass(classReference, GlobalSearchScope.allScope(myProject));\n-    assertNotNull(testClass);\n+    PsiClass testClass = ProjectTestJvms.anyTestClass(myProject, getProjectPath());\n \n     ExternalSystemRunConfiguration esc = getExternalSystemRunConfiguration(testClass);\n \n     // Make sure task name is `test` goal.\n-    assertEquals(Collections.singletonList(\"test\"), esc.getSettings().getTaskNames());\n+    String testTask = \"test\";\n+    assertEquals(Collections.singletonList(testTask), esc.getSettings().getTaskNames());\n \n     List<String> configScriptParameters = PantsUtil.parseCmdParameters(Optional.ofNullable(esc.getSettings().getScriptParameters()));\n-\n-    List<String> expectedConfigScriptParameters = Arrays.asList(\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight-test-platform\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:six\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:seven\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:base\",\n-      \"--test-junit-test=\" + classReference\n-    );\n-    assertEquals(expectedConfigScriptParameters, configScriptParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTQ2Ng=="}, "originalCommit": {"oid": "a9d73e59402f1ee7bfa99c0c7c6b8974f76c27b1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODA0ODczOnYy", "diffSide": "LEFT", "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0ODowNFrOFoaYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo0ODowNFrOFoaYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxOTU4OQ==", "bodyText": "same here", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/492#discussion_r377919589", "createdAt": "2020-02-11T21:48:04Z", "author": {"login": "wisechengyi"}, "path": "tests/com/twitter/intellij/pants/execution/OSSPantsJvmRunConfigurationIntegrationTest.java", "diffHunk": "@@ -76,34 +69,21 @@ public void testClassRunConfiguration() throws Throwable {\n \n     String debuggerSetup = \"dummy_debugger_setup\";\n \n-    GeneralCommandLine finalDebugCommandline = getFinalCommandline(esc, debuggerSetup, taskManagerClass);\n+    List<String> debugParameters = Arrays.asList(\"--no-test-junit-timeouts\", \"--jvm-test-junit-options=\" + debuggerSetup, \"test\");\n+    List<String> expectedDebugParameters = Stream.of(debugParameters, configScriptParameters)\n+      .flatMap(Collection::stream)\n+      .collect(Collectors.toList());\n \n-    List<String> expectedFinalDebugCommandlineParameters = Arrays.asList(\n-      \"--no-test-junit-timeouts\",\n-      \"--jvm-test-junit-options=\" + debuggerSetup,\n-      \"test\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight-test-platform\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:six\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:seven\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:eight\",\n-      \"testprojects/tests/java/org/pantsbuild/testproject/testjvms:base\",\n-      \"--test-junit-test=\" + classReference\n-    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d73e59402f1ee7bfa99c0c7c6b8974f76c27b1"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2039, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}