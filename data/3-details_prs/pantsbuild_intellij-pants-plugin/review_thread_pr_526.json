{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTgzMzk1", "number": 526, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0OTo0NVrOD5Ewxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNjoxMlrOD58QBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTczNDQ2OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0OTo0NVrOGQJAuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo0OTo0NVrOGQJAuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3ODA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String NOTIFICATION_TITLE = \"Fastpass version changed\";\n          \n          \n            \n              private static final String NOTIFICATION_TITLE = \"Fastpass update available\";", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/526#discussion_r419578041", "createdAt": "2020-05-04T16:49:45Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.components.impl;\n+\n+import com.google.gson.Gson;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.notification.EventLog;\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationDisplayType;\n+import com.intellij.notification.NotificationGroup;\n+import com.intellij.notification.NotificationListener;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.util.PantsConstants;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.swing.event.HyperlinkEvent;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+public class FastpassUpdater {\n+\n+  private static final Logger LOG = Logger.getInstance(FastpassUpdater.class);\n+\n+  public static final String FASTPASS_PATH = \"/opt/twitter_mde/bin/fastpass\";\n+  public static final String BLOOP_PATH = \"/opt/twitter_mde/bin/bloop\";\n+\n+  private static final String NOTIFICATION_TITLE = \"Fastpass version changed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b8170ea6ff74f4edff5bb179948ce88fc4aa78"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTk0NjI5OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0Mjo1NlrOGQLDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0Mjo1NlrOGQLDXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMTQ4Ng==", "bodyText": "Is there a way to avoid re-prompting the user every 60 minutes if the user closes the prompt? I'm not sure what the ideal UX should be in this case, maybe it's OK to ask every hr but it might be a bit spammy \ud83e\udd14 Maybe we should change the check to schedule every 24 hours instead so that it comes up max once per day.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/526#discussion_r419611486", "createdAt": "2020-05-04T17:42:56Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "diffHunk": "@@ -0,0 +1,208 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.components.impl;\n+\n+import com.google.gson.Gson;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.notification.EventLog;\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationDisplayType;\n+import com.intellij.notification.NotificationGroup;\n+import com.intellij.notification.NotificationListener;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.util.PantsConstants;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.swing.event.HyperlinkEvent;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+public class FastpassUpdater {\n+\n+  private static final Logger LOG = Logger.getInstance(FastpassUpdater.class);\n+\n+  public static final String FASTPASS_PATH = \"/opt/twitter_mde/bin/fastpass\";\n+  public static final String BLOOP_PATH = \"/opt/twitter_mde/bin/bloop\";\n+\n+  private static final String NOTIFICATION_TITLE = \"Fastpass version changed\";\n+  public static final String NOTIFICATION_HREF = \"fastpass-update\";\n+\n+  private static boolean initialized = false;\n+\n+  private static class BloopSettings {\n+    public List<String> refreshProjectsCommand;\n+  }\n+\n+  private static class FastpassData {\n+    public String version;\n+    public String projectName;\n+    public FastpassData(String version, String projectName) {\n+      this.version = version;\n+      this.projectName = projectName;\n+    }\n+  }\n+\n+  public static void initialize() {\n+    if (!initialized) {\n+      synchronized (FastpassUpdater.class) {\n+        if (!initialized) {\n+          ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);\n+          timer.scheduleWithFixedDelay(FastpassUpdater::checkForFastpassUpdates, 1, 60, TimeUnit.MINUTES);\n+          initialized = true;\n+        }\n+      }\n+    }\n+  }\n+\n+  private static void checkForFastpassUpdates() {\n+    VirtualFile fastpassBinary = LocalFileSystem.getInstance().findFileByPath(FASTPASS_PATH);\n+    if (fastpassBinary != null && fastpassBinary.exists()) {\n+      systemVersion(fastpassBinary.getPath())\n+        .ifPresent(systemVersion -> allOpenBspProjects()\n+          .forEach(project -> extractFastpassData(project)\n+            .ifPresent(data -> {\n+              if (!data.version.equals(systemVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b8170ea6ff74f4edff5bb179948ce88fc4aa78"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTA1NjU1OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzowMDowOFrOGQoNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyNDowM1rOGQutaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4OTA5OQ==", "bodyText": "Just to confirm, does this check happen for users who are not using a BSP project?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/526#discussion_r420089099", "createdAt": "2020-05-05T13:00:08Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "diffHunk": "@@ -58,18 +61,59 @@\n   private static class FastpassData {\n     public String version;\n     public String projectName;\n+\n     public FastpassData(String version, String projectName) {\n       this.version = version;\n       this.projectName = projectName;\n     }\n   }\n \n+  public static final class Action extends AnAction {\n+\n+    public static final String DIALOG_TITLE = \"Fastpass Update\";\n+\n+    @Override\n+    public void update(@NotNull AnActionEvent e) {\n+      boolean show = fastpassBinaryExists();\n+      e.getPresentation().setEnabledAndVisible(show);\n+    }\n+\n+    @Override\n+    public void actionPerformed(@NotNull AnActionEvent e) {\n+      Project project = e.getProject();\n+      if (fastpassBinaryExists()) {\n+        systemVersion(FASTPASS_PATH)\n+          .ifPresent(systemVersion -> extractFastpassData(project)\n+            .ifPresent(data -> {\n+              if (!data.version.equals(systemVersion)) {\n+                String message = \"Do you want to update fastpass to version: \" + systemVersion + \"?\";\n+                int answer = Messages.showYesNoDialog(project, message, DIALOG_TITLE, null);\n+                if (answer == Messages.YES) {\n+                  updateFastpassVersion(project, data);\n+                }\n+              } else {\n+                Messages.showInfoMessage(project, \"Fastpass is already up to date\", DIALOG_TITLE);\n+              }\n+            }));\n+      }\n+    }\n+\n+    private boolean fastpassBinaryExists() {\n+      VirtualFile fastpassBinary = LocalFileSystem.getInstance().findFileByPath(FASTPASS_PATH);\n+      return fastpassBinary != null && fastpassBinary.exists();\n+    }\n+  }\n+\n   public static void initialize() {\n     if (!initialized) {\n       synchronized (FastpassUpdater.class) {\n         if (!initialized) {\n           ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a3babb738749abdaa0d53ccbd4d4cb354b203ce"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NTY4OA==", "bodyText": "Good catch, I lost this logic somewhere on the way. So it would always start the thread, but not do anything than check for open bsp projects once a day. I updated it, so that the thread is started after opening first bsp project (rather than any project).", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/526#discussion_r420195688", "createdAt": "2020-05-05T15:24:03Z", "author": {"login": "lukaszwawrzyk"}, "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "diffHunk": "@@ -58,18 +61,59 @@\n   private static class FastpassData {\n     public String version;\n     public String projectName;\n+\n     public FastpassData(String version, String projectName) {\n       this.version = version;\n       this.projectName = projectName;\n     }\n   }\n \n+  public static final class Action extends AnAction {\n+\n+    public static final String DIALOG_TITLE = \"Fastpass Update\";\n+\n+    @Override\n+    public void update(@NotNull AnActionEvent e) {\n+      boolean show = fastpassBinaryExists();\n+      e.getPresentation().setEnabledAndVisible(show);\n+    }\n+\n+    @Override\n+    public void actionPerformed(@NotNull AnActionEvent e) {\n+      Project project = e.getProject();\n+      if (fastpassBinaryExists()) {\n+        systemVersion(FASTPASS_PATH)\n+          .ifPresent(systemVersion -> extractFastpassData(project)\n+            .ifPresent(data -> {\n+              if (!data.version.equals(systemVersion)) {\n+                String message = \"Do you want to update fastpass to version: \" + systemVersion + \"?\";\n+                int answer = Messages.showYesNoDialog(project, message, DIALOG_TITLE, null);\n+                if (answer == Messages.YES) {\n+                  updateFastpassVersion(project, data);\n+                }\n+              } else {\n+                Messages.showInfoMessage(project, \"Fastpass is already up to date\", DIALOG_TITLE);\n+              }\n+            }));\n+      }\n+    }\n+\n+    private boolean fastpassBinaryExists() {\n+      VirtualFile fastpassBinary = LocalFileSystem.getInstance().findFileByPath(FASTPASS_PATH);\n+      return fastpassBinary != null && fastpassBinary.exists();\n+    }\n+  }\n+\n   public static void initialize() {\n     if (!initialized) {\n       synchronized (FastpassUpdater.class) {\n         if (!initialized) {\n           ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4OTA5OQ=="}, "originalCommit": {"oid": "0a3babb738749abdaa0d53ccbd4d4cb354b203ce"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDgyNTY3OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNjoxMlrOGRf5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNjoxMlrOGRf5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMTU4Mg==", "bodyText": "I just noticed that this method relies on the implementation details of bloop.settings.json that may change in the future. Can we first add a check that tries to read the fastpassVersion field in .bsp/bloop.json? This field is currently not generated by fastpass so it won't be used now, but we can add it separately to Metals which would make this logic less fragile.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/526#discussion_r421001582", "createdAt": "2020-05-06T18:26:12Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/components/impl/FastpassUpdater.java", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.components.impl;\n+\n+import com.google.gson.Gson;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.notification.EventLog;\n+import com.intellij.notification.Notification;\n+import com.intellij.notification.NotificationDisplayType;\n+import com.intellij.notification.NotificationGroup;\n+import com.intellij.notification.NotificationListener;\n+import com.intellij.notification.NotificationType;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.diagnostic.Logger;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.util.PantsConstants;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.swing.event.HyperlinkEvent;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+public class FastpassUpdater {\n+\n+  private static final Logger LOG = Logger.getInstance(FastpassUpdater.class);\n+\n+  public static final String FASTPASS_PATH = \"/opt/twitter_mde/bin/fastpass\";\n+  public static final String BLOOP_PATH = \"/opt/twitter_mde/bin/bloop\";\n+\n+  private static final String NOTIFICATION_TITLE = \"Fastpass update available\";\n+  public static final String NOTIFICATION_HREF = \"fastpass-update\";\n+\n+  private static boolean initialized = false;\n+\n+  private static class BloopSettings {\n+    public List<String> refreshProjectsCommand;\n+  }\n+\n+  private static class FastpassData {\n+    public String version;\n+    public String projectName;\n+\n+    public FastpassData(String version, String projectName) {\n+      this.version = version;\n+      this.projectName = projectName;\n+    }\n+  }\n+\n+  public static final class Action extends AnAction {\n+\n+    public static final String DIALOG_TITLE = \"Fastpass Update\";\n+\n+    @Override\n+    public void update(@NotNull AnActionEvent e) {\n+      boolean show = fastpassBinaryExists();\n+      e.getPresentation().setEnabledAndVisible(show);\n+    }\n+\n+    @Override\n+    public void actionPerformed(@NotNull AnActionEvent e) {\n+      Project project = e.getProject();\n+      if (fastpassBinaryExists()) {\n+        systemVersion(FASTPASS_PATH)\n+          .ifPresent(systemVersion -> extractFastpassData(project)\n+            .ifPresent(data -> {\n+              if (!data.version.equals(systemVersion)) {\n+                String message = \"Do you want to update fastpass to version: \" + systemVersion + \"?\";\n+                int answer = Messages.showYesNoDialog(project, message, DIALOG_TITLE, null);\n+                if (answer == Messages.YES) {\n+                  updateFastpassVersion(project, data);\n+                }\n+              } else {\n+                Messages.showInfoMessage(project, \"Fastpass is already up to date\", DIALOG_TITLE);\n+              }\n+            }));\n+      }\n+    }\n+\n+    private boolean fastpassBinaryExists() {\n+      VirtualFile fastpassBinary = LocalFileSystem.getInstance().findFileByPath(FASTPASS_PATH);\n+      return fastpassBinary != null && fastpassBinary.exists();\n+    }\n+  }\n+\n+  public static void initialize(Project project) {\n+    if (PantsUtil.isBspProject(project) && !initialized) {\n+      synchronized (FastpassUpdater.class) {\n+        if (!initialized) {\n+          ScheduledExecutorService timer = Executors.newScheduledThreadPool(1);\n+          TimeUnit timeUnit = TimeUnit.SECONDS;\n+          timer.scheduleWithFixedDelay(FastpassUpdater::checkForFastpassUpdates,\n+                                       timeUnit.convert(1, TimeUnit.MINUTES),\n+                                       timeUnit.convert(1, TimeUnit.DAYS),\n+                                       timeUnit);\n+          initialized = true;\n+        }\n+      }\n+    }\n+  }\n+\n+  private static void checkForFastpassUpdates() {\n+    VirtualFile fastpassBinary = LocalFileSystem.getInstance().findFileByPath(FASTPASS_PATH);\n+    if (fastpassBinary != null && fastpassBinary.exists()) {\n+      systemVersion(fastpassBinary.getPath())\n+        .ifPresent(systemVersion -> allOpenBspProjects()\n+          .forEach(project -> extractFastpassData(project)\n+            .ifPresent(data -> {\n+              if (!data.version.equals(systemVersion)) {\n+                showUpdateNotification(project, systemVersion, data);\n+              }\n+            })));\n+    }\n+  }\n+\n+  private static void showUpdateNotification(Project project, String systemVersion, FastpassData data) {\n+    if (!hasNotification(project)) {\n+      Notification notification = new NotificationGroup(PantsConstants.PANTS, NotificationDisplayType.STICKY_BALLOON, true)\n+        .createNotification(\n+          NOTIFICATION_TITLE,\n+          \"<a href='\" + NOTIFICATION_HREF + \"'>Update</a> fastpass to version: \" + systemVersion,\n+          NotificationType.INFORMATION,\n+          new NotificationListener.Adapter() {\n+            @Override\n+            protected void hyperlinkActivated(@NotNull Notification notification, @NotNull HyperlinkEvent e) {\n+              if (NOTIFICATION_HREF.equals(e.getDescription())) {\n+                updateFastpassVersion(project, data);\n+              }\n+              notification.expire();\n+            }\n+          }\n+        );\n+\n+      notification.notify(project);\n+    }\n+  }\n+\n+  private static boolean hasNotification(Project project) {\n+    ArrayList<Notification> notifications = EventLog.getLogModel(project).getNotifications();\n+    return notifications.stream().anyMatch(s -> s.getTitle().equals(NOTIFICATION_TITLE));\n+  }\n+\n+  private static void updateFastpassVersion(Project project, FastpassData data) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Updating fastpass version\") {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        indicator.setText(\"Exiting bloop\");\n+        exitBloop();\n+        indicator.setText(\"Running fastpass refresh\");\n+        boolean ok = runFastpassRefresh(data, project);\n+        if (ok) {\n+          indicator.setText(\"Refreshing BSP project after fastpass update\");\n+          PantsUtil.refreshAllProjects(project);\n+        }\n+      }\n+    });\n+  }\n+\n+  private static void exitBloop() {\n+    try {\n+      new ProcessBuilder(BLOOP_PATH, \"exit\").start().waitFor();\n+    }\n+    catch (Exception e) {\n+      LOG.warn(e);\n+    }\n+  }\n+\n+  private static boolean runFastpassRefresh(FastpassData data, Project project) {\n+    try {\n+      GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+      commandLine.setExePath(FASTPASS_PATH);\n+      commandLine.addParameters(\n+        \"refresh\",\n+        \"--intellij\",\n+        \"--intellijLauncher\", \"echo\", // to avoid opening project again\n+        data.projectName\n+      );\n+      Process refresh = commandLine.createProcess();\n+      refresh.waitFor();\n+      return refresh.exitValue() == 0;\n+    }\n+    catch (Exception e) {\n+      LOG.warn(e);\n+      return false;\n+    }\n+  }\n+\n+  private static Optional<FastpassData> extractFastpassData(Project project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4dcdc4db2bc040314d0e751753c3155b4997fa"}, "originalPosition": 209}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2057, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}