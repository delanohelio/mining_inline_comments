{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTkzMzY3", "number": 541, "title": "Create synthetic root modules modules for target specs", "bodyText": "Thanks to this we decrease the number of separate module graphs, which hopefully improves performance of VCS-related IntelliJ features.", "createdAt": "2020-06-24T13:03:47Z", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541", "merged": true, "mergeCommit": {"oid": "a59f12da18800c84452060673ace245dcd23cf80"}, "closed": true, "closedAt": "2020-06-25T16:32:33Z", "author": {"login": "tpasternak"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcubOqXgFqTQzNjcyMjUwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuwlIeAFqTQzNzYyMjcwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzIyNTA3", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#pullrequestreview-436722507", "createdAt": "2020-06-24T14:48:12Z", "commit": {"oid": "90c058974c19a799e6e92a1c95d974391dfa1219"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo0ODoxMlrOGoVp5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo0OToxOVrOGoVtPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1MTAxNQ==", "bodyText": "Fastpass uses the -project-root naming convention but it still feels a bit weird. Any suggestions for a clearer or more self-explanatory name? \ud83e\udd14", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#discussion_r444951015", "createdAt": "2020-06-24T14:48:12Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/service/project/resolver/PantsSourceRootsExtension.java", "diffHunk": "@@ -67,6 +77,68 @@ public void resolve(\n \n       createContentRoots(moduleDataNode, targetInfo);\n     }\n+    installSyntheticModules(executor, projectDataNode, modules);\n+  }\n+\n+  /**\n+   * Takes a set of paths. Returns a new set without paths that are children of any other path in the set\n+   * Ex. for [A, A/B, A/B/C, B, C/D] the result set is [A, B, C/D]\n+   */\n+  public static Set<String> removeChildren(Set<String> paths) {\n+    if(paths.size() > 0 ) {\n+      List<String> sorted = paths.stream().sorted().collect(Collectors.toList());\n+      String current = sorted.get(0);\n+      List<String> buf = new ArrayList<>();\n+      buf.add(current);\n+      for (String s : sorted.stream().skip(1).collect(Collectors.toList())) {\n+        if (!s.startsWith(current)) {\n+          current = s;\n+          buf.add(s);\n+        }\n+      }\n+      return new HashSet<>(buf);\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private void installSyntheticModules(\n+    @NotNull PantsCompileOptionsExecutor executor,\n+    @NotNull DataNode<ProjectData> projectDataNode,\n+    @NotNull Map<String, DataNode<ModuleData>> modules\n+  ) {\n+    Path projectPath = Paths.get(executor.getBuildRoot().getAbsolutePath());\n+    Set<String> replaced =\n+      executor.getOptions().getSelectedTargetSpecs().stream()\n+        .map(x -> x.replaceFirst(\"/?:.*\", \"\"))\n+        .collect(Collectors.toSet());\n+    Set<String> replacedWithoutChildren = removeChildren(replaced);\n+    Set<String> allContentRoots =\n+      modules.values().stream()\n+        .flatMap(x -> x.getChildren()\n+        .stream())\n+        .map(x -> x.getData(ProjectKeys.CONTENT_ROOT))\n+        .filter(Objects::nonNull)\n+        .map(x -> x.getRootPath())\n+        .collect(Collectors.toSet());\n+    replacedWithoutChildren.removeAll(allContentRoots);\n+\n+    for (String path: replaced) {\n+      String moduleName = projectPath.relativize(Paths.get(path)).toString().replaceAll(\"/\", \"_\") + \"-project-root\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c058974c19a799e6e92a1c95d974391dfa1219"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1MTg2OQ==", "bodyText": "(unrelated to this PR) This module doesn't have any content roots from what I can see. Is there a way to achieve exactly the same via BSP? When I tried to create empty Bloop projects then it didn't help, I had to add a fake resource directory which caused other problems.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#discussion_r444951869", "createdAt": "2020-06-24T14:49:19Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/service/project/resolver/PantsSourceRootsExtension.java", "diffHunk": "@@ -67,6 +77,68 @@ public void resolve(\n \n       createContentRoots(moduleDataNode, targetInfo);\n     }\n+    installSyntheticModules(executor, projectDataNode, modules);\n+  }\n+\n+  /**\n+   * Takes a set of paths. Returns a new set without paths that are children of any other path in the set\n+   * Ex. for [A, A/B, A/B/C, B, C/D] the result set is [A, B, C/D]\n+   */\n+  public static Set<String> removeChildren(Set<String> paths) {\n+    if(paths.size() > 0 ) {\n+      List<String> sorted = paths.stream().sorted().collect(Collectors.toList());\n+      String current = sorted.get(0);\n+      List<String> buf = new ArrayList<>();\n+      buf.add(current);\n+      for (String s : sorted.stream().skip(1).collect(Collectors.toList())) {\n+        if (!s.startsWith(current)) {\n+          current = s;\n+          buf.add(s);\n+        }\n+      }\n+      return new HashSet<>(buf);\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private void installSyntheticModules(\n+    @NotNull PantsCompileOptionsExecutor executor,\n+    @NotNull DataNode<ProjectData> projectDataNode,\n+    @NotNull Map<String, DataNode<ModuleData>> modules\n+  ) {\n+    Path projectPath = Paths.get(executor.getBuildRoot().getAbsolutePath());\n+    Set<String> replaced =\n+      executor.getOptions().getSelectedTargetSpecs().stream()\n+        .map(x -> x.replaceFirst(\"/?:.*\", \"\"))\n+        .collect(Collectors.toSet());\n+    Set<String> replacedWithoutChildren = removeChildren(replaced);\n+    Set<String> allContentRoots =\n+      modules.values().stream()\n+        .flatMap(x -> x.getChildren()\n+        .stream())\n+        .map(x -> x.getData(ProjectKeys.CONTENT_ROOT))\n+        .filter(Objects::nonNull)\n+        .map(x -> x.getRootPath())\n+        .collect(Collectors.toSet());\n+    replacedWithoutChildren.removeAll(allContentRoots);\n+\n+    for (String path: replaced) {\n+      String moduleName = projectPath.relativize(Paths.get(path)).toString().replaceAll(\"/\", \"_\") + \"-project-root\";\n+      final ModuleData moduleData = new ModuleData(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c058974c19a799e6e92a1c95d974391dfa1219"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDAxMjI0", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#pullrequestreview-437001224", "createdAt": "2020-06-24T20:57:23Z", "commit": {"oid": "9de98d0c5c098c7a86906d616de066e6ded17431"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo1NzoyM1rOGoi3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo1NzoyM1rOGoi3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NzQ1OQ==", "bodyText": "is replaceFirst(\"/?:.*\", \"\") the same as split(\":\")[0], if it's easier to reason?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#discussion_r445167459", "createdAt": "2020-06-24T20:57:23Z", "author": {"login": "wisechengyi"}, "path": "src/com/twitter/intellij/pants/service/project/resolver/PantsSourceRootsExtension.java", "diffHunk": "@@ -67,6 +77,72 @@ public void resolve(\n \n       createContentRoots(moduleDataNode, targetInfo);\n     }\n+    installSyntheticModules(executor, projectDataNode, modules);\n+  }\n+\n+  /**\n+   * Takes a set of paths. Returns a new set without paths that are children of any other path in the set\n+   * Ex. for [A, A/B, A/B/C, B, C/D] the result set is [A, B, C/D]\n+   */\n+  public static Set<String> removeChildren(Set<String> paths) {\n+    if(paths.size() > 0 ) {\n+      List<String> sorted = paths.stream().sorted().collect(Collectors.toList());\n+      String current = sorted.get(0);\n+      List<String> buf = new ArrayList<>();\n+      buf.add(current);\n+      for (String s : sorted.stream().skip(1).collect(Collectors.toList())) {\n+        if (!s.startsWith(current)) {\n+          current = s;\n+          buf.add(s);\n+        }\n+      }\n+      return new HashSet<>(buf);\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private void installSyntheticModules(\n+    @NotNull PantsCompileOptionsExecutor executor,\n+    @NotNull DataNode<ProjectData> projectDataNode,\n+    @NotNull Map<String, DataNode<ModuleData>> modules\n+  ) {\n+    Path projectPath = Paths.get(executor.getBuildRoot().getAbsolutePath());\n+    Set<String> targetSpecPaths =\n+      executor.getOptions().getSelectedTargetSpecs().stream()\n+        .map(x -> x.replaceFirst(\"/?:.*\", \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de98d0c5c098c7a86906d616de066e6ded17431"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d623152041708d30ef6d7a800154002094caa1", "author": {"user": {"login": "tpasternak", "name": "Tomasz Pasternak"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/49d623152041708d30ef6d7a800154002094caa1", "committedDate": "2020-06-25T12:23:13Z", "message": "Create synthetic root modules modules for target specs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjIyNzAw", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#pullrequestreview-437622700", "createdAt": "2020-06-25T15:42:36Z", "commit": {"oid": "49d623152041708d30ef6d7a800154002094caa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MjozNlrOGpAn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MjozNlrOGpAn8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NTAyNg==", "bodyText": "Left a \"todo\" here because I'm not sure if it's worth doing it. I iterate over the list of all already created content roots for each target spec passed as an argument. This means N*M complexity. It could be optimized to N log(M) if I used trie data structure.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/541#discussion_r445655026", "createdAt": "2020-06-25T15:42:36Z", "author": {"login": "tpasternak"}, "path": "src/com/twitter/intellij/pants/service/project/resolver/PantsSourceRootsExtension.java", "diffHunk": "@@ -67,6 +77,72 @@ public void resolve(\n \n       createContentRoots(moduleDataNode, targetInfo);\n     }\n+    installSyntheticModules(executor, projectDataNode, modules);\n+  }\n+\n+  /**\n+   * Takes a set of paths. Returns a new set without paths that are children of any other path in the set\n+   * Ex. for [A, A/B, A/B/C, B, C/D] the result set is [A, B, C/D]\n+   */\n+  public static Set<String> removeChildren(Set<String> paths) {\n+    if(paths.size() > 0 ) {\n+      List<String> sorted = paths.stream().sorted().collect(Collectors.toList());\n+      String current = sorted.get(0);\n+      List<String> buf = new ArrayList<>();\n+      buf.add(current);\n+      for (String s : sorted.stream().skip(1).collect(Collectors.toList())) {\n+        if (!s.startsWith(current)) {\n+          current = s;\n+          buf.add(s);\n+        }\n+      }\n+      return new HashSet<>(buf);\n+    }\n+    return Collections.emptySet();\n+  }\n+\n+  private void installSyntheticModules(\n+    @NotNull PantsCompileOptionsExecutor executor,\n+    @NotNull DataNode<ProjectData> projectDataNode,\n+    @NotNull Map<String, DataNode<ModuleData>> modules\n+  ) {\n+    Path projectPath = Paths.get(executor.getBuildRoot().getAbsolutePath());\n+    Set<String> targetSpecPaths =\n+      executor.getOptions().getSelectedTargetSpecs().stream()\n+        .map(x -> x.replaceFirst(\"/?:.*\", \"\"))\n+        .map(x -> Paths.get(x).isAbsolute() ? projectPath.relativize(Paths.get(x)).toString() : x)\n+        .collect(Collectors.toSet());\n+    Set<String> targetSpecPathsWithoutChildren = removeChildren(targetSpecPaths);\n+    Set<String> allContentRoots =\n+      modules.values().stream()\n+        .flatMap(x -> x.getChildren()\n+        .stream())\n+        .map(x -> x.getData(ProjectKeys.CONTENT_ROOT))\n+        .filter(Objects::nonNull)\n+        .map(x -> x.getRootPath())\n+        .collect(Collectors.toSet());\n+\n+    // todo - optimize from m*n to m * log(n)\n+    targetSpecPathsWithoutChildren.removeIf(targetSpec -> allContentRoots.stream().anyMatch(contentRoot ->  projectPath.resolve(targetSpec).startsWith(contentRoot)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d623152041708d30ef6d7a800154002094caa1"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1900, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}