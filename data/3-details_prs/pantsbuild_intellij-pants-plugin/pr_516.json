{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTUzMzky", "number": 516, "title": "Action to convert pants project to bsp", "bodyText": "Adds an action to Pants menu in Pants projects that starts a background task. This task runs fastpass to generate project with the same name as the original project has and the same targets as were selected for the project.", "createdAt": "2020-04-17T14:06:10Z", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516", "merged": true, "mergeCommit": {"oid": "35556e55400327c8b8442d85f1292e06cbb5d8e1"}, "closed": true, "closedAt": "2020-04-30T17:48:34Z", "author": {"login": "lukaszwawrzyk"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYhi9ZgH2gAyNDA1MTUzMzkyOmFkMzBhZjgwY2UyYjMzMzU4ODk3YTMwMTM1ZjM5MzRmMjQwMGE3OWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccqYUMAFqTQwMzM4NzY3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ad30af80ce2b33358897a30135f3934f2400a79b", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/ad30af80ce2b33358897a30135f3934f2400a79b", "committedDate": "2020-04-17T13:45:19Z", "message": "Action to convert pants project to bsp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTAzNTY4", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-395503568", "createdAt": "2020-04-17T14:28:14Z", "commit": {"oid": "ad30af80ce2b33358897a30135f3934f2400a79b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyODoxNFrOGHQTfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NzozMFrOGHRdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2MDM0OQ==", "bodyText": "Instead of hardcoding a version here I think we can use latest.stable instead, which will let Coursier figure out the latest stable Metals version.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r410260349", "createdAt": "2020-04-17T14:28:14Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String METALS_VERSION = \"0.8.4\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad30af80ce2b33358897a30135f3934f2400a79b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3OTIxMg==", "bodyText": "To avoid confusion whether this action modifies the existing Pants project. Is it too verbose? We could also call it \"Create new BSP project\" \ud83e\udd14\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          text=\"Convert to BSP project\">\n          \n          \n            \n                          text=\"Create new BSP project based on this Pants project\">", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r410279212", "createdAt": "2020-04-17T14:57:30Z", "author": {"login": "olafurpg"}, "path": "resources/META-INF/plugin.xml", "diffHunk": "@@ -73,6 +73,10 @@\n               class=\"com.twitter.intellij.pants.compiler.actions.PantsCompileCurrentTargetAction\"\n               text=\"Compile target(s) in the selected editor\">\n       </action>\n+      <action id=\"com.twitter.intellij.pants.ui.PantsToBspProjectAction\"\n+              class=\"com.twitter.intellij.pants.ui.PantsToBspProjectAction\"\n+              text=\"Convert to BSP project\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad30af80ce2b33358897a30135f3934f2400a79b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/4faf3e61e343c892c6c6ce8c51e1d4c29517e414", "committedDate": "2020-04-20T10:30:39Z", "message": "Handle existing bsp project"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjE2ODU1", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-397216855", "createdAt": "2020-04-21T10:56:05Z", "commit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo1NjowNlrOGI_ipw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDo1NjowNlrOGI_ipw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4Mjg1NQ==", "bodyText": "It looks like these are absolute paths since the generated project is named .Users.lgeirsson.workspace.source...\n\nI think we can fix this by stripping the prefix containing the absolute path to the Pants workspace away\n- INFO  process: /Users/lgeirsson/workspace/source/pants ... /Users/lgeirsson/workspace/source/buildcache::\n+ INFO  process: /Users/lgeirsson/workspace/source/pants ... buildcache::", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r412082855", "createdAt": "2020-04-21T10:56:06Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,165 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.ide.util.PropertiesComponent;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String BSP_LINKED_PROJECT_PATH = \"bsp.linked_project_path\";\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    Project project = e.getProject();\n+    boolean isPants = project != null && PantsUtil.isPantsProject(project);\n+    e.getPresentation().setEnabledAndVisible(isPants);\n+    if (isPants) {\n+      dependingOnBspProjectExistence(\n+        project,\n+        () -> e.getPresentation().setText(\"Create new BSP project based on this Pants project\"),\n+        linkedBspProject -> e.getPresentation().setText(\"Open linked BSP project\")\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public void actionPerformed(AnActionEvent e) {\n+    Project project = e.getProject();\n+    if (project == null) {\n+      Messages.showInfoMessage(\"Project not found.\", \"Error\");\n+      return;\n+    }\n+    dependingOnBspProjectExistence(\n+      project,\n+      () -> createBspProject(project),\n+      linkedBspProject -> ProjectUtil.openOrImport(Paths.get(linkedBspProject), new OpenProjectTask())\n+    );\n+  }\n+\n+  private void createBspProject(Project project) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Preparing BSP Project\", false) {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          GeneralCommandLine commandLine = createCommandLine(project);\n+          Process process = commandLine.createProcess();\n+          String output = readToString(process.getInputStream());\n+          String outputErr = readToString(process.getErrorStream());\n+          int result = process.waitFor();\n+          if (result != 0) {\n+            String message = formatError(output, outputErr);\n+            throw new RuntimeException(message);\n+          }\n+          else {\n+            Path projectPath = Paths.get(output).toAbsolutePath();\n+            PropertiesComponent.getInstance(project).setValue(BSP_LINKED_PROJECT_PATH, projectPath.toString());\n+            ProjectUtil.openOrImport(projectPath, new OpenProjectTask());\n+          }\n+        }\n+        catch (Exception ex) {\n+          ApplicationManager.getApplication()\n+            .invokeLater(() -> Messages.showErrorDialog(project, ex.getMessage(), \"Error\"));\n+        }\n+      }\n+    });\n+  }\n+\n+  private GeneralCommandLine createCommandLine(Project project) throws IOException {\n+    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+\n+    String coursier = coursierPath().toString();\n+    commandLine.setExePath(coursier);\n+\n+    //String name = project.getName();\n+    List<String> commandBase = Arrays.asList(\n+      \"launch\", \"org.scalameta:metals_2.12:latest.stable\",\n+      \"--main\", \"scala.meta.internal.pantsbuild.BloopPants\",\n+      \"--\",\n+      \"create\",\n+      \"--intellij\",\n+      \"--intellijLauncher\", \"echo\"\n+    );\n+    commandLine.addParameters(commandBase);\n+\n+    List<String> targets = pantsTargets(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDYxNzM3", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-397461737", "createdAt": "2020-04-21T16:08:25Z", "commit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjoxMzoyNFrOGJM0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjoxMzoyNFrOGJM0bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwMDM5Nw==", "bodyText": "cc/ @wiwa can you elaborate on what is needed in order to collect the correct metrics here?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r412300397", "createdAt": "2020-04-21T16:13:24Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,165 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.ide.util.PropertiesComponent;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String BSP_LINKED_PROJECT_PATH = \"bsp.linked_project_path\";\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    Project project = e.getProject();\n+    boolean isPants = project != null && PantsUtil.isPantsProject(project);\n+    e.getPresentation().setEnabledAndVisible(isPants);\n+    if (isPants) {\n+      dependingOnBspProjectExistence(\n+        project,\n+        () -> e.getPresentation().setText(\"Create new BSP project based on this Pants project\"),\n+        linkedBspProject -> e.getPresentation().setText(\"Open linked BSP project\")\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public void actionPerformed(AnActionEvent e) {\n+    Project project = e.getProject();\n+    if (project == null) {\n+      Messages.showInfoMessage(\"Project not found.\", \"Error\");\n+      return;\n+    }\n+    dependingOnBspProjectExistence(\n+      project,\n+      () -> createBspProject(project),\n+      linkedBspProject -> ProjectUtil.openOrImport(Paths.get(linkedBspProject), new OpenProjectTask())\n+    );\n+  }\n+\n+  private void createBspProject(Project project) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Preparing BSP Project\", false) {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          GeneralCommandLine commandLine = createCommandLine(project);\n+          Process process = commandLine.createProcess();\n+          String output = readToString(process.getInputStream());\n+          String outputErr = readToString(process.getErrorStream());\n+          int result = process.waitFor();\n+          if (result != 0) {\n+            String message = formatError(output, outputErr);\n+            throw new RuntimeException(message);\n+          }\n+          else {\n+            Path projectPath = Paths.get(output).toAbsolutePath();\n+            PropertiesComponent.getInstance(project).setValue(BSP_LINKED_PROJECT_PATH, projectPath.toString());\n+            ProjectUtil.openOrImport(projectPath, new OpenProjectTask());\n+          }\n+        }\n+        catch (Exception ex) {\n+          ApplicationManager.getApplication()\n+            .invokeLater(() -> Messages.showErrorDialog(project, ex.getMessage(), \"Error\"));\n+        }\n+      }\n+    });\n+  }\n+\n+  private GeneralCommandLine createCommandLine(Project project) throws IOException {\n+    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+\n+    String coursier = coursierPath().toString();\n+    commandLine.setExePath(coursier);\n+\n+    //String name = project.getName();\n+    List<String> commandBase = Arrays.asList(\n+      \"launch\", \"org.scalameta:metals_2.12:latest.stable\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTcyMDA0", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-398172004", "createdAt": "2020-04-22T13:09:12Z", "commit": {"oid": "8f216cdd96823f57255dff8eea60d8b8a04dba3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowOToxM1rOGJ1fpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowOToxM1rOGJ1fpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NjgyMg==", "bodyText": "This leaves a leading / in the start resulting in project names like .foo", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r412966822", "createdAt": "2020-04-22T13:09:13Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -126,13 +127,19 @@ private Path coursierPath() throws IOException {\n   }\n \n   private List<String> pantsTargets(Project project) {\n+    String root = PantsUtil.findBuildRoot(project).map(VirtualFile::getPath).orElse(\"/\");\n     PantsSettings pantsSettings = PantsSettings.getInstance(project);\n     return pantsSettings.getLinkedProjectsSettings()\n       .stream()\n       .flatMap(projectSettings -> projectSettings.getSelectedTargetSpecs().stream())\n+      .map(target -> stripPrefix(target, root))\n       .collect(Collectors.toList());\n   }\n \n+  private String stripPrefix(String s, String prefix) {\n+    return s.startsWith(prefix) ? s.substring(prefix.length()) : s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f216cdd96823f57255dff8eea60d8b8a04dba3d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "964bb51177389329f4aa896de17fc3223463ef2b", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/964bb51177389329f4aa896de17fc3223463ef2b", "committedDate": "2020-04-23T08:48:04Z", "message": "Relativize target ids"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f216cdd96823f57255dff8eea60d8b8a04dba3d", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/8f216cdd96823f57255dff8eea60d8b8a04dba3d", "committedDate": "2020-04-22T11:18:21Z", "message": "Relativize target ids"}, "afterCommit": {"oid": "964bb51177389329f4aa896de17fc3223463ef2b", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/964bb51177389329f4aa896de17fc3223463ef2b", "committedDate": "2020-04-23T08:48:04Z", "message": "Relativize target ids"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTQ0NDk2", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-399944496", "createdAt": "2020-04-24T13:27:00Z", "commit": {"oid": "964bb51177389329f4aa896de17fc3223463ef2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNzowMFrOGLXpJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoyNzowMFrOGLXpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU3NDg4NA==", "bodyText": "That fixed the issue. Thanks!", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r414574884", "createdAt": "2020-04-24T13:27:00Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,165 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.ide.util.PropertiesComponent;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String BSP_LINKED_PROJECT_PATH = \"bsp.linked_project_path\";\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    Project project = e.getProject();\n+    boolean isPants = project != null && PantsUtil.isPantsProject(project);\n+    e.getPresentation().setEnabledAndVisible(isPants);\n+    if (isPants) {\n+      dependingOnBspProjectExistence(\n+        project,\n+        () -> e.getPresentation().setText(\"Create new BSP project based on this Pants project\"),\n+        linkedBspProject -> e.getPresentation().setText(\"Open linked BSP project\")\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public void actionPerformed(AnActionEvent e) {\n+    Project project = e.getProject();\n+    if (project == null) {\n+      Messages.showInfoMessage(\"Project not found.\", \"Error\");\n+      return;\n+    }\n+    dependingOnBspProjectExistence(\n+      project,\n+      () -> createBspProject(project),\n+      linkedBspProject -> ProjectUtil.openOrImport(Paths.get(linkedBspProject), new OpenProjectTask())\n+    );\n+  }\n+\n+  private void createBspProject(Project project) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Preparing BSP Project\", false) {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          GeneralCommandLine commandLine = createCommandLine(project);\n+          Process process = commandLine.createProcess();\n+          String output = readToString(process.getInputStream());\n+          String outputErr = readToString(process.getErrorStream());\n+          int result = process.waitFor();\n+          if (result != 0) {\n+            String message = formatError(output, outputErr);\n+            throw new RuntimeException(message);\n+          }\n+          else {\n+            Path projectPath = Paths.get(output).toAbsolutePath();\n+            PropertiesComponent.getInstance(project).setValue(BSP_LINKED_PROJECT_PATH, projectPath.toString());\n+            ProjectUtil.openOrImport(projectPath, new OpenProjectTask());\n+          }\n+        }\n+        catch (Exception ex) {\n+          ApplicationManager.getApplication()\n+            .invokeLater(() -> Messages.showErrorDialog(project, ex.getMessage(), \"Error\"));\n+        }\n+      }\n+    });\n+  }\n+\n+  private GeneralCommandLine createCommandLine(Project project) throws IOException {\n+    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+\n+    String coursier = coursierPath().toString();\n+    commandLine.setExePath(coursier);\n+\n+    //String name = project.getName();\n+    List<String> commandBase = Arrays.asList(\n+      \"launch\", \"org.scalameta:metals_2.12:latest.stable\",\n+      \"--main\", \"scala.meta.internal.pantsbuild.BloopPants\",\n+      \"--\",\n+      \"create\",\n+      \"--intellij\",\n+      \"--intellijLauncher\", \"echo\"\n+    );\n+    commandLine.addParameters(commandBase);\n+\n+    List<String> targets = pantsTargets(project);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4Mjg1NQ=="}, "originalCommit": {"oid": "4faf3e61e343c892c6c6ce8c51e1d4c29517e414"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862", "author": {"user": {"login": "lukaszwawrzyk", "name": "\u0141ukasz Wawrzyk"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/064a4faee81434b3f72e9e257c0dd373fbec0862", "committedDate": "2020-04-24T14:48:13Z", "message": "Handle preexisting bsp project"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTIxODY2", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-400121866", "createdAt": "2020-04-24T17:04:32Z", "commit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzg2MzMw", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-403386330", "createdAt": "2020-04-30T10:16:26Z", "commit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMDoxNjoyN1rOGOi5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMDoxNjoyN1rOGOi5Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkwNDkxNQ==", "bodyText": "We download the newest coursier here. Imo this should either be changed to  some fixed version, or logged. Without it we lose information about coursier version that may be essential to reproduce potential bugs.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r417904915", "createdAt": "2020-04-30T10:16:27Z", "author": {"login": "tpasternak"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,192 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.ide.util.PropertiesComponent;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String BSP_LINKED_PROJECT_PATH = \"bsp.linked_project_path\";\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    Project project = e.getProject();\n+    boolean isPants = project != null && PantsUtil.isPantsProject(project);\n+    e.getPresentation().setEnabledAndVisible(isPants);\n+    if (isPants) {\n+      dependingOnBspProjectExistence(\n+        project,\n+        () -> e.getPresentation().setText(\"Create new BSP project based on this Pants project\"),\n+        linkedBspProject -> e.getPresentation().setText(\"Open linked BSP project\")\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public void actionPerformed(AnActionEvent e) {\n+    Project project = e.getProject();\n+    if (project == null) {\n+      Messages.showInfoMessage(\"Project not found.\", \"Error\");\n+      return;\n+    }\n+    dependingOnBspProjectExistence(\n+      project,\n+      () -> createBspProject(project),\n+      linkedBspProject -> ProjectUtil.openOrImport(Paths.get(linkedBspProject), new OpenProjectTask())\n+    );\n+  }\n+\n+  private void createBspProject(Project project) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Preparing BSP Project\", false) {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          GeneralCommandLine commandLine = createCommandLine(project);\n+          Process process = commandLine.createProcess();\n+          String output = readToString(process.getInputStream());\n+          String outputErr = readToString(process.getErrorStream());\n+          int result = process.waitFor();\n+          if (result != 0) {\n+            Path workspace = commandLine.getWorkDirectory().toPath();\n+            Optional<Path> projectPath = existingProjectPath(outputErr, workspace);\n+\n+            projectPath.ifPresent(path -> registerNewBspProjectAndOpen(path, project));\n+            projectPath.orElseThrow(() -> new RuntimeException(formatError(output, outputErr)));\n+          } else {\n+            Path projectPath = Paths.get(output).toAbsolutePath();\n+            registerNewBspProjectAndOpen(projectPath, project);\n+          }\n+        }\n+        catch (Exception ex) {\n+          ApplicationManager.getApplication()\n+            .invokeLater(() -> Messages.showErrorDialog(project, ex.getMessage(), \"Error\"));\n+        }\n+      }\n+    });\n+  }\n+\n+  private void registerNewBspProjectAndOpen(Path projectPath, Project project) {\n+    PropertiesComponent.getInstance(project).setValue(BSP_LINKED_PROJECT_PATH, projectPath.toString());\n+    ApplicationManager.getApplication()\n+      .invokeLater(() -> ProjectUtil.openOrImport(projectPath, new OpenProjectTask()));\n+  }\n+\n+  private Optional<Path> existingProjectPath(String output, Path workspace) {\n+    Pattern pattern = Pattern.compile(\"can't create project named '(.*?)' because it already exists\");\n+    Matcher matcher = pattern.matcher(output);\n+    if (matcher.find()) {\n+      String name = matcher.group(1);\n+      return Optional.of(workspace.resolveSibling(\"bsp-projects\").resolve(name));\n+    } else {\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private GeneralCommandLine createCommandLine(Project project) throws IOException {\n+    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+\n+    String coursier = coursierPath().toString();\n+    commandLine.setExePath(coursier);\n+\n+    List<String> commandBase = Arrays.asList(\n+      \"launch\", \"org.scalameta:metals_2.12:latest.stable\",\n+      \"--main\", \"scala.meta.internal.pantsbuild.BloopPants\",\n+      \"--\",\n+      \"create\",\n+      \"--intellij\",\n+      \"--intellijLauncher\", \"echo\"\n+    );\n+    commandLine.addParameters(commandBase);\n+\n+    List<String> targets = pantsTargets(project);\n+    commandLine.addParameters(targets);\n+    return commandLine;\n+  }\n+\n+  private Path coursierPath() throws IOException {\n+    Path destination = Paths.get(System.getProperty(\"java.io.tmpdir\"), \"pants-plugin-coursier\");\n+    if (!Files.exists(destination)) {\n+      URL url = new URL(\"https://git.io/coursier-cli\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzg3Njcx", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#pullrequestreview-403387671", "createdAt": "2020-04-30T10:18:31Z", "commit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMDoxODozMlrOGOi9ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMDoxODozMlrOGOi9ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkwNjAyMA==", "bodyText": "It would be nice to log downloaded metals version or fix it in code.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/516#discussion_r417906020", "createdAt": "2020-04-30T10:18:32Z", "author": {"login": "tpasternak"}, "path": "src/com/twitter/intellij/pants/ui/PantsToBspProjectAction.java", "diffHunk": "@@ -0,0 +1,192 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.ui;\n+\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.ide.impl.OpenProjectTask;\n+import com.intellij.ide.impl.ProjectUtil;\n+import com.intellij.ide.util.PropertiesComponent;\n+import com.intellij.openapi.actionSystem.AnAction;\n+import com.intellij.openapi.actionSystem.AnActionEvent;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.progress.ProgressIndicator;\n+import com.intellij.openapi.progress.ProgressManager;\n+import com.intellij.openapi.progress.Task;\n+import com.intellij.openapi.project.DumbAware;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.ui.Messages;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.settings.PantsSettings;\n+import com.twitter.intellij.pants.util.PantsUtil;\n+import org.apache.commons.io.IOUtils;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class PantsToBspProjectAction extends AnAction implements DumbAware {\n+  private static final String BSP_LINKED_PROJECT_PATH = \"bsp.linked_project_path\";\n+\n+  @Override\n+  public void update(@NotNull AnActionEvent e) {\n+    Project project = e.getProject();\n+    boolean isPants = project != null && PantsUtil.isPantsProject(project);\n+    e.getPresentation().setEnabledAndVisible(isPants);\n+    if (isPants) {\n+      dependingOnBspProjectExistence(\n+        project,\n+        () -> e.getPresentation().setText(\"Create new BSP project based on this Pants project\"),\n+        linkedBspProject -> e.getPresentation().setText(\"Open linked BSP project\")\n+      );\n+    }\n+  }\n+\n+  @Override\n+  public void actionPerformed(AnActionEvent e) {\n+    Project project = e.getProject();\n+    if (project == null) {\n+      Messages.showInfoMessage(\"Project not found.\", \"Error\");\n+      return;\n+    }\n+    dependingOnBspProjectExistence(\n+      project,\n+      () -> createBspProject(project),\n+      linkedBspProject -> ProjectUtil.openOrImport(Paths.get(linkedBspProject), new OpenProjectTask())\n+    );\n+  }\n+\n+  private void createBspProject(Project project) {\n+    ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Preparing BSP Project\", false) {\n+      @Override\n+      public void run(@NotNull ProgressIndicator indicator) {\n+        try {\n+          GeneralCommandLine commandLine = createCommandLine(project);\n+          Process process = commandLine.createProcess();\n+          String output = readToString(process.getInputStream());\n+          String outputErr = readToString(process.getErrorStream());\n+          int result = process.waitFor();\n+          if (result != 0) {\n+            Path workspace = commandLine.getWorkDirectory().toPath();\n+            Optional<Path> projectPath = existingProjectPath(outputErr, workspace);\n+\n+            projectPath.ifPresent(path -> registerNewBspProjectAndOpen(path, project));\n+            projectPath.orElseThrow(() -> new RuntimeException(formatError(output, outputErr)));\n+          } else {\n+            Path projectPath = Paths.get(output).toAbsolutePath();\n+            registerNewBspProjectAndOpen(projectPath, project);\n+          }\n+        }\n+        catch (Exception ex) {\n+          ApplicationManager.getApplication()\n+            .invokeLater(() -> Messages.showErrorDialog(project, ex.getMessage(), \"Error\"));\n+        }\n+      }\n+    });\n+  }\n+\n+  private void registerNewBspProjectAndOpen(Path projectPath, Project project) {\n+    PropertiesComponent.getInstance(project).setValue(BSP_LINKED_PROJECT_PATH, projectPath.toString());\n+    ApplicationManager.getApplication()\n+      .invokeLater(() -> ProjectUtil.openOrImport(projectPath, new OpenProjectTask()));\n+  }\n+\n+  private Optional<Path> existingProjectPath(String output, Path workspace) {\n+    Pattern pattern = Pattern.compile(\"can't create project named '(.*?)' because it already exists\");\n+    Matcher matcher = pattern.matcher(output);\n+    if (matcher.find()) {\n+      String name = matcher.group(1);\n+      return Optional.of(workspace.resolveSibling(\"bsp-projects\").resolve(name));\n+    } else {\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private GeneralCommandLine createCommandLine(Project project) throws IOException {\n+    GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(project);\n+\n+    String coursier = coursierPath().toString();\n+    commandLine.setExePath(coursier);\n+\n+    List<String> commandBase = Arrays.asList(\n+      \"launch\", \"org.scalameta:metals_2.12:latest.stable\",\n+      \"--main\", \"scala.meta.internal.pantsbuild.BloopPants\",\n+      \"--\",\n+      \"create\",\n+      \"--intellij\",\n+      \"--intellijLauncher\", \"echo\"\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "064a4faee81434b3f72e9e257c0dd373fbec0862"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1958, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}