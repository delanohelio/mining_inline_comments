{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNTQxMjYw", "number": 565, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjozMToxMFrOEhGZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNToxNlrOEhpOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTQzMjM5OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/macro/FilePathRelativeToBuiltRootMacro.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjozMToxMFrOHOOhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMzoyMVrOHPAKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3OTk5MQ==", "bodyText": "Do we guess the root directory from the name of the jar file? I think it can be more robust if fastpass writes the root directory in the jar file, around here\nhttps://github.com/scalameta/fastpass/blob/df9359fa7756c6e7f0f062af56fe617201897876/fastpass/src/main/scala/scala/meta/internal/fastpass/pantsbuild/SourcesJarBuilder.scala#L24\nIf that info doesn't exist in the jar file then we can fallback to this heuristic.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/565#discussion_r484679991", "createdAt": "2020-09-08T06:31:10Z", "author": {"login": "olafurpg"}, "path": "src/com/twitter/intellij/pants/macro/FilePathRelativeToBuiltRootMacro.java", "diffHunk": "@@ -6,37 +6,80 @@\n import com.intellij.ide.macro.Macro;\n import com.intellij.openapi.actionSystem.CommonDataKeys;\n import com.intellij.openapi.actionSystem.DataContext;\n+import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.io.FileUtil;\n import com.intellij.openapi.vfs.VfsUtil;\n import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.bsp.JarMappings;\n+import com.twitter.intellij.pants.bsp.PantsBspData;\n+import com.twitter.intellij.pants.bsp.PantsTargetAddress;\n import com.twitter.intellij.pants.util.PantsUtil;\n+import org.jetbrains.annotations.NotNull;\n \n+import java.nio.file.Path;\n import java.util.Optional;\n+import java.util.Set;\n \n public class FilePathRelativeToBuiltRootMacro extends Macro {\n   /**\n    * @return corresponding name of this macro\n    */\n+  @NotNull\n   @Override\n   public String getName() {\n     return \"PantsFilePathRelativeToBuildRoot\";\n   }\n \n+  @NotNull\n   @Override\n   public String getDescription() {\n     return \"Relative path from build root\";\n   }\n \n+  private Optional<String> jarFilePath(Project project, VirtualFile vFile) {\n+    Optional<VirtualFile> jarFile = JarMappings.getParentJar(vFile);\n+    if(jarFile.isPresent()) {\n+      JarMappings mappings = JarMappings.getInstance(project);\n+      Optional<Path> target = mappings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8a223cabe68116a02429efce3687c1e017b8053"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MzI0OA==", "bodyText": "Ok, now it tries to get this info from *jar!/META-INF/fastpass/source-root", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/565#discussion_r485493248", "createdAt": "2020-09-09T10:03:21Z", "author": {"login": "tpasternak"}, "path": "src/com/twitter/intellij/pants/macro/FilePathRelativeToBuiltRootMacro.java", "diffHunk": "@@ -6,37 +6,80 @@\n import com.intellij.ide.macro.Macro;\n import com.intellij.openapi.actionSystem.CommonDataKeys;\n import com.intellij.openapi.actionSystem.DataContext;\n+import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.io.FileUtil;\n import com.intellij.openapi.vfs.VfsUtil;\n import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.bsp.JarMappings;\n+import com.twitter.intellij.pants.bsp.PantsBspData;\n+import com.twitter.intellij.pants.bsp.PantsTargetAddress;\n import com.twitter.intellij.pants.util.PantsUtil;\n+import org.jetbrains.annotations.NotNull;\n \n+import java.nio.file.Path;\n import java.util.Optional;\n+import java.util.Set;\n \n public class FilePathRelativeToBuiltRootMacro extends Macro {\n   /**\n    * @return corresponding name of this macro\n    */\n+  @NotNull\n   @Override\n   public String getName() {\n     return \"PantsFilePathRelativeToBuildRoot\";\n   }\n \n+  @NotNull\n   @Override\n   public String getDescription() {\n     return \"Relative path from build root\";\n   }\n \n+  private Optional<String> jarFilePath(Project project, VirtualFile vFile) {\n+    Optional<VirtualFile> jarFile = JarMappings.getParentJar(vFile);\n+    if(jarFile.isPresent()) {\n+      JarMappings mappings = JarMappings.getInstance(project);\n+      Optional<Path> target = mappings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY3OTk5MQ=="}, "originalCommit": {"oid": "b8a223cabe68116a02429efce3687c1e017b8053"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzEzOTI2OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/macro/FilePathRelativeToBuiltRootMacro.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNToxNlrOHPEdQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjoxNToxNlrOHPEdQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzcxNQ==", "bodyText": "you could use ifPresent (similar to scala foreach)", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/565#discussion_r485563715", "createdAt": "2020-09-09T12:15:16Z", "author": {"login": "lukaszwawrzyk"}, "path": "src/com/twitter/intellij/pants/macro/FilePathRelativeToBuiltRootMacro.java", "diffHunk": "@@ -6,37 +6,103 @@\n import com.intellij.ide.macro.Macro;\n import com.intellij.openapi.actionSystem.CommonDataKeys;\n import com.intellij.openapi.actionSystem.DataContext;\n+import com.intellij.openapi.project.Project;\n import com.intellij.openapi.util.io.FileUtil;\n import com.intellij.openapi.vfs.VfsUtil;\n import com.intellij.openapi.vfs.VirtualFile;\n+import com.twitter.intellij.pants.bsp.JarMappings;\n+import com.twitter.intellij.pants.bsp.PantsBspData;\n+import com.twitter.intellij.pants.bsp.PantsTargetAddress;\n import com.twitter.intellij.pants.util.PantsUtil;\n+import org.jetbrains.annotations.NotNull;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.intellij.openapi.fileEditor.impl.LoadTextUtil.loadText;\n \n public class FilePathRelativeToBuiltRootMacro extends Macro {\n   /**\n    * @return corresponding name of this macro\n    */\n+  @NotNull\n   @Override\n   public String getName() {\n     return \"PantsFilePathRelativeToBuildRoot\";\n   }\n \n+  @NotNull\n   @Override\n   public String getDescription() {\n     return \"Relative path from build root\";\n   }\n \n+  private Optional<String> jarFilePathBasedOnFilename(Project project, VirtualFile vFile) {\n+    Optional<VirtualFile> jarFile = JarMappings.getParentJar(vFile);\n+    if(jarFile.isPresent()) {\n+      JarMappings mappings = JarMappings.getInstance(project);\n+      Optional<Path> target = mappings\n+        .findTargetForJar(jarFile.get())\n+        .flatMap(PantsTargetAddress::tryParse)\n+        .map(PantsTargetAddress::getPath);\n+      if (target.isPresent()){\n+        String relativePath = target.get().resolve(vFile.getName()).toString();\n+        Set<VirtualFile> pantsRoots = PantsBspData.pantsRoots(project);\n+        boolean pathExists = pantsRoots.stream()\n+          .anyMatch(x -> x.findFileByRelativePath(relativePath) != null);\n+        if (pathExists) {\n+          return Optional.of(relativePath);\n+        } else {\n+          return Optional.empty();\n+        }\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private Optional<String> jarFilePathBasedOnMetaInf(VirtualFile vFile) {\n+    Optional<VirtualFile> jarFile = JarMappings.getParentJar(vFile);\n+    if(jarFile.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566407d32087e8c161baf9d2b05eb28da01034af"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2011, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}