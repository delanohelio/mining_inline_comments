{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Mzk3NjM4", "number": 522, "title": "Synchronize executing pants options command", "bodyText": "Previously, multiple threads could simultaneously start the process (6 threads can be seen in the following thread dump).\n\"ApplicationImpl pooled thread 5\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@29d50bed\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$addPantsProjectIgnoredDirs$3(PantsProjectComponentImpl.java:269)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1510/0x0000000800fd0c40.accept(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.ifPresent(Optional.java:183)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.addPantsProjectIgnoredDirs(PantsProjectComponentImpl.java:262)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$projectOpened$0(PantsProjectComponentImpl.java:89)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1507/0x0000000800fd0040.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)\n\n\"ApplicationImpl pooled thread 14\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@18de94ea\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$addPantsProjectIgnoredDirs$3(PantsProjectComponentImpl.java:269)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1510/0x0000000800fd0c40.accept(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.ifPresent(Optional.java:183)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.addPantsProjectIgnoredDirs(PantsProjectComponentImpl.java:262)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$projectOpened$0(PantsProjectComponentImpl.java:89)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1507/0x0000000800fd0040.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)\n\n\"ApplicationImpl pooled thread 182\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@50e7fdc2\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$addPantsProjectIgnoredDirs$3(PantsProjectComponentImpl.java:269)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1510/0x0000000800fd0c40.accept(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.ifPresent(Optional.java:183)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.addPantsProjectIgnoredDirs(PantsProjectComponentImpl.java:262)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl.lambda$projectOpened$0(PantsProjectComponentImpl.java:89)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$$Lambda$1507/0x0000000800fd0040.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)\n\n\"ApplicationImpl pooled thread 2\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@3cde0cd3\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1.lambda$registerVfsListener$2(PantsProjectComponentImpl.java:208)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1$$Lambda$2732/0x00000008017f7c40.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)\n\n\"ApplicationImpl pooled thread 8\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@69d6dde1\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1.lambda$registerVfsListener$2(PantsProjectComponentImpl.java:208)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1$$Lambda$2732/0x00000008017f7c40.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)\n\n\"ApplicationImpl pooled thread 181\" prio=0 tid=0x0 nid=0x0 waiting on condition\n     java.lang.Thread.State: WAITING\n on com.intellij.util.concurrency.Semaphore$Sync@28bdc595\n\tat java.base@11.0.6/jdk.internal.misc.Unsafe.park(Native Method)\n\tat java.base@11.0.6/java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:885)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1039)\n\tat java.base@11.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1345)\n\tat com.intellij.util.concurrency.Semaphore.waitForUnsafe(Semaphore.java:81)\n\tat com.intellij.util.concurrency.Semaphore.waitFor(Semaphore.java:73)\n\tat com.intellij.execution.process.ProcessHandler.waitFor(ProcessHandler.java:95)\n\tat com.intellij.execution.process.BaseOSProcessHandler.waitFor(BaseOSProcessHandler.java:183)\n\tat com.intellij.execution.process.OSProcessHandler.waitFor(OSProcessHandler.java:109)\n\tat com.intellij.execution.process.CapturingProcessRunner.runProcess(CapturingProcessRunner.java:29)\n\tat com.intellij.execution.process.CapturingProcessHandler.runProcess(CapturingProcessHandler.java:55)\n\tat com.twitter.intellij.pants.util.PantsUtil.getCmdOutput(PantsUtil.java:702)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:77)\n\tat com.twitter.intellij.pants.model.PantsOptions.lambda$getPantsOptions$0(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.model.PantsOptions$$Lambda$1511/0x0000000800fd1040.apply(Unknown Source)\n\tat java.base@11.0.6/java.util.Optional.map(Optional.java:265)\n\tat com.twitter.intellij.pants.model.PantsOptions.getPantsOptions(PantsOptions.java:47)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1.lambda$registerVfsListener$2(PantsProjectComponentImpl.java:208)\n\tat com.twitter.intellij.pants.components.impl.PantsProjectComponentImpl$1$$Lambda$2732/0x00000008017f7c40.run(Unknown Source)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:20)\n\tat com.intellij.util.RunnableCallable.call(RunnableCallable.java:11)\n\tat com.intellij.openapi.application.impl.ApplicationImpl$1.call(ApplicationImpl.java:255)\n\tat java.base@11.0.6/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base@11.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base@11.0.6/java.lang.Thread.run(Thread.java:834)", "createdAt": "2020-04-27T10:14:34Z", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522", "merged": true, "mergeCommit": {"oid": "f836a15dca80b2a9cc57f66615deba4ebac668dc"}, "closed": true, "closedAt": "2020-04-30T17:39:23Z", "author": {"login": "mzarnowski"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbsxsEAFqTQwMDgyNTcyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccwrtkgFqTQwMzczNzc3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODI1NzI2", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522#pullrequestreview-400825726", "createdAt": "2020-04-27T10:32:08Z", "commit": {"oid": "81528f2c48938d57df2f6f49ecef07e5a1594cf4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozMjowOFrOGMcNdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDozMjowOFrOGMcNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5ODI5Mw==", "bodyText": "From the computeIfAbsent docstring\n\nSome attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.\n\nGiven that executing a Pants command is not \"short and simple\", would it make sense to use another synchronization mechanism?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522#discussion_r415698293", "createdAt": "2020-04-27T10:32:08Z", "author": {"login": "olafurpg"}, "path": "common/com/twitter/intellij/pants/model/PantsOptions.java", "diffHunk": "@@ -66,11 +66,11 @@ public boolean supportsLint() {\n \n   public static PantsOptions getPantsOptions(@NotNull final String pantsExecutable) {\n     File pantsExecutableFile = new File(pantsExecutable);\n-    PantsOptions cache = optionsCache.get(pantsExecutableFile);\n-    if (cache != null) {\n-      return cache;\n-    }\n+    return optionsCache.computeIfAbsent(pantsExecutableFile, file -> execPantsOptions(pantsExecutable, file));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81528f2c48938d57df2f6f49ecef07e5a1594cf4"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd91abae41ddf65894455342058f66f3ed76abfc", "author": {"user": {"login": "mzarnowski", "name": "Marek \u017barnowski"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/dd91abae41ddf65894455342058f66f3ed76abfc", "committedDate": "2020-04-27T11:26:00Z", "message": "Synchronize executing pants options command\n\nPreviously, multiple threads could simultaneously start the process (up to 6 confirmed)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81528f2c48938d57df2f6f49ecef07e5a1594cf4", "author": {"user": {"login": "mzarnowski", "name": "Marek \u017barnowski"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/81528f2c48938d57df2f6f49ecef07e5a1594cf4", "committedDate": "2020-04-27T10:10:46Z", "message": "Synchronize executing pants options command\n\nPreviously, multiple threads could simultaneously start the process (up to 6 confirmed)"}, "afterCommit": {"oid": "dd91abae41ddf65894455342058f66f3ed76abfc", "author": {"user": {"login": "mzarnowski", "name": "Marek \u017barnowski"}}, "url": "https://github.com/pantsbuild/intellij-pants-plugin/commit/dd91abae41ddf65894455342058f66f3ed76abfc", "committedDate": "2020-04-27T11:26:00Z", "message": "Synchronize executing pants options command\n\nPreviously, multiple threads could simultaneously start the process (up to 6 confirmed)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzM3Nzc5", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/522#pullrequestreview-403737779", "createdAt": "2020-04-30T17:39:09Z", "commit": {"oid": "dd91abae41ddf65894455342058f66f3ed76abfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1964, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}