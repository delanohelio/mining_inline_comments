{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzU2Mzkz", "number": 529, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NDowN1rOEAhKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NDowN1rOEAhKVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc4Nzc1OnYy", "diffSide": "RIGHT", "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NDowN1rOGb2M3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1MTo1NlrOGdmG0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Mjc2Ng==", "bodyText": "Should this be logged?\nDoes it make sense for the callers of ensureInitialized to continue if this fails?", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/529#discussion_r431852766", "createdAt": "2020-05-28T13:54:07Z", "author": {"login": "Duhemm"}, "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.bsp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.openapi.vfs.VirtualFileManager;\n+import com.intellij.openapi.vfs.newvfs.BulkFileListener;\n+import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;\n+import com.intellij.openapi.vfs.newvfs.events.VFileEvent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.lang.reflect.Type;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class JarMappings {\n+  private static final String SOURCES_JAR_SUFFIX = \"-sources.jar\";\n+\n+  public static JarMappings getInstance(Project project) {\n+    return ServiceManager.getService(project, JarMappings.class);\n+  }\n+\n+  public JarMappings(Project project) {\n+    this.project = project;\n+\n+    project.getMessageBus().connect().subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener() {\n+      @Override\n+      public void after(@NotNull List<? extends VFileEvent> events) {\n+        events.forEach(event -> {\n+          if (event instanceof VFileContentChangeEvent &&\n+              event.getFile() != null &&\n+              event.getFile().equals(librariesFile())) {\n+            librariesFileIsUpToDate = false;\n+          }\n+        });\n+      }\n+    });\n+  }\n+\n+  private final Project project;\n+\n+  private Map<String, String> libraryJarToLibrarySourceJar = new HashMap<>();\n+  private boolean librariesFileIsUpToDate = false;\n+\n+  private synchronized void ensureInitialized() {\n+    try {\n+      if (!librariesFileIsUpToDate) {\n+        VirtualFile file = librariesFile();\n+        String content = new String(file.contentsToByteArray());\n+        Type mapType = new TypeToken<Map<String, String>>() {}.getType();\n+        libraryJarToLibrarySourceJar = new Gson().fromJson(content, mapType);\n+        librariesFileIsUpToDate = true;\n+      }\n+    }\n+    catch (Exception e) {\n+      librariesFileIsUpToDate = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a41ac7239ce68389e0ef6b48d4d27b9e41d01d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4NjIyNg==", "bodyText": "I mostly expect it to fail when file is not there (could be also on bad json though), then we will end up with empty map or the previous version which should be fine to proceed. This will make sure we will just retry on the next call. But logging would be helpful in case of debugging. I added logging.", "url": "https://github.com/pantsbuild/intellij-pants-plugin/pull/529#discussion_r433686226", "createdAt": "2020-06-02T07:51:56Z", "author": {"login": "lukaszwawrzyk"}, "path": "src/com/twitter/intellij/pants/bsp/JarMappings.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright 2020 Pants project contributors (see CONTRIBUTORS.md).\n+// Licensed under the Apache License, Version 2.0 (see LICENSE).\n+\n+package com.twitter.intellij.pants.bsp;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.vfs.LocalFileSystem;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.openapi.vfs.VirtualFileManager;\n+import com.intellij.openapi.vfs.newvfs.BulkFileListener;\n+import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;\n+import com.intellij.openapi.vfs.newvfs.events.VFileEvent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.lang.reflect.Type;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class JarMappings {\n+  private static final String SOURCES_JAR_SUFFIX = \"-sources.jar\";\n+\n+  public static JarMappings getInstance(Project project) {\n+    return ServiceManager.getService(project, JarMappings.class);\n+  }\n+\n+  public JarMappings(Project project) {\n+    this.project = project;\n+\n+    project.getMessageBus().connect().subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener() {\n+      @Override\n+      public void after(@NotNull List<? extends VFileEvent> events) {\n+        events.forEach(event -> {\n+          if (event instanceof VFileContentChangeEvent &&\n+              event.getFile() != null &&\n+              event.getFile().equals(librariesFile())) {\n+            librariesFileIsUpToDate = false;\n+          }\n+        });\n+      }\n+    });\n+  }\n+\n+  private final Project project;\n+\n+  private Map<String, String> libraryJarToLibrarySourceJar = new HashMap<>();\n+  private boolean librariesFileIsUpToDate = false;\n+\n+  private synchronized void ensureInitialized() {\n+    try {\n+      if (!librariesFileIsUpToDate) {\n+        VirtualFile file = librariesFile();\n+        String content = new String(file.contentsToByteArray());\n+        Type mapType = new TypeToken<Map<String, String>>() {}.getType();\n+        libraryJarToLibrarySourceJar = new Gson().fromJson(content, mapType);\n+        librariesFileIsUpToDate = true;\n+      }\n+    }\n+    catch (Exception e) {\n+      librariesFileIsUpToDate = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Mjc2Ng=="}, "originalCommit": {"oid": "91a41ac7239ce68389e0ef6b48d4d27b9e41d01d"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2063, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}