{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjc3MzAw", "number": 365, "title": "Collapse eventstream with the streaming trait", "bodyText": "The eventstream and streaming trait fundamentally work in similar\nways, and have identical validation rules. This merges the two traits\nto simplify the model and reduce duplication.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-09T22:36:09Z", "url": "https://github.com/awslabs/smithy/pull/365", "merged": true, "mergeCommit": {"oid": "6c81c9b99d967ba5f7757c2844340a4408380614"}, "closed": true, "closedAt": "2020-04-10T19:15:26Z", "author": {"login": "JordonPhillips"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWESbhAH2gAyNDAxNjc3MzAwOjZhYTgyZGI3NzQ2MzJjZmYxNTA5YWEzNzJiMzgyY2VmY2QyYWY5NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWWDGlgFqTM5MTYxMzUwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956", "author": {"user": {"login": "JordonPhillips", "name": "Jordon Phillips"}}, "url": "https://github.com/awslabs/smithy/commit/6aa82db774632cff1509aa372b382cefcd2af956", "committedDate": "2020-04-09T22:32:10Z", "message": "Collapse eventstream with the streaming trait\n\nThe eventstream and streaming trait fundamentally work in similar\nways, and have identical validation rules. This merges the two traits\nto simplify the model and reduce duplication."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTc4ODk5", "url": "https://github.com/awslabs/smithy/pull/365#pullrequestreview-391178899", "createdAt": "2020-04-09T22:44:22Z", "commit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo0NDoyM1rOGDr2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzowNjowNlrOGDsQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxNzQwNQ==", "bodyText": "We usually use the phase \"marked with\" -- \"a union marked with the streaming trait\"", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406517405", "createdAt": "2020-04-09T22:44:23Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/event-stream-traits.rst", "diffHunk": "@@ -11,181 +11,28 @@ over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n of a service.\n \n An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+event stream is formed when an input or output member of an operation targets\n+a union with the :ref:`streaming-trait`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxNzY0Ng==", "bodyText": "Probably don't need to call this out anymore. They're just event streams and all of them have multiple events (or the ability to have multiple events)", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406517646", "createdAt": "2020-04-09T22:45:11Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/event-stream-traits.rst", "diffHunk": "@@ -11,181 +11,28 @@ over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n of a service.\n \n An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+event stream is formed when an input or output member of an operation targets\n+a union with the :ref:`streaming-trait`.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n-\n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n-\n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n-\n-        structure PublishMessagesInput {\n-            room: String,\n-\n-            @eventStream\n-            messages: Message,\n-        }\n-\n-        structure Message {\n-            message: String,\n-        }\n-\n-    .. code-tab:: json\n-\n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-.. _single-event-output-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its output:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n-\n-        operation SubscribeToMovements {\n-            output: SubscribeToMovementsOutput\n-        }\n-\n-        structure SubscribeToMovementsOutput {\n-            @eventStream\n-            movements: Movement,\n-        }\n-\n-        structure Movement {\n-            angle: Float,\n-            velocity: Float,\n-        }\n-\n-    .. code-tab:: json\n-\n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#SubscribeToMovements\": {\n-                    \"type\": \"operation\",\n-                    \"output\": {\n-                        \"target\": \"smithy.example#SubscribeToMovementsOutput\"\n-                    }\n-                },\n-                \"smithy.example#SubscribeToMovementsOutput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"movements\": {\n-                            \"target\": \"smithy.example#Movement\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Movement\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"angle\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        },\n-                        \"velocity\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-The name of the event sent over a single-event event stream is the name\n-of the member that is targeted by the ``eventStream`` trait.\n-\n-\n-Single-event client behavior\n-============================\n-\n-Clients that send or receive single-event event streams are expected to\n-provide an abstraction to end-users that allows values to be produced or\n-consumed asynchronously for the targeted event structure. Because a\n-single-event event stream does not utilize named events like a multi-event\n-event stream, functionality used to dispatch based on named events is\n-unnecessary. Clients MUST provide access to the\n-:ref:`initial-message <initial-messages>` of an event stream when necessary.\n-\n-\n-.. _multi-event-event-stream:\n-\n -------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxOTE0Nw==", "bodyText": "Really it's anything marked with the streaming trait, not just event streams", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406519147", "createdAt": "2020-04-09T22:49:55Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/http-traits.rst", "diffHunk": "@@ -933,7 +933,7 @@ Event streams\n \n When using :ref:`event streams <event-streams>` and HTTP bindings, the\n :ref:`httpPayload <httppayload-trait>` trait MUST be applied to any input or\n-output member targeted by the :ref:`eventStream-trait`.\n+output member that targets a union with the :ref:`streaming-trait`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTE3NQ==", "bodyText": "no need to specify that it has to be a union. Just anything marked as streaming", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406521175", "createdAt": "2020-04-09T22:56:27Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/http-traits.rst", "diffHunk": "@@ -1000,7 +1011,7 @@ and HTTP bindings:\n         }\n \n The following is **invalid** because the operation has the ``http`` trait\n-and an input member is marked with the ``eventStream`` trait but not\n+and an input union is marked with the ``streaming`` trait but not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTMwNQ==", "bodyText": "I think this should be rolled into the event stream doc, and the event stream doc is renamed to \"Streaming\"", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406521305", "createdAt": "2020-04-09T22:56:53Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/type-refinement-traits.rst", "diffHunk": "@@ -142,11 +142,16 @@ in Java).\n -------------------\n \n Summary\n-    Indicates that the the data stored in the shape is very large and should\n-    not be stored in memory, or that the size of the data stored in the shape\n-    is unknown at the start of a request.\n+    Indicates that the data represented by the shape needs to be streamed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTYxNw==", "bodyText": "We also need to call out that structures that target a streaming shape can only themselves be targeted from operation input or output", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406521617", "createdAt": "2020-04-09T22:57:43Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/type-refinement-traits.rst", "diffHunk": "@@ -142,11 +142,16 @@ in Java).\n -------------------\n \n Summary\n-    Indicates that the the data stored in the shape is very large and should\n-    not be stored in memory, or that the size of the data stored in the shape\n-    is unknown at the start of a request.\n+    Indicates that the data represented by the shape needs to be streamed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTMwNQ=="}, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTg2NA==", "bodyText": "Should this work for any streaming input/output -- i.e., rename this StreamIndex or StreamingIndex?", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406521864", "createdAt": "2020-04-09T22:58:33Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/EventStreamIndex.java", "diffHunk": "@@ -26,7 +26,7 @@\n import software.amazon.smithy.model.shapes.ShapeId;\n import software.amazon.smithy.model.shapes.StructureShape;\n import software.amazon.smithy.model.shapes.ToShapeId;\n-import software.amazon.smithy.model.traits.EventStreamTrait;\n+import software.amazon.smithy.model.traits.StreamingTrait;\n \n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMjM3Mg==", "bodyText": "Should we add an isEventStream method somewhere to centralize this behavior? Like on the EventStreamTrait as a static method?", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406522372", "createdAt": "2020-04-09T23:00:10Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/HttpBindingIndex.java", "diffHunk": "@@ -368,15 +368,13 @@ private String determineContentType(\n             }\n \n             if (binding.getLocation() == HttpBinding.Location.PAYLOAD) {\n-                if (binding.getMember().hasTrait(EventStreamTrait.class)) {\n-                    return eventStreamContentType;\n-                }\n-\n                 Shape target = model.getShape(binding.getMember().getTarget()).orElse(null);\n                 if (target == null) {\n                     // Can't determine the content-type because the model is broken :(\n                     // Let other parts of the validation system point this out.\n                     break;\n+                } else if (target.isUnionShape() && target.hasTrait(StreamingTrait.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMjgwMA==", "bodyText": "Nice, did this get called out in the spec?", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406522800", "createdAt": "2020-04-09T23:01:42Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/resources/software/amazon/smithy/model/errorfiles/validators/streaming-trait.errors", "diffHunk": "@@ -1,3 +1,2 @@\n-[ERROR] ns.foo#InvalidStreamingStructure$Body: The shape ns.foo#StreamingBlob has the smithy.api#streaming trait, and so may only be targeted by top-level operation inputs and outputs. | StreamingTrait\n-[ERROR] ns.foo#InvalidStreamingStructure2$Body: The shape ns.foo#StreamingBlob2 has the smithy.api#streaming trait, and so may only be targeted by top-level operation inputs and outputs. | StreamingTrait\n [ERROR] ns.foo#InvalidStreamingOutput: Only a single member of a structure can target a shape marked with the `streaming` trait, but it was found on the following members: `StreamingBlob1`, `StreamingBlob2` | ExclusiveStructureMemberTrait\n+[ERROR] ns.foo#InvalidNestedStream$NestedStream: This shape has an invalid `MEMBER_TARGET` relationship to a structure, `ns.foo#StreamingInput`, that contains a stream | StreamingTrait", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNDAxNQ==", "bodyText": "Could consolidate here if there's a helper method", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406524015", "createdAt": "2020-04-09T23:06:06Z", "author": {"login": "mtdowling"}, "path": "smithy-mqtt-traits/src/main/java/software/amazon/smithy/mqtt/traits/validators/MqttPublishInputValidator.java", "diffHunk": "@@ -42,7 +42,10 @@\n     private Stream<ValidationEvent> validateOperation(Model model, OperationShape operation) {\n         return OptionalUtils.stream(operation.getInput().flatMap(model::getShape).flatMap(Shape::asStructureShape))\n                 .flatMap(input -> input.getAllMembers().values().stream()\n-                        .filter(member -> member.hasTrait(EventStreamTrait.class))\n+                        .filter(member -> {\n+                            Shape target = model.expectShape(member.getTarget());\n+                            return target.isUnionShape() && target.hasTrait(StreamingTrait.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6aa82db774632cff1509aa372b382cefcd2af956"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b33721b498953b7099e8523259498738ceba3554", "author": {"user": {"login": "JordonPhillips", "name": "Jordon Phillips"}}, "url": "https://github.com/awslabs/smithy/commit/b33721b498953b7099e8523259498738ceba3554", "committedDate": "2020-04-10T00:00:01Z", "message": "Combine streaming trait documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409", "author": {"user": {"login": "JordonPhillips", "name": "Jordon Phillips"}}, "url": "https://github.com/awslabs/smithy/commit/5e380cde4b13ef7f719693abfe55355faefde409", "committedDate": "2020-04-10T00:22:50Z", "message": "Add helper method for event streams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjM5Njk1", "url": "https://github.com/awslabs/smithy/pull/365#pullrequestreview-391239695", "createdAt": "2020-04-10T02:36:56Z", "commit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjozNjo1NlrOGDva5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMjo1MTo0OVrOGDvnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTg0NA==", "bodyText": "This is a broken link", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406575844", "createdAt": "2020-04-10T02:36:56Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NTk3Mg==", "bodyText": "This should be under the \"Event streams\" section", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406575972", "createdAt": "2020-04-10T02:37:39Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -394,7 +303,7 @@ Initial messages\n ----------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NjAxNA==", "bodyText": "Can you make this \"Client behavior\"? And it seems like this should go after \"Initial messages\" since it refers to that section before it's introduced.", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406576014", "createdAt": "2020-04-10T02:37:49Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -344,10 +253,10 @@ stream in its output:\n             }\n         }\n \n-Multi-event client behavior\n-===========================\n+Client Behavior", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NjAzOA==", "bodyText": "\"Event streams\"", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406576038", "createdAt": "2020-04-10T02:37:57Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.\n+Trait selector::\n+    ``:each(blob, union)``\n+Value type\n+    ``structure``\n \n-        structure Message {\n-            message: String,\n-        }\n+The value of the ``streaming`` trait is a structure that supports the following\n+optional members:\n \n-    .. code-tab:: json\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    * - Property\n+      - Type\n+      - Description\n+    * - requiresLength\n+      - ``boolean``\n+      - Indicates that the stream must have a known size.\n \n-.. _single-event-output-eventstream:\n+        In an HTTP-based protocol, for instance, this indicates that the\n+        ``content-length`` header must be set.\n \n-The following example defines an operation that uses a single-event event\n-stream in its output:\n+Shapes targeted by this trait MAY NOT be used outside of top level operation\n+inputs and operation outputs. Additionally, the ``streaming`` trait is\n+*structurally exclusive by target*, meaning only a single member of a\n+structure can target a shape marked as ``streaming``.\n \n .. tabs::\n \n     .. code-tab:: smithy\n \n-        namespace smithy.example\n-\n-        operation SubscribeToMovements {\n-            output: SubscribeToMovementsOutput\n+        operation StreamingOperation {\n+            output: StreamingOutputWrapper,\n         }\n \n-        structure SubscribeToMovementsOutput {\n-            @eventStream\n-            movements: Movement,\n+        structure StreamingOutputWrapper {\n+            output: StreamingBlob,\n         }\n \n-        structure Movement {\n-            angle: Float,\n-            velocity: Float,\n-        }\n-\n-    .. code-tab:: json\n+        @streaming\n+        blob StreamingBlob\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#SubscribeToMovements\": {\n-                    \"type\": \"operation\",\n-                    \"output\": {\n-                        \"target\": \"smithy.example#SubscribeToMovementsOutput\"\n-                    }\n-                },\n-                \"smithy.example#SubscribeToMovementsOutput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"movements\": {\n-                            \"target\": \"smithy.example#Movement\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Movement\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"angle\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        },\n-                        \"velocity\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-The name of the event sent over a single-event event stream is the name\n-of the member that is targeted by the ``eventStream`` trait.\n-\n-\n-Single-event client behavior\n-============================\n-\n-Clients that send or receive single-event event streams are expected to\n-provide an abstraction to end-users that allows values to be produced or\n-consumed asynchronously for the targeted event structure. Because a\n-single-event event stream does not utilize named events like a multi-event\n-event stream, functionality used to dispatch based on named events is\n-unnecessary. Clients MUST provide access to the\n-:ref:`initial-message <initial-messages>` of an event stream when necessary.\n+.. _event-streams:\n \n+-------------\n+Event Streams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NjYxNg==", "bodyText": "This can only be set when attached to blobs, right? Should this maybe be a separate trait to make this discrepancy less weird?", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406576616", "createdAt": "2020-04-10T02:40:45Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.\n+Trait selector::\n+    ``:each(blob, union)``\n+Value type\n+    ``structure``\n \n-        structure Message {\n-            message: String,\n-        }\n+The value of the ``streaming`` trait is a structure that supports the following\n+optional members:\n \n-    .. code-tab:: json\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    * - Property\n+      - Type\n+      - Description\n+    * - requiresLength\n+      - ``boolean``\n+      - Indicates that the stream must have a known size.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NzI0Mw==", "bodyText": "It's not really a \"wrapper\", it's the output. Can you name this \"StreamingOperationOutput\" or \"StreamingOperationResponse\"? Any maybe add another top-level member like... \"streamId\" or something contrived to show that other input can coexist?", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406577243", "createdAt": "2020-04-10T02:43:54Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.\n+Trait selector::\n+    ``:each(blob, union)``\n+Value type\n+    ``structure``\n \n-        structure Message {\n-            message: String,\n-        }\n+The value of the ``streaming`` trait is a structure that supports the following\n+optional members:\n \n-    .. code-tab:: json\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    * - Property\n+      - Type\n+      - Description\n+    * - requiresLength\n+      - ``boolean``\n+      - Indicates that the stream must have a known size.\n \n-.. _single-event-output-eventstream:\n+        In an HTTP-based protocol, for instance, this indicates that the\n+        ``content-length`` header must be set.\n \n-The following example defines an operation that uses a single-event event\n-stream in its output:\n+Shapes targeted by this trait MAY NOT be used outside of top level operation\n+inputs and operation outputs. Additionally, the ``streaming`` trait is\n+*structurally exclusive by target*, meaning only a single member of a\n+structure can target a shape marked as ``streaming``.\n \n .. tabs::\n \n     .. code-tab:: smithy\n \n-        namespace smithy.example\n-\n-        operation SubscribeToMovements {\n-            output: SubscribeToMovementsOutput\n+        operation StreamingOperation {\n+            output: StreamingOutputWrapper,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NzQ5MQ==", "bodyText": "\"It is formed when the streaming trait is applied to a union that is targeted by an input or output structure.\"\nThis is repetitive to the previous paragraph", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406577491", "createdAt": "2020-04-10T02:44:59Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.\n+Trait selector::\n+    ``:each(blob, union)``\n+Value type\n+    ``structure``\n \n-        structure Message {\n-            message: String,\n-        }\n+The value of the ``streaming`` trait is a structure that supports the following\n+optional members:\n \n-    .. code-tab:: json\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    * - Property\n+      - Type\n+      - Description\n+    * - requiresLength\n+      - ``boolean``\n+      - Indicates that the stream must have a known size.\n \n-.. _single-event-output-eventstream:\n+        In an HTTP-based protocol, for instance, this indicates that the\n+        ``content-length`` header must be set.\n \n-The following example defines an operation that uses a single-event event\n-stream in its output:\n+Shapes targeted by this trait MAY NOT be used outside of top level operation\n+inputs and operation outputs. Additionally, the ``streaming`` trait is\n+*structurally exclusive by target*, meaning only a single member of a\n+structure can target a shape marked as ``streaming``.\n \n .. tabs::\n \n     .. code-tab:: smithy\n \n-        namespace smithy.example\n-\n-        operation SubscribeToMovements {\n-            output: SubscribeToMovementsOutput\n+        operation StreamingOperation {\n+            output: StreamingOutputWrapper,\n         }\n \n-        structure SubscribeToMovementsOutput {\n-            @eventStream\n-            movements: Movement,\n+        structure StreamingOutputWrapper {\n+            output: StreamingBlob,\n         }\n \n-        structure Movement {\n-            angle: Float,\n-            velocity: Float,\n-        }\n-\n-    .. code-tab:: json\n+        @streaming\n+        blob StreamingBlob\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#SubscribeToMovements\": {\n-                    \"type\": \"operation\",\n-                    \"output\": {\n-                        \"target\": \"smithy.example#SubscribeToMovementsOutput\"\n-                    }\n-                },\n-                \"smithy.example#SubscribeToMovementsOutput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"movements\": {\n-                            \"target\": \"smithy.example#Movement\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Movement\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"angle\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        },\n-                        \"velocity\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-The name of the event sent over a single-event event stream is the name\n-of the member that is targeted by the ``eventStream`` trait.\n-\n-\n-Single-event client behavior\n-============================\n-\n-Clients that send or receive single-event event streams are expected to\n-provide an abstraction to end-users that allows values to be produced or\n-consumed asynchronously for the targeted event structure. Because a\n-single-event event stream does not utilize named events like a multi-event\n-event stream, functionality used to dispatch based on named events is\n-unnecessary. Clients MUST provide access to the\n-:ref:`initial-message <initial-messages>` of an event stream when necessary.\n+.. _event-streams:\n \n+-------------\n+Event Streams\n+-------------\n \n-.. _multi-event-event-stream:\n+An event stream is an abstraction that allows multiple messages to be sent\n+asynchronously between a client and server. Event streams support both duplex\n+and simplex streaming. The serialization format and framing of messages sent\n+over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n+of a service.\n \n--------------------------\n-Multi-event event streams\n--------------------------\n+An operation can send an event stream as part of its input or output. An\n+event stream is formed when an input or output member of an operation targets\n+a union marked with the :ref:`streaming-trait`.\n \n-A *multi-event event stream* is an event stream that streams any number of\n-named event structure shapes defined by a union. It is formed when the\n-``eventStream`` trait is applied to a member that targets a union. Each\n+An event stream is capable of streaming any number of named event structure\n+shapes defined by a union. It is formed when the ``streaming`` trait is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NzY2NQ==", "bodyText": "Seems like the first sentence can be removed, this paragraph can be combined with the next one.", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406577665", "createdAt": "2020-04-10T02:45:42Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -1,191 +1,100 @@\n-.. _event-streams:\n-\n-===================\n-Event stream traits\n-===================\n+.. _stream-traits:\n \n-An event stream is an abstraction that allows multiple messages to be sent\n-asynchronously between a client and server. Event streams support both duplex\n-and simplex streaming. The serialization format and framing of messages sent\n-over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n-of a service.\n+=================\n+Streaming Traits\n+=================\n \n-An operation can send an event stream as part of its input or output. An\n-event stream is formed when an input or output member of an operation is\n-marked with the :ref:`eventStream-trait`. A member that targets a structure\n-is a *single-event event stream*, and a member that targets a union is a\n-*multi-event event stream*.\n+A streaming shape is a shape which represents data that is not returned all at\n+once. This includes both streaming binary data and event streams.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n+.. _streaming-trait:\n \n-.. _single-event-event-stream:\n-\n---------------------------\n-Single-event event streams\n---------------------------\n-\n-A *single-event event stream* is an event stream that streams zero or more\n-instances of a specific structure shape.\n-\n-.. _single-event-input-eventstream:\n-\n-The following example defines an operation that uses a single-event event\n-stream in its input:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        namespace smithy.example\n+-------------------\n+``streaming`` trait\n+-------------------\n \n-        operation PublishMessages {\n-            input: PublishMessagesInput\n-        }\n+Summary\n+    Indicates that the data represented by the shape needs to be streamed.\n \n-        structure PublishMessagesInput {\n-            room: String,\n+    When applied to a blob, this simply means that the data could be very\n+    large and thus should not be stored in memory or that the size is unknown\n+    at the start of the request.\n \n-            @eventStream\n-            messages: Message,\n-        }\n+    When applied to a union, it indicates that shape represents an\n+    `event stream <event-streams>`.\n+Trait selector::\n+    ``:each(blob, union)``\n+Value type\n+    ``structure``\n \n-        structure Message {\n-            message: String,\n-        }\n+The value of the ``streaming`` trait is a structure that supports the following\n+optional members:\n \n-    .. code-tab:: json\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 10 80\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#PublishMessages\": {\n-                    \"type\": \"operation\",\n-                    \"input\": {\n-                        \"target\": \"smithy.example#PublishMessagesInput\"\n-                    }\n-                },\n-                \"smithy.example#PublishMessagesInput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"room\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"messages\": {\n-                            \"target\": \"smithy.example#Message\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Message\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"message\": {\n-                            \"target\": \"smithy.api#String\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    * - Property\n+      - Type\n+      - Description\n+    * - requiresLength\n+      - ``boolean``\n+      - Indicates that the stream must have a known size.\n \n-.. _single-event-output-eventstream:\n+        In an HTTP-based protocol, for instance, this indicates that the\n+        ``content-length`` header must be set.\n \n-The following example defines an operation that uses a single-event event\n-stream in its output:\n+Shapes targeted by this trait MAY NOT be used outside of top level operation\n+inputs and operation outputs. Additionally, the ``streaming`` trait is\n+*structurally exclusive by target*, meaning only a single member of a\n+structure can target a shape marked as ``streaming``.\n \n .. tabs::\n \n     .. code-tab:: smithy\n \n-        namespace smithy.example\n-\n-        operation SubscribeToMovements {\n-            output: SubscribeToMovementsOutput\n+        operation StreamingOperation {\n+            output: StreamingOutputWrapper,\n         }\n \n-        structure SubscribeToMovementsOutput {\n-            @eventStream\n-            movements: Movement,\n+        structure StreamingOutputWrapper {\n+            output: StreamingBlob,\n         }\n \n-        structure Movement {\n-            angle: Float,\n-            velocity: Float,\n-        }\n-\n-    .. code-tab:: json\n+        @streaming\n+        blob StreamingBlob\n \n-        {\n-            \"smithy\": \"1.0.0\",\n-            \"shapes\": {\n-                \"smithy.example#SubscribeToMovements\": {\n-                    \"type\": \"operation\",\n-                    \"output\": {\n-                        \"target\": \"smithy.example#SubscribeToMovementsOutput\"\n-                    }\n-                },\n-                \"smithy.example#SubscribeToMovementsOutput\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"movements\": {\n-                            \"target\": \"smithy.example#Movement\",\n-                            \"traits\": {\n-                                \"smithy.api#eventStream\": true\n-                            }\n-                        }\n-                    }\n-                },\n-                \"smithy.example#Movement\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"angle\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        },\n-                        \"velocity\": {\n-                            \"target\": \"smithy.api#Float\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n-The name of the event sent over a single-event event stream is the name\n-of the member that is targeted by the ``eventStream`` trait.\n-\n-\n-Single-event client behavior\n-============================\n-\n-Clients that send or receive single-event event streams are expected to\n-provide an abstraction to end-users that allows values to be produced or\n-consumed asynchronously for the targeted event structure. Because a\n-single-event event stream does not utilize named events like a multi-event\n-event stream, functionality used to dispatch based on named events is\n-unnecessary. Clients MUST provide access to the\n-:ref:`initial-message <initial-messages>` of an event stream when necessary.\n+.. _event-streams:\n \n+-------------\n+Event Streams\n+-------------\n \n-.. _multi-event-event-stream:\n+An event stream is an abstraction that allows multiple messages to be sent\n+asynchronously between a client and server. Event streams support both duplex\n+and simplex streaming. The serialization format and framing of messages sent\n+over event streams is defined by the :ref:`protocol <protocolDefinition-trait>`\n+of a service.\n \n--------------------------\n-Multi-event event streams\n--------------------------\n+An operation can send an event stream as part of its input or output. An", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3NzgzMw==", "bodyText": "Extra newline", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406577833", "createdAt": "2020-04-10T02:46:31Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -201,10 +110,10 @@ stream in its input by referencing a member that targets a union:\n         structure PublishMessagesInput {\n             room: String,\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3ODczNA==", "bodyText": "Let's just remove the \"important\" note below. All protocols should support initial messages, so it's strange to call it out here instead of just in the protocol documentation itself.", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406578734", "createdAt": "2020-04-10T02:50:35Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -394,7 +303,7 @@ Initial messages\n ----------------\n \n An *initial message* is comprised of the top-level input or output members\n-of an operation that are not targeted by the ``eventStream`` trait. Initial\n+of an operation that do not target the event stream union. Initial\n messages provide an opportunity for a client or server to provide metadata\n about an event stream before transmitting events.\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU3ODk4NA==", "bodyText": "This is my bad, but this needs to be marked as @required too :)\nThis also needs to change in the initial response example", "url": "https://github.com/awslabs/smithy/pull/365#discussion_r406578984", "createdAt": "2020-04-10T02:51:49Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core/stream-traits.rst", "diffHunk": "@@ -440,8 +349,12 @@ service, followed by the events sent in the payload of the HTTP message.\n             room: String,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e380cde4b13ef7f719693abfe55355faefde409"}, "originalPosition": 378}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2605ffce57ddd93cba70e5c41e765f9b4ad26a0e", "author": {"user": {"login": "JordonPhillips", "name": "Jordon Phillips"}}, "url": "https://github.com/awslabs/smithy/commit/2605ffce57ddd93cba70e5c41e765f9b4ad26a0e", "committedDate": "2020-04-10T19:05:54Z", "message": "Touch up streaming documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjEzNTAz", "url": "https://github.com/awslabs/smithy/pull/365#pullrequestreview-391613503", "createdAt": "2020-04-10T19:13:43Z", "commit": {"oid": "2605ffce57ddd93cba70e5c41e765f9b4ad26a0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2254, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}