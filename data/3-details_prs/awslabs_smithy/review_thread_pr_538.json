{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTQ4MTU1", "number": 538, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0MDo0OFrOEd1dSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0MDo0OFrOEd1dSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzIwMDExOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo0MDo0OFrOHJPJLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDoxMDoxOVrOHJTJPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NzM0Mw==", "bodyText": "Should be project.hasProperty(\"sonatypePassword\")", "url": "https://github.com/awslabs/smithy/pull/538#discussion_r479447343", "createdAt": "2020-08-28T17:40:48Z", "author": {"login": "kstich"}, "path": "build.gradle", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+import java.util.stream.Collectors\n+\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+    id \"signing\"\n+    id \"checkstyle\"\n+    id \"jacoco\"\n+    id \"com.github.spotbugs\" version \"1.6.10\"\n+    id \"io.codearte.nexus-staging\" version \"0.21.0\"\n+    id \"me.champeau.gradle.jmh\" version \"0.4.6\"\n+}\n+\n+ext {\n+    // Load the Smithy version from VERSION.\n+    libraryVersion = project.file(\"VERSION\").getText('UTF-8').replace(\"\\n\", \"\")\n+}\n+\n+println \"Smithy version: '${libraryVersion}'\"\n+\n+allprojects {\n+    group = \"software.amazon.smithy\"\n+    version = libraryVersion\n+}\n+\n+subprojects {\n+    apply plugin: \"java-library\"\n+\n+    java {\n+        sourceCompatibility = JavaVersion.VERSION_1_8\n+        targetCompatibility = JavaVersion.VERSION_1_8\n+    }\n+\n+    repositories {\n+        mavenLocal()\n+        mavenCentral()\n+    }\n+\n+    dependencies {\n+        testCompile \"org.junit.jupiter:junit-jupiter-api:5.4.0\"\n+        testRuntime \"org.junit.jupiter:junit-jupiter-engine:5.4.0\"\n+        testCompile \"org.junit.jupiter:junit-jupiter-params:5.4.0\"\n+        testCompile \"org.hamcrest:hamcrest:2.1\"\n+    }\n+\n+    // Reusable license copySpec for building JARs\n+    def licenseSpec = copySpec {\n+        from \"${project.rootDir}/LICENSE\"\n+        from \"${project.rootDir}/NOTICE\"\n+    }\n+\n+    // Set up tasks that build source and javadoc jars.\n+    task sourcesJar(type: Jar) {\n+        metaInf.with(licenseSpec)\n+        from {\n+            sourceSets.main.get().allJava\n+        }\n+        archiveClassifier = \"sources\"\n+    }\n+\n+    // Build a javadoc JAR too.\n+    task javadocJar(type: Jar) {\n+        metaInf.with(licenseSpec)\n+        from {\n+            tasks.javadoc\n+        }\n+        archiveClassifier = \"javadoc\"\n+    }\n+\n+    // Include an Automatic-Module-Name in all JARs.\n+    afterEvaluate { Project project ->\n+        tasks.jar {\n+            metaInf.with(licenseSpec)\n+            inputs.property(\"moduleName\", project.ext[\"moduleName\"])\n+            manifest {\n+                attributes \"Automatic-Module-Name\": project.ext[\"moduleName\"]\n+            }\n+        }\n+    }\n+\n+    // Always run javadoc after build.\n+    tasks[\"build\"].dependsOn(tasks[\"javadoc\"])\n+\n+    // ==== Tests ====\n+    // https://docs.gradle.org/current/samples/sample_java_multi_project_with_junit5_tests.html\n+    test {\n+        useJUnitPlatform()\n+    }\n+    // Log on passed, skipped, and failed test events if the `-Plog-tests` property is set.\n+    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/logging/TestLoggingContainer.html\n+    if (project.hasProperty(\"log-tests\")) {\n+        test {\n+            testLogging {\n+                events = [\"passed\", \"skipped\", \"failed\"]\n+            }\n+        }\n+    }\n+\n+    // ==== Maven ====\n+    apply plugin: \"maven-publish\"\n+    apply plugin: \"signing\"\n+\n+    publishing {\n+        repositories {\n+            mavenCentral {\n+                url = uri(\"https://aws.oss.sonatype.org/service/local/staging/deploy/maven2/\")\n+                if (project.hasProperty(\"sonatypeUser\")) {\n+                    credentials {\n+                        username = project.property(\"sonatypeUser\")\n+                        password = project.property(\"sonatypePassword\")\n+                    }\n+                }\n+            }\n+        }\n+\n+        publications {\n+            mavenJava(MavenPublication) {\n+                from(components[\"java\"])\n+\n+                // Ship the source and javadoc jars.\n+                artifact(tasks[\"sourcesJar\"])\n+                artifact(tasks[\"javadocJar\"])\n+\n+                // Include extra information in the POMs.\n+                project.afterEvaluate {\n+                    pom {\n+                        name.set(project.ext[\"displayName\"].toString())\n+                        description.set(project.description)\n+                        url.set(\"https://github.com/awslabs/smithy\")\n+                        licenses {\n+                            license {\n+                                name.set(\"Apache License 2.0\")\n+                                url.set(\"http://www.apache.org/licenses/LICENSE-2.0.txt\")\n+                                distribution.set(\"repo\")\n+                            }\n+                        }\n+                        developers {\n+                            developer {\n+                                id.set(\"smithy\")\n+                                name.set(\"Smithy\")\n+                                organization.set(\"Amazon Web Services\")\n+                                organizationUrl.set(\"https://aws.amazon.com\")\n+                                roles.add(\"developer\")\n+                            }\n+                        }\n+                        scm {\n+                            url.set(\"https://github.com/awslabs/smithy.git\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Don't sign the artifacts if we didn't get a key and password to use.\n+        if (project.hasProperty(\"signingKey\") && project.hasProperty(\"signingPassword\")) {\n+            signing {\n+                useInMemoryPgpKeys(\n+                        (String) project.property(\"signingKey\"),\n+                        (String) project.property(\"signingPassword\"))\n+                sign(publishing.publications[\"mavenJava\"])\n+            }\n+        }\n+    }\n+\n+    // ==== CheckStyle ====\n+    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html\n+    apply plugin: \"checkstyle\"\n+    tasks[\"checkstyleTest\"].enabled = false\n+\n+    // ==== Code coverage ====\n+    // https://docs.gradle.org/current/userguide/jacoco_plugin.html\n+    apply plugin: \"jacoco\"\n+    // report is always generated after tests run\n+    test {\n+        finalizedBy jacocoTestReport\n+    }\n+    // tests are required to run before generating the report\n+    jacocoTestReport {\n+        dependsOn test\n+    }\n+    jacocoTestReport {\n+        reports {\n+            xml.enabled false\n+            csv.enabled false\n+            html.destination file(\"$buildDir/reports/jacoco\")\n+        }\n+    }\n+\n+    // ==== Spotbugs ====\n+    // https://plugins.gradle.org/plugin/com.github.spotbugs\n+    apply plugin: \"com.github.spotbugs\"\n+    // We don't need to lint tests.\n+    tasks[\"spotbugsTest\"].enabled = false\n+    // Configure the bug filter for spotbugs.\n+    spotbugs {\n+        effort = \"max\"\n+        excludeFilterConfig = project.resources.text.fromFile(\"${project.rootDir}/config/spotbugs/filter.xml\")\n+    }\n+}\n+\n+// The root project doesn't produce a JAR.\n+tasks[\"jar\"].enabled = false\n+\n+// ==== Javadoc ====\n+project.afterEvaluate {\n+    tasks.javadoc {\n+        title = \"Smithy API ${version}\"\n+        setDestinationDir(file(\"${project.buildDir}/docs/javadoc/latest\"))\n+        // Build a consolidated javadoc of all subprojects.\n+        source(project.subprojects.stream().map({\n+            project(it.path).sourceSets.main.allJava\n+        }).collect(Collectors.toList()))\n+    }\n+}\n+\n+/*\n+ * Sonatype Staging Finalization\n+ * ====================================================\n+ *\n+ * When publishing to Maven Central, we need to close the staging\n+ * repository and release the artifacts after they have been\n+ * validated. This configuration is for the root project because\n+ * it operates at the \"group\" level.\n+ */\n+if (project.hasProperty(\"sonatypeUser\") && hasProperty(\"sonatypePassword\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8dfff9b83c28d2141bb4cbd0bddf2c44b658eb"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMjg5NQ==", "bodyText": "Fixed", "url": "https://github.com/awslabs/smithy/pull/538#discussion_r479512895", "createdAt": "2020-08-28T20:10:19Z", "author": {"login": "mtdowling"}, "path": "build.gradle", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+import java.util.stream.Collectors\n+\n+plugins {\n+    id \"java-library\"\n+    id \"maven-publish\"\n+    id \"signing\"\n+    id \"checkstyle\"\n+    id \"jacoco\"\n+    id \"com.github.spotbugs\" version \"1.6.10\"\n+    id \"io.codearte.nexus-staging\" version \"0.21.0\"\n+    id \"me.champeau.gradle.jmh\" version \"0.4.6\"\n+}\n+\n+ext {\n+    // Load the Smithy version from VERSION.\n+    libraryVersion = project.file(\"VERSION\").getText('UTF-8').replace(\"\\n\", \"\")\n+}\n+\n+println \"Smithy version: '${libraryVersion}'\"\n+\n+allprojects {\n+    group = \"software.amazon.smithy\"\n+    version = libraryVersion\n+}\n+\n+subprojects {\n+    apply plugin: \"java-library\"\n+\n+    java {\n+        sourceCompatibility = JavaVersion.VERSION_1_8\n+        targetCompatibility = JavaVersion.VERSION_1_8\n+    }\n+\n+    repositories {\n+        mavenLocal()\n+        mavenCentral()\n+    }\n+\n+    dependencies {\n+        testCompile \"org.junit.jupiter:junit-jupiter-api:5.4.0\"\n+        testRuntime \"org.junit.jupiter:junit-jupiter-engine:5.4.0\"\n+        testCompile \"org.junit.jupiter:junit-jupiter-params:5.4.0\"\n+        testCompile \"org.hamcrest:hamcrest:2.1\"\n+    }\n+\n+    // Reusable license copySpec for building JARs\n+    def licenseSpec = copySpec {\n+        from \"${project.rootDir}/LICENSE\"\n+        from \"${project.rootDir}/NOTICE\"\n+    }\n+\n+    // Set up tasks that build source and javadoc jars.\n+    task sourcesJar(type: Jar) {\n+        metaInf.with(licenseSpec)\n+        from {\n+            sourceSets.main.get().allJava\n+        }\n+        archiveClassifier = \"sources\"\n+    }\n+\n+    // Build a javadoc JAR too.\n+    task javadocJar(type: Jar) {\n+        metaInf.with(licenseSpec)\n+        from {\n+            tasks.javadoc\n+        }\n+        archiveClassifier = \"javadoc\"\n+    }\n+\n+    // Include an Automatic-Module-Name in all JARs.\n+    afterEvaluate { Project project ->\n+        tasks.jar {\n+            metaInf.with(licenseSpec)\n+            inputs.property(\"moduleName\", project.ext[\"moduleName\"])\n+            manifest {\n+                attributes \"Automatic-Module-Name\": project.ext[\"moduleName\"]\n+            }\n+        }\n+    }\n+\n+    // Always run javadoc after build.\n+    tasks[\"build\"].dependsOn(tasks[\"javadoc\"])\n+\n+    // ==== Tests ====\n+    // https://docs.gradle.org/current/samples/sample_java_multi_project_with_junit5_tests.html\n+    test {\n+        useJUnitPlatform()\n+    }\n+    // Log on passed, skipped, and failed test events if the `-Plog-tests` property is set.\n+    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/logging/TestLoggingContainer.html\n+    if (project.hasProperty(\"log-tests\")) {\n+        test {\n+            testLogging {\n+                events = [\"passed\", \"skipped\", \"failed\"]\n+            }\n+        }\n+    }\n+\n+    // ==== Maven ====\n+    apply plugin: \"maven-publish\"\n+    apply plugin: \"signing\"\n+\n+    publishing {\n+        repositories {\n+            mavenCentral {\n+                url = uri(\"https://aws.oss.sonatype.org/service/local/staging/deploy/maven2/\")\n+                if (project.hasProperty(\"sonatypeUser\")) {\n+                    credentials {\n+                        username = project.property(\"sonatypeUser\")\n+                        password = project.property(\"sonatypePassword\")\n+                    }\n+                }\n+            }\n+        }\n+\n+        publications {\n+            mavenJava(MavenPublication) {\n+                from(components[\"java\"])\n+\n+                // Ship the source and javadoc jars.\n+                artifact(tasks[\"sourcesJar\"])\n+                artifact(tasks[\"javadocJar\"])\n+\n+                // Include extra information in the POMs.\n+                project.afterEvaluate {\n+                    pom {\n+                        name.set(project.ext[\"displayName\"].toString())\n+                        description.set(project.description)\n+                        url.set(\"https://github.com/awslabs/smithy\")\n+                        licenses {\n+                            license {\n+                                name.set(\"Apache License 2.0\")\n+                                url.set(\"http://www.apache.org/licenses/LICENSE-2.0.txt\")\n+                                distribution.set(\"repo\")\n+                            }\n+                        }\n+                        developers {\n+                            developer {\n+                                id.set(\"smithy\")\n+                                name.set(\"Smithy\")\n+                                organization.set(\"Amazon Web Services\")\n+                                organizationUrl.set(\"https://aws.amazon.com\")\n+                                roles.add(\"developer\")\n+                            }\n+                        }\n+                        scm {\n+                            url.set(\"https://github.com/awslabs/smithy.git\")\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Don't sign the artifacts if we didn't get a key and password to use.\n+        if (project.hasProperty(\"signingKey\") && project.hasProperty(\"signingPassword\")) {\n+            signing {\n+                useInMemoryPgpKeys(\n+                        (String) project.property(\"signingKey\"),\n+                        (String) project.property(\"signingPassword\"))\n+                sign(publishing.publications[\"mavenJava\"])\n+            }\n+        }\n+    }\n+\n+    // ==== CheckStyle ====\n+    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html\n+    apply plugin: \"checkstyle\"\n+    tasks[\"checkstyleTest\"].enabled = false\n+\n+    // ==== Code coverage ====\n+    // https://docs.gradle.org/current/userguide/jacoco_plugin.html\n+    apply plugin: \"jacoco\"\n+    // report is always generated after tests run\n+    test {\n+        finalizedBy jacocoTestReport\n+    }\n+    // tests are required to run before generating the report\n+    jacocoTestReport {\n+        dependsOn test\n+    }\n+    jacocoTestReport {\n+        reports {\n+            xml.enabled false\n+            csv.enabled false\n+            html.destination file(\"$buildDir/reports/jacoco\")\n+        }\n+    }\n+\n+    // ==== Spotbugs ====\n+    // https://plugins.gradle.org/plugin/com.github.spotbugs\n+    apply plugin: \"com.github.spotbugs\"\n+    // We don't need to lint tests.\n+    tasks[\"spotbugsTest\"].enabled = false\n+    // Configure the bug filter for spotbugs.\n+    spotbugs {\n+        effort = \"max\"\n+        excludeFilterConfig = project.resources.text.fromFile(\"${project.rootDir}/config/spotbugs/filter.xml\")\n+    }\n+}\n+\n+// The root project doesn't produce a JAR.\n+tasks[\"jar\"].enabled = false\n+\n+// ==== Javadoc ====\n+project.afterEvaluate {\n+    tasks.javadoc {\n+        title = \"Smithy API ${version}\"\n+        setDestinationDir(file(\"${project.buildDir}/docs/javadoc/latest\"))\n+        // Build a consolidated javadoc of all subprojects.\n+        source(project.subprojects.stream().map({\n+            project(it.path).sourceSets.main.allJava\n+        }).collect(Collectors.toList()))\n+    }\n+}\n+\n+/*\n+ * Sonatype Staging Finalization\n+ * ====================================================\n+ *\n+ * When publishing to Maven Central, we need to close the staging\n+ * repository and release the artifacts after they have been\n+ * validated. This configuration is for the root project because\n+ * it operates at the \"group\" level.\n+ */\n+if (project.hasProperty(\"sonatypeUser\") && hasProperty(\"sonatypePassword\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NzM0Mw=="}, "originalCommit": {"oid": "5f8dfff9b83c28d2141bb4cbd0bddf2c44b658eb"}, "originalPosition": 240}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}