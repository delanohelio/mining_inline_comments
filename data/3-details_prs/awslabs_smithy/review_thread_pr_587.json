{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTIxMTg3", "number": 587, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozNjozNVrOEsNDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1MToxM1rOEssAUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg2NjcwOnYy", "diffSide": "RIGHT", "path": "smithy-utils/src/main/java/software/amazon/smithy/utils/CodeWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozNjozNVrOHfZRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozNjozNVrOHfZRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MTkwOQ==", "bodyText": "Needs a space after \"states.\"", "url": "https://github.com/awslabs/smithy/pull/587#discussion_r502681909", "createdAt": "2020-10-09T21:36:35Z", "author": {"login": "kstich"}, "path": "smithy-utils/src/main/java/software/amazon/smithy/utils/CodeWriter.java", "diffHunk": "@@ -472,6 +473,19 @@ public CodeWriter setExpressionStart(char expressionStart) {\n         return this;\n     }\n \n+    /**\n+     * Get the expression start character of the <em>current</em> state.\n+     *\n+     * <p>This value should not be cached and reused across pushed and popped\n+     * states.This value is \"$\" by default, but it can be changed using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3434273c2eeb39aa547c746c904481d38937a473"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjkzNzc5OnYy", "diffSide": "RIGHT", "path": "smithy-codegen-core/src/main/java/software/amazon/smithy/codegen/core/writer/UseShapeWriterObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo1MToxM1rOHgEOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOToyMTo0NFrOHgKddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NTc4Ng==", "bodyText": "fwiw, I don't understand this comment.", "url": "https://github.com/awslabs/smithy/pull/587#discussion_r503385786", "createdAt": "2020-10-12T15:51:13Z", "author": {"login": "rcoh"}, "path": "smithy-codegen-core/src/main/java/software/amazon/smithy/codegen/core/writer/UseShapeWriterObserver.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.codegen.core.writer;\n+\n+import software.amazon.smithy.codegen.core.Symbol;\n+import software.amazon.smithy.codegen.core.SymbolProvider;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.utils.CodeWriter;\n+import software.amazon.smithy.utils.SmithyUnstableApi;\n+\n+/**\n+ * An observer invoked when a shape CodegenWriter is used.\n+ *\n+ * <p>The following example defines a {@code UseShapeWriterObserver} that\n+ * writes a comment before a shape is written:\n+ *\n+ * <pre>{@code\n+ * public final class MyObserver implements UseShapeWriterObserver<MyWriter> {\n+ *     \\@Override\n+ *     public void observe(Shape shape, Symbol symbol, SymbolProvider symbolProvider, T writer) {\n+ *         writer.write(\"/// Writing $L\", shape.getId());\n+ *     }\n+ * }\n+ * }</pre>\n+ *\n+ * @param <T> Type of CodegenWriter being used.\n+ */\n+@FunctionalInterface\n+@SmithyUnstableApi\n+public interface UseShapeWriterObserver<T extends CodegenWriter<T, ?>> {\n+    /**\n+     * Invoked when a shape writer is used, allowing for customizations to be\n+     * applied to the shape writer like invoking service providers to write\n+     * default contents to generated code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3434273c2eeb39aa547c746c904481d38937a473"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4Nzg2MQ==", "bodyText": "Thanks, I simplified the comment.", "url": "https://github.com/awslabs/smithy/pull/587#discussion_r503487861", "createdAt": "2020-10-12T19:21:44Z", "author": {"login": "mtdowling"}, "path": "smithy-codegen-core/src/main/java/software/amazon/smithy/codegen/core/writer/UseShapeWriterObserver.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.codegen.core.writer;\n+\n+import software.amazon.smithy.codegen.core.Symbol;\n+import software.amazon.smithy.codegen.core.SymbolProvider;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.utils.CodeWriter;\n+import software.amazon.smithy.utils.SmithyUnstableApi;\n+\n+/**\n+ * An observer invoked when a shape CodegenWriter is used.\n+ *\n+ * <p>The following example defines a {@code UseShapeWriterObserver} that\n+ * writes a comment before a shape is written:\n+ *\n+ * <pre>{@code\n+ * public final class MyObserver implements UseShapeWriterObserver<MyWriter> {\n+ *     \\@Override\n+ *     public void observe(Shape shape, Symbol symbol, SymbolProvider symbolProvider, T writer) {\n+ *         writer.write(\"/// Writing $L\", shape.getId());\n+ *     }\n+ * }\n+ * }</pre>\n+ *\n+ * @param <T> Type of CodegenWriter being used.\n+ */\n+@FunctionalInterface\n+@SmithyUnstableApi\n+public interface UseShapeWriterObserver<T extends CodegenWriter<T, ?>> {\n+    /**\n+     * Invoked when a shape writer is used, allowing for customizations to be\n+     * applied to the shape writer like invoking service providers to write\n+     * default contents to generated code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NTc4Ng=="}, "originalCommit": {"oid": "3434273c2eeb39aa547c746c904481d38937a473"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3622, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}