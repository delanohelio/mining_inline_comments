{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDM5MDU3", "number": 490, "title": "Add streaming protocol test for REST-JSON", "bodyText": "Updates the AWS REST-JSON protocol tests adding request/response serialization for streaming blobs, and blob media types.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-08T19:26:16Z", "url": "https://github.com/awslabs/smithy/pull/490", "merged": true, "mergeCommit": {"oid": "eff7f18f76132366c32c1d29d9a5ddf40b99a56e"}, "closed": true, "closedAt": "2020-07-15T16:37:51Z", "author": {"login": "jasdel"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczsNJQAFqTQ0NjczOTM5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc05YSuAFqTQ0ODMxMDMyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzM5Mzkw", "url": "https://github.com/awslabs/smithy/pull/490#pullrequestreview-446739390", "createdAt": "2020-07-10T22:51:48Z", "commit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1MTo0OFrOGwHsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNjoyMlrOGwIOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3NQ==", "bodyText": "This seems wrong because the blob input member is not marked with the httpPayload trait.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453110875", "createdAt": "2020-07-10T22:51:48Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMTEyMA==", "bodyText": "This needs the @httpPayload trait", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453111120", "createdAt": "2020-07-10T22:52:49Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExOTQ4Nw==", "bodyText": "Requires httpPayload trait", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453119487", "createdAt": "2020-07-10T23:25:56Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,\n+}\n+\n+@streaming\n+blob StreamingBlob\n+\n+/// This examples serializes a streaming blob shape with a required content\n+/// length in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraitsRequireLength\", method: \"POST\")\n+operation StreamingTraitsRequireLength {\n+    input: StreamingTraitsRequireLengthInputOutput,\n+    output: StreamingTraitsRequireLengthInputOutput\n+}\n+\n+apply StreamingTraitsRequireLength @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraitsRequireLength @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsRequireLengthInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: FiniteStreamingBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExOTU3Mw==", "bodyText": "Missing httpPayload trait. I'm surprised this built.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453119573", "createdAt": "2020-07-10T23:26:22Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,\n+}\n+\n+@streaming\n+blob StreamingBlob\n+\n+/// This examples serializes a streaming blob shape with a required content\n+/// length in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraitsRequireLength\", method: \"POST\")\n+operation StreamingTraitsRequireLength {\n+    input: StreamingTraitsRequireLengthInputOutput,\n+    output: StreamingTraitsRequireLengthInputOutput\n+}\n+\n+apply StreamingTraitsRequireLength @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraitsRequireLength @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsRequireLengthInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: FiniteStreamingBlob,\n+}\n+\n+@streaming\n+@requiresLength\n+blob FiniteStreamingBlob\n+\n+/// This examples serializes a streaming media-typed blob shape in the request body.\n+///\n+/// This examples uses a `@mediaType` trait on the payload to force a custom\n+/// content-type to be serialized.\n+@http(uri: \"/StreamingTraitsWithMediaType\", method: \"POST\")\n+operation StreamingTraitsWithMediaType {\n+    input: StreamingTraitsWithMediaTypeInputOutput,\n+    output: StreamingTraitsWithMediaTypeInputOutput\n+}\n+\n+apply StreamingTraitsWithMediaType @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithMediaTypeWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a content-type\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraitsWithMediaType\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"text/plain\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    }\n+])\n+\n+apply StreamingTraitsWithMediaType @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithMediaTypeWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a content-type\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"text/plain\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsWithMediaTypeInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingTextPlainBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 239}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e612c6c084d8b4ad703736754c77f5fc4e8e5c85", "author": {"user": {"login": "jasdel", "name": "Jason Del Ponte"}}, "url": "https://github.com/awslabs/smithy/commit/e612c6c084d8b4ad703736754c77f5fc4e8e5c85", "committedDate": "2020-07-13T17:10:43Z", "message": "Add Streaming protocol test for REST-JSON\n\nUpdates the AWS REST-JSON protocol tests adding request/response\nserialization for streaming blobs, and blob media types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2cc6cce563b7dfb00b1d73bcef24e48da4e0d40", "author": {"user": {"login": "jasdel", "name": "Jason Del Ponte"}}, "url": "https://github.com/awslabs/smithy/commit/a2cc6cce563b7dfb00b1d73bcef24e48da4e0d40", "committedDate": "2020-07-13T17:31:08Z", "message": "add httpPayload trait to streaming operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75", "author": {"user": {"login": "jasdel", "name": "Jason Del Ponte"}}, "url": "https://github.com/awslabs/smithy/commit/6b8e6b127e38edc75e76b8151246bbbfc9bb8f75", "committedDate": "2020-07-08T19:25:54Z", "message": "Add Streaming protocol test for REST-JSON\n\nUpdates the AWS REST-JSON protocol tests adding request/response\nserialization for streaming blobs, and blob media types."}, "afterCommit": {"oid": "a2cc6cce563b7dfb00b1d73bcef24e48da4e0d40", "author": {"user": {"login": "jasdel", "name": "Jason Del Ponte"}}, "url": "https://github.com/awslabs/smithy/commit/a2cc6cce563b7dfb00b1d73bcef24e48da4e0d40", "committedDate": "2020-07-13T17:31:08Z", "message": "add httpPayload trait to streaming operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzEwMzI1", "url": "https://github.com/awslabs/smithy/pull/490#pullrequestreview-448310325", "createdAt": "2020-07-14T17:21:16Z", "commit": {"oid": "a2cc6cce563b7dfb00b1d73bcef24e48da4e0d40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2203, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}