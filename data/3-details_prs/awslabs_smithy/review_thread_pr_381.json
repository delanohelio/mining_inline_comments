{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODI0MTg1", "number": 381, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0MzowN1rODy-Keg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0MzowN1rODy-Keg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzczODgyOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/traits/AnnotationTrait.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0MzowN1rOGHVVcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjo0MzowN1rOGHVVcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0Mjc3MQ==", "bodyText": "Looks like there's now dead code in this class's createTrait method that should be cleaned up.", "url": "https://github.com/awslabs/smithy/pull/381#discussion_r410342771", "createdAt": "2020-04-17T16:43:07Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/traits/AnnotationTrait.java", "diffHunk": "@@ -15,31 +15,32 @@\n \n package software.amazon.smithy.model.traits;\n \n+import java.util.Collections;\n import java.util.function.Function;\n import software.amazon.smithy.model.SourceException;\n import software.amazon.smithy.model.SourceLocation;\n import software.amazon.smithy.model.node.BooleanNode;\n import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ObjectNode;\n import software.amazon.smithy.model.shapes.ShapeId;\n \n /**\n- * Trait implementation that expects an empty object or a boolean\n- * value of true.\n+ * Trait implementation for traits that are an empty object.\n  */\n-public abstract class BooleanTrait extends AbstractTrait {\n-    public BooleanTrait(ShapeId id, SourceLocation sourceLocation) {\n+public abstract class AnnotationTrait extends AbstractTrait {\n+    public AnnotationTrait(ShapeId id, SourceLocation sourceLocation) {\n         super(id, sourceLocation);\n     }\n \n     @Override\n     protected final Node createNode() {\n-        return new BooleanNode(true, getSourceLocation());\n+        return new ObjectNode(Collections.emptyMap(), getSourceLocation());\n     }\n \n     /**\n      * Trait provider that expects a boolean value of true.\n      */\n-    public static class Provider<T extends BooleanTrait> extends AbstractTrait.Provider {\n+    public static class Provider<T extends AnnotationTrait> extends AbstractTrait.Provider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "923f1e5648cc7bcea898cac989bfc2f3c67235ed"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3771, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}