{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzYzMzY3", "number": 379, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyNzo0M1rODy_CBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MjowM1rODy_TMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzg4MTAxOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/plugins/CleanTraitDefinitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyNzo0M1rOGHWyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoyNzo0M1rOGHWyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2NjYwMg==", "bodyText": "This could just be traitBuilder.traits(traits);", "url": "https://github.com/awslabs/smithy/pull/379#discussion_r410366602", "createdAt": "2020-04-17T17:27:43Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/plugins/CleanTraitDefinitions.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform.plugins;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.SourceLocation;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.traits.AuthDefinitionTrait;\n+import software.amazon.smithy.model.traits.ProtocolDefinitionTrait;\n+import software.amazon.smithy.model.traits.Trait;\n+import software.amazon.smithy.model.transform.ModelTransformer;\n+import software.amazon.smithy.model.transform.ModelTransformerPlugin;\n+\n+/**\n+ * Removes traits from {@link AuthDefinitionTrait} and\n+ * {@link ProtocolDefinitionTrait} traits that refer to removed shapes.\n+ */\n+public final class CleanTraitDefinitions implements ModelTransformerPlugin {\n+    @Override\n+    public Model onRemove(ModelTransformer transformer, Collection<Shape> removed, Model model) {\n+        Set<ShapeId> removedShapeIds = removed.stream().map(Shape::getId).collect(Collectors.toSet());\n+        model = transformer.replaceShapes(model, getAuthDefShapesToReplace(model, removedShapeIds));\n+\n+        return transformer.replaceShapes(model, getProtocolDefShapesToReplace(model, removedShapeIds));\n+    }\n+\n+    private Set<Shape> getAuthDefShapesToReplace(Model model, Set<ShapeId> removedShapeIds) {\n+        return model.shapes(StructureShape.class)\n+                .flatMap(s -> Trait.flatMapStream(s, AuthDefinitionTrait.class))\n+                .flatMap(pair -> {\n+                    AuthDefinitionTrait authDefTrait = pair.getRight();\n+                    List<ShapeId> traits = authDefTrait.getTraits();\n+                    List<ShapeId> newTraits = excludeTraitsInSet(traits, removedShapeIds);\n+\n+                    // Return early if re-built list of traits is the same as existing list.\n+                    if (traits.equals(newTraits)) {\n+                        return Stream.empty();\n+                    }\n+\n+                    return rebuildShapeWithAuthDef(pair.getLeft(), authDefTrait.getSourceLocation(), newTraits);\n+                })\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private Stream<Shape> rebuildShapeWithAuthDef(\n+            StructureShape shape,\n+            SourceLocation location,\n+            List<ShapeId> traits\n+    ) {\n+        AuthDefinitionTrait.Builder traitBuilder = AuthDefinitionTrait.builder();\n+        traitBuilder.sourceLocation(location);\n+        traits.forEach(traitBuilder::addTrait);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbeee9f10bc28572c609a4bf6fc8228ab41a4ac"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkyNDk4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/plugins/CleanTraitDefinitions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MjowM1rOGHXPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MjowM1rOGHXPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NDAwNA==", "bodyText": "Since the only component of the trait here that needs to change is the traits field, this can be simpler. Instead of constructing a new trait, use the toBuilder and to modify it. Then the private rebuild* methods can be inlined since they would be reduced to only their current return statements.", "url": "https://github.com/awslabs/smithy/pull/379#discussion_r410374004", "createdAt": "2020-04-17T17:42:03Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/plugins/CleanTraitDefinitions.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform.plugins;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.SourceLocation;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.traits.AuthDefinitionTrait;\n+import software.amazon.smithy.model.traits.ProtocolDefinitionTrait;\n+import software.amazon.smithy.model.traits.Trait;\n+import software.amazon.smithy.model.transform.ModelTransformer;\n+import software.amazon.smithy.model.transform.ModelTransformerPlugin;\n+\n+/**\n+ * Removes traits from {@link AuthDefinitionTrait} and\n+ * {@link ProtocolDefinitionTrait} traits that refer to removed shapes.\n+ */\n+public final class CleanTraitDefinitions implements ModelTransformerPlugin {\n+    @Override\n+    public Model onRemove(ModelTransformer transformer, Collection<Shape> removed, Model model) {\n+        Set<ShapeId> removedShapeIds = removed.stream().map(Shape::getId).collect(Collectors.toSet());\n+        model = transformer.replaceShapes(model, getAuthDefShapesToReplace(model, removedShapeIds));\n+\n+        return transformer.replaceShapes(model, getProtocolDefShapesToReplace(model, removedShapeIds));\n+    }\n+\n+    private Set<Shape> getAuthDefShapesToReplace(Model model, Set<ShapeId> removedShapeIds) {\n+        return model.shapes(StructureShape.class)\n+                .flatMap(s -> Trait.flatMapStream(s, AuthDefinitionTrait.class))\n+                .flatMap(pair -> {\n+                    AuthDefinitionTrait authDefTrait = pair.getRight();\n+                    List<ShapeId> traits = authDefTrait.getTraits();\n+                    List<ShapeId> newTraits = excludeTraitsInSet(traits, removedShapeIds);\n+\n+                    // Return early if re-built list of traits is the same as existing list.\n+                    if (traits.equals(newTraits)) {\n+                        return Stream.empty();\n+                    }\n+\n+                    return rebuildShapeWithAuthDef(pair.getLeft(), authDefTrait.getSourceLocation(), newTraits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bbeee9f10bc28572c609a4bf6fc8228ab41a4ac"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3768, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}