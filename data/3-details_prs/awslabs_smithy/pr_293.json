{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTA5MzU1", "number": 293, "title": "[0.10] Add JSON pointer, patch, and OpenAPI mapper", "bodyText": "This commit adds a new mapper to OpenAPI that allows changing specific\nparts of the generated schema using JSON pointers that inject values\nusing semantics similar to JSON Patch. This approach is preferred over\nstring substitutions because it is more explicit and does not encourage\nmodelers to include placeholders in their models.\nThe JSON substitutions mapper now allows for any string to be replaced.\nThis is still basically just as safe since it only replaces exact string\nmatches (it doesn't replace inside of larger strings). Most importantly,\nthe use of placeholder like strings encouraged modelers to include\nplaceholders in their models. By opening up the string to any value, you\ncan now replace whatever was generated from real model values.\nTo achieve this, I implemented a JSON Pointer parser and abstraction\nover Node values that also include methods for getting a value from a\nnode by a pointer, and adding/replacing a value in a node using a\npointer (with immutable return values, of course). I was able to\nintegrate this abstraction into SchemaDocument and Schema too. The JSON\nPatch \"add\" operation has been implemented in two ways: 1) we do it just\nlike JSON patch, where attempting to traverse through missing objects\nand arrays causes the change to be ignored 2) we have a mode that\ncreates intermediate objects when needed, allowing this to be used in\nthe JSON Schema SchemaDocument code for generating JSON from an\nin-memory document.\nImplementing this change revealed an omission in ArrayNode where bounds\nwere not being checked. For example, attempting to access index -1 would\nraise an exception. This is now fixed and covered in a test case.\nIssue #, if available:\nDescription of changes:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-02-26T21:12:53Z", "url": "https://github.com/awslabs/smithy/pull/293", "merged": true, "mergeCommit": {"oid": "aa602dbd61367698c0c91b67d4de931c15b17950"}, "closed": true, "closedAt": "2020-02-28T18:07:53Z", "author": {"login": "mtdowling"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIjZdrAFqTM2NTg1NjY2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIz8dEAH2gAyMzgwNTA5MzU1OjA4YzBjZDlmMzM1NzVmZTQyYjlmNTlmMjYyYzFhMmFlZDg4Nzk1NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODU2NjYz", "url": "https://github.com/awslabs/smithy/pull/293#pullrequestreview-365856663", "createdAt": "2020-02-27T17:29:00Z", "commit": {"oid": "d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyOTowMFrOFvabMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyOTowMFrOFvabMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MDMzNw==", "bodyText": "s/which/with/", "url": "https://github.com/awslabs/smithy/pull/293#discussion_r385260337", "createdAt": "2020-02-27T17:29:00Z", "author": {"login": "JordonPhillips"}, "path": "docs/source/guides/converting-to-openapi.rst", "diffHunk": "@@ -289,6 +292,36 @@ openapi.substitutions (``Map<String, any>``)\n             }\n         }\n \n+openapi.jsonAdd (``Map<String, Node>``)\n+    Adds or replaces the JSON value in the generated OpenAPI document at the\n+    given JSON pointer locations with a different JSON value. The value must\n+    be a map where each key is a valid JSON pointer string as defined in\n+    :rfc:`6901`. Each value in the map is the JSON value to add or replace\n+    at the given target.\n+\n+    Values are added using similar semantics of the \"add\" operation of\n+    JSON Patch, as specified in :rfc:`6902`, which the exception that adding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTY3NzA3", "url": "https://github.com/awslabs/smithy/pull/293#pullrequestreview-366567707", "createdAt": "2020-02-28T17:35:51Z", "commit": {"oid": "d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzozNTo1MVrOFv9JKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzozNTo1MVrOFv9JKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyOTE2MQ==", "bodyText": "s/add/at", "url": "https://github.com/awslabs/smithy/pull/293#discussion_r385829161", "createdAt": "2020-02-28T17:35:51Z", "author": {"login": "kstich"}, "path": "smithy-jsonschema/src/main/java/software/amazon/smithy/jsonschema/SchemaDocument.java", "diffHunk": "@@ -182,46 +146,37 @@ public Schema getRootSchema() {\n      * @return Returns the optionally found schema definition.\n      */\n     public Optional<Schema> getDefinition(String pointer) {\n-        pointer = unescapeJsonSchema(pointer);\n+        String unescaped = NodePointer.unescape(pointer);\n \n-        if (definitions.containsKey(pointer)) {\n-            return Optional.ofNullable(definitions.get(pointer));\n-        } else if (pointer.isEmpty()) {\n-            return Optional.of(getRootSchema());\n+        // Attempt to get the unescaped pointer, as-is.\n+        if (definitions.containsKey(unescaped)) {\n+            return Optional.ofNullable(definitions.get(unescaped));\n         }\n \n-        String prefix = \"\";\n-        String[] refs = pointer.split(\"/\");\n+        List<String> pointerParts = NodePointer.parse(pointer).getParts();\n \n-        for (int position = 0; position < refs.length; position++) {\n-            if (position > 0) {\n-                prefix += \"/\" + refs[position];\n-            } else {\n-                prefix += refs[position];\n-            }\n+        // An empty pointer returns the root schema.\n+        if (pointerParts.isEmpty()) {\n+            return Optional.of(getRootSchema());\n+        }\n+\n+        // Compute the part of the pointer that points add a literal entry in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1"}, "originalPosition": 132}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1", "author": {"user": {"login": "mtdowling", "name": "Michael Dowling"}}, "url": "https://github.com/awslabs/smithy/commit/d3479e074f0e946fb6fbf599a9e8ffa28bdaddc1", "committedDate": "2020-02-26T21:13:22Z", "message": "Add JSON pointer, patch, and OpenAPI mapper\n\nThis commit adds a new mapper to OpenAPI that allows changing specific\nparts of the generated schema using JSON pointers that inject values\nusing semantics similar to JSON Patch. This approach is preferred over\nstring substitutions because it is more explicit and does not encourage\nmodelers to include placeholders in their models.\n\nThe JSON substitutions mapper now allows for any string to be replaced.\nThis is still basically just as safe since it only replaces exact string\nmatches (it doesn't replace inside of larger strings). Most importantly,\nthe use of placeholder like strings encouraged modelers to include\nplaceholders in their models. By opening up the string to any value, you\ncan now replace whatever was generated from real model values.\n\nTo achieve this, I implemented a JSON Pointer parser and abstraction\nover Node values that also include methods for getting a value from a\nnode by a pointer, and adding/replacing a value in a node using a\npointer (with immutable return values, of course). I was able to\nintegrate this abstraction into SchemaDocument and Schema too. The JSON\nPatch \"add\" operation has been implemented in two ways: 1) we do it just\nlike JSON patch, where attempting to traverse through missing objects\nand arrays causes the change to be ignored 2) we have a mode that\ncreates intermediate objects when needed, allowing this to be used in\nthe JSON Schema SchemaDocument code for generating JSON from an\nin-memory document.\n\nImplementing this change revealed an omission in ArrayNode where bounds\nwere not being checked. For example, attempting to access index -1 would\nraise an exception. This is now fixed and covered in a test case."}, "afterCommit": {"oid": "08c0cd9f33575fe42b9f59f262c1a2aed8879547", "author": {"user": {"login": "mtdowling", "name": "Michael Dowling"}}, "url": "https://github.com/awslabs/smithy/commit/08c0cd9f33575fe42b9f59f262c1a2aed8879547", "committedDate": "2020-02-28T18:08:40Z", "message": "Add JSON pointer, patch, and OpenAPI mapper\n\nThis commit adds a new mapper to OpenAPI that allows changing specific\nparts of the generated schema using JSON pointers that inject values\nusing semantics similar to JSON Patch. This approach is preferred over\nstring substitutions because it is more explicit and does not encourage\nmodelers to include placeholders in their models.\n\nThe JSON substitutions mapper now allows for any string to be replaced.\nThis is still basically just as safe since it only replaces exact string\nmatches (it doesn't replace inside of larger strings). Most importantly,\nthe use of placeholder like strings encouraged modelers to include\nplaceholders in their models. By opening up the string to any value, you\ncan now replace whatever was generated from real model values.\n\nTo achieve this, I implemented a JSON Pointer parser and abstraction\nover Node values that also include methods for getting a value from a\nnode by a pointer, and adding/replacing a value in a node using a\npointer (with immutable return values, of course). I was able to\nintegrate this abstraction into SchemaDocument and Schema too. The JSON\nPatch \"add\" operation has been implemented in two ways: 1) we do it just\nlike JSON patch, where attempting to traverse through missing objects\nand arrays causes the change to be ignored 2) we have a mode that\ncreates intermediate objects when needed, allowing this to be used in\nthe JSON Schema SchemaDocument code for generating JSON from an\nin-memory document.\n\nImplementing this change revealed an omission in ArrayNode where bounds\nwere not being checked. For example, attempting to access index -1 would\nraise an exception. This is now fixed and covered in a test case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c0cd9f33575fe42b9f59f262c1a2aed8879547", "author": {"user": {"login": "mtdowling", "name": "Michael Dowling"}}, "url": "https://github.com/awslabs/smithy/commit/08c0cd9f33575fe42b9f59f262c1a2aed8879547", "committedDate": "2020-02-28T18:08:40Z", "message": "Add JSON pointer, patch, and OpenAPI mapper\n\nThis commit adds a new mapper to OpenAPI that allows changing specific\nparts of the generated schema using JSON pointers that inject values\nusing semantics similar to JSON Patch. This approach is preferred over\nstring substitutions because it is more explicit and does not encourage\nmodelers to include placeholders in their models.\n\nThe JSON substitutions mapper now allows for any string to be replaced.\nThis is still basically just as safe since it only replaces exact string\nmatches (it doesn't replace inside of larger strings). Most importantly,\nthe use of placeholder like strings encouraged modelers to include\nplaceholders in their models. By opening up the string to any value, you\ncan now replace whatever was generated from real model values.\n\nTo achieve this, I implemented a JSON Pointer parser and abstraction\nover Node values that also include methods for getting a value from a\nnode by a pointer, and adding/replacing a value in a node using a\npointer (with immutable return values, of course). I was able to\nintegrate this abstraction into SchemaDocument and Schema too. The JSON\nPatch \"add\" operation has been implemented in two ways: 1) we do it just\nlike JSON patch, where attempting to traverse through missing objects\nand arrays causes the change to be ignored 2) we have a mode that\ncreates intermediate objects when needed, allowing this to be used in\nthe JSON Schema SchemaDocument code for generating JSON from an\nin-memory document.\n\nImplementing this change revealed an omission in ArrayNode where bounds\nwere not being checked. For example, attempting to access index -1 would\nraise an exception. This is now fixed and covered in a test case."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2327, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}