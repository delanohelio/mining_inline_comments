{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NjI1ODEw", "number": 599, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzowNzoxMlrOErbe1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowMzoyOFrOEtI6vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc0NDg3OnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/constraint-traits.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzowNzoxMlrOHeMYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToxNTo1N1rOHfY02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyMjA4Ng==", "bodyText": "I wasn't sure if this should be a \"constraint trait\" or a \"type refinement trait\"...", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r501422086", "createdAt": "2020-10-08T03:07:12Z", "author": {"login": "mtdowling"}, "path": "docs/source/1.0/spec/core/constraint-traits.rst", "diffHunk": "@@ -556,6 +556,48 @@ in a response.\n         }\n \n \n+.. _sparse-trait:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc280fa113d67e59ef7e20acddcfa1cb6abd3800"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NDY0OA==", "bodyText": "Feels like this should be a \"type refinement trait\" as it's dealing in the same realm as @box which lives there as well.", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r502674648", "createdAt": "2020-10-09T21:15:57Z", "author": {"login": "kstich"}, "path": "docs/source/1.0/spec/core/constraint-traits.rst", "diffHunk": "@@ -556,6 +556,48 @@ in a response.\n         }\n \n \n+.. _sparse-trait:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyMjA4Ng=="}, "originalCommit": {"oid": "cc280fa113d67e59ef7e20acddcfa1cb6abd3800"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg0NTU2OnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/model.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyNzoxNFrOHfZEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyNzoxNFrOHfZEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3ODcyMQ==", "bodyText": "Needs to close with \"The following example defines a sparse map:\"", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r502678721", "createdAt": "2020-10-09T21:27:14Z", "author": {"login": "kstich"}, "path": "docs/source/1.0/spec/core/model.rst", "diffHunk": "@@ -823,12 +863,55 @@ The following example defines a map of strings to integers:\n             }\n         }\n \n-.. rubric:: Providing keys for a map\n+.. rubric:: Map keys MUST NOT be ``null``\n \n Map keys are not permitted to be ``null``. Not all protocol serialization\n formats have a way to define ``null`` map keys, and map implementations\n across programming languages often do not allow ``null`` keys in maps.\n \n+.. rubric:: Map value member nullability\n+\n+Maps values are considered *dense* by default, meaning they MAY NOT contain\n+``null`` values. A map MAY be made *sparse* by applying the\n+:ref:`sparse-trait`. The :ref:`box-trait` is not used to determine if a map\n+is dense or sparse; a map with no ``@sparse`` trait is always considered\n+dense.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc280fa113d67e59ef7e20acddcfa1cb6abd3800"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzYwNzk1OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0NToyOFrOHgwRZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxMToyOVrOHgxPcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzM2Nw==", "bodyText": "Nit: use shape.isMemberShape() or store the optional.", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504107367", "createdAt": "2020-10-13T16:45:28Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMzI0OQ==", "bodyText": "I did it the way it is now because it doesn't warn in the IDE. Maybe we can add new expect methods going forward?", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504123249", "createdAt": "2020-10-13T17:11:29Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwNzM2Nw=="}, "originalCommit": {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY3NDg1OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowMzoyOFrOHgw8bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxMToxNFrOHgxOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODM4MQ==", "bodyText": "This should state that it's the members of the sparse lists and maps.", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504118381", "createdAt": "2020-10-13T17:03:28Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {\n+                if (isMemberNullable(model, shape.asMemberShape().get())) {\n+                    nullableShapes.add(shape.getId());\n+                }\n+            } else if (isShapeBoxed(shape)) {\n+                nullableShapes.add(shape.getId());\n+            }\n+        }\n+    }\n+\n+    public static NullableIndex of(Model model) {\n+        return model.getKnowledge(NullableIndex.class, NullableIndex::new);\n+    }\n+\n+    private static boolean isMemberNullable(Model model, MemberShape member) {\n+        Shape container = model.getShape(member.getContainer()).orElse(null);\n+\n+        // Ignore broken models in this index. Other validators handle these checks.\n+        if (container == null) {\n+            return false;\n+        }\n+\n+        switch (container.getType()) {\n+            case STRUCTURE:\n+                // Only structure shapes look at the box trait.\n+                return member.hasTrait(BoxTrait.class)\n+                       || model.getShape(member.getTarget()).filter(NullableIndex::isShapeBoxed).isPresent();\n+            case MAP:\n+                // Map keys can never be null.\n+                if (member.getMemberName().equals(\"key\")) {\n+                    return false;\n+                } // fall-through\n+            case LIST:\n+                // Sparse lists and maps are considered nullable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyMzAxOQ==", "bodyText": "It does state both lists and maps are considered nullable in the comment. There's also a comment above stating the switch case falls through. Hope that works.", "url": "https://github.com/awslabs/smithy/pull/599#discussion_r504123019", "createdAt": "2020-10-13T17:11:14Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/knowledge/NullableIndex.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.knowledge;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.ShapeType;\n+import software.amazon.smithy.model.shapes.ToShapeId;\n+import software.amazon.smithy.model.traits.BoxTrait;\n+import software.amazon.smithy.model.traits.SparseTrait;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+/**\n+ * An index that checks if a shape can be set to null.\n+ */\n+public class NullableIndex implements KnowledgeIndex {\n+\n+    private static final Set<ShapeType> INHERENTLY_BOXED = SetUtils.of(\n+            ShapeType.STRING,\n+            ShapeType.BLOB,\n+            ShapeType.TIMESTAMP,\n+            ShapeType.BIG_DECIMAL,\n+            ShapeType.BIG_INTEGER,\n+            ShapeType.LIST,\n+            ShapeType.SET,\n+            ShapeType.MAP,\n+            ShapeType.STRUCTURE,\n+            ShapeType.UNION);\n+\n+    private final Set<ShapeId> nullableShapes = new HashSet<>();\n+\n+    public NullableIndex(Model model) {\n+        for (Shape shape : model.toSet()) {\n+            if (shape.asMemberShape().isPresent()) {\n+                if (isMemberNullable(model, shape.asMemberShape().get())) {\n+                    nullableShapes.add(shape.getId());\n+                }\n+            } else if (isShapeBoxed(shape)) {\n+                nullableShapes.add(shape.getId());\n+            }\n+        }\n+    }\n+\n+    public static NullableIndex of(Model model) {\n+        return model.getKnowledge(NullableIndex.class, NullableIndex::new);\n+    }\n+\n+    private static boolean isMemberNullable(Model model, MemberShape member) {\n+        Shape container = model.getShape(member.getContainer()).orElse(null);\n+\n+        // Ignore broken models in this index. Other validators handle these checks.\n+        if (container == null) {\n+            return false;\n+        }\n+\n+        switch (container.getType()) {\n+            case STRUCTURE:\n+                // Only structure shapes look at the box trait.\n+                return member.hasTrait(BoxTrait.class)\n+                       || model.getShape(member.getTarget()).filter(NullableIndex::isShapeBoxed).isPresent();\n+            case MAP:\n+                // Map keys can never be null.\n+                if (member.getMemberName().equals(\"key\")) {\n+                    return false;\n+                } // fall-through\n+            case LIST:\n+                // Sparse lists and maps are considered nullable.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODM4MQ=="}, "originalCommit": {"oid": "ac17950bbb9d19b8478c163134c2fc6f93c47780"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3630, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}