{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTIzNTg5", "number": 548, "title": "Tracefile creation rebased", "bodyText": "Issue #, if available: Lack of model traceability.\nDescription of changes: Added trace file creation abstractions.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-08-31T20:28:52Z", "url": "https://github.com/awslabs/smithy/pull/548", "merged": true, "mergeCommit": {"oid": "11c1b5ec00326a0cd6970d99fc0564dd3197b0aa"}, "closed": true, "closedAt": "2020-09-02T15:07:19Z", "author": {"login": "et22"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEZqdQABqjM3MTE3NDk4NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEwJzagFqTQ4MDE4NzA4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a6ce9efafa815c2002fcddf5d405c99b43967d7", "author": {"user": null}, "url": "https://github.com/awslabs/smithy/commit/6a6ce9efafa815c2002fcddf5d405c99b43967d7", "committedDate": "2020-08-31T20:21:57Z", "message": "Add TracingSymbolProvider"}, "afterCommit": {"oid": "77c8936ccc61d4cc8b2ec372dbf992b6a8d45421", "author": {"user": null}, "url": "https://github.com/awslabs/smithy/commit/77c8936ccc61d4cc8b2ec372dbf992b6a8d45421", "committedDate": "2020-08-31T21:26:31Z", "message": "Add TracingSymbolProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDQ2NDQ2", "url": "https://github.com/awslabs/smithy/pull/548#pullrequestreview-480046446", "createdAt": "2020-09-01T19:19:53Z", "commit": {"oid": "77c8936ccc61d4cc8b2ec372dbf992b6a8d45421"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxOTo1M1rOHLE43A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyMDowMVrOHLE5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NjQ3Ng==", "bodyText": "nit: add space after //, capitalize first word and end with period.", "url": "https://github.com/awslabs/smithy/pull/548#discussion_r481376476", "createdAt": "2020-09-01T19:19:53Z", "author": {"login": "srchase"}, "path": "smithy-codegen-core/src/test/java/software/amazon/smithy/codegen/core/trace/TracingSymbolProviderTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package software.amazon.smithy.codegen.core.trace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.codegen.core.Symbol;\n+import software.amazon.smithy.codegen.core.SymbolProvider;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+class TracingSymbolProviderTest {\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithAllFields() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .metadata(constructTraceMetadata())\n+                    .artifactDefinitions(constructArtifactDefinitions())\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithRequiredFields() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .metadata(constructTraceMetadata())\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithDefaultTraceMetadata() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .setTraceMetadataAsDefault(\"Java\")\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutSymbolProvider() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .shapeLinkCreator(constructFunction())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutTraceMetadata() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutShapeLinkCreator() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .symbolProvider(new TestSymbolProvider())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertToSymbolShapeLinkCreatorCreatesShapeLink() {\n+        TracingSymbolProvider tracingSymbolProvider = TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .artifactDefinitions(constructArtifactDefinitions())\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build();\n+\n+        Shape shape = StringShape.builder().id(\"namespace.foo#baz\").build();\n+\n+        Symbol symbol = tracingSymbolProvider.toSymbol(shape);\n+\n+        TraceFile traceFile = tracingSymbolProvider.buildTraceFile();\n+\n+        ShapeLink createdShapeLink = traceFile.getShapes().get(ShapeId.from(\"namespace.foo#baz\")).get(0);\n+\n+        assertThat(createdShapeLink.getType(), equalTo(\"TYPE\"));\n+        assertThat(createdShapeLink.getId(), equalTo(symbol.toString()));\n+    }\n+\n+    @Test\n+    void assertToSymbolDoesNotDuplicateShapeLinks() {\n+        TracingSymbolProvider tracingSymbolProvider = TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .artifactDefinitions(constructArtifactDefinitions())\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build();\n+\n+        Shape shape = StringShape.builder().id(\"namespace.foo#baz\").build();\n+\n+        //call toSymbol twice to make sure the ShapeId is not added twice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c8936ccc61d4cc8b2ec372dbf992b6a8d45421"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NjU1Mg==", "bodyText": "nit: add space after //, capitalize first word and end with period.", "url": "https://github.com/awslabs/smithy/pull/548#discussion_r481376552", "createdAt": "2020-09-01T19:20:01Z", "author": {"login": "srchase"}, "path": "smithy-codegen-core/src/test/java/software/amazon/smithy/codegen/core/trace/TracingSymbolProviderTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package software.amazon.smithy.codegen.core.trace;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.codegen.core.Symbol;\n+import software.amazon.smithy.codegen.core.SymbolProvider;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+class TracingSymbolProviderTest {\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithAllFields() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .metadata(constructTraceMetadata())\n+                    .artifactDefinitions(constructArtifactDefinitions())\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithRequiredFields() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .metadata(constructTraceMetadata())\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildDoesNotThrowWithDefaultTraceMetadata() {\n+        Assertions.assertDoesNotThrow(() -> {\n+            TracingSymbolProvider.builder()\n+                    .setTraceMetadataAsDefault(\"Java\")\n+                    .symbolProvider(new TestSymbolProvider())\n+                    .shapeLinkCreator(constructFunction())\n+                    .build();\n+        });\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutSymbolProvider() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .shapeLinkCreator(constructFunction())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutTraceMetadata() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertBuildFailsWithoutShapeLinkCreator() {\n+        Assertions.assertThrows(IllegalStateException.class, () -> TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .symbolProvider(new TestSymbolProvider())\n+                .build()\n+        );\n+    }\n+\n+    @Test\n+    void assertToSymbolShapeLinkCreatorCreatesShapeLink() {\n+        TracingSymbolProvider tracingSymbolProvider = TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .artifactDefinitions(constructArtifactDefinitions())\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build();\n+\n+        Shape shape = StringShape.builder().id(\"namespace.foo#baz\").build();\n+\n+        Symbol symbol = tracingSymbolProvider.toSymbol(shape);\n+\n+        TraceFile traceFile = tracingSymbolProvider.buildTraceFile();\n+\n+        ShapeLink createdShapeLink = traceFile.getShapes().get(ShapeId.from(\"namespace.foo#baz\")).get(0);\n+\n+        assertThat(createdShapeLink.getType(), equalTo(\"TYPE\"));\n+        assertThat(createdShapeLink.getId(), equalTo(symbol.toString()));\n+    }\n+\n+    @Test\n+    void assertToSymbolDoesNotDuplicateShapeLinks() {\n+        TracingSymbolProvider tracingSymbolProvider = TracingSymbolProvider.builder()\n+                .metadata(constructTraceMetadata())\n+                .artifactDefinitions(constructArtifactDefinitions())\n+                .symbolProvider(new TestSymbolProvider())\n+                .shapeLinkCreator(constructFunction())\n+                .build();\n+\n+        Shape shape = StringShape.builder().id(\"namespace.foo#baz\").build();\n+\n+        //call toSymbol twice to make sure the ShapeId is not added twice\n+        tracingSymbolProvider.toSymbol(shape);\n+        tracingSymbolProvider.toSymbol(shape);\n+\n+        TraceFile traceFile = tracingSymbolProvider.buildTraceFile();\n+\n+        assertThat(traceFile.getShapes().get(ShapeId.from(\"namespace.foo#baz\")).size(), equalTo(1));\n+    }\n+\n+    ArtifactDefinitions constructArtifactDefinitions() {\n+        return ArtifactDefinitions.builder()\n+                .addTag(\"service\", \"Service client\")\n+                .addType(\"TYPE\", \"Class, interface (including annotation type), or enum declaration\")\n+                .build();\n+    }\n+\n+    TraceMetadata constructTraceMetadata() {\n+        return TraceMetadata.builder()\n+                .id(\"software.amazon.awssdk.services:snowball:2.10.79\")\n+                .version(\"2.10.79\")\n+                .type(\"Java\")\n+                .setTimestampAsNow()\n+                .build();\n+    }\n+\n+    BiFunction<Shape, Symbol, List<ShapeLink>> constructFunction() {\n+        return (shape, symbol) -> {\n+            List<ShapeLink> list = new ArrayList<>();\n+            list.add(ShapeLink.builder()\n+                    .id(symbol.toString())\n+                    .type(\"TYPE\")\n+                    .build());\n+            return list;\n+        };\n+    }\n+\n+    //test class that substitutes for language-specific symbol provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c8936ccc61d4cc8b2ec372dbf992b6a8d45421"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98b180f0e4df29e54a67f59bd0330268f4643c41", "author": {"user": null}, "url": "https://github.com/awslabs/smithy/commit/98b180f0e4df29e54a67f59bd0330268f4643c41", "committedDate": "2020-09-01T19:24:29Z", "message": "Add TracingSymbolProvider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77c8936ccc61d4cc8b2ec372dbf992b6a8d45421", "author": {"user": null}, "url": "https://github.com/awslabs/smithy/commit/77c8936ccc61d4cc8b2ec372dbf992b6a8d45421", "committedDate": "2020-08-31T21:26:31Z", "message": "Add TracingSymbolProvider"}, "afterCommit": {"oid": "98b180f0e4df29e54a67f59bd0330268f4643c41", "author": {"user": null}, "url": "https://github.com/awslabs/smithy/commit/98b180f0e4df29e54a67f59bd0330268f4643c41", "committedDate": "2020-09-01T19:24:29Z", "message": "Add TracingSymbolProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMTg3MDg4", "url": "https://github.com/awslabs/smithy/pull/548#pullrequestreview-480187088", "createdAt": "2020-09-01T23:39:05Z", "commit": {"oid": "98b180f0e4df29e54a67f59bd0330268f4643c41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2238, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}