{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODExNTM2", "number": 388, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowNDo0MlrODz1I6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoyMjozN1rODz1mxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njc0NjAxOnYy", "diffSide": "RIGHT", "path": "docs/source/spec/core/selectors.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowNDo0MlrOGIeoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowNDo0MlrOGIeoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0MzU5Ng==", "bodyText": "(list) should be (values)", "url": "https://github.com/awslabs/smithy/pull/388#discussion_r411543596", "createdAt": "2020-04-20T17:04:42Z", "author": {"login": "kstich"}, "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -77,145 +139,261 @@ Attribute selectors support the following comparators:\n     * - Comparator\n       - Description\n     * - ``=``\n-      - Matches if the attribute value is equal to the expected value.\n+      - Matches if the attribute value is equal to the comparison value.\n+    * - ``!=``\n+      - Matches if the attribute value is not equal to the comparison value.\n+        Note that this comparator is never matched if the resolved attribute\n+        does not exist.\n     * - ``^=``\n-      - Matches if the attribute value starts with the expected value.\n+      - Matches if the attribute value starts with the comparison value.\n     * - ``$=``\n-      - Matches if the attribute value ends with the expected value.\n+      - Matches if the attribute value ends with the comparison value.\n     * - ``*=``\n-      - Matches if the attribute value contains with the expected value.\n+      - Matches if the attribute value contains with the comparison value.\n+    * - ``>``\n+      - Matches if the attribute value is greater than the comparison value.\n+    * - ``>=``\n+      - Matches if the attribute value is greater than or equal to the\n+        comparison value.\n+    * - ``<``\n+      - Matches if the attribute value is less than the comparison value.\n+    * - ``<=``\n+      - Matches if the attribute value is less than or equal to the\n+        comparison value.\n \n-Attribute comparisons can be made case-insensitive by preceding the closing\n-bracket with \" i\" (e.g., ``string[trait|time=DATE i]``).\n+The ``<``, ``<=``, ``>``, ``>=`` comparators only match if both the attribute\n+value and comparison value contain valid :token:`number` productions. If\n+either is not a number, then the selector does not match.\n \n+The following selector matches shapes that have an :ref:`httpError-trait`\n+value that is greater than or equal to `500`:\n \n-Matching traits\n-~~~~~~~~~~~~~~~\n+.. code-block:: none\n \n-We can match shapes based on traits using an *attribute selector*. The\n-following selector finds all structure shapes with the :ref:`error-trait`\n-trait:\n+    [trait|httpError >= 500]\n+\n+The following selector is equivalent:\n \n .. code-block:: none\n \n-    structure[trait|error]\n+    [trait|httpError >= '500']\n+\n+The following selector does not match any shapes because the comparison value\n+is not a valid number:\n+\n+.. code-block:: none\n+\n+    [trait|httpError >= \"not a number!\"]\n+\n+\n+``id`` attribute\n+----------------\n+\n+Gets the full shape ID of a shape.\n+\n+The following example matches only the ``foo.baz#Structure`` shape:\n+\n+.. code-block:: none\n+\n+    [id=foo.baz#Structure]\n+\n+Matching on a shape ID that contains a member requires that the shape ID\n+is enclosed in single or double quotes:\n \n-The ``trait|`` is called a *namespace prefix*. This particular prefix tells\n-the selector that we are interested in a trait applied to the current shape,\n-and that that specific trait is ``time``.\n+.. code-block:: none\n+\n+    [id='foo.baz#Structure$foo']\n+\n+\n+``id|namespace`` attribute\n+--------------------------\n+\n+Gets the namespace part of a shape ID.\n \n-We can match string shapes that have a specific trait value:\n+The following example matches all shapes in the ``foo.baz`` namespace:\n+\n+.. code-block:: none\n+\n+    [id|namespace=foo.baz]\n+\n+\n+``id|name`` attribute\n+---------------------\n+\n+Gets the name part of a shape ID.\n+\n+The following example matches all shapes in the model that have a shape\n+name of ``MyShape``.\n+\n+.. code-block:: none\n+\n+    [id|name=MyShape]\n+\n+\n+``id|member`` attribute\n+-----------------------\n+\n+Gets the member part of a shape ID (if available).\n+\n+The following example matches all members in the model that have a member\n+name of ``foo``.\n+\n+.. code-block:: none\n+\n+    [id|member=foo]\n+\n+\n+``service|version`` attribute\n+-----------------------------\n+\n+Gets the version property of a service shape if the shape is\n+a service.\n+\n+The following example matches all service shapes that have a version\n+property that starts with ``2018-``:\n+\n+.. code-block:: none\n+\n+    [service|version^='2018-']\n+\n+\n+``trait|*`` attribute\n+---------------------\n+\n+Gets the value of a trait applied to a shape, where \"*\" is the ID\n+of a trait. The ``smithy.api`` namespace MAY be omitted from shape IDs\n+provided to the ``trait`` attribute. Traits are converted to their\n+serialized :token:`node <node_value>` form when matching against their values.\n+Only string, Boolean, and numeric values can be compared with an expected\n+value. Boolean values are converted to \"true\" or \"false\". Numeric values\n+are converted to their string representation.\n+\n+The following selector finds all structure shapes with the :ref:`error-trait`\n+trait, and the ``error`` trait can be set to any value:\n+\n+.. code-block:: none\n+\n+    structure[trait|error]\n+\n+The following selector finds all structure shapes with the :ref:`error-trait`\n+set to ``client``:\n \n .. code-block:: none\n \n     structure[trait|error=client]\n \n-Matching on trait values only works for traits that have a scalar value\n-(e.g., strings, numbers, and booleans). We can also match case-insensitvely\n-on the value by appending \" i\" before the closing bracket:\n+The following selector finds all structure shapes with the :ref:`error-trait`,\n+but the trait is not set to ``client``:\n \n .. code-block:: none\n \n-    structure[trait|error=CLIENT i]\n+    structure[trait|error!=client]\n \n-Fully-qualified trait names are also supported:\n+Fully-qualified trait names are supported:\n \n .. code-block:: none\n \n     string[trait|smithy.example#customTrait=foo]\n \n \n-Matching on shape ID\n-~~~~~~~~~~~~~~~~~~~~\n+Nested trait  properties\n+~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Nested properties of a trait can be selected using subsequent pipe (``|``)\n+delimited property names.\n \n-Attribute selectors can be used to match the :ref:`shape ID <shape-id>`. The\n-following example matches a single resource shape with an ID of\n-``smithy.example#Foo``:\n+The following example matches all shapes that have a :ref:`range-trait`\n+with a ``min`` property set to ``1``:\n \n .. code-block:: none\n \n-    resource[id='smithy.example#Foo']\n+    [trait|range|min=1]\n \n-Notice that the value of an attribute selector can be quoted. The example\n-above uses single quotes, but double quotes work too.\n+Values of a :token:`list <node_array>` can be selected using the special\n+``(values)`` syntax. Each element from the value currently being evaluated\n+is used as a new value to check subsequent properties against.\n \n-Smithy provides several attributes in the ``id`` namespace to make matching\n-on a shape ID easier. The following example finds all shapes that are in the\n-\"smithy.example\" namespace:\n+The following example matches all shapes that have an :ref:`enum-trait`\n+that contains an enum definition with a ``tags`` property that is set to\n+``internal``:\n \n .. code-block:: none\n \n-    resource[id|namespace=smithy.example]\n+    [trait|enum|(values)|tags|(values)=internal]\n \n-Though not as clear, matching shapes in a specific namespace can also be\n-achieved using the ``^=`` comparator against ``id``:\n+An empty list is not considered present when checking for existence.\n+\n+The following example matches all shapes that have an ``enum`` trait,\n+the trait contains at least one ``enum`` entry, and one or more entries\n+contains a non-empty ``tags`` list.\n \n .. code-block:: none\n \n-    resource[id^=smithy.example#]\n+    [trait|enum|(values)|tags|(values)]\n+\n+Values of an :token:`object <node_object>` can also be selected using the\n+special ``(values)`` syntax. Each value from object currently being evaluated\n+is used as a new value to check subsequent properties against.\n \n-The following example matches all member shapes that have a member name of\n-\"key\":\n+The following example matches all shapes that have an :ref:`externalDocumentation-trait`\n+that has a value set to ``https://example.com``:\n \n .. code-block:: none\n \n-    resource[id|member=key]\n+    [trait|externalDocumentation|(values)='https://example.com']\n \n-Though not as clear, matching members with a member name of \"key\" can also be\n-achieved using the ``$=`` comparator against ``id``:\n+Keys of an object can be selected using the special ``(keys)`` syntax. Each\n+key currently being evaluated is used as a new value to check subsequent\n+properties against.\n+\n+The following example matches all shapes that have an ``externalDocumentation``\n+trait that has an entry named ``Homepage``:\n \n .. code-block:: none\n \n-    resource[id$=\"$key\"]\n+    [trait|externalDocumentation|(keys)=Homepage]\n \n+Like the ``(list)`` property, the ``(keys)`` property also treats empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e34cee954ee943d8fe09a8dbf1296493468430"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njc1ODAzOnYy", "diffSide": "RIGHT", "path": "docs/source/spec/core/selectors.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowNzo0MFrOGIevZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzowNzo0MFrOGIevZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU0NTQ0NQ==", "bodyText": "\"shapes\" should be singular or \"is\" should be \"are\"", "url": "https://github.com/awslabs/smithy/pull/388#discussion_r411545445", "createdAt": "2020-04-20T17:07:40Z", "author": {"login": "kstich"}, "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -77,145 +139,261 @@ Attribute selectors support the following comparators:\n     * - Comparator\n       - Description\n     * - ``=``\n-      - Matches if the attribute value is equal to the expected value.\n+      - Matches if the attribute value is equal to the comparison value.\n+    * - ``!=``\n+      - Matches if the attribute value is not equal to the comparison value.\n+        Note that this comparator is never matched if the resolved attribute\n+        does not exist.\n     * - ``^=``\n-      - Matches if the attribute value starts with the expected value.\n+      - Matches if the attribute value starts with the comparison value.\n     * - ``$=``\n-      - Matches if the attribute value ends with the expected value.\n+      - Matches if the attribute value ends with the comparison value.\n     * - ``*=``\n-      - Matches if the attribute value contains with the expected value.\n+      - Matches if the attribute value contains with the comparison value.\n+    * - ``>``\n+      - Matches if the attribute value is greater than the comparison value.\n+    * - ``>=``\n+      - Matches if the attribute value is greater than or equal to the\n+        comparison value.\n+    * - ``<``\n+      - Matches if the attribute value is less than the comparison value.\n+    * - ``<=``\n+      - Matches if the attribute value is less than or equal to the\n+        comparison value.\n \n-Attribute comparisons can be made case-insensitive by preceding the closing\n-bracket with \" i\" (e.g., ``string[trait|time=DATE i]``).\n+The ``<``, ``<=``, ``>``, ``>=`` comparators only match if both the attribute\n+value and comparison value contain valid :token:`number` productions. If\n+either is not a number, then the selector does not match.\n \n+The following selector matches shapes that have an :ref:`httpError-trait`\n+value that is greater than or equal to `500`:\n \n-Matching traits\n-~~~~~~~~~~~~~~~\n+.. code-block:: none\n \n-We can match shapes based on traits using an *attribute selector*. The\n-following selector finds all structure shapes with the :ref:`error-trait`\n-trait:\n+    [trait|httpError >= 500]\n+\n+The following selector is equivalent:\n \n .. code-block:: none\n \n-    structure[trait|error]\n+    [trait|httpError >= '500']\n+\n+The following selector does not match any shapes because the comparison value\n+is not a valid number:\n+\n+.. code-block:: none\n+\n+    [trait|httpError >= \"not a number!\"]\n+\n+\n+``id`` attribute\n+----------------\n+\n+Gets the full shape ID of a shape.\n+\n+The following example matches only the ``foo.baz#Structure`` shape:\n+\n+.. code-block:: none\n+\n+    [id=foo.baz#Structure]\n+\n+Matching on a shape ID that contains a member requires that the shape ID\n+is enclosed in single or double quotes:\n \n-The ``trait|`` is called a *namespace prefix*. This particular prefix tells\n-the selector that we are interested in a trait applied to the current shape,\n-and that that specific trait is ``time``.\n+.. code-block:: none\n+\n+    [id='foo.baz#Structure$foo']\n+\n+\n+``id|namespace`` attribute\n+--------------------------\n+\n+Gets the namespace part of a shape ID.\n \n-We can match string shapes that have a specific trait value:\n+The following example matches all shapes in the ``foo.baz`` namespace:\n+\n+.. code-block:: none\n+\n+    [id|namespace=foo.baz]\n+\n+\n+``id|name`` attribute\n+---------------------\n+\n+Gets the name part of a shape ID.\n+\n+The following example matches all shapes in the model that have a shape\n+name of ``MyShape``.\n+\n+.. code-block:: none\n+\n+    [id|name=MyShape]\n+\n+\n+``id|member`` attribute\n+-----------------------\n+\n+Gets the member part of a shape ID (if available).\n+\n+The following example matches all members in the model that have a member\n+name of ``foo``.\n+\n+.. code-block:: none\n+\n+    [id|member=foo]\n+\n+\n+``service|version`` attribute\n+-----------------------------\n+\n+Gets the version property of a service shape if the shape is\n+a service.\n+\n+The following example matches all service shapes that have a version\n+property that starts with ``2018-``:\n+\n+.. code-block:: none\n+\n+    [service|version^='2018-']\n+\n+\n+``trait|*`` attribute\n+---------------------\n+\n+Gets the value of a trait applied to a shape, where \"*\" is the ID\n+of a trait. The ``smithy.api`` namespace MAY be omitted from shape IDs\n+provided to the ``trait`` attribute. Traits are converted to their\n+serialized :token:`node <node_value>` form when matching against their values.\n+Only string, Boolean, and numeric values can be compared with an expected\n+value. Boolean values are converted to \"true\" or \"false\". Numeric values\n+are converted to their string representation.\n+\n+The following selector finds all structure shapes with the :ref:`error-trait`\n+trait, and the ``error`` trait can be set to any value:\n+\n+.. code-block:: none\n+\n+    structure[trait|error]\n+\n+The following selector finds all structure shapes with the :ref:`error-trait`\n+set to ``client``:\n \n .. code-block:: none\n \n     structure[trait|error=client]\n \n-Matching on trait values only works for traits that have a scalar value\n-(e.g., strings, numbers, and booleans). We can also match case-insensitvely\n-on the value by appending \" i\" before the closing bracket:\n+The following selector finds all structure shapes with the :ref:`error-trait`,\n+but the trait is not set to ``client``:\n \n .. code-block:: none\n \n-    structure[trait|error=CLIENT i]\n+    structure[trait|error!=client]\n \n-Fully-qualified trait names are also supported:\n+Fully-qualified trait names are supported:\n \n .. code-block:: none\n \n     string[trait|smithy.example#customTrait=foo]\n \n \n-Matching on shape ID\n-~~~~~~~~~~~~~~~~~~~~\n+Nested trait  properties\n+~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Nested properties of a trait can be selected using subsequent pipe (``|``)\n+delimited property names.\n \n-Attribute selectors can be used to match the :ref:`shape ID <shape-id>`. The\n-following example matches a single resource shape with an ID of\n-``smithy.example#Foo``:\n+The following example matches all shapes that have a :ref:`range-trait`\n+with a ``min`` property set to ``1``:\n \n .. code-block:: none\n \n-    resource[id='smithy.example#Foo']\n+    [trait|range|min=1]\n \n-Notice that the value of an attribute selector can be quoted. The example\n-above uses single quotes, but double quotes work too.\n+Values of a :token:`list <node_array>` can be selected using the special\n+``(values)`` syntax. Each element from the value currently being evaluated\n+is used as a new value to check subsequent properties against.\n \n-Smithy provides several attributes in the ``id`` namespace to make matching\n-on a shape ID easier. The following example finds all shapes that are in the\n-\"smithy.example\" namespace:\n+The following example matches all shapes that have an :ref:`enum-trait`\n+that contains an enum definition with a ``tags`` property that is set to\n+``internal``:\n \n .. code-block:: none\n \n-    resource[id|namespace=smithy.example]\n+    [trait|enum|(values)|tags|(values)=internal]\n \n-Though not as clear, matching shapes in a specific namespace can also be\n-achieved using the ``^=`` comparator against ``id``:\n+An empty list is not considered present when checking for existence.\n+\n+The following example matches all shapes that have an ``enum`` trait,\n+the trait contains at least one ``enum`` entry, and one or more entries\n+contains a non-empty ``tags`` list.\n \n .. code-block:: none\n \n-    resource[id^=smithy.example#]\n+    [trait|enum|(values)|tags|(values)]\n+\n+Values of an :token:`object <node_object>` can also be selected using the\n+special ``(values)`` syntax. Each value from object currently being evaluated\n+is used as a new value to check subsequent properties against.\n \n-The following example matches all member shapes that have a member name of\n-\"key\":\n+The following example matches all shapes that have an :ref:`externalDocumentation-trait`\n+that has a value set to ``https://example.com``:\n \n .. code-block:: none\n \n-    resource[id|member=key]\n+    [trait|externalDocumentation|(values)='https://example.com']\n \n-Though not as clear, matching members with a member name of \"key\" can also be\n-achieved using the ``$=`` comparator against ``id``:\n+Keys of an object can be selected using the special ``(keys)`` syntax. Each\n+key currently being evaluated is used as a new value to check subsequent\n+properties against.\n+\n+The following example matches all shapes that have an ``externalDocumentation``\n+trait that has an entry named ``Homepage``:\n \n .. code-block:: none\n \n-    resource[id$=\"$key\"]\n+    [trait|externalDocumentation|(keys)=Homepage]\n \n+Like the ``(list)`` property, the ``(keys)`` property also treats empty\n+objects as not present.\n \n-Available attributes\n-~~~~~~~~~~~~~~~~~~~~\n+The following example matches all shapes that have a trait named\n+``myMapTrait`` that has at least one entry:\n \n-.. list-table::\n-    :header-rows: 1\n-    :widths: 10 50 40\n+.. code-block:: none\n \n-    * - Attribute\n-      - Description\n-      - Example result\n-    * - ``id``\n-      - The full shape ID of a shape\n-      - ``foo.baz#Structure$memberName``\n-    * - ``id|namespace``\n-      - The namespace part of a shape ID\n-      - ``foo.baz``\n-    * - ``id|name``\n-      - The name part of a shape ID\n-      - ``Structure``\n-    * - ``id|member``\n-      - The member part of a shape ID (if available)\n-      - ``memberName``\n-    * - ``service|version``\n-      - Gets the version property of a service shape if the shape is\n-        a service.\n-      - ``service[service|version^='2018-']``\n-    * - ``trait|*``\n-      - Gets the value of a trait applied to a shape, where \"*\" is the name\n-        of a trait (e.g., ``trait|error``). Boolean trait values are\n-        converted to \"true\" or \"false\".\n-      - ``client``\n+    [trait|smithy.example#myMapTrait|(keys)]\n+\n+Implementations MUST tolerate expressions that do not perform a valid\n+traversal of a trait. The following example attempts to descend into\n+non-existent properties of the :ref:`documentation-trait`. This example\n+MUST not cause an error and MUST match no shapes:\n+\n+.. code-block:: none\n+\n+    [trait|documentation|invalid|child=Hi]\n \n \n Neighbors\n =========\n \n-The *current* shape evaluated by a selector is changed using a neighbor token,\n-``>``. A neighbor token returns every shape that is connected to the current\n-shape. For example, the following selector returns the key and value members of\n-every map:\n+The *current* shapes evaluated by a selector is changed using a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e34cee954ee943d8fe09a8dbf1296493468430"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjgyMjQ3OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/core/selectors.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoyMjozN1rOGIfWZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoyMjozN1rOGIfWZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1NTQyOA==", "bodyText": "Missing the mathematical comparators.", "url": "https://github.com/awslabs/smithy/pull/388#discussion_r411555428", "createdAt": "2020-04-20T17:22:37Z", "author": {"login": "kstich"}, "path": "docs/source/spec/core/selectors.rst", "diffHunk": "@@ -584,67 +773,33 @@ Selectors are defined by the following ABNF_ grammar.\n    changing the semantics of a selector.\n \n .. productionlist:: selectors\n-    selector             :`selector_expression` *(`selector_expression`)\n-    selector_expression  :`shape_types` / `attr` / `function_expression` / `neighbors`\n-    shape_types          :\"*\"\n-                         :/ \"blob\"\n-                         :/ \"boolean\"\n-                         :/ \"document\"\n-                         :/ \"string\"\n-                         :/ \"byte\"\n-                         :/ \"short\"\n-                         :/ \"integer\"\n-                         :/ \"long\"\n-                         :/ \"float\"\n-                         :/ \"double\"\n-                         :/ \"bigDecimal\"\n-                         :/ \"bigInteger\"\n-                         :/ \"timestamp\"\n-                         :/ \"list\"\n-                         :/ \"map\"\n-                         :/ \"set\"\n-                         :/ \"structure\"\n-                         :/ \"union\"\n-                         :/ \"service\"\n-                         :/ \"operation\"\n-                         :/ \"resource\"\n-                         :/ \"member\"\n-                         :/ \"number\"\n-                         :/ \"simpleType\"\n-                         :/ \"collection\"\n-    neighbors            :\">\" / `directed_neighbor` / `recursive_neighbor`\n-    directed_neighbor    :\"-[\" `relationship_type` *(\",\" `relationship_type`) \"]->\"\n-    recursive_neighbor   :\"~>\"\n-    relationship_type    :\"identifier\"\n-                         :/ \"create\"\n-                         :/ \"read\"\n-                         :/ \"update\"\n-                         :/ \"delete\"\n-                         :/ \"list\"\n-                         :/ \"member\"\n-                         :/ \"input\"\n-                         :/ \"output\"\n-                         :/ \"error\"\n-                         :/ \"operation\"\n-                         :/ \"collectionOperation\"\n-                         :/ \"instanceOperation\"\n-                         :/ \"resource\"\n-                         :/ \"bound\"\n-                         :/ \"trait\"\n-    attr                   :\"[\" `attr_key` *(`comparator` `attr_value` [\"i\"]) \"]\"\n-    attr_key               :`id_attribute` / `trait_attribute` / `service_attribute`\n-    id_attribute           :\"id\" [\"|\" (\"namespace\" / \"name\" / \"member\")]\n-    trait_attribute        :\"trait\" \"|\" `attr_value` *(\"|\" `attr_value`)\n-    attr_value             :`attr_identifier` / `selector_text`\n-    attr_identifier        :1*(ALPHA / DIGIT / \"_\") *(ALPHA / DIGIT / \"_\" / \"-\" / \".\" / \"#\")\n-    service_attribute      :\"service|version\"\n-    comparator            :\"^=\" / \"$=\" / \"*=\" / \"=\"\n-    function_expression   :\":\" `function` \"(\" `selector` *(\",\" `selector`) \")\"\n-    function              :\"each\" / \"test\" / \"of\" / \"not\"\n-    selector_text         :`selector_single_quoted_text` / `selector_double_quoted_text`\n-    selector_single_quoted_text    :\"'\" 1*`selector_single_quoted_char` \"'\"\n-    selector_double_quoted_text    :DQUOTE 1*`selector_double_quoted_char` DQUOTE\n-    selector_single_quoted_char    :%x20-26 / %x28-5B / %x5D-10FFFF ; Excludes (')\n-    selector_double_quoted_char    :%x20-21 / %x23-5B / %x5D-10FFFF ; Excludes (\")\n+    selector                        :`selector_expression` *(`selector_expression`)\n+    selector_expression             :`selector_shape_types`\n+                                    :/ `selector_attr`\n+                                    :/ `selector_function_expression`\n+                                    :/ `selector_neighbor`\n+    selector_shape_types            :\"*\" / `identifier`\n+    selector_neighbor               :`selector_undirected_neighbor`\n+                                    :/ `selector_directed_neighbor`\n+                                    :/ `selector_recursive_neighbor`\n+    selector_undirected_neighbor    :\">\"\n+    selector_directed_neighbor      :\"-[\" `selector_rel_type` *(\",\" `selector_rel_type`) \"]->\"\n+    selector_recursive_neighbor     :\"~>\"\n+    selector_rel_type               :`identifier`\n+    selector_attr                   :\"[\" `selector_key` *(`selector_comparator` `selector_values` [\"i\"]) \"]\"\n+    selector_key                    :`identifier` *(\"|\" `selector_key_path`)\n+    selector_key_path               :`selector_pseudo_key` / `selector_value`\n+    selector_values                 :`selector_value` *(\",\" `selector_value`)\n+    selector_value                  :`selector_text` / `number` / `root_shape_id`\n+    selector_absolute_root_shape_id :`namespace` \"#\" `identifier`\n+    selector_pseudo_key             :\"(\" `identifier` \")\"\n+    selector_comparator             :\"^=\" / \"$=\" / \"*=\" / \"!=\" / \"=\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e34cee954ee943d8fe09a8dbf1296493468430"}, "originalPosition": 662}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}