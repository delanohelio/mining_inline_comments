{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjYwNzQ0", "number": 340, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxMDo1NFrODtVMaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxNTowNFrODtVPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODU5NzU1OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/core.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxMDo1NFrOF-shDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxMDo1NFrOF-shDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4NTM4OA==", "bodyText": "Maybe state it has to be top-level operation input and output members.", "url": "https://github.com/awslabs/smithy/pull/340#discussion_r401285388", "createdAt": "2020-04-01T00:10:54Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/core.rst", "diffHunk": "@@ -3377,6 +3374,10 @@ optional members:\n         In an HTTP-based protocol, for instance, this indicates that the\n         ``content-length`` header must be set.\n \n+Shapes targeted by this trait MAY NOT be used outside of operation inputs and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0769478f3c6811e7ec6eae3b3cbaeb18c1831081"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYwMjA2OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/validation/validators/StreamingTraitValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxMzozMFrOF-sjwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxMzozMFrOF-sjwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4NjA4MA==", "bodyText": "I think breaking this into two methods would make this validator easier to understand -- one method validates that the target is correct and the other that only a single member of a structure can target a streaming blob.", "url": "https://github.com/awslabs/smithy/pull/340#discussion_r401286080", "createdAt": "2020-04-01T00:13:30Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/validation/validators/StreamingTraitValidator.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.validation.validators;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.traits.StreamingTrait;\n+import software.amazon.smithy.model.validation.AbstractValidator;\n+import software.amazon.smithy.model.validation.ValidationEvent;\n+import software.amazon.smithy.utils.OptionalUtils;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+public class StreamingTraitValidator extends AbstractValidator {\n+    @Override\n+    public List<ValidationEvent> validate(Model model) {\n+        Set<ShapeId> topLevelIoShapes = model.shapes(OperationShape.class)\n+                .flatMap(operation -> SetUtils.of(operation.getInput(), operation.getOutput()).stream())\n+                .flatMap(OptionalUtils::stream)\n+                .collect(Collectors.toSet());\n+\n+        Set<MemberShape> streamingMembers = model.shapes(MemberShape.class)\n+                .filter(member -> member.getMemberTrait(model, StreamingTrait.class).isPresent())\n+                .collect(Collectors.toSet());\n+\n+        List<ValidationEvent> events = streamingMembers.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0769478f3c6811e7ec6eae3b3cbaeb18c1831081"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYwNTQ4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/validation/validators/StreamingTraitValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxNTowNFrOF-sloQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoxNTowNFrOF-sloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4NjU2MQ==", "bodyText": "This one-liner is pretty tricky and even plays with indentation in a non-standard way. It make make this more readable to break this across multiple lines.", "url": "https://github.com/awslabs/smithy/pull/340#discussion_r401286561", "createdAt": "2020-04-01T00:15:04Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/validation/validators/StreamingTraitValidator.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.validation.validators;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.OperationShape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.traits.StreamingTrait;\n+import software.amazon.smithy.model.validation.AbstractValidator;\n+import software.amazon.smithy.model.validation.ValidationEvent;\n+import software.amazon.smithy.utils.OptionalUtils;\n+import software.amazon.smithy.utils.SetUtils;\n+\n+public class StreamingTraitValidator extends AbstractValidator {\n+    @Override\n+    public List<ValidationEvent> validate(Model model) {\n+        Set<ShapeId> topLevelIoShapes = model.shapes(OperationShape.class)\n+                .flatMap(operation -> SetUtils.of(operation.getInput(), operation.getOutput()).stream())\n+                .flatMap(OptionalUtils::stream)\n+                .collect(Collectors.toSet());\n+\n+        Set<MemberShape> streamingMembers = model.shapes(MemberShape.class)\n+                .filter(member -> member.getMemberTrait(model, StreamingTrait.class).isPresent())\n+                .collect(Collectors.toSet());\n+\n+        List<ValidationEvent> events = streamingMembers.stream()\n+                .filter(member -> !topLevelIoShapes.contains(member.getContainer()))\n+                .map(member -> error(member, String.format(\n+                        \"The shape %s has the smithy.api#streaming trait, and so may only be targeted by \"\n+                                + \"top-level operation inputs and outputs.\",\n+                        member.getTarget())))\n+                .collect(Collectors.toList());\n+\n+        events.addAll(streamingMembers.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0769478f3c6811e7ec6eae3b3cbaeb18c1831081"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}