{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MzM3NzUz", "number": 242, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTowMFrODWDU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTowMjoxOFrODWDtVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDQ5NzkwOnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTowMFrOFalqkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTowMFrOFalqkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDQwMg==", "bodyText": "Multiple list MyMap instances that should be map myMap.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363424402", "createdAt": "2020-01-06T18:39:00Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob\n+      - Serialized as a `base64 encoded`_ string\n+\n+        .. code-block:: smithy\n+\n+            structure Struct {\n+                binary: Blob,\n+            }\n+\n+        given a value of ``value`` for ``binary``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <binary>dmFsdWU=</binary>\n+            </Struct>\n+\n+    * - boolean\n+      - Serialized as \"``true``\" or \"``false``\"\n+    * - string\n+      - Serialized as an XML-safe UTF-8 string\n+    * - byte\n+      - Serialized as the string value of the number\n+    * - short\n+      - Serialized as the string value of the number\n+    * - integer\n+      - Serialized as the string value of the number\n+    * - long\n+      - Serialized as the string value of the number\n+    * - float\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - double\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigInteger\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigDecimal\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - timestamp\n+      - Serialized as `RFC 3339`_ date-time value.\n+\n+        .. code-block:: smithy\n+\n+              structure Struct {\n+                  date: Timestamp,\n+              }\n+\n+        given a value of ``1578255206`` for ``date``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <date>2020-01-05T20:13:26Z</date>\n+            </Struct>\n+\n+    * - document\n+      - .. warning::\n+\n+            Document shapes are not recommended for use in XML based protocols.\n+\n+\n+List and set serialization\n+==========================\n+\n+List and set shapes use the same serialization semantics. List and set shapes\n+can be serialized as wrapped lists (the default behavior) or flattened lists.\n+\n+\n+Wrapped list serialization\n+--------------------------\n+\n+A wrapped list or set is serialized in an XML element where each value is\n+serialized in a nested element named ``member``. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyList\n+    }\n+\n+    list MyList {\n+        member: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <member>example1</member>\n+            <member>example2</member>\n+            <member>example3</member>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the member of a list or set to\n+change the nested element name. For example, given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        structure Foo {\n+            values: MyList\n+        }\n+\n+        list MyList {\n+            @xmlName(\"Item\")\n+            member: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#Foo\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"values\": {\n+                            \"target\": \"smithy.example#MyList\"\n+                        }\n+                    }\n+                },\n+                \"smithy.example#MyList\": {\n+                    \"type\": \"list\",\n+                    \"member\": {\n+                        \"target\": \"smithy.api#String\",\n+                        \"traits\": {\n+                            \"smithy.api#xmlName\": \"Item\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <Item>example1</Item>\n+            <Item>example2</Item>\n+            <Item>example3</Item>\n+        </values>\n+    </Foo>\n+\n+\n+Flattened list serialization\n+----------------------------\n+\n+The :ref:`xmlflattened-trait` can be used to unwrap the values of list/set\n+into a containing structure/union. The name of the elements repeated within\n+the structure/union is based on the structure/union member name. For\n+example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        @xmlFlattened\n+        flat: MyList,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Foo>\n+\n+The ``xmlName`` trait applied to the structure/union member is used to change\n+the name of the repeated XML element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        @xmlName(\"Hi\")\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <Hi>example1</Hi>\n+        <Hi>example2</Hi>\n+        <Hi>example3</Hi>\n+    </Choice>\n+\n+The ``xmlName`` trait applied to the member of a list has no effect when\n+serializing a flattened list into a structure/union. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        @xmlName(\"Hi\")\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Choice>\n+\n+\n+Map serialization\n+=================\n+\n+Map shapes can be serialized as wrapped maps (the default behavior) or\n+flattened maps.\n+\n+\n+Wrapped map serialization\n+-------------------------\n+\n+A wrapped map is serialized in an XML element where each value is\n+serialized in a nested element named ``entry`` that contains a nested\n+``key`` and ``value`` element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyMap\n+    }\n+\n+    list MyMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 394}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDQ5ODMyOnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTowOVrOFalq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo1NjoyNlrOFamIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDQ3Mw==", "bodyText": "Mismatched with example below using \"Attribute\".", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363424473", "createdAt": "2020-01-06T18:39:09Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob\n+      - Serialized as a `base64 encoded`_ string\n+\n+        .. code-block:: smithy\n+\n+            structure Struct {\n+                binary: Blob,\n+            }\n+\n+        given a value of ``value`` for ``binary``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <binary>dmFsdWU=</binary>\n+            </Struct>\n+\n+    * - boolean\n+      - Serialized as \"``true``\" or \"``false``\"\n+    * - string\n+      - Serialized as an XML-safe UTF-8 string\n+    * - byte\n+      - Serialized as the string value of the number\n+    * - short\n+      - Serialized as the string value of the number\n+    * - integer\n+      - Serialized as the string value of the number\n+    * - long\n+      - Serialized as the string value of the number\n+    * - float\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - double\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigInteger\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigDecimal\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - timestamp\n+      - Serialized as `RFC 3339`_ date-time value.\n+\n+        .. code-block:: smithy\n+\n+              structure Struct {\n+                  date: Timestamp,\n+              }\n+\n+        given a value of ``1578255206`` for ``date``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <date>2020-01-05T20:13:26Z</date>\n+            </Struct>\n+\n+    * - document\n+      - .. warning::\n+\n+            Document shapes are not recommended for use in XML based protocols.\n+\n+\n+List and set serialization\n+==========================\n+\n+List and set shapes use the same serialization semantics. List and set shapes\n+can be serialized as wrapped lists (the default behavior) or flattened lists.\n+\n+\n+Wrapped list serialization\n+--------------------------\n+\n+A wrapped list or set is serialized in an XML element where each value is\n+serialized in a nested element named ``member``. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyList\n+    }\n+\n+    list MyList {\n+        member: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <member>example1</member>\n+            <member>example2</member>\n+            <member>example3</member>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the member of a list or set to\n+change the nested element name. For example, given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        structure Foo {\n+            values: MyList\n+        }\n+\n+        list MyList {\n+            @xmlName(\"Item\")\n+            member: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#Foo\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"values\": {\n+                            \"target\": \"smithy.example#MyList\"\n+                        }\n+                    }\n+                },\n+                \"smithy.example#MyList\": {\n+                    \"type\": \"list\",\n+                    \"member\": {\n+                        \"target\": \"smithy.api#String\",\n+                        \"traits\": {\n+                            \"smithy.api#xmlName\": \"Item\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <Item>example1</Item>\n+            <Item>example2</Item>\n+            <Item>example3</Item>\n+        </values>\n+    </Foo>\n+\n+\n+Flattened list serialization\n+----------------------------\n+\n+The :ref:`xmlflattened-trait` can be used to unwrap the values of list/set\n+into a containing structure/union. The name of the elements repeated within\n+the structure/union is based on the structure/union member name. For\n+example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        @xmlFlattened\n+        flat: MyList,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Foo>\n+\n+The ``xmlName`` trait applied to the structure/union member is used to change\n+the name of the repeated XML element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        @xmlName(\"Hi\")\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <Hi>example1</Hi>\n+        <Hi>example2</Hi>\n+        <Hi>example3</Hi>\n+    </Choice>\n+\n+The ``xmlName`` trait applied to the member of a list has no effect when\n+serializing a flattened list into a structure/union. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        @xmlName(\"Hi\")\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Choice>\n+\n+\n+Map serialization\n+=================\n+\n+Map shapes can be serialized as wrapped maps (the default behavior) or\n+flattened maps.\n+\n+\n+Wrapped map serialization\n+-------------------------\n+\n+A wrapped map is serialized in an XML element where each value is\n+serialized in a nested element named ``entry`` that contains a nested\n+``key`` and ``value`` element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyMap\n+    }\n+\n+    list MyMap {\n+        key: String,\n+        value: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <entry>\n+                <key>example-key1</key>\n+                <value>example1</value>\n+            </entry>\n+            <entry>\n+                <key>example-key2</key>\n+                <value>example2</value>\n+            </entry>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the key and value members of a map\n+to change the nested element names.  For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyMap\n+    }\n+\n+    list MyMap {\n+        @xmlName(\"Name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 426}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzMTk4Ng==", "bodyText": "Fixed in the prior rebase", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363431986", "createdAt": "2020-01-06T18:56:26Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob\n+      - Serialized as a `base64 encoded`_ string\n+\n+        .. code-block:: smithy\n+\n+            structure Struct {\n+                binary: Blob,\n+            }\n+\n+        given a value of ``value`` for ``binary``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <binary>dmFsdWU=</binary>\n+            </Struct>\n+\n+    * - boolean\n+      - Serialized as \"``true``\" or \"``false``\"\n+    * - string\n+      - Serialized as an XML-safe UTF-8 string\n+    * - byte\n+      - Serialized as the string value of the number\n+    * - short\n+      - Serialized as the string value of the number\n+    * - integer\n+      - Serialized as the string value of the number\n+    * - long\n+      - Serialized as the string value of the number\n+    * - float\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - double\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigInteger\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigDecimal\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - timestamp\n+      - Serialized as `RFC 3339`_ date-time value.\n+\n+        .. code-block:: smithy\n+\n+              structure Struct {\n+                  date: Timestamp,\n+              }\n+\n+        given a value of ``1578255206`` for ``date``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <date>2020-01-05T20:13:26Z</date>\n+            </Struct>\n+\n+    * - document\n+      - .. warning::\n+\n+            Document shapes are not recommended for use in XML based protocols.\n+\n+\n+List and set serialization\n+==========================\n+\n+List and set shapes use the same serialization semantics. List and set shapes\n+can be serialized as wrapped lists (the default behavior) or flattened lists.\n+\n+\n+Wrapped list serialization\n+--------------------------\n+\n+A wrapped list or set is serialized in an XML element where each value is\n+serialized in a nested element named ``member``. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyList\n+    }\n+\n+    list MyList {\n+        member: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <member>example1</member>\n+            <member>example2</member>\n+            <member>example3</member>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the member of a list or set to\n+change the nested element name. For example, given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        structure Foo {\n+            values: MyList\n+        }\n+\n+        list MyList {\n+            @xmlName(\"Item\")\n+            member: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#Foo\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"values\": {\n+                            \"target\": \"smithy.example#MyList\"\n+                        }\n+                    }\n+                },\n+                \"smithy.example#MyList\": {\n+                    \"type\": \"list\",\n+                    \"member\": {\n+                        \"target\": \"smithy.api#String\",\n+                        \"traits\": {\n+                            \"smithy.api#xmlName\": \"Item\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <Item>example1</Item>\n+            <Item>example2</Item>\n+            <Item>example3</Item>\n+        </values>\n+    </Foo>\n+\n+\n+Flattened list serialization\n+----------------------------\n+\n+The :ref:`xmlflattened-trait` can be used to unwrap the values of list/set\n+into a containing structure/union. The name of the elements repeated within\n+the structure/union is based on the structure/union member name. For\n+example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        @xmlFlattened\n+        flat: MyList,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Foo>\n+\n+The ``xmlName`` trait applied to the structure/union member is used to change\n+the name of the repeated XML element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        @xmlName(\"Hi\")\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <Hi>example1</Hi>\n+        <Hi>example2</Hi>\n+        <Hi>example3</Hi>\n+    </Choice>\n+\n+The ``xmlName`` trait applied to the member of a list has no effect when\n+serializing a flattened list into a structure/union. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        @xmlName(\"Hi\")\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Choice>\n+\n+\n+Map serialization\n+=================\n+\n+Map shapes can be serialized as wrapped maps (the default behavior) or\n+flattened maps.\n+\n+\n+Wrapped map serialization\n+-------------------------\n+\n+A wrapped map is serialized in an XML element where each value is\n+serialized in a nested element named ``entry`` that contains a nested\n+``key`` and ``value`` element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyMap\n+    }\n+\n+    list MyMap {\n+        key: String,\n+        value: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <entry>\n+                <key>example-key1</key>\n+                <value>example1</value>\n+            </entry>\n+            <entry>\n+                <key>example-key2</key>\n+                <value>example2</value>\n+            </entry>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the key and value members of a map\n+to change the nested element names.  For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyMap\n+    }\n+\n+    list MyMap {\n+        @xmlName(\"Name\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDQ3Mw=="}, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 426}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDQ5OTQ3OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTozNlrOFalrmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTozNlrOFalrmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDY2Nw==", "bodyText": "Mismatched with below using MyStructure.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363424667", "createdAt": "2020-01-06T18:39:36Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -253,33 +897,32 @@ Given the following structure definition,\n             }\n         }\n \n-and the following values provided for ``MyStructure``,\n-\n-::\n-\n-    \"foo\" = \"abc\"\n-    \"bar\" = \"def\"\n-\n-the XML representation of the value would be serialized with the\n-following document:\n+The XML serialization is:\n \n .. code-block:: xml\n \n     <MyStructure>\n-        <Foo>abc</Foo>\n-        <bar>def</bar>\n+        <Foo>example</Foo>\n+        <bar>example</bar>\n     </MyStructure>\n \n-.. note::\n+A namespace prefix can be inserted before the element name. Given the\n+following\n+\n+.. code-block:: smithy\n+\n+    structure AnotherStructure {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 926}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDUwMDE1OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTo1MlrOFalsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODozOTo1MlrOFalsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNDc4Ng==", "bodyText": "Mismatched with example below using baz for with the xmlns attribute.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363424786", "createdAt": "2020-01-06T18:39:52Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -349,177 +994,37 @@ Given the following structure definition,\n             }\n         }\n \n-and the following values provided for ``MyStructure``,\n-\n-::\n-\n-    \"foo\" = \"abc\"\n-    \"bar\" = \"def\"\n-\n-the XML representation of the value would be serialized with the\n-following document:\n+The XML serialization is:\n \n .. code-block:: xml\n \n     <MyStructure xmlns=\"http//foo.com\">\n-        <foo>abc</foo>\n-        <bar>def</bar>\n+        <foo>example</foo>\n+        <bar>example</bar>\n     </MyStructure>\n \n-Given the following definition with a prefix:\n-\n-.. tabs::\n-\n-    .. code-tab:: smithy\n-\n-        @xmlNamespace(uri: \"http://foo.com\", prefix: \"bar\")\n-        structure MyStructure {\n-            foo: String,\n-            @xmlName(\"baz:bar\")\n-            bar: String,\n-        }\n-\n-    .. code-tab:: json\n-\n-        {\n-            \"smithy\": \"0.5.0\",\n-            \"shapes\": {\n-                \"smithy.example#MyStructure\": {\n-                    \"type\": \"structure\",\n-                    \"members\": {\n-                        \"foo\": {\n-                            \"target\": \"smithy.api#String\"\n-                        },\n-                        \"bar\": {\n-                            \"target\": \"smithy.api#String\",\n-                            \"traits\": {\n-                                \"smithy.api#xmlName\": \"baz:bar\"\n-                            }\n-                        }\n-                    },\n-                    \"traits\": {\n-                        \"smithy.api#xmlNamespace\": {\n-                            \"uri\": \"http://foo.com\",\n-                            \"prefix\": \"baz\"\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+Given the following:\n \n-and the following values provided for ``MyStructure``,\n+.. code-block:: smithy\n \n-::\n+    @xmlNamespace(uri: \"http://foo.com\", prefix: \"bar\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 1050}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDUwMTY3OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo0MDozMVrOFaltEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTowMToyNlrOFamQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNTA0MQ==", "bodyText": "The name of the structure shape itself is A, AStruct is the value of the @xmlName trait.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363425041", "createdAt": "2020-01-06T18:40:31Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzMzEyNA==", "bodyText": "Because A is the outermost structure being serialized, the xmlName trait takes effect.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363433124", "createdAt": "2020-01-06T18:59:06Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNTA0MQ=="}, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNDA5OQ==", "bodyText": "I'd read this sentence as referring to the XML serialization of the Smithy structure smithy.example#A.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363434099", "createdAt": "2020-01-06T19:01:26Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNTA0MQ=="}, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDUwNjk2OnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo0Mjo0MVrOFalwnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo0Mjo0MVrOFalwnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNTk0OQ==", "bodyText": "Nit: Should this paragraph use \"list/set\" like the opening paragraph, since \"structure/union\" is preserved as well? The proceeding section uses \"list or set\", which is different as well.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363425949", "createdAt": "2020-01-06T18:42:41Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob\n+      - Serialized as a `base64 encoded`_ string\n+\n+        .. code-block:: smithy\n+\n+            structure Struct {\n+                binary: Blob,\n+            }\n+\n+        given a value of ``value`` for ``binary``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <binary>dmFsdWU=</binary>\n+            </Struct>\n+\n+    * - boolean\n+      - Serialized as \"``true``\" or \"``false``\"\n+    * - string\n+      - Serialized as an XML-safe UTF-8 string\n+    * - byte\n+      - Serialized as the string value of the number\n+    * - short\n+      - Serialized as the string value of the number\n+    * - integer\n+      - Serialized as the string value of the number\n+    * - long\n+      - Serialized as the string value of the number\n+    * - float\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - double\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigInteger\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - bigDecimal\n+      - Serialized as the string value of the number using scientific\n+        notation if an exponent is needed.\n+    * - timestamp\n+      - Serialized as `RFC 3339`_ date-time value.\n+\n+        .. code-block:: smithy\n+\n+              structure Struct {\n+                  date: Timestamp,\n+              }\n+\n+        given a value of ``1578255206`` for ``date``:\n+\n+        .. code-block:: xml\n+\n+            <Struct>\n+                <date>2020-01-05T20:13:26Z</date>\n+            </Struct>\n+\n+    * - document\n+      - .. warning::\n+\n+            Document shapes are not recommended for use in XML based protocols.\n+\n+\n+List and set serialization\n+==========================\n+\n+List and set shapes use the same serialization semantics. List and set shapes\n+can be serialized as wrapped lists (the default behavior) or flattened lists.\n+\n+\n+Wrapped list serialization\n+--------------------------\n+\n+A wrapped list or set is serialized in an XML element where each value is\n+serialized in a nested element named ``member``. For example, given the\n+following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        values: MyList\n+    }\n+\n+    list MyList {\n+        member: String,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <member>example1</member>\n+            <member>example2</member>\n+            <member>example3</member>\n+        </values>\n+    </Foo>\n+\n+The :ref:`xmlname-trait` can be applied to the member of a list or set to\n+change the nested element name. For example, given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        structure Foo {\n+            values: MyList\n+        }\n+\n+        list MyList {\n+            @xmlName(\"Item\")\n+            member: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#Foo\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"values\": {\n+                            \"target\": \"smithy.example#MyList\"\n+                        }\n+                    }\n+                },\n+                \"smithy.example#MyList\": {\n+                    \"type\": \"list\",\n+                    \"member\": {\n+                        \"target\": \"smithy.api#String\",\n+                        \"traits\": {\n+                            \"smithy.api#xmlName\": \"Item\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <values>\n+            <Item>example1</Item>\n+            <Item>example2</Item>\n+            <Item>example3</Item>\n+        </values>\n+    </Foo>\n+\n+\n+Flattened list serialization\n+----------------------------\n+\n+The :ref:`xmlflattened-trait` can be used to unwrap the values of list/set\n+into a containing structure/union. The name of the elements repeated within\n+the structure/union is based on the structure/union member name. For\n+example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure Foo {\n+        @xmlFlattened\n+        flat: MyList,\n+    }\n+\n+The XML serialization of ``Foo`` is:\n+\n+.. code-block:: xml\n+\n+    <Foo>\n+        <flat>example1</flat>\n+        <flat>example2</flat>\n+        <flat>example3</flat>\n+    </Foo>\n+\n+The ``xmlName`` trait applied to the structure/union member is used to change\n+the name of the repeated XML element. For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    union Choice {\n+        @xmlFlattened\n+        @xmlName(\"Hi\")\n+        flat: MySet,\n+    }\n+\n+    set MySet {\n+        member: String\n+    }\n+\n+The XML serialization of ``Choice`` is:\n+\n+.. code-block:: xml\n+\n+    <Choice>\n+        <Hi>example1</Hi>\n+        <Hi>example2</Hi>\n+        <Hi>example3</Hi>\n+    </Choice>\n+\n+The ``xmlName`` trait applied to the member of a list has no effect when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDUxNDkxOnYy", "diffSide": "RIGHT", "path": "docs/source/spec/xml.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo0NTozNlrOFal1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTowMDo0NlrOFamPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNzIzOA==", "bodyText": "We usually code-wrap the types in tables like this.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363427238", "createdAt": "2020-01-06T18:45:36Z", "author": {"login": "kstich"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzMzgzMw==", "bodyText": "I copied this table: https://awslabs.github.io/smithy/spec/core.html#simple-types", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363433833", "createdAt": "2020-01-06T19:00:46Z", "author": {"login": "mtdowling"}, "path": "docs/source/spec/xml.rst", "diffHunk": "@@ -1,26 +1,598 @@\n-==========\n-XML traits\n-==========\n+============\n+XML bindings\n+============\n \n-Protocols that serialize messages using XML SHOULD honor the ``xmlAttribute``,\n-``xmlFlattened``, ``xmlName``, and ``xmlNamespace`` traits when serializing\n-payloads.\n+This document defines how to bind Smithy shapes to XML documents. Smithy\n+defines several traits that are used to influence the serialization of\n+shapes with XML based protocols.\n \n .. contents:: Table of contents\n     :depth: 2\n     :local:\n     :backlinks: none\n \n \n+----------------------\n+Serializing XML shapes\n+----------------------\n+\n+This document provides recommendations on how Smithy structures and\n+shapes within structures SHOULD be serialized with XML based protocols;\n+however, protocols MAY choose to deviate from these recommendations\n+if necessary.\n+\n+\n+Structure and union serialization\n+=================================\n+\n+All XML serialization starts with a structure. The shape name of a structure\n+is used as the outermost XML element name. Members of a structure or union\n+shape are serialized as nested XML elements where the name of the element is\n+the same as the name of the member.\n+\n+For example, given the following:\n+\n+.. code-block:: smithy\n+\n+    structure MyStructure {\n+        foo: String,\n+    }\n+\n+The XML serialization is:\n+\n+.. code-block:: xml\n+\n+    <MyStructure>\n+        <foo>example</foo>\n+    </MyStructure>\n+\n+\n+Custom XML element names\n+------------------------\n+\n+Structure/union member element names can be changed using the\n+:ref:`xmlname-trait`.\n+\n+\n+XML attributes\n+--------------\n+\n+The :ref:`xmlattribute-trait` is used to serialize a structure\n+member as an XML attribute.\n+\n+\n+``xmlName`` on structures\n+-------------------------\n+\n+An ``xmlName`` trait applied to a structure changes the element name of the\n+serialized structure; however, it does not influence the serialization of\n+members that target it. Given the following:\n+\n+.. tabs::\n+\n+    .. code-tab:: smithy\n+\n+        @xmlName(\"AStruct\")\n+        structure A {\n+            b: B,\n+        }\n+\n+        @xmlName(\"BStruct\")\n+        structure B {\n+            hello: String,\n+        }\n+\n+    .. code-tab:: json\n+\n+        {\n+            \"smithy\": \"0.5.0\",\n+            \"shapes\": {\n+                \"smithy.example#A\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"b\": {\n+                            \"target\": \"smithy.example#B\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"AStruct\"\n+                    }\n+                },\n+                \"smithy.example#B\": {\n+                    \"type\": \"structure\",\n+                    \"members\": {\n+                        \"hello\": {\n+                            \"target\": \"smithy.api#String\"\n+                        }\n+                    },\n+                    \"traits\": {\n+                        \"smithy.api#xmlName\": \"BStruct\"\n+                    }\n+                }\n+            }\n+        }\n+\n+The XML serialization of ``AStruct`` is:\n+\n+.. code-block:: xml\n+\n+    <AStruct>\n+        <b>\n+            <hello>value</hello>\n+        </b>\n+    </AStruct>\n+\n+\n+Simple type serialization\n+=========================\n+\n+The following table defines how simple types are serialized in XML documents.\n+\n+.. list-table::\n+    :header-rows: 1\n+    :widths: 10 90\n+\n+    * - Shape\n+      - Serialization\n+    * - blob", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNzIzOA=="}, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDU2MDIwOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/resources/software/amazon/smithy/model/loader/prelude-traits.smithy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTowMjoxOFrOFamR7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTowMzozNlrOFamUHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNDQ3OQ==", "bodyText": "This only applies to top level structures right? So this selector should enforce that.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363434479", "createdAt": "2020-01-06T19:02:18Z", "author": {"login": "JordonPhillips"}, "path": "smithy-model/src/main/resources/software/amazon/smithy/model/loader/prelude-traits.smithy", "diffHunk": "@@ -140,21 +140,19 @@ structure idempotencyToken {}\n @tags([\"diff.error.const\"])\n string jsonName\n \n-/// Moves a serialized object property to an attribute of the enclosing structure.\n+/// Serializes an object property as an XML attribute rather than a nested XML element.\n @trait(selector: \":test(member:of(structure) > :test(boolean, number, string, timestamp))\",\n        conflicts: [\"xmlNamespace\"])\n @tags([\"diff.error.const\"])\n structure xmlAttribute {}\n \n-/// Moves serialized collection members from their collection element to that of\n-/// the collection's container.\n-@trait(selector: \":test(map, collection, member:of(structure) > :test(map, collection))\")\n+/// Unwraps the values of a list, set, or map into the containing structure/union.\n+@trait(selector: \":test(member:of(structure, union) > :each(collection, map))\")\n @tags([\"diff.error.const\"])\n structure xmlFlattened {}\n \n-/// Allows a serialized object property name to differ from a structure member name\n-/// used in the model.\n-@trait\n+/// Changes the serialized element or attribute name of a structure or member.\n+@trait(selector: \":test(structure, member)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNTAzOA==", "bodyText": "Also structures or unions targeted by the httpPayload trait. Since these shapes might also be serialized in event streams, I think it's better to let them be applied and ignored in contexts in which they aren't utilized.", "url": "https://github.com/awslabs/smithy/pull/242#discussion_r363435038", "createdAt": "2020-01-06T19:03:36Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/resources/software/amazon/smithy/model/loader/prelude-traits.smithy", "diffHunk": "@@ -140,21 +140,19 @@ structure idempotencyToken {}\n @tags([\"diff.error.const\"])\n string jsonName\n \n-/// Moves a serialized object property to an attribute of the enclosing structure.\n+/// Serializes an object property as an XML attribute rather than a nested XML element.\n @trait(selector: \":test(member:of(structure) > :test(boolean, number, string, timestamp))\",\n        conflicts: [\"xmlNamespace\"])\n @tags([\"diff.error.const\"])\n structure xmlAttribute {}\n \n-/// Moves serialized collection members from their collection element to that of\n-/// the collection's container.\n-@trait(selector: \":test(map, collection, member:of(structure) > :test(map, collection))\")\n+/// Unwraps the values of a list, set, or map into the containing structure/union.\n+@trait(selector: \":test(member:of(structure, union) > :each(collection, map))\")\n @tags([\"diff.error.const\"])\n structure xmlFlattened {}\n \n-/// Allows a serialized object property name to differ from a structure member name\n-/// used in the model.\n-@trait\n+/// Changes the serialized element or attribute name of a structure or member.\n+@trait(selector: \":test(structure, member)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQzNDQ3OQ=="}, "originalCommit": {"oid": "aacc3ced88268c938f63697aedf15a272ffe269d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3819, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}