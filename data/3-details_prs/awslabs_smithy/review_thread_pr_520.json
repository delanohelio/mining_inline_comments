{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxOTA3MzAz", "number": 520, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxNDowN1rOEU1BpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoyODoyMFrOEVMJ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjc1NzQ4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/IdlModelParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxNDowN1rOG7PiTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxMjo1OFrOG7Qakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzcwOA==", "bodyText": "Couldn't this also be a union or document?", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r464773708", "createdAt": "2020-08-04T03:14:07Z", "author": {"login": "JordonPhillips"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/IdlModelParser.java", "diffHunk": "@@ -763,15 +691,27 @@ private void addTraits(ShapeId id, List<TraitEntry> traits) {\n      * @param isAnnotation Set to true to indicate that the value for the trait was omitted.\n      */\n     private void onDeferredTrait(ShapeId target, String traitName, Node traitValue, boolean isAnnotation) {\n-        onShapeTarget(traitName, traitValue.getSourceLocation(), id -> {\n-            if (isAnnotation) {\n-                visitor.onAnnotationTrait(target, id, traitValue.expectNullNode());\n-            } else {\n-                visitor.onTrait(target, id, traitValue);\n-            }\n+        modelFile.addForwardReference(traitName, (id, typeProvider) -> {\n+            modelFile.onTrait(target, id, coerceTraitValue(id, traitValue, isAnnotation, typeProvider));\n         });\n     }\n \n+    private Node coerceTraitValue(ShapeId traitId, Node value, boolean isAnnotation,\n+            Function<ShapeId, ShapeType> typeProvider) {\n+        if (isAnnotation && value.isNullNode()) {\n+            ShapeType targetType = typeProvider.apply(traitId);\n+            if (targetType != null) {\n+                if (targetType == ShapeType.STRUCTURE || targetType == ShapeType.MAP) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b229a40c3e7b4e2ddaedac545a9bbd78b150e"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODExNA==", "bodyText": "No\u2014 a union requires a value as does a document.", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r464788114", "createdAt": "2020-08-04T04:12:58Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/IdlModelParser.java", "diffHunk": "@@ -763,15 +691,27 @@ private void addTraits(ShapeId id, List<TraitEntry> traits) {\n      * @param isAnnotation Set to true to indicate that the value for the trait was omitted.\n      */\n     private void onDeferredTrait(ShapeId target, String traitName, Node traitValue, boolean isAnnotation) {\n-        onShapeTarget(traitName, traitValue.getSourceLocation(), id -> {\n-            if (isAnnotation) {\n-                visitor.onAnnotationTrait(target, id, traitValue.expectNullNode());\n-            } else {\n-                visitor.onTrait(target, id, traitValue);\n-            }\n+        modelFile.addForwardReference(traitName, (id, typeProvider) -> {\n+            modelFile.onTrait(target, id, coerceTraitValue(id, traitValue, isAnnotation, typeProvider));\n         });\n     }\n \n+    private Node coerceTraitValue(ShapeId traitId, Node value, boolean isAnnotation,\n+            Function<ShapeId, ShapeType> typeProvider) {\n+        if (isAnnotation && value.isNullNode()) {\n+            ShapeType targetType = typeProvider.apply(traitId);\n+            if (targetType != null) {\n+                if (targetType == ShapeType.STRUCTURE || targetType == ShapeType.MAP) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzcwOA=="}, "originalCommit": {"oid": "383b229a40c3e7b4e2ddaedac545a9bbd78b150e"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjgxNTEwOnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/model.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo0OTozNFrOG7QEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDoxNTowMFrOG7QcuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MjM2Nw==", "bodyText": "This doesn't seem right, isn't it an equality check not a merge? Except if they're using apply statements?", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r464782367", "createdAt": "2020-08-04T03:49:34Z", "author": {"login": "JordonPhillips"}, "path": "docs/source/1.0/spec/core/model.rst", "diffHunk": "@@ -149,15 +149,32 @@ together to form a valid semantic model.\n Merging model files\n ===================\n \n-Implementations MUST take the following steps to merge models together to load\n-the semantic model:\n+Implementations MUST take the following steps to merge model files together to\n+form the semantic model:\n+\n+#. Merge the metadata objects of all model files using the steps defined in\n+   :ref:`merging-metadata`.\n+#. Shapes defined in a single model file are added to the semantic model as-is.\n+#. Shapes with the same shape ID defined in multiple model files are merged\n+   using the following rules:\n+\n+   #. All conflicting shapes MUST have the same shape type.\n+   #. Conflicting :ref:`aggregate shapes <aggregate-types>` MUST contain the\n+      same members that target the same shapes.\n+   #. Conflicting :ref:`service shapes <service-types>` MUST contain the same\n+      properties and target the same shapes.\n+   #. The traits of conflicting shapes and the traits of their members are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b229a40c3e7b4e2ddaedac545a9bbd78b150e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4ODY2NQ==", "bodyText": "The traits are merged, but the shape itself isn\u2019t. I\u2019ll try to make this more clear.\nEdit: updated to clarify", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r464788665", "createdAt": "2020-08-04T04:15:00Z", "author": {"login": "mtdowling"}, "path": "docs/source/1.0/spec/core/model.rst", "diffHunk": "@@ -149,15 +149,32 @@ together to form a valid semantic model.\n Merging model files\n ===================\n \n-Implementations MUST take the following steps to merge models together to load\n-the semantic model:\n+Implementations MUST take the following steps to merge model files together to\n+form the semantic model:\n+\n+#. Merge the metadata objects of all model files using the steps defined in\n+   :ref:`merging-metadata`.\n+#. Shapes defined in a single model file are added to the semantic model as-is.\n+#. Shapes with the same shape ID defined in multiple model files are merged\n+   using the following rules:\n+\n+   #. All conflicting shapes MUST have the same shape type.\n+   #. Conflicting :ref:`aggregate shapes <aggregate-types>` MUST contain the\n+      same members that target the same shapes.\n+   #. Conflicting :ref:`service shapes <service-types>` MUST contain the same\n+      properties and target the same shapes.\n+   #. The traits of conflicting shapes and the traits of their members are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MjM2Nw=="}, "originalCommit": {"oid": "383b229a40c3e7b4e2ddaedac545a9bbd78b150e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTkwNjQyOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/TraitContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMjo1MFrOG7thsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTowMjo1MFrOG7thsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2NTA3NQ==", "bodyText": "s/to to/to", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r465265075", "createdAt": "2020-08-04T19:02:50Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/loader/TraitContainer.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.loader;\n+\n+import static java.lang.String.format;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.logging.Logger;\n+import software.amazon.smithy.model.SourceException;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.traits.DynamicTrait;\n+import software.amazon.smithy.model.traits.Trait;\n+import software.amazon.smithy.model.traits.TraitFactory;\n+import software.amazon.smithy.model.validation.Severity;\n+import software.amazon.smithy.model.validation.ValidationEvent;\n+import software.amazon.smithy.model.validation.Validator;\n+\n+/**\n+ * Aggregates, merges, and creates traits.\n+ */\n+public interface TraitContainer {\n+\n+    /** Shared empty, immutable instance. */\n+    TraitContainer EMPTY = new TraitContainer() {\n+        @Override\n+        public Map<ShapeId, Map<ShapeId, Trait>> traits() {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public Map<ShapeId, Trait> getTraitsForShape(ShapeId shape) {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public Map<ShapeId, Map<ShapeId, Trait>> getTraitsAppliedToPrelude() {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public void onTrait(ShapeId target, Trait value) {\n+            throw new UnsupportedOperationException(\"Cannot add trait \" + value.toShapeId() + \" to \" + target);\n+        }\n+\n+        @Override\n+        public void onTrait(ShapeId target, ShapeId traitId, Node value) {\n+            throw new UnsupportedOperationException(\"Cannot add trait \" + traitId + \" to \" + target);\n+        }\n+    };\n+\n+    /**\n+     * @return Gets all traits in the value map.\n+     */\n+    Map<ShapeId, Map<ShapeId, Trait>> traits();\n+\n+    /**\n+     * Gets the traits applied to a shape.\n+     *\n+     * @param shape Shape to get the traits of.\n+     * @return Returns the traits of the shape.\n+     */\n+    Map<ShapeId, Trait> getTraitsForShape(ShapeId shape);\n+\n+    /**\n+     * Gets all traits applied to to the prelude.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdb5d5bf75b47394a740681fa8ea1fb1172c993"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjU0NzA2OnYy", "diffSide": "LEFT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/loader/LoaderVisitorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoyODoyMFrOG7zqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzoyMzoxMVrOG70xog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NTYxMw==", "bodyText": "This test isn't carried over even though the functionality is retained and would be a break if the behavior changed unexpectedly.", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r465365613", "createdAt": "2020-08-04T22:28:20Z", "author": {"login": "kstich"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/loader/LoaderVisitorTest.java", "diffHunk": "@@ -1,209 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.smithy.model.loader;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.not;\n-\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import software.amazon.smithy.model.Model;\n-import software.amazon.smithy.model.SourceException;\n-import software.amazon.smithy.model.node.Node;\n-import software.amazon.smithy.model.selector.Selector;\n-import software.amazon.smithy.model.shapes.MemberShape;\n-import software.amazon.smithy.model.shapes.Shape;\n-import software.amazon.smithy.model.shapes.ShapeId;\n-import software.amazon.smithy.model.shapes.StringShape;\n-import software.amazon.smithy.model.shapes.StructureShape;\n-import software.amazon.smithy.model.traits.DocumentationTrait;\n-import software.amazon.smithy.model.traits.DynamicTrait;\n-import software.amazon.smithy.model.traits.TraitDefinition;\n-import software.amazon.smithy.model.traits.TraitFactory;\n-import software.amazon.smithy.model.validation.ValidationEvent;\n-import software.amazon.smithy.utils.MapUtils;\n-\n-public class LoaderVisitorTest {\n-    private static final TraitFactory FACTORY = TraitFactory.createServiceFactory();\n-\n-    @Test\n-    public void callingOnEndTwiceIsIdempotent() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-\n-        assertThat(visitor.onEnd(), is(visitor.onEnd()));\n-    }\n-\n-    @Test\n-    public void cannotDuplicateTraitDefs() {\n-        Assertions.assertThrows(SourceException.class, () -> {\n-            LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-            StringShape def1 = StringShape.builder()\n-                    .id(\"foo.baz#Bar\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-            StringShape def2 = StringShape.builder()\n-                    .id(\"foo.baz#Bar\")\n-                    .addTrait(TraitDefinition.builder().selector(Selector.parse(\"string\")).build())\n-                    .build();\n-\n-            visitor.onShape(def1);\n-            visitor.onShape(def2);\n-            visitor.onEnd();\n-        });\n-    }\n-\n-    @Test\n-    public void ignoresDuplicateTraitDefsFromPrelude() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-        Shape def1 = StructureShape.builder()\n-                .id(\"smithy.api#deprecated\")\n-                .addTrait(TraitDefinition.builder().build())\n-                .build();\n-        Shape def2 = StructureShape.builder()\n-                .id(\"smithy.api#deprecated\")\n-                .addTrait(TraitDefinition.builder().build())\n-                .build();\n-\n-        visitor.onShape(def1);\n-        visitor.onShape(def2);\n-        List<ValidationEvent> events = visitor.onEnd().getValidationEvents();\n-\n-        assertThat(events, empty());\n-    }\n-\n-    @Test\n-    public void cannotDuplicateNonPreludeTraitDefs() {\n-        Assertions.assertThrows(SourceException.class, () -> {\n-            LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-            Shape def1 = StructureShape.builder()\n-                    .id(\"smithy.example#deprecated\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-            Shape def2 = StructureShape.builder()\n-                    .id(\"smithy.example#deprecated\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-\n-            visitor.onShape(def1);\n-            visitor.onShape(def2);\n-            visitor.onEnd();\n-        });\n-    }\n-\n-    @Test\n-    public void cannotDuplicateTraits() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-        ShapeId id = ShapeId.from(\"foo.bam#Boo\");\n-        visitor.onShape(StringShape.builder().id(id));\n-        visitor.onTrait(id, DocumentationTrait.ID, Node.from(\"abc\"));\n-        visitor.onTrait(id, DocumentationTrait.ID, Node.from(\"def\"));\n-        List<ValidationEvent> events = visitor.onEnd().getValidationEvents();\n-\n-        assertThat(events, not(empty()));\n-    }\n-\n-    @Test\n-    public void createsDynamicTraitWhenTraitFactoryReturnsEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fdb5d5bf75b47394a740681fa8ea1fb1172c993"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM4Mzg0Mg==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/awslabs/smithy/pull/520#discussion_r465383842", "createdAt": "2020-08-04T23:23:11Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/loader/LoaderVisitorTest.java", "diffHunk": "@@ -1,209 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *  http://aws.amazon.com/apache2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package software.amazon.smithy.model.loader;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.empty;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.not;\n-\n-import java.net.URL;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import software.amazon.smithy.model.Model;\n-import software.amazon.smithy.model.SourceException;\n-import software.amazon.smithy.model.node.Node;\n-import software.amazon.smithy.model.selector.Selector;\n-import software.amazon.smithy.model.shapes.MemberShape;\n-import software.amazon.smithy.model.shapes.Shape;\n-import software.amazon.smithy.model.shapes.ShapeId;\n-import software.amazon.smithy.model.shapes.StringShape;\n-import software.amazon.smithy.model.shapes.StructureShape;\n-import software.amazon.smithy.model.traits.DocumentationTrait;\n-import software.amazon.smithy.model.traits.DynamicTrait;\n-import software.amazon.smithy.model.traits.TraitDefinition;\n-import software.amazon.smithy.model.traits.TraitFactory;\n-import software.amazon.smithy.model.validation.ValidationEvent;\n-import software.amazon.smithy.utils.MapUtils;\n-\n-public class LoaderVisitorTest {\n-    private static final TraitFactory FACTORY = TraitFactory.createServiceFactory();\n-\n-    @Test\n-    public void callingOnEndTwiceIsIdempotent() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-\n-        assertThat(visitor.onEnd(), is(visitor.onEnd()));\n-    }\n-\n-    @Test\n-    public void cannotDuplicateTraitDefs() {\n-        Assertions.assertThrows(SourceException.class, () -> {\n-            LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-            StringShape def1 = StringShape.builder()\n-                    .id(\"foo.baz#Bar\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-            StringShape def2 = StringShape.builder()\n-                    .id(\"foo.baz#Bar\")\n-                    .addTrait(TraitDefinition.builder().selector(Selector.parse(\"string\")).build())\n-                    .build();\n-\n-            visitor.onShape(def1);\n-            visitor.onShape(def2);\n-            visitor.onEnd();\n-        });\n-    }\n-\n-    @Test\n-    public void ignoresDuplicateTraitDefsFromPrelude() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-        Shape def1 = StructureShape.builder()\n-                .id(\"smithy.api#deprecated\")\n-                .addTrait(TraitDefinition.builder().build())\n-                .build();\n-        Shape def2 = StructureShape.builder()\n-                .id(\"smithy.api#deprecated\")\n-                .addTrait(TraitDefinition.builder().build())\n-                .build();\n-\n-        visitor.onShape(def1);\n-        visitor.onShape(def2);\n-        List<ValidationEvent> events = visitor.onEnd().getValidationEvents();\n-\n-        assertThat(events, empty());\n-    }\n-\n-    @Test\n-    public void cannotDuplicateNonPreludeTraitDefs() {\n-        Assertions.assertThrows(SourceException.class, () -> {\n-            LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-            Shape def1 = StructureShape.builder()\n-                    .id(\"smithy.example#deprecated\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-            Shape def2 = StructureShape.builder()\n-                    .id(\"smithy.example#deprecated\")\n-                    .addTrait(TraitDefinition.builder().build())\n-                    .build();\n-\n-            visitor.onShape(def1);\n-            visitor.onShape(def2);\n-            visitor.onEnd();\n-        });\n-    }\n-\n-    @Test\n-    public void cannotDuplicateTraits() {\n-        LoaderVisitor visitor = new LoaderVisitor(FACTORY);\n-        ShapeId id = ShapeId.from(\"foo.bam#Boo\");\n-        visitor.onShape(StringShape.builder().id(id));\n-        visitor.onTrait(id, DocumentationTrait.ID, Node.from(\"abc\"));\n-        visitor.onTrait(id, DocumentationTrait.ID, Node.from(\"def\"));\n-        List<ValidationEvent> events = visitor.onEnd().getValidationEvents();\n-\n-        assertThat(events, not(empty()));\n-    }\n-\n-    @Test\n-    public void createsDynamicTraitWhenTraitFactoryReturnsEmpty() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NTYxMw=="}, "originalCommit": {"oid": "3fdb5d5bf75b47394a740681fa8ea1fb1172c993"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3717, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}