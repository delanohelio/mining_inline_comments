{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MzU5MDU3", "number": 474, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1Mzo0OVrOEIfPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDozNjo1MFrOEIhSww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM1OTA3OnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/http-traits.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1Mzo0OVrOGoe8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyOTozNFrOGoh_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMzEyMw==", "bodyText": "Should this support blobs, since @httpHeader does?", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445103123", "createdAt": "2020-06-24T18:53:49Z", "author": {"login": "kstich"}, "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -688,9 +687,11 @@ Trait selector\n     .. code-block:: none\n \n         structure > member\n-        :test(> map > member[id|member=value] > :test(simpleType, collection > member > simpleType))\n+        :test(> map > member[id|member=value] > :test(\n+            boolean, number, string, timestamp,\n+            collection > member > :test(boolean, number, string, timestamp)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49961e58b5741aa63bf3326a5cf9521308ac6564"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1MzA3Mw==", "bodyText": "Blobs aren't supported in headers either, though the spec errantly described how blobs are serialized. Fixing.", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445153073", "createdAt": "2020-06-24T20:29:34Z", "author": {"login": "mtdowling"}, "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -688,9 +687,11 @@ Trait selector\n     .. code-block:: none\n \n         structure > member\n-        :test(> map > member[id|member=value] > :test(simpleType, collection > member > simpleType))\n+        :test(> map > member[id|member=value] > :test(\n+            boolean, number, string, timestamp,\n+            collection > member > :test(boolean, number, string, timestamp)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMzEyMw=="}, "originalCommit": {"oid": "49961e58b5741aa63bf3326a5cf9521308ac6564"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM2NDk3OnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/http-traits.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NToyNVrOGoe_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NToyNVrOGoe_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNDAzNQ==", "bodyText": "This should be reworded a bit for clarity, I think. Some options:\n\n\"non-document simple types\" in both places.\nreplace with \"both for simple types that are not documents\".", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445104035", "createdAt": "2020-06-24T18:55:25Z", "author": {"login": "kstich"}, "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -762,9 +763,11 @@ Summary\n Trait selector\n     .. code-block:: none\n \n-        structure > :test(member > :test(simpleType, collection > member > simpleType))\n+        structure > member\n+        :test(> simpleType:not(document),\n+              > collection > member > simpleType:not(document)))\n \n-    *Structure members that target simple types or lists/sets of simple types*\n+    *Structure members that target simple types or lists/sets of simple types, but not documents*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49961e58b5741aa63bf3326a5cf9521308ac6564"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM3NDY5OnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1ODoyMFrOGofGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1ODoyMFrOGofGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTY3Nw==", "bodyText": "Should be applied to InlineDocumentAsPayload.", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445105677", "createdAt": "2020-06-24T18:58:20Z", "author": {"login": "kstich"}, "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "diffHunk": "@@ -0,0 +1,128 @@\n+// This file defines test cases that serialize inline documents.\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+// Define some shapes shared throughout these test cases.\n+document Document\n+\n+/// This example serializes an inline document as part of the payload.\n+@idempotent\n+@http(uri: \"/InlineDocument\", method: \"PUT\")\n+operation InlineDocument {\n+    input: InlineDocumentInputOutput,\n+    output: InlineDocumentInputOutput\n+}\n+\n+structure InlineDocumentInputOutput {\n+    stringValue: String,\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentInput\",\n+        documentation: \"Serializes inline documents as part of the JSON request payload with no escaping.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocument\",\n+        body: \"\"\"\n+              {\n+                  \"stringValue\": \"string\",\n+                  \"documentValue\": {\n+                      \"foo\": \"bar\"\n+                  }\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([\n+    {\n+        id: \"InlineDocumentOutput\",\n+        documentation: \"Serializes inline documents as part of the JSON response payload with no escaping.\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\"\"\n+            {\n+                \"stringValue\": \"string\",\n+                \"documentValue\": {\n+                    \"foo\": \"bar\"\n+                }\n+            }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+/// This example serializes an inline document as the entire HTTP payload.\n+@idempotent\n+@http(uri: \"/InlineDocumentAsPayload\", method: \"PUT\")\n+operation InlineDocumentAsPayload {\n+    input: InlineDocumentAsPayloadInputOutput,\n+    output: InlineDocumentAsPayloadInputOutput\n+}\n+\n+structure InlineDocumentAsPayloadInputOutput {\n+    @httpPayload\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49961e58b5741aa63bf3326a5cf9521308ac6564"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM3NDg2OnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1ODoyM1rOGofGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1ODoyM1rOGofGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTY5OA==", "bodyText": "Should be applied to InlineDocumentAsPayload.", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445105698", "createdAt": "2020-06-24T18:58:23Z", "author": {"login": "kstich"}, "path": "smithy-aws-protocol-tests/model/restJson1/documents.smithy", "diffHunk": "@@ -0,0 +1,128 @@\n+// This file defines test cases that serialize inline documents.\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+// Define some shapes shared throughout these test cases.\n+document Document\n+\n+/// This example serializes an inline document as part of the payload.\n+@idempotent\n+@http(uri: \"/InlineDocument\", method: \"PUT\")\n+operation InlineDocument {\n+    input: InlineDocumentInputOutput,\n+    output: InlineDocumentInputOutput\n+}\n+\n+structure InlineDocumentInputOutput {\n+    stringValue: String,\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentInput\",\n+        documentation: \"Serializes inline documents as part of the JSON request payload with no escaping.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocument\",\n+        body: \"\"\"\n+              {\n+                  \"stringValue\": \"string\",\n+                  \"documentValue\": {\n+                      \"foo\": \"bar\"\n+                  }\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([\n+    {\n+        id: \"InlineDocumentOutput\",\n+        documentation: \"Serializes inline documents as part of the JSON response payload with no escaping.\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\"\"\n+            {\n+                \"stringValue\": \"string\",\n+                \"documentValue\": {\n+                    \"foo\": \"bar\"\n+                }\n+            }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            stringValue: \"string\",\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+/// This example serializes an inline document as the entire HTTP payload.\n+@idempotent\n+@http(uri: \"/InlineDocumentAsPayload\", method: \"PUT\")\n+operation InlineDocumentAsPayload {\n+    input: InlineDocumentAsPayloadInputOutput,\n+    output: InlineDocumentAsPayloadInputOutput\n+}\n+\n+structure InlineDocumentAsPayloadInputOutput {\n+    @httpPayload\n+    documentValue: Document,\n+}\n+\n+apply InlineDocument @httpRequestTests([\n+    {\n+        id: \"InlineDocumentAsPayloadInput\",\n+        documentation: \"Serializes an inline document as the target of the httpPayload trait.\",\n+        protocol: restJson1,\n+        method: \"PUT\",\n+        uri: \"/InlineDocumentAsPayload\",\n+        body: \"\"\"\n+              {\n+                  \"foo\": \"bar\"\n+              }\"\"\",\n+        bodyMediaType: \"application/json\",\n+        headers: {\"Content-Type\": \"application/json\"},\n+        params: {\n+            documentValue: {\n+                foo: \"bar\"\n+            }\n+        }\n+    }\n+])\n+\n+apply InlineDocument @httpResponseTests([", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49961e58b5741aa63bf3326a5cf9521308ac6564"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY5NTM5OnYy", "diffSide": "RIGHT", "path": "docs/source/1.0/spec/core/http-traits.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDozNjo1MFrOGoiN_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDozNjo1MFrOGoiN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1Njg2MA==", "bodyText": "Missing a \"types\" at the end.", "url": "https://github.com/awslabs/smithy/pull/474#discussion_r445156860", "createdAt": "2020-06-24T20:36:50Z", "author": {"login": "kstich"}, "path": "docs/source/1.0/spec/core/http-traits.rst", "diffHunk": "@@ -762,9 +762,11 @@ Summary\n Trait selector\n     .. code-block:: none\n \n-        structure > :test(member > :test(simpleType, collection > member > simpleType))\n+        structure > member\n+        :test(> simpleType:not(document),\n+              > collection > member > simpleType:not(document)))\n \n-    *Structure members that target simple types or lists/sets of simple types*\n+    *Structure members that target non-document simple types or collections of non-document simple*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86f1fd4ddb13782224b9ceb4fb314c07f7faa90"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3685, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}