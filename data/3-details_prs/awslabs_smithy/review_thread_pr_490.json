{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDM5MDU3", "number": 490, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1MTo0OFrOENb7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNjoyMlrOENcTSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTI0NDgzOnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1MTo0OFrOGwHsWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzozMDowOVrOGwyjVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3NQ==", "bodyText": "This seems wrong because the blob input member is not marked with the httpPayload trait.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453110875", "createdAt": "2020-07-10T22:51:48Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NDUxNg==", "bodyText": "This was unclear to me on the expectation. The other blob shape usages all had @httpPayload, but the examples for @streaming did not include the @httpPayload. I wasn't sure which was the correct way to model these. These build fine, but not sure if that is just a gap in validation.\nhttps://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming  Example for streaming does not specify httpPayload usage, but this i'm guessing could be artifact of no protocol referenced in the examples.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453794516", "createdAt": "2020-07-13T16:59:17Z", "author": {"login": "jasdel"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3NQ=="}, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTY5NA==", "bodyText": "Looks like adding @httpPayload actually fails the build.\nRunning smithy build\n\nERROR: aws.protocoltests.restjson#StreamingBlob (TraitTarget)\n     @ /Users/jasdel/workspace/sdk/smithy/smithy-aws-protocol-tests/model/restJson1/streaming.smithy\n     |\n  93 | @httpPayload\n     |             ^\n     = Trait `httpPayload` cannot be applied to `aws.protocoltests.restjson#StreamingBlob`. This trait may only be applied to shapes that match the following selector: structure > :test(member > :test(string, blob, structure, union, document))\n\n\nERROR: aws.protocoltests.restjson#FiniteStreamingBlob (TraitTarget)\n     @ /Users/jasdel/workspace/sdk/smithy/smithy-aws-protocol-tests/model/restJson1/streaming.smithy\n     |\n 185 | @httpPayload\n     |             ^\n     = Trait `httpPayload` cannot be applied to `aws.protocoltests.restjson#FiniteStreamingBlob`. This trait may only be applied to shapes that match the following selector: structure > :test(member > :test(string, blob, structure, union, document))\n\n\nERROR: aws.protocoltests.restjson#StreamingTextPlainBlob (TraitTarget)\n     @ /Users/jasdel/workspace/sdk/smithy/smithy-aws-protocol-tests/model/restJson1/streaming.smithy\n     |\n 244 | @httpPayload\n     |             ^\n     = Trait `httpPayload` cannot be applied to `aws.protocoltests.restjson#StreamingTextPlainBlob`. This trait may only be applied to shapes that match the following selector: structure > :test(member > :test(string, blob, structure, union, document))", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453809694", "createdAt": "2020-07-13T17:24:34Z", "author": {"login": "jasdel"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3NQ=="}, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMzA3Ng==", "bodyText": "Ugh nm i just don't know how to Smithy. Though the httpPayload trait was on the shape definition, not the member reference.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453813076", "createdAt": "2020-07-13T17:30:09Z", "author": {"login": "jasdel"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMDg3NQ=="}, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTI0NjUzOnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1Mjo0OVrOGwHtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1Mjo0OVrOGwHtUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMTEyMA==", "bodyText": "This needs the @httpPayload trait", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453111120", "createdAt": "2020-07-10T22:52:49Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTMwNTc4OnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNTo1NlrOGwIN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNTo1NlrOGwIN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExOTQ4Nw==", "bodyText": "Requires httpPayload trait", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453119487", "createdAt": "2020-07-10T23:25:56Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,\n+}\n+\n+@streaming\n+blob StreamingBlob\n+\n+/// This examples serializes a streaming blob shape with a required content\n+/// length in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraitsRequireLength\", method: \"POST\")\n+operation StreamingTraitsRequireLength {\n+    input: StreamingTraitsRequireLengthInputOutput,\n+    output: StreamingTraitsRequireLengthInputOutput\n+}\n+\n+apply StreamingTraitsRequireLength @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraitsRequireLength @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsRequireLengthInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: FiniteStreamingBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTMwNjMyOnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNjoyMlrOGwIOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyNjoyMlrOGwIOVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExOTU3Mw==", "bodyText": "Missing httpPayload trait. I'm surprised this built.", "url": "https://github.com/awslabs/smithy/pull/490#discussion_r453119573", "createdAt": "2020-07-10T23:26:22Z", "author": {"login": "mtdowling"}, "path": "smithy-aws-protocol-tests/model/restJson1/streaming.smithy", "diffHunk": "@@ -0,0 +1,244 @@\n+// This file defines test cases that test HTTP streaming bindings.\n+// See: https://awslabs.github.io/smithy/1.0/spec/core/stream-traits.html?highlight=streaming#streaming-trait\n+\n+$version: \"1.0\"\n+\n+namespace aws.protocoltests.restjson\n+\n+use aws.protocols#restJson1\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// This examples serializes a streaming blob shape in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraits\", method: \"POST\")\n+operation StreamingTraits {\n+    input: StreamingTraitsInputOutput,\n+    output: StreamingTraitsInputOutput\n+}\n+\n+apply StreamingTraits @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraits @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingBlob,\n+}\n+\n+@streaming\n+blob StreamingBlob\n+\n+/// This examples serializes a streaming blob shape with a required content\n+/// length in the request body.\n+///\n+/// In this example, no JSON document is synthesized because the payload is\n+/// not a structure or a union type.\n+@http(uri: \"/StreamingTraitsRequireLength\", method: \"POST\")\n+operation StreamingTraitsRequireLength {\n+    input: StreamingTraitsRequireLengthInputOutput,\n+    output: StreamingTraitsRequireLengthInputOutput\n+}\n+\n+apply StreamingTraitsRequireLength @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraits\",\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    },\n+])\n+\n+apply StreamingTraitsRequireLength @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a required length\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"application/octet-stream\"\n+        },\n+        requireHeaders: [\n+            \"Content-Length\"\n+        ],\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    },\n+    {\n+        id: \"RestJsonStreamingTraitsRequireLengthWithNoBlobBody\",\n+        documentation: \"Serializes an empty blob in the HTTP payload\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"\",\n+        headers: {\n+            \"X-Foo\": \"Foo\"\n+        },\n+        params: {\n+            foo: \"Foo\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsRequireLengthInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: FiniteStreamingBlob,\n+}\n+\n+@streaming\n+@requiresLength\n+blob FiniteStreamingBlob\n+\n+/// This examples serializes a streaming media-typed blob shape in the request body.\n+///\n+/// This examples uses a `@mediaType` trait on the payload to force a custom\n+/// content-type to be serialized.\n+@http(uri: \"/StreamingTraitsWithMediaType\", method: \"POST\")\n+operation StreamingTraitsWithMediaType {\n+    input: StreamingTraitsWithMediaTypeInputOutput,\n+    output: StreamingTraitsWithMediaTypeInputOutput\n+}\n+\n+apply StreamingTraitsWithMediaType @httpRequestTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithMediaTypeWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a content-type\",\n+        protocol: restJson1,\n+        method: \"POST\",\n+        uri: \"/StreamingTraitsWithMediaType\",\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"text/plain\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    }\n+])\n+\n+apply StreamingTraitsWithMediaType @httpResponseTests([\n+    {\n+        id: \"RestJsonStreamingTraitsWithMediaTypeWithBlob\",\n+        documentation: \"Serializes a blob in the HTTP payload with a content-type\",\n+        protocol: restJson1,\n+        code: 200,\n+        body: \"blobby blob blob\",\n+        headers: {\n+            \"X-Foo\": \"Foo\",\n+            \"Content-Type\": \"text/plain\"\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            blob: \"blobby blob blob\"\n+        }\n+    }\n+])\n+\n+structure StreamingTraitsWithMediaTypeInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    blob: StreamingTextPlainBlob,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b8e6b127e38edc75e76b8151246bbbfc9bb8f75"}, "originalPosition": 239}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3694, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}