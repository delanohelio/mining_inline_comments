{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjIzMjQ4", "number": 246, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1NDozOFrODXmusQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1OTowNlrODXm0kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDc4Mzg1OnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/rest-xml/document-maps.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1NDozOFrOFc_X-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1NDozOFrOFc_X-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk0Mjc3Nw==", "bodyText": "Closing tags for </myMap> should be </KVP> for both traits (below) applied to this operation.", "url": "https://github.com/awslabs/smithy/pull/246#discussion_r365942777", "createdAt": "2020-01-13T17:54:38Z", "author": {"login": "kstich"}, "path": "smithy-aws-protocol-tests/model/rest-xml/document-maps.smithy", "diffHunk": "@@ -0,0 +1,356 @@\n+// This file defines test cases that serialize maps in XML payloads.\n+\n+$version: \"0.5.0\"\n+\n+namespace aws.protocols.tests.restxml\n+\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+/// The example tests basic map serialization.\n+@http(uri: \"/XmlMaps\", method: \"POST\")\n+operation XmlMaps(XmlMapsInputOutput) -> XmlMapsInputOutput\n+\n+apply XmlMaps @httpRequestTests([\n+    {\n+        id: \"XmlMaps\",\n+        description: \"Serializes XML maps\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlMaps\",\n+        body: \"\"\"\n+              <XmlMapsInputOutput>\n+                  <myMap>\n+                      <entry>\n+                          <key>foo</key>\n+                          <value>\n+                              <hi>there</hi>\n+                          </value>\n+                      </entry>\n+                      <entry>\n+                          <key>baz</key>\n+                          <value>\n+                              <hi>bye</hi>\n+                          </value>\n+                      </entry>\n+                  </myMap>\n+              </XmlMapsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: {\n+                    hi: \"there\"\n+                },\n+                baz: {\n+                    hi: \"bye\"\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+apply XmlMaps @httpResponseTests([\n+    {\n+        id: \"XmlMaps\",\n+        description: \"Serializes XML maps\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlMapsInputOutput>\n+                  <myMap>\n+                      <entry>\n+                          <key>foo</key>\n+                          <value>\n+                              <hi>there</hi>\n+                          </value>\n+                      </entry>\n+                      <entry>\n+                          <key>baz</key>\n+                          <value>\n+                              <hi>bye</hi>\n+                          </value>\n+                      </entry>\n+                  </myMap>\n+              </XmlMapsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: {\n+                    hi: \"there\"\n+                },\n+                baz: {\n+                    hi: \"bye\"\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+structure XmlMapsInputOutput {\n+    myMap: XmlMapsInputOutputMap,\n+}\n+\n+map XmlMapsInputOutputMap {\n+    key: String,\n+    value: GreetingStruct\n+}\n+\n+structure GreetingStruct {\n+    hi: String\n+}\n+\n+// This example tests maps with @xmlName on members.\n+@http(uri: \"/XmlMapsXmlName\", method: \"POST\")\n+operation XmlMapsXmlName(XmlMapsXmlNameInputOutput) -> XmlMapsXmlNameInputOutput\n+\n+apply XmlMapsXmlName @httpRequestTests([\n+    {\n+        id: \"XmlMapsXmlName\",\n+        description: \"Serializes XML maps that have xmlName on members\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlMapsXmlName\",\n+        body: \"\"\"\n+              <XmlMapsXmlNameInputOutput>\n+                  <myMap>\n+                      <entry>\n+                          <Name>foo</Name>\n+                          <Setting>\n+                              <hi>there</hi>\n+                          </Setting>\n+                      </entry>\n+                      <entry>\n+                          <Name>baz</Name>\n+                          <Setting>\n+                              <hi>bye</hi>\n+                          </Setting>\n+                      </entry>\n+                  </myMap>\n+              </XmlMapsXmlNameInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: {\n+                    hi: \"there\"\n+                },\n+                baz: {\n+                    hi: \"bye\"\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+apply XmlMapsXmlName @httpResponseTests([\n+    {\n+        id: \"XmlMapsXmlName\",\n+        description: \"Serializes XML lists\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlMapsXmlNameInputOutput>\n+                  <myMap>\n+                      <entry>\n+                          <Name>foo</Name>\n+                          <Setting>\n+                              <hi>there</hi>\n+                          </Setting>\n+                      </entry>\n+                      <entry>\n+                          <Name>baz</Name>\n+                          <Setting>\n+                              <hi>bye</hi>\n+                          </Setting>\n+                      </entry>\n+                  </myMap>\n+              </XmlMapsXmlNameInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: {\n+                    hi: \"there\"\n+                },\n+                baz: {\n+                    hi: \"bye\"\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+structure XmlMapsXmlNameInputOutput {\n+    myMap: XmlMapsXmlNameInputOutputMap,\n+}\n+\n+map XmlMapsXmlNameInputOutputMap {\n+    @xmlName(\"Attribute\")\n+    key: String,\n+\n+    @xmlName(\"Setting\")\n+    value: GreetingStruct\n+}\n+\n+/// Flattened maps\n+@http(uri: \"/FlattenedXmlMap\", method: \"POST\")\n+operation FlattenedXmlMap(FlattenedXmlMapInputOutput) -> FlattenedXmlMapInputOutput\n+\n+apply FlattenedXmlMap @httpRequestTests([\n+    {\n+        id: \"FlattenedXmlMap\",\n+        description: \"Serializes flattened XML maps in requests\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/FlattenedXmlMap\",\n+        body: \"\"\"\n+              <FlattenedXmlMapInputOutput>\n+                  <myMap>\n+                      <key>foo</key>\n+                      <value>Foo</value>\n+                  </myMap>\n+                  <myMap>\n+                      <key>baz</key>\n+                      <value>Baz</value>\n+                  </myMap>\n+              </FlattenedXmlMapInputOutput>\"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: \"Foo\",\n+                baz: \"Baz\"\n+            }\n+        }\n+    }\n+])\n+\n+apply FlattenedXmlMap @httpResponseTests([\n+    {\n+        id: \"FlattenedXmlMap\",\n+        description: \"Serializes flattened XML maps in responses\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <FlattenedXmlMapInputOutput>\n+                  <myMap>\n+                      <key>foo</key>\n+                      <value>Foo</value>\n+                  </myMap>\n+                  <myMap>\n+                      <key>baz</key>\n+                      <value>Baz</value>\n+                  </myMap>\n+              </FlattenedXmlMapInputOutput>\"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            myMap: {\n+                foo: \"Foo\",\n+                baz: \"Baz\"\n+            }\n+        }\n+    }\n+])\n+\n+structure FlattenedXmlMapInputOutput {\n+    @xmlFlattened\n+    myMap: FooEnumMap,\n+}\n+\n+/// Flattened maps with @xmlName\n+@http(uri: \"/FlattenedXmlMapWithXmlName\", method: \"POST\")\n+operation FlattenedXmlMapWithXmlName(FlattenedXmlMapWithXmlNameInputOutput) -> FlattenedXmlMapWithXmlNameInputOutput", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b996c18484e8ca703400073414b12b6d44145a"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDc5ODkxOnYy", "diffSide": "RIGHT", "path": "smithy-aws-protocol-tests/model/rest-xml/document-structs.smithy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1OTowNlrOFc_g1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzo1OTowNlrOFc_g1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk0NTA0NQ==", "bodyText": "Should be \"POST\" like the @http annotation.", "url": "https://github.com/awslabs/smithy/pull/246#discussion_r365945045", "createdAt": "2020-01-13T17:59:06Z", "author": {"login": "kstich"}, "path": "smithy-aws-protocol-tests/model/rest-xml/document-structs.smithy", "diffHunk": "@@ -0,0 +1,645 @@\n+// This file defines test cases that serialize synthesized XML documents\n+// in the payload of HTTP requests and responses.\n+\n+$version: \"0.5.0\"\n+\n+namespace aws.protocols.tests.restxml\n+\n+use smithy.test#httpRequestTests\n+use smithy.test#httpResponseTests\n+\n+// This example serializes simple scalar types in the top level XML document.\n+// Note that headers are not serialized in the payload.\n+@idempotent\n+@http(uri: \"/SimpleScalarProperties\", method: \"PUT\")\n+operation SimpleScalarProperties(SimpleScalarPropertiesInputOutput) -> SimpleScalarPropertiesInputOutput\n+\n+apply SimpleScalarProperties @httpRequestTests([\n+    {\n+        id: \"SimpleScalarProperties\",\n+        description: \"Serializes simple scalar properties\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"PUT\",\n+        uri: \"/SimpleScalarProperties\",\n+        body: \"\"\"\n+              <SimpleScalarPropertiesInputOutput>\n+                  <stringValue>string</stringValue>\n+                  <trueBooleanValue>true</trueBooleanValue>\n+                  <falseBooleanValue>false</falseBooleanValue>\n+                  <byteValue>1</byteValue>\n+                  <shortValue>2</shortValue>\n+                  <integerValue>3</integerValue>\n+                  <longValue>4</longValue>\n+                  <floatValue>5.5</floatValue>\n+                  <DoubleDribble>6.5</DoubleDribble>\n+              </SimpleScalarPropertiesInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\",\n+            \"X-Foo\": \"Foo\",\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            stringValue: \"string\",\n+            trueBooleanValue: true,\n+            falseBooleanValue: false,\n+            byteValue: 1,\n+            shortValue: 2,\n+            integerValue: 3,\n+            longValue: 4,\n+            floatValue: 5.5,\n+            doubleValue: 6.5,\n+        }\n+    }\n+])\n+\n+apply SimpleScalarProperties @httpResponseTests([\n+    {\n+        id: \"SimpleScalarProperties\",\n+        description: \"Serializes simple scalar properties\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <SimpleScalarPropertiesInputOutput>\n+                  <stringValue>string</stringValue>\n+                  <trueBooleanValue>true</trueBooleanValue>\n+                  <falseBooleanValue>false</falseBooleanValue>\n+                  <byteValue>1</byteValue>\n+                  <shortValue>2</shortValue>\n+                  <integerValue>3</integerValue>\n+                  <longValue>4</longValue>\n+                  <floatValue>5.5</floatValue>\n+                  <DoubleDribble>6.5</DoubleDribble>\n+              </SimpleScalarPropertiesInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\",\n+            \"X-Foo\": \"Foo\",\n+        },\n+        params: {\n+            foo: \"Foo\",\n+            stringValue: \"string\",\n+            trueBooleanValue: true,\n+            falseBooleanValue: false,\n+            byteValue: 1,\n+            shortValue: 2,\n+            integerValue: 3,\n+            longValue: 4,\n+            floatValue: 5.5,\n+            doubleValue: 6.5,\n+        }\n+    }\n+])\n+\n+structure SimpleScalarPropertiesInputOutput {\n+    @httpHeader(\"X-Foo\")\n+    foo: String,\n+\n+    stringValue: String,\n+    trueBooleanValue: Boolean,\n+    falseBooleanValue: Boolean,\n+    byteValue: Byte,\n+    shortValue: Short,\n+    integerValue: Integer,\n+    longValue: Long,\n+    floatValue: Float,\n+\n+    @xmlName(\"DoubleDribble\")\n+    doubleValue: Double,\n+}\n+\n+/// Blobs are base64 encoded\n+@http(uri: \"/XmlBlobs\", method: \"POST\")\n+operation XmlBlobs(XmlBlobsInputOutput) -> XmlBlobsInputOutput\n+\n+apply XmlBlobs @httpRequestTests([\n+    {\n+        id: \"XmlBlobs\",\n+        description: \"Blobs are base64 encoded\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlBlobs\",\n+        body: \"\"\"\n+              <XmlBlobsInputOutput>\n+                  <data>dmFsdWU=</data>\n+              </XmlBlobsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            data: \"value\"\n+        }\n+    }\n+])\n+\n+apply XmlBlobs @httpResponseTests([\n+    {\n+        id: \"XmlBlobs\",\n+        description: \"Blobs are base64 encoded\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlBlobsInputOutput>\n+                  <data>dmFsdWU=</data>\n+              </XmlBlobsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            data: \"value\"\n+        }\n+    }\n+])\n+\n+structure XmlBlobsInputOutput {\n+    data: Blob\n+}\n+\n+/// This tests how timestamps are serialized, including using the\n+/// default format of date-time and various @timestampFormat trait\n+/// values.\n+@http(uri: \"/XmlTimestamps\", method: \"POST\")\n+operation XmlTimestamps(XmlTimestampsInputOutput) -> XmlTimestampsInputOutput\n+\n+apply XmlTimestamps @httpRequestTests([\n+    {\n+        id: \"XmlTimestamps\",\n+        description: \"Tests how normal timestamps are serialized\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlTimestamps\",\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <normal>2014-04-29T18:30:38Z</normal>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            normal: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithDateTimeFormat\",\n+        description: \"Ensures that the timestampFormat of date-time works like normal timestamps\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlTimestamps\",\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <dateTime>2014-04-29T18:30:38Z</dateTime>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            dateTime: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithEpochSecondsFormat\",\n+        description: \"Ensures that the timestampFormat of epoch-seconds works\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlTimestamps\",\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <epochSeconds>1398796238</epochSeconds>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            epochSeconds: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithHttpDateFormat\",\n+        description: \"Ensures that the timestampFormat of http-date works\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"POST\",\n+        uri: \"/XmlTimestamps\",\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            httpDate: 1398796238\n+        }\n+    },\n+])\n+\n+apply XmlTimestamps @httpResponseTests([\n+    {\n+        id: \"XmlTimestamps\",\n+        description: \"Tests how normal timestamps are serialized\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <normal>2014-04-29T18:30:38Z</normal>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            normal: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithDateTimeFormat\",\n+        description: \"Ensures that the timestampFormat of date-time works like normal timestamps\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <dateTime>2014-04-29T18:30:38Z</dateTime>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            dateTime: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithEpochSecondsFormat\",\n+        description: \"Ensures that the timestampFormat of epoch-seconds works\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <epochSeconds>1398796238</epochSeconds>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            epochSeconds: 1398796238\n+        }\n+    },\n+    {\n+        id: \"XmlTimestampsWithHttpDateFormat\",\n+        description: \"Ensures that the timestampFormat of http-date works\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlTimestampsInputOutput>\n+                  <httpDate>Tue, 29 Apr 2014 18:30:38 GMT</httpDate>\n+              </XmlTimestampsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            httpDate: 1398796238\n+        }\n+    },\n+])\n+\n+structure XmlTimestampsInputOutput {\n+    normal: Timestamp,\n+\n+    @timestampFormat(\"date-time\")\n+    dateTime: Timestamp,\n+\n+    @timestampFormat(\"epoch-seconds\")\n+    epochSeconds: Timestamp,\n+\n+    @timestampFormat(\"http-date\")\n+    httpDate: Timestamp,\n+}\n+\n+/// This example serializes enums as top level properties, in lists, sets, and maps.\n+@idempotent\n+@http(uri: \"/XmlEnums\", method: \"PUT\")\n+operation XmlEnums(XmlEnumsInputOutput) -> XmlEnumsInputOutput\n+\n+apply XmlEnums @httpRequestTests([\n+    {\n+        id: \"XmlEnums\",\n+        description: \"Serializes simple scalar properties\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"PUT\",\n+        uri: \"/XmlEnums\",\n+        body: \"\"\"\n+              <XmlEnumsInputOutput>\n+                  <fooEnum1>Foo</fooEnum1>\n+                  <fooEnum2>0</fooEnum2>\n+                  <fooEnum3>1</fooEnum3>\n+                  <fooEnumList>\n+                      <member>Foo</member>\n+                      <member>0</member>\n+                  </fooEnumList>\n+                  <fooEnumSet>\n+                      <member>Foo</member>\n+                      <member>0</member>\n+                  </fooEnumSet>\n+                  <fooEnumMap>\n+                      <entry>\n+                          <key>hi</key>\n+                          <value>Foo</value>\n+                      </entry>\n+                      <entry>\n+                          <key>zero</key>\n+                          <value>0</value>\n+                      </entry>\n+                  </fooEnumMap>\n+              </XmlEnumsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            fooEnum1: \"Foo\",\n+            fooEnum2: \"0\",\n+            fooEnum3: \"1\",\n+            fooEnumList: [\"Foo\", \"0\"],\n+            fooEnumSet: [\"Foo\", \"0\"],\n+            fooEnumMap: {\n+                \"hi\": \"Foo\",\n+                \"zero\": \"0\"\n+            }\n+        }\n+    }\n+])\n+\n+apply XmlEnums @httpResponseTests([\n+    {\n+        id: \"XmlEnums\",\n+        description: \"Serializes simple scalar properties\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <XmlEnumsInputOutput>\n+                  <fooEnum1>Foo</fooEnum1>\n+                  <fooEnum2>0</fooEnum2>\n+                  <fooEnum3>1</fooEnum3>\n+                  <fooEnumList>\n+                      <member>Foo</member>\n+                      <member>0</member>\n+                  </fooEnumList>\n+                  <fooEnumSet>\n+                      <member>Foo</member>\n+                      <member>0</member>\n+                  </fooEnumSet>\n+                  <fooEnumMap>\n+                      <entry>\n+                          <key>hi</key>\n+                          <value>Foo</value>\n+                      </entry>\n+                      <entry>\n+                          <key>zero</key>\n+                          <value>0</value>\n+                      </entry>\n+                  </fooEnumMap>\n+              </XmlEnumsInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            fooEnum1: \"Foo\",\n+            fooEnum2: \"0\",\n+            fooEnum3: \"1\",\n+            fooEnumList: [\"Foo\", \"0\"],\n+            fooEnumSet: [\"Foo\", \"0\"],\n+            fooEnumMap: {\n+                \"hi\": \"Foo\",\n+                \"zero\": \"0\"\n+            }\n+        }\n+    }\n+])\n+\n+structure XmlEnumsInputOutput {\n+    fooEnum1: FooEnum,\n+    fooEnum2: FooEnum,\n+    fooEnum3: FooEnum,\n+    fooEnumList: FooEnumList,\n+    fooEnumSet: FooEnumSet,\n+    fooEnumMap: FooEnumMap,\n+}\n+\n+/// Recursive shapes\n+@idempotent\n+@http(uri: \"/RecursiveShapes\", method: \"PUT\")\n+operation RecursiveShapes(RecursiveShapesInputOutput) -> RecursiveShapesInputOutput\n+\n+apply RecursiveShapes @httpRequestTests([\n+    {\n+        id: \"RecursiveShapes\",\n+        description: \"Serializes recursive structures\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"PUT\",\n+        uri: \"/XmlEnums\",\n+        body: \"\"\"\n+              <RecursiveShapesInputOutput>\n+                  <nested>\n+                      <foo>Foo1</foo>\n+                      <nested>\n+                          <bar>Bar1</bar>\n+                          <recursiveMember>\n+                              <foo>Foo2</foo>\n+                              <nested>\n+                                  <bar>Bar2</bar>\n+                              </nested>\n+                          </recursiveMember>\n+                      </nested>\n+                  </nested>\n+              </RecursiveShapesInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            nested: {\n+                foo: \"Foo1\",\n+                nested: {\n+                    bar: \"Bar1\",\n+                    recursiveMember: {\n+                        foo: \"Foo2\",\n+                        nested: {\n+                            bar: \"Bar2\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+apply RecursiveShapes @httpResponseTests([\n+    {\n+        id: \"RecursiveShapes\",\n+        description: \"Serializes recursive structures\",\n+        protocol: \"aws.rest-xml\",\n+        code: 200,\n+        body: \"\"\"\n+              <RecursiveShapesInputOutput>\n+                  <nested>\n+                      <foo>Foo1</foo>\n+                      <nested>\n+                          <bar>Bar1</bar>\n+                          <recursiveMember>\n+                              <foo>Foo2</foo>\n+                              <nested>\n+                                  <bar>Bar2</bar>\n+                              </nested>\n+                          </recursiveMember>\n+                      </nested>\n+                  </nested>\n+              </RecursiveShapesInputOutput>\n+              \"\"\",\n+        bodyMediaType: \"application/xml\",\n+        headers: {\n+            \"Content-Type\": \"application/xml\"\n+        },\n+        params: {\n+            nested: {\n+                foo: \"Foo1\",\n+                nested: {\n+                    bar: \"Bar1\",\n+                    recursiveMember: {\n+                        foo: \"Foo2\",\n+                        nested: {\n+                            bar: \"Bar2\"\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+])\n+\n+structure RecursiveShapesInputOutput {\n+    nested: RecursiveShapesInputOutputNested1\n+}\n+\n+structure RecursiveShapesInputOutputNested1 {\n+    foo: String,\n+    nested: RecursiveShapesInputOutputNested2\n+}\n+\n+structure RecursiveShapesInputOutputNested2 {\n+    bar: String,\n+    recursiveMember: RecursiveShapesInputOutputNested1,\n+}\n+\n+// XML namespace\n+@http(uri: \"/XmlNamespaces\", method: \"POST\")\n+operation XmlNamespaces(XmlNamespacesInputOutput) -> XmlNamespacesInputOutput\n+\n+apply XmlNamespaces @httpRequestTests([\n+    {\n+        id: \"XmlNamespaces\",\n+        description: \"Serializes XML namespaces\",\n+        protocol: \"aws.rest-xml\",\n+        method: \"PUT\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64b996c18484e8ca703400073414b12b6d44145a"}, "originalPosition": 565}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3821, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}