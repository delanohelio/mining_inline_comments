{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDQ0Njgz", "number": 318, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMToyOVrODo1HgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyMDoxOVrODqjzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTM5OTA0OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMToyOVrOF3n5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMToyOVrOF3n5-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTgxNw==", "bodyText": "If you're going to mutate this map, then you need to copy it first in the constructor in case the map you were provided is unmodifiable.\nCan you add a comment in code to say what this is doing?", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393869817", "createdAt": "2020-03-17T18:01:29Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = renamed;\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTM5OTkwOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTo0MVrOF3n6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTo0MVrOF3n6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTk1MQ==", "bodyText": "nit: extra blank line", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393869951", "createdAt": "2020-03-17T18:01:41Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = renamed;\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQwMDQxOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTo0OVrOF3n61Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMTo0OVrOF3n61Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MDAzNw==", "bodyText": "nit: extra blank line", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393870037", "createdAt": "2020-03-17T18:01:49Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQwMTczOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMjowOFrOF3n7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMjowOFrOF3n7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MDI0OA==", "bodyText": "nit: add opening <p> tags for each newline after the first.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393870248", "createdAt": "2020-03-17T18:02:08Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQwMzE2OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMjozNFrOF3n8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowMjozNFrOF3n8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MDQ5OQ==", "bodyText": "nit: add <p> tags for each newline/paragraph after the first one", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393870499", "createdAt": "2020-03-17T18:02:34Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "diffHunk": "@@ -132,6 +134,21 @@ public Model removeShapesIf(Model model, Predicate<Shape> predicate) {\n         return filterShapes(model, FunctionalUtils.not(predicate));\n     }\n \n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  This transformer ensures that when an aggregate shape is renamed, all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQxMDg2OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNDozNFrOF3oBhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNDozNFrOF3oBhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MTc0OQ==", "bodyText": "Would love to see a comment to outline what's about to happen. \"This transformer first converts the model to a Node using the JSON AST format. This approach was chosen because X.\"", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393871749", "createdAt": "2020-03-17T18:04:34Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = renamed;\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        Set<String> toRename = renamed.keySet().stream().map(ShapeId::toString).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQxNDk4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNTo1MFrOF3oEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNTo1MFrOF3oEfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjUxMQ==", "bodyText": "Using a ModelAssembler really needs the ability to specify a custom classloader (for loading things like traits).... or maybe we use a Supplier that creates ModelAssemblers. We did a similar thing in smithy-build. That should probably be an optional argument to this class and an overload in the ModelTransformer.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393872511", "createdAt": "2020-03-17T18:05:50Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = renamed;\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        Set<String> toRename = renamed.keySet().stream().map(ShapeId::toString).collect(Collectors.toSet());\n+\n+        ModelSerializer serializer = ModelSerializer.builder().build();\n+        ObjectNode node = serializer.serialize(model);\n+\n+        return Model.assembler()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQxNzYyOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNjozNFrOF3oGHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNjozNFrOF3oGHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjkyNw==", "bodyText": "nit: put each \".\" on a new line to make this easier to read", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393872927", "createdAt": "2020-03-17T18:06:34Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  Member shapes are updated when their containing shape is updated.\n+ *\n+ *  Trait references to ShapeId values are also updated.\n+ */\n+\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = renamed;\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        Set<String> toRename = renamed.keySet().stream().map(ShapeId::toString).collect(Collectors.toSet());\n+\n+        ModelSerializer serializer = ModelSerializer.builder().build();\n+        ObjectNode node = serializer.serialize(model);\n+\n+        return Model.assembler()\n+                .addDocumentNode(node.accept(new RenameShapeVisitor(toRename, renamed)))\n+                .assemble()\n+                .unwrap();\n+    }\n+\n+    private static final class RenameShapeVisitor extends NodeVisitor.Default<Node> {\n+\n+        private final Set<String> toRename;\n+        private final Map<ShapeId, ShapeId> shapeMapping;\n+\n+        RenameShapeVisitor(Set<String> toRename, Map<ShapeId, ShapeId> shapeMapping) {\n+            this.toRename = toRename;\n+            this.shapeMapping = shapeMapping;\n+        }\n+\n+        @Override\n+        protected Node getDefault(Node node) {\n+            return node;\n+        }\n+\n+        @Override\n+        public Node arrayNode(ArrayNode node) {\n+            return node.getElements().stream().map(element -> element.accept(this)).collect(ArrayNode.collect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQyNTY3OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowODo1M1rOF3oLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowODo1M1rOF3oLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDI4Nw==", "bodyText": "nit: put a newline between test setup and test assertions", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393874287", "createdAt": "2020-03-17T18:08:53Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.Trait;\n+\n+public class RenameShapesTest {\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfGivenEmptyRenameMapping() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape fooTarget = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(fooTarget)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<ShapeId, ShapeId>();\n+        Model result = transformer.renameShapes(model, renamed);\n+        assertThat(result.shapes().count(), Matchers.equalTo(1L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQyODAxOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowOToyOVrOF3oM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowOToyOVrOF3oM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NDY1OQ==", "bodyText": "nit: You don't need to specify the type parameters on the right hand side of this statement.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393874659", "createdAt": "2020-03-17T18:09:29Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.Trait;\n+\n+public class RenameShapesTest {\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfGivenEmptyRenameMapping() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape fooTarget = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(fooTarget)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<ShapeId, ShapeId>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQzMDg1OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMDoxM1rOF3oOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMDoxM1rOF3oOrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTExOA==", "bodyText": "nit: I would avoid using esoteric map features like this for readability. Just create a map, then put things in it on separate lines. It's actually fewer lines and more clear that way.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393875118", "createdAt": "2020-03-17T18:10:13Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.Trait;\n+\n+public class RenameShapesTest {\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfGivenEmptyRenameMapping() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape fooTarget = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(fooTarget)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<ShapeId, ShapeId>();\n+        Model result = transformer.renameShapes(model, renamed);\n+        assertThat(result.shapes().count(), Matchers.equalTo(1L));\n+        assertThat(result.getShape(stringId).get(), Matchers.is(fooTarget));\n+    }\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfToAndFromAreEqual() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape target = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(target)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<ShapeId, ShapeId>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQzNTc0OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/resources/software/amazon/smithy/model/transform/rename-shape-test-model.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODoxMTozNFrOF3oRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxNzo0NVrOF6YdRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTg5OQ==", "bodyText": "For this integration test, I'd like to see metadata getting renamed (e.g., a suppression) and tests for virtually every kind of shape and reference -- structures, lists, maps, sets, unions, services, operations, etc.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r393875899", "createdAt": "2020-03-17T18:11:34Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/resources/software/amazon/smithy/model/transform/rename-shape-test-model.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MjQzOA==", "bodyText": "It looks like this is missing validation for updating some relationships:\n\nservice -> operation\nservice -> resource\nresource -> identifier\nresource -> operation", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r396762438", "createdAt": "2020-03-23T21:17:45Z", "author": {"login": "kstich"}, "path": "smithy-model/src/test/resources/software/amazon/smithy/model/transform/rename-shape-test-model.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3NTg5OQ=="}, "originalCommit": {"oid": "179b75f83448da3b2db535d49de78fdea7243656"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyMzQzOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MDoyNVrOF329iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MDoyNVrOF329iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjQ4OQ==", "bodyText": "Nit: this kind of setup typically would go in the constructor, but given the other suggestion to just require that one is passed in to the class, this can go away.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r394116489", "createdAt": "2020-03-18T05:40:25Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.loader.ModelAssembler;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  <p>Member shapes are updated when their containing shape is updated.\n+ *\n+ *  <p>Trait references to ShapeId values are also updated.\n+ */\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+    private Supplier<ModelAssembler> modelAssemblerSupplier;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = new HashMap<>(renamed);\n+    }\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed, Supplier<ModelAssembler> modelAssemblerSupplier) {\n+        this.modelAssemblerSupplier = modelAssemblerSupplier;\n+        this.renamed = new HashMap<>(renamed);\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+        // Remove any no-op pairs to avoid renaming shapes unnecessarily.\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        // Creates a set that will be used for checking if a string value needs to be renamed or not.\n+        Set<String> toRename = renamed.keySet().stream().map(ShapeId::toString).collect(Collectors.toSet());\n+\n+        // This transformer converts the model into an ObjectNode. This approach was chosen because the\n+        // JSON AST format includes fully qualified shape ID values, making it possible rename shapes across\n+        // the model by only needing to compare and replace only StringNode values.\n+        ModelSerializer serializer = ModelSerializer.builder().build();\n+        ObjectNode node = serializer.serialize(model);\n+\n+        Supplier<ModelAssembler> supplier = this.modelAssemblerSupplier != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ba7df4ed77211320065d23d85a8e09c04d7b61"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyNDUzOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MTowOVrOF32-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MTowOVrOF32-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjY1Ng==", "bodyText": "Nit: for readability, you could assign the rewritten node to a variable then pass that variable into the addDocumentNode method.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r394116656", "createdAt": "2020-03-18T05:41:09Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.loader.ModelAssembler;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  <p>Member shapes are updated when their containing shape is updated.\n+ *\n+ *  <p>Trait references to ShapeId values are also updated.\n+ */\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+    private Supplier<ModelAssembler> modelAssemblerSupplier;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed) {\n+        this.renamed = new HashMap<>(renamed);\n+    }\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed, Supplier<ModelAssembler> modelAssemblerSupplier) {\n+        this.modelAssemblerSupplier = modelAssemblerSupplier;\n+        this.renamed = new HashMap<>(renamed);\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+        // Remove any no-op pairs to avoid renaming shapes unnecessarily.\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        // Creates a set that will be used for checking if a string value needs to be renamed or not.\n+        Set<String> toRename = renamed.keySet().stream().map(ShapeId::toString).collect(Collectors.toSet());\n+\n+        // This transformer converts the model into an ObjectNode. This approach was chosen because the\n+        // JSON AST format includes fully qualified shape ID values, making it possible rename shapes across\n+        // the model by only needing to compare and replace only StringNode values.\n+        ModelSerializer serializer = ModelSerializer.builder().build();\n+        ObjectNode node = serializer.serialize(model);\n+\n+        Supplier<ModelAssembler> supplier = this.modelAssemblerSupplier != null\n+                ? this.modelAssemblerSupplier\n+                : Model::assembler;\n+        ModelAssembler assembler = supplier.get();\n+\n+        return assembler.addDocumentNode(node.accept(new RenameShapeVisitor(toRename, renamed)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ba7df4ed77211320065d23d85a8e09c04d7b61"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyNjExOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MjoyOVrOF32_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MjoyOVrOF32_RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjkzMw==", "bodyText": "I suggest that you call the overloaded renameShapes method and pass in a default version of the supplier (e.g., Model::assembler).", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r394116933", "createdAt": "2020-03-18T05:42:29Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "diffHunk": "@@ -132,6 +136,38 @@ public Model removeShapesIf(Model model, Predicate<Shape> predicate) {\n         return filterShapes(model, FunctionalUtils.not(predicate));\n     }\n \n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @return Returns the transformed model.base.\n+     */\n+    public Model renameShapes(Model model, Map<ShapeId, ShapeId> renamed) {\n+        return new RenameShapes(renamed).transform(this, model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ba7df4ed77211320065d23d85a8e09c04d7b61"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyNzU4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MzoyNFrOF33AMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MzoyNFrOF33AMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzE2OQ==", "bodyText": "nit: we typically break these long argument lines out onto their own lines:\npublic Model renameShapes(\n        Model model,\n        Map<ShapeId, ShapeId> renamed,\n        Supplier<ModelAssembler> modelAssemblerSupplier\n) {", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r394117169", "createdAt": "2020-03-18T05:43:24Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "diffHunk": "@@ -132,6 +136,38 @@ public Model removeShapesIf(Model model, Predicate<Shape> predicate) {\n         return filterShapes(model, FunctionalUtils.not(predicate));\n     }\n \n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @return Returns the transformed model.base.\n+     */\n+    public Model renameShapes(Model model, Map<ShapeId, ShapeId> renamed) {\n+        return new RenameShapes(renamed).transform(this, model);\n+    }\n+\n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @param modelAssemblerSupplier Supplier used to create {@link ModelAssembler}s in each transform.\n+     * @return Returns the transformed model.base.\n+     */\n+    public Model renameShapes(Model model, Map<ShapeId, ShapeId> renamed,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ba7df4ed77211320065d23d85a8e09c04d7b61"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyODk4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NDoyMlrOF33BCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NDoyMlrOF33BCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzM4Nw==", "bodyText": "nit: usually it's clearer (and consistent with the rest of our codebase) to just use a static import for Matchers.", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r394117387", "createdAt": "2020-03-18T05:44:22Z", "author": {"login": "mtdowling"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.Trait;\n+\n+public class RenameShapesTest {\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfGivenEmptyRenameMapping() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape fooTarget = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(fooTarget)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertThat(result.shapes().count(), Matchers.equalTo(1L));\n+        assertThat(result.getShape(stringId).get(), Matchers.is(fooTarget));\n+    }\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfToAndFromAreEqual() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape target = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(target)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        renamed.put(stringId, stringId );\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertThat(result.shapes().count(), Matchers.equalTo(1L));\n+        assertThat(result.getShape(stringId).get(), Matchers.is(target));\n+    }\n+\n+    @Test\n+    public void returnsModelWithRenamedStringShape() {\n+        ShapeId fromStringId = ShapeId.from(\"ns.foo#String\");\n+        ShapeId containerId = ShapeId.from(\"ns.foo#Container\");\n+        ShapeId keyId = ShapeId.from(\"ns.foo#Container$key\");\n+        ShapeId valueId = ShapeId.from(\"ns.foo#Container$value\");\n+\n+        StringShape target = StringShape.builder().id(fromStringId).build();\n+        MemberShape keyMember = MemberShape.builder().id(keyId).target(fromStringId).build();\n+        MemberShape valueMember = MemberShape.builder().id(valueId).target(fromStringId).build();\n+        MapShape container = MapShape.builder().id(containerId).key(keyMember).value(valueMember).build();\n+        Model model = Model.builder()\n+                .addShapes(target, keyMember, valueMember, container)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+\n+        ShapeId toStringId = ShapeId.from(\"ns.bar#String\");\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        renamed.put(fromStringId, toStringId );\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertThat(result.getShape(toStringId).isPresent(), Matchers.is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0ba7df4ed77211320065d23d85a8e09c04d7b61"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTUxNTMyOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxNDo0MVrOF6YXQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxNDo0MVrOF6YXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MDg5Ng==", "bodyText": "Nit: s/MyNewService/MyNewOperation", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r396760896", "createdAt": "2020-03-23T21:14:41Z", "author": {"login": "kstich"}, "path": "smithy-model/src/test/java/software/amazon/smithy/model/transform/RenameShapesTest.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ListShape;\n+import software.amazon.smithy.model.shapes.MapShape;\n+import software.amazon.smithy.model.shapes.MemberShape;\n+import software.amazon.smithy.model.shapes.SetShape;\n+import software.amazon.smithy.model.shapes.Shape;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.model.shapes.StringShape;\n+import software.amazon.smithy.model.shapes.StructureShape;\n+import software.amazon.smithy.model.shapes.UnionShape;\n+import software.amazon.smithy.model.traits.Trait;\n+\n+public class RenameShapesTest {\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfGivenEmptyRenameMapping() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape fooTarget = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(fooTarget)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertEquals(result.shapes().count(), 1);\n+        assertEquals(result.getShape(stringId).get(), fooTarget);\n+    }\n+\n+    @Test\n+    public void returnsUnmodifiedModelIfToAndFromAreEqual() {\n+        ShapeId stringId = ShapeId.from(\"ns.foo#String\");\n+        StringShape target = StringShape.builder().id(stringId).build();\n+        Model model = Model.builder()\n+                .addShapes(target)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        renamed.put(stringId, stringId );\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertEquals(result.shapes().count(), 1);\n+        assertEquals(result.getShape(stringId).get(), target);\n+    }\n+\n+    @Test\n+    public void returnsModelWithRenamedStringShape() {\n+        ShapeId fromStringId = ShapeId.from(\"ns.foo#String\");\n+        ShapeId containerId = ShapeId.from(\"ns.foo#Container\");\n+        ShapeId keyId = ShapeId.from(\"ns.foo#Container$key\");\n+        ShapeId valueId = ShapeId.from(\"ns.foo#Container$value\");\n+\n+        StringShape target = StringShape.builder().id(fromStringId).build();\n+        MemberShape keyMember = MemberShape.builder().id(keyId).target(fromStringId).build();\n+        MemberShape valueMember = MemberShape.builder().id(valueId).target(fromStringId).build();\n+        MapShape container = MapShape.builder().id(containerId).key(keyMember).value(valueMember).build();\n+        Model model = Model.builder()\n+                .addShapes(target, keyMember, valueMember, container)\n+                .build();\n+        ModelTransformer transformer = ModelTransformer.create();\n+\n+        ShapeId toStringId = ShapeId.from(\"ns.bar#String\");\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        renamed.put(fromStringId, toStringId );\n+        Model result = transformer.renameShapes(model, renamed);\n+\n+        assertTrue(result.getShape(toStringId).isPresent());\n+        assertFalse(result.getShape(fromStringId).isPresent());\n+    }\n+\n+    @Test\n+    public void updatesMetadataReferences() {\n+        Model model = Model.assembler()\n+                .addImport(IntegTest.class.getResource(\"rename-shape-test-model.json\"))\n+                .assemble()\n+                .unwrap();\n+\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        ShapeId fooUnreferenced = ShapeId.from(\"ns.foo#UnreferencedString\");\n+        ShapeId barUnreferenced = ShapeId.from(\"ns.bar#UnreferencedString\");\n+        renamed.put(fooUnreferenced, barUnreferenced);\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Model result = transformer.renameShapes(model, renamed);\n+        ArrayNode suppressions = result.getMetadata().get(\"suppressions\").asArrayNode().get();\n+        ObjectNode suppression = suppressions.getElements().get(0).asObjectNode().get();\n+        ArrayNode suppressionShapes = suppression.getStringMap().get(\"shapes\").expectArrayNode();\n+        StringNode suppressionShape = suppressionShapes.getElements().get(0).asStringNode().get();\n+\n+        assertEquals(suppressionShape.getValue(), \"ns.bar#UnreferencedString\");\n+        assertTrue(result.getShape(barUnreferenced).isPresent());\n+        assertFalse(result.getShape(fooUnreferenced).isPresent());\n+    }\n+\n+    @Test\n+    public void updatesIdRefValues() {\n+        Model model = Model.assembler()\n+                .addImport(IntegTest.class.getResource(\"rename-shape-test-model.json\"))\n+                .assemble()\n+                .unwrap();\n+\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+        ShapeId fromId = ShapeId.from(\"ns.foo#OldShape\");\n+        ShapeId toId = ShapeId.from(\"ns.foo#NewShape\");\n+        renamed.put(fromId, toId);\n+        ModelTransformer transformer = ModelTransformer.create();\n+        Model result = transformer.renameShapes(model, renamed);\n+        StringNode node = Node.from(toId.toShapeId().toString());\n+\n+        assertTrue(result.getShape(toId).isPresent());\n+        assertFalse(result.getShape(fromId).isPresent());\n+        Shape shape = result.expectShape(ShapeId.from(\"ns.foo#ValidShape\"));\n+        Trait trait = shape.findTrait(\"ns.foo#integerRef\").get();\n+        assertEquals(trait.toNode(), node);\n+    }\n+\n+    @Test\n+    public void updatesShapeNamesAndReferences() {\n+        Model model = Model.assembler()\n+                .addImport(IntegTest.class.getResource(\"rename-shape-test-model.json\"))\n+                .assemble()\n+                .unwrap();\n+        Map<ShapeId, ShapeId> renamed = new HashMap<>();\n+\n+        // Service\n+        ShapeId fromService = ShapeId.from(\"ns.foo#MyService\");\n+        ShapeId toService = ShapeId.from(\"ns.bar#MyNewService\");\n+        renamed.put(fromService,toService);\n+\n+        // Operation\n+        ShapeId fromOperation = ShapeId.from(\"ns.foo#MyOperation\");\n+        ShapeId toOperation = ShapeId.from(\"ns.baz#MyNewService\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f318dbbba9df4495bd20e91f963933aaa221ef5a"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTUyOTc0OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxOTowOVrOF6YgEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxOTowOVrOF6YgEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzE1NA==", "bodyText": "nit: s/model.base/model", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r396763154", "createdAt": "2020-03-23T21:19:09Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "diffHunk": "@@ -132,6 +136,44 @@ public Model removeShapesIf(Model model, Predicate<Shape> predicate) {\n         return filterShapes(model, FunctionalUtils.not(predicate));\n     }\n \n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @return Returns the transformed model.base.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f318dbbba9df4495bd20e91f963933aaa221ef5a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTUzMTAxOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxOTozMFrOF6YgyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxOTozMFrOF6YgyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzMzNw==", "bodyText": "nit: s/model.base/model", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r396763337", "createdAt": "2020-03-23T21:19:30Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/ModelTransformer.java", "diffHunk": "@@ -132,6 +136,44 @@ public Model removeShapesIf(Model model, Predicate<Shape> predicate) {\n         return filterShapes(model, FunctionalUtils.not(predicate));\n     }\n \n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @return Returns the transformed model.base.\n+     */\n+    public Model renameShapes(\n+            Model model,\n+            Map<ShapeId, ShapeId> renamed\n+    ) {\n+        return this.renameShapes(model, renamed, Model::assembler);\n+    }\n+\n+    /**\n+     *  Renames shapes using ShapeId pairs while ensuring that the\n+     *  transformed model is in a consistent state.\n+     *\n+     *  <p>This transformer ensures that when an aggregate shape is renamed, all\n+     *  members are updated in the model.\n+     *\n+     * @param model Model to transform.\n+     * @param renamed Map of shapeIds\n+     * @param modelAssemblerSupplier Supplier used to create {@link ModelAssembler}s in each transform.\n+     * @return Returns the transformed model.base.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f318dbbba9df4495bd20e91f963933aaa221ef5a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTUzMzcxOnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyMDoxOVrOF6Yibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyMDoxOVrOF6Yibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2Mzc1OA==", "bodyText": "nit: has an extra \"only\"", "url": "https://github.com/awslabs/smithy/pull/318#discussion_r396763758", "createdAt": "2020-03-23T21:20:19Z", "author": {"login": "kstich"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/transform/RenameShapes.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.smithy.model.transform;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import software.amazon.smithy.model.Model;\n+import software.amazon.smithy.model.loader.ModelAssembler;\n+import software.amazon.smithy.model.node.ArrayNode;\n+import software.amazon.smithy.model.node.Node;\n+import software.amazon.smithy.model.node.NodeVisitor;\n+import software.amazon.smithy.model.node.ObjectNode;\n+import software.amazon.smithy.model.node.StringNode;\n+import software.amazon.smithy.model.shapes.ModelSerializer;\n+import software.amazon.smithy.model.shapes.ShapeId;\n+import software.amazon.smithy.utils.Pair;\n+\n+/**\n+ *  Renames shapes using ShapeId pairs while ensuring that the\n+ *  transformed model is in a consistent state.\n+ *\n+ *  <p>Member shapes are updated when their containing shape is updated.\n+ *\n+ *  <p>Trait references to ShapeId values are also updated.\n+ */\n+final class RenameShapes {\n+    private final Map<ShapeId, ShapeId> renamed;\n+    private final ModelAssembler assembler;\n+\n+    RenameShapes(Map<ShapeId, ShapeId> renamed, Supplier<ModelAssembler> modelAssemblerSupplier) {\n+        this.renamed = new HashMap<>(renamed);\n+        this.assembler = modelAssemblerSupplier.get();\n+    }\n+\n+    Model transform(ModelTransformer transformer, Model model) {\n+        // Remove any no-op pairs to avoid renaming shapes unnecessarily.\n+        renamed.keySet().removeIf(fromId -> fromId.equals(renamed.get(fromId)));\n+        if (renamed.isEmpty()) {\n+            return model;\n+        }\n+\n+        // Creates a set that will be used for checking if a string value needs to be renamed or not.\n+        Set<String> toRename = renamed.keySet().stream()\n+                .map(ShapeId::toString)\n+                .collect(Collectors.toSet());\n+\n+        // This transformer converts the model into an ObjectNode. This approach was chosen because the\n+        // JSON AST format includes fully qualified shape ID values, making it possible rename shapes across\n+        // the model by only needing to compare and replace only StringNode values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f318dbbba9df4495bd20e91f963933aaa221ef5a"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}