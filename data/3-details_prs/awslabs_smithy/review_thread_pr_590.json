{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDM5OTU4", "number": 590, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODoyMFrOEqb64A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODoyMFrOEqb64A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTMzMDg4OnYy", "diffSide": "RIGHT", "path": "smithy-model/src/main/java/software/amazon/smithy/model/neighbor/NeighborProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODoyMFrOHcpHxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozODoyMFrOHcpHxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NTkxMA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // however, when trying to load ridiculously large models, that approach consume\n          \n          \n            \n                    // However, when trying to load ridiculously large models, that approach consumes", "url": "https://github.com/awslabs/smithy/pull/590#discussion_r499795910", "createdAt": "2020-10-05T18:38:20Z", "author": {"login": "srchase"}, "path": "smithy-model/src/main/java/software/amazon/smithy/model/neighbor/NeighborProvider.java", "diffHunk": "@@ -122,13 +124,24 @@ static NeighborProvider reverse(Model model) {\n      * @return Returns the reverse neighbor provider.\n      */\n     static NeighborProvider reverse(Model model, NeighborProvider forwardProvider) {\n-        Map<ShapeId, List<Relationship>> targetedFrom = model.shapes()\n-                .map(forwardProvider::getNeighbors)\n-                .flatMap(List::stream)\n-                .distinct()\n-                .collect(Collectors.groupingBy(Relationship::getNeighborShapeId, ListUtils.toUnmodifiableList()));\n+        // Note: this method previously needed lots of intermediate representations\n+        // stored in memory to create a Map<ShapeId, List<RelationShip>> that contains\n+        // only unique relationships. It was done using Stream, distinct, and groupingBy.\n+        // however, when trying to load ridiculously large models, that approach consume", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de890467e57a78a02218bb885926ed14b618870"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3624, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}