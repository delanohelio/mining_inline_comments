{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDgyMzMy", "number": 305, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0NDoyNVrODmZi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0NDoyNVrODmZi-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTkxMDM1OnYy", "diffSide": "LEFT", "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/TraitRemovalUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzo0NDoyNVrOFzy4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoxMDowN1rOFzzzjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1NTI3NA==", "bodyText": "This seems like a pretty rare case to run in to, but calling out that we're removing this without having deprecated it in 0.9.x.", "url": "https://github.com/awslabs/smithy/pull/305#discussion_r389855274", "createdAt": "2020-03-09T17:44:25Z", "author": {"login": "kstich"}, "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/TraitRemovalUtils.java", "diffHunk": "@@ -16,27 +16,26 @@\n package software.amazon.smithy.build.transforms;\n \n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n-import software.amazon.smithy.build.ProjectionTransformer;\n-import software.amazon.smithy.model.loader.Prelude;\n import software.amazon.smithy.model.shapes.Shape;\n import software.amazon.smithy.model.shapes.ShapeId;\n import software.amazon.smithy.model.traits.Trait;\n import software.amazon.smithy.utils.Pair;\n \n-abstract class AbstractTraitRemoval implements ProjectionTransformer {\n-    Pair<Set<ShapeId>, Set<String>> parseTraits(List<String> arguments) {\n+/**\n+ * Utilities for {@link IncludeTraits} and {@link ExcludeTraits}.\n+ */\n+final class TraitRemovalUtils {\n+\n+    private TraitRemovalUtils() {}\n+\n+    static Pair<Set<ShapeId>, Set<String>> parseTraits(Set<String> ids) {\n         Set<ShapeId> traitNames = new HashSet<>();\n         Set<String> traitNamespaces = new HashSet<>();\n \n-        for (String arg : arguments) {\n+        for (String arg : ids) {\n             if (arg.endsWith(\"#\")) {\n                 traitNamespaces.add(arg.substring(0, arg.length() - 1));\n-            } else if (arg.equals(Prelude.NAMESPACE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e9d9b4c647650dd90b4b63e0ac3185899dab7aa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3MDQ3OQ==", "bodyText": "I'll add a PR to master to emit a warning.", "url": "https://github.com/awslabs/smithy/pull/305#discussion_r389870479", "createdAt": "2020-03-09T18:10:07Z", "author": {"login": "mtdowling"}, "path": "smithy-build/src/main/java/software/amazon/smithy/build/transforms/TraitRemovalUtils.java", "diffHunk": "@@ -16,27 +16,26 @@\n package software.amazon.smithy.build.transforms;\n \n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n-import software.amazon.smithy.build.ProjectionTransformer;\n-import software.amazon.smithy.model.loader.Prelude;\n import software.amazon.smithy.model.shapes.Shape;\n import software.amazon.smithy.model.shapes.ShapeId;\n import software.amazon.smithy.model.traits.Trait;\n import software.amazon.smithy.utils.Pair;\n \n-abstract class AbstractTraitRemoval implements ProjectionTransformer {\n-    Pair<Set<ShapeId>, Set<String>> parseTraits(List<String> arguments) {\n+/**\n+ * Utilities for {@link IncludeTraits} and {@link ExcludeTraits}.\n+ */\n+final class TraitRemovalUtils {\n+\n+    private TraitRemovalUtils() {}\n+\n+    static Pair<Set<ShapeId>, Set<String>> parseTraits(Set<String> ids) {\n         Set<ShapeId> traitNames = new HashSet<>();\n         Set<String> traitNamespaces = new HashSet<>();\n \n-        for (String arg : arguments) {\n+        for (String arg : ids) {\n             if (arg.endsWith(\"#\")) {\n                 traitNamespaces.add(arg.substring(0, arg.length() - 1));\n-            } else if (arg.equals(Prelude.NAMESPACE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg1NTI3NA=="}, "originalCommit": {"oid": "8e9d9b4c647650dd90b4b63e0ac3185899dab7aa"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3862, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}