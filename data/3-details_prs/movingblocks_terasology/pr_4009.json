{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjExOTk2", "number": 4009, "title": "groovyw module update-all improvements", "bodyText": "Contains\nFixes #3661 Parts 1 and 2 (now fixes all three parts)\nNotes:\n\n\nI would have rather done a full diff of everything that changed in an update instead of listing the file changes per commit, but grgit doesn't seem to have the diff capability on anything other than single commits until this PR is merged ajoberstar/grgit#318\n\n\nI'm not fully sold that skipping an update is the best approach if a module has recently been updated. Running a few extra git-fetches in the event an update needs to be re-run isn't that expensive in the grand scheme, and personally I'd rather be able to ensure I have the latest by re-running the pull. Maybe some sort of \"force update\" option would be a good compromise here? So skip updating the module unless something like -f was passed?\n\n\nI didn't understand Part 3 of the issue\n\n\nHow to test\nSkip updating module if recently updated:\ncd modules/<module name>\ngit pull\ncd ../..\ngroovyw module update-all\nSimulate updating with 5 commits:\ncd modules/<module name>\ngit reset --hard HEAD~5\ncd ../..\ngroovyw module update-all\nConfirm subdirectories in .gitignore do not block parent directory\nin .gitignore change .settings/ to .settings/hide\nConfirm that .settings is no longer ignored in groovyw module update-all\nSample output\nIn the sample screenshot we see:\n\n.Settings is ignored due to being in the .gitignore\nCakeLie already up to date\nCoreSampleGameplay recently updated within 2 minutes, so skip\nHealth pulls 5 commits  to update\nModuleTestingEnvironment already up to date\n\n(Image updated with .Settings skipped to honor .gitignore)", "createdAt": "2020-05-31T13:28:15Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4009", "merged": true, "mergeCommit": {"oid": "bc4f1a86f8df3956b87905a78b335b8da6b5a186"}, "closed": true, "closedAt": "2020-06-10T12:09:30Z", "author": {"login": "cvennel"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmf9DigH2gAyNDI1NjExOTk2OjUyMTcyN2NmNzhjODg5N2ZhMGFmYzQ5YTQ5MTRkYzg4OTViY2ZjMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp4TpLgFqTQyNzk3NTk3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "521727cf78c8897fa0afc49a4914dc8895bcfc00", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/521727cf78c8897fa0afc49a4914dc8895bcfc00", "committedDate": "2020-05-30T23:48:57Z", "message": "Better logging on update-all"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b92b566a9e3590d29772185d2764f459fec975", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/32b92b566a9e3590d29772185d2764f459fec975", "committedDate": "2020-05-31T00:36:45Z", "message": "Skip if updated within last two minutes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46d64288c57f9119d539c6a401e6f8b2f391030", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b46d64288c57f9119d539c6a401e6f8b2f391030", "committedDate": "2020-05-31T13:05:53Z", "message": "remove extra line break"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a8615d710b1ed3b230867e33c339e893bdc3219f", "committedDate": "2020-05-31T21:51:40Z", "message": "Honor Gitignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODAwMjMy", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-421800232", "createdAt": "2020-06-01T12:22:19Z", "commit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyMjoxOVrOGdIkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyMzo0MVrOGdImjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjI1Mw==", "bodyText": "This should be extracted to its own method for better readability.\nDoing so will also make it easier to spot bugs or find the right location for doing improvements. We're missing that .gitignore files can also appear in subfolders and \"add up\" to each other. Not a huge deal, but ideally we could use some library to do this work for us...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433202253", "createdAt": "2020-06-01T12:22:19Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -188,6 +188,24 @@ class common {\n      */\n     def updateItem(String itemName) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (itemName.startsWith(\".\")){\n+            // add literal slash for regex start with '.'\n+            searchString = \"\\\\$itemName\"        \n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjgzMQ==", "bodyText": "Honestly, I'd throw that out as I don't see any good reason for doing this \ud83e\uddd0 The solution works nicely, I just don't think we should do it that way...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433202831", "createdAt": "2020-06-01T12:23:41Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +233,41 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                Date lastUpdate = new Date(targetDirFetchHead.lastModified())\n+                def recentlyUpdated = use(groovy.time.TimeCategory){\n+                    def timeElapsedSinceUpdate = new Date() - lastUpdate\n+                    if (timeElapsedSinceUpdate < 2.minutes){\n+                        println color(\"Skipping update for $itemName: updated within last 2 minutes\", Ansi.YELLOW)\n+                        return true\n+                    } else {\n+                        return false\n+                    }\n+                }\n+                if (recentlyUpdated){\n+                    return\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0542156bbe40f77c373c8718b06e579d9748fa8d", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/0542156bbe40f77c373c8718b06e579d9748fa8d", "committedDate": "2020-06-02T00:52:26Z", "message": "honor ALL gitignores, require relative path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4a44d6c1d153150870110afbb400f991c1a2bb", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/3d4a44d6c1d153150870110afbb400f991c1a2bb", "committedDate": "2020-06-02T00:55:19Z", "message": "Revert \"Skip if updated within last two minutes\"\n\nThis reverts commit 32b92b566a9e3590d29772185d2764f459fec975."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9f9226e809ec66460b09471472a2b15e7d3dc5", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/5c9f9226e809ec66460b09471472a2b15e7d3dc5", "committedDate": "2020-06-02T01:06:39Z", "message": "remove relative path requirement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ce5188c3fab9c854dd23fd348473f69405c3bb", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/05ce5188c3fab9c854dd23fd348473f69405c3bb", "committedDate": "2020-06-03T23:13:29Z", "message": "Revert \"honor ALL gitignores, require relative path\"\n\nThis reverts commit 0542156bbe40f77c373c8718b06e579d9748fa8d."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8cc25de2e2074de0ce9f680308ca137b582d426", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b8cc25de2e2074de0ce9f680308ca137b582d426", "committedDate": "2020-06-03T23:32:13Z", "message": "set up --continue flag and skip modules non alpha\n\nAdd skip any modules that start with non-alphanumeric character\n\nSet up --continue flag for skiping recently updated modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b178035e98c6a3bd8bb5623a6d2908b7a7637f", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b9b178035e98c6a3bd8bb5623a6d2908b7a7637f", "committedDate": "2020-06-03T23:32:31Z", "message": "Revert \"Revert \"Skip if updated within last two minutes\"\"\n\nThis reverts commit 3d4a44d6c1d153150870110afbb400f991c1a2bb."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/7055b6866ed8e355a48033996e9f6eca2bea02b1", "committedDate": "2020-06-04T00:04:21Z", "message": "Add isRecentlyUpdated method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTAxMzkx", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-424101391", "createdAt": "2020-06-04T04:54:31Z", "commit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTM3Njgy", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-424537682", "createdAt": "2020-06-04T14:57:17Z", "commit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NzoxN1rOGfKGgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NzoxN1rOGfKGgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng==", "bodyText": "I just realized in a newly cloned module the FETCH_HEAD may not exist. I need to add some sort of check to make sure the file exists before running isRecentlyUpdated()", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435324546", "createdAt": "2020-06-04T14:57:17Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc2a8c843fa3c88e71e7f7ce496193ef67cfd1f", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ecc2a8c843fa3c88e71e7f7ce496193ef67cfd1f", "committedDate": "2020-06-04T23:27:40Z", "message": "Check fetch_head exists and update modified time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/bcdf1d2b50c75173eac30efc76b2296fbad679c8", "committedDate": "2020-06-04T23:29:41Z", "message": "check fetch_head exists before updating time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjIwMTM1", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-425620135", "createdAt": "2020-06-05T20:55:30Z", "commit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NTozMVrOGf9GcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMzowMFrOGf97wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDExMg==", "bodyText": "I think there is some help message defined somewhere (printUsage) - could you please add a note about this flag there?\nWould --skipRecentlyUpdated be a better name?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436160112", "createdAt": "2020-06-05T20:55:31Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -117,8 +117,14 @@ switch (cleanerArgs[0]) {\n     case \"update-all\":\n         println \"We're updating every $itemType\"\n         println \"List of local entries: ${common.retrieveLocalItems()}\"\n-        for (item in common.retrieveLocalItems()) {\n-            common.updateItem(item)\n+        if (cleanerArgs.contains(\"--continue\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDkzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cleanerArgs.contains(\"--continue\")) {\n          \n          \n            \n                        for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                            common.updateItem(item, true)\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                            common.updateItem(item)\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    def skipRecentlyUpdated = cleanerArgs.contains(\"--continue\")\n          \n          \n            \n                    for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                    \tcommon.updateItem(item, skipRecentlyUpdated)\n          \n          \n            \n                    }", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436160939", "createdAt": "2020-06-05T20:57:27Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -117,8 +117,14 @@ switch (cleanerArgs[0]) {\n     case \"update-all\":\n         println \"We're updating every $itemType\"\n         println \"List of local entries: ${common.retrieveLocalItems()}\"\n-        for (item in common.retrieveLocalItems()) {\n-            common.updateItem(item)\n+        if (cleanerArgs.contains(\"--continue\")) {\n+            for (item in common.retrieveLocalItems()) {\n+                common.updateItem(item, true)\n+            }\n+        } else {\n+            for (item in common.retrieveLocalItems()) {\n+                common.updateItem(item)\n+            }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTg1NA==", "bodyText": "This methods works independently of the fact that you pass it a FETCH_HEAD file. Thus, I would just call this file to make that clear.\nUsing this method to determine whether the git state is somewhat recent is a usage specific.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436165854", "createdAt": "2020-06-05T21:10:42Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2ODcwOA==", "bodyText": "So if this is called skipRecentUpdates here - why is the corresponding command line flag called --continue?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436168708", "createdAt": "2020-06-05T21:18:27Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTkwMQ==", "bodyText": "Please turn this into a method and use it inline in the check:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    def inGitIgnore = false\n          \n          \n            \n                    new File(\".gitignore\").eachLine{ line -> \n          \n          \n            \n                        // match if line is exactly same os itemName or has trailing '/' but\n          \n          \n            \n                        // not if has further subdirectories\n          \n          \n            \n                        if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n          \n          \n            \n                            inGitIgnore = true\n          \n          \n            \n                            return\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (inGitIgnore){\n          \n          \n            \n                    if (isGitIgnored(itemName)) {", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436169901", "createdAt": "2020-06-05T21:21:54Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (!Character.isLetterOrDigit(itemName.charAt(0))){   \n+            println color (\"Skipping update for $itemName: starts with non-alphanumeric symbol\", Ansi.YELLOW)\n+            return\n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }\n+        if (inGitIgnore){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MDIwOQ==", "bodyText": "What is this declaration used for? Are you modifying the searchString somewhere?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436170209", "createdAt": "2020-06-05T21:22:46Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzIzNA==", "bodyText": "This should at least be extracted to a method for better readability.\nI think this bit clutters our code, and in my opinion for no apparent reason other than \"because it is technically possible\". We are not using Github API to worry about rate limiting, so I don't understand why we would ever need this feature.\n@Cervator I'd rather have 20-30 lines of code less to maintain (and/or go stale)...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436173234", "createdAt": "2020-06-05T21:31:30Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Mzc2MQ==", "bodyText": "Could you please add a //TODO: .. comment referencing the grgit issue", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436173761", "createdAt": "2020-06-05T21:33:00Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }\n+                \n                 try {\n+                    def current_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n                     itemGit.pull remote: defaultRemote\n+                    def post_update_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n+                        \n+                    if (current_sha != post_update_sha){\n+                        println color(\"Updating $current_sha..$post_update_sha\", Ansi.GREEN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbdf253229574d296582cfc681c5c213a60019ba", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/bbdf253229574d296582cfc681c5c213a60019ba", "committedDate": "2020-06-08T21:48:55Z", "message": "Update config/groovy/util.groovy\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d90f4a124faaae86def84487154caeacae7f65de", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/d90f4a124faaae86def84487154caeacae7f65de", "committedDate": "2020-06-08T22:49:11Z", "message": "Feedback changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8c1615c0bd3d50e7892fba639cf3fc1551700f", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/be8c1615c0bd3d50e7892fba639cf3fc1551700f", "committedDate": "2020-06-08T23:37:07Z", "message": "Merge branch 'develop' of https://github.com/MovingBlocks/Terasology into update-all-groovyw"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjkyMzMz", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-426692333", "createdAt": "2020-06-08T23:38:31Z", "commit": {"oid": "be8c1615c0bd3d50e7892fba639cf3fc1551700f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozODozMlrOGgz7LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozODozMlrOGgz7LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODM0OQ==", "bodyText": "This is the new line. The rest is removing unnecessary println statements in favor of a multi-line string", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437058349", "createdAt": "2020-06-08T23:38:32Z", "author": {"login": "cvennel"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -297,50 +298,52 @@ private void printListItemsCondensed(String[] items) {\n  * Simply prints usage information.\n  */\n def printUsage() {\n-    println \"\"\n-    println \"Utility script for interacting with Terasology. General syntax:\"\n-    println \"  groovyw (type) (sub-command)\"\n-    println \"- 'type' may be module,meta,lib or facade.\"\n-    println \"\"\n-    println \"Available sub-commands:\"\n-    println \"- 'init' - retrieves a given module distro, or a default sample source module (modules only)\"\n-    println \"- 'get' - retrieves one or more items in source form (separate with spaces)\"\n-    println \"- 'get-all' - retrieves all modules that can be found on the configured remote locations\"\n-    println \"- 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\"\n-    println \"- 'list' - lists items that are available for download or downloaded already.\"\n-    println \"- 'create' - creates a new item of the given type.\"\n-    println \"- 'update' - updates an item (git pulls latest from current origin, if workspace is clean\"\n-    println \"- 'update-all' - updates all local items of the given type.\"\n-    println \"- 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\"\n-    println \"- 'add-remote (item) (name) (URL)' - adds a remote with the given URL\"\n-    println \"- 'list-remotes (item)' - lists all remotes for (item) \"\n-    println \"- 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\"\n-    println \"- 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\"\n-    println \"\"\n-    println \"Available flags:\"\n-    println \"'-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\"\n-    println \"       Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\"\n-    println \"'-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\"\n-    println \"'-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\"\n-    println \"\"\n-    println \"Example: 'groovyw module init iota' - retrieves all the modules in the Iota module distro from GitHub.\"\n-    println \"Example: 'groovyw module get Sample -remote jellysnake' - would retrieve Sample from jellysnake's Sample repo on GitHub.\"\n-    println \"Example: 'groovyw module get-all' - would retrieve all the modules in the Terasology organisation on GitHub.\"\n-    println \"Example: 'groovyw module get Sa??l*' - would retrieve all the modules in the Terasology organisation on GitHub\" +\n-            \" that start with \\\"Sa\\\", have any two characters after that, then an \\\"l\\\" and then end with anything else.\" +\n-            \" This should retrieve the Sample repository from the Terasology organisation on GitHub.\"\n-    println \"\"\n-    println \"*NOTE*: On UNIX platforms (MacOS and Linux), the wildcard arguments must be escaped with single quotes e.g. groovyw module get '*'.\"\n-    println \"\"\n-    println \"Example: 'groovyw module recurse GooeysQuests Sample' - would retrieve those modules plus their dependencies as source\"\n-    println \"Example: 'groovyw lib list' - would list library projects compatible with being embedded in a Terasology workspace\"\n-    println \"Example: 'groovyw module createDependencyDotFile JoshariasSurvival' - would create a dot file with JS' dependencies and all their dependencies - if locally available\"\n-    println \"\"\n-    println \"*NOTE*: Item names are case sensitive. If you add items then `gradlew idea` or similar may be needed to refresh your IDE\"\n-    println \"\"\n-    println \"If you omit further arguments beyond the sub-command you'll be prompted for details\"\n-    println \"\"\n-    println \"For advanced usage see project documentation. For instance you can provide an alternative GitHub home\"\n-    println \"A gradle.properties file (one exists under '/templates' in an engine workspace) can provide such overrides\"\n-    println \"\"\n+\n+    println(\"\"\"\n+    Utility script for interacting with Terasology. General syntax:\n+      groovyw (type) (sub-command)\n+    - 'type' may be module,meta,lib or facade.\n+    \n+    Available sub-commands:\n+    - 'init' - retrieves a given module distro, or a default sample source module (modules only)\n+    - 'get' - retrieves one or more items in source form (separate with spaces)\n+    - 'get-all' - retrieves all modules that can be found on the configured remote locations\n+    - 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\n+    - 'list' - lists items that are available for download or downloaded already.\n+    - 'create' - creates a new item of the given type.\n+    - 'update' - updates an item (git pulls latest from current origin, if workspace is clean\n+    - 'update-all' - updates all local items of the given type.\n+    - 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\n+    - 'add-remote (item) (name) (URL)' - adds a remote with the given URL\n+    - 'list-remotes (item)' - lists all remotes for (item) \n+    - 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\n+    - 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\n+    \n+    Available flags:\n+    '-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\n+           Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\n+    '-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\n+    '-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\n+    '-skip-recently-updated' (Only for update-all) to skip updating modules that have already been updated within 10 minutes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8c1615c0bd3d50e7892fba639cf3fc1551700f"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab5ed60d7402c87cf96b729369821c11e53c8a0", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/3ab5ed60d7402c87cf96b729369821c11e53c8a0", "committedDate": "2020-06-08T23:43:30Z", "message": "dumb typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ed025ad27e9ec4b35f38b1e29adb4116565b8e1", "author": {"user": {"login": "cvennel", "name": "Chris Vennel"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/8ed025ad27e9ec4b35f38b1e29adb4116565b8e1", "committedDate": "2020-06-08T23:49:36Z", "message": "Adding comments, small cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTc1OTcx", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#pullrequestreview-427975971", "createdAt": "2020-06-10T11:53:07Z", "commit": {"oid": "8ed025ad27e9ec4b35f38b1e29adb4116565b8e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}