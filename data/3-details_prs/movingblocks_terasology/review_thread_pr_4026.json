{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTc1MDIw", "number": 4026, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjoyMVrOEEWPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTozOToyMlrOERAgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk0MDUzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjoyMVrOGh6VtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjoyMVrOGh6VtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMjAyMQ==", "bodyText": "Calling identity() here is unnecessary, since translationRotateScale() sets the matrix's state rather than transforming it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                matrixCameraSpace.identity().translationRotateScale(offsetFromCamera, worldRot, worldScale);\n          \n          \n            \n                                matrixCameraSpace.translationRotateScale(offsetFromCamera, worldRot, worldScale);", "url": "https://github.com/MovingBlocks/Terasology/pull/4026#discussion_r438212021", "createdAt": "2020-06-10T15:26:21Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "diffHunk": "@@ -191,23 +195,23 @@ private void renderEntitiesByMaterial(SetMultimap<Material, EntityRef> meshByMat\n                     MeshComponent meshComp = entity.getComponent(MeshComponent.class);\n                     LocationComponent location = entity.getComponent(LocationComponent.class);\n \n-                    if (isHidden(entity, meshComp) || location == null || Float.isNaN(location.getWorldPosition().x)|| meshComp.mesh == null || !isRelevant(entity, location.getWorldPosition())) {\n+                    if (isHidden(entity, meshComp) || location == null || Float.isNaN(location.getWorldPosition().x) || meshComp.mesh == null || !isRelevant(entity, JomlUtil.from(location.getWorldPosition()))) {\n                         continue;\n                     }\n                     if (meshComp.mesh.isDisposed()) {\n                         logger.error(\"Attempted to render disposed mesh\");\n                         continue;\n                     }\n \n-                    location.getWorldRotation(worldRot);\n-                    location.getWorldPosition(worldPos);\n+                    worldRot.set(JomlUtil.from(location.getWorldRotation()));\n+                    worldPos.set(JomlUtil.from(location.getWorldPosition()));\n                     float worldScale = location.getWorldScale();\n \n-                    Transform toWorldSpace = new Transform(worldPos, worldRot, worldScale);\n+                    Transform toWorldSpace = new Transform(JomlUtil.from(worldPos), JomlUtil.from(worldRot), worldScale);\n+\n+                    Vector3f offsetFromCamera = worldPos.sub(cameraPosition, new Vector3f());\n+                    matrixCameraSpace.identity().translationRotateScale(offsetFromCamera, worldRot, worldScale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0300ce52c4f42e87357e8964757376051c648e7e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk1MjAyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyODo1OFrOGh6dNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyODo1OFrOGh6dNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMzk0MA==", "bodyText": "Matrix4f#normal() should be used instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    modelViewMatrix.get3x3(normalMatrix).invert().getTransposed(tempMatrixBuffer33);\n          \n          \n            \n                                    modelViewMatrix.normal(normalMatrix).get(tempMatrixBuffer33);", "url": "https://github.com/MovingBlocks/Terasology/pull/4026#discussion_r438213940", "createdAt": "2020-06-10T15:28:58Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "diffHunk": "@@ -219,17 +223,17 @@ private void renderEntitiesByMaterial(SetMultimap<Material, EntityRef> meshByMat\n                             lastMesh.preRender();\n                         }\n \n-                        Matrix4f modelViewMatrix = MatrixUtils.calcModelViewMatrix(JomlUtil.from(worldRenderer.getActiveCamera().getViewMatrix()), matrixCameraSpace);\n-                        MatrixUtils.matrixToFloatBuffer(modelViewMatrix, tempMatrixBuffer44);\n-                        MatrixUtils.matrixToFloatBuffer(MatrixUtils.calcNormalMatrix(modelViewMatrix), tempMatrixBuffer33);\n+                        modelViewMatrix.set(worldRenderer.getActiveCamera().getViewMatrix()).transpose().mul(matrixCameraSpace);\n+                        modelViewMatrix.get(tempMatrixBuffer44);\n+                        modelViewMatrix.get3x3(normalMatrix).invert().getTransposed(tempMatrixBuffer33);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0300ce52c4f42e87357e8964757376051c648e7e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk2ODM4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozMjo0NVrOGh6nqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozMjo0NVrOGh6nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNjYxOA==", "bodyText": "Not your change, but I just want to say, that I find it odd that we are using buffers to set some matrices and Matrix4f objects for others. I'd favor consistently passing the matrix.", "url": "https://github.com/MovingBlocks/Terasology/pull/4026#discussion_r438216618", "createdAt": "2020-06-10T15:32:45Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "diffHunk": "@@ -219,17 +223,17 @@ private void renderEntitiesByMaterial(SetMultimap<Material, EntityRef> meshByMat\n                             lastMesh.preRender();\n                         }\n \n-                        Matrix4f modelViewMatrix = MatrixUtils.calcModelViewMatrix(JomlUtil.from(worldRenderer.getActiveCamera().getViewMatrix()), matrixCameraSpace);\n-                        MatrixUtils.matrixToFloatBuffer(modelViewMatrix, tempMatrixBuffer44);\n-                        MatrixUtils.matrixToFloatBuffer(MatrixUtils.calcNormalMatrix(modelViewMatrix), tempMatrixBuffer33);\n+                        modelViewMatrix.set(worldRenderer.getActiveCamera().getViewMatrix()).transpose().mul(matrixCameraSpace);\n+                        modelViewMatrix.get(tempMatrixBuffer44);\n+                        modelViewMatrix.get3x3(normalMatrix).invert().getTransposed(tempMatrixBuffer33);\n \n                         material.setMatrix4(\"projectionMatrix\", new org.joml.Matrix4f(worldRenderer.getActiveCamera().getProjectionMatrix()).transpose(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0300ce52c4f42e87357e8964757376051c648e7e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjY5NjAzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTozOToyMlrOG1elXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMTowNVrOG1fkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyODc5Ng==", "bodyText": "Why is there a transpose inserted here? This seems to be actually changing the logic.", "url": "https://github.com/MovingBlocks/Terasology/pull/4026#discussion_r458728796", "createdAt": "2020-07-22T11:39:22Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "diffHunk": "@@ -218,17 +223,17 @@ private void renderEntitiesByMaterial(SetMultimap<Material, EntityRef> meshByMat\n                             lastMesh.preRender();\n                         }\n \n-                        Matrix4f modelViewMatrix = MatrixUtils.calcModelViewMatrix(JomlUtil.from(worldRenderer.getActiveCamera().getViewMatrix()), matrixCameraSpace);\n-                        MatrixUtils.matrixToFloatBuffer(modelViewMatrix, tempMatrixBuffer44);\n-                        MatrixUtils.matrixToFloatBuffer(MatrixUtils.calcNormalMatrix(modelViewMatrix), tempMatrixBuffer33);\n+                        modelViewMatrix.set(worldRenderer.getActiveCamera().getViewMatrix()).transpose().mul(matrixCameraSpace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0042399945e689a5fa475ec52a6c64ea48a1099"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDkwOQ==", "bodyText": "the transpose is not needed anymore when I pull in the camera from upstream.", "url": "https://github.com/MovingBlocks/Terasology/pull/4026#discussion_r458744909", "createdAt": "2020-07-22T12:11:05Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/logic/MeshRenderer.java", "diffHunk": "@@ -218,17 +223,17 @@ private void renderEntitiesByMaterial(SetMultimap<Material, EntityRef> meshByMat\n                             lastMesh.preRender();\n                         }\n \n-                        Matrix4f modelViewMatrix = MatrixUtils.calcModelViewMatrix(JomlUtil.from(worldRenderer.getActiveCamera().getViewMatrix()), matrixCameraSpace);\n-                        MatrixUtils.matrixToFloatBuffer(modelViewMatrix, tempMatrixBuffer44);\n-                        MatrixUtils.matrixToFloatBuffer(MatrixUtils.calcNormalMatrix(modelViewMatrix), tempMatrixBuffer33);\n+                        modelViewMatrix.set(worldRenderer.getActiveCamera().getViewMatrix()).transpose().mul(matrixCameraSpace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyODc5Ng=="}, "originalCommit": {"oid": "e0042399945e689a5fa475ec52a6c64ea48a1099"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 521, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}