{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1ODU0MzY5", "number": 4338, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDowODo0MlrOFJiS7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMjoyNlrOFJiWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQzNDA1OnYy", "diffSide": "LEFT", "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/RectanglefTypeHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDowODo0MlrOIL6Ttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDowODo0MlrOIL6Ttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MDU2Nw==", "bodyText": "So - was this actually never working? \ud83d\ude44", "url": "https://github.com/MovingBlocks/Terasology/pull/4338#discussion_r549360567", "createdAt": "2020-12-28T14:08:42Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/RectanglefTypeHandler.java", "diffHunk": "@@ -33,7 +33,7 @@ protected PersistedData serializeNonNull(Rectanglef value, PersistedDataSerializ\n             PersistedDataMap map = data.getAsValueMap();\n \n             PersistedDataArray minDataArr = map.get(MIN_FIELD).getAsArray();\n-            PersistedDataArray maxDataArr = map.get(MIN_FIELD).getAsArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b0e9e3b114a54237cbcc2d561b00bc18818db5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQ0MTE0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/BlockAreaTypeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMjowMlrOIL6XeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMjowMlrOIL6XeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MTUyOQ==", "bodyText": "As you are using 'setSize(...)` you don't need to do any computation here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new BlockArea(\n          \n          \n            \n                                    minArr.get(0), minArr.get(1)).setSize(\n          \n          \n            \n                                    minArr.get(0) + sizeArr.get(0),\n          \n          \n            \n                                    minArr.get(1) + sizeArr.get(1)));\n          \n          \n            \n                                new BlockArea(minArr.get(0), minArr.get(1))\n          \n          \n            \n                                \t\t.setSize(sizeArr.get(0), sizeArr.get(1)));", "url": "https://github.com/MovingBlocks/Terasology/pull/4338#discussion_r549361529", "createdAt": "2020-12-28T14:12:02Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/BlockAreaTypeHandler.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.mathTypes;\n+\n+import com.google.common.collect.Maps;\n+import gnu.trove.list.TIntList;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.PersistedDataArray;\n+import org.terasology.persistence.typeHandling.PersistedDataMap;\n+import org.terasology.persistence.typeHandling.PersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.TypeHandler;\n+import org.terasology.world.block.BlockArea;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class BlockAreaTypeHandler extends TypeHandler<BlockArea> {\n+    private static final String MIN_FIELD = \"min\";\n+    private static final String MAX_FIELD = \"max\";\n+    private static final String SIZE_FIELD = \"size\";\n+\n+    @Override\n+    protected PersistedData serializeNonNull(BlockArea value, PersistedDataSerializer serializer) {\n+        Map<String, PersistedData> map = Maps.newLinkedHashMap();\n+        map.put(MIN_FIELD, serializer.serialize(value.minX(), value.minY()));\n+        map.put(MAX_FIELD, serializer.serialize(value.maxX(), value.maxY()));\n+        return serializer.serialize(map);\n+    }\n+\n+    @Override\n+    public Optional<BlockArea> deserialize(PersistedData data) {\n+        if (!data.isNull() && data.isValueMap()) {\n+            PersistedDataMap map = data.getAsValueMap();\n+\n+            PersistedDataArray minDataArr = map.get(MIN_FIELD).getAsArray();\n+            TIntList minArr = minDataArr.getAsIntegerArray();\n+            if (map.has(SIZE_FIELD)) {\n+                PersistedDataArray sizedataArray = map.get(SIZE_FIELD).getAsArray();\n+                TIntList sizeArr = sizedataArray.getAsIntegerArray();\n+                return Optional.of(\n+                    new BlockArea(\n+                        minArr.get(0), minArr.get(1)).setSize(\n+                        minArr.get(0) + sizeArr.get(0),\n+                        minArr.get(1) + sizeArr.get(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b0e9e3b114a54237cbcc2d561b00bc18818db5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTQ0MjIwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/BlockAreacTypeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMjoyNlrOIL6YCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNDoxMjoyNlrOIL6YCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM2MTY3Mg==", "bodyText": "Same here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new BlockArea(\n          \n          \n            \n                                    minArr.get(0), minArr.get(1)).setSize(\n          \n          \n            \n                                    minArr.get(0) + sizeArr.get(0),\n          \n          \n            \n                                    minArr.get(1) + sizeArr.get(1)));\n          \n          \n            \n                                new BlockArea(minArr.get(0), minArr.get(1))\n          \n          \n            \n                                \t\t.setSize(sizeArr.get(0), sizeArr.get(1)));", "url": "https://github.com/MovingBlocks/Terasology/pull/4338#discussion_r549361672", "createdAt": "2020-12-28T14:12:26Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/mathTypes/BlockAreacTypeHandler.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.mathTypes;\n+\n+import com.google.common.collect.Maps;\n+import gnu.trove.list.TIntList;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.PersistedDataArray;\n+import org.terasology.persistence.typeHandling.PersistedDataMap;\n+import org.terasology.persistence.typeHandling.PersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.TypeHandler;\n+import org.terasology.world.block.BlockArea;\n+import org.terasology.world.block.BlockAreac;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class BlockAreacTypeHandler extends TypeHandler<BlockAreac> {\n+    private static final String MIN_FIELD = \"min\";\n+    private static final String MAX_FIELD = \"max\";\n+    private static final String SIZE_FIELD = \"size\";\n+\n+    @Override\n+    protected PersistedData serializeNonNull(BlockAreac value, PersistedDataSerializer serializer) {\n+        Map<String, PersistedData> map = Maps.newLinkedHashMap();\n+        map.put(MIN_FIELD, serializer.serialize(value.minX(), value.minY()));\n+        map.put(MAX_FIELD, serializer.serialize(value.maxX(), value.maxY()));\n+        return serializer.serialize(map);\n+    }\n+\n+    @Override\n+    public Optional<BlockAreac> deserialize(PersistedData data) {\n+        if (!data.isNull() && data.isValueMap()) {\n+            PersistedDataMap map = data.getAsValueMap();\n+\n+            PersistedDataArray minDataArr = map.get(MIN_FIELD).getAsArray();\n+            TIntList minArr = minDataArr.getAsIntegerArray();\n+            if (map.has(SIZE_FIELD)) {\n+                PersistedDataArray sizedataArray = map.get(SIZE_FIELD).getAsArray();\n+                TIntList sizeArr = sizedataArray.getAsIntegerArray();\n+                return Optional.of(\n+                    new BlockArea(\n+                        minArr.get(0), minArr.get(1)).setSize(\n+                        minArr.get(0) + sizeArr.get(0),\n+                        minArr.get(1) + sizeArr.get(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b0e9e3b114a54237cbcc2d561b00bc18818db5"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 206, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}