{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDk4NDA2", "number": 4050, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTo0Mjo1OVrOEFVHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMzowNVrOFExFng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDI0MjQ2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/SquareRegion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTo0Mjo1OVrOGjd2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTo0Mjo1OVrOGjd2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0MjMwOQ==", "bodyText": "\"Square\" in the sense of 90\u00b0 angles, or in the sense of a quadratic rectangle with all four sides of equal length?\nI'd vote to call this RectangularRegion for clearer naming and to avoid confusion.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r439842309", "createdAt": "2020-06-14T15:42:59Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/SquareRegion.java", "diffHunk": "@@ -0,0 +1,671 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+/**\n+ * is a bounded rectangle describing squares contained within.\n+ * A {@link SquareRegion} is described and backed by an {@link org.joml.Rectanglei}\n+ */\n+public class SquareRegion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d99fdf796f1e8b150ea951628855952827d079"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDg3NzAyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMjoyOVrOIE47IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyNDowN1rOIE477g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzg1Nw==", "bodyText": "@pollend Is this too much overhead keeping the vectors? Should I instead use just 4 plain integers?", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541997857", "createdAt": "2020-12-13T20:22:29Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5ODA2Mg==", "bodyText": "I would just use 4 integers.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541998062", "createdAt": "2020-12-13T20:24:07Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzg1Nw=="}, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDg3Nzg1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMzoyM1rOIE47hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMToxNzo1NVrOIE5hZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzk1OA==", "bodyText": "@pollend Should we compute the bounding rectangle every time something changes, or just when it is requested (lazy)? I've prepared to do the latter, not fully implemented yet, though.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541997958", "createdAt": "2020-12-13T20:23:23Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);\n+\n+    private boolean dirty = true;\n+    private Rectanglef rectangle = new Rectanglef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5ODI0Mg==", "bodyText": "I would just update the bounds if it changes. you still end up needing to recalculate it for most cases.  when you update min you only need to update the minimum of the bounds and the same for max. its probably more expensive to check if its dirty and then try update both the bounds.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541998242", "createdAt": "2020-12-13T20:25:06Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);\n+\n+    private boolean dirty = true;\n+    private Rectanglef rectangle = new Rectanglef();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzk1OA=="}, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMDcwNQ==", "bodyText": "I would expect this to be used sufficiently rarely that just not cacheing at all would be best.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542000705", "createdAt": "2020-12-13T20:39:15Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);\n+\n+    private boolean dirty = true;\n+    private Rectanglef rectangle = new Rectanglef();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzk1OA=="}, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNzY1NQ==", "bodyText": "If we're going to re-compute it anyways, maybe make it more explicit? Then the caller can do whatever they want with it....\nRectanglef worldArea = BlockAreas.toWorldArea(area);", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542007655", "createdAt": "2020-12-13T21:17:55Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);\n+\n+    private boolean dirty = true;\n+    private Rectanglef rectangle = new Rectanglef();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzk1OA=="}, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTQxNjg5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMTo1NzoxM1rOIE819g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMTo1NzoxM1rOIE819g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MjA3MA==", "bodyText": "why do we need a copy method when can just use a constructor method.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * @return a copy of this block area\n          \n          \n            \n                 */\n          \n          \n            \n                public BlockArea copy() {\n          \n          \n            \n                    return new BlockArea().set(this);\n          \n          \n            \n                }\n          \n          \n            \n                /**\n          \n          \n            \n                 */\n          \n          \n            \n                public BlockArea(BlockArea area) {\n          \n          \n            \n                     this.set(this);\n          \n          \n            \n                }", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542062070", "createdAt": "2020-12-14T01:57:13Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTQyMjExOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMTo1OTo1MFrOIE84nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMTo1OTo1MFrOIE84nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2Mjc1MQ==", "bodyText": "I think we should lean more on using assertions.\nhttps://www.geeksforgeeks.org/assertions-in-java/", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542062751", "createdAt": "2020-12-14T01:59:50Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTQyNjIxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMTo1NlrOIE86nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMTo1NlrOIE86nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzI2Mw==", "bodyText": "for the size you need to add 1.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.maxX - this.minX;\n          \n          \n            \n                    return this.maxX - this.minX + 1;", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063263", "createdAt": "2020-12-14T02:01:56Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);\n+        this.minX = minX;\n+        this.minY = minY;\n+        Rectangles.setMin(this.bounds, minX - 0.5f, minY - 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maximum coordinate of the second block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param max the second coordinate of the second block\n+     * @return this\n+     */\n+    public BlockArea setMax(Vector2ic max) {\n+        return setMax(max.x(), max.y());\n+    }\n+\n+    /**\n+     * sets the maximum block for this {@link BlockRegion}\n+     *\n+     * @param maxX the x coordinate of the first block\n+     * @param maxY the y coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMax(int maxX, int maxY) {\n+        Preconditions.checkArgument(maxX >= this.minX ^ this.minX == Integer.MAX_VALUE);\n+        Preconditions.checkArgument(maxY >= this.minY ^ this.minY == Integer.MAX_VALUE);\n+        this.maxX = maxX;\n+        this.maxY = maxY;\n+        Rectangles.setMax(this.bounds, maxX + 0.5f, maxY + 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and <code>other</code>.\n+     *\n+     * @param other {@link BlockRegion}\n+     * @return this\n+     */\n+    public BlockArea union(BlockArea other) {\n+        return union(other.minX, other.minY).union(other.minX, other.maxY);\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and the given block <code>p</code>.\n+     *\n+     * @param p the position of the block\n+     * @return this\n+     */\n+    public BlockArea union(Vector2ic p) {\n+        return union(p.x(), p.y());\n+    }\n+\n+    public BlockArea union(int x, int y) {\n+        return union(x, y, this);\n+    }\n+\n+    /**\n+     * Compute the union of <code>this</code> and the given block <code>(x, y, z)</code> and stores the result in\n+     * <code>dest</code>\n+     *\n+     * @param x the x coordinate of the block\n+     * @param y the y coordinate of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockArea union(int x, int y, BlockArea dest) {\n+        return dest\n+                .setMin(Math.min(dest.minX, x), Math.min(dest.minY, y))\n+                .setMax(Math.max(dest.maxX, x), Math.max(dest.maxY, y));\n+    }\n+\n+    /**\n+     * calculate the BlockRegion that is intersected between another region\n+     *\n+     * @param other the other BlockRegion\n+     * @param dest holds the result\n+     * @return dest\n+     */\n+    public BlockArea intersection(BlockArea other, BlockArea dest) {\n+        return dest\n+                .setMin(Math.max(this.minX, other.minX), Math.max(this.minY, other.minY))\n+                .setMax(Math.min(this.maxX, other.maxX), Math.min(this.maxY, other.maxY));\n+    }\n+\n+    /**\n+     * the number of blocks for the +x, +y, +z from the minimum to the maximum\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getSize(Vector2i dest) {\n+        return dest.set(getSizeX(), getSizeY());\n+    }\n+\n+    /**\n+     * The number of blocks on the X axis\n+     *\n+     * @return number of blocks in the X axis\n+     */\n+    public int getSizeX() {\n+        return this.maxX - this.minX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTQyNzU1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMjoyOFrOIE87SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMjoyOFrOIE87SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzQzMw==", "bodyText": "you need to add 1 for the size so its consistent with BlockRegion.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.maxY - this.minY;\n          \n          \n            \n                    return this.maxY - this.minY + 1;", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063433", "createdAt": "2020-12-14T02:02:28Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);\n+        this.minX = minX;\n+        this.minY = minY;\n+        Rectangles.setMin(this.bounds, minX - 0.5f, minY - 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maximum coordinate of the second block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param max the second coordinate of the second block\n+     * @return this\n+     */\n+    public BlockArea setMax(Vector2ic max) {\n+        return setMax(max.x(), max.y());\n+    }\n+\n+    /**\n+     * sets the maximum block for this {@link BlockRegion}\n+     *\n+     * @param maxX the x coordinate of the first block\n+     * @param maxY the y coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMax(int maxX, int maxY) {\n+        Preconditions.checkArgument(maxX >= this.minX ^ this.minX == Integer.MAX_VALUE);\n+        Preconditions.checkArgument(maxY >= this.minY ^ this.minY == Integer.MAX_VALUE);\n+        this.maxX = maxX;\n+        this.maxY = maxY;\n+        Rectangles.setMax(this.bounds, maxX + 0.5f, maxY + 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and <code>other</code>.\n+     *\n+     * @param other {@link BlockRegion}\n+     * @return this\n+     */\n+    public BlockArea union(BlockArea other) {\n+        return union(other.minX, other.minY).union(other.minX, other.maxY);\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and the given block <code>p</code>.\n+     *\n+     * @param p the position of the block\n+     * @return this\n+     */\n+    public BlockArea union(Vector2ic p) {\n+        return union(p.x(), p.y());\n+    }\n+\n+    public BlockArea union(int x, int y) {\n+        return union(x, y, this);\n+    }\n+\n+    /**\n+     * Compute the union of <code>this</code> and the given block <code>(x, y, z)</code> and stores the result in\n+     * <code>dest</code>\n+     *\n+     * @param x the x coordinate of the block\n+     * @param y the y coordinate of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockArea union(int x, int y, BlockArea dest) {\n+        return dest\n+                .setMin(Math.min(dest.minX, x), Math.min(dest.minY, y))\n+                .setMax(Math.max(dest.maxX, x), Math.max(dest.maxY, y));\n+    }\n+\n+    /**\n+     * calculate the BlockRegion that is intersected between another region\n+     *\n+     * @param other the other BlockRegion\n+     * @param dest holds the result\n+     * @return dest\n+     */\n+    public BlockArea intersection(BlockArea other, BlockArea dest) {\n+        return dest\n+                .setMin(Math.max(this.minX, other.minX), Math.max(this.minY, other.minY))\n+                .setMax(Math.min(this.maxX, other.maxX), Math.min(this.maxY, other.maxY));\n+    }\n+\n+    /**\n+     * the number of blocks for the +x, +y, +z from the minimum to the maximum\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getSize(Vector2i dest) {\n+        return dest.set(getSizeX(), getSizeY());\n+    }\n+\n+    /**\n+     * The number of blocks on the X axis\n+     *\n+     * @return number of blocks in the X axis\n+     */\n+    public int getSizeX() {\n+        return this.maxX - this.minX;\n+    }\n+\n+    /**\n+     * The number of blocks on the Y axis\n+     *\n+     * @return number of blocks in the Y axis\n+     */\n+    public int getSizeY() {\n+        return this.maxY - this.minY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTQyODc4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMzowNVrOIE877A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMjoyNjo0NlrOIK5Rng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzU5Ng==", "bodyText": "lets wait on this changes after this #4321", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063596", "createdAt": "2020-12-14T02:03:05Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -518,6 +519,43 @@ public boolean containsPoint(Vector3fc point) {\n         return this.aabb.containsPoint(point);\n     }\n \n+\n+    /**\n+     * Test whether the given aabb lies inside the {@link BlockRegion}\n+     * @param region the region to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsBlockRegion(BlockRegion region) {\n+        return this.containsAABB(region.aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBi} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBi value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBf} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBf value) {\n+        return this.aabb.containsAABB(aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBd} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBd value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI5NTA3MA==", "bodyText": "I'll remove these changes from this PR as they are not related to BlockArea.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r548295070", "createdAt": "2020-12-23T22:26:46Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -518,6 +519,43 @@ public boolean containsPoint(Vector3fc point) {\n         return this.aabb.containsPoint(point);\n     }\n \n+\n+    /**\n+     * Test whether the given aabb lies inside the {@link BlockRegion}\n+     * @param region the region to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsBlockRegion(BlockRegion region) {\n+        return this.containsAABB(region.aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBi} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBi value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBf} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBf value) {\n+        return this.aabb.containsAABB(aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBd} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBd value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzU5Ng=="}, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 390, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}