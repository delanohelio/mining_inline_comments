{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDM1MzM5", "number": 3993, "title": "Convert the module build script to a precompiled plugin", "bodyText": "Contains\nThis moves templates/build.gradle to gradle's buildSrc/ directory where it becomes a precompiled script plugin.\nAlso, it is now a Kotlin gradle script instead of a Groovy gradle script.\nHow to test\n\nHave a workspace with some module sources.\ngroovyw module refresh to replace their build.gradle files.\nmake sure modules build and run as usual.\ntest the publishing actions for the modules, the stuff configured by config/gradle/publish.gradle.\nI'm not sure how to test that part and it's the most likely to have broken.\n\nDiscussion\nThis introduces some new tech for the build process so I've tried to keep the scope of this small. The things under consideration here are:\n\na module's build.gradle becomes as short as plugins { id(\"terasology-module\") }\nstarting to migrate the gradle configuration to Kotlin\n\nI tried to transliterate the groovy config to kotlin as directly as possible. There's little here that cleans things up, and it's not a showcase of the best way to write something in Kotlin. I figured changing languages is a big enough change without other reorganization, refactoring, or redesign on top.\nGitHub's diff for the PR just shows a big delete in one file and add in another, but you can see more detail in this commit: 0a352a7#diff-873dc4d71db70d570c73ef0cb16a8731\nIt has already demonstrated some practical benefits:\n\nBecause the only thing the gradle file in the module subdirectory does is apply the plugin, there's no longer need to groovyw module refresh to update module build configs. Changing it in one place in buildSrc is enough.\nBecause the script plugin is precompiled, the configuration phase of big multi-project workspaces is a lot faster. It only has to compile that mess once after it changes, not a hundred times over for the copies of it in a hundred module directories.", "createdAt": "2020-05-26T20:05:37Z", "url": "https://github.com/MovingBlocks/Terasology/pull/3993", "merged": true, "mergeCommit": {"oid": "ee35c3267f86a51c135d310cb4b2b9e766b97789"}, "closed": true, "closedAt": "2020-05-28T21:02:06Z", "author": {"login": "keturn"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclKvYYgFqTQxODY1NzA1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl0VtDgBqjMzODQ2Mzc0MTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjU3MDUz", "url": "https://github.com/MovingBlocks/Terasology/pull/3993#pullrequestreview-418657053", "createdAt": "2020-05-26T20:32:05Z", "commit": {"oid": "0a352a72c887e16077f95b91c6f56937b06c4b90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozMjowNVrOGavRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozMjowNVrOGavRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MDczMQ==", "bodyText": "Oh, so there is one feature I didn't preserve. The extra styling on the please remove -SNAPSHOT message. I was afraid it was using some groovy-specific formatter or something.\nIn hindsight, it looks like it's probably not groovy-specific? So I guess I probably could put it back.\nOn the other hand, it is importing from an .internal package.", "url": "https://github.com/MovingBlocks/Terasology/pull/3993#discussion_r430690731", "createdAt": "2020-05-26T20:32:05Z", "author": {"login": "keturn"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -16,89 +16,69 @@\n \n // Simple build file for modules - the one under the Core module is the template, will be copied as needed to modules\n \n-// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(\n-buildscript {\n-    repositories {\n-        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case\n-        jcenter()\n-        mavenCentral()\n-        gradlePluginPortal()\n-    }\n-\n-    dependencies {\n-        // Needed for caching reflected data during builds\n-        classpath(\"org.reflections:reflections:0.9.10\")\n-        classpath(\"dom4j:dom4j:1.6.1\")\n-\n-        //Spotbugs\n-        classpath(\"gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.0\")\n-\n-        // SonarQube / Cloud scanning\n-        classpath(\"org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8\")\n-    }\n-}\n-\n import groovy.json.JsonSlurper\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel\n+import org.gradle.plugins.ide.idea.model.IdeaModel\n import org.reflections.Reflections\n-import org.reflections.util.FilterBuilder\n import org.reflections.scanners.SubTypesScanner\n import org.reflections.scanners.TypeAnnotationsScanner\n import org.reflections.util.ConfigurationBuilder\n+import org.reflections.util.FilterBuilder\n+\n \n-ext {\n-    // Read environment variables, including variables passed by jenkins continuous integration server\n-    env = System.getenv()\n-\n-    // This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases\n-    // This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once\n-    // Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules\n-    // Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo\n-    // If a module actually wants release management simply include `\"isReleaseManaged\" : true` in module.txt - this is needed for the engine repo embedded modules\n-    // One option would be to slowly convert modulespace to default to a `develop` + `master` setup living in harmony with associated automation/github tweaks\n-    // Alternatively one more round of refactoring could switch to Git tags, a single `master` branch, and possible other things to help match snaps/PR builds somehow?\n-    bypassModuleReleaseManagement = \"true\"\n+plugins {\n+    id(\"java\")\n+    id(\"idea\")\n+    id(\"eclipse\")\n }\n \n-def moduleDepends = [];\n-def moduleFile = file(\"module.txt\")\n+// Read environment variables, including variables passed by jenkins continuous integration server\n+val env by extra { System.getenv( )}\n+// This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases\n+// This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once\n+// Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules\n+// Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo\n+// If a module actually wants release management simply include `\"isReleaseManaged\" : true` in module.txt - this is needed for the engine repo embedded modules\n+// One option would be to slowly convert modulespace to default to a `develop` + `master` setup living in harmony with associated automation/github tweaks\n+// Alternatively one more round of refactoring could switch to Git tags, a single `master` branch, and possible other things to help match snaps/PR builds somehow?\n+val bypassModuleReleaseManagement by extra(\"true\")\n+\n+val moduleDepends = mutableListOf<String>()\n+val moduleFile = file(\"module.txt\")\n \n // The module file should always exist if the module was correctly created or cloned using Gradle\n if (!moduleFile.exists()) {\n     println(\"Y U NO EXIST MODULE.TXT!\")\n-    throw new GradleException(\"Failed to find module.txt for \" + project.name)\n+    throw GradleException(\"Failed to find module.txt for \" + project.name)\n }\n \n //println \"Scanning for dependencies in module.txt for \" + project.name\n-def slurper = new JsonSlurper()\n-def moduleConfig = slurper.parseText(moduleFile.text)\n-for (dependency in moduleConfig.dependencies) {\n-    if (dependency.id != \"engine\") {\n-        moduleDepends += dependency.id\n+val slurper = JsonSlurper()  // \ud83d\ude02 using groovy's json parser in kotlin\n+val moduleConfig: Map<String, Any> = slurper.parseText(moduleFile.readText())!! as Map<String, Any>\n+for (dependency in moduleConfig[\"dependencies\"] as List<Map<String, String>>) {\n+    if (dependency[\"id\"] != \"engine\") {\n+        moduleDepends.add(dependency[\"id\"]!!)\n     }\n }\n \n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n-version = moduleConfig.version\n-\n-import org.gradle.internal.logging.text.StyledTextOutputFactory\n-import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+version = moduleConfig[\"version\"] as String\n \n // Check for an outright -SNAPSHOT in the loaded version - for ease of use we want to get rid of that everywhere, so warn about it and remove for the variable\n-def undesiredSnapshotTag = version.endsWith(\"-SNAPSHOT\")\n+val undesiredSnapshotTag = version.toString().endsWith(\"-SNAPSHOT\")\n if (undesiredSnapshotTag) {\n     println(\"Taking off undesired -SNAPSHOT\")\n-    version -= \"-SNAPSHOT\"\n-    def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n-    out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a352a72c887e16077f95b91c6f56937b06c4b90"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTM0MDQ2", "url": "https://github.com/MovingBlocks/Terasology/pull/3993#pullrequestreview-418934046", "createdAt": "2020-05-27T07:42:43Z", "commit": {"oid": "b2f00d0c7cad9beca3a1cb28acb902729937d2dd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0Mjo0M1rOGa9LlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0Mjo0M1rOGa9LlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxODU0OA==", "bodyText": "you have extra quotes :D", "url": "https://github.com/MovingBlocks/Terasology/pull/3993#discussion_r430918548", "createdAt": "2020-05-27T07:42:43Z", "author": {"login": "DarkWeird"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// Simple build file for modules - the one under the Core module is the template, will be copied as needed to modules\n+\n+import groovy.json.JsonSlurper\n+import org.gradle.plugins.ide.eclipse.model.EclipseModel\n+import org.gradle.plugins.ide.idea.model.IdeaModel\n+import org.reflections.Reflections\n+import org.reflections.scanners.SubTypesScanner\n+import org.reflections.scanners.TypeAnnotationsScanner\n+import org.reflections.util.ConfigurationBuilder\n+import org.reflections.util.FilterBuilder\n+\n+\n+plugins {\n+    id(\"java\")\n+    id(\"idea\")\n+    id(\"eclipse\")\n+}\n+\n+// Read environment variables, including variables passed by jenkins continuous integration server\n+val env by extra { System.getenv( )}\n+// This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases\n+// This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once\n+// Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules\n+// Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo\n+// If a module actually wants release management simply include `\"isReleaseManaged\" : true` in module.txt - this is needed for the engine repo embedded modules\n+// One option would be to slowly convert modulespace to default to a `develop` + `master` setup living in harmony with associated automation/github tweaks\n+// Alternatively one more round of refactoring could switch to Git tags, a single `master` branch, and possible other things to help match snaps/PR builds somehow?\n+val bypassModuleReleaseManagement by extra(\"true\")\n+\n+val moduleDepends = mutableListOf<String>()\n+val moduleFile = file(\"module.txt\")\n+\n+// The module file should always exist if the module was correctly created or cloned using Gradle\n+if (!moduleFile.exists()) {\n+    println(\"Y U NO EXIST MODULE.TXT!\")\n+    throw GradleException(\"Failed to find module.txt for \" + project.name)\n+}\n+\n+//println \"Scanning for dependencies in module.txt for \" + project.name\n+val slurper = JsonSlurper()  // \ud83d\ude02 using groovy's json parser in kotlin\n+val moduleConfig: Map<String, Any> = slurper.parseText(moduleFile.readText())!! as Map<String, Any>\n+for (dependency in moduleConfig[\"dependencies\"] as List<Map<String, String>>) {\n+    if (dependency[\"id\"] != \"engine\") {\n+        moduleDepends.add(dependency[\"id\"]!!)\n+    }\n+}\n+\n+// Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n+version = moduleConfig[\"version\"] as String\n+\n+// Check for an outright -SNAPSHOT in the loaded version - for ease of use we want to get rid of that everywhere, so warn about it and remove for the variable\n+val undesiredSnapshotTag = version.toString().endsWith(\"-SNAPSHOT\")\n+if (undesiredSnapshotTag) {\n+    println(\"Taking off undesired -SNAPSHOT\")\n+    version = version.toString().removeSuffix(\"-SNAPSHOT\")\n+    println(\"WARNING: Module ${project.name} is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+}\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig[\"isReleaseManaged\"].toString().toBoolean() && env[\"BRANCH_NAME\"] == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    val bypassModuleReleaseManagement by extra(false)\n+} else {\n+    // In the case where we actually are building a snapshot we load -SNAPSHOT into the version variable, even if it wasn't there in module.txt\n+    version = \"${version}-SNAPSHOT\"\n+}\n+\n+// Jenkins-Artifactory integration catches on to this as part of the Maven-type descriptor\n+group = \"org.terasology.modules\"\n+\n+println(\"Version for $project.name loaded as $version for group $group\")\n+\n+// Grab all the common stuff like plugins to use, artifact repositories, code analysis config, Artifactory settings, Git magic\n+// Note that this statement is down a ways because it is affected by the stuff higher in this file like setting versioning\n+apply(from = \"$rootDir/config/gradle/publish.gradle\")\n+\n+// Handle some logic related to where what is\n+configure<SourceSetContainer> {\n+    named(\"main\") {\n+        java.outputDir = File(\"$buildDir/classes\")\n+    }\n+    named(\"test\") {\n+        java.outputDir = File(\"$buildDir/testClasses\")\n+    }\n+}\n+val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+\n+// TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n+configurations.all {\n+    resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n+}\n+\n+// Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n+dependencies {\n+    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n+    \"implementation\"(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f00d0c7cad9beca3a1cb28acb902729937d2dd"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTQ1MTEx", "url": "https://github.com/MovingBlocks/Terasology/pull/3993#pullrequestreview-419545111", "createdAt": "2020-05-27T19:30:22Z", "commit": {"oid": "296ff4bed98ac047032eb85c303546c7f48697b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "517e536635ccce0b34c2b880686325b080c2fb29", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/517e536635ccce0b34c2b880686325b080c2fb29", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(build): towards kotlin: double-quote strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e28a37fa1bb03d06b3ac27094a2b791b885b2d", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/83e28a37fa1bb03d06b3ac27094a2b791b885b2d", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(build): towards kotlin: parens on method calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8124cb015ba9e376287f6e36d71d3e834b37ddb5", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/8124cb015ba9e376287f6e36d71d3e834b37ddb5", "committedDate": "2020-05-28T20:59:12Z", "message": "wip: move build template to script plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7423bf333a1797053ac6d6fe569b6d6c5a51a789", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/7423bf333a1797053ac6d6fe569b6d6c5a51a789", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(build): use terasology-module gradle plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d15564f4a35b3eee2dfdeab784b6d57f7fc10d", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b9d15564f4a35b3eee2dfdeab784b6d57f7fc10d", "committedDate": "2020-05-28T20:59:12Z", "message": "feat(build): kotlinify the module build script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6d46672f5c8373935dafeda1c88af5a8c73726", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/5d6d46672f5c8373935dafeda1c88af5a8c73726", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(build): ignore IDEA `out/` build directory in modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c371bb467462f4f5743d1988db8cf95334980d7d", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/c371bb467462f4f5743d1988db8cf95334980d7d", "committedDate": "2020-05-28T20:59:12Z", "message": "fixup! feat(build): kotlinify the module build script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edfefc6bc1daacaf53427d42bc93681ceceec93a", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/edfefc6bc1daacaf53427d42bc93681ceceec93a", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(build): use type-safe configuration names in dependencies\n\nI had to use the training wheels while this file was still half-baked, but it recognizes these now that it can actually parse and run the whole thing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429c3ea6297621359a69bddf28a482dd966324b1", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/429c3ea6297621359a69bddf28a482dd966324b1", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(ide): base kotlin style settings off Kotlin standard"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "296ff4bed98ac047032eb85c303546c7f48697b8", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/296ff4bed98ac047032eb85c303546c7f48697b8", "committedDate": "2020-05-26T22:14:27Z", "message": "chore(build): use type-safe configuration names in dependencies\n\nI had to use the training wheels while this file was still half-baked, but it recognizes these now that it can actually parse and run the whole thing."}, "afterCommit": {"oid": "429c3ea6297621359a69bddf28a482dd966324b1", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/429c3ea6297621359a69bddf28a482dd966324b1", "committedDate": "2020-05-28T20:59:12Z", "message": "chore(ide): base kotlin style settings off Kotlin standard"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1596, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}