{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMTIzMTY2", "number": 3918, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo1NToxM1rOD4cBIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo1NToxM1rOD4cBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTA1ODg4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNzo1NToxM1rOGPQ6Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxODowMDoyNVrOGPRD9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1ODg2Mw==", "bodyText": "Is there any way to ensure that a specific class can only have two sub-classes? This code relies on the fact that a ParticleSystemFunction is either a GeneratorFunction  or a AffectorFunction ...", "url": "https://github.com/MovingBlocks/Terasology/pull/3918#discussion_r418658863", "createdAt": "2020-05-01T17:55:13Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "diffHunk": "@@ -107,9 +127,38 @@ public void update(final float delta) {\n     }\n \n     @Override\n-    public void configureEmitter(final ParticleEmitterComponent emitter,\n-                                 final BiMap<Class<Component>, AffectorFunction> registeredAffectorFunctions,\n-                                 final BiMap<Class<Component>, GeneratorFunction> registeredGeneratorFunctions) {\n+    public void initialize() {\n+        ModuleEnvironment environment = moduleManager.getEnvironment();\n+\n+        for (Class<?> type : environment.getTypesAnnotatedWith(RegisterParticleSystemFunction.class)) {\n+            RegisterParticleSystemFunction annotation = type.getAnnotation(RegisterParticleSystemFunction.class);\n+\n+            if (!ParticleSystemFunction.class.isAssignableFrom(type)) {\n+                logger.error(\"Cannot register particle system function {}, must be a subclass of ParticleSystemFunction\", type.getSimpleName());\n+            } else {\n+                try {\n+                    ParticleSystemFunction function = (ParticleSystemFunction) type.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717bb9135244e2760bee7443dfe90c9500e6c517"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2MTM2NQ==", "bodyText": "I'm not quite sure I follow", "url": "https://github.com/MovingBlocks/Terasology/pull/3918#discussion_r418661365", "createdAt": "2020-05-01T18:00:25Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/particles/updating/ParticleUpdaterImpl.java", "diffHunk": "@@ -107,9 +127,38 @@ public void update(final float delta) {\n     }\n \n     @Override\n-    public void configureEmitter(final ParticleEmitterComponent emitter,\n-                                 final BiMap<Class<Component>, AffectorFunction> registeredAffectorFunctions,\n-                                 final BiMap<Class<Component>, GeneratorFunction> registeredGeneratorFunctions) {\n+    public void initialize() {\n+        ModuleEnvironment environment = moduleManager.getEnvironment();\n+\n+        for (Class<?> type : environment.getTypesAnnotatedWith(RegisterParticleSystemFunction.class)) {\n+            RegisterParticleSystemFunction annotation = type.getAnnotation(RegisterParticleSystemFunction.class);\n+\n+            if (!ParticleSystemFunction.class.isAssignableFrom(type)) {\n+                logger.error(\"Cannot register particle system function {}, must be a subclass of ParticleSystemFunction\", type.getSimpleName());\n+            } else {\n+                try {\n+                    ParticleSystemFunction function = (ParticleSystemFunction) type.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY1ODg2Mw=="}, "originalCommit": {"oid": "717bb9135244e2760bee7443dfe90c9500e6c517"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}