{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzkwNTc4", "number": 4244, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNToxNDowMFrOFRQToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNToxN1rOFdXygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjM3MjgwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNToxNDowMFrOIXlyRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDowMjo1MFrOIp2gJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYwNzIzNw==", "bodyText": "Using a method to obtain the name of the config is okay for now, but I would like to see a cleaner (more automagic) approach to this. Maybe some sort of mechanism in AutoConfigManager that automatically retrieves the (translatable) name from some common place, or an annotation on the config class? At the very least, I'd recommend making this method non-abstract and returning the simple name of the config class as the default. We should discuss this in a follow-up AutoConfig issue after the PR is merged, ideally after we have a better idea of its scope and usage.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561607237", "createdAt": "2021-01-21T05:14:00Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfig.java", "diffHunk": "@@ -72,4 +73,7 @@ public SimpleUri getId() {\n     void setId(SimpleUri id) {\n         this.id = id;\n     }\n+\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1MzE2Mw==", "bodyText": "To clarify: I don't think we need to make the change in this PR, but this is definitely something to look at in the near future.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561653163", "createdAt": "2021-01-21T07:29:13Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfig.java", "diffHunk": "@@ -72,4 +73,7 @@ public SimpleUri getId() {\n     void setId(SimpleUri id) {\n         this.id = id;\n     }\n+\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYwNzIzNw=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NjM3NA==", "bodyText": "But there show that you should do it explicitly + this property support translation.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561666374", "createdAt": "2021-01-21T07:57:17Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfig.java", "diffHunk": "@@ -72,4 +73,7 @@ public SimpleUri getId() {\n     void setId(SimpleUri id) {\n         this.id = id;\n     }\n+\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYwNzIzNw=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1NTQ5NQ==", "bodyText": "It should be driven by how translations are managed currently from the engine. just retrieving the base name seems fine in the cases. seems simple enough without adding additional complexity.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580755495", "createdAt": "2021-02-23T04:02:50Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfig.java", "diffHunk": "@@ -72,4 +73,7 @@ public SimpleUri getId() {\n     void setId(SimpleUri id) {\n         this.id = id;\n     }\n+\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYwNzIzNw=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjM3OTMzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/config/flexible/ui/NumberRangeConstraintWidgetFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNToxNzoyN1rOIXl1_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNToxNzoyN1rOIXl1_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTYwODE4OQ==", "bodyText": "Creates {@link UISlider} for settings of {@link Number} types with constraint {@link NumberRangeConstraint}\nWe can then simplify the type param description to be The type of {@link Number} or something to that effect.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561608189", "createdAt": "2021-01-21T05:17:27Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/config/flexible/ui/NumberRangeConstraintWidgetFactory.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.config.flexible.ui;\n+\n+import org.terasology.config.flexible.constraints.NumberRangeConstraint;\n+import org.terasology.nui.UIWidget;\n+import org.terasology.nui.databinding.Binding;\n+import org.terasology.nui.widgets.UISlider;\n+\n+/**\n+ * Creates {@link UISlider} for  {@link Number} types with constraint {@link NumberRangeConstraint}\n+ * @param <T> value type of {@link org.terasology.config.flexible.Setting} and {@link org.terasology.config.flexible.constraints.SettingConstraint} used for {@link UISlider}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjYzMzY1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoxMDoyMlrOIXoIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxOToyNjozOFrOIehJNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NTU5Mg==", "bodyText": "What's the rationale behind the creation of a new context here?", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561645592", "createdAt": "2021-01-21T07:10:22Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "diffHunk": "@@ -463,8 +493,16 @@ public void popScreen() {\n         return null;\n     }\n \n-    private <T extends ControlWidget> void initialiseOverlay(T overlay, ResourceUrn screenUri) {\n-        InjectionHelper.inject(overlay);\n+    private <T extends ControlWidget> void initialiseControlWidget(T overlay, ResourceUrn screenUri) {\n+        ContextImpl timedContextForModulesWidgets = new ContextImpl(this.context);\n+\n+        Module declaringModule = moduleEnvironment.get(screenUri.getModuleName());\n+        TypeWidgetLibrary moduleLibrary =\n+                new TypeWidgetLibraryImpl(typeWidgetFactoryRegistry, declaringModule, this.context);\n+        context.put(TypeWidgetLibrary.class, moduleLibrary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NzIyMQ==", "bodyText": "I catch problem there... seems with modules and autoconfigs, or TypeWidgetHandlers...  don't remember exacly", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561667221", "createdAt": "2021-01-21T07:58:48Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "diffHunk": "@@ -463,8 +493,16 @@ public void popScreen() {\n         return null;\n     }\n \n-    private <T extends ControlWidget> void initialiseOverlay(T overlay, ResourceUrn screenUri) {\n-        InjectionHelper.inject(overlay);\n+    private <T extends ControlWidget> void initialiseControlWidget(T overlay, ResourceUrn screenUri) {\n+        ContextImpl timedContextForModulesWidgets = new ContextImpl(this.context);\n+\n+        Module declaringModule = moduleEnvironment.get(screenUri.getModuleName());\n+        TypeWidgetLibrary moduleLibrary =\n+                new TypeWidgetLibraryImpl(typeWidgetFactoryRegistry, declaringModule, this.context);\n+        context.put(TypeWidgetLibrary.class, moduleLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NTU5Mg=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MTIyMA==", "bodyText": "Thanks! As long as it works, I don't have a problem. Wanted to know for my own knowledge.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r568871220", "createdAt": "2021-02-02T19:26:38Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "diffHunk": "@@ -463,8 +493,16 @@ public void popScreen() {\n         return null;\n     }\n \n-    private <T extends ControlWidget> void initialiseOverlay(T overlay, ResourceUrn screenUri) {\n-        InjectionHelper.inject(overlay);\n+    private <T extends ControlWidget> void initialiseControlWidget(T overlay, ResourceUrn screenUri) {\n+        ContextImpl timedContextForModulesWidgets = new ContextImpl(this.context);\n+\n+        Module declaringModule = moduleEnvironment.get(screenUri.getModuleName());\n+        TypeWidgetLibrary moduleLibrary =\n+                new TypeWidgetLibraryImpl(typeWidgetFactoryRegistry, declaringModule, this.context);\n+        context.put(TypeWidgetLibrary.class, moduleLibrary);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NTU5Mg=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY0MTA1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoxMzoyMlrOIXoMZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxOToyNTo1MVrOIehHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NjY5NA==", "bodyText": "Do we want to put this here, visible in the settings menu where players may also access it? I'd rather just instantiate and view these test screens via the console command (and not have them be accessible via the UI).", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561646694", "createdAt": "2021-01-21T07:13:22Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -41,6 +28,9 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n+        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2Nzc2Ng==", "bodyText": "Idk how do it with command :)\njust debug screens for presentation. should will remove before merge. (Outstanding)", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561667766", "createdAt": "2021-01-21T07:59:48Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -41,6 +28,9 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n+        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NjY5NA=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3MDc2OQ==", "bodyText": "Sounds good. There is a console command to create and display any UI screen (I forgot which one).", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r568870769", "createdAt": "2021-02-02T19:25:51Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -41,6 +28,9 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n+        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0NjY5NA=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY1MDA0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/widgets/TypeWidgetFactoryRegistryImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoxNjo0MFrOIXoRnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNzowMjo0M1rOImQaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0ODAyOQ==", "bodyText": "Let's not do this here; let's instead use the annotation and inject the ModuleManager and AssetManager dependencies via @In or create and add the AutoConfigWidgetFactory to the registry in the initialization phase of AutoConfigManager. This will make life easier when we move the type widget library into TeraNUI and extract AutoConfig into its own separate repository. For proper modularity, I would prefer the annotation and injection approach, so that we can separate AutoConfig from the AutoConfig UI implementation as well (if we need to for DestSol, for example).", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561648029", "createdAt": "2021-01-21T07:16:40Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/widgets/TypeWidgetFactoryRegistryImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.rendering.nui.widgets;\n+\n+import com.google.common.collect.Maps;\n+import org.terasology.assets.management.AssetManager;\n+import org.terasology.config.flexible.ui.AutoConfigWidgetFactory;\n+import org.terasology.context.Context;\n+import org.terasology.engine.module.ModuleManager;\n+import org.terasology.nui.widgets.types.TypeWidgetFactory;\n+import org.terasology.nui.widgets.types.TypeWidgetFactoryRegistry;\n+import org.terasology.nui.widgets.types.TypeWidgetLibrary;\n+import org.terasology.nui.widgets.types.builtin.BooleanWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ByteWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.DoubleWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.FloatWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.IntegerWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.LongWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ShortWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.StringWidgetFactory;\n+import org.terasology.persistence.typeHandling.InstanceCreator;\n+import org.terasology.reflection.reflect.ConstructorLibrary;\n+import org.terasology.registry.InjectionHelper;\n+import org.terasology.rendering.nui.widgets.types.ArrayWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.CollectionWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.EnumWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.object.ObjectWidgetFactory;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Registers {@link TypeWidgetFactory} instances that can be used by a {@link TypeWidgetLibrary}\n+ * to generate widgets to edit objects of various types.\n+ */\n+public class TypeWidgetFactoryRegistryImpl implements TypeWidgetFactoryRegistry {\n+    private final Context context;\n+    private final List<TypeWidgetFactory> factories = new ArrayList<>();\n+\n+    private final Map<Type, InstanceCreator<?>> instanceCreators = Maps.newHashMap();\n+    private final ConstructorLibrary constructorLibrary = new ConstructorLibrary(instanceCreators);\n+\n+    public TypeWidgetFactoryRegistryImpl(Context context) {\n+        this.context = context;\n+        addFactoriesForBuiltinTypes();\n+    }\n+\n+    private void addFactoriesForBuiltinTypes() {\n+        add(new ObjectWidgetFactory());\n+\n+        add(new BooleanWidgetFactory());\n+\n+        add(new ByteWidgetFactory());\n+        add(new ShortWidgetFactory());\n+        add(new IntegerWidgetFactory());\n+        add(new LongWidgetFactory());\n+        add(new FloatWidgetFactory());\n+        add(new DoubleWidgetFactory());\n+\n+        add(new StringWidgetFactory());\n+\n+        add(new EnumWidgetFactory());\n+        add(new CollectionWidgetFactory(constructorLibrary));\n+        add(new ArrayWidgetFactory(constructorLibrary));\n+        add(new AutoConfigWidgetFactory(context.get(ModuleManager.class), context.get(AssetManager.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3MjQ2OA==", "bodyText": "I too :D\nBut our current DI too weak.\nNot supports: Collection Inject (best way for Libraries and generators), jsr310.\nBestPractics for DI-world  - use constructor or setters don't break incapsulation.\naaand we have gestalt-di PR which provides nice DI implementation inspired by Spring and Micronauts.\nBy my opinion it should instroduce in DS firsts.\n(also i have some PRs for DI, which prefers Constructor inject and using jsr310(@Inject)and spread DI from heard of engine)", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561672468", "createdAt": "2021-01-21T08:08:25Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/nui/widgets/TypeWidgetFactoryRegistryImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.rendering.nui.widgets;\n+\n+import com.google.common.collect.Maps;\n+import org.terasology.assets.management.AssetManager;\n+import org.terasology.config.flexible.ui.AutoConfigWidgetFactory;\n+import org.terasology.context.Context;\n+import org.terasology.engine.module.ModuleManager;\n+import org.terasology.nui.widgets.types.TypeWidgetFactory;\n+import org.terasology.nui.widgets.types.TypeWidgetFactoryRegistry;\n+import org.terasology.nui.widgets.types.TypeWidgetLibrary;\n+import org.terasology.nui.widgets.types.builtin.BooleanWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ByteWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.DoubleWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.FloatWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.IntegerWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.LongWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ShortWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.StringWidgetFactory;\n+import org.terasology.persistence.typeHandling.InstanceCreator;\n+import org.terasology.reflection.reflect.ConstructorLibrary;\n+import org.terasology.registry.InjectionHelper;\n+import org.terasology.rendering.nui.widgets.types.ArrayWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.CollectionWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.EnumWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.object.ObjectWidgetFactory;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Registers {@link TypeWidgetFactory} instances that can be used by a {@link TypeWidgetLibrary}\n+ * to generate widgets to edit objects of various types.\n+ */\n+public class TypeWidgetFactoryRegistryImpl implements TypeWidgetFactoryRegistry {\n+    private final Context context;\n+    private final List<TypeWidgetFactory> factories = new ArrayList<>();\n+\n+    private final Map<Type, InstanceCreator<?>> instanceCreators = Maps.newHashMap();\n+    private final ConstructorLibrary constructorLibrary = new ConstructorLibrary(instanceCreators);\n+\n+    public TypeWidgetFactoryRegistryImpl(Context context) {\n+        this.context = context;\n+        addFactoriesForBuiltinTypes();\n+    }\n+\n+    private void addFactoriesForBuiltinTypes() {\n+        add(new ObjectWidgetFactory());\n+\n+        add(new BooleanWidgetFactory());\n+\n+        add(new ByteWidgetFactory());\n+        add(new ShortWidgetFactory());\n+        add(new IntegerWidgetFactory());\n+        add(new LongWidgetFactory());\n+        add(new FloatWidgetFactory());\n+        add(new DoubleWidgetFactory());\n+\n+        add(new StringWidgetFactory());\n+\n+        add(new EnumWidgetFactory());\n+        add(new CollectionWidgetFactory(constructorLibrary));\n+        add(new ArrayWidgetFactory(constructorLibrary));\n+        add(new AutoConfigWidgetFactory(context.get(ModuleManager.class), context.get(AssetManager.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0ODAyOQ=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk4NTYxNA==", "bodyText": "In that case, let's move this to AutoConfigManager or even ConfigurationSubsystem.initialise() at least. It definitely shouldn't be here, since (as the method name suggests) we only want to add widget factories of builtin types here.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r576985614", "createdAt": "2021-02-16T17:02:43Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/widgets/TypeWidgetFactoryRegistryImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+package org.terasology.rendering.nui.widgets;\n+\n+import com.google.common.collect.Maps;\n+import org.terasology.assets.management.AssetManager;\n+import org.terasology.config.flexible.ui.AutoConfigWidgetFactory;\n+import org.terasology.context.Context;\n+import org.terasology.engine.module.ModuleManager;\n+import org.terasology.nui.widgets.types.TypeWidgetFactory;\n+import org.terasology.nui.widgets.types.TypeWidgetFactoryRegistry;\n+import org.terasology.nui.widgets.types.TypeWidgetLibrary;\n+import org.terasology.nui.widgets.types.builtin.BooleanWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ByteWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.DoubleWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.FloatWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.IntegerWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.LongWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.ShortWidgetFactory;\n+import org.terasology.nui.widgets.types.builtin.StringWidgetFactory;\n+import org.terasology.persistence.typeHandling.InstanceCreator;\n+import org.terasology.reflection.reflect.ConstructorLibrary;\n+import org.terasology.registry.InjectionHelper;\n+import org.terasology.rendering.nui.widgets.types.ArrayWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.CollectionWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.EnumWidgetFactory;\n+import org.terasology.rendering.nui.widgets.types.object.ObjectWidgetFactory;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Registers {@link TypeWidgetFactory} instances that can be used by a {@link TypeWidgetLibrary}\n+ * to generate widgets to edit objects of various types.\n+ */\n+public class TypeWidgetFactoryRegistryImpl implements TypeWidgetFactoryRegistry {\n+    private final Context context;\n+    private final List<TypeWidgetFactory> factories = new ArrayList<>();\n+\n+    private final Map<Type, InstanceCreator<?>> instanceCreators = Maps.newHashMap();\n+    private final ConstructorLibrary constructorLibrary = new ConstructorLibrary(instanceCreators);\n+\n+    public TypeWidgetFactoryRegistryImpl(Context context) {\n+        this.context = context;\n+        addFactoriesForBuiltinTypes();\n+    }\n+\n+    private void addFactoriesForBuiltinTypes() {\n+        add(new ObjectWidgetFactory());\n+\n+        add(new BooleanWidgetFactory());\n+\n+        add(new ByteWidgetFactory());\n+        add(new ShortWidgetFactory());\n+        add(new IntegerWidgetFactory());\n+        add(new LongWidgetFactory());\n+        add(new FloatWidgetFactory());\n+        add(new DoubleWidgetFactory());\n+\n+        add(new StringWidgetFactory());\n+\n+        add(new EnumWidgetFactory());\n+        add(new CollectionWidgetFactory(constructorLibrary));\n+        add(new ArrayWidgetFactory(constructorLibrary));\n+        add(new AutoConfigWidgetFactory(context.get(ModuleManager.class), context.get(AssetManager.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0ODAyOQ=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY2MzM0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/resources/assets/ui/menu/settingsMenuScreen.ui", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzoyMToxOVrOIXoY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODowOTo0NFrOIXpztg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0OTg5MQ==", "bodyText": "As above; I don't think we should make these test screens visible in the main game UI. If we need to view them, we can always use the console command to load them.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561649891", "createdAt": "2021-01-21T07:21:19Z", "author": {"login": "eviltak"}, "path": "engine/src/main/resources/assets/ui/menu/settingsMenuScreen.ui", "diffHunk": "@@ -60,10 +60,26 @@\n                         \"id\": \"input\",\n                         \"text\": \"${engine:menu#input-settings}\"\n                     },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test\",\n+                        \"text\": \"autoconfig\"\n+                    },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test2\",\n+                        \"text\": \"math\"\n+                    },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test3\",\n+                        \"text\": \"buildin\"\n+                    },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3MzE0Mg==", "bodyText": "Debug screen for presentation.\nshould will remove before merge", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r561673142", "createdAt": "2021-01-21T08:09:44Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/resources/assets/ui/menu/settingsMenuScreen.ui", "diffHunk": "@@ -60,10 +60,26 @@\n                         \"id\": \"input\",\n                         \"text\": \"${engine:menu#input-settings}\"\n                     },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test\",\n+                        \"text\": \"autoconfig\"\n+                    },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test2\",\n+                        \"text\": \"math\"\n+                    },\n+                    {\n+                        \"type\": \"UIButton\",\n+                        \"id\": \"test3\",\n+                        \"text\": \"buildin\"\n+                    },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY0OTg5MQ=="}, "originalCommit": {"oid": "e11ef9583d45e65e46b39a7cfdbe9a38ec00b53d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzODQ2ODI0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNzowNjoxMlrOImQjtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNzozMjozNVrOImRs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk4ODA4Ng==", "bodyText": "Are we still keeping this here? If yes, we must make sure to remove this before the next release. I would still prefer getting rid of this button entirely and using the showScreen engine:autoConfigTestScreen command to load this screen whenever needed for testing. That's the approach I used to load the type widget factory test screens as well.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r576988086", "createdAt": "2021-02-16T17:06:12Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -28,9 +28,7 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n-        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"auto\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc2c05576d51dc9dabfd3e1cf00a242fc5a2f2e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAwMzUzMw==", "bodyText": "Oh. I forgot to refactor names.\nIt should be AutoSettingsScreen. Not Test.\nIt should be as place, which can be improved soon. Or contract place between autoconfigs and typewidgetlibrary", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r577003533", "createdAt": "2021-02-16T17:27:53Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -28,9 +28,7 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n-        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"auto\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk4ODA4Ng=="}, "originalCommit": {"oid": "3fc2c05576d51dc9dabfd3e1cf00a242fc5a2f2e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzAwNjgwNQ==", "bodyText": "Ah, so is it the screen that currently houses all AutoConfigs (like AudioConfig and in the future SystemConfig)? If it is a non-testing screen and is actually meant to be exposed to players, then we can keep this here. We should in the near future figure out a good way to expose autoconfig screens to the end user though.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r577006805", "createdAt": "2021-02-16T17:32:35Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/settings/SettingsMenuScreen.java", "diffHunk": "@@ -28,9 +28,7 @@ public void initialise() {\n         WidgetUtil.trySubscribe(this, \"video\", button -> triggerForwardAnimation(VideoSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"audio\", button -> triggerForwardAnimation(AudioSettingsScreen.ASSET_URI));\n         WidgetUtil.trySubscribe(this, \"input\", button -> triggerForwardAnimation(InputSettingsScreen.ASSET_URI));\n-        WidgetUtil.trySubscribe(this, \"test\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test2\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:mathTypeWidgetTestScreen\")));\n-        WidgetUtil.trySubscribe(this, \"test3\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:builtinTypeWidgetTestScreen\")));\n+        WidgetUtil.trySubscribe(this, \"auto\", button -> triggerForwardAnimation(new ResourceUrn(\"engine:autoConfigTestScreen\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk4ODA4Ng=="}, "originalCommit": {"oid": "3fc2c05576d51dc9dabfd3e1cf00a242fc5a2f2e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MjQ3MTg3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/resources/assets/ui/config/autoConfigScreen.ui", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQyMTo0OTo0OVrOIpuAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQyMTo0OTo0OVrOIpuAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDYxNjIyNA==", "bodyText": "This should get a \"Back\" button at some point \ud83d\ude09", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580616224", "createdAt": "2021-02-22T21:49:49Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/resources/assets/ui/config/autoConfigScreen.ui", "diffHunk": "@@ -0,0 +1,19 @@\n+{\n+  \"type\": \"AutoConfigScreen\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQxNTA4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDowNzoyNlrOIp2kcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQwODoyODozMlrOIqzRFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1NjU5Mw==", "bodyText": "I forget but I think there is a major performance problem with the subtype scanner stuff from reflection. kind of unavoidable I would guess.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580756593", "createdAt": "2021-02-23T04:07:26Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "diffHunk": "@@ -142,6 +153,24 @@ public NUIManagerInternal(TerasologyCanvasRenderer renderer, Context context) {\n             TabbingManager.tabBackInputModifier = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:tabbingModifier\")).get(0);\n             TabbingManager.activateInput = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:activate\")).get(0);\n         }\n+\n+        moduleEnvironment = context.get(ModuleManager.class).getEnvironment();\n+\n+        typeWidgetFactoryRegistry = new TypeWidgetFactoryRegistryImpl(context);\n+        context.put(TypeWidgetFactoryRegistry.class, typeWidgetFactoryRegistry);\n+        registerTypeWidgetFactories();\n+    }\n+\n+    private void registerTypeWidgetFactories() {\n+        for (Class<? extends TypeWidgetFactory> clazz : moduleEnvironment.getSubtypesOf(TypeWidgetFactory.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTc1MTA2Mg==", "bodyText": "It is scans Reflections cache.\nReflections uses structure like Map<Class,List> for Subtypes it fast enough.", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r581751062", "createdAt": "2021-02-24T08:28:32Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/NUIManagerInternal.java", "diffHunk": "@@ -142,6 +153,24 @@ public NUIManagerInternal(TerasologyCanvasRenderer renderer, Context context) {\n             TabbingManager.tabBackInputModifier = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:tabbingModifier\")).get(0);\n             TabbingManager.activateInput = bindsManager.getBindsConfig().getBinds(new SimpleUri(\"engine:activate\")).get(0);\n         }\n+\n+        moduleEnvironment = context.get(ModuleManager.class).getEnvironment();\n+\n+        typeWidgetFactoryRegistry = new TypeWidgetFactoryRegistryImpl(context);\n+        context.put(TypeWidgetFactoryRegistry.class, typeWidgetFactoryRegistry);\n+        registerTypeWidgetFactories();\n+    }\n+\n+    private void registerTypeWidgetFactories() {\n+        for (Class<? extends TypeWidgetFactory> clazz : moduleEnvironment.getSubtypesOf(TypeWidgetFactory.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1NjU5Mw=="}, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyMjMzOnYy", "diffSide": "RIGHT", "path": "engine-tests/src/main/java/org/terasology/config/flexible/TestAutoConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMTo0MFrOIp2ocA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMTo0MFrOIp2ocA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1NzYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2020 The Terasology Foundation\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580757616", "createdAt": "2021-02-23T04:11:40Z", "author": {"login": "pollend"}, "path": "engine-tests/src/main/java/org/terasology/config/flexible/TestAutoConfig.java", "diffHunk": "@@ -1,18 +1,5 @@\n-/*\n- * Copyright 2019 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyMjY5OnYy", "diffSide": "RIGHT", "path": "engine-tests/src/test/java/org/terasology/config/flexible/ui/SettingWidgetFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMTo1N1rOIp2org==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMTo1N1rOIp2org==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1NzY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2020 The Terasology Foundation\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580757678", "createdAt": "2021-02-23T04:11:57Z", "author": {"login": "pollend"}, "path": "engine-tests/src/test/java/org/terasology/config/flexible/ui/SettingWidgetFactoryTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyNDEyOnYy", "diffSide": "RIGHT", "path": "engine-tests/src/test/java/org/terasology/reflection/reflect/ConstructorLibraryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMzowOFrOIp2pgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMzowOFrOIp2pgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1Nzg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2019 MovingBlocks\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *      http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation\n          \n          \n            \n            // SPDX-License-Identifier: Apache-2.0", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580757890", "createdAt": "2021-02-23T04:13:08Z", "author": {"login": "pollend"}, "path": "engine-tests/src/test/java/org/terasology/reflection/reflect/ConstructorLibraryTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyNTY5OnYy", "diffSide": "RIGHT", "path": "engine-tests/src/test/java/org/terasology/reflection/reflect/ConstructorLibraryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMzo1MVrOIp2qjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxMzo1MVrOIp2qjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1ODE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.*;\n          \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertEquals;", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580758158", "createdAt": "2021-02-23T04:13:51Z", "author": {"login": "pollend"}, "path": "engine-tests/src/test/java/org/terasology/reflection/reflect/ConstructorLibraryTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2019 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.reflection.reflect;\n+\n+import org.junit.Test;\n+import org.terasology.reflection.TypeInfo;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyNzE4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNDo0NVrOIp2rZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNDo0NVrOIp2rZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1ODM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2020 The Terasology Foundation\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580758375", "createdAt": "2021-02-23T04:14:45Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/config/flexible/AutoConfigManager.java", "diffHunk": "@@ -1,18 +1,5 @@\n-/*\n- * Copyright 2019 MovingBlocks\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n+// Copyright 2020 The Terasology Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyNzM0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/config/flexible/ui/AssetBackedConstraintWidgetFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNDo1NlrOIp2riw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNDo1NlrOIp2riw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1ODQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2020 The Terasology Foundation\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580758411", "createdAt": "2021-02-23T04:14:56Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/config/flexible/ui/AssetBackedConstraintWidgetFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 The Terasology Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MzQyNzg2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/config/flexible/ui/ConstraintWidgetFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNToxN1rOIp2rzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNDoxNToxN1rOIp2rzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc1ODQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright 2020 The Terasology Foundation\n          \n          \n            \n            // Copyright 2021 The Terasology Foundation", "url": "https://github.com/MovingBlocks/Terasology/pull/4244#discussion_r580758478", "createdAt": "2021-02-23T04:15:17Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/config/flexible/ui/ConstraintWidgetFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97aee71042e5fe5ba6ec38298d7587e9cd335782"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 259, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}