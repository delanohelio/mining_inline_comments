{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjgxMzYy", "number": 4099, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxODowMFrOESLAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1MDoyNFrOESoW3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDkwMTgyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxODowMFrOG3ONEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDoyMDoyNlrOG3QWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA==", "bodyText": "The copy method already performs a conventional \"deep\" copy. To avoid potential confusion, I think it might be better to rename this method to something like copyWithOwnedEntities (or something better) lest someone is misled into thinking that copy only performs a shallow copy.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460557584", "createdAt": "2020-07-26T18:18:00Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java", "diffHunk": "@@ -60,6 +60,14 @@\n      */\n     <TYPE extends T> TYPE copy(TYPE object);\n \n+    /**\n+     * Copies the registered class, also making copies of any entities that it owns\n+     *\n+     * @param object The object to create a copy of\n+     * @return A copy of the class, or null if not registered\n+     */\n+    <TYPE extends T> TYPE deepCopy(TYPE object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MjQ4NA==", "bodyText": "recursivelyDeepCopy ? \ud83d\ude01\nIf we're sure we don't end up with multiple entity owners or circular ownership loops and silly things like that.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460562484", "createdAt": "2020-07-26T19:09:47Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java", "diffHunk": "@@ -60,6 +60,14 @@\n      */\n     <TYPE extends T> TYPE copy(TYPE object);\n \n+    /**\n+     * Copies the registered class, also making copies of any entities that it owns\n+     *\n+     * @param object The object to create a copy of\n+     * @return A copy of the class, or null if not registered\n+     */\n+    <TYPE extends T> TYPE deepCopy(TYPE object);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA=="}, "originalCommit": {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5MjY3Mg==", "bodyText": "That's probably a good idea. I'll change it.\nI can think of one case where an ownership loop could potentially occur (assuming specific hypothetical module features that don't currently exist): if there's an item like the bags from some Minecraft mod I can't remember the name of, storage items that you can access directly from your inventory, it might be possible to put a bag in itself if that isn't specifically prevented. That would basically be a bug with this hypothetical module anyway though.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460592672", "createdAt": "2020-07-27T00:20:26Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassLibrary.java", "diffHunk": "@@ -60,6 +60,14 @@\n      */\n     <TYPE extends T> TYPE copy(TYPE object);\n \n+    /**\n+     * Copies the registered class, also making copies of any entities that it owns\n+     *\n+     * @param object The object to create a copy of\n+     * @return A copy of the class, or null if not registered\n+     */\n+    <TYPE extends T> TYPE deepCopy(TYPE object);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU4NA=="}, "originalCommit": {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDkyNzYwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODo1MToyNVrOG3OZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDowNzozNVrOG3QQKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc2OA==", "bodyText": "It's a matter of preference, but in this case, I personally find it more aesthetically pleasing to leave the copy method as is and introduce a separate method (analogous to ClassLibrary.deepCopy) in this interface that also copies the owned entities over using a boolean to specify conditional behavior. This new method would have a default implementation that delegates to the original copy method, so only those classes which actually have to worry about copying entities have anything to do with it.\nI should say that doing this is not a necessity, and it should be fine as is.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460560768", "createdAt": "2020-07-26T18:51:25Z", "author": {"login": "eviltak"}, "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java", "diffHunk": "@@ -25,8 +25,9 @@\n \n     /**\n      * @param value The value to copy\n+     * @param copyEntities Whether to make deep copies of EntityRefs that are owned by this object\n      * @return A safe to use copy of the given value.\n      */\n-    T copy(T value);\n+    T copy(T value, boolean copyEntities);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5MTE0NQ==", "bodyText": "I did it this way largely because most of the implementations (all but one actually) are either exactly the same for both values of copyEntities or just pass on the flag to a recursive call, therefore this method seemed a bit simpler.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r460591145", "createdAt": "2020-07-27T00:07:35Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategy.java", "diffHunk": "@@ -25,8 +25,9 @@\n \n     /**\n      * @param value The value to copy\n+     * @param copyEntities Whether to make deep copies of EntityRefs that are owned by this object\n      * @return A safe to use copy of the given value.\n      */\n-    T copy(T value);\n+    T copy(T value, boolean copyEntities);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDc2OA=="}, "originalCommit": {"oid": "3519b0366f1b7c65be2a2b88cd8b63dd8d7c7088"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTY1MjA0OnYy", "diffSide": "LEFT", "path": "engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxOTo0MlrOG36Ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxOTo0MlrOG36Ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NzM3NQ==", "bodyText": "Would it be worthwhile to expand on this javadoc a bit now that the cases are understood/covered better? Making it more explicit about the cases and considerations that exist.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461277375", "createdAt": "2020-07-28T02:19:42Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/entitySystem/entity/EntityRef.java", "diffHunk": "@@ -34,8 +34,6 @@\n \n     /**\n      * Copies this entity, creating a new entity with identical components.\n-     * Note: You will need to be careful when copying entities, particularly around ownership - this method does nothing to prevent you ending up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTY4MzM3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjozNjozOFrOG36a7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjozNjozOFrOG36a7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MjAzMQ==", "bodyText": "Maybe toss a tiny sentence into the javadoc here just to cover it beyond param/return? For instance would it copy an owned entity of an owned entity ? Or is it just one layer?", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461282031", "createdAt": "2020-07-28T02:36:38Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/entitySystem/metadata/ComponentMetadata.java", "diffHunk": "@@ -129,4 +129,31 @@ public boolean isBlockLifecycleEventsRequired() {\n     public T getAnnotation(final Class<T> type) {\n         return Iterables.getOnlyElement(Iterables.filter(annotations, type), null);\n     }\n+\n+    /**\n+     * @param object The instance of this class to copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTY5NTEwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0MjoxMVrOG36hRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0MjoxMVrOG36hRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4MzY1Mg==", "bodyText": "Unused exports now", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461283652", "createdAt": "2020-07-28T02:42:11Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/reflection/copy/CopyStrategyLibrary.java", "diffHunk": "@@ -18,6 +18,8 @@\n import com.google.common.collect.Maps;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.terasology.entitySystem.entity.EntityRef;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTY5NzgxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0Mzo0MVrOG36iww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTo1NDoyM1rOG4cYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDAzNQ==", "bodyText": "This license header reminds me - you can use a compact version now, although it is still just trickling out so most are still this old one. New one is hooked up in IntelliJ so you can delete old -> right click where it was -> generate -> copyright\n// Copyright 2020 The Terasology Foundation\n// SPDX-License-Identifier: Apache-2.0", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284035", "createdAt": "2020-07-28T02:43:41Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzODQwNw==", "bodyText": "I had it like this just because I copied the whole file from another copy strategy originally.", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461838407", "createdAt": "2020-07-28T19:54:23Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDAzNQ=="}, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTcwMDE5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NDo1NVrOG36kHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NDo1NVrOG36kHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDM4Mg==", "bodyText": "May be useful to ever so slightly expand on this, since previously what was deep or not was ambiguous - would be nice to enter the future with everything more explicit with less room for interpretation :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284382", "createdAt": "2020-07-28T02:44:55Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/reflection/copy/strategy/EntityCopyStrategy.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.reflection.copy.strategy;\n+\n+import org.terasology.entitySystem.entity.EntityRef;\n+import org.terasology.reflection.copy.CopyStrategy;\n+\n+/**\n+* Provides a deep copy of an entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTcwMjYyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowM1rOG36ldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowM1rOG36ldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDcyNQ==", "bodyText": "Unused import now thanks to this", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461284725", "createdAt": "2020-07-28T02:46:03Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/reflection/metadata/ClassMetadata.java", "diffHunk": "@@ -100,10 +100,9 @@ private void addFields(CopyStrategyLibrary copyStrategyLibrary, ReflectFactory f\n             if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers())) {\n                 continue;\n             }\n-            CopyStrategy<?> copyStrategy = copyStrategyLibrary.getStrategy(field.getGenericType());\n \n             try {\n-                FIELD metadata = createField(field, copyStrategy, factory);\n+                FIELD metadata = createField(field, copyStrategyLibrary, factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTcxMDM4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/entitySystem/metadata/EventMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1MDoyNFrOG36p6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo1MDoyNFrOG36p6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NTg2Nw==", "bodyText": "This class has one of those goofy empty javadoc blocks:\n/**\n */\n\nIf you notice those and/or are in there anyway making changes that might mean you understand the class a bit feel free to sprinkle a little bit of javadoc - no obligation though, even just wiping the empty block helps keep stuff a bit more tidy", "url": "https://github.com/MovingBlocks/Terasology/pull/4099#discussion_r461285867", "createdAt": "2020-07-28T02:50:24Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/entitySystem/metadata/EventMetadata.java", "diffHunk": "@@ -86,7 +86,7 @@ public boolean isSkipInstigator() {\n     }\n \n     @Override\n-    protected <V> ReplicatedFieldMetadata<T, ?> createField(Field field, CopyStrategy<V> copyStrategy, ReflectFactory factory) throws InaccessibleFieldException {\n-        return new ReplicatedFieldMetadata<>(this, field, copyStrategy, factory, true);\n+    protected ReplicatedFieldMetadata<T, ?> createField(Field field, CopyStrategyLibrary copyStrategyLibrary, ReflectFactory factory) throws InaccessibleFieldException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338f7cef50d8d040d334696e72bb7e6834ebac37"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 341, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}