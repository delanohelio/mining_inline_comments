{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDk4NDA2", "number": 4050, "title": "feat: add BlockArea to replace Rect2i", "bodyText": "This implements the same pattern for BlockRegion.", "createdAt": "2020-06-14T05:39:05Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4050", "merged": true, "mergeCommit": {"oid": "691aac09a5027b085585477a1a313a059d5a43ff"}, "closed": true, "closedAt": "2020-12-27T17:13:35Z", "author": {"login": "pollend"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrOMm2AFqTQzMDIzMDA1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqUh-eAH2gAyNDM0MDk4NDA2OjE2N2YzOWY1Y2YyZGI0YTM4MTI3ZWQ2YTgwYmM1Mzg3MTU0NjJkMGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjMwMDU2", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-430230056", "createdAt": "2020-06-14T15:42:59Z", "commit": {"oid": "59d99fdf796f1e8b150ea951628855952827d079"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTo0Mjo1OVrOGjd2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNTo0Mjo1OVrOGjd2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg0MjMwOQ==", "bodyText": "\"Square\" in the sense of 90\u00b0 angles, or in the sense of a quadratic rectangle with all four sides of equal length?\nI'd vote to call this RectangularRegion for clearer naming and to avoid confusion.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r439842309", "createdAt": "2020-06-14T15:42:59Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/SquareRegion.java", "diffHunk": "@@ -0,0 +1,671 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+/**\n+ * is a bounded rectangle describing squares contained within.\n+ * A {@link SquareRegion} is described and backed by an {@link org.joml.Rectanglei}\n+ */\n+public class SquareRegion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d99fdf796f1e8b150ea951628855952827d079"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b4ac0b894bff0019b585617d85530ea3261dda", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/88b4ac0b894bff0019b585617d85530ea3261dda", "committedDate": "2020-11-14T22:10:57Z", "message": "add SquareRegion to replace Rect2i"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2a8088a50cac644a497c5c6f2c190f238f24df", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/df2a8088a50cac644a497c5c6f2c190f238f24df", "committedDate": "2020-11-14T22:10:57Z", "message": "rename to RectangularRegion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f541669e5795536f2f5ce9058309fc9df2354b", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/72f541669e5795536f2f5ce9058309fc9df2354b", "committedDate": "2020-11-14T22:10:57Z", "message": "add missing contains for both regions and added tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd3fdf4f3f9d9d273a2e152feef4c0ec1a60cbff", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/cd3fdf4f3f9d9d273a2e152feef4c0ec1a60cbff", "committedDate": "2020-06-15T00:32:06Z", "message": "add missing contains for both regions and added tests"}, "afterCommit": {"oid": "72f541669e5795536f2f5ce9058309fc9df2354b", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/72f541669e5795536f2f5ce9058309fc9df2354b", "committedDate": "2020-11-14T22:10:57Z", "message": "add missing contains for both regions and added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33acf882700e0f7b48e49f7c61ea1e5c521f3a6", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/c33acf882700e0f7b48e49f7c61ea1e5c521f3a6", "committedDate": "2020-11-14T22:20:24Z", "message": "Merge branch 'develop' into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a110566b11b0e1ee1e4273d35649acb46d94bc01", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a110566b11b0e1ee1e4273d35649acb46d94bc01", "committedDate": "2020-11-25T18:21:03Z", "message": "Merge branch 'develop' into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6671fb429769f92fd07dc262b1630a257055e9b9", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/6671fb429769f92fd07dc262b1630a257055e9b9", "committedDate": "2020-12-12T17:33:37Z", "message": "Merge remote-tracking branch 'upstream/develop' into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986bb62c4701e7af9c790a122f9c31fe164caf06", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/986bb62c4701e7af9c790a122f9c31fe164caf06", "committedDate": "2020-12-12T17:33:55Z", "message": "Merge branch 'feature/square_region' of github.com:pollend/Terasology into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53046d457fac3c6a2206f347883fe1981296552d", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/53046d457fac3c6a2206f347883fe1981296552d", "committedDate": "2020-12-13T14:46:02Z", "message": "Merge branch 'develop' into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "168dc5e164da0d608eb2708e8470cd2fd3107d03", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/168dc5e164da0d608eb2708e8470cd2fd3107d03", "committedDate": "2020-12-13T17:51:55Z", "message": "- rename RectangularRegion >>> BlockArea\n- add BlockAreas utility class\n- adjust tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ff710cf0d0f5dac89041cb05b1b6369ce0da14", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/89ff710cf0d0f5dac89041cb05b1b6369ce0da14", "committedDate": "2020-12-13T19:47:49Z", "message": "... something something rewrite ..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6308b3a4d32fedea58be6270d7120d6c9d9698", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/3f6308b3a4d32fedea58be6270d7120d6c9d9698", "committedDate": "2020-12-13T20:06:44Z", "message": "... moar WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b3b127c662d1efd6e4df695b3cec4560bcc4d10d", "committedDate": "2020-12-13T20:18:46Z", "message": "..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTU2MjI3", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-550956227", "createdAt": "2020-12-13T20:22:29Z", "commit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMjoyOVrOIE47IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMjoyOVrOIE47IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzg1Nw==", "bodyText": "@pollend Is this too much overhead keeping the vectors? Should I instead use just 4 plain integers?", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541997857", "createdAt": "2020-12-13T20:22:29Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTU2Mjk5", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-550956299", "createdAt": "2020-12-13T20:23:23Z", "commit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMzoyM1rOIE47hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoyMzoyM1rOIE47hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5Nzk1OA==", "bodyText": "@pollend Should we compute the bounding rectangle every time something changes, or just when it is requested (lazy)? I've prepared to do the latter, not fully implemented yet, though.", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r541997958", "createdAt": "2020-12-13T20:23:23Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,622 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.AABBf;\n+import org.joml.AABBi;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Rectanglei;\n+import org.joml.RoundingMode;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+import org.joml.Vector3ic;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private final Vector2i min = new Vector2i(Integer.MAX_VALUE);\n+    private final Vector2i max = new Vector2i(Integer.MIN_VALUE);\n+\n+    private boolean dirty = true;\n+    private Rectanglef rectangle = new Rectanglef();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b127c662d1efd6e4df695b3cec4560bcc4d10d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f43b7423b7793a8a0444acd59218157cc0d070b5", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/f43b7423b7793a8a0444acd59218157cc0d070b5", "committedDate": "2020-12-13T20:27:57Z", "message": "chore: remove RectangleUtility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd7fd624f3bd49f4ac10de3d397d1347e4b18d9d", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/dd7fd624f3bd49f4ac10de3d397d1347e4b18d9d", "committedDate": "2020-12-13T21:05:02Z", "message": "test: make test arguments source explicit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1cc80127fed9bc405001719b61d6e7afe5ddc1", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/1f1cc80127fed9bc405001719b61d6e7afe5ddc1", "committedDate": "2020-12-13T22:26:29Z", "message": "test: more tests for intersection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ae58d1527d3b9be34de1fc947b5576b07b50cc54", "committedDate": "2020-12-13T23:09:48Z", "message": "perf: replace vectors for min and max by plain integers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTk3OTQy", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-550997942", "createdAt": "2020-12-14T01:57:13Z", "commit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMTo1NzoxM1rOIE819g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjowMzowNVrOIE877A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MjA3MA==", "bodyText": "why do we need a copy method when can just use a constructor method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * @return a copy of this block area\n          \n          \n            \n                 */\n          \n          \n            \n                public BlockArea copy() {\n          \n          \n            \n                    return new BlockArea().set(this);\n          \n          \n            \n                }\n          \n          \n            \n                /**\n          \n          \n            \n                 */\n          \n          \n            \n                public BlockArea(BlockArea area) {\n          \n          \n            \n                     this.set(this);\n          \n          \n            \n                }", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542062070", "createdAt": "2020-12-14T01:57:13Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2Mjc1MQ==", "bodyText": "I think we should lean more on using assertions.\nhttps://www.geeksforgeeks.org/assertions-in-java/", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542062751", "createdAt": "2020-12-14T01:59:50Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzI2Mw==", "bodyText": "for the size you need to add 1.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.maxX - this.minX;\n          \n          \n            \n                    return this.maxX - this.minX + 1;", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063263", "createdAt": "2020-12-14T02:01:56Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);\n+        this.minX = minX;\n+        this.minY = minY;\n+        Rectangles.setMin(this.bounds, minX - 0.5f, minY - 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maximum coordinate of the second block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param max the second coordinate of the second block\n+     * @return this\n+     */\n+    public BlockArea setMax(Vector2ic max) {\n+        return setMax(max.x(), max.y());\n+    }\n+\n+    /**\n+     * sets the maximum block for this {@link BlockRegion}\n+     *\n+     * @param maxX the x coordinate of the first block\n+     * @param maxY the y coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMax(int maxX, int maxY) {\n+        Preconditions.checkArgument(maxX >= this.minX ^ this.minX == Integer.MAX_VALUE);\n+        Preconditions.checkArgument(maxY >= this.minY ^ this.minY == Integer.MAX_VALUE);\n+        this.maxX = maxX;\n+        this.maxY = maxY;\n+        Rectangles.setMax(this.bounds, maxX + 0.5f, maxY + 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and <code>other</code>.\n+     *\n+     * @param other {@link BlockRegion}\n+     * @return this\n+     */\n+    public BlockArea union(BlockArea other) {\n+        return union(other.minX, other.minY).union(other.minX, other.maxY);\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and the given block <code>p</code>.\n+     *\n+     * @param p the position of the block\n+     * @return this\n+     */\n+    public BlockArea union(Vector2ic p) {\n+        return union(p.x(), p.y());\n+    }\n+\n+    public BlockArea union(int x, int y) {\n+        return union(x, y, this);\n+    }\n+\n+    /**\n+     * Compute the union of <code>this</code> and the given block <code>(x, y, z)</code> and stores the result in\n+     * <code>dest</code>\n+     *\n+     * @param x the x coordinate of the block\n+     * @param y the y coordinate of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockArea union(int x, int y, BlockArea dest) {\n+        return dest\n+                .setMin(Math.min(dest.minX, x), Math.min(dest.minY, y))\n+                .setMax(Math.max(dest.maxX, x), Math.max(dest.maxY, y));\n+    }\n+\n+    /**\n+     * calculate the BlockRegion that is intersected between another region\n+     *\n+     * @param other the other BlockRegion\n+     * @param dest holds the result\n+     * @return dest\n+     */\n+    public BlockArea intersection(BlockArea other, BlockArea dest) {\n+        return dest\n+                .setMin(Math.max(this.minX, other.minX), Math.max(this.minY, other.minY))\n+                .setMax(Math.min(this.maxX, other.maxX), Math.min(this.maxY, other.maxY));\n+    }\n+\n+    /**\n+     * the number of blocks for the +x, +y, +z from the minimum to the maximum\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getSize(Vector2i dest) {\n+        return dest.set(getSizeX(), getSizeY());\n+    }\n+\n+    /**\n+     * The number of blocks on the X axis\n+     *\n+     * @return number of blocks in the X axis\n+     */\n+    public int getSizeX() {\n+        return this.maxX - this.minX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzQzMw==", "bodyText": "you need to add 1 for the size so its consistent with BlockRegion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return this.maxY - this.minY;\n          \n          \n            \n                    return this.maxY - this.minY + 1;", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063433", "createdAt": "2020-12-14T02:02:28Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockArea.java", "diffHunk": "@@ -0,0 +1,508 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.block;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+import org.joml.Math;\n+import org.joml.Rectangled;\n+import org.joml.Rectanglef;\n+import org.joml.Vector2fc;\n+import org.joml.Vector2i;\n+import org.joml.Vector2ic;\n+\n+/**\n+ * A bounded axis-aligned rectangle of blocks.\n+ * <p>\n+ * A block area is described and backed by an {@link org.joml.Rectanglei}\n+ *\n+ * @see BlockAreas\n+ */\n+public class BlockArea {\n+    private int minX = Integer.MAX_VALUE;\n+    private int minY = Integer.MAX_VALUE;\n+    private int maxX = Integer.MIN_VALUE;\n+    private int maxY = Integer.MIN_VALUE;\n+\n+    private Rectanglef bounds = new Rectanglef();\n+\n+    public BlockArea() {\n+    }\n+\n+    /**\n+     * @return a copy of this block area\n+     */\n+    public BlockArea copy() {\n+        return new BlockArea().set(this);\n+    }\n+\n+    public boolean isValid() {\n+        return minX <= maxX && minY <= maxY;\n+    }\n+\n+    public boolean isEmpty() {\n+        return !isValid();\n+    }\n+\n+    public BlockArea set(BlockArea other) {\n+        this.minX = other.minX;\n+        this.minY = other.minY;\n+        this.maxX = other.maxX;\n+        this.maxY = other.maxY;\n+\n+        Rectangles.set(this.bounds, other.bounds);\n+        return this;\n+    }\n+\n+    /**\n+     * get the minimum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMin(Vector2i dest) {\n+        return dest.set(minX, minY);\n+    }\n+\n+    /**\n+     * get the maximum block coordinate\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getMax(Vector2i dest) {\n+        return dest.set(maxX, maxY);\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMaxX() {\n+        return maxX;\n+    }\n+\n+    /**\n+     * the maximum coordinate of the second block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMaxY() {\n+        return maxY;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block x\n+     *\n+     * @return the minimum coordinate x\n+     */\n+    public int getMinX() {\n+        return minX;\n+    }\n+\n+    /**\n+     * the minimum coordinate of the first block y\n+     *\n+     * @return the minimum coordinate y\n+     */\n+    public int getMinY() {\n+        return minY;\n+    }\n+\n+    /**\n+     * Sets the minimum coordinate of the first block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param min the first coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMin(Vector2ic min) {\n+        return setMin(min.x(), min.y());\n+    }\n+\n+    /**\n+     * sets the minimum block for this {@link BlockRegion}\n+     *\n+     * @param minX the x coordinate of the first block\n+     * @param minY the y coordinate of the first block\n+     * @return this\n+     */\n+    public BlockArea setMin(int minX, int minY) {\n+        Preconditions.checkArgument(minX <= this.maxX ^ this.maxX == Integer.MIN_VALUE);\n+        Preconditions.checkArgument(minY <= this.maxY ^ this.maxY == Integer.MIN_VALUE);\n+        this.minX = minX;\n+        this.minY = minY;\n+        Rectangles.setMin(this.bounds, minX - 0.5f, minY - 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the maximum coordinate of the second block for <code>this</code> {@link BlockRegion}\n+     *\n+     * @param max the second coordinate of the second block\n+     * @return this\n+     */\n+    public BlockArea setMax(Vector2ic max) {\n+        return setMax(max.x(), max.y());\n+    }\n+\n+    /**\n+     * sets the maximum block for this {@link BlockRegion}\n+     *\n+     * @param maxX the x coordinate of the first block\n+     * @param maxY the y coordinate of the first block\n+     * @return this\n+     */\n+    @SuppressWarnings(\"checkstyle:HiddenField\")\n+    public BlockArea setMax(int maxX, int maxY) {\n+        Preconditions.checkArgument(maxX >= this.minX ^ this.minX == Integer.MAX_VALUE);\n+        Preconditions.checkArgument(maxY >= this.minY ^ this.minY == Integer.MAX_VALUE);\n+        this.maxX = maxX;\n+        this.maxY = maxY;\n+        Rectangles.setMax(this.bounds, maxX + 0.5f, maxY + 0.5f);\n+        return this;\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and <code>other</code>.\n+     *\n+     * @param other {@link BlockRegion}\n+     * @return this\n+     */\n+    public BlockArea union(BlockArea other) {\n+        return union(other.minX, other.minY).union(other.minX, other.maxY);\n+    }\n+\n+    /**\n+     * Set <code>this</code> to the union of <code>this</code> and the given block <code>p</code>.\n+     *\n+     * @param p the position of the block\n+     * @return this\n+     */\n+    public BlockArea union(Vector2ic p) {\n+        return union(p.x(), p.y());\n+    }\n+\n+    public BlockArea union(int x, int y) {\n+        return union(x, y, this);\n+    }\n+\n+    /**\n+     * Compute the union of <code>this</code> and the given block <code>(x, y, z)</code> and stores the result in\n+     * <code>dest</code>\n+     *\n+     * @param x the x coordinate of the block\n+     * @param y the y coordinate of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public BlockArea union(int x, int y, BlockArea dest) {\n+        return dest\n+                .setMin(Math.min(dest.minX, x), Math.min(dest.minY, y))\n+                .setMax(Math.max(dest.maxX, x), Math.max(dest.maxY, y));\n+    }\n+\n+    /**\n+     * calculate the BlockRegion that is intersected between another region\n+     *\n+     * @param other the other BlockRegion\n+     * @param dest holds the result\n+     * @return dest\n+     */\n+    public BlockArea intersection(BlockArea other, BlockArea dest) {\n+        return dest\n+                .setMin(Math.max(this.minX, other.minX), Math.max(this.minY, other.minY))\n+                .setMax(Math.min(this.maxX, other.maxX), Math.min(this.maxY, other.maxY));\n+    }\n+\n+    /**\n+     * the number of blocks for the +x, +y, +z from the minimum to the maximum\n+     *\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public Vector2i getSize(Vector2i dest) {\n+        return dest.set(getSizeX(), getSizeY());\n+    }\n+\n+    /**\n+     * The number of blocks on the X axis\n+     *\n+     * @return number of blocks in the X axis\n+     */\n+    public int getSizeX() {\n+        return this.maxX - this.minX;\n+    }\n+\n+    /**\n+     * The number of blocks on the Y axis\n+     *\n+     * @return number of blocks in the Y axis\n+     */\n+    public int getSizeY() {\n+        return this.maxY - this.minY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA2MzU5Ng==", "bodyText": "lets wait on this changes after this #4321", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#discussion_r542063596", "createdAt": "2020-12-14T02:03:05Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/world/block/BlockRegion.java", "diffHunk": "@@ -518,6 +519,43 @@ public boolean containsPoint(Vector3fc point) {\n         return this.aabb.containsPoint(point);\n     }\n \n+\n+    /**\n+     * Test whether the given aabb lies inside the {@link BlockRegion}\n+     * @param region the region to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsBlockRegion(BlockRegion region) {\n+        return this.containsAABB(region.aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBi} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBi value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBf} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBf value) {\n+        return this.aabb.containsAABB(aabb);\n+    }\n+\n+    /**\n+     * Test whether the given {@link AABBd} lies inside the {@link BlockRegion}\n+     * @param value the aabb to test\n+     * @return <code>true</code> iff the given value lies inside this {@link BlockRegion}; <code>false</code> otherwise\n+     */\n+    public boolean containsAABB(AABBd value) {\n+        return this.aabb.containsAABB(value);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae58d1527d3b9be34de1fc947b5576b07b50cc54"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc050189a2822b1383c5f6e36ecfc9a55b162de5", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fc050189a2822b1383c5f6e36ecfc9a55b162de5", "committedDate": "2020-12-23T22:28:22Z", "message": "feat(BlockArea): add immutable interface for BlockArea"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430c9caa56062556ea548afe315d65a183661f8e", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/430c9caa56062556ea548afe315d65a183661f8e", "committedDate": "2020-12-23T22:29:23Z", "message": "feat(BlockArea): implement BlockArea in terms of BlockAreac"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9902589da032986e887723eb8b8cda093f6aafe", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/e9902589da032986e887723eb8b8cda093f6aafe", "committedDate": "2020-12-23T22:29:36Z", "message": "feat(BlockArea): remove BlockAreas utility class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce71e1813fd148021c11d0080a4379b15177f22", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fce71e1813fd148021c11d0080a4379b15177f22", "committedDate": "2020-12-23T22:29:46Z", "message": "test(BlockArea): adjust tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d306d7f7b4c62942ddab3c8f0fbc2ed5240d7d3", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/8d306d7f7b4c62942ddab3c8f0fbc2ed5240d7d3", "committedDate": "2020-12-23T22:30:19Z", "message": "revert changes to BlockRegion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38acfea00bf59e4c7a619705cf78fa24b06fb13c", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/38acfea00bf59e4c7a619705cf78fa24b06fb13c", "committedDate": "2020-12-23T22:49:59Z", "message": "Merge branch 'develop' into feature/square_region"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7b97d4dac62e83a5efc92fb13eb4f4bd4ba232", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/5f7b97d4dac62e83a5efc92fb13eb4f4bd4ba232", "committedDate": "2020-12-24T11:32:30Z", "message": "refactor: remove dest variants for modifying methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34f1092fc549baf690d91f89471b7e0baac6959", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/c34f1092fc549baf690d91f89471b7e0baac6959", "committedDate": "2020-12-24T21:13:22Z", "message": "Revert \"refactor: remove dest variants for modifying methods\"\n\nThis reverts commit 5f7b97d4dac62e83a5efc92fb13eb4f4bd4ba232."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b49bd6c895f0ae7ee37d71ad7bf309360a23a31", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/6b49bd6c895f0ae7ee37d71ad7bf309360a23a31", "committedDate": "2020-12-24T21:17:25Z", "message": "feat(BlockArea): add `dest` variants for `setPosition`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a6a69239cd4bfb18b1f1f5435e3c82c7ac5711", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a0a6a69239cd4bfb18b1f1f5435e3c82c7ac5711", "committedDate": "2020-12-24T21:19:21Z", "message": "fix(BlockArea): set correct max corner in `setSize`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec6c6da491a51fc39a36f88d60e155ea69f27b0e", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ec6c6da491a51fc39a36f88d60e155ea69f27b0e", "committedDate": "2020-12-26T19:42:04Z", "message": "Merge branch 'develop' into feature/square_region"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODk2MzEx", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-558896311", "createdAt": "2020-12-26T23:51:54Z", "commit": {"oid": "ec6c6da491a51fc39a36f88d60e155ea69f27b0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTQyNjU0", "url": "https://github.com/MovingBlocks/Terasology/pull/4050#pullrequestreview-558942654", "createdAt": "2020-12-27T16:44:28Z", "commit": {"oid": "ec6c6da491a51fc39a36f88d60e155ea69f27b0e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167f39f5cf2db4a38127ed6a80bc538715462d0e", "author": {"user": {"login": "skaldarnar", "name": "Tobias Nett"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/167f39f5cf2db4a38127ed6a80bc538715462d0e", "committedDate": "2020-12-27T16:57:16Z", "message": "Merge branch 'develop' into feature/square_region"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1473, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}