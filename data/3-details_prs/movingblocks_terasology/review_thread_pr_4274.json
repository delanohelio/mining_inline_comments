{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjcwNTI1", "number": 4274, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNDoyNlrOE9pvtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNDoyNlrOE9pvtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDgyNTUwOnYy", "diffSide": "RIGHT", "path": "subsystems/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNDoyNlrOH6dG2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxNDoyNlrOH6dG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1NjM0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/MovingBlocks/Terasology/pull/4274#discussion_r531056345", "createdAt": "2020-11-26T14:14:26Z", "author": {"login": "jdrueckert"}, "path": "subsystems/build.gradle", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+import org.reflections.Reflections\n+import org.reflections.scanners.SubTypesScanner\n+import org.reflections.scanners.TypeAnnotationsScanner\n+import org.reflections.util.ConfigurationBuilder\n+\n+subprojects {\n+    // Hack for getting sourcesSets.main.output there. \n+    plugins.apply('java')\n+    plugins.apply('idea')\n+    def sourceSets = project.getConvention().getPlugin(JavaPluginConvention.class).sourceSets\n+\n+    \n+    sourceSets.main.java.outputDir = new File(\"$buildDir/classes\")\n+    idea {\n+        module {\n+            // Change around the output a bit\n+            inheritOutputDirs = false\n+            outputDir = file('build/classes')\n+            testOutputDir = file('build/testClasses')\n+            downloadSources = true\n+        }\n+    }\n+\n+    task cacheReflections {\n+        description = 'Caches reflection output to make regular startup faster. May go stale and need cleanup at times.'\n+        inputs.files sourceSets.main.output.classesDirs,\n+                // getClassesDir from all sourceSets (for any jvm (seems) language)\n+                configurations.\"${sourceSets.main.runtimeClasspathConfigurationName}\"\n+\n+        outputs.upToDateWhen {classes.state.upToDate}\n+        def outputDir = sourceSets.main.java.outputDir\n+        outputs.file(\"$outputDir/reflections.cache\")\n+        dependsOn classes\n+\n+        doLast {\n+            // Without the .mkdirs() we might hit a scenario where the classes dir doesn't exist yet\n+            Reflections reflections = new Reflections(new ConfigurationBuilder()\n+                    .filterInputsBy { it.startsWith('org/terasology/')}\n+                    .addUrls(inputs.files.collect { it.toURI().toURL() })\n+                    .setScanners(new TypeAnnotationsScanner(), new SubTypesScanner()))\n+            reflections.save(\"$outputDir/reflections.cache\")\n+        }\n+    }\n+    tasks.getByName('jar').dependsOn('cacheReflections')\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425615867db4d29dd2b21836a26971ac6582f7bf"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}