{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDY4OTI5", "number": 4094, "title": "feat: Add ModifiableValue type", "bodyText": "Contains\nAdded a ModifiableValue type to the engine which can be used by Components so that Systems changing the values of these components do not affect the real values but rather add PreModifiers, multipliers and PostModifiers which can then form a mathematically correct altered value. This PR is a result of a discussion with @skaldarnar @jellysnake @ktksan and @e-aakash after #4063 (comment) .\nComponents must now mention whether their data is to be modified in-place / if the data is modified via an AbstractModifiableEvent / if the data members are of ModifiableValue type, in their respective Javadocs\nThis PR also includes a TypeHandler to handle proper deserialization and serialization of ModifiableValue from prefabs and to persist the data across saves.\nHow to use\nAdd the ModifiableValue type as the datatype of the data members of a component so that the value of the component can be modified correctly with different modifying systems acting on the component, without changing the base value of the component. An initial value can be given via the constructor and the .getValue() method can be used to get the value of the ModifiableValue type variable at any point\nOutstanding before merging\n\n Javadoc\n Testing of the type with existing components\n Further discussion on immutable values/return types", "createdAt": "2020-07-22T11:51:06Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4094", "merged": true, "mergeCommit": {"oid": "7a86e7531f9a7daaaa81febb8675c03b2d28dc30"}, "closed": true, "closedAt": "2020-08-03T10:05:28Z", "author": {"login": "vedant-shroff"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3Z30pgFqTQ1MzI1ODg4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7NXwuAFqTQ1OTgyMzk2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMjU4ODgz", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#pullrequestreview-453258883", "createdAt": "2020-07-22T12:15:58Z", "commit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxNTo1OFrOG1fuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoyMDoyOFrOG1f3dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NzQ0OA==", "bodyText": "I'd think that we can remove the Math.max(...) for this class - a value on it's own can very well be negative! If the event wants to provide this guarantee it can wrap a ModifiableValue and perform that operation.", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458747448", "createdAt": "2020-07-22T12:15:58Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private TFloatList modifiers = new TFloatArrayList();\n+    private TFloatList multipliers = new TFloatArrayList();\n+    private TFloatList postModifiers = new TFloatArrayList();\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public void multiply(float amount) {\n+        this.multipliers.add(amount);\n+    }\n+\n+    public void add(float amount) {\n+        modifiers.add(amount);\n+    }\n+\n+    public void postAdd(float amount) {\n+        postModifiers.add(amount);\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)\n+     * </pre>\n+     *\n+     * <emph>The result value is guaranteed to be non-negative!</emph>\n+     */\n+    public float getValue() {\n+        return Math.max(0, baseValue + modifiers.sum() * product(multipliers) + postModifiers.sum());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0ODMyMQ==", "bodyText": "I'm not sure we should offer this setter to change all modifiers at once, basically overriding everything someone else did \ud83e\udd14  Depending on whether we want this to be mutable or immutable we may offer a clear() method to reset all modifier lists, though.", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458748321", "createdAt": "2020-07-22T12:17:37Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private TFloatList modifiers = new TFloatArrayList();\n+    private TFloatList multipliers = new TFloatArrayList();\n+    private TFloatList postModifiers = new TFloatArrayList();\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public void multiply(float amount) {\n+        this.multipliers.add(amount);\n+    }\n+\n+    public void add(float amount) {\n+        modifiers.add(amount);\n+    }\n+\n+    public void postAdd(float amount) {\n+        postModifiers.add(amount);\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)\n+     * </pre>\n+     *\n+     * <emph>The result value is guaranteed to be non-negative!</emph>\n+     */\n+    public float getValue() {\n+        return Math.max(0, baseValue + modifiers.sum() * product(multipliers) + postModifiers.sum());\n+    }\n+\n+    public TFloatList getModifiers() {\n+        return modifiers;\n+    }\n+\n+    public void setModifiers(TFloatList modifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTI3OQ==", "bodyText": "I'm also not sure whether we should expose this detail to the outside - what use cases are there where it would help a consumer to know whether a modifier of +4 is because of [1, 3], [4], or [-2, 3, 0, 3] (or any other combination...)", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458749279", "createdAt": "2020-07-22T12:19:29Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private TFloatList modifiers = new TFloatArrayList();\n+    private TFloatList multipliers = new TFloatArrayList();\n+    private TFloatList postModifiers = new TFloatArrayList();\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public void multiply(float amount) {\n+        this.multipliers.add(amount);\n+    }\n+\n+    public void add(float amount) {\n+        modifiers.add(amount);\n+    }\n+\n+    public void postAdd(float amount) {\n+        postModifiers.add(amount);\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)\n+     * </pre>\n+     *\n+     * <emph>The result value is guaranteed to be non-negative!</emph>\n+     */\n+    public float getValue() {\n+        return Math.max(0, baseValue + modifiers.sum() * product(multipliers) + postModifiers.sum());\n+    }\n+\n+    public TFloatList getModifiers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTYxOA==", "bodyText": "TODO: move this to TFloatList ^^", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458749618", "createdAt": "2020-07-22T12:20:05Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private TFloatList modifiers = new TFloatArrayList();\n+    private TFloatList multipliers = new TFloatArrayList();\n+    private TFloatList postModifiers = new TFloatArrayList();\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public void multiply(float amount) {\n+        this.multipliers.add(amount);\n+    }\n+\n+    public void add(float amount) {\n+        modifiers.add(amount);\n+    }\n+\n+    public void postAdd(float amount) {\n+        postModifiers.add(amount);\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)\n+     * </pre>\n+     *\n+     * <emph>The result value is guaranteed to be non-negative!</emph>\n+     */\n+    public float getValue() {\n+        return Math.max(0, baseValue + modifiers.sum() * product(multipliers) + postModifiers.sum());\n+    }\n+\n+    public TFloatList getModifiers() {\n+        return modifiers;\n+    }\n+\n+    public void setModifiers(TFloatList modifiers) {\n+        this.modifiers = modifiers;\n+    }\n+\n+    public TFloatList getMultipliers() {\n+        return multipliers;\n+    }\n+\n+    public void setMultipliers(TFloatList multipliers) {\n+        this.multipliers = multipliers;\n+    }\n+\n+    public TFloatList getPostModifiers() {\n+        return postModifiers;\n+    }\n+\n+    public void setPostModifiers(TFloatList postModifiers) {\n+        this.postModifiers = postModifiers;\n+    }\n+\n+    /**\n+     * Calculate the product of all values in the given list.\n+     * <p>\n+     * A static helper dual to {@code TFloatList#sum()}.\n+     *\n+     * @param multipliers the list of multipliers to calculate the product of.\n+     * @return the product of all values. 1 if the list is empty.\n+     */\n+    private static float product(TFloatList multipliers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0OTgxNA==", "bodyText": "TODO: decide whether ModifiableValue should be mutable or immutable.", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458749814", "createdAt": "2020-07-22T12:20:28Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDcyOTI3", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#pullrequestreview-453472927", "createdAt": "2020-07-22T16:14:23Z", "commit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNDoyM1rOG1pyew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNDoyM1rOG1pyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMjM3OQ==", "bodyText": "Shouldn't the multipliers also multiply the baseValue (i.e. (baseValue + modifiers.sum()) * product(multipliers) ...)?", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r458912379", "createdAt": "2020-07-22T16:14:23Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import gnu.trove.iterator.TFloatIterator;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.array.TFloatArrayList;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero.\n+ * Components using this type must mention so in their javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private TFloatList modifiers = new TFloatArrayList();\n+    private TFloatList multipliers = new TFloatArrayList();\n+    private TFloatList postModifiers = new TFloatArrayList();\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public void multiply(float amount) {\n+        this.multipliers.add(amount);\n+    }\n+\n+    public void add(float amount) {\n+        modifiers.add(amount);\n+    }\n+\n+    public void postAdd(float amount) {\n+        postModifiers.add(amount);\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)\n+     * </pre>\n+     *\n+     * <emph>The result value is guaranteed to be non-negative!</emph>\n+     */\n+    public float getValue() {\n+        return Math.max(0, baseValue + modifiers.sum() * product(multipliers) + postModifiers.sum());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebc98f852801f835e5a994fa91dbc88b8c518b37", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ebc98f852801f835e5a994fa91dbc88b8c518b37", "committedDate": "2020-07-22T17:13:41Z", "message": "added ModifiableValue type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fa98f21a5fa113f4d0f0f9ab76335011d41b29", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/53fa98f21a5fa113f4d0f0f9ab76335011d41b29", "committedDate": "2020-07-23T11:26:28Z", "message": "changed to single float values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8876c270e6c70c6c57536c5866026f87345cd7cb", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/8876c270e6c70c6c57536c5866026f87345cd7cb", "committedDate": "2020-07-23T11:39:54Z", "message": "made mutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "670b154e96b5db0ea3b50df472808c11c41a00ac", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/670b154e96b5db0ea3b50df472808c11c41a00ac", "committedDate": "2020-07-23T11:51:10Z", "message": "added inital values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62177fd53c98b8f81819a9a1e14b31c6971e6808", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/62177fd53c98b8f81819a9a1e14b31c6971e6808", "committedDate": "2020-07-23T11:51:33Z", "message": "modified inital values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDY0Mjgy", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#pullrequestreview-454064282", "createdAt": "2020-07-23T12:05:22Z", "commit": {"oid": "8876c270e6c70c6c57536c5866026f87345cd7cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjowNToyMlrOG2HftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjowNToyMlrOG2HftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5OTA5Mg==", "bodyText": "This formula should be updated to match the actual value: result = (<baseValue> + \u03a3 <modifier>) * \u03a3 <multiplier> + \u03a3 <postModifier>", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r459399092", "createdAt": "2020-07-23T12:05:22Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value\n+ * <p>\n+ * The result value is guaranteed to be greater or equal to zero. Components using this type must mention so in their\n+ * javadoc.\n+ * </p>\n+ */\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private float preModifiers;\n+    private float multipliers;\n+    private float postModifiers;\n+\n+    public ModifiableValue(float baseValue) {\n+        this.baseValue = baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public ModifiableValue multiply(float amount) {\n+        multipliers += amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue preAdd(float amount) {\n+        preModifiers += amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue postAdd(float amount) {\n+        postModifiers += amount;\n+        return this;\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = max(0, <baseValue> + \u03a3 <modifier> * \u03a0 <multiplier> + \u03a3 <postModifier>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8876c270e6c70c6c57536c5866026f87345cd7cb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9112c70c4441542bf0e63f4640026177c8be9174", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/9112c70c4441542bf0e63f4640026177c8be9174", "committedDate": "2020-07-23T12:14:12Z", "message": "made multipliers compound"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b60d06fad6b7699c409fae83a6429967f9e9f9a7", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b60d06fad6b7699c409fae83a6429967f9e9f9a7", "committedDate": "2020-07-23T12:20:28Z", "message": "adjusted javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06559df81dea4af602d54361ba2b1cb28c3fcd1e", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/06559df81dea4af602d54361ba2b1cb28c3fcd1e", "committedDate": "2020-07-24T08:03:48Z", "message": "added type handler and @API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0269a6019e4a91dbcbbd3f78d5122c915e5c91", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ad0269a6019e4a91dbcbbd3f78d5122c915e5c91", "committedDate": "2020-07-24T22:30:41Z", "message": "modified type handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/0f20832ec6918e2f8ef07ffc44b0dabb44080285", "committedDate": "2020-07-28T11:40:56Z", "message": "reformatted code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODQ1Njgw", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#pullrequestreview-456845680", "createdAt": "2020-07-28T17:17:41Z", "commit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoxNzo0MVrOG4WnZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzozMzoxOFrOG4XM0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0Mzk3NA==", "bodyText": "I'd like to have some JavaDoc here (or some documentation somewhere else) on how the ModifiableValue is actually persisted. What is the format to specify a modifiable in a prefab?\nFrom looking at the code it seems like the value is persisted as \"unlabeled\" array:\n\"<field_name>\": [<base_value>, <pre_modifier>, <multiplier>, <post_modifier>]\n\nI don't think this is very intuitive, and when seeing this in a prefab I'd think of a vector or list but not of a special data class \ud83d\ude48", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461743974", "createdAt": "2020-07-28T17:17:41Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/extensionTypes/ModifiableValueTypeHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.extensionTypes;\n+\n+import gnu.trove.list.TFloatList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.PersistedDataArray;\n+import org.terasology.persistence.typeHandling.PersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.RegisterTypeHandler;\n+import org.terasology.utilities.modifiable.ModifiableValue;\n+\n+import java.util.Optional;\n+\n+@RegisterTypeHandler\n+public class ModifiableValueTypeHandler extends org.terasology.persistence.typeHandling.TypeHandler<ModifiableValue> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0ODA5NQ==", "bodyText": "I'm wondering whether it would make sense to check an else if here for a single number. That would allow to easily specify the base value in a prefab without worrying about all the modifiers. So you could either do\n\"myValue\": 7,\t\t\t\t\t// base value only\n// ... or ...\n\"otherValaue\": [3, 0, 0.9, 2]\t// base and modifiers/multiplier", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461748095", "createdAt": "2020-07-28T17:24:37Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/extensionTypes/ModifiableValueTypeHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.extensionTypes;\n+\n+import gnu.trove.list.TFloatList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.PersistedDataArray;\n+import org.terasology.persistence.typeHandling.PersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.RegisterTypeHandler;\n+import org.terasology.utilities.modifiable.ModifiableValue;\n+\n+import java.util.Optional;\n+\n+@RegisterTypeHandler\n+public class ModifiableValueTypeHandler extends org.terasology.persistence.typeHandling.TypeHandler<ModifiableValue> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ModifiableValueTypeHandler.class);\n+\n+    @Override\n+    public PersistedData serializeNonNull(ModifiableValue value, PersistedDataSerializer serializer) {\n+        return serializer.serialize(value.getBaseValue(), value.getPreModifiers(), value.getMultipliers(),\n+                value.getPostModifiers());\n+    }\n+\n+    @Override\n+    public Optional<ModifiableValue> deserialize(PersistedData data) {\n+        if (data.isArray()) {\n+            PersistedDataArray vals = data.getAsArray();\n+            if (vals.isNumberArray()) {\n+                TFloatList floatList = vals.getAsFloatArray();\n+                ModifiableValue modifiableValue = new ModifiableValue(floatList.get(0));\n+                if (floatList.size() > 1) {\n+                    modifiableValue.setPreModifiers(floatList.get(1));\n+                    modifiableValue.setMultipliers(floatList.get(2));\n+                    modifiableValue.setPostModifiers(floatList.get(3));\n+                }\n+                return Optional.of(modifiableValue);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0ODkyMw==", "bodyText": "Shouldn't this check that the size is actually exactly 4? Otherwise, floatList.get(n) would fail...", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461748923", "createdAt": "2020-07-28T17:25:48Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/extensionTypes/ModifiableValueTypeHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.extensionTypes;\n+\n+import gnu.trove.list.TFloatList;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.PersistedDataArray;\n+import org.terasology.persistence.typeHandling.PersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.RegisterTypeHandler;\n+import org.terasology.utilities.modifiable.ModifiableValue;\n+\n+import java.util.Optional;\n+\n+@RegisterTypeHandler\n+public class ModifiableValueTypeHandler extends org.terasology.persistence.typeHandling.TypeHandler<ModifiableValue> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ModifiableValueTypeHandler.class);\n+\n+    @Override\n+    public PersistedData serializeNonNull(ModifiableValue value, PersistedDataSerializer serializer) {\n+        return serializer.serialize(value.getBaseValue(), value.getPreModifiers(), value.getMultipliers(),\n+                value.getPostModifiers());\n+    }\n+\n+    @Override\n+    public Optional<ModifiableValue> deserialize(PersistedData data) {\n+        if (data.isArray()) {\n+            PersistedDataArray vals = data.getAsArray();\n+            if (vals.isNumberArray()) {\n+                TFloatList floatList = vals.getAsFloatArray();\n+                ModifiableValue modifiableValue = new ModifiableValue(floatList.get(0));\n+                if (floatList.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MDAxMw==", "bodyText": "As these are simple float values they should not be named in plural form (that makes more sense for lists or arrays):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private float preModifiers;\n          \n          \n            \n                private float multipliers;\n          \n          \n            \n                private float postModifiers;\n          \n          \n            \n                private float preModifier;\n          \n          \n            \n                private float multiplier;\n          \n          \n            \n                private float postModifier;", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461750013", "createdAt": "2020-07-28T17:27:32Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import org.terasology.module.sandbox.API;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value.\n+ * <p>\n+ * Components using this type must mention so in their javadoc so all modifiers are added correctly.\n+ * </p>\n+ */\n+@API\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private float preModifiers;\n+    private float multipliers;\n+    private float postModifiers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MjU4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public float getPreModifiers() {\n          \n          \n            \n                    return preModifiers;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public float getPostModifiers() {\n          \n          \n            \n                    return postModifiers;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public float getMultipliers() {\n          \n          \n            \n                    return multipliers;\n          \n          \n            \n                }\n          \n          \n            \n                public float getPreModifier() {\n          \n          \n            \n                    return preModifier;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public float getPostModifier() {\n          \n          \n            \n                    return postModifier;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public float getMultiplier() {\n          \n          \n            \n                    return multiplier;\n          \n          \n            \n                }", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461752583", "createdAt": "2020-07-28T17:31:38Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import org.terasology.module.sandbox.API;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value.\n+ * <p>\n+ * Components using this type must mention so in their javadoc so all modifiers are added correctly.\n+ * </p>\n+ */\n+@API\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private float preModifiers;\n+    private float multipliers;\n+    private float postModifiers;\n+\n+    public ModifiableValue(float baseValue) {\n+        preModifiers=0;\n+        multipliers=1;\n+        postModifiers=0;\n+        this.baseValue=baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public ModifiableValue multiply(float amount) {\n+        multipliers *= amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue preAdd(float amount) {\n+        preModifiers += amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue postAdd(float amount) {\n+        postModifiers += amount;\n+        return this;\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>\n+     * </pre>\n+     *\n+     * <emph>non-negativity of the value is not ensured and must be checked by the system if needed</emph>\n+     */\n+    public float getValue() {\n+        return (baseValue + preModifiers) * multipliers + postModifiers;\n+    }\n+\n+    public float getPreModifiers() {\n+        return preModifiers;\n+    }\n+\n+    public float getPostModifiers() {\n+        return postModifiers;\n+    }\n+\n+    public float getMultipliers() {\n+        return multipliers;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MzU1NA==", "bodyText": "I'd say these methods should have JavaDoc to encourage usage of the preAdd, postAdd, and multiply instead of overriding the respective value.", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#discussion_r461753554", "createdAt": "2020-07-28T17:33:18Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/utilities/modifiable/ModifiableValue.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.utilities.modifiable;\n+\n+import org.terasology.module.sandbox.API;\n+\n+/**\n+ * A helper type to get and modify the value of a component without changing its actual value.\n+ * <p>\n+ * Components using this type must mention so in their javadoc so all modifiers are added correctly.\n+ * </p>\n+ */\n+@API\n+public class ModifiableValue {\n+    private final float baseValue;\n+\n+    private float preModifiers;\n+    private float multipliers;\n+    private float postModifiers;\n+\n+    public ModifiableValue(float baseValue) {\n+        preModifiers=0;\n+        multipliers=1;\n+        postModifiers=0;\n+        this.baseValue=baseValue;\n+    }\n+\n+    public float getBaseValue() {\n+        return baseValue;\n+    }\n+\n+    public ModifiableValue multiply(float amount) {\n+        multipliers *= amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue preAdd(float amount) {\n+        preModifiers += amount;\n+        return this;\n+    }\n+\n+    public ModifiableValue postAdd(float amount) {\n+        postModifiers += amount;\n+        return this;\n+    }\n+\n+    /**\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>\n+     * </pre>\n+     *\n+     * <emph>non-negativity of the value is not ensured and must be checked by the system if needed</emph>\n+     */\n+    public float getValue() {\n+        return (baseValue + preModifiers) * multipliers + postModifiers;\n+    }\n+\n+    public float getPreModifiers() {\n+        return preModifiers;\n+    }\n+\n+    public float getPostModifiers() {\n+        return postModifiers;\n+    }\n+\n+    public float getMultipliers() {\n+        return multipliers;\n+    }\n+\n+    public void setPreModifiers(float preModifiers){\n+        this.preModifiers=preModifiers;\n+    }\n+\n+    public void setMultipliers(float multipliers){\n+        this.multipliers=multipliers;\n+    }\n+\n+    public void setPostModifiers(float postModifiers){\n+        this.postModifiers=postModifiers;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f20832ec6918e2f8ef07ffc44b0dabb44080285"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1978c8f7b18b2c49409a9e50fa237daa1b1889fb", "author": {"user": {"login": "vedant-shroff", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/1978c8f7b18b2c49409a9e50fa237daa1b1889fb", "committedDate": "2020-07-31T08:52:36Z", "message": "formatting and javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODIzOTY0", "url": "https://github.com/MovingBlocks/Terasology/pull/4094#pullrequestreview-459823964", "createdAt": "2020-08-03T08:02:20Z", "commit": {"oid": "1978c8f7b18b2c49409a9e50fa237daa1b1889fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1387, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}