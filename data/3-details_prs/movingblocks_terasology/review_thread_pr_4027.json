{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTg4ODMy", "number": 4027, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOToyNzo0NFrOEC4mYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTozMzowMlrOEC4tfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDU5OTM5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/cameras/ViewFrustum.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOToyNzo0NFrOGfnOfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOToyNzo0NFrOGfnOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMTcyNQ==", "bodyText": "I think as long as AABB is being used, we should provide a converter method in JomlUtil.\nThat way we don't have to duplicate the logic like this.", "url": "https://github.com/MovingBlocks/Terasology/pull/4027#discussion_r435801725", "createdAt": "2020-06-05T09:27:44Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/ViewFrustum.java", "diffHunk": "@@ -147,35 +156,80 @@ public boolean intersects(AABB aabb) {\n \n         for (int i = 0; i < 6; i++) {\n             if (planes[i].getA() * (aabbVertices[0].x - cp.x) + planes[i].getB() * (aabbVertices[0].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[0].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[0].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[1].x - cp.x) + planes[i].getB() * (aabbVertices[1].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[1].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[1].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[2].x - cp.x) + planes[i].getB() * (aabbVertices[2].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[2].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[2].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[3].x - cp.x) + planes[i].getB() * (aabbVertices[3].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[3].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[3].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[4].x - cp.x) + planes[i].getB() * (aabbVertices[4].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[4].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[4].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[5].x - cp.x) + planes[i].getB() * (aabbVertices[5].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[5].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[5].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[6].x - cp.x) + planes[i].getB() * (aabbVertices[6].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[6].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[6].z - cp.z) + planes[i].getD() > 0) {\n                 continue;\n             }\n             if (planes[i].getA() * (aabbVertices[7].x - cp.x) + planes[i].getB() * (aabbVertices[7].y - cp.y)\n-                    + planes[i].getC() * (aabbVertices[7].z - cp.z) + planes[i].getD() > 0) {\n+                + planes[i].getC() * (aabbVertices[7].z - cp.z) + planes[i].getD() > 0) {\n+                continue;\n+            }\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if this view frustum intersects the given AABB.\n+     */\n+    public boolean intersects(AABBf aabb) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563ebf7ecd0cb3202c12bb24c7c031b989519c55"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDYxNzU3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/cameras/ViewFrustum.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTozMzowMlrOGfnZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTozMzowMlrOGfnZ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNDY0Mw==", "bodyText": "The deprecated method should redirect to the new one to get rid of duplication:\nreturn intersects(JomlUtil.from(position), radius);", "url": "https://github.com/MovingBlocks/Terasology/pull/4027#discussion_r435804643", "createdAt": "2020-06-05T09:33:02Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/ViewFrustum.java", "diffHunk": "@@ -186,6 +240,9 @@ public boolean intersects(AABB aabb) {\n \n     /**\n      * Returns true if the given sphere intersects the given AABB.\n+     *\n+     * @deprecated This is scheduled for removal in an upcoming version method will be replaced with JOML implementation\n+     *     {@link #intersects(Vector3fc, float)}.\n      */\n     public boolean intersects(Vector3f position, float radius) {\n         for (int i = 0; i < 6; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563ebf7ecd0cb3202c12bb24c7c031b989519c55"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 523, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}