{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTE4ODAy", "number": 3858, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMDo0OFrODpuAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyNjo0MVrODpuD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcxOTM2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMDo0OFrOF5EnBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMDo0OFrOF5EnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4ODY3OQ==", "bodyText": "One of our style rules is to avoid star imports. IntelliJ defaults to using them however.\nYou'll need to go into settings and change the number of imports required before a star is used up to 99. It's pain that we can't automatically do that at the moment but oh well", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395388679", "createdAt": "2020-03-20T00:20:48Z", "author": {"login": "syntaxi"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -83,15 +84,10 @@\n \n import java.io.IOException;\n import java.net.UnknownHostException;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcyMjIxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMjo0MVrOF5EoqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjoxNzo0MFrOF5aYyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTA5Nw==", "bodyText": "We try and have all variables have useful names, even if they're not used much. Here I'd suggest something like matchingBlocks or even just outputList", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395389097", "createdAt": "2020-03-20T00:22:41Z", "author": {"login": "syntaxi"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -253,10 +249,29 @@ public String search(@CommandParam(\"searched\") String searched) {\n      * @return List of blocks that match searched string\n      */\n     private List<String> findBlockMatches(String searchLowercase) {\n-        return assetManager.getAvailableAssets(BlockFamilyDefinition.class)\n-                .stream().<Optional<BlockFamilyDefinition>>map(urn -> assetManager.getAsset(urn, BlockFamilyDefinition.class))\n-                .filter(def -> def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get()))\n-                .map(r -> new BlockUri(r.get().getUrn()).toString()).collect(Collectors.toList());\n+        ResourceUrn curUrn;\n+        List<String> l=new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc0NTQ4Mg==", "bodyText": "Fixed! Will keep this in mind from now on .", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395745482", "createdAt": "2020-03-20T16:17:40Z", "author": {"login": "vedant-shroff"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -253,10 +249,29 @@ public String search(@CommandParam(\"searched\") String searched) {\n      * @return List of blocks that match searched string\n      */\n     private List<String> findBlockMatches(String searchLowercase) {\n-        return assetManager.getAvailableAssets(BlockFamilyDefinition.class)\n-                .stream().<Optional<BlockFamilyDefinition>>map(urn -> assetManager.getAsset(urn, BlockFamilyDefinition.class))\n-                .filter(def -> def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get()))\n-                .map(r -> new BlockUri(r.get().getUrn()).toString()).collect(Collectors.toList());\n+        ResourceUrn curUrn;\n+        List<String> l=new ArrayList<String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTA5Nw=="}, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcyMzQ5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMzoyMVrOF5EpWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyMzoyMVrOF5EpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTI3NA==", "bodyText": "See my above comment about naming. (Although this variable could easily be joined with the following line", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395389274", "createdAt": "2020-03-20T00:23:21Z", "author": {"login": "syntaxi"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -253,10 +249,29 @@ public String search(@CommandParam(\"searched\") String searched) {\n      * @return List of blocks that match searched string\n      */\n     private List<String> findBlockMatches(String searchLowercase) {\n-        return assetManager.getAvailableAssets(BlockFamilyDefinition.class)\n-                .stream().<Optional<BlockFamilyDefinition>>map(urn -> assetManager.getAsset(urn, BlockFamilyDefinition.class))\n-                .filter(def -> def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get()))\n-                .map(r -> new BlockUri(r.get().getUrn()).toString()).collect(Collectors.toList());\n+        ResourceUrn curUrn;\n+        List<String> l=new ArrayList<String>();\n+        for (ResourceUrn urn : assetManager.getAvailableAssets(BlockFamilyDefinition.class)) {\n+            // Current urn for logging purposes to find the broken urn\n+            curUrn = urn;\n+            try{\n+                Optional<BlockFamilyDefinition> def = assetManager.getAsset(urn, BlockFamilyDefinition.class);\n+                if (def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get())) {\n+                    String s = new BlockUri(def.get().getUrn()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcyNTYzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyNDo0OVrOF5EqrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDowNDo0M1rOF5VDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTYxMg==", "bodyText": "Would it be possible to instead of returning here, to just keep looping through the for block?\nThat way the broken assets will be skipped but the rest of the command will still work and the printing will still work.", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395389612", "createdAt": "2020-03-20T00:24:49Z", "author": {"login": "syntaxi"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -253,10 +249,29 @@ public String search(@CommandParam(\"searched\") String searched) {\n      * @return List of blocks that match searched string\n      */\n     private List<String> findBlockMatches(String searchLowercase) {\n-        return assetManager.getAvailableAssets(BlockFamilyDefinition.class)\n-                .stream().<Optional<BlockFamilyDefinition>>map(urn -> assetManager.getAsset(urn, BlockFamilyDefinition.class))\n-                .filter(def -> def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get()))\n-                .map(r -> new BlockUri(r.get().getUrn()).toString()).collect(Collectors.toList());\n+        ResourceUrn curUrn;\n+        List<String> l=new ArrayList<String>();\n+        for (ResourceUrn urn : assetManager.getAvailableAssets(BlockFamilyDefinition.class)) {\n+            // Current urn for logging purposes to find the broken urn\n+            curUrn = urn;\n+            try{\n+                Optional<BlockFamilyDefinition> def = assetManager.getAsset(urn, BlockFamilyDefinition.class);\n+                if (def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get())) {\n+                    String s = new BlockUri(def.get().getUrn()).toString();\n+                    l.add(s);\n+                }\n+            }\n+            // If a prefab is broken , it will throw an exception\n+            catch(Exception e){\n+                List<String> EmptyList=new ArrayList<String>();\n+                console.addMessage(\"Note : Search may not return results if invalid assets are present\");\n+                console.addMessage(\"Error parsing : \"+curUrn.toString());\n+                console.addMessage(e.toString());\n+                return(EmptyList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1Nzk5NQ==", "bodyText": "Good idea, Sorry for not implementing this initially , it was on my mind but I forgot about it once I was done with the functionality . This is the new output after this change.", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395657995", "createdAt": "2020-03-20T14:04:43Z", "author": {"login": "vedant-shroff"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -253,10 +249,29 @@ public String search(@CommandParam(\"searched\") String searched) {\n      * @return List of blocks that match searched string\n      */\n     private List<String> findBlockMatches(String searchLowercase) {\n-        return assetManager.getAvailableAssets(BlockFamilyDefinition.class)\n-                .stream().<Optional<BlockFamilyDefinition>>map(urn -> assetManager.getAsset(urn, BlockFamilyDefinition.class))\n-                .filter(def -> def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get()))\n-                .map(r -> new BlockUri(r.get().getUrn()).toString()).collect(Collectors.toList());\n+        ResourceUrn curUrn;\n+        List<String> l=new ArrayList<String>();\n+        for (ResourceUrn urn : assetManager.getAvailableAssets(BlockFamilyDefinition.class)) {\n+            // Current urn for logging purposes to find the broken urn\n+            curUrn = urn;\n+            try{\n+                Optional<BlockFamilyDefinition> def = assetManager.getAsset(urn, BlockFamilyDefinition.class);\n+                if (def.isPresent() && def.get().isLoadable() && matchesSearch(searchLowercase, def.get())) {\n+                    String s = new BlockUri(def.get().getUrn()).toString();\n+                    l.add(s);\n+                }\n+            }\n+            // If a prefab is broken , it will throw an exception\n+            catch(Exception e){\n+                List<String> EmptyList=new ArrayList<String>();\n+                console.addMessage(\"Note : Search may not return results if invalid assets are present\");\n+                console.addMessage(\"Error parsing : \"+curUrn.toString());\n+                console.addMessage(e.toString());\n+                return(EmptyList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4OTYxMg=="}, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDcyODU1OnYy", "diffSide": "LEFT", "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDoyNjo0MVrOF5EsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDowMTowNVrOF5U6QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MDA3Ng==", "bodyText": "The cleanup of the method is appreciated, but this line seems like it has just been removed. Is it actually not needed, because it looks like it's used in spawning the prefab.", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395390076", "createdAt": "2020-03-20T00:26:41Z", "author": {"login": "syntaxi"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -523,17 +538,16 @@ public String spawnPrefab(@Sender EntityRef sender, @CommandParam(\"prefabId\") St\n         } else {\n             dir.set(Direction.FORWARD.getVector3f());\n         }\n-        Quat4f rotation = Quat4f.shortestArcQuat(Direction.FORWARD.getVector3f(), dir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY1NTc0NA==", "bodyText": "Fixed , Turns out I was using a slightly older branch which had an outdated version of this method , have replaced it with the correct implementation along with other changes", "url": "https://github.com/MovingBlocks/Terasology/pull/3858#discussion_r395655744", "createdAt": "2020-03-20T14:01:05Z", "author": {"login": "vedant-shroff"}, "path": "engine/src/main/java/org/terasology/logic/console/commands/CoreCommands.java", "diffHunk": "@@ -523,17 +538,16 @@ public String spawnPrefab(@Sender EntityRef sender, @CommandParam(\"prefabId\") St\n         } else {\n             dir.set(Direction.FORWARD.getVector3f());\n         }\n-        Quat4f rotation = Quat4f.shortestArcQuat(Direction.FORWARD.getVector3f(), dir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MDA3Ng=="}, "originalCommit": {"oid": "b6f2ab25a14c6f87a65408b604eb3601f58e4651"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 559, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}