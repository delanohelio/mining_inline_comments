{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjYyNDcy", "number": 3835, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxODoyOTo0NlrODiK6FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxODoyOTo0NlrODiK6FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTU2ODg1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxODoyOTo0NlrOFtSIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxODoyOTo0NlrOFtSIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAyNzQwNw==", "bodyText": "This block appears to be what can cause a stall with gradlew idea when org.gradle.parallel=true is set in gradle.properties - FYI @DarkWeird\nIf I comment this block out then the stall doesn't happen (but I'd assume module dependencies won't work). Probably relates to multiple threads working different modules for the ideaModule task yet this block iterates through all modules and for each goes and looks for every other module and substitutes stuff? That seems a classic case for ConcurrentModificationException being thrown when working with a Map just to come up with a possibly similar example :-)\nWe could still merge and advise to keep parallel processing off, with the intent to later get rid of gradlew idea entirely - but there could be a possibility of similar stalls in other Gradle logic that needs to iterate over modules?\nRunning Gradle in parallel mode is nice for efficiency but probably not really high priority yet. Could be more of an optimization thing to review later :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/3835#discussion_r383027407", "createdAt": "2020-02-23T18:29:46Z", "author": {"login": "Cervator"}, "path": "build.gradle", "diffHunk": "@@ -185,16 +183,104 @@ clean.doLast {\n     println \"Cleaned root - don't forget to re-extract stuff! 'gradlew extractNatives extractConfig' will do so, or 'gradlew idea' (or eclipse)\"\n }\n \n-task protobufCompileWindows(type:Exec) {\n+task protobufCompileWindows(type: Exec) {\n     description = \"Run 'Protobuf Compiler' (Windows)\"\n     commandLine 'protobuf\\\\compiler\\\\protoc.exe', '--proto_path=engine\\\\src\\\\main\\\\protobuf', '--java_out', 'engine\\\\src\\\\main\\\\java', 'engine\\\\src\\\\main\\\\protobuf\\\\*'\n }\n \n-task protobufCompileLinux(type:Exec) {\n+task protobufCompileLinux(type: Exec) {\n     description = \"Run 'Protobuf Compiler' (Linux)\"\n     commandLine 'protobuf/compiler/protoc', '--proto_path=engine/src/main/protobuf', '--java_out', 'engine/src/main/java', \"engine/src/main/protobuf/EntityData.proto\", \"engine/src/main/protobuf/NetMessage.proto\"\n }\n \n+\n+\n+// Magic for replace remote dependency on local project (source)\n+// for Engine\n+allprojects {\n+    configurations.all {\n+        resolutionStrategy.dependencySubstitution {\n+            substitute module(\"org.terasology.engine:engine\") because \"we have sources!\" with project(\":engine\")\n+            substitute module(\"org.terasology.engine:engine-tests\") because \"we have sources!\" with project(\":engine-tests\")\n+        }\n+    }\n+}\n+\n+// Magic for replace remote dependency on local project (source)\n+// For exists modules\n+project(\":modules\").subprojects.forEach { proj ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e279fc37e2487aa045e4488c8a9332b61fa0207"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 536, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}