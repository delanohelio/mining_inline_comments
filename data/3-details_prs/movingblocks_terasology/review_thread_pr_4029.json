{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQ1NzQx", "number": 4029, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0Mjo0NFrOECYr-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowNDozOVrOEDr2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3MDgzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0Mjo0NFrOGez46Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0Mjo0NFrOGez46Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDYxNw==", "bodyText": "Bonus for dropping in even a brief line at the start of the javadoc just to cover the method overall \ud83d\udc4d", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434960617", "createdAt": "2020-06-04T02:42:44Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3MjMwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MzozMVrOGez5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MzozMVrOGez5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDgzMQ==", "bodyText": "Should this be deprecated then, or briefly Javadoc'ed?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434960831", "createdAt": "2020-06-04T02:43:31Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3Nzc3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0Njo0OVrOGez89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjowMDo0OVrOGf-hWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw==", "bodyText": "Clarify? If dest is a param, and it gets used in a calculation, the result of which is returned while also matching dest ... why was the calculation needed? \ud83e\udd14 Methinks that probably isn't accurate then?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434961653", "createdAt": "2020-06-04T02:46:49Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MzQ1Mw==", "bodyText": "I write it to a destination variable so we can avoid an extra allocation. we use these functions in quite a few loops so reducing the hit to cache seems worth it. the result is just the value written to that destination vector.", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434963453", "createdAt": "2020-06-04T02:53:50Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NjYyMg==", "bodyText": "So if that happens in a different method, I still think the documentation here is confusing. Because the logic clearly returns the result of a method call to which dest is passed - in the end it may well end up the same thing, but you aren't literally returning dest you're returning a calculation based on dest ?\nIf the goal is to avoid an extra allocation then you're achieving that in the other method. It doesn't really seem meaningful to tell the user about that here? Shouldn't you doc instead what dest starts as, since that's what it is doing as a param?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434976622", "createdAt": "2020-06-04T03:49:08Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1NTA5MA==", "bodyText": "From what I've seen of joml so far, this seems to be the common idiom. The current value of dest is irrelevant, it's just a mutable container for stuffing results in to.\nI don't love it, because it feels like one of the bad parts of programming in C, but if the joml devs think it helps I find that all-too-believable.\n(...if only Java could stack-allocate vectors. then we could just call functions, return results. wouldn't that be nice.)", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436155090", "createdAt": "2020-06-05T20:43:03Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NjQ1Ng==", "bodyText": "I might be dense, but then I still don't get it. Why have dest at all to begin with, if its value is irrelevant? Doesn't the user ultimately end up using the return value, even if that becomes the same value as dest in the end? Or is the user meant to subsequently use the variable they passed in as dest as it has changed-via-reference?\nIn either case the docs fail to enlighten this dummy here what's going on :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436166456", "createdAt": "2020-06-05T21:12:17Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDEwOA==", "bodyText": "a method that takes dest and has a return value does have some redundancy in its signature.\nreturning void would be unambiguous. I expect the return value is provided for convenience so you can write things like calculateChunkPos(pos, dest).mul(5) instead of calculateChunkPos(pos, dest);    dest.mul(5)\nthis is a pattern that's going to show up all over the joml-using matrix and vector code, so I think documentation about the pattern would go in the wiki or the package-level docs of terasology.math, probably with references to things like\n\nhttps://github.com/JOML-CI/JOML/wiki/Design\nhttps://github.com/JOML-CI/JOML/wiki/Anti-Patterns-and-Best-Practices#favor-destination-arguments-over-allocating-new-objects", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436174108", "createdAt": "2020-06-05T21:34:08Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3ODk1MQ==", "bodyText": "So really the only reason to taking dest as a param is just to avoid allocating something new?\n* @param dest value ignored, but set to the same as the return value to avoid an allocation\n?\n(Edit: probably something better than that, but in the general direction of that)", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436178951", "createdAt": "2020-06-05T21:48:16Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MzM4NA==", "bodyText": "hmm, \"set to the same as\" makes it sound like dest and the return value are separate-but-equal things. But it's the same object.\nmmm. I think I need another lunch before I try to think more about technical writing.", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436183384", "createdAt": "2020-06-05T22:00:49Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MTY1Mw=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM4MDE3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0ODoxOFrOGez-aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToxMjozM1rOGf9flg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MjAyNQ==", "bodyText": "Is \"component\" a math term here? To me as a mundane developer it makes me think about our ES Components. If not a needed math term could it be named differently?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434962025", "createdAt": "2020-06-04T02:48:18Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),\n+            chunkPower, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block\n+     * @param y absolute y component of the block\n+     * @param z absolute z component of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(int x, int y, int z, org.joml.Vector3i dest) {\n+        return calcChunkPos(x, y, z, ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos the absolute position of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), chunkPower.x(), chunkPower.y(), chunkPower.z(), dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2NDEwNw==", "bodyText": "I just follow what JOML is doing with referring to vector components. do you have a better name we can use?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434964107", "createdAt": "2020-06-04T02:56:18Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),\n+            chunkPower, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block\n+     * @param y absolute y component of the block\n+     * @param z absolute z component of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(int x, int y, int z, org.joml.Vector3i dest) {\n+        return calcChunkPos(x, y, z, ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos the absolute position of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), chunkPower.x(), chunkPower.y(), chunkPower.z(), dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MjAyNQ=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3Njc2NA==", "bodyText": "x y and z coordinates ?", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r434976764", "createdAt": "2020-06-04T03:49:43Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),\n+            chunkPower, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block\n+     * @param y absolute y component of the block\n+     * @param z absolute z component of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(int x, int y, int z, org.joml.Vector3i dest) {\n+        return calcChunkPos(x, y, z, ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos the absolute position of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), chunkPower.x(), chunkPower.y(), chunkPower.z(), dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MjAyNQ=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5MDYyNw==", "bodyText": "Mathemtically, it's more common to talk about \"the components of a vector\" when interpreting that vector as merely an n-tuple of numbers. It seems that when the components are interpreted as a position in some kind of coordinate system (like cartesian) then it's more common to talk about \"coordinates\".", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r435090627", "createdAt": "2020-06-04T08:43:36Z", "author": {"login": "httpdigest"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),\n+            chunkPower, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block\n+     * @param y absolute y component of the block\n+     * @param z absolute z component of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(int x, int y, int z, org.joml.Vector3i dest) {\n+        return calcChunkPos(x, y, z, ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos the absolute position of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), chunkPower.x(), chunkPower.y(), chunkPower.z(), dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MjAyNQ=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NjU1MA==", "bodyText": "yeah, component was the standard term for this in my math/physics education. unfortunate terminology collision in an environment that works with entity-component-system so much.", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436166550", "createdAt": "2020-06-05T21:12:33Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -64,35 +67,188 @@ public static int calcChunkPosZ(int z, int chunkPowerZ) {\n     public static int calcChunkPosX(int x) {\n         return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n         return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n         return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position relative of the chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),\n+            chunkPower, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given power ({@link ChunkConstants#POWER_X}, {@link ChunkConstants#POWER_Y}, {@link ChunkConstants#POWER_Z})\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block\n+     * @param y absolute y component of the block\n+     * @param z absolute z component of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(int x, int y, int z, org.joml.Vector3i dest) {\n+        return calcChunkPos(x, y, z, ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param pos the absolute position of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3ic pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(pos.x(), pos.y(), pos.z(), chunkPower.x(), chunkPower.y(), chunkPower.z(), dest);\n+    }\n+\n+    /**\n+     * The position relative to the size of chunk with the given chunk power\n+     *\n+     * <p>Chunk size is in powers of 2 (2, 4, 8, 16, ...)</p>\n+     *\n+     * @param x absolute x component of the block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MjAyNQ=="}, "originalCommit": {"oid": "0ffe4b72ac5526e4cc9367262f86dd640ed7b024"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg0MDAyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowNjoxMlrOGf9W5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowNjoxMlrOGf9W5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDMyNw==", "bodyText": "Are things picky about how these values are rounded?\nI suggest making a test for it. As much for documentation as anything else, and it'll explicitly point out if this ever changes. It's one of those almost-too-simple-to-test things otherwise.\nvalues like -1000f, -499.9f, -500.1f, -500.5f, -0f, 0f, 500.5f, 500.1f, -499.9f, 1000f\nor somesuch for mix of positive, negative, above-half and below-half.\nIf they're not picky about how they're rounded, x.intValue() might be ever-so-slightly cheaper. except that'll be always-towards-zero, which is probably worse for us than always-more-positive or always-more-negative, so, in conclusion, I'm over-thinking things again", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r436164327", "createdAt": "2020-06-05T21:06:12Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/math/ChunkMath.java", "diffHunk": "@@ -30,79 +33,208 @@\n \n     private ChunkMath() {\n     }\n-\n-    /**\n-     * Returns the chunk position of a given coordinate.\n-     *\n-     * @param x The X-coordinate of the block\n-     * @return The X-coordinate of the chunk\n-     */\n-    public static int calcChunkPosX(int x, int chunkPowerX) {\n-        return (x >> chunkPowerX);\n-    }\n-\n-    /**\n-     * Returns the chunk position of a given coordinate.\n-     *\n-     * @param y The Y-coordinate of the block\n-     * @return The Y-coordinate of the chunk\n-     */\n-    public static int calcChunkPosY(int y, int chunkPowerY) {\n-        return (y >> chunkPowerY);\n-    }\n-\n+    \n     /**\n      * Returns the chunk position of a given coordinate.\n-     *\n-     * @param z The Z-coordinate of the block\n-     * @return The Z-coordinate of the chunk\n+     * @param x The coordinate of the block\n+     * @param chunkPower the size of the chunk in powers of 2\n+     * @return The coordinate of the chunk\n      */\n-    public static int calcChunkPosZ(int z, int chunkPowerZ) {\n-        return (z >> chunkPowerZ);\n+    public static int calcChunkPos(int x, int chunkPower) {\n+        return (x >> chunkPower);\n     }\n \n     public static int calcChunkPosX(int x) {\n-        return calcChunkPosX(x, ChunkConstants.CHUNK_POWER.x);\n+        return calcChunkPos(x, ChunkConstants.CHUNK_POWER.x);\n     }\n+\n     public static int calcChunkPosY(int y) {\n-        return calcChunkPosY(y, ChunkConstants.CHUNK_POWER.y);\n+        return calcChunkPos(y, ChunkConstants.CHUNK_POWER.y);\n     }\n+\n     public static int calcChunkPosZ(int z) {\n-        return calcChunkPosZ(z, ChunkConstants.CHUNK_POWER.z);\n+        return calcChunkPos(z, ChunkConstants.CHUNK_POWER.z);\n     }\n \n+    /**\n+     *\n+     * @param pos the absolute world position\n+     * @param chunkPower the location of the chunk\n+     * @return the relative block in the chunk\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos, Vector3i chunkPower) {\n         return calcChunkPos(pos.x, pos.y, pos.z, chunkPower);\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3fc, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3f pos) {\n         return calcChunkPos(new Vector3i(pos, RoundingMode.HALF_UP));\n     }\n \n+    /**\n+     *\n+     * @param pos\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(Vector3ic, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(Vector3i pos) {\n         return calcChunkPos(pos.x, pos.y, pos.z);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n     public static Vector3i calcChunkPos(int x, int y, int z) {\n         return calcChunkPos(x, y, z, ChunkConstants.CHUNK_POWER);\n     }\n \n+    /**\n+     *\n+     * @param x\n+     * @param y\n+     * @param z\n+     * @param chunkPower\n+     * @return\n+     * @deprecated This is scheduled for removal in an upcoming version\n+     *             method will be replaced with JOML implementation {@link #calcChunkPos(int, int, int, org.joml.Vector3i)}.\n+     */\n+    @Deprecated\n+    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n+        return new Vector3i(calcChunkPos(x, chunkPower.x), calcChunkPos(y, chunkPower.y), calcChunkPos(z, chunkPower.z));\n+    }\n+\n+    //TODO: can be replaced by region3i iterator\n     public static Vector3i[] calcChunkPos(Region3i region) {\n         return calcChunkPos(region, ChunkConstants.CHUNK_POWER);\n     }\n \n-    public static Vector3i calcChunkPos(int x, int y, int z, Vector3i chunkPower) {\n-        return new Vector3i(calcChunkPosX(x, chunkPower.x), calcChunkPosY(y, chunkPower.y), calcChunkPosZ(z, chunkPower.z));\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.\n+     *\n+     * <p>default chunk size ({@link ChunkConstants#SIZE_X}, {@link ChunkConstants#SIZE_Y}, {@link ChunkConstants#SIZE_Z}) </p>\n+     *\n+     * @param pos absolute position of the block\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()), ChunkConstants.POWER_X, ChunkConstants.POWER_Y, ChunkConstants.POWER_Z, dest);\n+    }\n+\n+    /**\n+     * The position of the chunk given the coordinate and size of chunk in powers of 2.\n+     *\n+     * @param pos absolute position of the block\n+     * @param chunkPower the size of the chunk in powers 2\n+     * @param dest will hold the result\n+     * @return dest\n+     */\n+    public static org.joml.Vector3i calcChunkPos(Vector3fc pos, Vector3ic chunkPower, org.joml.Vector3i dest) {\n+        return calcChunkPos(Math.roundHalfUp(pos.x()), Math.roundHalfUp(pos.y()), Math.roundHalfUp(pos.z()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2c68e02e8ce11a326be230f6cdd89033c2dc509"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjk5MjU3OnYy", "diffSide": "RIGHT", "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowMjozM1rOGg2Ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowMjozM1rOGg2Ncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NTc5NA==", "bodyText": "That's some exactly-half, over-half, under-half, that's good.\nThrow in at least one test with some negative coordinates, so we can tell if it's doing round-towards-zero or round-towards -infinity. What should that be... I guess x -0.1 is in chunk -1, along with x -63.9\nx: -64 and -64.1 are chunk -2? bah, the fencepost errors are messing with me. I keep confusing myself, I should draw more diagrams.", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r437095794", "createdAt": "2020-06-09T02:02:33Z", "author": {"login": "keturn"}, "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "diffHunk": "@@ -93,4 +93,14 @@ public void testCalcChunkPos() {\n         assertTrue(ChunkMath.calcChunkPos(10, 10, 10, temp).equals(0, 0, 0));\n     }\n \n+\n+    @Test\n+    public void testFloatingPointCalcChunkPos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789abfdf0e445f7a306e45b680a38c52addc1d4b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjk5NjczOnYy", "diffSide": "RIGHT", "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowNDozOVrOGg2P8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowNDozOVrOGg2P8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NjQzNA==", "bodyText": "wait what ... ohhh, chunks aren't cubical, they're taller than they are wide? okay. then my previous comment about where the x-boundary for chunk -1 is was wrong.", "url": "https://github.com/MovingBlocks/Terasology/pull/4029#discussion_r437096434", "createdAt": "2020-06-09T02:04:39Z", "author": {"login": "keturn"}, "path": "engine-tests/src/test/java/org/terasology/math/ChunkMathTest.java", "diffHunk": "@@ -93,4 +93,14 @@ public void testCalcChunkPos() {\n         assertTrue(ChunkMath.calcChunkPos(10, 10, 10, temp).equals(0, 0, 0));\n     }\n \n+\n+    @Test\n+    public void testFloatingPointCalcChunkPos() {\n+        org.joml.Vector3i temp = new org.joml.Vector3i();\n+        assertTrue(ChunkMath.calcChunkPos(31.9f, 64.1f, 32.5f, temp).equals(0, 1, 1), temp.toString());\n+        assertTrue(ChunkMath.calcChunkPos(32.9f, 63.9f, 32.9f, temp).equals(1, 0, 1), temp.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789abfdf0e445f7a306e45b680a38c52addc1d4b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 529, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}