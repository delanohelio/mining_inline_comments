{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjk2ODUz", "number": 3978, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTowOTo1NVrOD_JmiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDozODo1N1rOEBHJBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0MjAxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/family/BlockFamily.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTowOTo1NVrOGZq6lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo0MTozMlrOGZrC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDcwOQ==", "bodyText": "At least the method signature changes, so we can spot breaking families easily. I don't see an easy way to make this work in a backwards compatible way, so let's do this step!\nI'll check the Omega workspace for a full list of breaking block families \ud83d\ude48", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429570709", "createdAt": "2020-05-23T19:09:55Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/family/BlockFamily.java", "diffHunk": "@@ -42,12 +43,12 @@\n     /**\n      * Get the block that is appropriate for placement in the given situation\n      *\n-     * @param location            The location where the block is going to be placed.\n-     * @param attachmentSide      The side of the block which this block is being attached to, e.g. Top if the block is being placed on the ground\n-     * @param direction           A secondary direction after the attachment side that determines the facing of the block.\n+     * @param location          The location where the block is going to be placed\n+     * @param attachmentSide    The side of the block which this block is being attached to, e.g. Top if the block is being placed on the ground\n+     * @param viewingDirection  The player's viewing direction\n      * @return The appropriate block\n      */\n-    Block getBlockForPlacement(Vector3i location, Side attachmentSide, Side direction);\n+    Block getBlockForPlacement(Vector3i location, Side attachmentSide, Vector3fc viewingDirection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MjgzMQ==", "bodyText": "Alright, I'll open a seperate PR for the API change.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429572831", "createdAt": "2020-05-23T19:41:32Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/world/block/family/BlockFamily.java", "diffHunk": "@@ -42,12 +43,12 @@\n     /**\n      * Get the block that is appropriate for placement in the given situation\n      *\n-     * @param location            The location where the block is going to be placed.\n-     * @param attachmentSide      The side of the block which this block is being attached to, e.g. Top if the block is being placed on the ground\n-     * @param direction           A secondary direction after the attachment side that determines the facing of the block.\n+     * @param location          The location where the block is going to be placed\n+     * @param attachmentSide    The side of the block which this block is being attached to, e.g. Top if the block is being placed on the ground\n+     * @param viewingDirection  The player's viewing direction\n      * @return The appropriate block\n      */\n-    Block getBlockForPlacement(Vector3i location, Side attachmentSide, Side direction);\n+    Block getBlockForPlacement(Vector3i location, Side attachmentSide, Vector3fc viewingDirection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDcwOQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0NDk4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/family/FreeformFamily.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxNjowNlrOGZq8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo1MjozMFrOGZrFsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTExOQ==", "bodyText": "This is a bit more clunky than what you've done HorizontalFamily. What's the difference?\nSide secondaryDirection = Side.inDirection(-viewingDirection.x(), 0, -viewingDirection.z());\nAs I cannot spot any other changes around the Side direction in both cases, shouldn't those two be the same?", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429571119", "createdAt": "2020-05-23T19:16:06Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/family/FreeformFamily.java", "diffHunk": "@@ -75,7 +79,10 @@ public FreeformFamily(BlockFamilyDefinition blockFamilyDefinition, BlockBuilderH\n \n \n     @Override\n-    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Side direction) {\n+    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Vector3fc viewingDirection) {\n+        Vector3f attachmentSideNormal = new org.joml.Vector3f(attachmentSide.direction());\n+        Side direction = ChunkMath.getSecondaryPlacementDirection(JomlUtil.from(viewingDirection), JomlUtil.from(attachmentSideNormal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzE3MQ==", "bodyText": "In HorizontalFamily I could improve and simplify the algorithm with the new concept. In this one I didn't want to touch the logic. So what you are seeing here is the exact same as it was originally, with the exception that direction is calculated within the method instead of being passed into it.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429573171", "createdAt": "2020-05-23T19:47:08Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/world/block/family/FreeformFamily.java", "diffHunk": "@@ -75,7 +79,10 @@ public FreeformFamily(BlockFamilyDefinition blockFamilyDefinition, BlockBuilderH\n \n \n     @Override\n-    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Side direction) {\n+    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Vector3fc viewingDirection) {\n+        Vector3f attachmentSideNormal = new org.joml.Vector3f(attachmentSide.direction());\n+        Side direction = ChunkMath.getSecondaryPlacementDirection(JomlUtil.from(viewingDirection), JomlUtil.from(attachmentSideNormal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTExOQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzU1NQ==", "bodyText": "Is the definition of the free form family to use the archetype or behave like the horizontal family?\nI guess they could be using the same logic, but note that the calculation of direction works slightly different here than it currently does in HorizontalFamily.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429573555", "createdAt": "2020-05-23T19:52:30Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/world/block/family/FreeformFamily.java", "diffHunk": "@@ -75,7 +79,10 @@ public FreeformFamily(BlockFamilyDefinition blockFamilyDefinition, BlockBuilderH\n \n \n     @Override\n-    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Side direction) {\n+    public Block getBlockForPlacement(Vector3i location, Side attachmentSide, Vector3fc viewingDirection) {\n+        Vector3f attachmentSideNormal = new org.joml.Vector3f(attachmentSide.direction());\n+        Side direction = ChunkMath.getSecondaryPlacementDirection(JomlUtil.from(viewingDirection), JomlUtil.from(attachmentSideNormal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTExOQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0ODg1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/math/Rotation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToyNDozMlrOGZq-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDozNzoyN1rOGcy2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY2OQ==", "bodyText": "What's this about - just better naming? Please move/copy the JavaDoc over to the non-deprecated method if you want to leave this change in.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429571669", "createdAt": "2020-05-23T19:24:32Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/math/Rotation.java", "diffHunk": "@@ -218,8 +218,15 @@ public int hashCode() {\n      * Returns all possible rotations for each yaw, pitch & roll combination, including duplicates.\n      *\n      * @return All possible rotations for each yaw, pitch & roll combination.\n+     *\n+     * @deprecated use `allRotations` instead\n      */\n+    @Deprecated\n     public static Iterable<Rotation> allValues() {\n+        return allRotations();\n+    }\n+\n+    public static Iterable<Rotation> allRotations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MjY5OQ==", "bodyText": "This is part of the old PR, it's not used or anything. I thought about removing it but since I'm aiming to replace the other PR I kept everything in. (if I'm not mistaken, it was you who committed this btw :)", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429572699", "createdAt": "2020-05-23T19:39:32Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Rotation.java", "diffHunk": "@@ -218,8 +218,15 @@ public int hashCode() {\n      * Returns all possible rotations for each yaw, pitch & roll combination, including duplicates.\n      *\n      * @return All possible rotations for each yaw, pitch & roll combination.\n+     *\n+     * @deprecated use `allRotations` instead\n      */\n+    @Deprecated\n     public static Iterable<Rotation> allValues() {\n+        return allRotations();\n+    }\n+\n+    public static Iterable<Rotation> allRotations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY2OQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODUwNg==", "bodyText": "I must had a reason for that that is long forgotten now \ud83d\ude44 \ud83d\ude48", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r429578506", "createdAt": "2020-05-23T21:09:32Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/math/Rotation.java", "diffHunk": "@@ -218,8 +218,15 @@ public int hashCode() {\n      * Returns all possible rotations for each yaw, pitch & roll combination, including duplicates.\n      *\n      * @return All possible rotations for each yaw, pitch & roll combination.\n+     *\n+     * @deprecated use `allRotations` instead\n      */\n+    @Deprecated\n     public static Iterable<Rotation> allValues() {\n+        return allRotations();\n+    }\n+\n+    public static Iterable<Rotation> allRotations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY2OQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjM0OQ==", "bodyText": "Let's remove this change if not used...", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r432846349", "createdAt": "2020-05-30T14:37:27Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/math/Rotation.java", "diffHunk": "@@ -218,8 +218,15 @@ public int hashCode() {\n      * Returns all possible rotations for each yaw, pitch & roll combination, including duplicates.\n      *\n      * @return All possible rotations for each yaw, pitch & roll combination.\n+     *\n+     * @deprecated use `allRotations` instead\n      */\n+    @Deprecated\n     public static Iterable<Rotation> allValues() {\n+        return allRotations();\n+    }\n+\n+    public static Iterable<Rotation> allRotations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY2OQ=="}, "originalCommit": {"oid": "09e99909e70558a66a60d95f6b50fa3ff5e1e189"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjAwOTIwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDozNjozNFrOGcy10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNToyNjo0OVrOGcz59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjI5MQ==", "bodyText": "What does this do? We are in an interface, where should we inherit from?", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r432846291", "createdAt": "2020-05-30T14:36:34Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "diffHunk": "@@ -21,23 +21,101 @@\n import org.terasology.world.block.loader.SectionDefinitionData;\n import org.terasology.world.block.shapes.BlockShape;\n \n+/**\n+ * A helper class for building and registering blocks with specific properties.\n+ * Intended for use with Block Family related code.\n+ * <p>\n+ * The core features of this helper is to convert from definition data, into a Block\n+ * and to register this block into the engine for use.\n+ */\n public interface BlockBuilderHelper {\n \n+    /**\n+     * {@inheritDoc}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad020b96b50e490eabfa675432a49ed1d0b3c11"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2MzczMg==", "bodyText": "Nothing useful, I removed it.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r432863732", "createdAt": "2020-05-30T15:26:49Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "diffHunk": "@@ -21,23 +21,101 @@\n import org.terasology.world.block.loader.SectionDefinitionData;\n import org.terasology.world.block.shapes.BlockShape;\n \n+/**\n+ * A helper class for building and registering blocks with specific properties.\n+ * Intended for use with Block Family related code.\n+ * <p>\n+ * The core features of this helper is to convert from definition data, into a Block\n+ * and to register this block into the engine for use.\n+ */\n public interface BlockBuilderHelper {\n \n+    /**\n+     * {@inheritDoc}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjI5MQ=="}, "originalCommit": {"oid": "4ad020b96b50e490eabfa675432a49ed1d0b3c11"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjAxMDI5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNDozODo1OFrOGcy2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxNToyNjowNVrOGcz5wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjQzNw==", "bodyText": "What are \"reasonable defaults\"? What kind of defaults are we talking about/defaults for what?", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r432846437", "createdAt": "2020-05-30T14:38:58Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "diffHunk": "@@ -21,23 +21,101 @@\n import org.terasology.world.block.loader.SectionDefinitionData;\n import org.terasology.world.block.shapes.BlockShape;\n \n+/**\n+ * A helper class for building and registering blocks with specific properties.\n+ * Intended for use with Block Family related code.\n+ * <p>\n+ * The core features of this helper is to convert from definition data, into a Block\n+ * and to register this block into the engine for use.\n+ */\n public interface BlockBuilderHelper {\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, BlockShape shape, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, String section, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * Constructs a basic block from the data provided. This block is assumed to have no rotations, and to use reasonable defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad020b96b50e490eabfa675432a49ed1d0b3c11"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg2MzY4Mg==", "bodyText": "I don't know enough about block creation to answer this adequately. All kinds of things are setup using the parameters. I assume there are block properties independent of the specified parameters that would be initialized \"using reasonable defaults\". It's an interface method, therefore it has an abstract description. The claim is to produce a useful block without having to specify all the properties its gonna have.", "url": "https://github.com/MovingBlocks/Terasology/pull/3978#discussion_r432863682", "createdAt": "2020-05-30T15:26:05Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/world/block/BlockBuilderHelper.java", "diffHunk": "@@ -21,23 +21,101 @@\n import org.terasology.world.block.loader.SectionDefinitionData;\n import org.terasology.world.block.shapes.BlockShape;\n \n+/**\n+ * A helper class for building and registering blocks with specific properties.\n+ * Intended for use with Block Family related code.\n+ * <p>\n+ * The core features of this helper is to convert from definition data, into a Block\n+ * and to register this block into the engine for use.\n+ */\n public interface BlockBuilderHelper {\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, BlockShape shape, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @see #constructSimpleBlock(BlockFamilyDefinition, BlockShape, String, BlockUri, BlockFamily)\n+     */\n     Block constructSimpleBlock(BlockFamilyDefinition definition, String section, BlockUri uri, BlockFamily blockFamily);\n \n+    /**\n+     * Constructs a basic block from the data provided. This block is assumed to have no rotations, and to use reasonable defaults", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NjQzNw=="}, "originalCommit": {"oid": "4ad020b96b50e490eabfa675432a49ed1d0b3c11"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 454, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}