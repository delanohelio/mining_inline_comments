{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTAwMDg5", "number": 3969, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNToyM1rOELUlAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NToyOVrOEu4Bfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA2OTQ1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNToyM1rOGs3LCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNToyM1rOGs3LCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDQ3NA==", "bodyText": "A brief bit of class-level javadoc is always nice to have, even if the methods are javadocced :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694474", "createdAt": "2020-07-03T20:05:23Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3MDUyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNjoxNlrOGs3Lnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNjoxNlrOGs3Lnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDYyMw==", "bodyText": "Aiieeee brackets here and the next line. What does this class do anyway? Is it copied in from somewhere or original?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694623", "createdAt": "2020-07-03T20:06:16Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {\n+\n+    private Lwjgl2Sync() {\n+    }\n+\n+    /**\n+     * number of nano seconds in a second\n+     */\n+    private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n+\n+    /**\n+     * The time to sleep/yield until the next frame\n+     */\n+    private static long nextFrame = 0;\n+\n+    /**\n+     * whether the initialisation code has run\n+     */\n+    private static boolean initialised = false;\n+\n+    /**\n+     * for calculating the averages the previous sleep/yield times are stored\n+     */\n+    private static RunningAvg sleepDurations = new RunningAvg(10);\n+    private static RunningAvg yieldDurations = new RunningAvg(10);\n+\n+\n+    /**\n+     * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n+     *\n+     * @param fps - the desired frame rate, in frames per second\n+     */\n+    public static void sync(int fps) {\n+        if (fps <= 0) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3MTE3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNjo1OVrOGs3MCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozNTo1MlrOGtXh4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDczMA==", "bodyText": "Howcome! \ud83d\ude01", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694730", "createdAt": "2020-07-03T20:06:59Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {\n+\n+    private Lwjgl2Sync() {\n+    }\n+\n+    /**\n+     * number of nano seconds in a second\n+     */\n+    private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n+\n+    /**\n+     * The time to sleep/yield until the next frame\n+     */\n+    private static long nextFrame = 0;\n+\n+    /**\n+     * whether the initialisation code has run\n+     */\n+    private static boolean initialised = false;\n+\n+    /**\n+     * for calculating the averages the previous sleep/yield times are stored\n+     */\n+    private static RunningAvg sleepDurations = new RunningAvg(10);\n+    private static RunningAvg yieldDurations = new RunningAvg(10);\n+\n+\n+    /**\n+     * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n+     *\n+     * @param fps - the desired frame rate, in frames per second\n+     */\n+    public static void sync(int fps) {\n+        if (fps <= 0) return;\n+        if (!initialised) initialise();\n+\n+        try {\n+            // sleep until the average sleep time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > sleepDurations.avg(); t0 = t1) {\n+                Thread.sleep(1);\n+                sleepDurations.add((t1 = getTime()) - t0); // update average sleep time\n+            }\n+\n+            // slowly dampen sleep average if too high to avoid yielding too much\n+            sleepDurations.dampenForLowResTicker();\n+\n+            // yield until the average yield time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > yieldDurations.avg(); t0 = t1) {\n+                Thread.yield();\n+                yieldDurations.add((t1 = getTime()) - t0); // update average yield time\n+            }\n+        } catch (InterruptedException e) {\n+\n+        }\n+\n+        // schedule next frame, drop frame(s) if already too late for next frame\n+        nextFrame = Math.max(nextFrame + NANOS_IN_SECOND / fps, getTime());\n+    }\n+\n+    /**\n+     * This method will initialise the sync method by setting initial values for sleepDurations/yieldDurations and\n+     * nextFrame.\n+     * <p>\n+     * If running on windows it will start the sleep timer fix.\n+     */\n+    private static void initialise() {\n+        initialised = true;\n+\n+        sleepDurations.init(1000 * 1000);\n+        yieldDurations.init((int) (-(getTime() - getTime()) * 1.333));\n+\n+        nextFrame = getTime();\n+\n+        String osName = System.getProperty(\"os.name\");\n+\n+        if (osName.startsWith(\"Win\")) {\n+            // On windows the sleep functions can be highly inaccurate by\n+            // over 10ms making in unusable. However it can be forced to\n+            // be a bit more accurate by running a separate sleeping daemon\n+            // thread.\n+            Thread timerAccuracyThread = new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        Thread.sleep(Long.MAX_VALUE);\n+                    } catch (Exception e) {\n+                    }\n+                }\n+            });\n+\n+            timerAccuracyThread.setName(\"LWJGL Timer\");\n+            timerAccuracyThread.setDaemon(true);\n+            timerAccuracyThread.start();\n+        }\n+    }\n+\n+    /**\n+     * Get the system time in nano seconds\n+     *\n+     * @return will return the current time in nano's\n+     */\n+    private static long getTime() {\n+        return (long) (GLFW.glfwGetTime() * NANOS_IN_SECOND);\n+    }\n+\n+    private static class RunningAvg {\n+        private final long[] slots;\n+        private int offset;\n+\n+        private static final long DAMPEN_THRESHOLD = 10 * 1000L * 1000L; // 10ms\n+        private static final float DAMPEN_FACTOR = 0.9f; // don't change: 0.9f is exactly right!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNDYxMQ==", "bodyText": "Copy-paste from LWJGL2's class.\nIt is Sync.java - it is exactly right! :D", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450224611", "createdAt": "2020-07-06T13:35:52Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/Lwjgl2Sync.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.engine.subsystem.lwjgl;\n+\n+import org.lwjgl.glfw.GLFW;\n+\n+public final class Lwjgl2Sync {\n+\n+    private Lwjgl2Sync() {\n+    }\n+\n+    /**\n+     * number of nano seconds in a second\n+     */\n+    private static final long NANOS_IN_SECOND = 1000L * 1000L * 1000L;\n+\n+    /**\n+     * The time to sleep/yield until the next frame\n+     */\n+    private static long nextFrame = 0;\n+\n+    /**\n+     * whether the initialisation code has run\n+     */\n+    private static boolean initialised = false;\n+\n+    /**\n+     * for calculating the averages the previous sleep/yield times are stored\n+     */\n+    private static RunningAvg sleepDurations = new RunningAvg(10);\n+    private static RunningAvg yieldDurations = new RunningAvg(10);\n+\n+\n+    /**\n+     * An accurate sync method that will attempt to run at a constant frame rate. It should be called once every frame.\n+     *\n+     * @param fps - the desired frame rate, in frames per second\n+     */\n+    public static void sync(int fps) {\n+        if (fps <= 0) return;\n+        if (!initialised) initialise();\n+\n+        try {\n+            // sleep until the average sleep time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > sleepDurations.avg(); t0 = t1) {\n+                Thread.sleep(1);\n+                sleepDurations.add((t1 = getTime()) - t0); // update average sleep time\n+            }\n+\n+            // slowly dampen sleep average if too high to avoid yielding too much\n+            sleepDurations.dampenForLowResTicker();\n+\n+            // yield until the average yield time is greater than the time remaining till nextFrame\n+            for (long t0 = getTime(), t1; (nextFrame - t0) > yieldDurations.avg(); t0 = t1) {\n+                Thread.yield();\n+                yieldDurations.add((t1 = getTime()) - t0); // update average yield time\n+            }\n+        } catch (InterruptedException e) {\n+\n+        }\n+\n+        // schedule next frame, drop frame(s) if already too late for next frame\n+        nextFrame = Math.max(nextFrame + NANOS_IN_SECOND / fps, getTime());\n+    }\n+\n+    /**\n+     * This method will initialise the sync method by setting initial values for sleepDurations/yieldDurations and\n+     * nextFrame.\n+     * <p>\n+     * If running on windows it will start the sleep timer fix.\n+     */\n+    private static void initialise() {\n+        initialised = true;\n+\n+        sleepDurations.init(1000 * 1000);\n+        yieldDurations.init((int) (-(getTime() - getTime()) * 1.333));\n+\n+        nextFrame = getTime();\n+\n+        String osName = System.getProperty(\"os.name\");\n+\n+        if (osName.startsWith(\"Win\")) {\n+            // On windows the sleep functions can be highly inaccurate by\n+            // over 10ms making in unusable. However it can be forced to\n+            // be a bit more accurate by running a separate sleeping daemon\n+            // thread.\n+            Thread timerAccuracyThread = new Thread(new Runnable() {\n+                public void run() {\n+                    try {\n+                        Thread.sleep(Long.MAX_VALUE);\n+                    } catch (Exception e) {\n+                    }\n+                }\n+            });\n+\n+            timerAccuracyThread.setName(\"LWJGL Timer\");\n+            timerAccuracyThread.setDaemon(true);\n+            timerAccuracyThread.start();\n+        }\n+    }\n+\n+    /**\n+     * Get the system time in nano seconds\n+     *\n+     * @return will return the current time in nano's\n+     */\n+    private static long getTime() {\n+        return (long) (GLFW.glfwGetTime() * NANOS_IN_SECOND);\n+    }\n+\n+    private static class RunningAvg {\n+        private final long[] slots;\n+        private int offset;\n+\n+        private static final long DAMPEN_THRESHOLD = 10 * 1000L * 1000L; // 10ms\n+        private static final float DAMPEN_FACTOR = 0.9f; // don't change: 0.9f is exactly right!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDczMA=="}, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3MTg2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/DisplayDevice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowNzozN1rOGs3MYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzo0NDoyN1rOGtX3Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxOQ==", "bodyText": "Howcome this goes API?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449694819", "createdAt": "2020-07-03T20:07:37Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/DisplayDevice.java", "diffHunk": "@@ -15,11 +15,13 @@\n  */\n package org.terasology.engine.subsystem;\n \n+import org.terasology.module.sandbox.API;\n import org.terasology.rendering.nui.layers.mainMenu.videoSettings.DisplayModeSetting;\n import org.terasology.utilities.subscribables.Subscribable;\n \n import java.util.List;\n \n+@API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzMDA0Mw==", "bodyText": "It needs needs for rendering module now.\nThis class provides window width and height.", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450230043", "createdAt": "2020-07-06T13:44:27Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/DisplayDevice.java", "diffHunk": "@@ -15,11 +15,13 @@\n  */\n package org.terasology.engine.subsystem;\n \n+import org.terasology.module.sandbox.API;\n import org.terasology.rendering.nui.layers.mainMenu.videoSettings.DisplayModeSetting;\n import org.terasology.utilities.subscribables.Subscribable;\n \n import java.util.List;\n \n+@API", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxOQ=="}, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3MzMzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowOToxOFrOGs3NTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowOToxOFrOGs3NTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTA1NA==", "bodyText": "Commented out code? Any reason to not just remove?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695054", "createdAt": "2020-07-03T20:09:18Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglGraphics.java", "diffHunk": "@@ -143,126 +174,187 @@ public void registerCoreAssetTypes(ModuleAwareAssetTypeManager assetTypeManager)\n     public void postInitialise(Context rootContext) {\n         context.put(RenderingSubsystemFactory.class, new LwjglRenderingSubsystemFactory(bufferPool));\n \n-        initDisplay();\n+        initGLFW();\n+        initWindow();\n         initOpenGL(context);\n \n         context.put(CanvasRenderer.class, new LwjglCanvasRenderer(context));\n     }\n \n     @Override\n     public void postUpdate(GameState currentState, float delta) {\n-        Display.update();\n-\n         if (!displayThreadActions.isEmpty()) {\n             List<Runnable> actions = Lists.newArrayListWithExpectedSize(displayThreadActions.size());\n             displayThreadActions.drainTo(actions);\n             actions.forEach(Runnable::run);\n         }\n \n-        int frameLimit = context.get(Config.class).getRendering().getFrameLimit();\n-        if (frameLimit > 0) {\n-            Display.sync(frameLimit);\n-        }\n         currentState.render();\n \n         lwjglDisplay.update();\n-\n+        int frameLimit = context.get(Config.class).getRendering().getFrameLimit();\n+        if (frameLimit > 0) {\n+            Lwjgl2Sync.sync(frameLimit);\n+        }\n         if (lwjglDisplay.isCloseRequested()) {\n             engine.shutdown();\n         }\n     }\n \n     @Override\n     public void preShutdown() {\n-        if (Display.isCreated() && !Display.isFullscreen() && Display.isVisible()) {\n-            config.setWindowPosX(Display.getX());\n-            config.setWindowPosY(Display.getY());\n-\n-            config.setWindowWidth(Display.getWidth());\n-            config.setWindowHeight(Display.getHeight());\n-\n+        long window = GLFW.glfwGetCurrentContext();\n+        if (window != MemoryUtil.NULL) {\n+            boolean isVisible = GLFW.glfwGetWindowAttrib(window, GLFW.GLFW_VISIBLE) == GLFW.GLFW_TRUE;\n+            boolean isFullScreen = lwjglDisplay.isFullscreen();\n+            if (!isFullScreen && isVisible) {\n+                int[] xBuffer = new int[1];\n+                int[] yBuffer = new int[1];\n+                GLFW.glfwGetWindowPos(window, xBuffer, yBuffer);\n+                config.setWindowPosX(xBuffer[0]);\n+                config.setWindowPosY(yBuffer[0]);\n+\n+                int[] widthBuffer = new int[1];\n+                int[] heightBuffer = new int[1];\n+                GLFW.glfwGetWindowSize(window, widthBuffer, heightBuffer);\n+                config.setWindowWidth(widthBuffer[0]);\n+                config.setWindowHeight(heightBuffer[0]);\n+            }\n         }\n     }\n \n     @Override\n     public void shutdown() {\n-        Display.destroy();\n+        GLFW.glfwTerminate();\n     }\n \n-    private void initDisplay() {\n-        logger.info(\"Initializing display (if last line in log then likely the game crashed from an issue with your video card)\");\n-\n-        try {\n+    private void initGLFW() {\n+        if (!GLFW.glfwInit()) {\n+            throw new RuntimeException(\"Failed to initialize GLFW\");\n+        }\n \n-            lwjglDisplay.setDisplayModeSetting(config.getDisplayModeSetting(), false);\n+        GLFW.glfwDefaultWindowHints();\n+        GLFW.glfwWindowHint(GLFW.GLFW_VISIBLE, GLFW.GLFW_FALSE);\n+        GLFW.glfwWindowHint(GLFW.GLFW_COCOA_GRAPHICS_SWITCHING, GLFW.GLFW_TRUE);\n+        GLFW.glfwWindowHint(GLFW.GLFW_DEPTH_BITS, config.getPixelFormat());\n \n-            Display.setTitle(\"Terasology\" + \" | \" + \"Alpha\");\n-            try {\n+//        GLFW.glfwWindowHint(GLFW.GLFW_CLIENT_API, GLFW.GLFW_OPENGL_API);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3NjU1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxMTo1NVrOGs3O-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxMTo1NVrOGs3O-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTQ4Mw==", "bodyText": "Eh? Also this reminds me about the rare issues where the mouse cursor gets grabbed funny and won't let go for some devs. No idea if that's related, like if you had commented this out to avoid that while working on the PR?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695483", "createdAt": "2020-07-03T20:11:55Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglInput.java", "diffHunk": "@@ -47,36 +44,25 @@ public void postInitialise(Context rootContext) {\n         this.context = rootContext;\n         initControls();\n         updateInputConfig();\n-        Mouse.setGrabbed(false);\n+        // Mouse.setGrabbed(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3Nzk4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxMzoxNVrOGs3Pyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxMzoxNVrOGs3Pyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTY5MA==", "bodyText": "Would be nice with some more details for this - what needs to be fixed? What's broken? Should we submit an issue with details then link to that issue from the TODO? What does this portlet even do?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695690", "createdAt": "2020-07-03T20:13:15Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglPortlet.java", "diffHunk": "@@ -32,11 +30,13 @@ public String getName() {\n \n     @Override\n     public void postInitialise(Context context) {\n-        try {\n-            Display.setParent(customViewPort);\n-        } catch (LWJGLException e) {\n-            throw new RuntimeException(\"Can not initialize graphics device.\", e);\n-        }\n+        // FIXME: LWJGL 3 - reimplement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA3OTUwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNDo0MlrOGs3QpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNDo0MlrOGs3QpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTkwOQ==", "bodyText": "Very trivial, but a missing space here between ){ - haven't looked too closely for such code style issues elsewhere, but it may be worth doing a little Checkstyle pass per changed class in your IDE", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449695909", "createdAt": "2020-07-03T20:14:42Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/engine/subsystem/lwjgl/LwjglResolution.java", "diffHunk": "@@ -15,42 +15,105 @@\n  */\n package org.terasology.engine.subsystem.lwjgl;\n \n-import org.lwjgl.opengl.DisplayMode;\n+import org.lwjgl.glfw.GLFWVidMode;\n import org.terasology.engine.subsystem.Resolution;\n \n+import java.util.Objects;\n+\n public final class LwjglResolution implements Resolution {\n \n-    private final DisplayMode displayMode;\n+    private int width;\n+    private int height;\n+    private int redBits;\n+    private int greenBits;\n+    private int blueBits;\n+    private int refreshRate;\n+\n+    public LwjglResolution(GLFWVidMode vidMode) {\n+        this.width = vidMode.width();\n+        this.height = vidMode.height();\n+        this.redBits = vidMode.redBits();\n+        this.greenBits = vidMode.greenBits();\n+        this.blueBits = vidMode.blueBits();\n+        this.refreshRate = vidMode.refreshRate();\n+    }\n+\n+    public LwjglResolution(int width, int height, int redBits, int greenBits, int blueBits, int refreshRate) {\n+        this.width = width;\n+        this.height = height;\n+        this.redBits = redBits;\n+        this.greenBits = greenBits;\n+        this.blueBits = blueBits;\n+        this.refreshRate = refreshRate;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public int getRedBits() {\n+        return redBits;\n+    }\n \n-    public LwjglResolution(DisplayMode displayMode) {\n-        this.displayMode = displayMode;\n+    public int getGreenBits() {\n+        return greenBits;\n     }\n \n-    public DisplayMode getDisplayMode() {\n-        return displayMode;\n+    public int getBlueBits() {\n+        return blueBits;\n+    }\n+\n+    public int getRefreshRate() {\n+        return refreshRate;\n     }\n \n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n         }\n-        if (o == null || getClass() != o.getClass()) {\n+        if (o == null) {\n+            return false;\n+        } else if (o instanceof GLFWVidMode){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4MDc3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNTo0NFrOGs3RWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNTo0NFrOGs3RWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjA4OA==", "bodyText": "Eeee - more of these old empty javadoc blocks. If you could fill them in with some basic javadoc then cool. If not and you see empty javadoc blocks please just remove them so the code analytics will complain about there being no javadoc", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696088", "createdAt": "2020-07-03T20:15:44Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "diffHunk": "@@ -15,40 +15,249 @@\n  */\n package org.terasology.input.lwjgl;\n \n-import com.google.common.collect.Queues;\n-\n-import org.lwjgl.input.Keyboard;\n+import com.google.common.collect.Lists;\n+import gnu.trove.map.TIntIntMap;\n+import gnu.trove.map.hash.TIntIntHashMap;\n+import gnu.trove.set.TIntSet;\n+import gnu.trove.set.hash.TIntHashSet;\n+import org.lwjgl.glfw.GLFW;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Input;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n \n+import java.util.Iterator;\n import java.util.Queue;\n \n /**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4MTI0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNjoxNlrOGs3Rpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDowMzo1MFrOGtYpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjE2Nw==", "bodyText": "Commented out code - what's a NONE key anyway? \ud83e\udd14 What's remaining to clean up and test", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696167", "createdAt": "2020-07-03T20:16:16Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "diffHunk": "@@ -15,40 +15,249 @@\n  */\n package org.terasology.input.lwjgl;\n \n-import com.google.common.collect.Queues;\n-\n-import org.lwjgl.input.Keyboard;\n+import com.google.common.collect.Lists;\n+import gnu.trove.map.TIntIntMap;\n+import gnu.trove.map.hash.TIntIntHashMap;\n+import gnu.trove.set.TIntSet;\n+import gnu.trove.set.hash.TIntHashSet;\n+import org.lwjgl.glfw.GLFW;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Input;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n \n+import java.util.Iterator;\n import java.util.Queue;\n \n /**\n+ *\n  */\n public class LwjglKeyboardDevice implements KeyboardDevice {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LwjglKeyboardDevice.class);\n+    private static final TIntIntMap GLFW_TO_TERA_MAPPING = new TIntIntHashMap();\n+\n+    static {\n+        //TODO: test and cleanup keys\n+//        glfwToTeraMaps.put(GLFW.GLFW_KEY_NONE, Keyboard.KeyId.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI0Mjk0Mg==", "bodyText": "Lwjgl2 had NONE key.. yep strange :D with not used in code... seems, it is for methods like  getKeyPressed()\nI did regex-replace and some manual changes.\ntest all keys :D maybe, i not understood some keys.\nsome keys specified for countries. idk.\ncleanup - remove all commented keys.", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450242942", "createdAt": "2020-07-06T14:03:50Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglKeyboardDevice.java", "diffHunk": "@@ -15,40 +15,249 @@\n  */\n package org.terasology.input.lwjgl;\n \n-import com.google.common.collect.Queues;\n-\n-import org.lwjgl.input.Keyboard;\n+import com.google.common.collect.Lists;\n+import gnu.trove.map.TIntIntMap;\n+import gnu.trove.map.hash.TIntIntHashMap;\n+import gnu.trove.set.TIntSet;\n+import gnu.trove.set.hash.TIntHashSet;\n+import org.lwjgl.glfw.GLFW;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.terasology.input.ButtonState;\n import org.terasology.input.Input;\n import org.terasology.input.InputType;\n+import org.terasology.input.Keyboard;\n import org.terasology.input.device.KeyboardAction;\n import org.terasology.input.device.KeyboardDevice;\n \n+import java.util.Iterator;\n import java.util.Queue;\n \n /**\n+ *\n  */\n public class LwjglKeyboardDevice implements KeyboardDevice {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(LwjglKeyboardDevice.class);\n+    private static final TIntIntMap GLFW_TO_TERA_MAPPING = new TIntIntHashMap();\n+\n+    static {\n+        //TODO: test and cleanup keys\n+//        glfwToTeraMaps.put(GLFW.GLFW_KEY_NONE, Keyboard.KeyId.NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjE2Nw=="}, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4MjMwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNzoxM1rOGs3SSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxNzoxM1rOGs3SSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjMyOQ==", "bodyText": "More empty Javadoc", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696329", "createdAt": "2020-07-03T20:17:13Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -32,62 +33,73 @@\n import java.util.Queue;\n \n /**\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4NTAyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxOTozOFrOGs3T0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoxOTozOFrOGs3T0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NjcyMQ==", "bodyText": "Should this be noted in an issue somewhere just so it is documented that a button down event for mice won't work?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696721", "createdAt": "2020-07-03T20:19:38Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -32,62 +33,73 @@\n import java.util.Queue;\n \n /**\n+\n  */\n public class LwjglMouseDevice implements MouseDevice, PropertyChangeListener {\n     private RenderingConfig renderingConfig;\n     private float uiScale;\n     private boolean mouseGrabbed;\n+    private Queue<MouseAction> queue = Lists.newLinkedList();\n+\n+    private double xpos = 0.0;\n+    private double ypos = 0.0;\n+\n+    private double xposDelta = 0.0;\n+    private double yposDelta = 0.0;\n \n     public LwjglMouseDevice(Context context) {\n         this.renderingConfig = context.get(Config.class).getRendering();\n         this.uiScale = this.renderingConfig.getUiScale() / 100f;\n         this.renderingConfig.subscribe(RenderingConfig.UI_SCALE, this);\n+\n+        // GLFW callback\n+        long window = GLFW.glfwGetCurrentContext();\n+        GLFW.glfwSetCursorPosCallback(window, this::cursorPosCallback);\n+        GLFW.glfwSetMouseButtonCallback(window, this::mouseButtonCallback);\n+        GLFW.glfwSetScrollCallback(window, this::scrollCallback);\n+\n     }\n \n     @Override\n     public Vector2i getPosition() {\n-        return new Vector2i(Mouse.getX() / this.uiScale, (Display.getHeight() - Mouse.getY()) / this.uiScale);\n+        return new Vector2i((int) (xpos / this.uiScale), (int)  (ypos/ this.uiScale));\n     }\n \n     @Override\n     public Vector2i getDelta() {\n-        return new Vector2i(Mouse.getDX(), -Mouse.getDY());\n+        Vector2i result = new Vector2i((int) xposDelta, (int) yposDelta);\n+        xposDelta = 0.0;\n+        yposDelta = 0.0;\n+        return result;\n     }\n \n     @Override\n     public boolean isButtonDown(int button) {\n-        return Mouse.isButtonDown(button);\n+        return false; //FIXME: low priority unused method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4NTMzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMDowMFrOGs3UAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDowNzozOFrOGtYzSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njc2OA==", "bodyText": "Mystery commented out code", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696768", "createdAt": "2020-07-03T20:20:00Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -96,4 +108,31 @@ public void propertyChange(PropertyChangeEvent evt) {\n             this.uiScale = this.renderingConfig.getUiScale() / 100f;\n         }\n     }\n+\n+    private void cursorPosCallback(long window, double xpos, double ypos) {\n+        xposDelta = xpos - this.xpos;\n+        yposDelta = ypos - this.ypos;\n+        this.xpos = xpos;\n+        this.ypos = ypos;\n+    }\n+\n+    private void mouseButtonCallback(long window, int button, int action, int mods) {\n+        ButtonState state;\n+        if (action == GLFW.GLFW_PRESS) {\n+            state = ButtonState.DOWN;\n+        } else if (action == GLFW.GLFW_RELEASE) {\n+            state = ButtonState.UP;\n+        } else /*if (action == GLFW.GLFW_REPEAT)*/ {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI0NTQ1MQ==", "bodyText": "It is some kind a hmm... opaque meaning definition. answer on future question: \"Why a else returns ButtonState.REPEAT?\"", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450245451", "createdAt": "2020-07-06T14:07:38Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/input/lwjgl/LwjglMouseDevice.java", "diffHunk": "@@ -96,4 +108,31 @@ public void propertyChange(PropertyChangeEvent evt) {\n             this.uiScale = this.renderingConfig.getUiScale() / 100f;\n         }\n     }\n+\n+    private void cursorPosCallback(long window, double xpos, double ypos) {\n+        xposDelta = xpos - this.xpos;\n+        yposDelta = ypos - this.ypos;\n+        this.xpos = xpos;\n+        this.ypos = ypos;\n+    }\n+\n+    private void mouseButtonCallback(long window, int button, int action, int mods) {\n+        ButtonState state;\n+        if (action == GLFW.GLFW_PRESS) {\n+            state = ButtonState.DOWN;\n+        } else if (action == GLFW.GLFW_RELEASE) {\n+            state = ButtonState.UP;\n+        } else /*if (action == GLFW.GLFW_REPEAT)*/ {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njc2OA=="}, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4NjI4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMDo0MVrOGs3Ufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMDo0MVrOGs3Ufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Njg5NQ==", "bodyText": "More mystery commented out code, made an earlier comment on this specifically, still curious :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449696895", "createdAt": "2020-07-03T20:20:41Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/logic/players/DebugControlSystem.java", "diffHunk": "@@ -140,7 +139,7 @@ public void onKeyDown(KeyDownEvent event, EntityRef entity) {\n                 mouseGrabbed = !mouseGrabbed;\n                 DebugProperties debugProperties = (DebugProperties) nuiManager.getHUD().getHUDElement(\"engine:DebugProperties\");\n                 debugProperties.setVisible(!mouseGrabbed);\n-                Mouse.setGrabbed(mouseGrabbed);\n+               // Mouse.setGrabbed(mouseGrabbed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4NzYwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMTo1MlrOGs3VMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMTo1MlrOGs3VMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzA3NQ==", "bodyText": "Empty javadoc", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697075", "createdAt": "2020-07-03T20:21:52Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LwjglCanvasRenderer.java", "diffHunk": "@@ -83,6 +83,7 @@\n import static org.lwjgl.opengl.GL11.glTranslatef;\n \n /**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4ODMwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMjozMFrOGs3Vjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo1Njo1MFrOGtK9ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzE2Nw==", "bodyText": "?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697167", "createdAt": "2020-07-03T20:22:30Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java", "diffHunk": "@@ -85,15 +84,15 @@ public void unbindFrame() {\n         glLoadIdentity();\n         glMatrixMode(GL_PROJECTION);\n         glLoadIdentity();\n-        glOrtho(0, Display.getWidth(), Display.getHeight(), 0, 0, 2048f);\n+        glOrtho(0, 500,500, 0, 0, 2048f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODY4Mw==", "bodyText": "Forget ^_^ thx", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r450018683", "createdAt": "2020-07-06T06:56:50Z", "author": {"login": "DarkWeird"}, "path": "engine/src/main/java/org/terasology/rendering/opengl/LwjglFrameBufferObject.java", "diffHunk": "@@ -85,15 +84,15 @@ public void unbindFrame() {\n         glLoadIdentity();\n         glMatrixMode(GL_PROJECTION);\n         glLoadIdentity();\n-        glOrtho(0, Display.getWidth(), Display.getHeight(), 0, 0, 2048f);\n+        glOrtho(0, 500,500, 0, 0, 2048f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzE2Nw=="}, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA4OTYyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/opengl/PBO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMzozNVrOGs3WSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyMzozNVrOGs3WSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NzM1NQ==", "bodyText": "Clarify? Or able to just do it? Or is it waiting for some future change first?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449697355", "createdAt": "2020-07-03T20:23:35Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/rendering/opengl/PBO.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n import java.nio.ByteBuffer;\n \n-import static org.lwjgl.opengl.ARBBufferObject.*;\n+import static org.lwjgl.opengl.ARBVertexBufferObject.*; //TODO change this imports to GL15 (use above)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA5NTIzOnYy", "diffSide": "RIGHT", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyODo0MVrOGs3ZPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDoyODo0MVrOGs3ZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5ODExMQ==", "bodyText": "Assuming this code is copy-pasted in from somewhere we should probably attribute it somehow rather than use author tags, which go against our style code. A link to some webpage covering it would be better? And of course the code license should be compatible for sure :-)\nSame goes for any other similar code in this PR\nAlso: We already have a Color class, but I suppose they're different?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449698111", "createdAt": "2020-07-03T20:28:41Z", "author": {"login": "Cervator"}, "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Color.java", "diffHunk": "@@ -0,0 +1,272 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright \u00a9 2015, Heiko Brumme\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package org.terasology.engine.splash.graphics;\n+\n+import org.joml.Vector3f;\n+import org.joml.Vector4f;\n+\n+/**\n+ * This class represents a RGBA color.\n+ *\n+ * @author Heiko Brumme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzA5ODA2OnYy", "diffSide": "RIGHT", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDozMToxMFrOGs3axA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDozMToxMFrOGs3axA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5ODUwMA==", "bodyText": "Ah okay so here there are two license headers. Which looks a little odd.\nI do think we can mix them, but maybe we should still include some links, here and/or in the readme?\nOr maybe there's some way we can pull in this code via 3rd party jar or something, to avoid adding it to the repo?", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449698500", "createdAt": "2020-07-03T20:31:10Z", "author": {"login": "Cervator"}, "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Renderer.java", "diffHunk": "@@ -0,0 +1,481 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+/*\n+ * The MIT License (MIT)\n+ *\n+ * Copyright \u00a9 2014-2018, Heiko Brumme\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package org.terasology.engine.splash.graphics;\n+\n+import org.joml.Matrix4f;\n+import org.lwjgl.glfw.GLFW;\n+import org.lwjgl.system.MemoryStack;\n+import org.lwjgl.system.MemoryUtil;\n+import org.terasology.engine.splash.text.Font;\n+import org.terasology.rendering.dag.RenderGraph;\n+\n+import java.awt.FontFormatException;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.FloatBuffer;\n+import java.nio.IntBuffer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static org.lwjgl.opengl.GL11.GL_BLEND;\n+import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;\n+import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;\n+import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;\n+import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;\n+import static org.lwjgl.opengl.GL11.GL_TRIANGLES;\n+import static org.lwjgl.opengl.GL11.glBlendFunc;\n+import static org.lwjgl.opengl.GL11.glClear;\n+import static org.lwjgl.opengl.GL11.glDrawArrays;\n+import static org.lwjgl.opengl.GL11.glEnable;\n+import static org.lwjgl.opengl.GL15.GL_ARRAY_BUFFER;\n+import static org.lwjgl.opengl.GL15.GL_DYNAMIC_DRAW;\n+import static org.lwjgl.opengl.GL20.GL_FRAGMENT_SHADER;\n+import static org.lwjgl.opengl.GL20.GL_VERTEX_SHADER;\n+\n+/**\n+ * This class is performing the rendering process.\n+ *\n+ * @author Heiko Brumme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzExMDU0OnYy", "diffSide": "RIGHT", "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDo0Mjo1NFrOGs3hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDo0Mjo1NFrOGs3hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwMDIyNg==", "bodyText": "Seeing more of these files makes me think that yeah, maybe we should make this a quick jar file we could build and make available somewhere :-)\nMaybe not right this moment with this PR, but we could write a quick issue and extract it after", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r449700226", "createdAt": "2020-07-03T20:42:54Z", "author": {"login": "Cervator"}, "path": "facades/PC/src/main/java/org/terasology/engine/splash/graphics/Shader.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * The MIT License (MIT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5401d2c0469fff8fbf2edf0f5e30989f0b7810c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTg3NTc2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0MTowNVrOHjhkcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0MTowNVrOHjhkcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjIwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n          \n          \n            \n                    GL11.glLoadMatrixf(getViewMatrix().get(BufferUtils.createFloatBuffer(16));", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012208", "createdAt": "2020-10-18T03:41:05Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "diffHunk": "@@ -193,22 +193,22 @@ public Matrix4f getInverseViewProjectionMatrix() {\n     @Deprecated\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n         glMatrixMode(GL11.GL_MODELVIEW);\n     }\n \n     @Override\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTg3NjQ1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0MjoyMlrOHjhkvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0MjoyMlrOHjhkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));\n          \n          \n            \n                    GL11.glLoadMatrixf(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n          \n      \n    \n    \n  \n\nMatrixUtils is deprecated.", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012287", "createdAt": "2020-10-18T03:42:22Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/OpenVRStereoCamera.java", "diffHunk": "@@ -193,22 +193,22 @@ public Matrix4f getInverseViewProjectionMatrix() {\n     @Deprecated\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));\n         glMatrixMode(GL11.GL_MODELVIEW);\n     }\n \n     @Override\n     @Deprecated\n     public void loadModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(getViewMatrix().get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(getViewMatrix()));\n     }\n \n     @Override\n     @Deprecated\n     public void loadNormalizedModelViewMatrix() {\n         glMatrixMode(GL11.GL_MODELVIEW);\n-        GL11.glLoadMatrix(normViewMatrix.get(BufferUtils.createFloatBuffer(16)));\n+        GL11.glLoadMatrixf(MatrixUtils.matrixToFloatBuffer(normViewMatrix));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTg3ODAzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NTowNlrOHjhldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NTowNlrOHjhldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        GL11.glVertexPointer(2, 0,0, wrap(lineVertex));\n          \n          \n            \n                        GL11.glVertexPointer(2, 0, 0, wrap(lineVertex));", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012470", "createdAt": "2020-10-18T03:45:06Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -248,7 +248,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                     x2 - tx - rx, y2 - ty - ry,\n                     x2 + tx + rx, y2 + ty + ry\n                 };\n-            GL11.glVertexPointer(2, 0, wrap(lineVertex));\n+            GL11.glVertexPointer(2, 0,0, wrap(lineVertex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTg3ODE1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NToxOFrOHjhlgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NToxOFrOHjhlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            GL11.glColorPointer(3, 0,0, wrap(lineColor));\n          \n          \n            \n                            GL11.glColorPointer(3, 0, 0, wrap(lineColor));", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012483", "createdAt": "2020-10-18T03:45:18Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -262,7 +262,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue,\n                         cRed, cGreen, cBlue\n                     };\n-                GL11.glColorPointer(3, 0, wrap(lineColor));\n+                GL11.glColorPointer(3, 0,0, wrap(lineColor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTg3ODM5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NToyOVrOHjhlng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQwMzo0NToyOVrOHjhlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMjUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            GL11.glColorPointer(4, 0,0, wrap(lineColor));\n          \n          \n            \n                            GL11.glColorPointer(4, 0, 0, wrap(lineColor));", "url": "https://github.com/MovingBlocks/Terasology/pull/3969#discussion_r507012510", "createdAt": "2020-10-18T03:45:29Z", "author": {"login": "pollend"}, "path": "engine/src/main/java/org/terasology/rendering/nui/internal/LineRenderer.java", "diffHunk": "@@ -275,7 +275,7 @@ public static void draw(float x1, float y1, float x2, float y2, float width, Col\n                         cRed, cGreen, cBlue, a,\n                         cRed, cGreen, cBlue, a\n                     };\n-                GL11.glColorPointer(4, 0, wrap(lineColor));\n+                GL11.glColorPointer(4, 0,0, wrap(lineColor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9928964d2c3ddc0fb7b49703dae3915a25694daf"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 442, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}