{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDQ2MTkw", "number": 3871, "title": "More Gradle: now with makeshift release management! Ready for v3.0.0", "bodyText": "This ate my entire weekend, although just the spare time between GSOC proposal review, baby maintenance, and so on. Up way too late so will be brief \u2122\ufe0f - had imagined I might merge this straight to develop then PR to master for the v3.0.0 release, but too late and now too big.\nRealized I needed to be able to vary how artifacts get published, either as releases or snapshots to Artifactory. This used to be done by having two separate jobs in the legacy Jenkins, one tied to master that made releases, one tied to develop that made snapshots. The actual version numbers were modified by hand as part of doing a release (take off -SNAPSHOT, push to master, bump version and reattach -SNAPSHOT ...)\nNew Jenkins has a multi-branch pipeline job. Shiny. But it was publishing everything as snapshots, even pull requests getting built, meaning at any point in time a module build could run against some engine artifact that came out of an unmerged PR. Not great.\nOkay not too bad. Quick conditional to vary publishing by branch just for now. Oh, and really then I might as well just leave the version numbers without -SNAPSHOT and attach that dynamically if we're in develop ! Awesome bonus. Wait, but then what about modules. They use the same shared publish.gradle to keep things standard. That means they'll publish releases when building from master branches \ud83e\udd14\nAlright, too much work to make develop branches for everything, default them, have devs do both branches as a standard... besides we might be able to do better like with Git tags (ohai @skaldarnar) instead of branches, and hey now checks are in place in code to where we could probably just look at tags instead of branches. But this needs to work right now.\nAwkward release management to the rescue! We'll default modules to not have release management enabled, meaning even while building master branches unless \"isReleaseManaged\" : true is added to module.txt the new stuff won't trigger and we'll still just make snapshots. And the embedded modules with the engine will get that set, but nobody else yet. It isn't super pretty, but ... it works.\nFor any reviewers: The actual change in build.gradle for modules is minimal, I just had to move some things around. This has been tested with the Nanoware job line in Jenkins and repo line in Artifactory (which also took some extra effort to get right)\nBonus: The code will now gently (or angrily, if red text is angry) warn about modules that still use -SNAPSHOT in their own version in module.txt, so we can eventually clean that out (or just move the version out of code into tags). Thanks @sin3point14 for that!\nOutstanding\n\n Goes with MovingBlocks/ModuleJteConfig#3\n Javadoc fails on modules that have none, leading to failed build (huh, did this not trigger earlier?)\n Analytics run after publishing - that's a sinful allowance since there are no quality gates in recording the analytics yet so no way to fail the build anyway and this way it gets to the interesting parts sooner\n Think about next steps sooner or later, this isn't perfect but gets us closer ...\n Modules in theory can now run release builds, if enabled. However these will still use the \"build harness\" from the develop build of the engine. More work to do and scenarios to satisfy - but we'll get there. Shout out to @PS-Soundwave", "createdAt": "2020-03-30T06:57:05Z", "url": "https://github.com/MovingBlocks/Terasology/pull/3871", "merged": true, "mergeCommit": {"oid": "935895b9916afe4aaae7a81c903a2dfb990b1c0d"}, "closed": true, "closedAt": "2020-04-02T02:06:06Z", "author": {"login": "Cervator"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTJIkggFqTM4NTA2MDU3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTiLz7gBqjMxOTAyNTE5NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDYwNTc0", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#pullrequestreview-385060574", "createdAt": "2020-03-31T20:00:39Z", "commit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMDozOVrOF-l_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyNzoxNFrOF-m7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3ODUzMQ==", "bodyText": "I'm wondering whether we should start to scope the properties in the gradle builds, similar to what most plugins to. This would become terasology.publishRepo then...", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401178531", "createdAt": "2020-03-31T20:00:39Z", "author": {"login": "skaldarnar"}, "path": "config/gradle/publish.gradle", "diffHunk": "@@ -17,16 +17,45 @@ publishing {\n                 maven {\n                     name = 'TerasologyOrg'\n \n-                    def repoViaEnv = System.getenv()[\"PUBLISH_REPO\"]\n                     if (rootProject.hasProperty(\"publishRepo\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTM2OQ==", "bodyText": "The whole logic in here boils down to just this, doesn't it?\nif (isMaster(maybeGitBranch) && !shouldBypassModuleRelease()) {\n\tdeducedPublishRepo += \"-release-local\"\n} else {\n\tdeducedPublishRepo += \"-snapshot-local\"\n}\nI think with the two additional functions this code is really readable, and the nesting is reduced.\ndef isMaster(gitBranch) {\n  return gitBranch != null && gitBranch != \"\" && gitBranch.equals(\"master\");\n}\n\ndef shouldBypassModuleRelease() {\n  return project.hasProperty(\"bypassModuleReleaseManagement\") && \n\tbypassModuleReleaseManagement == \"true\";\n}", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401185369", "createdAt": "2020-03-31T20:12:52Z", "author": {"login": "skaldarnar"}, "path": "config/gradle/publish.gradle", "diffHunk": "@@ -17,16 +17,45 @@ publishing {\n                 maven {\n                     name = 'TerasologyOrg'\n \n-                    def repoViaEnv = System.getenv()[\"PUBLISH_REPO\"]\n                     if (rootProject.hasProperty(\"publishRepo\")) {\n+                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties\n                         url = \"http://artifactory.terasology.org/artifactory/$publishRepo\"\n-                        println \"Changing PUBLISH repoKey set via property to $publishRepo\"\n-                    } else if (repoViaEnv != null && repoViaEnv != \"\") {\n-                        url = \"http://artifactory.terasology.org/artifactory/$repoViaEnv\"\n-                        println \"Changing PUBLISH repoKey set via env var to $repoViaEnv\"\n+                        println \"Changing PUBLISH repoKey set via Gradle property to $publishRepo\"\n                     } else {\n-                        url = 'http://artifactory.terasology.org/artifactory/terasology-snapshot-local'\n-                        println \"PUBLISH repoKey is terasology-snapshot-local (default value)\"\n+                        // In this case we are going to fletch the publish repo together from a few things\n+                        // First if we have an override from the environment to use a different target publish org\n+                        String deducedPublishRepo = System.getenv()[\"PUBLISH_ORG\"]\n+                        if (deducedPublishRepo == null || deducedPublishRepo == \"\") {\n+                            // If not then default\n+                            deducedPublishRepo = \"terasology\"\n+                        }\n+                        String releaseRepoFragment = \"-release-local\"\n+                        String snapshotRepoFragment = \"-snapshot-local\"\n+\n+                        // Secondly we're going to find out if we're doing a release or a snapshot - this gets a little more complicated\n+                        String gitBranch = System.getenv()[\"BRANCH_NAME\"]\n+                        if (gitBranch != null && gitBranch != \"\" && gitBranch.equals(\"master\")) {\n+                            // Okay we're in an environment where a branch name is set to 'master' so we might be doing a release\n+                            // This is the funny part. Modules aren't ready globally to accept master branch == release, so check a prop that defaults to bypass\n+                            if (project.hasProperty(\"bypassModuleReleaseManagement\")) {\n+                                if (bypassModuleReleaseManagement == \"true\") {\n+                                    println \"Release management not enabled for \" + project.name + \", using snapshot repo despite building 'master' branch\"\n+                                    deducedPublishRepo += snapshotRepoFragment\n+                                } else {\n+                                    println \"Release management *is* enabled for \" + project.name + \", using release repo since building 'master' branch\"\n+                                    deducedPublishRepo += releaseRepoFragment\n+                                }\n+                            } else {\n+                                println \"We're working on a 'master' branch with defaults so using the release publish repo\"\n+                                deducedPublishRepo += releaseRepoFragment\n+                            }\n+                        } else {\n+                            // No master branch so we for sure are just doing snapshots\n+                            println \"We're not working with a branch name set that's 'master' so assuming we're publishing snapshots\"\n+                            deducedPublishRepo += \"-snapshot-local\"\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTczNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        deducedPublishRepo += \"-snapshot-local\"\n          \n          \n            \n                                        deducedPublishRepo += snapshotRepoFragment", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401185736", "createdAt": "2020-03-31T20:13:32Z", "author": {"login": "skaldarnar"}, "path": "config/gradle/publish.gradle", "diffHunk": "@@ -17,16 +17,45 @@ publishing {\n                 maven {\n                     name = 'TerasologyOrg'\n \n-                    def repoViaEnv = System.getenv()[\"PUBLISH_REPO\"]\n                     if (rootProject.hasProperty(\"publishRepo\")) {\n+                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties\n                         url = \"http://artifactory.terasology.org/artifactory/$publishRepo\"\n-                        println \"Changing PUBLISH repoKey set via property to $publishRepo\"\n-                    } else if (repoViaEnv != null && repoViaEnv != \"\") {\n-                        url = \"http://artifactory.terasology.org/artifactory/$repoViaEnv\"\n-                        println \"Changing PUBLISH repoKey set via env var to $repoViaEnv\"\n+                        println \"Changing PUBLISH repoKey set via Gradle property to $publishRepo\"\n                     } else {\n-                        url = 'http://artifactory.terasology.org/artifactory/terasology-snapshot-local'\n-                        println \"PUBLISH repoKey is terasology-snapshot-local (default value)\"\n+                        // In this case we are going to fletch the publish repo together from a few things\n+                        // First if we have an override from the environment to use a different target publish org\n+                        String deducedPublishRepo = System.getenv()[\"PUBLISH_ORG\"]\n+                        if (deducedPublishRepo == null || deducedPublishRepo == \"\") {\n+                            // If not then default\n+                            deducedPublishRepo = \"terasology\"\n+                        }\n+                        String releaseRepoFragment = \"-release-local\"\n+                        String snapshotRepoFragment = \"-snapshot-local\"\n+\n+                        // Secondly we're going to find out if we're doing a release or a snapshot - this gets a little more complicated\n+                        String gitBranch = System.getenv()[\"BRANCH_NAME\"]\n+                        if (gitBranch != null && gitBranch != \"\" && gitBranch.equals(\"master\")) {\n+                            // Okay we're in an environment where a branch name is set to 'master' so we might be doing a release\n+                            // This is the funny part. Modules aren't ready globally to accept master branch == release, so check a prop that defaults to bypass\n+                            if (project.hasProperty(\"bypassModuleReleaseManagement\")) {\n+                                if (bypassModuleReleaseManagement == \"true\") {\n+                                    println \"Release management not enabled for \" + project.name + \", using snapshot repo despite building 'master' branch\"\n+                                    deducedPublishRepo += snapshotRepoFragment\n+                                } else {\n+                                    println \"Release management *is* enabled for \" + project.name + \", using release repo since building 'master' branch\"\n+                                    deducedPublishRepo += releaseRepoFragment\n+                                }\n+                            } else {\n+                                println \"We're working on a 'master' branch with defaults so using the release publish repo\"\n+                                deducedPublishRepo += releaseRepoFragment\n+                            }\n+                        } else {\n+                            // No master branch so we for sure are just doing snapshots\n+                            println \"We're not working with a branch name set that's 'master' so assuming we're publishing snapshots\"\n+                            deducedPublishRepo += \"-snapshot-local\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjI4MQ==", "bodyText": "This would loose a couple of console lines, but overall the structure in the build file is more comprehensible imho.", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401186281", "createdAt": "2020-03-31T20:14:21Z", "author": {"login": "skaldarnar"}, "path": "config/gradle/publish.gradle", "diffHunk": "@@ -17,16 +17,45 @@ publishing {\n                 maven {\n                     name = 'TerasologyOrg'\n \n-                    def repoViaEnv = System.getenv()[\"PUBLISH_REPO\"]\n                     if (rootProject.hasProperty(\"publishRepo\")) {\n+                        // This first option is good for local testing, you can set a full explicit target repo in gradle.properties\n                         url = \"http://artifactory.terasology.org/artifactory/$publishRepo\"\n-                        println \"Changing PUBLISH repoKey set via property to $publishRepo\"\n-                    } else if (repoViaEnv != null && repoViaEnv != \"\") {\n-                        url = \"http://artifactory.terasology.org/artifactory/$repoViaEnv\"\n-                        println \"Changing PUBLISH repoKey set via env var to $repoViaEnv\"\n+                        println \"Changing PUBLISH repoKey set via Gradle property to $publishRepo\"\n                     } else {\n-                        url = 'http://artifactory.terasology.org/artifactory/terasology-snapshot-local'\n-                        println \"PUBLISH repoKey is terasology-snapshot-local (default value)\"\n+                        // In this case we are going to fletch the publish repo together from a few things\n+                        // First if we have an override from the environment to use a different target publish org\n+                        String deducedPublishRepo = System.getenv()[\"PUBLISH_ORG\"]\n+                        if (deducedPublishRepo == null || deducedPublishRepo == \"\") {\n+                            // If not then default\n+                            deducedPublishRepo = \"terasology\"\n+                        }\n+                        String releaseRepoFragment = \"-release-local\"\n+                        String snapshotRepoFragment = \"-snapshot-local\"\n+\n+                        // Secondly we're going to find out if we're doing a release or a snapshot - this gets a little more complicated\n+                        String gitBranch = System.getenv()[\"BRANCH_NAME\"]\n+                        if (gitBranch != null && gitBranch != \"\" && gitBranch.equals(\"master\")) {\n+                            // Okay we're in an environment where a branch name is set to 'master' so we might be doing a release\n+                            // This is the funny part. Modules aren't ready globally to accept master branch == release, so check a prop that defaults to bypass\n+                            if (project.hasProperty(\"bypassModuleReleaseManagement\")) {\n+                                if (bypassModuleReleaseManagement == \"true\") {\n+                                    println \"Release management not enabled for \" + project.name + \", using snapshot repo despite building 'master' branch\"\n+                                    deducedPublishRepo += snapshotRepoFragment\n+                                } else {\n+                                    println \"Release management *is* enabled for \" + project.name + \", using release repo since building 'master' branch\"\n+                                    deducedPublishRepo += releaseRepoFragment\n+                                }\n+                            } else {\n+                                println \"We're working on a 'master' branch with defaults so using the release publish repo\"\n+                                deducedPublishRepo += releaseRepoFragment\n+                            }\n+                        } else {\n+                            // No master branch so we for sure are just doing snapshots\n+                            println \"We're not working with a branch name set that's 'master' so assuming we're publishing snapshots\"\n+                            deducedPublishRepo += \"-snapshot-local\"\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NTM2OQ=="}, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4ODYyOQ==", "bodyText": "Heavyly in favor of git tags, as most modules don't have complicated branching going on anyways. But you're right, should not be done in this PR, and needs some proper thoughtwork to figure out details and edge cases...", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401188629", "createdAt": "2020-03-31T20:18:28Z", "author": {"login": "skaldarnar"}, "path": "modules/BiomesAPI/build.gradle", "diffHunk": "@@ -35,17 +25,25 @@ buildscript {\n     }\n }\n \n-// Handle some logic related to where what is\n-sourceSets {\n-    main.java.outputDir = new File(\"$buildDir/classes\")\n-    test.java.outputDir = new File(\"$buildDir/testClasses\")\n-}\n-JavaPluginConvention convention = project.getConvention().getPlugin(JavaPluginConvention.class);\n-SourceSet mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+import groovy.json.JsonSlurper\n+import org.reflections.Reflections\n+import org.reflections.util.FilterBuilder\n+import org.reflections.scanners.SubTypesScanner\n+import org.reflections.scanners.TypeAnnotationsScanner\n+import org.reflections.util.ConfigurationBuilder\n \n ext {\n     // Read environment variables, including variables passed by jenkins continuous integration server\n     env = System.getenv()\n+\n+    // This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases\n+    // This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once\n+    // Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules\n+    // Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo\n+    // If a module actually wants release management simply include `\"isReleaseManaged\" : true` in module.txt - this is needed for the engine repo embedded modules\n+    // One option would be to slowly convert modulespace to default to a `develop` + `master` setup living in harmony with associated automation/github tweaks\n+    // Alternatively one more round of refactoring could switch to Git tags, a single `master` branch, and possible other things to help match snaps/PR builds somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4OTUxMw==", "bodyText": "I don't like the fact that the generic module.txt now holds information specific to our build system. As it is not officially documented anywhere, I guess its not much of a deal. Nevertheless, I would like to get rid of it asap.", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401189513", "createdAt": "2020-03-31T20:19:50Z", "author": {"login": "skaldarnar"}, "path": "modules/BiomesAPI/build.gradle", "diffHunk": "@@ -35,17 +25,25 @@ buildscript {\n     }\n }\n \n-// Handle some logic related to where what is\n-sourceSets {\n-    main.java.outputDir = new File(\"$buildDir/classes\")\n-    test.java.outputDir = new File(\"$buildDir/testClasses\")\n-}\n-JavaPluginConvention convention = project.getConvention().getPlugin(JavaPluginConvention.class);\n-SourceSet mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+import groovy.json.JsonSlurper\n+import org.reflections.Reflections\n+import org.reflections.util.FilterBuilder\n+import org.reflections.scanners.SubTypesScanner\n+import org.reflections.scanners.TypeAnnotationsScanner\n+import org.reflections.util.ConfigurationBuilder\n \n ext {\n     // Read environment variables, including variables passed by jenkins continuous integration server\n     env = System.getenv()\n+\n+    // This is a fun one ... when versions switched to dynamic -SNAPSHOT or not based on branch existing modules using `master` would suddenly try publishing releases\n+    // This won't work without additionally doing constant version bumps (perhaps via Git tags) - but too much work to switch around all modules at once\n+    // Complicating things more the use of publish.gradle to centralize logic means modules and engine bits are treated the same, yet we need to vary modules\n+    // Temporary workaround: default modules to bypass release management: master branch builds will still make snapshot builds for the snapshot repo\n+    // If a module actually wants release management simply include `\"isReleaseManaged\" : true` in module.txt - this is needed for the engine repo embedded modules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4OTk4Mw==", "bodyText": "Why no null check for the branch name here? Shouldn't this be a similar check to isMaster(...) as proposed above?", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401189983", "createdAt": "2020-03-31T20:20:40Z", "author": {"login": "skaldarnar"}, "path": "modules/BiomesAPI/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MTAzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401191034", "createdAt": "2020-03-31T20:22:23Z", "author": {"login": "skaldarnar"}, "path": "modules/BiomesAPI/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MTM5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (!version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401191393", "createdAt": "2020-03-31T20:23:02Z", "author": {"login": "skaldarnar"}, "path": "modules/BiomesAPI/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {\n+        version -= \"-SNAPSHOT\"\n+        def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n+        out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+    }\n+} else {\n+    if (!version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjM0Mw==", "bodyText": "see above (isMaster(...) check).", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192343", "createdAt": "2020-03-31T20:24:36Z", "author": {"login": "skaldarnar"}, "path": "modules/BuilderSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjQ1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192458", "createdAt": "2020-03-31T20:24:48Z", "author": {"login": "skaldarnar"}, "path": "modules/BuilderSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjU3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (!version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192571", "createdAt": "2020-03-31T20:25:00Z", "author": {"login": "skaldarnar"}, "path": "modules/BuilderSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {\n+        version -= \"-SNAPSHOT\"\n+        def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n+        out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+    }\n+} else {\n+    if (!version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Mjc3MQ==", "bodyText": "see above", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192771", "createdAt": "2020-03-31T20:25:24Z", "author": {"login": "skaldarnar"}, "path": "modules/Core/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Mjg0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192848", "createdAt": "2020-03-31T20:25:33Z", "author": {"login": "skaldarnar"}, "path": "modules/Core/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MjkzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (!version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401192932", "createdAt": "2020-03-31T20:25:43Z", "author": {"login": "skaldarnar"}, "path": "modules/Core/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {\n+        version -= \"-SNAPSHOT\"\n+        def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n+        out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+    }\n+} else {\n+    if (!version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzMwOQ==", "bodyText": "see above", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193309", "createdAt": "2020-03-31T20:26:24Z", "author": {"login": "skaldarnar"}, "path": "modules/CoreSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzQxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193417", "createdAt": "2020-03-31T20:26:37Z", "author": {"login": "skaldarnar"}, "path": "modules/CoreSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (!version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193511", "createdAt": "2020-03-31T20:26:46Z", "author": {"login": "skaldarnar"}, "path": "modules/CoreSampleGameplay/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {\n+        version -= \"-SNAPSHOT\"\n+        def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n+        out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+    }\n+} else {\n+    if (!version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzY0OQ==", "bodyText": "see above", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193649", "createdAt": "2020-03-31T20:26:56Z", "author": {"login": "skaldarnar"}, "path": "templates/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193724", "createdAt": "2020-03-31T20:27:05Z", "author": {"login": "skaldarnar"}, "path": "templates/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Mzc5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!version.contains(\"-SNAPSHOT\")) {\n          \n          \n            \n                if (!version.endsWith(\"-SNAPSHOT\")) {", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401193791", "createdAt": "2020-03-31T20:27:14Z", "author": {"login": "skaldarnar"}, "path": "templates/build.gradle", "diffHunk": "@@ -69,11 +67,44 @@ for (dependency in moduleConfig.dependencies) {\n // Gradle uses the magic version variable when creating the jar name (unless explicitly set somewhere else I guess)\n version = moduleConfig.version\n \n+import org.gradle.internal.logging.text.StyledTextOutputFactory\n+import static org.gradle.internal.logging.text.StyledTextOutput.Style\n+\n+// The only case in which we make module non-snapshots is if release management is enabled and BRANCH_NAME is \"master\"\n+if (moduleConfig.isReleaseManaged && env.BRANCH_NAME == \"master\") {\n+    // This is mildly awkward since we need to bypass by default, yet if release management is on (true) then we set the bypass to false ..\n+    ext.bypassModuleReleaseManagement = false\n+    if (version.contains(\"-SNAPSHOT\")) {\n+        version -= \"-SNAPSHOT\"\n+        def out = services.get(StyledTextOutputFactory).create(\"an-ouput\")\n+        out.withStyle(Style.FailureHeader).println(\"WARNING: Module \" + project.name + \" is explicitly versioned as a snapshot in module.txt, please remove '-SNAPSHOT'\")\n+    }\n+} else {\n+    if (!version.contains(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1eb808bcf65ae03f59197310db1dc30350fd7c"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzQ4ODk5", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#pullrequestreview-385348899", "createdAt": "2020-04-01T08:02:03Z", "commit": {"oid": "a5b1bf569c1c79f454a7cf07abf9f36f97d848e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowMjowM1rOF-1HnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODowMjowM1rOF-1HnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyNjMzMw==", "bodyText": "What about a general approach like this (in the future): https://medium.com/@ungesehn/use-gitignore-for-gradle-task-excludes-e5d011e99f71\n.settings should be gitignores regardless of where in the file tree...", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#discussion_r401426333", "createdAt": "2020-04-01T08:02:03Z", "author": {"login": "skaldarnar"}, "path": "facades/subprojects.gradle", "diffHunk": "@@ -1,9 +1,13 @@\n // This magically allows subdirs in this subproject to themselves become sub-subprojects in a proper tree structure\n new File(rootDir, 'facades').eachDir { possibleSubprojectDir ->\n-    def subprojectName = 'facades:' + possibleSubprojectDir.name\n-    println \"Processing facade $subprojectName, including it as a sub-project\"\n-    include subprojectName\n-    def subprojectPath = ':' + subprojectName\n-    def subproject = project(subprojectPath)\n-    subproject.projectDir = possibleSubprojectDir\n+    if (!possibleSubprojectDir.name.startsWith(\".\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5b1bf569c1c79f454a7cf07abf9f36f97d848e9"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzQ5NzA2", "url": "https://github.com/MovingBlocks/Terasology/pull/3871#pullrequestreview-385349706", "createdAt": "2020-04-01T08:03:16Z", "commit": {"oid": "a5b1bf569c1c79f454a7cf07abf9f36f97d848e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f895a719833f2c1e55b4ba60511deaec6baf3a", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/18f895a719833f2c1e55b4ba60511deaec6baf3a", "committedDate": "2020-04-02T01:39:11Z", "message": "Support bypassing artifact publishing and varying the target based on branch name\n\nChange env var\n\nConsole logging issue\n\nFixy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e714a481d38996be80e9017ae8fae4775fbf1751", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/e714a481d38996be80e9017ae8fae4775fbf1751", "committedDate": "2020-04-02T01:39:11Z", "message": "Release v3.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39584a7c736ae48972e7351fc28840e865efef24", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/39584a7c736ae48972e7351fc28840e865efef24", "committedDate": "2020-04-02T01:39:11Z", "message": "Explicitly include javadoc (would otherwise not generate if not hitting publish)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e30d34e56a81e89e4e9339e2b68263f2769bdb6", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/9e30d34e56a81e89e4e9339e2b68263f2769bdb6", "committedDate": "2020-04-02T01:39:11Z", "message": "Makeshift release management for both engine components and modules\n\nAvoids having to manage -SNAPSHOT in code, instead it is deduced from the environment if a branch name is set (Jenkins)\n\nIf branch is master (and for modules if release management is opted into) then artifacts will be published to a release repo, otherwise to a snapshot repo\n\nRetains support for varying the target publish org in Artifactory so \"terasology\" vs \"nanoware\" for instance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3e3cd03ce4178ed11cc2828ec4e5d29639bc429", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/d3e3cd03ce4178ed11cc2828ec4e5d29639bc429", "committedDate": "2020-04-02T01:39:11Z", "message": "Exclude any facade or meta module directories that start with . from detection (can happen in some IDEs)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935895b9916afe4aaae7a81c903a2dfb990b1c0d", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/935895b9916afe4aaae7a81c903a2dfb990b1c0d", "committedDate": "2020-04-02T01:39:11Z", "message": "Cleanup from code review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5b1bf569c1c79f454a7cf07abf9f36f97d848e9", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a5b1bf569c1c79f454a7cf07abf9f36f97d848e9", "committedDate": "2020-04-01T03:42:44Z", "message": "Cleanup from code review"}, "afterCommit": {"oid": "935895b9916afe4aaae7a81c903a2dfb990b1c0d", "author": {"user": {"login": "Cervator", "name": "Rasmus Praestholm"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/935895b9916afe4aaae7a81c903a2dfb990b1c0d", "committedDate": "2020-04-02T01:39:11Z", "message": "Cleanup from code review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1714, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}