{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjExOTk2", "number": 4009, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyMjoxOVrOEBWAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozODozMlrOEDqXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQ0NTQxOnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyMjoxOVrOGdIkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0MDo1MFrOGdqChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjI1Mw==", "bodyText": "This should be extracted to its own method for better readability.\nDoing so will also make it easier to spot bugs or find the right location for doing improvements. We're missing that .gitignore files can also appear in subfolders and \"add up\" to each other. Not a huge deal, but ideally we could use some library to do this work for us...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433202253", "createdAt": "2020-06-01T12:22:19Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -188,6 +188,24 @@ class common {\n      */\n     def updateItem(String itemName) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (itemName.startsWith(\".\")){\n+            // add literal slash for regex start with '.'\n+            searchString = \"\\\\$itemName\"        \n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2ODA3NQ==", "bodyText": "Ok this now checks every .gitignore. I also added some output to tell you which .gitignore is blocking the module. See sample below:", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433568075", "createdAt": "2020-06-02T01:10:55Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -188,6 +188,24 @@ class common {\n      */\n     def updateItem(String itemName) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (itemName.startsWith(\".\")){\n+            // add literal slash for regex start with '.'\n+            searchString = \"\\\\$itemName\"        \n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjI1Mw=="}, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzczMzczNw==", "bodyText": "If I understand this correclty, modules/foo will be ignore now if mentioned in sandbox/.gitignore? I don't think that's how the ignored files are computed \ud83e\uddd0\nSome references:\n\nhttps://www.atlassian.com/git/tutorials/saving-changes/gitignore\nhttps://git-scm.com/docs/gitignore\nhttps://help.github.com/en/github/using-git/ignoring-files", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433733737", "createdAt": "2020-06-02T09:12:32Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -188,6 +188,24 @@ class common {\n      */\n     def updateItem(String itemName) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (itemName.startsWith(\".\")){\n+            // add literal slash for regex start with '.'\n+            searchString = \"\\\\$itemName\"        \n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjI1Mw=="}, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1MDY2MQ==", "bodyText": "I'm not used to multiple .gitignores. I had a section computing the relative path but realized I made a mistake and was finding the relative path to the root dir instead of the modules dir. Then the build failed after backing out the relative path stuff which surprised me. Wanted to get more info on that before continuing the relative path", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433750661", "createdAt": "2020-06-02T09:40:50Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -188,6 +188,24 @@ class common {\n      */\n     def updateItem(String itemName) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (itemName.startsWith(\".\")){\n+            // add literal slash for regex start with '.'\n+            searchString = \"\\\\$itemName\"        \n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjI1Mw=="}, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQ0OTE5OnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoyMzo0MVrOGdImjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDo1NjowNFrOGderUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjgzMQ==", "bodyText": "Honestly, I'd throw that out as I don't see any good reason for doing this \ud83e\uddd0 The solution works nicely, I just don't think we should do it that way...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433202831", "createdAt": "2020-06-01T12:23:41Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +233,41 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                Date lastUpdate = new Date(targetDirFetchHead.lastModified())\n+                def recentlyUpdated = use(groovy.time.TimeCategory){\n+                    def timeElapsedSinceUpdate = new Date() - lastUpdate\n+                    if (timeElapsedSinceUpdate < 2.minutes){\n+                        println color(\"Skipping update for $itemName: updated within last 2 minutes\", Ansi.YELLOW)\n+                        return true\n+                    } else {\n+                        return false\n+                    }\n+                }\n+                if (recentlyUpdated){\n+                    return\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMzEwNg==", "bodyText": "I was kind of hoping you would say that  :) I'll back this out.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433523106", "createdAt": "2020-06-01T22:28:09Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +233,41 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                Date lastUpdate = new Date(targetDirFetchHead.lastModified())\n+                def recentlyUpdated = use(groovy.time.TimeCategory){\n+                    def timeElapsedSinceUpdate = new Date() - lastUpdate\n+                    if (timeElapsedSinceUpdate < 2.minutes){\n+                        println color(\"Skipping update for $itemName: updated within last 2 minutes\", Ansi.YELLOW)\n+                        return true\n+                    } else {\n+                        return false\n+                    }\n+                }\n+                if (recentlyUpdated){\n+                    return\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjgzMQ=="}, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NDQ5Ng==", "bodyText": "reverted", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r433564496", "createdAt": "2020-06-02T00:56:04Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +233,41 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                Date lastUpdate = new Date(targetDirFetchHead.lastModified())\n+                def recentlyUpdated = use(groovy.time.TimeCategory){\n+                    def timeElapsedSinceUpdate = new Date() - lastUpdate\n+                    if (timeElapsedSinceUpdate < 2.minutes){\n+                        println color(\"Skipping update for $itemName: updated within last 2 minutes\", Ansi.YELLOW)\n+                        return true\n+                    } else {\n+                        return false\n+                    }\n+                }\n+                if (recentlyUpdated){\n+                    return\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjgzMQ=="}, "originalCommit": {"oid": "a8615d710b1ed3b230867e33c339e893bdc3219f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTYzMTI0OnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NzoxN1rOGfKGgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTowNToxN1rOGfySkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng==", "bodyText": "I just realized in a newly cloned module the FETCH_HEAD may not exist. I need to add some sort of check to make sure the file exists before running isRecentlyUpdated()", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435324546", "createdAt": "2020-06-04T14:57:17Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzNTczMg==", "bodyText": "reading stuff directly out of .git/ makes me anxious.\nI won't say it's never a good idea. In practice, those sorts of files usually have pretty stable formats. But if you can do it through your git client \u2014 which in this case looks like is Grgit wrapping JGit \u2014 do prefer that. Then they can be the ones responsible for handling whether or not files exist and what settings are in them.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435335732", "createdAt": "2020-06-04T15:12:22Z", "author": {"login": "keturn"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng=="}, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1ODM4Ng==", "bodyText": "I'm not actually reading the file, just checking the last time the file was modified by git.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435358386", "createdAt": "2020-06-04T15:40:31Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng=="}, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNTE4Mw==", "bodyText": "I'd still vote for removing this \"feature\" \ud83e\udd37", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435925183", "createdAt": "2020-06-05T13:36:02Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng=="}, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4Mjk5Mg==", "bodyText": "So I'm not married to the concept of that feature personally, I thought it could be a cool bit of utility if it would work out easily enough, but if it is becoming too complex I'm not at all opposed to going without :-)\nI just retried it, ran groovyw module update-all and one module updated. Ran groovyw module update-all --continue and all skipped. So it seemed like it worked \ud83d\udc4d Whether it actually is meaningful at this point I'm less sure about.\nWe had more cases in the past where an update-all in a mega-workspace could hit one module where the remote was gone (say the user had been testing some other users module and it had been deleted on GitHub) which would break the whole update. But I just tried to break a module's Git config and the process caught that gracefully, skipped it, and continued on its own.\nStill, that could just be one case, I'm not sure if there might be others. It seems like it works perfectly at this point and it is optional if passing in --continue - maybe it'll still be useful?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r435982992", "createdAt": "2020-06-05T15:05:17Z", "author": {"login": "Cervator"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,33 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && isRecentlyUpdated(targetDirFetchHead, timeLimit)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyNDU0Ng=="}, "originalCommit": {"oid": "7055b6866ed8e355a48033996e9f6eca2bea02b1"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxNDE4OnYy", "diffSide": "RIGHT", "path": "config/groovy/util.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NTozMVrOGf9GcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyNjoxOVrOGgyg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDExMg==", "bodyText": "I think there is some help message defined somewhere (printUsage) - could you please add a note about this flag there?\nWould --skipRecentlyUpdated be a better name?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436160112", "createdAt": "2020-06-05T20:55:31Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -117,8 +117,14 @@ switch (cleanerArgs[0]) {\n     case \"update-all\":\n         println \"We're updating every $itemType\"\n         println \"List of local entries: ${common.retrieveLocalItems()}\"\n-        for (item in common.retrieveLocalItems()) {\n-            common.updateItem(item)\n+        if (cleanerArgs.contains(\"--continue\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNTI0MA==", "bodyText": "The original reason I chose --continue is it lines up with some git commands so I thought it would be easier to remember. For example, If a git merge fails due to conflicts, you resolve the conflicts and call git merge --continue. I also did the two dashes convention for full words (-u is short for --set-upstream).\nI'm going change this to -skip-recently-updated to closer match the other flags listed in the printUsage.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437035240", "createdAt": "2020-06-08T22:26:19Z", "author": {"login": "cvennel"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -117,8 +117,14 @@ switch (cleanerArgs[0]) {\n     case \"update-all\":\n         println \"We're updating every $itemType\"\n         println \"List of local entries: ${common.retrieveLocalItems()}\"\n-        for (item in common.retrieveLocalItems()) {\n-            common.updateItem(item)\n+        if (cleanerArgs.contains(\"--continue\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDExMg=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxOTQ3OnYy", "diffSide": "RIGHT", "path": "config/groovy/util.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoyN1rOGf9Jqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoyN1rOGf9Jqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDkzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (cleanerArgs.contains(\"--continue\")) {\n          \n          \n            \n                        for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                            common.updateItem(item, true)\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                            common.updateItem(item)\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    def skipRecentlyUpdated = cleanerArgs.contains(\"--continue\")\n          \n          \n            \n                    for (item in common.retrieveLocalItems()) {\n          \n          \n            \n                    \tcommon.updateItem(item, skipRecentlyUpdated)\n          \n          \n            \n                    }", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436160939", "createdAt": "2020-06-05T20:57:27Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -117,8 +117,14 @@ switch (cleanerArgs[0]) {\n     case \"update-all\":\n         println \"We're updating every $itemType\"\n         println \"List of local entries: ${common.retrieveLocalItems()}\"\n-        for (item in common.retrieveLocalItems()) {\n-            common.updateItem(item)\n+        if (cleanerArgs.contains(\"--continue\")) {\n+            for (item in common.retrieveLocalItems()) {\n+                common.updateItem(item, true)\n+            }\n+        } else {\n+            for (item in common.retrieveLocalItems()) {\n+                common.updateItem(item)\n+            }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg1MDEzOnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToxMDo0MlrOGf9c3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo1MTo0OVrOGgxswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTg1NA==", "bodyText": "This methods works independently of the fact that you pass it a FETCH_HEAD file. Thus, I would just call this file to make that clear.\nUsing this method to determine whether the git state is somewhat recent is a usage specific.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436165854", "createdAt": "2020-06-05T21:10:42Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMTg4OQ==", "bodyText": "Good point.", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437021889", "createdAt": "2020-06-08T21:51:49Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTg1NA=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg2NzY4OnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToxODoyN1rOGf9oBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyNjo0MlrOGgyhaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2ODcwOA==", "bodyText": "So if this is called skipRecentUpdates here - why is the corresponding command line flag called --continue?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436168708", "createdAt": "2020-06-05T21:18:27Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNTM2OA==", "bodyText": "changed flag", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437035368", "createdAt": "2020-06-08T22:26:42Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2ODcwOA=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg3NDYwOnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyMTo1NFrOGf9srQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMDo1OVrOGgynqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTkwMQ==", "bodyText": "Please turn this into a method and use it inline in the check:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    def inGitIgnore = false\n          \n          \n            \n                    new File(\".gitignore\").eachLine{ line -> \n          \n          \n            \n                        // match if line is exactly same os itemName or has trailing '/' but\n          \n          \n            \n                        // not if has further subdirectories\n          \n          \n            \n                        if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n          \n          \n            \n                            inGitIgnore = true\n          \n          \n            \n                            return\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (inGitIgnore){\n          \n          \n            \n                    if (isGitIgnored(itemName)) {", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436169901", "createdAt": "2020-06-05T21:21:54Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (!Character.isLetterOrDigit(itemName.charAt(0))){   \n+            println color (\"Skipping update for $itemName: starts with non-alphanumeric symbol\", Ansi.YELLOW)\n+            return\n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }\n+        if (inGitIgnore){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjk2OQ==", "bodyText": "Oof, I mean to revert this as well. This isn't actually going to be used any more, I took out the gitignore processing in favor of just ignoring directories starting with non-alpha-numeric characters since I can't truly honor the gitignore", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437036969", "createdAt": "2020-06-08T22:30:59Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName\n+        if (!Character.isLetterOrDigit(itemName.charAt(0))){   \n+            println color (\"Skipping update for $itemName: starts with non-alphanumeric symbol\", Ansi.YELLOW)\n+            return\n+        }\n+        def inGitIgnore = false\n+        new File(\".gitignore\").eachLine{ line -> \n+            // match if line is exactly same os itemName or has trailing '/' but\n+            // not if has further subdirectories\n+            if ((line ==~ searchString) || (line ==~ \"$searchString/\")){\n+                inGitIgnore = true\n+                return\n+            }\n+        }\n+        if (inGitIgnore){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTkwMQ=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg3NjU3OnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyMjo0NlrOGf9t4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMjoyN1rOGgyp5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MDIwOQ==", "bodyText": "What is this declaration used for? Are you modifying the searchString somewhere?", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436170209", "createdAt": "2020-06-05T21:22:46Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzU0Mg==", "bodyText": "This accidentally returned when I reverted a commit. At one point I was modifying the search string to find relative paths... I cut this out", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437037542", "createdAt": "2020-06-08T22:32:27Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -182,12 +182,47 @@ class common {\n         addRemote(itemName, defaultRemote, \"https://github.com/${githubDefaultHome}/${itemName}.git\")\n     }\n \n+    /**\n+     * Check if an item was updated within the provided time limit\n+     * @param fetchHead the item's FETCH_HEAD file in the .git directory\n+     * @param timeLimit the time limit for considering something recently updated, for example: use(groovy.time.TimeCategory){ 10.minute }\n+     */\n+    def isRecentlyUpdated(File fetchHead, def timeLimit){\n+        Date lastUpdate = new Date(fetchHead.lastModified())\n+        def recentlyUpdated = use(groovy.time.TimeCategory){\n+            def timeElapsedSinceUpdate = new Date() - lastUpdate\n+            if (timeElapsedSinceUpdate < timeLimit){\n+                return true\n+            } else {\n+                return false\n+            }\n+        }\n+    }\n+\n     /**\n      * Update a given item.\n      * @param itemName the name of the item to update\n      */\n-    def updateItem(String itemName) {\n+    def updateItem(String itemName, boolean skipRecentUpdates = false) {\n         File targetDir = new File(targetDirectory, itemName)\n+        def searchString = itemName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MDIwOQ=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg5NDkyOnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMTozMFrOGf95sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo1MDozMlrOGg0Iyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzIzNA==", "bodyText": "This should at least be extracted to a method for better readability.\nI think this bit clutters our code, and in my opinion for no apparent reason other than \"because it is technically possible\". We are not using Github API to worry about rate limiting, so I don't understand why we would ever need this feature.\n@Cervator I'd rather have 20-30 lines of code less to maintain (and/or go stale)...", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436173234", "createdAt": "2020-06-05T21:31:30Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NzgzNg==", "bodyText": "That's the main bit of hesitancy I've got now that my original use case doesn't result in the update halting early. If that still happened in mega-workspaces (I've hit that regularly in the past, having various GCI modules etc) then I'd still go for this for sure. But now, that I'm not sure it'll ever be needed? Conflicted \ud83d\ude15\nTo be clear the time it takes to chug through a 200 module megaworkspace with an update-all possibly several times (if something breaks) was the motivation, less so the stress on GitHub. Although my digital treehugger self does lose a tiny bit of sleep at night over that as well :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436187836", "createdAt": "2020-06-05T22:13:19Z", "author": {"login": "Cervator"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzIzNA=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MTgzNA==", "bodyText": "I didn't fully extract to a new method, but did make it more readable. It was looking to me like extracting wouldn't make it much more readable, let me know what you think", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437061834", "createdAt": "2020-06-08T23:50:32Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzIzNA=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjg5Nzk4OnYy", "diffSide": "RIGHT", "path": "config/groovy/common.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMzowMFrOGf97wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjo0MzozOFrOGgy5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Mzc2MQ==", "bodyText": "Could you please add a //TODO: .. comment referencing the grgit issue", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r436173761", "createdAt": "2020-06-05T21:33:00Z", "author": {"login": "skaldarnar"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }\n+                \n                 try {\n+                    def current_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n                     itemGit.pull remote: defaultRemote\n+                    def post_update_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n+                        \n+                    if (current_sha != post_update_sha){\n+                        println color(\"Updating $current_sha..$post_update_sha\", Ansi.GREEN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTQxNQ==", "bodyText": "done", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437041415", "createdAt": "2020-06-08T22:43:38Z", "author": {"login": "cvennel"}, "path": "config/groovy/common.groovy", "diffHunk": "@@ -215,8 +250,37 @@ class common {\n                 println color(\"uncommitted changes. Skipping.\", Ansi.YELLOW)\n             } else {\n                 println color(\"updating $itemType $itemName\", Ansi.GREEN)\n+                File targetDirFetchHead = new File(\"$targetDir/.git/FETCH_HEAD\")\n+                def timeLimit = use(groovy.time.TimeCategory){ 10.minute }\n+                if (skipRecentUpdates && targetDirFetchHead.exists() && isRecentlyUpdated(targetDirFetchHead, timeLimit)){\n+                    println color(\"Skipping update for $itemName: updated within last $timeLimit\", Ansi.YELLOW)\n+                    return\n+                }\n+                if (targetDirFetchHead.exists()){\n+                    targetDirFetchHead.setLastModified(new Date().getTime())\n+                }\n+                \n                 try {\n+                    def current_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n                     itemGit.pull remote: defaultRemote\n+                    def post_update_sha = itemGit.log(maxCommits: 1).find().getAbbreviatedId(8)\n+                        \n+                    if (current_sha != post_update_sha){\n+                        println color(\"Updating $current_sha..$post_update_sha\", Ansi.GREEN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Mzc2MQ=="}, "originalCommit": {"oid": "bcdf1d2b50c75173eac30efc76b2296fbad679c8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc1MjcwOnYy", "diffSide": "RIGHT", "path": "config/groovy/util.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozODozMlrOGgz7LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo0MDowOFrOGgz86A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODM0OQ==", "bodyText": "This is the new line. The rest is removing unnecessary println statements in favor of a multi-line string", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437058349", "createdAt": "2020-06-08T23:38:32Z", "author": {"login": "cvennel"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -297,50 +298,52 @@ private void printListItemsCondensed(String[] items) {\n  * Simply prints usage information.\n  */\n def printUsage() {\n-    println \"\"\n-    println \"Utility script for interacting with Terasology. General syntax:\"\n-    println \"  groovyw (type) (sub-command)\"\n-    println \"- 'type' may be module,meta,lib or facade.\"\n-    println \"\"\n-    println \"Available sub-commands:\"\n-    println \"- 'init' - retrieves a given module distro, or a default sample source module (modules only)\"\n-    println \"- 'get' - retrieves one or more items in source form (separate with spaces)\"\n-    println \"- 'get-all' - retrieves all modules that can be found on the configured remote locations\"\n-    println \"- 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\"\n-    println \"- 'list' - lists items that are available for download or downloaded already.\"\n-    println \"- 'create' - creates a new item of the given type.\"\n-    println \"- 'update' - updates an item (git pulls latest from current origin, if workspace is clean\"\n-    println \"- 'update-all' - updates all local items of the given type.\"\n-    println \"- 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\"\n-    println \"- 'add-remote (item) (name) (URL)' - adds a remote with the given URL\"\n-    println \"- 'list-remotes (item)' - lists all remotes for (item) \"\n-    println \"- 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\"\n-    println \"- 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\"\n-    println \"\"\n-    println \"Available flags:\"\n-    println \"'-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\"\n-    println \"       Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\"\n-    println \"'-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\"\n-    println \"'-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\"\n-    println \"\"\n-    println \"Example: 'groovyw module init iota' - retrieves all the modules in the Iota module distro from GitHub.\"\n-    println \"Example: 'groovyw module get Sample -remote jellysnake' - would retrieve Sample from jellysnake's Sample repo on GitHub.\"\n-    println \"Example: 'groovyw module get-all' - would retrieve all the modules in the Terasology organisation on GitHub.\"\n-    println \"Example: 'groovyw module get Sa??l*' - would retrieve all the modules in the Terasology organisation on GitHub\" +\n-            \" that start with \\\"Sa\\\", have any two characters after that, then an \\\"l\\\" and then end with anything else.\" +\n-            \" This should retrieve the Sample repository from the Terasology organisation on GitHub.\"\n-    println \"\"\n-    println \"*NOTE*: On UNIX platforms (MacOS and Linux), the wildcard arguments must be escaped with single quotes e.g. groovyw module get '*'.\"\n-    println \"\"\n-    println \"Example: 'groovyw module recurse GooeysQuests Sample' - would retrieve those modules plus their dependencies as source\"\n-    println \"Example: 'groovyw lib list' - would list library projects compatible with being embedded in a Terasology workspace\"\n-    println \"Example: 'groovyw module createDependencyDotFile JoshariasSurvival' - would create a dot file with JS' dependencies and all their dependencies - if locally available\"\n-    println \"\"\n-    println \"*NOTE*: Item names are case sensitive. If you add items then `gradlew idea` or similar may be needed to refresh your IDE\"\n-    println \"\"\n-    println \"If you omit further arguments beyond the sub-command you'll be prompted for details\"\n-    println \"\"\n-    println \"For advanced usage see project documentation. For instance you can provide an alternative GitHub home\"\n-    println \"A gradle.properties file (one exists under '/templates' in an engine workspace) can provide such overrides\"\n-    println \"\"\n+\n+    println(\"\"\"\n+    Utility script for interacting with Terasology. General syntax:\n+      groovyw (type) (sub-command)\n+    - 'type' may be module,meta,lib or facade.\n+    \n+    Available sub-commands:\n+    - 'init' - retrieves a given module distro, or a default sample source module (modules only)\n+    - 'get' - retrieves one or more items in source form (separate with spaces)\n+    - 'get-all' - retrieves all modules that can be found on the configured remote locations\n+    - 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\n+    - 'list' - lists items that are available for download or downloaded already.\n+    - 'create' - creates a new item of the given type.\n+    - 'update' - updates an item (git pulls latest from current origin, if workspace is clean\n+    - 'update-all' - updates all local items of the given type.\n+    - 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\n+    - 'add-remote (item) (name) (URL)' - adds a remote with the given URL\n+    - 'list-remotes (item)' - lists all remotes for (item) \n+    - 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\n+    - 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\n+    \n+    Available flags:\n+    '-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\n+           Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\n+    '-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\n+    '-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\n+    '-skip-recently-updated' (Only for update-all) to skip updating modules that have already been updated within 10 minutes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8c1615c0bd3d50e7892fba639cf3fc1551700f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODc5Mg==", "bodyText": "to be clear, I meant line 327", "url": "https://github.com/MovingBlocks/Terasology/pull/4009#discussion_r437058792", "createdAt": "2020-06-08T23:40:08Z", "author": {"login": "cvennel"}, "path": "config/groovy/util.groovy", "diffHunk": "@@ -297,50 +298,52 @@ private void printListItemsCondensed(String[] items) {\n  * Simply prints usage information.\n  */\n def printUsage() {\n-    println \"\"\n-    println \"Utility script for interacting with Terasology. General syntax:\"\n-    println \"  groovyw (type) (sub-command)\"\n-    println \"- 'type' may be module,meta,lib or facade.\"\n-    println \"\"\n-    println \"Available sub-commands:\"\n-    println \"- 'init' - retrieves a given module distro, or a default sample source module (modules only)\"\n-    println \"- 'get' - retrieves one or more items in source form (separate with spaces)\"\n-    println \"- 'get-all' - retrieves all modules that can be found on the configured remote locations\"\n-    println \"- 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\"\n-    println \"- 'list' - lists items that are available for download or downloaded already.\"\n-    println \"- 'create' - creates a new item of the given type.\"\n-    println \"- 'update' - updates an item (git pulls latest from current origin, if workspace is clean\"\n-    println \"- 'update-all' - updates all local items of the given type.\"\n-    println \"- 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\"\n-    println \"- 'add-remote (item) (name) (URL)' - adds a remote with the given URL\"\n-    println \"- 'list-remotes (item)' - lists all remotes for (item) \"\n-    println \"- 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\"\n-    println \"- 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\"\n-    println \"\"\n-    println \"Available flags:\"\n-    println \"'-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\"\n-    println \"       Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\"\n-    println \"'-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\"\n-    println \"'-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\"\n-    println \"\"\n-    println \"Example: 'groovyw module init iota' - retrieves all the modules in the Iota module distro from GitHub.\"\n-    println \"Example: 'groovyw module get Sample -remote jellysnake' - would retrieve Sample from jellysnake's Sample repo on GitHub.\"\n-    println \"Example: 'groovyw module get-all' - would retrieve all the modules in the Terasology organisation on GitHub.\"\n-    println \"Example: 'groovyw module get Sa??l*' - would retrieve all the modules in the Terasology organisation on GitHub\" +\n-            \" that start with \\\"Sa\\\", have any two characters after that, then an \\\"l\\\" and then end with anything else.\" +\n-            \" This should retrieve the Sample repository from the Terasology organisation on GitHub.\"\n-    println \"\"\n-    println \"*NOTE*: On UNIX platforms (MacOS and Linux), the wildcard arguments must be escaped with single quotes e.g. groovyw module get '*'.\"\n-    println \"\"\n-    println \"Example: 'groovyw module recurse GooeysQuests Sample' - would retrieve those modules plus their dependencies as source\"\n-    println \"Example: 'groovyw lib list' - would list library projects compatible with being embedded in a Terasology workspace\"\n-    println \"Example: 'groovyw module createDependencyDotFile JoshariasSurvival' - would create a dot file with JS' dependencies and all their dependencies - if locally available\"\n-    println \"\"\n-    println \"*NOTE*: Item names are case sensitive. If you add items then `gradlew idea` or similar may be needed to refresh your IDE\"\n-    println \"\"\n-    println \"If you omit further arguments beyond the sub-command you'll be prompted for details\"\n-    println \"\"\n-    println \"For advanced usage see project documentation. For instance you can provide an alternative GitHub home\"\n-    println \"A gradle.properties file (one exists under '/templates' in an engine workspace) can provide such overrides\"\n-    println \"\"\n+\n+    println(\"\"\"\n+    Utility script for interacting with Terasology. General syntax:\n+      groovyw (type) (sub-command)\n+    - 'type' may be module,meta,lib or facade.\n+    \n+    Available sub-commands:\n+    - 'init' - retrieves a given module distro, or a default sample source module (modules only)\n+    - 'get' - retrieves one or more items in source form (separate with spaces)\n+    - 'get-all' - retrieves all modules that can be found on the configured remote locations\n+    - 'recurse' - retrieves the given item(s) *and* their dependencies in source form (really only for modules)\n+    - 'list' - lists items that are available for download or downloaded already.\n+    - 'create' - creates a new item of the given type.\n+    - 'update' - updates an item (git pulls latest from current origin, if workspace is clean\n+    - 'update-all' - updates all local items of the given type.\n+    - 'add-remote (item) (name)' - adds a remote (name) to (item) with the default URL.\n+    - 'add-remote (item) (name) (URL)' - adds a remote with the given URL\n+    - 'list-remotes (item)' - lists all remotes for (item) \n+    - 'refresh' - replaces the Gradle build file for all items of the given type from the latest template\n+    - 'createDependencyDotFile' - creates a dot file recursively listing dependencies of given locally available module, can be visualized with e.g. graphviz\n+    \n+    Available flags:\n+    '-remote [someRemote]' to clone from an alternative remote, also adding the upstream org (like MovingBlocks) repo as 'origin'\n+           Note: 'get' + 'recurse' only. This will override an alternativeGithubHome set via gradle.properties.\n+    '-simple-list-format' to print one item per row for the 'list' sub-command, even for large numbers of items\n+    '-condensed-list-format' to group items by starting letter for the 'list' sub-command (default with many items)\n+    '-skip-recently-updated' (Only for update-all) to skip updating modules that have already been updated within 10 minutes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODM0OQ=="}, "originalCommit": {"oid": "be8c1615c0bd3d50e7892fba639cf3fc1551700f"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 494, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}