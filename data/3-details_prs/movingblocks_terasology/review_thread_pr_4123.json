{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODU4OTUz", "number": 4123, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODozNDoyNVrOEYuywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODo0MDoxMlrOEYu0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzY3OTM3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODozNDoyNVrOHBM5rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODozNDoyNVrOHBM5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMTk5Nw==", "bodyText": "Rather than duplicate the calculation (invites bugs) would it make sense to have getResultValue call getResultValueWithoutCapping then simply cap and return the result?", "url": "https://github.com/MovingBlocks/Terasology/pull/4123#discussion_r471021997", "createdAt": "2020-08-15T18:34:25Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "diffHunk": "@@ -76,6 +78,27 @@ public float getResultValue() {\n         return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n     }\n \n+    /**\n+     * This is a temporary method to be used in events where negative value support is essential for calculating the\n+     * result value.\n+     *\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>\n+     * </pre>\n+     *\n+     * <emph>Negative result values are allowed here.</emph>\n+     */\n+    public float getResultValueWithoutCapping() {\n+        //TODO: Based on an extended discussion from : https://github.com/MovingBlocks/Terasology/pull/4063\n+        // This is a temporary method which should be merged with the getResultValue() after all its uses are\n+        // checked out and corrected for(if needed).\n+        return (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e7ac930862f3defd90bca38c05bc918cd9349d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzY4MzEzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODo0MDoxMlrOHBM7jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxODo0MDoxMlrOHBM7jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMjQ3OQ==", "bodyText": "If you just have one method call the other you could probably also save the duplication in the javadoc with a @see tag or whichever the appropriate one is. Not that it is necessarily bad to be thorough but it is such a typical bug when you have two similar things then end up forgetting a spot :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4123#discussion_r471022479", "createdAt": "2020-08-15T18:40:12Z", "author": {"login": "Cervator"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractValueModifiableEvent.java", "diffHunk": "@@ -76,6 +78,27 @@ public float getResultValue() {\n         return Math.max(0, (baseValue + modifiers.sum()) * product(multipliers) + postModifiers.sum());\n     }\n \n+    /**\n+     * This is a temporary method to be used in events where negative value support is essential for calculating the\n+     * result value.\n+     *\n+     * Calculates the result value from the base value and given modifiers and multipliers.\n+     * <p>\n+     * The value is calculated based on the following formula:\n+     * <pre>\n+     * result = (<baseValue> + \u03a3 <modifier>) * \u03a0 <multiplier> + \u03a3 <postModifier>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9e7ac930862f3defd90bca38c05bc918cd9349d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 347, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}