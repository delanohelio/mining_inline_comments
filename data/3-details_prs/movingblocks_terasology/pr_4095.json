{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MzEyNTIz", "number": 4095, "title": "feat: Add BeforeAfterEvent", "bodyText": "Adds AbstractBeforeAfterEvent : Immutable event to notify a change in a certain value.\nThis is a generic event and more specific events implementing this event should be fired and reacted to.", "createdAt": "2020-07-22T19:30:50Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4095", "merged": true, "mergeCommit": {"oid": "0118d0d20431dc31f117ddea1a0ca43a26849c0b"}, "closed": true, "closedAt": "2020-07-27T10:28:51Z", "author": {"login": "ktksan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3hQcsgBqjM1Nzc1MzUwNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4_QLiAFqTQ1NTY2MTE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fec02aa97dcf3ba0550e5db26c4624c368d04024", "author": {"user": {"login": "ktksan", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fec02aa97dcf3ba0550e5db26c4624c368d04024", "committedDate": "2020-07-22T20:38:07Z", "message": "Delete 0f)"}, "afterCommit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "author": {"user": {"login": "ktksan", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/332bcde0a18813fa1ec7ac5b30a09a320a8416bf", "committedDate": "2020-07-22T20:53:44Z", "message": "delete extra files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mzc4Mjk3", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#pullrequestreview-454378297", "createdAt": "2020-07-23T18:09:31Z", "commit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowOTozMVrOG2V6pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMDo1MVrOG2WUBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTM2Ng==", "bodyText": "Did you ever work with Generics, as in, implemented a generic class? I'd think this would be a good case where we can use that - don't fix the event to be based on float right away.\nSo here's my suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AbstractBeforeAfterEvent implements Event {\n          \n          \n            \n            public abstract class BeforeAfterEvent<T> implements Event {\n          \n      \n    \n    \n  \n\n\nmake the class abstract to ensure nobody can create a new BeforeAfterEvent(\"foo\", \"bar\") out of thin air, but has to extend it to use it.\nshorten the name to BeforeAfterEvent - I don't see any good value in explicitly prefixing the \"Abstract\" part, and the inheritance line will read a little bit cleaner\npublic class HealthChangedEvent extends BeforeAfterEvent<Float> { ... }\n\nmake the type of the changed value generic <T>. this allows to reuse the same base class regardless whether the value is an integer, a float, a string, or anything else. However, this implies that we cannot offer the getChange on this base class.", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459635366", "createdAt": "2020-07-23T18:09:31Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTcyOA==", "bodyText": "If the class works with a generic <T> these values become of type T.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final float oldValue;\n          \n          \n            \n                private final float newValue;\n          \n          \n            \n                protected final T oldValue;\n          \n          \n            \n                protected final T newValue;\n          \n      \n    \n    \n  \n\nIf subclasses should be able to access oldValue and newValue those should be protected instead of private.", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459635728", "createdAt": "2020-07-23T18:10:05Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNjE1Ng==", "bodyText": "Same here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AbstractBeforeAfterEvent(float oldValue, float newValue) {\n          \n          \n            \n                AbstractBeforeAfterEvent(final T oldValue, final T newValue) {\n          \n      \n    \n    \n  \n\nWe can also mark them final as we are not going to change them ever in this event.", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459636156", "createdAt": "2020-07-23T18:10:45Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;\n+\n+    /**\n+     * Creates a new notification event on change in value.\n+     */\n+    AbstractBeforeAfterEvent(float oldValue, float newValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTg2MQ==", "bodyText": "If we want this convenience functionality you could introduce a\npublic abstract class FloatBeforeAfterEvent extends BeforeAfterEvent<Float> { ... }\nfor this purpose.\nFor calculating the factor you could consider to return infinity in case the old value was zero, something like this (there's a difference between positive and negative infinity, though):\n    public float getFactor() {\n        return oldValue != 0 ? newValue / oldValue : Float.POSITIVE_INFINITY;\n    }", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#discussion_r459641861", "createdAt": "2020-07-23T18:20:51Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/entitySystem/event/AbstractBeforeAfterEvent.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.entitySystem.event;\n+\n+/**\n+ * Immutable event to notify a change in a certain value.\n+ * NOTE: This is a generic event and a more specific Event extending this event should be fired and reacted to.\n+ */\n+public class AbstractBeforeAfterEvent implements Event {\n+    private final float oldValue;\n+    private final float newValue;\n+\n+    /**\n+     * Creates a new notification event on change in value.\n+     */\n+    AbstractBeforeAfterEvent(float oldValue, float newValue) {\n+        this.oldValue = oldValue;\n+        this.newValue = newValue;\n+    }\n+\n+    /**\n+     * Returns the value prior to change.\n+     */\n+    public float getOldValue() {\n+        return oldValue;\n+    }\n+\n+    /**\n+     * Returns the value after change.\n+     */\n+    public float getNewValue() {\n+        return newValue;\n+    }\n+\n+    /**\n+     * Returns the amount by which the value has been changed.\n+     */\n+    public float getChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332bcde0a18813fa1ec7ac5b30a09a320a8416bf"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19", "author": {"user": {"login": "ktksan", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/d05976eb2ea98ad06742e80e33de6c4c30acae19", "committedDate": "2020-07-23T21:14:48Z", "message": "Add BeforeAfterEvent"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e67a01d58176a7d7635daad67fc4b36b061df51", "author": {"user": {"login": "ktksan", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/5e67a01d58176a7d7635daad67fc4b36b061df51", "committedDate": "2020-07-23T21:08:10Z", "message": "Switch class to generic"}, "afterCommit": {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19", "author": {"user": {"login": "ktksan", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/d05976eb2ea98ad06742e80e33de6c4c30acae19", "committedDate": "2020-07-23T21:14:48Z", "message": "Add BeforeAfterEvent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTE3ODk3", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#pullrequestreview-454517897", "createdAt": "2020-07-23T21:46:30Z", "commit": {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjYxMTg0", "url": "https://github.com/MovingBlocks/Terasology/pull/4095#pullrequestreview-455661184", "createdAt": "2020-07-27T10:27:32Z", "commit": {"oid": "d05976eb2ea98ad06742e80e33de6c4c30acae19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1390, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}