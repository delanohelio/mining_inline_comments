{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjIyODc4", "number": 4255, "title": "feat(subsystems): extract TypeHandlerLibrary.", "bodyText": "Contains\nNext part of splitting engine.\nIt is really not subsystem, but it used everywhere in engine and subsystems (e.g. NetworkSubsystem, ConfigurationSubsystem)\nThis PR prevent circular dependencies for next extractions.\nChanges:\nCreated gradle project\nMove classes\nSplit TypeHandlerLibrary on implementation and interface\n[Bonus!] I did add Readme.md for TypeHandlerLibrary.\n[Bonus!] Moved tests and new tests.\ncompability for modules:\nTerasology/Dialogs#22\n\nHow to test\n\nlaunch game (check TypeHandlerLibrary with Gson)\nstart game (check TypeHandlerLibrary with Gson)\nexit to main menu. (check TypeHandlerLibrary with Gson)\ncreate server (check TypeHandlerLibrary with Gson)\njoin to server (check TypeHandlerLibrary with Protobuf)\n\nOutstanding before merging\n\n Javadocs", "createdAt": "2020-11-18T14:25:31Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4255", "merged": true, "mergeCommit": {"oid": "fabfe79b34f9207a9ccde20e05079a40e30da471"}, "closed": true, "closedAt": "2020-12-08T08:38:27Z", "author": {"login": "DarkWeird"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddu5gWgH2gAyNTIzMjIyODc4OjMzMDkwNzFmYTc2Y2RjZDNlNzc5NWNjM2QzYjA3MzgwMzEzNmNhMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkF9mVgFqTU0Njg1ODQzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3309071fa76cdcd3e7795cc3d3b073803136ca16", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/3309071fa76cdcd3e7795cc3d3b073803136ca16", "committedDate": "2020-11-18T14:19:29Z", "message": "feat(extract-TypeHandlerLibrary): extract TypeHandlerLibrary."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da466bb2e2b3414c339d6ea379499ec42a1f96de", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/da466bb2e2b3414c339d6ea379499ec42a1f96de", "committedDate": "2020-11-18T14:28:46Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3778faf3d612d96d72d64ab3e30d8a42cd986b9", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/c3778faf3d612d96d72d64ab3e30d8a42cd986b9", "committedDate": "2020-11-18T14:39:26Z", "message": "fix(subsystem): fix manifest's classpath gatherning in buildscript time. (locked cache)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186bd9e1190d48ea11ef3123eb15b055b45f6e6b", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/186bd9e1190d48ea11ef3123eb15b055b45f6e6b", "committedDate": "2020-11-19T06:29:37Z", "message": "chore(subsystem): replace copyrigh with 2 line copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2afecd30a0094fe7d7763d729ad05f1aa5b58af7", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/2afecd30a0094fe7d7763d729ad05f1aa5b58af7", "committedDate": "2020-11-19T09:43:04Z", "message": "feat(TypeHandlerLibrary): add PersistentDataArray implementations of `in-memory`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee1e9825d9e6f44b65ffe505e08c1c90698ac29", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/9ee1e9825d9e6f44b65ffe505e08c1c90698ac29", "committedDate": "2020-11-19T11:29:12Z", "message": "feat(TypeHandlerLibrary): add PersistentDataArray implementations of `in-memory`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa0c2122dbacd7d39049a1051d326fc0e6ce659d", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/aa0c2122dbacd7d39049a1051d326fc0e6ce659d", "committedDate": "2020-11-19T12:20:23Z", "message": "feat(TypeHandlerLibrary): move tests from engine to TypEHandlerLibrary subsystem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfc4e783fe7161454308fc99bb3531c749f90a0", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/2bfc4e783fe7161454308fc99bb3531c749f90a0", "committedDate": "2020-11-19T14:03:37Z", "message": "feat(TypeHandlerLibrary): add tests for simple type handlers and byte/bytes type handlers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/5b8657b94b9e44aa8cfb87371a312415ecf0d92f", "committedDate": "2020-11-19T14:03:45Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f743abf245f481ca84d51b3162130f07d95201", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a0f743abf245f481ca84d51b3162130f07d95201", "committedDate": "2020-11-19T14:48:24Z", "message": "feat(TypeHandlerLibrary): move most part of code from TypeHandlerLibraryIml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba68cee64f82e1eb76153e29048438d36e42881b", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ba68cee64f82e1eb76153e29048438d36e42881b", "committedDate": "2020-11-20T07:52:32Z", "message": "chore(TypeHandlerLibrary): remove public modifiers for tests (sonarlint - junit 5 issue)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead37d4cc2bd6ea338bec9fb20f7f4c48b5e8ba2", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ead37d4cc2bd6ea338bec9fb20f7f4c48b5e8ba2", "committedDate": "2020-11-20T07:53:19Z", "message": "feat(TypeHandlerLibrary): split TypeHandlerLibraryTest and setup default handlers correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d4a4e187704a580fc244dfeaa85bfbd0261533", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/23d4a4e187704a580fc244dfeaa85bfbd0261533", "committedDate": "2020-11-20T08:23:35Z", "message": "chore(TypeHandlerLibrary): make fields private for TypeHandlerLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a96103b02c5a53511d33615fb625914bba99fa6", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/0a96103b02c5a53511d33615fb625914bba99fa6", "committedDate": "2020-11-20T08:23:56Z", "message": "perf(TypeHandlerLibrary): replace mock with implementation in CharacterTypeHandlerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzQ2Nzk1", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#pullrequestreview-535346795", "createdAt": "2020-11-20T11:27:05Z", "commit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMToyNzowNVrOH3L6Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjowNDowOVrOH3NC3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyODg1MQ==", "bodyText": "Why do we need to doFirst here?", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527628851", "createdAt": "2020-11-20T11:27:05Z", "author": {"login": "skaldarnar"}, "path": "engine/build.gradle", "diffHunk": "@@ -179,11 +181,13 @@ jar {\n \n     from(tasks.getByName(\"cacheReflections\").outputs)\n \n-    manifest {\n-        def manifestClasspath = \"$subDirLibs/\" + configurations.\"${sourceSets.main.runtimeClasspathConfigurationName}\".collect {\n-            it.getName()\n-        }.join(\" $subDirLibs/\")\n-        attributes(\"Class-Path\": manifestClasspath, \"Implementation-Title\": \"Terasology-\" + project.name, \"Implementation-Version\": env.BUILD_NUMBER + \", \" + convertGitBranch(env.GIT_BRANCH) + \", \" + env.BUILD_ID + \", \" + displayVersion)\n+    doFirst {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyOTg1OA==", "bodyText": "\ud83d\udc4d \ud83e\udd17", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527629858", "createdAt": "2020-11-20T11:29:13Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/package-info.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+/**\n+ * This package contains the interfaces and abstract classes for use when defining type handlers.\n+ * Type handlers provide the algorithms for serializing and deserializing types - this uses an implementation agnostic set of interfaces\n+ * so TypeHandlers can be used for different serialization techniques (Json, Protobuf, etc).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNTQ2MQ==", "bodyText": "I think it is \"built-in handlers\", thus suggestion to rename this slightly:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static void populateBuildinHandlers(TypeHandlerLibrary typeHandlerLibrary) {\n          \n          \n            \n                static void populateBuiltInHandlers(TypeHandlerLibrary typeHandlerLibrary) {", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527635461", "createdAt": "2020-11-20T11:40:36Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/TypeHandlerLibrary.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling;\n+\n+import org.terasology.persistence.typeHandling.coreTypes.BooleanTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.ByteArrayTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.ByteTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.CharacterTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.DoubleTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.FloatTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.IntTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.LongTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.NumberTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.StringTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.ArrayTypeHandlerFactory;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.EnumTypeHandlerFactory;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.StringMapTypeHandlerFactory;\n+import org.terasology.reflection.TypeInfo;\n+import org.terasology.reflection.metadata.ClassMetadata;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+/**\n+ * A library of type handlers. This is used for the construction of class metadata.\n+ * This library should be initialised by adding a number of base type handlers, describing how to serialize each supported type.\n+ * It will then produce serializers for classes (through their ClassMetadata) on request.\n+ */\n+public interface TypeHandlerLibrary {\n+    static void populateBuildinHandlers(TypeHandlerLibrary typeHandlerLibrary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNzM0OQ==", "bodyText": "Maybe we can add some Javadoc here? I guess this returns the Serializer for the given type, or null if no serializer for that type was registered?", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527637349", "createdAt": "2020-11-20T11:44:26Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/TypeHandlerLibrary.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling;\n+\n+import org.terasology.persistence.typeHandling.coreTypes.BooleanTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.ByteArrayTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.ByteTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.CharacterTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.DoubleTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.FloatTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.IntTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.LongTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.NumberTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.StringTypeHandler;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.ArrayTypeHandlerFactory;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.EnumTypeHandlerFactory;\n+import org.terasology.persistence.typeHandling.coreTypes.factories.StringMapTypeHandlerFactory;\n+import org.terasology.reflection.TypeInfo;\n+import org.terasology.reflection.metadata.ClassMetadata;\n+\n+import java.lang.reflect.Type;\n+import java.util.Optional;\n+\n+/**\n+ * A library of type handlers. This is used for the construction of class metadata.\n+ * This library should be initialised by adding a number of base type handlers, describing how to serialize each supported type.\n+ * It will then produce serializers for classes (through their ClassMetadata) on request.\n+ */\n+public interface TypeHandlerLibrary {\n+    static void populateBuildinHandlers(TypeHandlerLibrary typeHandlerLibrary) {\n+        typeHandlerLibrary.addTypeHandler(Boolean.class, new BooleanTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Boolean.TYPE, new BooleanTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Byte.class, new ByteTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Byte.TYPE, new ByteTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Character.class, new CharacterTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Character.TYPE, new CharacterTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Double.class, new DoubleTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Double.TYPE, new DoubleTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Float.class, new FloatTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Float.TYPE, new FloatTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Integer.class, new IntTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Integer.TYPE, new IntTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Long.class, new LongTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Long.TYPE, new LongTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(String.class, new StringTypeHandler());\n+        typeHandlerLibrary.addTypeHandler(Number.class, new NumberTypeHandler());\n+\n+        typeHandlerLibrary.addTypeHandlerFactory(new ArrayTypeHandlerFactory());\n+        typeHandlerLibrary.addTypeHandler(byte[].class, new ByteArrayTypeHandler());\n+\n+        typeHandlerLibrary.addTypeHandlerFactory(new EnumTypeHandlerFactory());\n+        typeHandlerLibrary.addTypeHandlerFactory(new StringMapTypeHandlerFactory());\n+    }\n+\n+    /**\n+     * Creates a copy of an this serialization library. This copy is initialised with all type handlers that were added to the original, but does not retain any\n+     * serializers or type handlers that were generated. This can be used to override specific types handlers from another type serializer.\n+     */\n+    TypeHandlerLibrary copy();\n+\n+    Serializer getSerializerFor(ClassMetadata<?, ?> type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzODYyMQ==", "bodyText": "Is this change intentional? Is it important that the factory is added to this implementation or would the interface be better in the docstring here?\nI'm actually not sure what the best practice here is ... \ud83e\udd14", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527638621", "createdAt": "2020-11-20T11:46:59Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/persistence/typeHandling/TypeHandlerLibraryImpl.java", "diffHunk": "@@ -283,15 +246,16 @@ public Serializer getSerializerFor(ClassMetadata<?, ?> type) {\n     }\n \n     /**\n-     * Adds a new {@link TypeHandlerFactory} to the {@link TypeHandlerLibrary}. Factories\n+     * Adds a new {@link TypeHandlerFactory} to the {@link TypeHandlerLibraryImpl}. Factories", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzczNw==", "bodyText": "Does it make sense to support this without a rounding mode? when would that be of use?", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527643737", "createdAt": "2020-11-20T11:57:23Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/inMemory/arrays/PersistedDoubleArray.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.inMemory.arrays;\n+\n+import gnu.trove.list.TDoubleList;\n+import gnu.trove.list.TFloatList;\n+import gnu.trove.list.TIntList;\n+import gnu.trove.list.TLongList;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedDouble;\n+\n+import java.util.Iterator;\n+\n+public class PersistedDoubleArray extends PersistedNumberArray {\n+\n+    private final TDoubleList data;\n+\n+    public PersistedDoubleArray(TDoubleList data) {\n+        this.data = data;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return data.size();\n+    }\n+\n+    @Override\n+    public TDoubleList getAsDoubleArray() {\n+        return data;\n+    }\n+\n+    @Override\n+    public TFloatList getAsFloatArray() {\n+        return TroveUtils.doubleToFloat(data);\n+    }\n+\n+    @Override\n+    public TIntList getAsIntegerArray() {\n+        return TroveUtils.doubleToInt(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0NzAwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @DisplayName(\"Chech simple core types serialization\")\n          \n          \n            \n                @DisplayName(\"Check simple core types serialization\")", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527647008", "createdAt": "2020-11-20T12:03:08Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/test/java/org/terasology/persistence/typeHandling/coreTypes/SimpleCoreHandlerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.coreTypes;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.TypeHandler;\n+import org.terasology.persistence.typeHandling.inMemory.InMemoryPersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedBoolean;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedDouble;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedFloat;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedInteger;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedLong;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedString;\n+\n+import java.lang.reflect.Field;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+class SimpleCoreHandlerTest {\n+\n+    private static Stream<Arguments> primitives() {\n+        return Stream.of(\n+                Arguments.of(true, new BooleanTypeHandler(), new PersistedBoolean(true)),\n+\n+                Arguments.of(1.0, new NumberTypeHandler(), new PersistedDouble(1)),\n+                Arguments.of(1, new IntTypeHandler(), new PersistedInteger(1)),\n+                Arguments.of(1L, new LongTypeHandler(), new PersistedLong(1)),\n+                Arguments.of(1.0F, new FloatTypeHandler(), new PersistedFloat(1)),\n+                Arguments.of(1.0, new DoubleTypeHandler(), new PersistedDouble(1)),\n+\n+                Arguments.of(\"foo\", new StringTypeHandler(), new PersistedString(\"foo\")),\n+                Arguments.of('f', new CharacterTypeHandler(), new PersistedString(\"f\")));\n+    }\n+\n+    @ParameterizedTest(name = \"{1}\")\n+    @DisplayName(\"Chech simple core types serialization\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0NzQ1NA==", "bodyText": "Testing some edge cases would be nice, but the setup is quite nice and we can easily add them later.", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#discussion_r527647454", "createdAt": "2020-11-20T12:04:09Z", "author": {"login": "skaldarnar"}, "path": "subsystems/TypeHandlerLibrary/src/test/java/org/terasology/persistence/typeHandling/coreTypes/SimpleCoreHandlerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.persistence.typeHandling.coreTypes;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.terasology.persistence.typeHandling.PersistedData;\n+import org.terasology.persistence.typeHandling.TypeHandler;\n+import org.terasology.persistence.typeHandling.inMemory.InMemoryPersistedDataSerializer;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedBoolean;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedDouble;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedFloat;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedInteger;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedLong;\n+import org.terasology.persistence.typeHandling.inMemory.PersistedString;\n+\n+import java.lang.reflect.Field;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+class SimpleCoreHandlerTest {\n+\n+    private static Stream<Arguments> primitives() {\n+        return Stream.of(\n+                Arguments.of(true, new BooleanTypeHandler(), new PersistedBoolean(true)),\n+\n+                Arguments.of(1.0, new NumberTypeHandler(), new PersistedDouble(1)),\n+                Arguments.of(1, new IntTypeHandler(), new PersistedInteger(1)),\n+                Arguments.of(1L, new LongTypeHandler(), new PersistedLong(1)),\n+                Arguments.of(1.0F, new FloatTypeHandler(), new PersistedFloat(1)),\n+                Arguments.of(1.0, new DoubleTypeHandler(), new PersistedDouble(1)),\n+\n+                Arguments.of(\"foo\", new StringTypeHandler(), new PersistedString(\"foo\")),\n+                Arguments.of('f', new CharacterTypeHandler(), new PersistedString(\"f\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8657b94b9e44aa8cfb87371a312415ecf0d92f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f2717dc4a9e2694803da59f4483838b8040c3f", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/08f2717dc4a9e2694803da59f4483838b8040c3f", "committedDate": "2020-11-20T13:01:04Z", "message": "feat(TypeHandlerLibrary): add Test for In-memory persistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4690a01ce3c00c38e46dba24a88745ff73e13f2", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/a4690a01ce3c00c38e46dba24a88745ff73e13f2", "committedDate": "2020-11-20T13:03:37Z", "message": "Merge remote-tracking branch 'origin/extract-TypeHanderLibrary' into extract-subsystem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af1a93aa5ee069d22076d94e5ba0267c9c68c232", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/af1a93aa5ee069d22076d94e5ba0267c9c68c232", "committedDate": "2020-11-20T13:03:04Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e46bbb85e479ea73f55958bba343f3c4a04439c7", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/e46bbb85e479ea73f55958bba343f3c4a04439c7", "committedDate": "2020-11-20T13:14:18Z", "message": "Update subsystems/TypeHandlerLibrary/src/main/java/org/terasology/persistence/typeHandling/TypeHandlerLibrary.java\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479caaa4cd6aab514b52be0620454694b96c463a", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/479caaa4cd6aab514b52be0620454694b96c463a", "committedDate": "2020-11-20T13:14:31Z", "message": "Update subsystems/TypeHandlerLibrary/src/test/java/org/terasology/persistence/typeHandling/coreTypes/SimpleCoreHandlerTest.java\n\nCo-authored-by: Tobias Nett <skaldarnar@googlemail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3033cd40d64069e1273fa8a55cea0b2f5b4691", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/da3033cd40d64069e1273fa8a55cea0b2f5b4691", "committedDate": "2020-11-20T13:42:18Z", "message": "fix(TypeHandlerLibrary): change method reference for typeHandlerLibrary.populateBuiltInHandlers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708a4d11da82826f5d63c4bc71a0be33f6dd992e", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/708a4d11da82826f5d63c4bc71a0be33f6dd992e", "committedDate": "2020-11-20T13:54:37Z", "message": "feat(TypeHandlerLibrary): move `ConstructorLibrary`, `CollectionTypeHandlerFactory`, `OjbectFiledMapTypeHandlerFactory` and they tests  to `TypeHandlerWidget` subsystem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2122a8ff97eea33e3e3e0bb95afc62866f178e", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/df2122a8ff97eea33e3e3e0bb95afc62866f178e", "committedDate": "2020-11-20T14:11:05Z", "message": "docs(TypeHandlerLibrary): some license headers and docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTY0MjI0", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#pullrequestreview-535964224", "createdAt": "2020-11-21T12:50:53Z", "commit": {"oid": "df2122a8ff97eea33e3e3e0bb95afc62866f178e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abbb5898de47b6bc0baec3be2add479cfe79ddca", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/abbb5898de47b6bc0baec3be2add479cfe79ddca", "committedDate": "2020-11-21T12:52:52Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60b503a82bdce3a2bd0c2684c0a65f9a60532426", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/60b503a82bdce3a2bd0c2684c0a65f9a60532426", "committedDate": "2020-11-24T07:00:32Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bf385498d6716e9d25a9c7c9a060eaca627780", "author": {"user": {"login": "DarkWeird", "name": "Nail Khanipov"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/89bf385498d6716e9d25a9c7c9a060eaca627780", "committedDate": "2020-11-24T10:54:10Z", "message": "fix(TypeHandlerLibrary): move `AbstractSerializer` to TWL subsystem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb36bc2a492d959b4859991e93b01aaaa13c7ef7", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fb36bc2a492d959b4859991e93b01aaaa13c7ef7", "committedDate": "2020-11-30T21:41:11Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cead38f378afca42148b3b1502f3e0d433df6035", "author": {"user": {"login": "jdrueckert", "name": null}}, "url": "https://github.com/MovingBlocks/Terasology/commit/cead38f378afca42148b3b1502f3e0d433df6035", "committedDate": "2020-12-07T09:47:51Z", "message": "Merge branch 'develop' into extract-TypeHanderLibrary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2ODU4NDMy", "url": "https://github.com/MovingBlocks/Terasology/pull/4255#pullrequestreview-546858432", "createdAt": "2020-12-08T08:35:19Z", "commit": {"oid": "cead38f378afca42148b3b1502f3e0d433df6035"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1308, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}