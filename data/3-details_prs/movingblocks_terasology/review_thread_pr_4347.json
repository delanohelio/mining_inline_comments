{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjgzNjU3", "number": 4347, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyODowMVrOFJq3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTowNTo0NFrOFWVUaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjgzNzIzOnYy", "diffSide": "LEFT", "path": "engine/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzoyODowMVrOIMGKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzo0NTowNFrOIMGUdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDg5NA==", "bodyText": "@Cervator This task had an \"only if $BUILD_URL is set\" condition on it. Is that important to keep? i.e. is a properties file with a bunch of missing entries worse than no properties file at all?", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r549554894", "createdAt": "2020-12-29T03:28:01Z", "author": {"login": "keturn"}, "path": "engine/build.gradle", "diffHunk": "@@ -216,26 +214,31 @@ group = 'org.terasology.engine'\n println \"Version for $project.name loaded as $version for group $group\"\n \n // This version info file actually goes inside the built jar and can be used at runtime\n-task createVersionInfoFile {\n-    inputs.property('dateTime', startDateTimeString)\n-    onlyIf { env.BUILD_URL != null }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ff0bbfdfdee1beabf1c85a292c5635655682a6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NzM2NQ==", "bodyText": "So that's the guard that means it normally only runs in Jenkins, which sets the env vars that get read. As for whether an incomplete file is worse than empty - unsure. It might list gibberish in the main menu? The file also gets attached in the open in Jenkins so the launcher can read it, but I'm not sure about the details there", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r549557365", "createdAt": "2020-12-29T03:45:04Z", "author": {"login": "Cervator"}, "path": "engine/build.gradle", "diffHunk": "@@ -216,26 +214,31 @@ group = 'org.terasology.engine'\n println \"Version for $project.name loaded as $version for group $group\"\n \n // This version info file actually goes inside the built jar and can be used at runtime\n-task createVersionInfoFile {\n-    inputs.property('dateTime', startDateTimeString)\n-    onlyIf { env.BUILD_URL != null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NDg5NA=="}, "originalCommit": {"oid": "b1ff0bbfdfdee1beabf1c85a292c5635655682a6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTM5MjY2OnYy", "diffSide": "RIGHT", "path": "facades/PC/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMjowNDoxN1rOIVXwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMjo1NToxMFrOIVYbWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4MDIxOA==", "bodyText": "This looks pretty fancy. I trust the comment but have no idea how the magic works.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r559280218", "createdAt": "2021-01-18T02:04:17Z", "author": {"login": "Cervator"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -217,103 +239,78 @@ tasks.register<Copy>(\"createVersionFile\") {\n     filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n }\n \n-// TODO: This could probably be done more Gradley (engine project resource dir instead of direct path?) and with some variables\n-tasks.register<Copy>(\"copyCreditsFile\") {\n-    description = \"Copies the credits file into the engine's resource dir where it'll be read at runtime\"\n-    from(\"$rootDir/docs\")\n-    into(\"$rootDir/engine/src/main/resources\")\n-    include(\"Credits.md\")\n-}\n-\n-// Main application dist target. Does NOT include any modules.\n-tasks.register<Sync>(\"distApp\") {\n-    description = \"Creates an application package for distribution\"\n+tasks.register<Zip>(\"distForLauncher\") {\n     group = \"terasology dist\"\n+    description = \"Bundles the project to a Launcher-compatible layout.\"\n \n-    dependsOn(\"createVersionFile\")\n-    dependsOn(\"copyCreditsFile\")\n-    dependsOn(\":extractNatives\")\n-    dependsOn(\"jar\")\n-\n-    into(\"${distsDirectory.get().asFile}/app\")\n-    from (\"$rootDir/README.markdown\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-        rename(\"README.markdown\", \"README\")\n-    }\n-    from (\"$rootDir/LICENSE\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-    }\n-    from (\"$rootDir/NOTICE\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-    }\n-    from(\"launchScripts\") {\n-        exclude(\"TeraEd.exe\")\n-    }\n-\n-    from(\"$buildDir/$versionFileName\") {}\n+    archiveFileName.set(\"Terasology.zip\")\n \n-    into(subDirLibs) {\n-        from(configurations.runtimeClasspath)\n-        from(tasks.getByPath(\":engine:jar\"))\n-        from(\"$buildDir/libs\") {\n-            include(\"*.jar\")\n-            rename {\n-                \"Terasology.jar\"\n+    // Launcher expects `libs/Terasology.jar`, no containing folder\n+    // TODO: fix launcher so it can take either structure. It should be able to do without ambiguity.\n+    val defaultLibraryDirectory = \"lib\"\n+    val launcherLibraryDirectory = \"libs\"\n+\n+    this.with(distributions.getByName(\"main\").contents {\n+        eachFile {\n+            val pathSegments = relativePath.segments\n+\n+            when (pathSegments[0]) {\n+                defaultLibraryDirectory -> {\n+                    // Redirect things from lib/ to libs/\n+                    val tail = pathSegments.sliceArray(1 until pathSegments.size)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d84f8ee66ba268d0a49ce48dc8f4287027cf3d8"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI5MTIyNg==", "bodyText": "I was disappointed with how verbose my Kotlin solution for this was. This\n\n  \n    \n      Terasology/facades/PC/build.gradle.kts\n    \n    \n        Lines 259 to 261\n      in\n      9d84f8e\n    \n    \n    \n    \n\n        \n          \n           // Redirect things from lib/ to libs/ \n        \n\n        \n          \n           val tail = pathSegments.sliceArray(1 until pathSegments.size) \n        \n\n        \n          \n           relativePath = RelativePath(true, launcherLibraryDirectory, *tail) \n        \n    \n  \n\n\nwould be something like this in Python:\nrelativePath = RelativePath(true, launcherLibraryDirectory, *pathSegments[1:])\nbut I didn't figure out a way to do that kind of open-ended slice in Kotlin. I tried just .drop()ing the first segment, but that left me with a List instead of an Array and I seem to need Array to use the spread operator with the varargs argument.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r559291226", "createdAt": "2021-01-18T02:55:10Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -217,103 +239,78 @@ tasks.register<Copy>(\"createVersionFile\") {\n     filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n }\n \n-// TODO: This could probably be done more Gradley (engine project resource dir instead of direct path?) and with some variables\n-tasks.register<Copy>(\"copyCreditsFile\") {\n-    description = \"Copies the credits file into the engine's resource dir where it'll be read at runtime\"\n-    from(\"$rootDir/docs\")\n-    into(\"$rootDir/engine/src/main/resources\")\n-    include(\"Credits.md\")\n-}\n-\n-// Main application dist target. Does NOT include any modules.\n-tasks.register<Sync>(\"distApp\") {\n-    description = \"Creates an application package for distribution\"\n+tasks.register<Zip>(\"distForLauncher\") {\n     group = \"terasology dist\"\n+    description = \"Bundles the project to a Launcher-compatible layout.\"\n \n-    dependsOn(\"createVersionFile\")\n-    dependsOn(\"copyCreditsFile\")\n-    dependsOn(\":extractNatives\")\n-    dependsOn(\"jar\")\n-\n-    into(\"${distsDirectory.get().asFile}/app\")\n-    from (\"$rootDir/README.markdown\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-        rename(\"README.markdown\", \"README\")\n-    }\n-    from (\"$rootDir/LICENSE\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-    }\n-    from (\"$rootDir/NOTICE\") {\n-        filter(FixCrLfFilter::class, \"eol\" to FixCrLfFilter.CrLf.newInstance(\"crlf\"))\n-    }\n-    from(\"launchScripts\") {\n-        exclude(\"TeraEd.exe\")\n-    }\n-\n-    from(\"$buildDir/$versionFileName\") {}\n+    archiveFileName.set(\"Terasology.zip\")\n \n-    into(subDirLibs) {\n-        from(configurations.runtimeClasspath)\n-        from(tasks.getByPath(\":engine:jar\"))\n-        from(\"$buildDir/libs\") {\n-            include(\"*.jar\")\n-            rename {\n-                \"Terasology.jar\"\n+    // Launcher expects `libs/Terasology.jar`, no containing folder\n+    // TODO: fix launcher so it can take either structure. It should be able to do without ambiguity.\n+    val defaultLibraryDirectory = \"lib\"\n+    val launcherLibraryDirectory = \"libs\"\n+\n+    this.with(distributions.getByName(\"main\").contents {\n+        eachFile {\n+            val pathSegments = relativePath.segments\n+\n+            when (pathSegments[0]) {\n+                defaultLibraryDirectory -> {\n+                    // Redirect things from lib/ to libs/\n+                    val tail = pathSegments.sliceArray(1 until pathSegments.size)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4MDIxOA=="}, "originalCommit": {"oid": "9d84f8ee66ba268d0a49ce48dc8f4287027cf3d8"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyMTM5Mjg3OnYy", "diffSide": "LEFT", "path": "facades/PC/build.gradle.kts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMjowNDoyN1rOIVXwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQwMjo0NDozNFrOIVYSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4MDI0NA==", "bodyText": "I guess this doesn't get in the way of anything? Like runtime hot reloading or stuff like that. Not really sure what this would affect. Assets changing at runtime is one thing but unsure if that'd be affected.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r559280244", "createdAt": "2021-01-18T02:04:27Z", "author": {"login": "Cervator"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -69,22 +67,27 @@ val displayVersion = versionBase\n \n \n application {\n+    applicationName = \"Terasology\"\n     mainClass.set(extra.get(\"mainClassName\") as String)\n }\n \n-// Adjust as the Gradle 6 upgrade changed this path a bit\n-sourceSets {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d84f8ee66ba268d0a49ce48dc8f4287027cf3d8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4ODg1MA==", "bodyText": "facade's sources don't contain any gestalt modules, so we don't have to be as controlling when we build this as we do when we build modules.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r559288850", "createdAt": "2021-01-18T02:44:34Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -69,22 +67,27 @@ val displayVersion = versionBase\n \n \n application {\n+    applicationName = \"Terasology\"\n     mainClass.set(extra.get(\"mainClassName\") as String)\n }\n \n-// Adjust as the Gradle 6 upgrade changed this path a bit\n-sourceSets {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4MDI0NA=="}, "originalCommit": {"oid": "9d84f8ee66ba268d0a49ce48dc8f4287027cf3d8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Mjk3MDQxOnYy", "diffSide": "RIGHT", "path": "facades/PC/build.gradle.kts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQwNDo0ODo1MVrOIc6-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMDo1NTo1MlrOIekXhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzE5NzQxMA==", "bodyText": "That's not pretty.\nWe're using precompiled script plugins to cut down on the amount of config we have to use. It sets the gradle plugin name nicely, but this import path is gross. I wonder if that's something we can change without giving up its convenience.\nOr is there a way we can have our Task class auto-imported like the core gradle Tasks seem to be?", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r567197410", "createdAt": "2021-01-30T04:48:51Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -3,14 +3,15 @@\n \n // The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs\n \n+import Terasology_dist_gradle.ValidateZipDistribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9d8aacf5777e87512cf2df55d810829bc2ea22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIwMTU3Nw==", "bodyText": "hmm. not seeing much to do about this. I can put a namespace in front of it like org.terasology.foo. but it still involves that _gradle part.\nI'm inclined to leave it be until we get to the point where we're packaging our gradle plugins for distribution for use outside this multiproject.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r567201577", "createdAt": "2021-01-30T05:35:50Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -3,14 +3,15 @@\n \n // The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs\n \n+import Terasology_dist_gradle.ValidateZipDistribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzE5NzQxMA=="}, "originalCommit": {"oid": "1d9d8aacf5777e87512cf2df55d810829bc2ea22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM4NjE1NQ==", "bodyText": "try @JvmName", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r568386155", "createdAt": "2021-02-02T07:50:06Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -3,14 +3,15 @@\n \n // The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs\n \n+import Terasology_dist_gradle.ValidateZipDistribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzE5NzQxMA=="}, "originalCommit": {"oid": "1d9d8aacf5777e87512cf2df55d810829bc2ea22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODkyNDAzOA==", "bodyText": "hmm, will try later, not worth changing generated filenames at this point in the PR, as we already have another PR waiting on this one.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r568924038", "createdAt": "2021-02-02T20:55:52Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -3,14 +3,15 @@\n \n // The PC facade is responsible for the primary distribution - a plain Java application runnable on PCs\n \n+import Terasology_dist_gradle.ValidateZipDistribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzE5NzQxMA=="}, "originalCommit": {"oid": "1d9d8aacf5777e87512cf2df55d810829bc2ea22"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Mzg1MDgxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/terasology-dist.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxOToyNDozOFrOIdBWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxOToyNDozOFrOIdBWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMwMTY1MA==", "bodyText": "It would be worthwhile to add a bit of documentation for this Task subclass.", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r567301650", "createdAt": "2021-01-30T19:24:38Z", "author": {"login": "keturn"}, "path": "buildSrc/src/main/kotlin/terasology-dist.gradle.kts", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2021 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+@Suppress(\"UnstableApiUsage\")\n+open class ValidateZipDistribution @Inject constructor(objects: ObjectFactory) : DefaultTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4402383b57ae869e46fd3ff8d028d05eb3087e89"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4OTYyMjgxOnYy", "diffSide": "RIGHT", "path": "facades/PC/build.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTowNTo0NFrOIfSCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTowNTo0NFrOIfSCcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY3MjMwNQ==", "bodyText": "#4454 (comment)\nGIT_BRANCH no longer used for this", "url": "https://github.com/MovingBlocks/Terasology/pull/4347#discussion_r569672305", "createdAt": "2021-02-03T19:05:44Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -200,12 +200,41 @@ tasks.register<JavaExec>(\"server\") {\n     args(\"-headless\", \"-homedir=$localServerDataPath\")\n }\n \n-// Preps a version file to bundle with PC dists. This eventually goes into the root of a zip file\n-tasks.register<Copy>(\"createVersionFile\") {\n+\n+/*********************************\n+ * Distribution\n+ *\n+ * See also publish.gradle, included near the top.\n+ */\n+\n+tasks.named<Jar>(\"jar\") {\n+    // Launcher expects the main class to be in the file with this name.\n+    archiveFileName.set(\"Terasology.jar\")\n+\n+    manifest {\n+        //TODO: Maybe later add the engine's version number into here?\n+        attributes[\"Main-Class\"] = mainClassName\n+        // A classpath in the manifest avoids the problem of having to put a classpath on the command line and\n+        // \"line is too long\" errors: https://github.com/gradle/gradle/issues/1989\n+        attributes[\"Class-Path\"] = configurations[\"runtimeClasspath\"].joinToString(\" \") { it.name }\n+        attributes[\"Implementation-Title\"] = \"Terasology-\" + project.name\n+        attributes[\"Implementation-Version\"] = \"\"\"${env[\"BUILD_NUMBER\"]}, ${env[\"GIT_BRANCH\"]}, ${env[\"BUILD_ID\"]}\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "512e8cfe201c98a494ea965a542024b2ccf307d2"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 217, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}