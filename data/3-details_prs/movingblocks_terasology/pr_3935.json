{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjY0NDk1", "number": 3935, "title": "feat(JOML): migrated Diamond3iIterator ->  Diamond3iIterable", "bodyText": "I moved Diamond3iIterable/SpiralIterable into its own namespace and marked AABB and Diamon3Iterator as deprecated. I'm not sure how to handle Region3i since it's used heavily throughout the code base.  probably a better way to handle the changes proposed in #3934.", "createdAt": "2020-05-05T01:28:59Z", "url": "https://github.com/MovingBlocks/Terasology/pull/3935", "merged": true, "mergeCommit": {"oid": "9dd43a61d49787bd7c22e6327bd2b8b92082fdef"}, "closed": true, "closedAt": "2020-05-16T19:40:49Z", "author": {"login": "pollend"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceJv0NgH2gAyNDEzMjY0NDk1OjNlZjYxNmE2NWEzZWJiZGMxYTJiZWQ3NzYyMjMwNzFhMjUyOGJiYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch7_U0gFqTQxMzEwMzA5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ef616a65a3ebbdc1a2bed776223071a2528bbc4", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/3ef616a65a3ebbdc1a2bed776223071a2528bbc4", "committedDate": "2020-05-05T01:25:11Z", "message": "add iterable namespace for Diamond3iIterable/SpiralIterable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f0856f5214d81ff62c993d22530383d3ee5e43", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/54f0856f5214d81ff62c993d22530383d3ee5e43", "committedDate": "2020-05-05T01:43:41Z", "message": "moved back into math package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20608166fc0ba88ab3d0830f761bcb33d82951bb", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/20608166fc0ba88ab3d0830f761bcb33d82951bb", "committedDate": "2020-05-05T02:20:30Z", "message": "added precondition checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/da38dbc8d397f0015e46882b57723e86d174bbbc", "committedDate": "2020-05-05T02:27:13Z", "message": "updated javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MjcyNjMy", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#pullrequestreview-408272632", "createdAt": "2020-05-08T14:19:31Z", "commit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDoxOTozMVrOGSnO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo1Nzo0MVrOGSqjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MDMzMw==", "bodyText": "Message says > 0, but argument validation checks for >= 0.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422170333", "createdAt": "2020-05-08T14:19:31Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MTcxMw==", "bodyText": "Copy paste error, startDistance vs maxDistance.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422171713", "createdAt": "2020-05-08T14:21:58Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MzU4OA==", "bodyText": "The point of the + 1 is to make sure the endDistance is always at least 1? But it also messes with the distance provided by the client. The client provides a \"radius distance\" of 10 and will end up with a Diamond3Iterable with endDistance 11. Can you explain the point of this?", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422193588", "createdAt": "2020-05-08T14:59:49Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n+                if (offset[2] < 0) {\n+                    offset[2] *= -1;\n+                } else if (offset[1] < 0) {\n+                    offset[1] *= -1;\n+                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                } else {\n+                    offset[1] = -offset[1] + 1;\n+                    if (offset[1] > 0) {\n+                        if (++offset[0] <= level[0]) {\n+                            offset[1] = TeraMath.fastAbs(offset[0]) - level[0];\n+                            offset[2] = 0;\n+                        } else {\n+                            level[0]++;\n+                            offset[0] = -level[0];\n+                            offset[1] = 0;\n+                            offset[2] = 0;\n+                        }\n+                    } else {\n+                        offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                    }\n+                }\n+                return pos;\n+            }\n+        };\n+    }\n+\n+    public static final class Builder {\n+        private final Vector3ic origin;\n+        private final int endDistance;\n+        private int startDistance = 0;\n+\n+        /**\n+         * Default endDistance starts at 1\n+         * @param origin center region for iterator\n+         * @param endDistance maximums radius\n+         */\n+        private Builder(Vector3ic origin, int endDistance){\n+            this.origin = origin;\n+            this.endDistance = endDistance + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5NDMzNg==", "bodyText": "I'd prefer the inner class on top, but I'm not sure if we have style guidelines for that.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422194336", "createdAt": "2020-05-08T15:01:05Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n+                if (offset[2] < 0) {\n+                    offset[2] *= -1;\n+                } else if (offset[1] < 0) {\n+                    offset[1] *= -1;\n+                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                } else {\n+                    offset[1] = -offset[1] + 1;\n+                    if (offset[1] > 0) {\n+                        if (++offset[0] <= level[0]) {\n+                            offset[1] = TeraMath.fastAbs(offset[0]) - level[0];\n+                            offset[2] = 0;\n+                        } else {\n+                            level[0]++;\n+                            offset[0] = -level[0];\n+                            offset[1] = 0;\n+                            offset[2] = 0;\n+                        }\n+                    } else {\n+                        offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                    }\n+                }\n+                return pos;\n+            }\n+        };\n+    }\n+\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwMzQzNQ==", "bodyText": "The value access would be clearer using a Vector3i here.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422203435", "createdAt": "2020-05-08T15:17:34Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIwNTUxMQ==", "bodyText": "If a Vector3i was used no represent the offset, the statement could be simplified to:\norigin.add(offset, pos);", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422205511", "createdAt": "2020-05-08T15:21:33Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMjc3MA==", "bodyText": "The way I see it, the +/- 1 confusion can be removed by changing a few things. The unit tests keep functioning.\nI'll add suggestions at the lines that would need to be adjusted, play around with it. Feel free to dismiss and hide these suggestions, the readability gain is not significant (but it makes things more logical).", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422222770", "createdAt": "2020-05-08T15:54:04Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n+                if (offset[2] < 0) {\n+                    offset[2] *= -1;\n+                } else if (offset[1] < 0) {\n+                    offset[1] *= -1;\n+                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                } else {\n+                    offset[1] = -offset[1] + 1;\n+                    if (offset[1] > 0) {\n+                        if (++offset[0] <= level[0]) {\n+                            offset[1] = TeraMath.fastAbs(offset[0]) - level[0];\n+                            offset[2] = 0;\n+                        } else {\n+                            level[0]++;\n+                            offset[0] = -level[0];\n+                            offset[1] = 0;\n+                            offset[2] = 0;\n+                        }\n+                    } else {\n+                        offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                    }\n+                }\n+                return pos;\n+            }\n+        };\n+    }\n+\n+    public static final class Builder {\n+        private final Vector3ic origin;\n+        private final int endDistance;\n+        private int startDistance = 0;\n+\n+        /**\n+         * Default endDistance starts at 1\n+         * @param origin center region for iterator\n+         * @param endDistance maximums radius\n+         */\n+        private Builder(Vector3ic origin, int endDistance){\n+            this.origin = origin;\n+            this.endDistance = endDistance + 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MzU4OA=="}, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzM3Nw==", "bodyText": "+/- 1 confusion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n          \n          \n            \n                    Preconditions.checkArgument(startDistance <= maxDistance, \"startDistance must be <= maxDistance\");", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422223377", "createdAt": "2020-05-08T15:55:12Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzc3MQ==", "bodyText": "+/- 1 confusion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n          \n          \n            \n                    return new Diamond3iIterable.Builder(origin, radius).start(radius);", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422223771", "createdAt": "2020-05-08T15:55:52Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDEzMw==", "bodyText": "+/- 1 confusion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return level[0] < endDistance;\n          \n          \n            \n                            return level[0] <= endDistance;", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422224133", "createdAt": "2020-05-08T15:56:31Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ1NA==", "bodyText": "+/- 1 confusion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.endDistance = endDistance + 1;\n          \n          \n            \n                        this.endDistance = endDistance;", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422224454", "createdAt": "2020-05-08T15:57:09Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n+                if (offset[2] < 0) {\n+                    offset[2] *= -1;\n+                } else if (offset[1] < 0) {\n+                    offset[1] *= -1;\n+                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                } else {\n+                    offset[1] = -offset[1] + 1;\n+                    if (offset[1] > 0) {\n+                        if (++offset[0] <= level[0]) {\n+                            offset[1] = TeraMath.fastAbs(offset[0]) - level[0];\n+                            offset[2] = 0;\n+                        } else {\n+                            level[0]++;\n+                            offset[0] = -level[0];\n+                            offset[1] = 0;\n+                            offset[2] = 0;\n+                        }\n+                    } else {\n+                        offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                    }\n+                }\n+                return pos;\n+            }\n+        };\n+    }\n+\n+    public static final class Builder {\n+        private final Vector3ic origin;\n+        private final int endDistance;\n+        private int startDistance = 0;\n+\n+        /**\n+         * Default endDistance starts at 1\n+         * @param origin center region for iterator\n+         * @param endDistance maximums radius\n+         */\n+        private Builder(Vector3ic origin, int endDistance){\n+            this.origin = origin;\n+            this.endDistance = endDistance + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDcyNw==", "bodyText": "+/- 1 confusion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.startDistance = start + 1;\n          \n          \n            \n                        this.startDistance = start;\n          \n      \n    \n    \n  \n\nthat was the last one.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422224727", "createdAt": "2020-05-08T15:57:41Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.terasology.math;\n+\n+import com.google.common.base.Preconditions;\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Diamond3Iterable iterates in a diamond shape hull where the manhattan distance is the same for that level.\n+ * for each group of iterations the manhattan distance decreases. inner and outer radiuses can be set where\n+ * the shape can be an hull with distance 1 to a full solid.\n+ */\n+public final class Diamond3iIterable implements Iterable<Vector3ic> {\n+\n+    private final Vector3i origin = new Vector3i();\n+    private final int endDistance;\n+    private int startDistance = 0;\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int maxDistance) {\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be > 0\");\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+    }\n+\n+    /**\n+     *\n+     * @param origin center point of Diamond3iIterator\n+     * @param startDistance inner distance outwards\n+     * @param maxDistance maxDistance away\n+     */\n+    private Diamond3iIterable(Vector3ic origin, int startDistance, int maxDistance) {\n+        Preconditions.checkArgument(startDistance < maxDistance, \"startDistance must be < maxDistance\");\n+        Preconditions.checkArgument(maxDistance >= 0, \"maxDistance must be >= 0\");\n+        Preconditions.checkArgument(startDistance >= 0, \"maxDistance must be >= 0\");\n+\n+        this.origin.set(origin);\n+        this.endDistance = maxDistance;\n+        this.startDistance = startDistance;\n+    }\n+\n+    /**\n+     * solid diamond shape from the center to a radius\n+     * @param origin center of diamond iterator\n+     * @param radius distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder region(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius);\n+    }\n+\n+    /**\n+     * hollow shape with an inner and outer distance to iterate over\n+     * @param origin  center of diamond iterator\n+     * @param start distance to start iterating from\n+     * @param end distance to iterate out to\n+     */\n+    public static Diamond3iIterable.Builder hollow(Vector3ic origin, int start, int end) {\n+        return new Diamond3iIterable.Builder(origin, end).start(start);\n+    }\n+\n+    /**\n+     * iterates in a shell that is 1 block wide\n+     * @param origin center of shell\n+     * @param radius distance for 1 block wide shell\n+     */\n+    public static Diamond3iIterable.Builder shell(Vector3ic origin, int radius) {\n+        return new Diamond3iIterable.Builder(origin, radius).start(radius - 1);\n+    }\n+\n+    @Override\n+    public Iterator<Vector3ic> iterator() {\n+        Vector3i pos = new Vector3i();\n+        final int[] level = {this.startDistance};\n+        final int[] offset = {-this.startDistance,0,0};\n+\n+        return new Iterator<Vector3ic>() {\n+            @Override\n+            public boolean hasNext() {\n+                return level[0] < endDistance;\n+            }\n+\n+            @Override\n+            public Vector3ic next() {\n+                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n+                if (offset[2] < 0) {\n+                    offset[2] *= -1;\n+                } else if (offset[1] < 0) {\n+                    offset[1] *= -1;\n+                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                } else {\n+                    offset[1] = -offset[1] + 1;\n+                    if (offset[1] > 0) {\n+                        if (++offset[0] <= level[0]) {\n+                            offset[1] = TeraMath.fastAbs(offset[0]) - level[0];\n+                            offset[2] = 0;\n+                        } else {\n+                            level[0]++;\n+                            offset[0] = -level[0];\n+                            offset[1] = 0;\n+                            offset[2] = 0;\n+                        }\n+                    } else {\n+                        offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                    }\n+                }\n+                return pos;\n+            }\n+        };\n+    }\n+\n+    public static final class Builder {\n+        private final Vector3ic origin;\n+        private final int endDistance;\n+        private int startDistance = 0;\n+\n+        /**\n+         * Default endDistance starts at 1\n+         * @param origin center region for iterator\n+         * @param endDistance maximums radius\n+         */\n+        private Builder(Vector3ic origin, int endDistance){\n+            this.origin = origin;\n+            this.endDistance = endDistance + 1;\n+        }\n+\n+        /**\n+         * Default start distance is 0\n+         * @param start  the minimum radius\n+         */\n+        public Diamond3iIterable.Builder start(int start) {\n+            this.startDistance = start + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da38dbc8d397f0015e46882b57723e86d174bbbc"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef08b782789b8acaec1abc7696aabb77bb072235", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/ef08b782789b8acaec1abc7696aabb77bb072235", "committedDate": "2020-05-09T04:06:28Z", "message": "corrected start distance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0942f2b6297c68d455ed2231cb3f20ace61349", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fe0942f2b6297c68d455ed2231cb3f20ace61349", "committedDate": "2020-05-09T04:23:16Z", "message": "tweaked offset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjQzMjY3", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#pullrequestreview-408643267", "createdAt": "2020-05-09T11:45:07Z", "commit": {"oid": "fe0942f2b6297c68d455ed2231cb3f20ace61349"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMTo0NTowN1rOGS6hVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMTo1MjoyOVrOGS6jcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NjM1OA==", "bodyText": "No! that's not a good idea.\nThe changes I suggested kept the unit tests unchanged and intact. You changed the API and now every usage of that method would need to be adjusted.\nBesides, the API was fine - If I create a diamond with radius 1, I expect the coordinates to be (-1, 0, 0), (1, 0, 0), ...\nThis behavior needs to be kept, my changes only optimized the internals.", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422486358", "createdAt": "2020-05-09T11:45:07Z", "author": {"login": "kBlaszczyk"}, "path": "engine-tests/src/test/java/org/terasology/math/Diamond3iIteratorTest.java", "diffHunk": "@@ -35,13 +35,13 @@\n \n     @Test\n     public void testZeroDistanceIteration() {\n-        Iterator<Vector3ic> iter = Diamond3iIterable.region(new org.joml.Vector3i(),0).build().iterator();\n+        Iterator<Vector3ic> iter = Diamond3iIterable.region(new org.joml.Vector3i(),1).build().iterator();\n         assertEquals(Lists.newArrayList(new Vector3i()), Lists.newArrayList(iter));\n     }\n \n     @Test\n     public void testOneDistanceIteration() {\n-        Iterator<Vector3ic> iter = Diamond3iIterable.region(new Vector3i(),1).build().iterator();\n+        Iterator<Vector3ic> iter = Diamond3iIterable.region(new Vector3i(),2).build().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0942f2b6297c68d455ed2231cb3f20ace61349"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4Njg5Ng==", "bodyText": "As suggested before, why not use vector math?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            pos.set(origin.x + offset.x, origin.y + offset.y, origin.z + offset.z);\n          \n          \n            \n                            origin.add(offset, pos);\n          \n      \n    \n    \n  \n\nalternatively: pos.set(origin).add(offset)", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#discussion_r422486896", "createdAt": "2020-05-09T11:52:29Z", "author": {"login": "kBlaszczyk"}, "path": "engine/src/main/java/org/terasology/math/Diamond3iIterable.java", "diffHunk": "@@ -102,26 +102,26 @@ public boolean hasNext() {\n \n             @Override\n             public Vector3ic next() {\n-                pos.set(origin.x + offset[0], origin.y + offset[1], origin.z + offset[2]);\n-                if (offset[2] < 0) {\n-                    offset[2] *= -1;\n-                } else if (offset[1] < 0) {\n-                    offset[1] *= -1;\n-                    offset[2] = -(level[0] - TeraMath.fastAbs(offset[0]) - TeraMath.fastAbs(offset[1]));\n+                pos.set(origin.x + offset.x, origin.y + offset.y, origin.z + offset.z);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0942f2b6297c68d455ed2231cb3f20ace61349"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198d5e00c8ff6f6a71fd3f4bac6e0d2028a5e98f", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/198d5e00c8ff6f6a71fd3f4bac6e0d2028a5e98f", "committedDate": "2020-05-09T15:45:50Z", "message": "Update engine/src/main/java/org/terasology/math/Diamond3iIterable.java\n\nCo-authored-by: Kevin Blaszczyk <kevin.blaszczyk@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjY1MDQ2", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#pullrequestreview-408665046", "createdAt": "2020-05-09T16:33:04Z", "commit": {"oid": "198d5e00c8ff6f6a71fd3f4bac6e0d2028a5e98f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fecb8d11b6784393b8ce2cbfdc7daa15f9ca316f", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/fecb8d11b6784393b8ce2cbfdc7daa15f9ca316f", "committedDate": "2020-05-09T16:48:20Z", "message": "correct distance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c7a563397508588fa58b2292b73dfb205007ce", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/b4c7a563397508588fa58b2292b73dfb205007ce", "committedDate": "2020-05-09T16:48:46Z", "message": "Merge branch 'feature/iterable' of github.com:pollend/Terasology into feature/iterable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTAzMDk3", "url": "https://github.com/MovingBlocks/Terasology/pull/3935#pullrequestreview-413103097", "createdAt": "2020-05-16T19:39:10Z", "commit": {"oid": "b4c7a563397508588fa58b2292b73dfb205007ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}