{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NjA4Nzg3", "number": 4039, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MDoxNVrOEDVayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNDoyOVrOEG6kFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTMyMTA0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MDoxNVrOGgSqbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoyMTozMVrOHE7wLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzM5MA==", "bodyText": "isChanging = true - hack for maven's SNAPSHOTs. (download newest SNAPSHOT from repo)\nFor releases it is not needed.", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r436513390", "createdAt": "2020-06-08T07:50:15Z", "author": {"login": "DarkWeird"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzNTM0Mw==", "bodyText": "Okay, I have removed the isChanging = true statements.\nI believe if the modules follow the -SNAPSHOT version convention and they are stored in a Maven repository, gradle considers them Changing as is Maven policy.\nand yeah, we don't need it for released versions.", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r474935343", "createdAt": "2020-08-21T20:21:31Z", "author": {"login": "keturn"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzM5MA=="}, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTMyNjQwOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MTo1M1rOGgStnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MTo1M1rOGgStnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNDIwNw==", "bodyText": "I think about remove snaphots anywhere :D.\nIt is maven way for multimodule project(I think).", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r436514207", "createdAt": "2020-06-08T07:51:53Z", "author": {"login": "DarkWeird"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = engineVersion) { isChanging = true }\n+\n+    for (gestaltDep in moduleDepends) {\n+        if (!gestaltDep.minVersion.isSnapshot) {\n+            // gestalt considers snapshots to satisfy a minimum requirement:\n+            // https://github.com/MovingBlocks/gestalt/blob/fe1893821127/gestalt-module/src/main/java/org/terasology/naming/VersionRange.java#L58-L59\n+            gestaltDep.minVersion = gestaltDep.minVersion.snapshot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM0NDAzOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1NzoxNVrOGgS4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDoxOToxNFrOHE7o6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNjk4OQ==", "bodyText": "Maybe use platform?", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r436516989", "createdAt": "2020-06-08T07:57:15Z", "author": {"login": "DarkWeird"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = engineVersion) { isChanging = true }\n+\n+    for (gestaltDep in moduleDepends) {\n+        if (!gestaltDep.minVersion.isSnapshot) {\n+            // gestalt considers snapshots to satisfy a minimum requirement:\n+            // https://github.com/MovingBlocks/gestalt/blob/fe1893821127/gestalt-module/src/main/java/org/terasology/naming/VersionRange.java#L58-L59\n+            gestaltDep.minVersion = gestaltDep.minVersion.snapshot\n+            // (maybe there's some way to do that with a custom gradle resolver?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMTgxOQ==", "bodyText": "I think gradle platform is for something else. For example, we could publish a platform specifying all the module versions that go with a particular Terasology release.\nWell, maybe it would be possible to attach a different resolution strategy to things in a platform, because gradle is flexible and does many things? but I am not sure it would be an improvement over this.", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r474931819", "createdAt": "2020-08-21T20:17:09Z", "author": {"login": "keturn"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = engineVersion) { isChanging = true }\n+\n+    for (gestaltDep in moduleDepends) {\n+        if (!gestaltDep.minVersion.isSnapshot) {\n+            // gestalt considers snapshots to satisfy a minimum requirement:\n+            // https://github.com/MovingBlocks/gestalt/blob/fe1893821127/gestalt-module/src/main/java/org/terasology/naming/VersionRange.java#L58-L59\n+            gestaltDep.minVersion = gestaltDep.minVersion.snapshot\n+            // (maybe there's some way to do that with a custom gradle resolver?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNjk4OQ=="}, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkzMzQ4Mw==", "bodyText": "\u2026if this stuff is still necessary in the first place? I half-remember some conversation @skaldarnar and @immortius had about making gestalt version comparisons more semver-like, but I'm not sure whether that was implemented and if so, if it applied to the thing we're working around here.", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r474933483", "createdAt": "2020-08-21T20:19:14Z", "author": {"login": "keturn"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = engineVersion) { isChanging = true }\n+\n+    for (gestaltDep in moduleDepends) {\n+        if (!gestaltDep.minVersion.isSnapshot) {\n+            // gestalt considers snapshots to satisfy a minimum requirement:\n+            // https://github.com/MovingBlocks/gestalt/blob/fe1893821127/gestalt-module/src/main/java/org/terasology/naming/VersionRange.java#L58-L59\n+            gestaltDep.minVersion = gestaltDep.minVersion.snapshot\n+            // (maybe there's some way to do that with a custom gradle resolver?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxNjk4OQ=="}, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njg2MTA1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxMzoxN1rOGmAaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxMzoxN1rOGmAaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNTgwOA==", "bodyText": "We should probably introduce pure test dependencies in module land... a task for another day ^^", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r442505808", "createdAt": "2020-06-18T21:13:17Z", "author": {"login": "skaldarnar"}, "path": "buildSrc/src/main/kotlin/terasology-module.gradle.kts", "diffHunk": "@@ -100,21 +83,49 @@ configure<SourceSetContainer> {\n     }\n }\n val convention = project.getConvention().getPlugin(JavaPluginConvention::class)\n-val mainSourceSet = convention.getSourceSets().getByName(\"main\");\n+val mainSourceSet = convention.getSourceSets().getByName(\"main\")\n \n // TODO: Remove when we don't need to rely on snapshots. Needed here for solo builds in Jenkins\n configurations.all {\n     resolutionStrategy.cacheChangingModulesFor(0, \"seconds\")\n }\n \n+\n+val deps = moduleConfig.dependencies.filterNotNull()\n+val moduleDepends = deps.filterNot { it.id.toString() == \"engine\" }\n+val engineVersion = deps.find { it.id.toString() == \"engine\" }?.versionRange()?.toString() ?: \"+\"\n+\n // Set dependencies. Note that the dependency information from module.txt is used for other Terasology modules\n dependencies {\n-    // Check to see if this module is not the root Gradle project - if so we are in a multi-project workspace\n-    implementation(group = \"org.terasology.engine\", name = \"engine\", version = \"+\") { isChanging = true }\n-    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = \"+\") { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine\", version = engineVersion) { isChanging = true }\n+    implementation(group = \"org.terasology.engine\", name = \"engine-tests\", version = engineVersion) { isChanging = true }\n+\n+    for (gestaltDep in moduleDepends) {\n+        if (!gestaltDep.minVersion.isSnapshot) {\n+            // gestalt considers snapshots to satisfy a minimum requirement:\n+            // https://github.com/MovingBlocks/gestalt/blob/fe1893821127/gestalt-module/src/main/java/org/terasology/naming/VersionRange.java#L58-L59\n+            gestaltDep.minVersion = gestaltDep.minVersion.snapshot\n+            // (maybe there's some way to do that with a custom gradle resolver?\n+            // but making a resolver that only works that way on gestalt modules specifically\n+            // sounds complicated.)\n+        }\n \n-    for (dependency in moduleDepends) {\n-        implementation(group = \"org.terasology.modules\", name = dependency, version = \"+\") { isChanging = true }\n+        val gradleDep = create(\n+            group = \"org.terasology.modules\",\n+            name = gestaltDep.id.toString(),\n+            version = gestaltDep.versionRange().toString()\n+        )\n+\n+        if (gestaltDep.isOptional) {\n+            // `optional` module dependencies are ones it does not require for runtime\n+            // (but will use opportunistically if available)\n+            compileOnly(gradleDep) { isChanging = true }\n+            // though modules also sometimes use \"optional\" to describe their test dependencies;\n+            // they're not required for runtime, but they *are* required for tests.\n+            testImplementation(gradleDep) { isChanging = true }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njg2NDIyOnYy", "diffSide": "RIGHT", "path": "config/gradle/publish.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNDoyOVrOGmAcaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNDoyOVrOGmAcaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNjM0Nw==", "bodyText": "I somehow like that this code is gone now \ud83d\ude43 still being a bit afraid of what happens to module build chaos \ud83d\ude48", "url": "https://github.com/MovingBlocks/Terasology/pull/4039#discussion_r442506347", "createdAt": "2020-06-18T21:14:29Z", "author": {"login": "skaldarnar"}, "path": "config/gradle/publish.gradle", "diffHunk": "@@ -46,12 +33,10 @@ publishing {\n                             deducedPublishRepo = \"terasology\"\n                         }\n \n-                        // Check the active Git branch and some module logic to see whether we're doing a release or snapshot\n-                        String gitBranch = System.getenv()[\"BRANCH_NAME\"]\n-                        if (isMaster(gitBranch) && !shouldBypassModuleRelease()) {\n-                            deducedPublishRepo += \"-release-local\"\n-                        } else {\n+                        if (project.version.toString().endsWith(\"-SNAPSHOT\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab028b2d5a8557b351e1c9a10ff051640ca8d176"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 384, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}