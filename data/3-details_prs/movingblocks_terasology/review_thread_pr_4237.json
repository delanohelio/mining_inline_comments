{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MTQ3ODU0", "number": 4237, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozNzo0N1rOE3Vj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1ODo1NFrOE3XoHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDYwMzc5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/generation/facets/ElevationFacet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozNzo0N1rOHwn49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMTo1OFrOHwpNyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0NzI1Mw==", "bodyText": "Why the old header in a new file?", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520747253", "createdAt": "2020-11-10T17:37:47Z", "author": {"login": "jdrueckert"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/ElevationFacet.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2ODk3MA==", "bodyText": "Oh, I just copied another file to use as the basis for these. I'll fix that.", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520768970", "createdAt": "2020-11-10T18:11:58Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/ElevationFacet.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0NzI1Mw=="}, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDYxMTQ3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozOTo0MFrOHwn9zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozOTo0MFrOHwn9zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0ODQ5Mw==", "bodyText": "see above", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520748493", "createdAt": "2020-11-10T17:39:40Z", "author": {"login": "jdrueckert"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDY1NzUyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/generation/facets/base/VerticallySparseBooleanFacet3D.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MDozN1rOHwoZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1MDozN1rOHwoZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc1NTY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520755671", "createdAt": "2020-11-10T17:50:37Z", "author": {"login": "jdrueckert"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/base/VerticallySparseBooleanFacet3D.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+package org.terasology.world.generation.facets.base;\n+\n+import org.joml.Vector3i;\n+import org.joml.Vector3ic;\n+import org.terasology.math.JomlUtil;\n+import org.terasology.math.Region3i;\n+import org.terasology.world.generation.Border3D;\n+import org.terasology.world.generation.WorldFacet3D;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Sparse facet data optimised for looking up what positions are marked within\n+ * a vertical column.\n+ */\n+public class VerticallySparseBooleanFacet3D implements WorldFacet3D {\n+\n+    private Region3i worldRegion;\n+    private Region3i relativeRegion;\n+    private Set<Integer>[] data;\n+\n+    public VerticallySparseBooleanFacet3D(Region3i targetRegion, Border3D border) {\n+        worldRegion = border.expandTo3D(targetRegion);\n+        relativeRegion = border.expandTo3D(targetRegion.size());\n+        data = new Set[worldRegion.sizeX() * worldRegion.sizeZ()];\n+        for (int i = 0; i < data.length; i++) {\n+            data[i] = new HashSet<Integer>();\n+        }\n+    }\n+\n+    @Override\n+    public Region3i getWorldRegion() {\n+        return worldRegion;\n+    }\n+\n+    @Override\n+    public Region3i getRelativeRegion() {\n+        return relativeRegion;\n+    }\n+\n+    public boolean get(int x, int y, int z) {\n+        return get(new Vector3i(x, y, z));\n+    }\n+\n+    public boolean get(Vector3ic pos) {\n+        Set<Integer> column = data[getRelativeIndex(pos)];\n+        return column.contains(pos.y() + worldRegion.minY() - relativeRegion.minY());\n+    }\n+\n+    public void set(int x, int y, int z, boolean value) {\n+        set(new Vector3i(x, y, z), value);\n+    }\n+\n+    public void set(Vector3ic pos, boolean value) {\n+        Set<Integer> column = data[getRelativeIndex(pos)];\n+        int y = pos.y() + worldRegion.minY() - relativeRegion.minY();\n+        if (value) {\n+            column.add(y);\n+        } else {\n+            column.remove(y);\n+        }\n+    }\n+\n+    public boolean getWorld(int x, int y, int z) {\n+        return getWorld(new Vector3i(x, y, z));\n+    }\n+\n+    public boolean getWorld(Vector3ic pos) {\n+        Set<Integer> column = data[getWorldIndex(pos)];\n+        return column.contains(pos.y());\n+    }\n+\n+    public void setWorld(int x, int y, int z, boolean value) {\n+        setWorld(new Vector3i(x, y, z), value);\n+    }\n+\n+    public void setWorld(Vector3ic pos, boolean value) {\n+        Set<Integer> column = data[getWorldIndex(pos)];\n+        if (value) {\n+            column.add(pos.y());\n+        } else {\n+            column.remove(pos.y());\n+        }\n+    }\n+\n+    public Set<Integer> getWorldColumn(int x, int z) {\n+        return data[getWorldIndex(new Vector3i(x, worldRegion.minY(), z))];\n+    }\n+\n+    protected final int getRelativeIndex(Vector3ic pos) {\n+        if (!relativeRegion.encompasses(JomlUtil.from(pos))) {\n+            throw new IllegalArgumentException(String.format(\"Out of bounds: %s for region %s\", pos.toString(), relativeRegion.toString()));\n+        }\n+        return pos.x() - relativeRegion.minX() + relativeRegion.sizeX() * (pos.z() - relativeRegion.minZ());\n+    }\n+\n+    protected final int getWorldIndex(Vector3ic pos) {\n+        if (!worldRegion.encompasses(JomlUtil.from(pos))) {\n+            throw new IllegalArgumentException(String.format(\"Out of bounds: %s for region %s\", pos.toString(), worldRegion.toString()));\n+        }\n+        return pos.x() - worldRegion.minX() + worldRegion.sizeX() * (pos.z() - worldRegion.minZ());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDc4MDk0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/generation/facets/ElevationFacet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyMjo0MFrOHwpmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoyMjo0MFrOHwpmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc3NTIwOQ==", "bodyText": "You could {@link SurfacesFacet} here to create cross references (not that anybody is actually looking at the generated Javadoc, but anyways...)", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520775209", "createdAt": "2020-11-10T18:22:40Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/ElevationFacet.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.world.generation.facets;\n+\n+import org.terasology.math.Region3i;\n+import org.terasology.world.generation.Border3D;\n+import org.terasology.world.generation.facets.base.BaseFieldFacet2D;\n+\n+/**\n+ * This facet represents the approximate height of the conceptual surface of the ground at each position.\n+ * It may exclude local features such as caves. It is intended to be used to determine the altitude relative\n+ * to the ground of features that are not placed directly on the surface, such as placing ores at a certain\n+ * depth below ground.\n+ *\n+ * The combination of the SurfacesFacet and the ElevationFacet is a more flexible alternative to the SurfaceHeightFacet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDk0MjM4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1ODo1NFrOHwrNzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzowMDo1OVrOHwy-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTc0Mw==", "bodyText": "A part of me wants to go for a more \"functional\" solution, but then computing the distance each and every time in a custom comparator is also awkward...", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520801743", "createdAt": "2020-11-10T18:58:54Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.world.generation.facets;\n+\n+import org.joml.Vector3ic;\n+import org.terasology.math.Region3i;\n+import org.terasology.world.generation.Border3D;\n+import org.terasology.world.generation.facets.base.VerticallySparseBooleanFacet3D;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This facet represents the heights of all of the surfaces of the ground. There may be multiple surfaces\n+ * in one column, for example, where there are overhangs, or floating islands. This facet is intended to\n+ * be used for placement of features on the surface itself, such as grass, trees and buildings.\n+ *\n+ * The combination of the SurfacesFacet and the ElevationFacet is a more flexible alternative to the SurfaceHeightFacet.\n+ */\n+public class SurfacesFacet extends VerticallySparseBooleanFacet3D {\n+\n+    public SurfacesFacet(Region3i targetRegion, Border3D border) {\n+        super(targetRegion, border);\n+    }\n+\n+    /**\n+     * Get the height of the surface closest to ground level.\n+     */\n+    public Optional<Float> getPrimarySurface(ElevationFacet elevationFacet, int x, int z) {\n+        float elevation = elevationFacet.getWorld(x, z);\n+        float bestDistance = Float.POSITIVE_INFINITY;\n+        Optional<Float> bestSurface = Optional.empty();\n+        for (int surface : getWorldColumn(x, z)) {\n+            float distance = Math.abs(surface - elevation);\n+            if (distance < bestDistance) {\n+                bestDistance = distance;\n+                bestSurface = Optional.of((float) surface);\n+            }\n+        }\n+        return bestSurface;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMzEyOQ==", "bodyText": "Would it in general help if the column of values would be sorted?", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520803129", "createdAt": "2020-11-10T19:00:14Z", "author": {"login": "skaldarnar"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.world.generation.facets;\n+\n+import org.joml.Vector3ic;\n+import org.terasology.math.Region3i;\n+import org.terasology.world.generation.Border3D;\n+import org.terasology.world.generation.facets.base.VerticallySparseBooleanFacet3D;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This facet represents the heights of all of the surfaces of the ground. There may be multiple surfaces\n+ * in one column, for example, where there are overhangs, or floating islands. This facet is intended to\n+ * be used for placement of features on the surface itself, such as grass, trees and buildings.\n+ *\n+ * The combination of the SurfacesFacet and the ElevationFacet is a more flexible alternative to the SurfaceHeightFacet.\n+ */\n+public class SurfacesFacet extends VerticallySparseBooleanFacet3D {\n+\n+    public SurfacesFacet(Region3i targetRegion, Border3D border) {\n+        super(targetRegion, border);\n+    }\n+\n+    /**\n+     * Get the height of the surface closest to ground level.\n+     */\n+    public Optional<Float> getPrimarySurface(ElevationFacet elevationFacet, int x, int z) {\n+        float elevation = elevationFacet.getWorld(x, z);\n+        float bestDistance = Float.POSITIVE_INFINITY;\n+        Optional<Float> bestSurface = Optional.empty();\n+        for (int surface : getWorldColumn(x, z)) {\n+            float distance = Math.abs(surface - elevation);\n+            if (distance < bestDistance) {\n+                bestDistance = distance;\n+                bestSurface = Optional.of((float) surface);\n+            }\n+        }\n+        return bestSurface;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTc0Mw=="}, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODkzOQ==", "bodyText": "There will generally be sufficiently few surfaces in any column that binary search would have little or no advantage over linear search anyway, so it would definitely not be worth the added complexity.", "url": "https://github.com/MovingBlocks/Terasology/pull/4237#discussion_r520928939", "createdAt": "2020-11-10T23:00:59Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/generation/facets/SurfacesFacet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2014 MovingBlocks\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.terasology.world.generation.facets;\n+\n+import org.joml.Vector3ic;\n+import org.terasology.math.Region3i;\n+import org.terasology.world.generation.Border3D;\n+import org.terasology.world.generation.facets.base.VerticallySparseBooleanFacet3D;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This facet represents the heights of all of the surfaces of the ground. There may be multiple surfaces\n+ * in one column, for example, where there are overhangs, or floating islands. This facet is intended to\n+ * be used for placement of features on the surface itself, such as grass, trees and buildings.\n+ *\n+ * The combination of the SurfacesFacet and the ElevationFacet is a more flexible alternative to the SurfaceHeightFacet.\n+ */\n+public class SurfacesFacet extends VerticallySparseBooleanFacet3D {\n+\n+    public SurfacesFacet(Region3i targetRegion, Border3D border) {\n+        super(targetRegion, border);\n+    }\n+\n+    /**\n+     * Get the height of the surface closest to ground level.\n+     */\n+    public Optional<Float> getPrimarySurface(ElevationFacet elevationFacet, int x, int z) {\n+        float elevation = elevationFacet.getWorld(x, z);\n+        float bestDistance = Float.POSITIVE_INFINITY;\n+        Optional<Float> bestSurface = Optional.empty();\n+        for (int surface : getWorldColumn(x, z)) {\n+            float distance = Math.abs(surface - elevation);\n+            if (distance < bestDistance) {\n+                bestDistance = distance;\n+                bestSurface = Optional.of((float) surface);\n+            }\n+        }\n+        return bestSurface;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMTc0Mw=="}, "originalCommit": {"oid": "e7c12e6ac4fb27ccb9ca3d9d4d7e99dc37f99257"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 255, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}