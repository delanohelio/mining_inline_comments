{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NjAzNzU5", "number": 4353, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToyOTozMVrOFJ2aFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTozODoxMVrOFJ2gIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODcyOTE2OnYy", "diffSide": "LEFT", "path": "engine/src/main/java/org/terasology/world/chunks/remoteChunkProvider/RemoteChunkProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToyOTozMVrOIMWddg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDowNDoyN1rOIMXBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMTgxNA==", "bodyText": "You've moved the call to the worldEntity until after markReady, but what of the listener.onChunkReady before it? Should onChunkReady also be called only after the chunk is marked ready?", "url": "https://github.com/MovingBlocks/Terasology/pull/4353#discussion_r549821814", "createdAt": "2020-12-29T19:29:31Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/world/chunks/remoteChunkProvider/RemoteChunkProvider.java", "diffHunk": "@@ -81,12 +81,12 @@ public RemoteChunkProvider(BlockManager blockManager, LocalPlayer localPlayer) {\n                 ))\n                 .addStage(ChunkTaskProvider.create(\"\", chunk -> {\n                     listener.onChunkReady(chunk.getPosition());\n-                    worldEntity.send(new OnChunkLoaded(chunk.getPosition()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987eda4b5dba26e854146f0fed59d062f9adc665"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyOTk2OA==", "bodyText": "You're right. That also looks like it should be moved.", "url": "https://github.com/MovingBlocks/Terasology/pull/4353#discussion_r549829968", "createdAt": "2020-12-29T20:00:07Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/chunks/remoteChunkProvider/RemoteChunkProvider.java", "diffHunk": "@@ -81,12 +81,12 @@ public RemoteChunkProvider(BlockManager blockManager, LocalPlayer localPlayer) {\n                 ))\n                 .addStage(ChunkTaskProvider.create(\"\", chunk -> {\n                     listener.onChunkReady(chunk.getPosition());\n-                    worldEntity.send(new OnChunkLoaded(chunk.getPosition()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMTgxNA=="}, "originalCommit": {"oid": "987eda4b5dba26e854146f0fed59d062f9adc665"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzMTEwNw==", "bodyText": "The only actual implementation of onChunkReady is in ServerImpl, and that does assume that the chunk can already be written to.", "url": "https://github.com/MovingBlocks/Terasology/pull/4353#discussion_r549831107", "createdAt": "2020-12-29T20:04:27Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/chunks/remoteChunkProvider/RemoteChunkProvider.java", "diffHunk": "@@ -81,12 +81,12 @@ public RemoteChunkProvider(BlockManager blockManager, LocalPlayer localPlayer) {\n                 ))\n                 .addStage(ChunkTaskProvider.create(\"\", chunk -> {\n                     listener.onChunkReady(chunk.getPosition());\n-                    worldEntity.send(new OnChunkLoaded(chunk.getPosition()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyMTgxNA=="}, "originalCommit": {"oid": "987eda4b5dba26e854146f0fed59d062f9adc665"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODc0NDY2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/terasology/world/chunks/localChunkProvider/LocalChunkProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTozODoxMVrOIMWmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOTo1NjoxOVrOIMW5Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyNDA1MQ==", "bodyText": "This one took a little more reading than RemoteChunkProvider because of the number of lines in this function, but I think I believe this. We should mark the chunk as ready before sending any of those events to blocks and entities in the chunk, or the loaded/generated events about the chunk itself.\nThat wouldn't be the case if something operating on that collection of event mappings is a precondition for chunk readiness -- but I don't see any evidence of that here. It just fires off a bunch of events, there are no conditions on any of them being handled any particular way.", "url": "https://github.com/MovingBlocks/Terasology/pull/4353#discussion_r549824051", "createdAt": "2020-12-29T19:38:11Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/world/chunks/localChunkProvider/LocalChunkProvider.java", "diffHunk": "@@ -197,6 +197,7 @@ private void processReadyChunk(final Chunk chunk) {\n             return; // TODO move it in pipeline;\n         }\n         chunkCache.put(chunk.getPosition(), chunk);\n+        chunk.markReady();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987eda4b5dba26e854146f0fed59d062f9adc665"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyODg5MQ==", "bodyText": "Also, because this isn't in the main thread, the event handlers aren't guaranteed to run before the chunk is marked ready anyway (and they usually don't).", "url": "https://github.com/MovingBlocks/Terasology/pull/4353#discussion_r549828891", "createdAt": "2020-12-29T19:56:19Z", "author": {"login": "4Denthusiast"}, "path": "engine/src/main/java/org/terasology/world/chunks/localChunkProvider/LocalChunkProvider.java", "diffHunk": "@@ -197,6 +197,7 @@ private void processReadyChunk(final Chunk chunk) {\n             return; // TODO move it in pipeline;\n         }\n         chunkCache.put(chunk.getPosition(), chunk);\n+        chunk.markReady();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgyNDA1MQ=="}, "originalCommit": {"oid": "987eda4b5dba26e854146f0fed59d062f9adc665"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 224, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}