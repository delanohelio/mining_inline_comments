{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Mzk5MTk3", "number": 4028, "title": "feat(JOML): Correct matrix output for Camera#getProjectionMatrix()", "bodyText": "termath and JOML matrices are transposes of each other and this PR tries to address the changes required to start migrating from one system to the other. This PR specifically focuses on correcting the ProjectionMatrix(). This is necessary to avoid additional matrix allocations to convert from one to the other. This affects the camera so any significant changes in these matrices should drastically affect rendering.\nThis PR also requires merging the changes in this branch: Terasology/CoreRendering#13", "createdAt": "2020-06-03T19:13:49Z", "url": "https://github.com/MovingBlocks/Terasology/pull/4028", "merged": true, "mergeCommit": {"oid": "26f605be6552cf6473a7b25a1270f9a0de014476"}, "closed": true, "closedAt": "2020-06-16T21:14:40Z", "author": {"login": "pollend"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnuaNDgH2gAyNDI3Mzk5MTk3OmQyZTU2YzEwOGZkYWQwMjVmZjkzMTBmMTk0ZTg0ZDMxZmEyMWY1N2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcq3h7GAFqTQzMDEzOTgzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/d2e56c108fdad025ff9310f194e84d31fa21f57f", "committedDate": "2020-06-03T19:13:23Z", "message": "feat(JOML): Correct matrix output for Camera#getProjectionMatrix()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzODkwNjcy", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#pullrequestreview-423890672", "createdAt": "2020-06-03T20:07:25Z", "commit": {"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowNzoyNVrOGerieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDoyODoxNFrOGesLjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzgwMA==", "bodyText": "does this end up being the same as joml's perspectiveRect? or is the fovY we come up with different than the perspective it would set if we passed display width and height to perspectiveRect?\neither way, I think we can use the setPerspective would let us avoid the need to reset the matrix to identity first.", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434823800", "createdAt": "2020-06-03T20:07:25Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "diffHunk": "@@ -137,23 +138,25 @@ public void updateMatrices() {\n     public void updateMatrices(float fov) {\n         // Nothing to do...\n         if (cachedPosition.equals(getPosition()) && cachedViewigDirection.equals(viewingDirection)\n-                && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n-                && cachedFov == fov\n-                && cachedZFar == getzFar() && cachedZNear == getzNear()\n-                && cachedReflectionHeight == getReflectionHeight()) {\n+            && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n+            && cachedFov == fov\n+            && cachedZFar == getzFar() && cachedZNear == getzNear()\n+            && cachedReflectionHeight == getReflectionHeight()) {\n             return;\n         }\n \n         viewingDirection.cross(up, tempRightVector);\n         tempRightVector.mul(bobbingRotationOffsetFactor);\n \n-        projectionMatrix = createPerspectiveProjectionMatrix(fov, getzNear(), getzFar(),this.displayDevice);\n+        float aspectRatio = (float) displayDevice.getDisplayWidth() / displayDevice.getDisplayHeight();\n+        float fovY = (float) (2 * Math.atan2(Math.tan(0.5 * fov * TeraMath.DEG_TO_RAD), aspectRatio));\n+        projectionMatrix.identity().perspective(fovY, aspectRatio, getzNear(), getzFar()).transpose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzMjcxMQ==", "bodyText": "also ... keeping the .transpose here but then re-transposing in the abstract Camera.getProjectionMatrix?\nI guess the projectionMatrix property still needs to be transposed for some things, that's probably what you meant by things you need to correct in the camera later. But I lean toward adding an additional private field so we can store the non-transposed version instead of making a new object on every access.", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434832711", "createdAt": "2020-06-03T20:25:15Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "diffHunk": "@@ -137,23 +138,25 @@ public void updateMatrices() {\n     public void updateMatrices(float fov) {\n         // Nothing to do...\n         if (cachedPosition.equals(getPosition()) && cachedViewigDirection.equals(viewingDirection)\n-                && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n-                && cachedFov == fov\n-                && cachedZFar == getzFar() && cachedZNear == getzNear()\n-                && cachedReflectionHeight == getReflectionHeight()) {\n+            && cachedBobbingRotationOffsetFactor == bobbingRotationOffsetFactor && cachedBobbingVerticalOffsetFactor == bobbingVerticalOffsetFactor\n+            && cachedFov == fov\n+            && cachedZFar == getzFar() && cachedZNear == getzNear()\n+            && cachedReflectionHeight == getReflectionHeight()) {\n             return;\n         }\n \n         viewingDirection.cross(up, tempRightVector);\n         tempRightVector.mul(bobbingRotationOffsetFactor);\n \n-        projectionMatrix = createPerspectiveProjectionMatrix(fov, getzNear(), getzFar(),this.displayDevice);\n+        float aspectRatio = (float) displayDevice.getDisplayWidth() / displayDevice.getDisplayHeight();\n+        float fovY = (float) (2 * Math.atan2(Math.tan(0.5 * fov * TeraMath.DEG_TO_RAD), aspectRatio));\n+        projectionMatrix.identity().perspective(fovY, aspectRatio, getzNear(), getzFar()).transpose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzgwMA=="}, "originalCommit": {"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDMxOQ==", "bodyText": "If this is something that gets called every frame, I'm itching to optimize the memory access here too, but that doesn't have to be in this PR.", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#discussion_r434834319", "createdAt": "2020-06-03T20:28:14Z", "author": {"login": "keturn"}, "path": "engine/src/main/java/org/terasology/rendering/cameras/PerspectiveCamera.java", "diffHunk": "@@ -71,7 +72,7 @@ public boolean isBobbingAllowed() {\n     @Override\n     public void loadProjectionMatrix() {\n         glMatrixMode(GL_PROJECTION);\n-        GL11.glLoadMatrix(MatrixUtils.matrixToFloatBuffer(getProjectionMatrix()));\n+        GL11.glLoadMatrix(getProjectionMatrix().get(BufferUtils.createFloatBuffer(16)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e56c108fdad025ff9310f194e84d31fa21f57f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88de4134f59bf4497f3e094b9e4ef4c630d12977", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/88de4134f59bf4497f3e094b9e4ef4c630d12977", "committedDate": "2020-06-03T22:46:13Z", "message": "update projection matrix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14be9e0b5539e227c75a14b0b70b1d50ba7f516d", "author": {"user": {"login": "keturn", "name": "Kevin Turner"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/14be9e0b5539e227c75a14b0b70b1d50ba7f516d", "committedDate": "2020-06-12T20:18:15Z", "message": "refactor(PerspectiveCamera): transpose projection matrix only once per update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d8ac9b244713a77c0c12f1dd4e4fdd206a0c6d", "author": {"user": {"login": "pollend", "name": "Michael Pollind"}}, "url": "https://github.com/MovingBlocks/Terasology/commit/08d8ac9b244713a77c0c12f1dd4e4fdd206a0c6d", "committedDate": "2020-06-13T04:21:49Z", "message": "Merge pull request #2 from keturn/suggest/4028\n\nrefactor(PerspectiveCamera): transpose projection matrix only once pe\u2026"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTM5ODM5", "url": "https://github.com/MovingBlocks/Terasology/pull/4028#pullrequestreview-430139839", "createdAt": "2020-06-13T13:32:44Z", "commit": {"oid": "08d8ac9b244713a77c0c12f1dd4e4fdd206a0c6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1662, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}