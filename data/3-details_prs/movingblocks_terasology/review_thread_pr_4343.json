{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1OTQ3ODM3", "number": 4343, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMDo1NjozMFrOFKmslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTowNTowMlrOFKmu2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjY0MDg3OnYy", "diffSide": "RIGHT", "path": "facades/PC/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMDo1NjozMFrOINZg9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMToyMjoyMVrOINZpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDQzNw==", "bodyText": "Would it be worth adding a quick comment here? I'm not even sure what \"platform\" even means here, although I can figure what the overall meaning is", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550920437", "createdAt": "2021-01-02T20:56:30Z", "author": {"login": "Cervator"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -92,6 +92,8 @@ dependencies {\n \n     // TODO: Consider whether we can move the CR dependency back here from the engine, where it is referenced from the main menu\n     implementation(group = \"org.terasology.crashreporter\", name = \"cr-terasology\", version = \"4.1.0\")\n+\n+    runtimeOnly(platform(project(\":modules\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMjU4OQ==", "bodyText": "can do", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550922589", "createdAt": "2021-01-02T21:22:21Z", "author": {"login": "keturn"}, "path": "facades/PC/build.gradle.kts", "diffHunk": "@@ -92,6 +92,8 @@ dependencies {\n \n     // TODO: Consider whether we can move the CR dependency back here from the engine, where it is referenced from the main menu\n     implementation(group = \"org.terasology.crashreporter\", name = \"cr-terasology\", version = \"4.1.0\")\n+\n+    runtimeOnly(platform(project(\":modules\")))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDQzNw=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjY0MzA2OnYy", "diffSide": "RIGHT", "path": "modules/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMDo1OTowMVrOINZh4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTozODozNFrOINZuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDY3NQ==", "bodyText": "Similarly here I fully expect that this works, but is allowing dependencies not a default state of some sort? That seems odd.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550920675", "createdAt": "2021-01-02T20:59:01Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMzkxMQ==", "bodyText": "That is the case! By default, gradle's java-platform is a thing that specifies version constraints, but consumers can depend on the platform without depending on everything in it.\nthat scenario probably looks more like:\ndependencies {\n    implementation(platform(\"com.example.foo:foo-framework:3\"))\n    implementation(\"com.example.foo:foo-core\")\n    implementation(\"com.example.foo:foo-http-server\")\n}\nto say \"I need these things from Foo Framework v3, make sure all versions are consistent with what they've published as v3 of that platform.\"\nIn order to say this platform depends on things we have to explicitly enable set this flag.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550923911", "createdAt": "2021-01-02T21:38:34Z", "author": {"login": "keturn"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDY3NQ=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjY0NDAzOnYy", "diffSide": "RIGHT", "path": "modules/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTowMTowMVrOINZiWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QwMjo1MDoyNFrOINbK-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDc5Mw==", "bodyText": "I figure this builds the runtime classpath so all the module jars are available to the engine. this can be used to refer to a whole project level in Gradle, so to say?\nThis reminds me of that old idea to make the PC facade have a compile dependency on all the modules, to have them for sure get built when you run the game. Although at the cost of not being able to launch without every single module working, and maybe at a risk to get weird dependencies written into the binaries published to Artifactory.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550920793", "createdAt": "2021-01-02T21:01:01Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzMjA2OQ==", "bodyText": "this is given by the closest enclosing scope; it's the project that subprojects is iterating through. (the hints added by IntelliJ make this clearer when reading it in the IDE)\n\nmake the PC facade have a compile dependency on all the modules\n\nYes, that's exactly what is happening when the facade depends on the platform.\n\nat the cost of not being able to launch without every single module working\n\nI think we already sacrificed that ability a while ago?\nTest plan:\n\ngroovyw recurse JoshariasSurvival\nadd some compilation error to EdibileFlora's FillingModifierSystem\ngradlew game --continue\n\n:modules:EdibleFlora:compileJava fails\n\n\n\nI think because the game task depends on the moduleClasses task.\nI haven't yet come across a gradle way to always attempt to rebuild dependency subprojects if their sources changed but also soft-fail and try to run subsequent steps despite that. You can --continue, but I think that only makes it keep going on independent parts of the dependency tree, not excuse a missing dependency.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550932069", "createdAt": "2021-01-02T23:20:00Z", "author": {"login": "keturn"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDc5Mw=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzMzk1OQ==", "bodyText": "get weird dependencies written into the binaries published to Artifactory.\n\nyes, if you publish a jar of the PC facade while you have subprojects present in /modules/, that would include things we probably don't want included.\nIs that a thing that happens? Does anything publish facade that's not in a clean workspace made explicitly for that purpose?\nIf so, then yeah, we'll have to add more separation so this local workspace state isn't confused with what we want to publish to the world. I hadn't imagined it was used that way.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550933959", "createdAt": "2021-01-02T23:46:27Z", "author": {"login": "keturn"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDc5Mw=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk0MDg3OQ==", "bodyText": "Gradle will always hit the issues, yep, IntelliJ has had a tendency in the past to skip errors if they're in something the run config doesn't care about. I'm not sure about that now since we're having some other weird issues there from time to time :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550940879", "createdAt": "2021-01-03T01:18:06Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDc5Mw=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk0NzU3OQ==", "bodyText": "if you publish a jar of the PC facade ...\n\nI didn't see this comment earlier while posting my own for some reason. No, that isn't done anywhere at the moment. And any sort of test-publishing we might do locally surely should target something like the Nanoware test repos in Artifactory.\nIt is good to know though, in case we get creative and weird in the future. One idea that floated around was to build modules in an actual full engine workspace, rather than the minified single-module workspace we run in Jenkins right now. Even that in theory shouldn't hit it - since that should just publish the module, not the facade.\nSo - not worried about it. May be worth highlighting with a comment perhaps :-)", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550947579", "createdAt": "2021-01-03T02:50:24Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDc5Mw=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjY0NjY2OnYy", "diffSide": "RIGHT", "path": "modules/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMTowNTowMlrOINZjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMzoyNjoxOVrOINaQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMTA4OA==", "bodyText": "Again understanding what this does, but cleanPlatform throws me off naming-wise. Is it almost like \"cleanPlatform\" would really be the task name? But since you want :modules:clean to work then the task name just remains \"clean\"\nWould something like cleanAllModules and cleanAllModules.dependsOn(... do the same thing but be clearer in naming?", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550921088", "createdAt": "2021-01-02T21:05:02Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)\n+    }\n+}\n+\n+// Allows using :modules:clean as a shortcut for running clean in each module.\n+tasks.named(\"clean\").configure {\n+    val cleanPlatform = this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzMjIxNQ==", "bodyText": "cleanPlatform here is a local variable so I can use it below after this has been shadowed by the subproject. It's not renaming any tasks.", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550932215", "createdAt": "2021-01-02T23:23:05Z", "author": {"login": "keturn"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)\n+    }\n+}\n+\n+// Allows using :modules:clean as a shortcut for running clean in each module.\n+tasks.named(\"clean\").configure {\n+    val cleanPlatform = this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMTA4OA=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkzMjUwOQ==", "bodyText": "Oh yes, I got that part. Thus the \"almost like\" \ud83d\ude01\nLike in the abstract this class could as well have been called \"cleanPlatform\" or \"cleanAllModules\" - plain \"cleanPlatform\" just throws me off as a variable name the way it gets used, but that's very minor and probably just me \ud83d\udc4d", "url": "https://github.com/MovingBlocks/Terasology/pull/4343#discussion_r550932509", "createdAt": "2021-01-02T23:26:19Z", "author": {"login": "Cervator"}, "path": "modules/build.gradle.kts", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 The Terasology Foundation\n+// SPDX-License-Identifier: Apache-2.0\n+\n+plugins {\n+    `java-platform`\n+}\n+\n+javaPlatform {\n+    allowDependencies()\n+}\n+\n+dependencies {\n+    // This platform depends on each of its subprojects.\n+    subprojects {\n+        runtime(this)\n+    }\n+}\n+\n+// Allows using :modules:clean as a shortcut for running clean in each module.\n+tasks.named(\"clean\").configure {\n+    val cleanPlatform = this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMTA4OA=="}, "originalCommit": {"oid": "1f59aded808e4aedef56a5de5a04734936a771d2"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 214, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}