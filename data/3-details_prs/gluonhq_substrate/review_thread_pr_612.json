{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjcwNjQx", "number": 612, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzozMzozMlrOD_Ih0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0MzowM1rOD_wmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI2NjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzozMzozMlrOGZpcyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMDowOVrOGZqtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NjY5Nw==", "bodyText": "If projectLibsLocation doesn't exist, the folder is not created.\nThis fixes it:\nif (!Files.exists(projectLibsLocation)) {\n        Files.createDirectories(projectLibsLocation);\n}", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429546697", "createdAt": "2020-05-23T13:33:32Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzI0OQ==", "bodyText": "Fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567249", "createdAt": "2020-05-23T18:20:09Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NjY5Nw=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI3Nzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMzo1NTozOFrOGZpi8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMDoyNlrOGZqtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODI3Mw==", "bodyText": "If targetFolder doesn't exist, the folder is not created.\nThis fixes it:\nif (!Files.exists(targetFolder)) {\n        Files.createDirectories(targetFolder);\n}", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429548273", "createdAt": "2020-05-23T13:55:38Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -300,94 +263,24 @@ boolean useGraalVMJavaStaticLibraries() {\n         return false;\n     }\n \n-    private Path getApkPath() {\n-        return paths.getGvmPath().resolve(Constants.APK_PATH);\n-    }\n-\n-    private Path getApkBinPath() {\n-        return getApkPath().resolve(\"bin\");\n-    }\n-\n-    private Path getApkClassesPath() {\n-        return getApkPath().resolve(\"classes\");\n-    }\n-\n-    private Path getApkLibPath() {\n-        return getApkPath().resolve(\"lib\");\n-    }\n-\n-    private Path getApkLibArm64Path() {\n-        return getApkLibPath().resolve(\"arm64-v8a\");\n-    }\n-\n-    private Path getApkAndroidSourcePath() {\n-        return getApkPath().resolve(\"android-source\");\n+    Path getAndroidProjectPath() {\n+        return paths.getGvmPath().resolve(\"android_project\");\n     }\n \n-    private void ensureApkOutputDirectoriesExist() throws IOException {\n-        Files.createDirectories(getApkPath());\n-        Files.createDirectories(getApkBinPath());\n-        Files.createDirectories(getApkClassesPath());\n-        Files.createDirectories(getApkLibPath());\n-        Files.createDirectories(getApkLibArm64Path());\n-    }\n-\n-    private boolean processPrecompiledClasses(String androidJar) throws IOException, InterruptedException {\n-        String androidCodeLocation = \"/native/android/dalvik\";\n-\n-        copyOtherDalvikClasses();\n-        if (projectConfiguration.isUsePrecompiledCode()) {\n-            copyPrecompiledClasses(androidCodeLocation + DALVIK_PRECOMPILED_CLASSES);\n-        } else {\n-            return compileDalvikCode(androidCodeLocation + \"/source/\", androidJar) == 0;\n-        }\n-\n-        return true;\n-    }\n-\n-    private void copyPrecompiledClasses(String androidPrecompiled) throws IOException {\n-        for (String classFile : compiledGlueCodeActivity) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_ACTIVITY_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_ACTIVITY_PACKAGE + classFile + \".class\"));\n-        }\n-        for (String classFile : compiledGlueCodeJavaFX) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_JAVAFX_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_JAVAFX_PACKAGE + classFile + \".class\"));\n-        }\n-    }\n-\n-    private int compileDalvikCode(String androidSrc, String androidJar) throws IOException, InterruptedException {\n-        Files.createDirectories(getApkAndroidSourcePath());\n-\n-        for (String srcFile : sourceGlueCode) {\n-            FileOps.copyResource(androidSrc + srcFile + \".java\", getApkAndroidSourcePath().resolve(srcFile + \".java\"));\n-        }\n-\n-        List<String> sources = new ArrayList<>();\n-\n-        for (String srcFile : sourceGlueCode) {\n-            sources.add(getApkAndroidSourcePath().resolve(srcFile + \".java\").toString());\n-        }\n-\n-        ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n-                \"-d\", getApkClassesPath().toString(),\n-                \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassesPath().toString(),\n-                \"-bootclasspath\", androidJar);\n-        processRunner.addArgs(sources);\n-        return processRunner.runProcess(\"dalvikCompilation\");\n+    Path getAndroidProjectMainPath() {\n+        return getAndroidProjectPath().resolve(\"app\").resolve(\"src\").resolve(\"main\");\n     }\n \n     /**\n      * Walks through the jars in the classpath, excluding the JavaFX ones,\n      * and looks for META-INF/substrate/dalvik/*.class files.\n      *\n-     * The method will copy all the class files found into the target folder\n+     * The method will copy all the class files found into jar in the target folder\n      *\n      * @throws IOException\n      */\n     private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n-        Path targetFolder = getApkClassesPath();\n+        Path targetFolder = getAndroidProjectPath().resolve(\"libs\").resolve(\"tmp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzI2NA==", "bodyText": "Fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567264", "createdAt": "2020-05-23T18:20:26Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -300,94 +263,24 @@ boolean useGraalVMJavaStaticLibraries() {\n         return false;\n     }\n \n-    private Path getApkPath() {\n-        return paths.getGvmPath().resolve(Constants.APK_PATH);\n-    }\n-\n-    private Path getApkBinPath() {\n-        return getApkPath().resolve(\"bin\");\n-    }\n-\n-    private Path getApkClassesPath() {\n-        return getApkPath().resolve(\"classes\");\n-    }\n-\n-    private Path getApkLibPath() {\n-        return getApkPath().resolve(\"lib\");\n-    }\n-\n-    private Path getApkLibArm64Path() {\n-        return getApkLibPath().resolve(\"arm64-v8a\");\n-    }\n-\n-    private Path getApkAndroidSourcePath() {\n-        return getApkPath().resolve(\"android-source\");\n+    Path getAndroidProjectPath() {\n+        return paths.getGvmPath().resolve(\"android_project\");\n     }\n \n-    private void ensureApkOutputDirectoriesExist() throws IOException {\n-        Files.createDirectories(getApkPath());\n-        Files.createDirectories(getApkBinPath());\n-        Files.createDirectories(getApkClassesPath());\n-        Files.createDirectories(getApkLibPath());\n-        Files.createDirectories(getApkLibArm64Path());\n-    }\n-\n-    private boolean processPrecompiledClasses(String androidJar) throws IOException, InterruptedException {\n-        String androidCodeLocation = \"/native/android/dalvik\";\n-\n-        copyOtherDalvikClasses();\n-        if (projectConfiguration.isUsePrecompiledCode()) {\n-            copyPrecompiledClasses(androidCodeLocation + DALVIK_PRECOMPILED_CLASSES);\n-        } else {\n-            return compileDalvikCode(androidCodeLocation + \"/source/\", androidJar) == 0;\n-        }\n-\n-        return true;\n-    }\n-\n-    private void copyPrecompiledClasses(String androidPrecompiled) throws IOException {\n-        for (String classFile : compiledGlueCodeActivity) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_ACTIVITY_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_ACTIVITY_PACKAGE + classFile + \".class\"));\n-        }\n-        for (String classFile : compiledGlueCodeJavaFX) {\n-            FileOps.copyResource(androidPrecompiled + DALVIK_JAVAFX_PACKAGE + classFile + \".class\",\n-                    getApkClassesPath().resolve(DALVIK_JAVAFX_PACKAGE + classFile + \".class\"));\n-        }\n-    }\n-\n-    private int compileDalvikCode(String androidSrc, String androidJar) throws IOException, InterruptedException {\n-        Files.createDirectories(getApkAndroidSourcePath());\n-\n-        for (String srcFile : sourceGlueCode) {\n-            FileOps.copyResource(androidSrc + srcFile + \".java\", getApkAndroidSourcePath().resolve(srcFile + \".java\"));\n-        }\n-\n-        List<String> sources = new ArrayList<>();\n-\n-        for (String srcFile : sourceGlueCode) {\n-            sources.add(getApkAndroidSourcePath().resolve(srcFile + \".java\").toString());\n-        }\n-\n-        ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n-                \"-d\", getApkClassesPath().toString(),\n-                \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassesPath().toString(),\n-                \"-bootclasspath\", androidJar);\n-        processRunner.addArgs(sources);\n-        return processRunner.runProcess(\"dalvikCompilation\");\n+    Path getAndroidProjectMainPath() {\n+        return getAndroidProjectPath().resolve(\"app\").resolve(\"src\").resolve(\"main\");\n     }\n \n     /**\n      * Walks through the jars in the classpath, excluding the JavaFX ones,\n      * and looks for META-INF/substrate/dalvik/*.class files.\n      *\n-     * The method will copy all the class files found into the target folder\n+     * The method will copy all the class files found into jar in the target folder\n      *\n      * @throws IOException\n      */\n     private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n-        Path targetFolder = getApkClassesPath();\n+        Path targetFolder = getAndroidProjectPath().resolve(\"libs\").resolve(\"tmp\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODI3Mw=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI4MDczOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/android_project/gradle/wrapper/gradle-wrapper.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDowMDo0MVrOGZpkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMTo0NVrOGZqtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODY0Ng==", "bodyText": "Any reason to stick to an old distribution?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429548646", "createdAt": "2020-05-23T14:00:41Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/android_project/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-5.6.4-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzM3Ng==", "bodyText": "That was combination of android plugin and gradle that I found worked during thinkering.\nLatest commit bumped everything up to newest versions.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567376", "createdAt": "2020-05-23T18:21:45Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/resources/native/android/android_project/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+distributionBase=GRADLE_USER_HOME\n+distributionPath=wrapper/dists\n+zipStoreBase=GRADLE_USER_HOME\n+zipStorePath=wrapper/dists\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-5.6.4-all.zip", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0ODY0Ng=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI5NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoyODo1M1rOGZpsmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToyMzoxNFrOGZq-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng==", "bodyText": "Once you have a path to the source, can't you use FileOps::copyDirectory?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429550746", "createdAt": "2020-05-23T14:28:53Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -141,6 +148,44 @@ public static Path copyResource(String resource, Path destination) throws IOExce\n         return copyStream(is, destination);\n     }\n \n+    /**\n+     * Copies directory from resources into destination path\n+     * @param source\n+     * @param target\n+     * @throws IOException\n+     */\n+    public static void copyDirectoryFromResources(String source, final Path target) throws IOException {\n+        // https://stackoverflow.com/a/24316335\n+        FileSystem fileSystem;\n+        try {\n+            URI resource = SubstrateDispatcher.class.getResource(\"\").toURI();\n+            fileSystem = FileSystems.newFileSystem(resource, Collections.<String, String>emptyMap());\n+        } catch(URISyntaxException e) {\n+            throw new IOException(e.toString());\n+        }\n+\n+        final Path jarPath = fileSystem.getPath(source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTAyOQ==", "bodyText": "I believe that calling FileOps::copyDirectory in preVisitDirectory would copy all directories several times (for every node depth)?\nIf that is what you meant?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429565029", "createdAt": "2020-05-23T17:48:24Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -141,6 +148,44 @@ public static Path copyResource(String resource, Path destination) throws IOExce\n         return copyStream(is, destination);\n     }\n \n+    /**\n+     * Copies directory from resources into destination path\n+     * @param source\n+     * @param target\n+     * @throws IOException\n+     */\n+    public static void copyDirectoryFromResources(String source, final Path target) throws IOException {\n+        // https://stackoverflow.com/a/24316335\n+        FileSystem fileSystem;\n+        try {\n+            URI resource = SubstrateDispatcher.class.getResource(\"\").toURI();\n+            fileSystem = FileSystems.newFileSystem(resource, Collections.<String, String>emptyMap());\n+        } catch(URISyntaxException e) {\n+            throw new IOException(e.toString());\n+        }\n+\n+        final Path jarPath = fileSystem.getPath(source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NTk3OA==", "bodyText": "I meant that we already have copyDirectory(Path, Path), so you could replace the whole Files.walkFileTree(...) part with it. I haven't tested it though.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429565978", "createdAt": "2020-05-23T18:02:31Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -141,6 +148,44 @@ public static Path copyResource(String resource, Path destination) throws IOExce\n         return copyStream(is, destination);\n     }\n \n+    /**\n+     * Copies directory from resources into destination path\n+     * @param source\n+     * @param target\n+     * @throws IOException\n+     */\n+    public static void copyDirectoryFromResources(String source, final Path target) throws IOException {\n+        // https://stackoverflow.com/a/24316335\n+        FileSystem fileSystem;\n+        try {\n+            URI resource = SubstrateDispatcher.class.getResource(\"\").toURI();\n+            fileSystem = FileSystems.newFileSystem(resource, Collections.<String, String>emptyMap());\n+        } catch(URISyntaxException e) {\n+            throw new IOException(e.toString());\n+        }\n+\n+        final Path jarPath = fileSystem.getPath(source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTU4NQ==", "bodyText": "This fails with java.nio.file.ProviderMismatchException", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571585", "createdAt": "2020-05-23T19:23:14Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -141,6 +148,44 @@ public static Path copyResource(String resource, Path destination) throws IOExce\n         return copyStream(is, destination);\n     }\n \n+    /**\n+     * Copies directory from resources into destination path\n+     * @param source\n+     * @param target\n+     * @throws IOException\n+     */\n+    public static void copyDirectoryFromResources(String source, final Path target) throws IOException {\n+        // https://stackoverflow.com/a/24316335\n+        FileSystem fileSystem;\n+        try {\n+            URI resource = SubstrateDispatcher.class.getResource(\"\").toURI();\n+            fileSystem = FileSystems.newFileSystem(resource, Collections.<String, String>emptyMap());\n+        } catch(URISyntaxException e) {\n+            throw new IOException(e.toString());\n+        }\n+\n+        final Path jarPath = fileSystem.getPath(source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDc0Ng=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI5ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDozMTowNVrOGZptlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMTo1N1rOGZqtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDk5OA==", "bodyText": "can you use a different line for each operation?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429550998", "createdAt": "2020-05-23T14:31:05Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -264,6 +309,28 @@ public static void copyDirectory(Path source, Path destination) throws IOExcepti\n             copyFile(source, destination);\n     }\n \n+    /**\n+     * Recursively list files with spectified extension from directory\n+     * @param directory directory to be searched\n+     * @param extension extension by which to filter files\n+     * @throws IOException if an exception happens when listing the content\n+     */\n+    public static List<String> listFilesWithExtensionInDirectory(Path directory, String extension) throws IOException {\n+        try (Stream<Path> walk = Files.walk(directory)) {\n+            return walk.filter(Files::isRegularFile).map(x -> x.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzM5MQ==", "bodyText": "Fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567391", "createdAt": "2020-05-23T18:21:57Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -264,6 +309,28 @@ public static void copyDirectory(Path source, Path destination) throws IOExcepti\n             copyFile(source, destination);\n     }\n \n+    /**\n+     * Recursively list files with spectified extension from directory\n+     * @param directory directory to be searched\n+     * @param extension extension by which to filter files\n+     * @throws IOException if an exception happens when listing the content\n+     */\n+    public static List<String> listFilesWithExtensionInDirectory(Path directory, String extension) throws IOException {\n+        try (Stream<Path> walk = Files.walk(directory)) {\n+            return walk.filter(Files::isRegularFile).map(x -> x.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDk5OA=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMwNjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0NToyNlrOGZpx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMjoyMlrOGZqtvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEwOA==", "bodyText": "Maybe you can use projectConfiguration.isUseLLVM(). So far, backend is not set, but gives the possibility to change that if needed.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552108", "createdAt": "2020-05-23T14:45:26Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -221,22 +173,33 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n         return processResult == 0;\n     }\n \n+    boolean useLLVM = false;\n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\"));\n+        if (useLLVM) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzQyMA==", "bodyText": "Fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567420", "createdAt": "2020-05-23T18:22:22Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -221,22 +173,33 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n         return processResult == 0;\n     }\n \n+    boolean useLLVM = false;\n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\"));\n+        if (useLLVM) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEwOA=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMwNjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0NTozNFrOGZpyCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0NTozNFrOGZpyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjEzNg==", "bodyText": "Same here", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552136", "createdAt": "2020-05-23T14:45:34Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -221,22 +173,33 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n         return processResult == 0;\n     }\n \n+    boolean useLLVM = false;\n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\"));\n+        if (useLLVM) {\n+            flags.add(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM);\n+            flags.add(\"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+        }\n+        return flags;\n     }\n \n     @Override\n     List<String> getTargetSpecificObjectFiles() throws IOException {\n-        return FileOps.findFile( paths.getGvmPath(), \"llvm.o\").map( objectFile ->\n-                Collections.singletonList(objectFile.toAbsolutePath().toString())\n-        ).orElseThrow();\n+        if (useLLVM) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMwODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo0OTo1NlrOGZpzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODoyMzozOVrOGZquFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjQ3Nw==", "bodyText": "this jar will contain dalvik classes found in the classpath, so far probably only from Attach. However probably better give it another name?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429552477", "createdAt": "2020-05-23T14:49:56Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzUxMQ==", "bodyText": "I renamed it to additional_classes.jar, if you have better idea let me know :)", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567511", "createdAt": "2020-05-23T18:23:39Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,122 +300,27 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n-\n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n-    }\n-\n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n-\n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../attach.jar\", \".\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjQ3Nw=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMxMzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDo1ODowNFrOGZp1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNDo0NVrOGaCORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ==", "bodyText": "So gensrc is not used anymore? The developer still can pick the manifest to perform further changes if needed from the new folder, of course, but this changes the idea of having this intermediate location.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429553081", "createdAt": "2020-05-23T14:58:04Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2NzU1Mw==", "bodyText": "I agree, I moved android_project directory to gensrc since it seems more appropriate", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429567553", "createdAt": "2020-05-23T18:24:17Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODI2OQ==", "bodyText": "About that... gensrc should be just an intermediate folder for source files that might be modified by the developer if needed. Initially it was meant for AndroidManifest.xml or Default-info.plist, so these could be copied to src/android or src/ios. If the latter were present then these will be used.\nMy earlier comment was about keeping the manifest accessible, but the project could be still part of gvm, as it was before.\nI understand that now we have a more complex situation, as we have a whole gradle project, and it doesn't make sense that the developer moves the whole project to src/android.\nI'd say we need to keep in gensrc only the files that can be copied to src/android for further modifications: AndroidManifest, and maybe build.gradle?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429578269", "createdAt": "2020-05-23T21:05:10Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3MjM1OA==", "bodyText": "why would anyone want to modify those files manually?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429772358", "createdAt": "2020-05-25T07:24:13Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MjU4Mg==", "bodyText": "Should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429952582", "createdAt": "2020-05-25T14:04:45Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +330,58 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (!Files.exists(androidProject)) {\n+            FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        getAndroidProjectPath().resolve(\"gradlew\").toFile().setExecutable(true);\n+        return androidProject;\n     }\n \n     /**\n-     * If android manifest is present in src/android, then, this\n-     * path will be returned.\n+     * If android manifest is present in src/android, it will be copied to\n+     * android project.\n      *\n-     * Else, default android manifest is copied into gvm/genSrc/android and\n-     * this path is returned\n+     * Else, default android manifest is adjusted and used in project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzA4MQ=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 514}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTMxNjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowMzo0OFrOGZp3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToxOToyNFrOGZq88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzQ5MQ==", "bodyText": "I take that assembleDebug will sign internally the apk for debug, and the debug.keystore we created is no longer required, right?\nWhat about signing for release? I see that you have removed the sign method. What is the alternative? Could we create the signing configuration in the build.gradle file, with the release data?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429553491", "createdAt": "2020-05-23T15:03:48Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -124,80 +106,50 @@ public boolean compile() throws IOException, InterruptedException {\n     public boolean link() throws IOException, InterruptedException {\n         // we override link as we need to do some checks first. If we have no clang in android_ndk, we should not start linking\n         if (ndk == null) throw new IOException (\"Can't find an Android NDK on your system. Set the environment property ANDROID_NDK\");\n-        if (clang == null) throw new IOException (\"You specified an android ndk, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n+        if (clang == null) throw new IOException (\"You specified an android NDK, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n         if (sdk == null) throw new IOException (\"Can't find an Android SDK on your system. Set the environment property ANDROID_SDK\");\n \n         return super.link();\n     }\n \n     @Override\n     public boolean packageApp() throws IOException, InterruptedException {\n-        Path androidPathForManifest = prepareAndroidManifest();\n-        Path androidPathForRes = prepareAndroidResources();\n-\n-        ensureApkOutputDirectoriesExist();\n-\n-        Path sdkPath = Paths.get(sdk);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\").resolve(findLatestBuildTool(sdkPath));\n-        String androidJar = sdkPath.resolve(\"platforms\").resolve(\"android-27\").resolve(\"android.jar\").toString();\n-\n-        String unalignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".unaligned.apk\").toString();\n-        String alignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".apk\").toString();\n-\n-        if (!processPrecompiledClasses(androidJar)) {\n-            return false;\n-        }\n-\n-        copyAndroidManifest(androidPathForManifest);\n-        copyAssets(androidPathForRes);\n-\n-        int processResult = dx(buildToolsPath);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = aapt(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = zipAlign(buildToolsPath, unalignedApk, alignedApk);\n-        if (processResult != 0) {\n-            return false;\n-        }\n+        prepareAndroidProject();\n+        prepareAndroidManifest();\n+        prepareAndroidResources();\n+        copyOtherDalvikClasses();\n+        copySubstrateLibraries();\n \n-        processResult = sign(buildToolsPath, alignedApk);\n-        return processResult == 0;\n+        ProcessRunner assembleDebug = new ProcessRunner(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTMxNA==", "bodyText": "This should be fixed in latest commit", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571314", "createdAt": "2020-05-23T19:19:24Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -124,80 +106,50 @@ public boolean compile() throws IOException, InterruptedException {\n     public boolean link() throws IOException, InterruptedException {\n         // we override link as we need to do some checks first. If we have no clang in android_ndk, we should not start linking\n         if (ndk == null) throw new IOException (\"Can't find an Android NDK on your system. Set the environment property ANDROID_NDK\");\n-        if (clang == null) throw new IOException (\"You specified an android ndk, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n+        if (clang == null) throw new IOException (\"You specified an android NDK, but it doesn't contain \"+ndk+\"/toolchains/llvm/prebuilt/\"+hostPlatformFolder+\"/bin/clang\");\n         if (sdk == null) throw new IOException (\"Can't find an Android SDK on your system. Set the environment property ANDROID_SDK\");\n \n         return super.link();\n     }\n \n     @Override\n     public boolean packageApp() throws IOException, InterruptedException {\n-        Path androidPathForManifest = prepareAndroidManifest();\n-        Path androidPathForRes = prepareAndroidResources();\n-\n-        ensureApkOutputDirectoriesExist();\n-\n-        Path sdkPath = Paths.get(sdk);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\").resolve(findLatestBuildTool(sdkPath));\n-        String androidJar = sdkPath.resolve(\"platforms\").resolve(\"android-27\").resolve(\"android.jar\").toString();\n-\n-        String unalignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".unaligned.apk\").toString();\n-        String alignedApk = getApkBinPath().resolve(projectConfiguration.getAppName() + \".apk\").toString();\n-\n-        if (!processPrecompiledClasses(androidJar)) {\n-            return false;\n-        }\n-\n-        copyAndroidManifest(androidPathForManifest);\n-        copyAssets(androidPathForRes);\n-\n-        int processResult = dx(buildToolsPath);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = aapt(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return false;\n-        }\n-\n-        processResult = zipAlign(buildToolsPath, unalignedApk, alignedApk);\n-        if (processResult != 0) {\n-            return false;\n-        }\n+        prepareAndroidProject();\n+        prepareAndroidManifest();\n+        prepareAndroidResources();\n+        copyOtherDalvikClasses();\n+        copySubstrateLibraries();\n \n-        processResult = sign(buildToolsPath, alignedApk);\n-        return processResult == 0;\n+        ProcessRunner assembleDebug = new ProcessRunner(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzQ5MQ=="}, "originalCommit": {"oid": "0817893584bb76d3ca6c3bf2e1f50273cb8ee079"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQyNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODozOTozOFrOGZqypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODozOTozOFrOGZqypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODY3Ng==", "bodyText": "This is public API (that can be accessed by the client plugins). However we already have private API: https://github.com/gluonhq/substrate/blob/master/src/main/java/com/gluonhq/substrate/model/InternalProjectConfiguration.java#L299\nSo far I don't think we need this.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429568676", "createdAt": "2020-05-23T18:39:38Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -46,6 +46,7 @@\n     private String javafxStaticSdkVersion;\n     private String javaStaticSdkVersion;\n \n+    private boolean useLLVM = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQyODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODo0MTo0OFrOGZqzPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo0MToxNlrOGZrC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODgyOA==", "bodyText": "This is correct, as it points to https://github.com/gluonhq/substrate/blob/master/src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java#L100", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429568828", "createdAt": "2020-05-23T18:41:48Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -183,7 +182,7 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n                 \"-H:+UseBionicC\"));\n-        if (useLLVM) {\n+        if (projectConfiguration.isUseLLVM()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MjgxOQ==", "bodyText": "Should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429572819", "createdAt": "2020-05-23T19:41:16Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -183,7 +182,7 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n                 \"-H:+UseBionicC\"));\n-        if (useLLVM) {\n+        if (projectConfiguration.isUseLLVM()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODgyOA=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQzNzQzOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/android_project/app/build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxODo1OTo1MlrOGZq4CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNDoyOVrOGaCNyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDA1Ng==", "bodyText": "probably this should be 28?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429570056", "createdAt": "2020-05-23T18:59:52Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -2,15 +2,14 @@ apply plugin: 'com.android.application'\n \n android {\n     compileSdkVersion 27\n-    buildToolsVersion \"27.0.3\"\n \n     defaultConfig {\n         minSdkVersion 21\n         targetSdkVersion 27", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MjM1Mw==", "bodyText": "According to https://developer.android.com/studio/releases/build-tools :\nIf you're using Android plugin for Gradle 3.0.0 or higher, your project automatically uses a default version of the build tools that the plugin specifies.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429572353", "createdAt": "2020-05-23T19:34:21Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -2,15 +2,14 @@ apply plugin: 'com.android.application'\n \n android {\n     compileSdkVersion 27\n-    buildToolsVersion \"27.0.3\"\n \n     defaultConfig {\n         minSdkVersion 21\n         targetSdkVersion 27", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDA1Ng=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3NzczMA==", "bodyText": "I meant targetSdkVersion, we already set 28 in the manifest.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429577730", "createdAt": "2020-05-23T20:57:04Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -2,15 +2,14 @@ apply plugin: 'com.android.application'\n \n android {\n     compileSdkVersion 27\n-    buildToolsVersion \"27.0.3\"\n \n     defaultConfig {\n         minSdkVersion 21\n         targetSdkVersion 27", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDA1Ng=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MjQ1OA==", "bodyText": "Should be fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429952458", "createdAt": "2020-05-25T14:04:29Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -2,15 +2,14 @@ apply plugin: 'com.android.application'\n \n android {\n     compileSdkVersion 27\n-    buildToolsVersion \"27.0.3\"\n \n     defaultConfig {\n         minSdkVersion 21\n         targetSdkVersion 27", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MDA1Ng=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ0ODc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToyNDoyNlrOGZq-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOTo1MjoyMVrOGZrFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw==", "bodyText": "I get this warning at the end of the package task:\nWARNING: No version of NDK matched the required version 21.1.6352462. Versions available locally: \n\nI have installed the ndk-bundle, but somehow it doesn't find it. Not sure if this is an issue?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429571657", "createdAt": "2020-05-23T19:24:26Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -75,7 +75,7 @@\n \n     private static final String ANDROID_KEY = \"24333f8a63b6825ea9c5514f83c2829b004d1fee\";\n     private static final String[] ANDROID_SDK_PACKAGES = {\n-            \"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \n+            \"platforms;android-27\", \"build-tools;29.0.2\", \"platform-tools\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzI2MQ==", "bodyText": "It is known issue at Google's end https://issuetracker.google.com/issues/144111441#comment16\nIf package task doesn't fail I think we can safely ignore it.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429573261", "createdAt": "2020-05-23T19:47:55Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -75,7 +75,7 @@\n \n     private static final String ANDROID_KEY = \"24333f8a63b6825ea9c5514f83c2829b004d1fee\";\n     private static final String[] ANDROID_SDK_PACKAGES = {\n-            \"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \n+            \"platforms;android-27\", \"build-tools;29.0.2\", \"platform-tools\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MzU0Nw==", "bodyText": "Also, Gradle doesn't actually use NDK in this project configuration, since we are linking everything in AbstractTarget and just copying result as shared library.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429573547", "createdAt": "2020-05-23T19:52:21Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/util/FileDeps.java", "diffHunk": "@@ -75,7 +75,7 @@\n \n     private static final String ANDROID_KEY = \"24333f8a63b6825ea9c5514f83c2829b004d1fee\";\n     private static final String[] ANDROID_SDK_PACKAGES = {\n-            \"platforms;android-27\", \"build-tools;27.0.3\", \"platform-tools\", \n+            \"platforms;android-27\", \"build-tools;29.0.2\", \"platform-tools\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTY1Nw=="}, "originalCommit": {"oid": "59caa0438b68e980a686ad2e075de9d4a1e1d41d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ4NTA1OnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/android_project/app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMDozNDoyMVrOGZrQkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNDoxNFrOGaCNLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3NjMzNw==", "bodyText": "This is missing?\nbuildTypes {\n        release {\n            signingConfig signingConfigs.release\n        }\n    }", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429576337", "createdAt": "2020-05-23T20:34:21Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -12,4 +12,13 @@ android {\n         implementation 'com.android.support:support-v4:27.1.1'\n         api fileTree(dir: '../libs', include: '*.jar')\n     }\n+\n+    signingConfigs {\n+        release {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MjMwMw==", "bodyText": "Should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429952303", "createdAt": "2020-05-25T14:04:14Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -12,4 +12,13 @@ android {\n         implementation 'com.android.support:support-v4:27.1.1'\n         api fileTree(dir: '../libs', include: '*.jar')\n     }\n+\n+    signingConfigs {\n+        release {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3NjMzNw=="}, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTQ5MzkwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/android_project/app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMDo1Mjo1NFrOGZrVFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowMzo1OVrOGaCMvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3NzQ5Mg==", "bodyText": "I'm not fond of adding the passwords to the file. I'd rather have them in a gradle.properties file, that can be global or local to the project.\nlike:\nSTOREPASS=real_store_password\n...\n\nThese properties can be also set by the client maven plugin, like:\n<providedKeyStorePassword>STOREPASS</providedKeyStorePassword >\n...", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429577492", "createdAt": "2020-05-23T20:52:54Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -12,4 +12,13 @@ android {\n         implementation 'com.android.support:support-v4:27.1.1'\n         api fileTree(dir: '../libs', include: '*.jar')\n     }\n+\n+    signingConfigs {\n+        release {\n+            storeFile file(\"KEYSTORE_FILE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MjE5MA==", "bodyText": "Does this fix look ok to you?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429952190", "createdAt": "2020-05-25T14:03:59Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/resources/native/android/android_project/app/build.gradle", "diffHunk": "@@ -12,4 +12,13 @@ android {\n         implementation 'com.android.support:support-v4:27.1.1'\n         api fileTree(dir: '../libs', include: '*.jar')\n     }\n+\n+    signingConfigs {\n+        release {\n+            storeFile file(\"KEYSTORE_FILE\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3NzQ5Mg=="}, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzExODI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0NDo1MVrOGZ5nIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowMzowN1rOGaCLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMTQ5MQ==", "bodyText": "This fails on GraalVM 20.1\nCan we make this optional until there is a GraalVM release that has this flag?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429811491", "createdAt": "2020-05-25T08:44:51Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -223,20 +182,30 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MTc2Ng==", "bodyText": "Maybe we should add GraalVM version detection for this kind of things?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429951766", "createdAt": "2020-05-25T14:03:07Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -223,20 +182,30 @@ public boolean runUntilEnd() throws IOException, InterruptedException {\n \n     @Override\n     List<String> getTargetSpecificAOTCompileFlags() throws IOException {\n-        return Arrays.asList(\"-H:CompilerBackend=\" + Constants.BACKEND_LLVM,\n+        ArrayList<String> flags = new ArrayList<String>(Arrays.asList(\n                 \"-H:-SpawnIsolates\",\n                 \"-Dsvm.targetArch=\" + projectConfiguration.getTargetTriplet().getArch(),\n                 \"-H:+UseOnlyWritableBootImageHeap\",\n                 \"-H:+UseCAPCache\",\n                 \"-H:CAPCacheDir=\" + getCapCacheDir().toAbsolutePath().toString(),\n-                \"-H:CustomLD=\" + ldlld.toAbsolutePath().toString());\n+                \"-H:+UseBionicC\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMTQ5MQ=="}, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzEzMDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODo0ODo0NlrOGZ5u-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoxNjo1MVrOGZ_QdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzQ5Nw==", "bodyText": "This won't work on 20.1, as it requires oracle/graal@879a752", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429813497", "createdAt": "2020-05-25T08:48:46Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +94,16 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+\n+        projectConfiguration.setBackend(Constants.BACKEND_AARCH64);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMzk4OA==", "bodyText": "#615 should fix this.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429903988", "createdAt": "2020-05-25T12:16:51Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +94,16 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+\n+        projectConfiguration.setBackend(Constants.BACKEND_AARCH64);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgxMzQ5Nw=="}, "originalCommit": {"oid": "a7b459c05e09575f6990687659f7dcf7485b56d3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODExOTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDo0MToyOVrOGaDSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo1MjoxNVrOGaH_KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg==", "bodyText": "The file is not created, is it?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r429970106", "createdAt": "2020-05-25T14:41:29Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwMjQ4NA==", "bodyText": "It is copied from here\n\n  \n    \n      substrate/src/main/resources/native/android/android_project/keystore.properties\n    \n    \n        Lines 1 to 4\n      in\n      12fe324\n    \n    \n    \n    \n\n        \n          \n           storeFile=KEYSTORE_FILE \n        \n\n        \n          \n           storePassword=KEYSTORE_PASSWORD \n        \n\n        \n          \n           keyAlias=KEY_ALIAS \n        \n\n        \n          \n           keyPassword=KEY_PASSWORD", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430002484", "createdAt": "2020-05-25T16:00:57Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwODQ1NA==", "bodyText": "I saw that, but what I meant is that the file is not created under gensrc/android_project.\nAlso I don't see where we call release, all the tasks are assembleDebug or installDebug, and the generated apk is under outputs/apk/debug/apk-debug.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430008454", "createdAt": "2020-05-25T16:19:59Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxNjczNw==", "bodyText": "That file is copied to /gvm/android_project/keystore.properties. I don't think it should be in gensrc, since keystore.properties is auto-generated from ReleaseConfiguration, on each package task.\nI don't call release since ./gradlew assembleRelease is a lot slower, requires release keystore and isn't required for debugging. I believe that client:publish task or something similar might be better path moving forward.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430016737", "createdAt": "2020-05-25T16:49:11Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxODU4Ng==", "bodyText": "Hmm, I still have gensrc/android_project, so I've must missed one of your latest commits (hard to say since you squash them ;) ). Will checkout again.\nAbout publish, precisely we have added releaseConfiguration to the plugin: if you have it, you want to release, so package should do that.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430018586", "createdAt": "2020-05-25T16:55:14Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMDk5OA==", "bodyText": "I added check if releaseConfiguration is set to switch between Debug and Release", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430030998", "createdAt": "2020-05-25T17:44:33Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMTM5Mw==", "bodyText": "Ok, works now under gvm. However, I still think we should use assembleRelease if developer provides releaseConfiguration and calls client:package.\nIn order to test it, I'm using assembleRelease, and I got an exception:\nExecution failed for task ':app:validateSigningRelease'.\n> Keystore file not set for signing config release\n\nI've done some changes:\n\nmoved keystore.properties to app,\nchanged in generateSigningConfiguration:\n\nPath settingsFile = getAndroidProjectPath().resolve(\"app\").resolve(\"keystore.properties\");\n\n\nchanged the app's build to:\n\nrelease {\n            if (file(\"keystore.properties\").exists()) {\n                Properties keystoreSettings = new Properties()\n                keystoreSettings.load(new FileInputStream(file(\"keystore.properties\")))\n\n                storeFile = file(keystoreSettings['storeFile'])\n                storePassword = keystoreSettings['storePassword']\n                keyAlias = keystoreSettings['keyAlias']\n                keyPassword = keystoreSettings['keyPassword']\n            }\n        }\n\nbuildTypes {\n        release {\n            signingConfig signingConfigs.release\n        }\n    }\n\n\nThis works fine now (and it takes a few more seconds).", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430031393", "createdAt": "2020-05-25T17:46:13Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NzAxNg==", "bodyText": "I've added those changes in latest commit.\nAs for client:package, \n  \n    \n      substrate/src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java\n    \n    \n        Lines 367 to 374\n      in\n      bf585c5\n    \n    \n    \n    \n\n        \n          \n           if (keyStorePath == null || \n        \n\n        \n          \n                   !keyStorePath.endsWith(\".keystore\") || !Files.exists(Path.of(keyStorePath)) || \n        \n\n        \n          \n                   keyAlias == null || keyStorePass == null || keyPass == null) { \n        \n\n        \n          \n               if (keyStorePath != null) { \n        \n\n        \n          \n                   Logger.logSevere(\"The key store path \" + keyStorePath + \" is not valid.\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return \"Debug\"; \n        \n\n        \n          \n           } \n        \n    \n  \n\n should be false if releaseConfiguration is provided, so \"Release\" should be returned and \"assembleRelease\" emitted.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430047016", "createdAt": "2020-05-25T18:52:15Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -407,95 +311,41 @@ private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n                 throw new IOException(\"Error processing dalvik classes from jar: \" + jar + \": \" + e.getMessage() + \", \" + Arrays.toString(e.getSuppressed()));\n             }\n         }\n-    }\n-\n-    private void copyAndroidManifest(Path androidPath) throws IOException {\n-        Path androidManifest = androidPath.resolve(Constants.MANIFEST_FILE);\n-        if (!Files.exists(androidManifest)) {\n-            throw new IOException(\"File \" + androidManifest.toString() + \" not found\");\n-        }\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        FileOps.copyFile(androidManifest, androidManifestPath);\n-    }\n-\n-    private void copyAssets(Path androidPath) throws IOException {\n-        for (String iconFolder : iconFolders) {\n-            Path iconPath = androidPath.resolve(\"res\").resolve(iconFolder).resolve(\"ic_launcher.png\");\n-            if (!Files.exists(iconPath)) {\n-                throw new IOException(\"File \" + iconPath.toString() + \" not found\");\n-            }\n-        }\n-        FileOps.copyDirectory(androidPath.resolve(Constants.ANDROID_RES_FOLDER),  getApkPath().resolve(Constants.ANDROID_RES_FOLDER));\n-    }\n-\n-    private int dx(Path buildToolsPath) throws IOException, InterruptedException {\n-        String dxCmd = buildToolsPath.resolve(\"dx\").toString();\n+        ProcessRunner createJar = new ProcessRunner(\n+                projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"jar\").toString(),\n+                \"-cvf\", \"../additional_classes.jar\", \".\");\n \n-        ProcessRunner dx = new ProcessRunner(dxCmd, \"--dex\",\n-                \"--output=\" + getApkBinPath().resolve(\"classes.dex\"),\n-                getApkClassesPath().toString());\n-        return dx.runProcess(\"dx\");\n+        createJar.runProcess(\"merge-dalvik-classes\", targetFolder.toFile());\n+        FileOps.deleteDirectory(targetFolder);\n     }\n \n-    private int aapt(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        int processResult = aaptPackage(buildToolsPath, unalignedApk, androidJar);\n-        if (processResult != 0) {\n-            return processResult;\n-        }\n+    /*\n+     * Copies native libraries to android project\n+     */\n+    private void copySubstrateLibraries() throws IOException {\n+        Path projectLibsLocation = getAndroidProjectMainPath().resolve(\"jniLibs\").resolve(\"arm64-v8a\");\n \n-        processResult = aaptAddDxClasses(buildToolsPath, unalignedApk);\n-        if (processResult != 0) {\n-            return processResult;\n+        if (!Files.exists(projectLibsLocation)) {\n+            Files.createDirectories(projectLibsLocation);\n         }\n \n-        return aaptAddNativeLibs(buildToolsPath, unalignedApk);\n-    }\n-\n-    private int aaptPackage(Path buildToolsPath, String unalignedApk, String androidJar) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        Path androidManifestPath = getApkPath().resolve(\"AndroidManifest.xml\");\n-        Path apkResPath = getApkPath().resolve(Constants.ANDROID_RES_FOLDER);\n-        ProcessRunner aaptpackage = new ProcessRunner(aaptCmd, \"package\",\n-                \"-f\", \"-m\", \"-F\", unalignedApk,\n-                \"-M\", androidManifestPath.toString(),\n-                \"-S\", apkResPath.toString(),\n-                \"-I\", androidJar);\n-        return aaptpackage.runProcess(\"aaptPackage\");\n-    }\n-\n-    private int aaptAddDxClasses(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-        ProcessRunner aaptAddClass = new ProcessRunner(aaptCmd, \"add\", unalignedApk, \"classes.dex\");\n-        return aaptAddClass.runProcess(\"aaptAddDxClasses\", getApkBinPath().toFile());\n-    }\n-\n-    private int aaptAddNativeLibs(Path buildToolsPath, String unalignedApk) throws IOException, InterruptedException {\n-        String aaptCmd = buildToolsPath.resolve(\"aapt\").toString();\n-\n-        Path libPath = paths.getAppPath().resolve(getLinkOutputName());\n-        Path substrateLibPath = getApkLibArm64Path().resolve(\"libsubstrate.so\");\n-        Files.copy(libPath, substrateLibPath, StandardCopyOption.REPLACE_EXISTING);\n-\n-        List<String> aaptAddLibsArgs = new ArrayList<>(Arrays.asList(aaptCmd, \"add\", unalignedApk, \"lib/arm64-v8a/libsubstrate.so\"));\n-\n         if (projectConfiguration.isUseJavaFX()) {\n             Path javafxFreetypeLibPath = fileDeps.getJavaFXSDKLibsPath().resolve(\"libfreetype.so\");\n-            Path freetypeLibPath = getApkLibArm64Path().resolve(\"libfreetype.so\");\n+            Path freetypeLibPath = projectLibsLocation.resolve(\"libfreetype.so\");\n             Files.copy(javafxFreetypeLibPath, freetypeLibPath, StandardCopyOption.REPLACE_EXISTING);\n-            aaptAddLibsArgs.add(\"lib/arm64-v8a/libfreetype.so\");\n         }\n \n-        ProcessRunner aaptAddLibs = new ProcessRunner(aaptAddLibsArgs.toArray(String[]::new));\n-        return aaptAddLibs.runProcess(\"aaptAddNativeLibs\", getApkPath().toFile());\n+        Path libsubstrate = paths.getAppPath().resolve(getLinkOutputName());\n+        Files.copy(libsubstrate, projectLibsLocation.resolve(\"libsubstrate.so\"), StandardCopyOption.REPLACE_EXISTING);\n     }\n \n-    private int zipAlign(Path buildToolsPath, String unalignedApk, String alignedApk) throws IOException, InterruptedException {\n-        String zipAlignCmd = buildToolsPath.resolve(\"zipalign\").toString();\n-        ProcessRunner zipAlign = new ProcessRunner(zipAlignCmd, \"-f\", \"4\", unalignedApk, alignedApk);\n-        return zipAlign.runProcess(\"zipalign\");\n-    }\n+    /*\n+     * Generates release signing configuration if\n+     * keystore is provided\n+     */\n+    private void generateSigningConfiguration() throws IOException {\n+        Path settingsFile = getAndroidProjectPath().resolve(\"keystore.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDEwNg=="}, "originalCommit": {"oid": "202c81cbcf190544df670692146bd9b1cd182814"}, "originalPosition": 435}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODQ1NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoxMDo0MFrOGaGgLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzo0MzowNVrOGaG_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjcwMA==", "bodyText": "This fails for me, as I have installed graalvm-ce-java11-20.2.0-dev, and that produces  GraalVM CE 20.2.0-dev, that doesn't follow the current pattern (but this is a different issue though, I filed #617 for it).", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430022700", "createdAt": "2020-05-25T17:10:40Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +95,17 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+        if (projectConfiguration.getGraalVersion().compareTo(new Version(\"20.1.0\")) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0151ffbd7da92195627c14a4ffb7847bdd45aa92"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMDY1MA==", "bodyText": "Can you check if it works for you now?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430030650", "createdAt": "2020-05-25T17:43:05Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -108,14 +95,17 @@ public AndroidTargetConfiguration( ProcessPaths paths, InternalProjectConfigurat\n \n         Path clangguess = Paths.get(this.ndk, \"toolchains\", \"llvm\", \"prebuilt\", hostPlatformFolder, \"bin\", \"clang\");\n         this.clang = Files.exists(clangguess) ? clangguess : null;\n+        if (projectConfiguration.getGraalVersion().compareTo(new Version(\"20.1.0\")) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMjcwMA=="}, "originalCommit": {"oid": "0151ffbd7da92195627c14a4ffb7847bdd45aa92"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODYzMzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxOTowNDoxMlrOGaIJSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo1MDoyOVrOGaJebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTYwOQ==", "bodyText": "Use toLowerCase(Locale.ROOT).\nCan you also check if Files.exists(generatedApk) before copying it to gvm? In case, for any reason, the process ends successfully but the apk file is not found?", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430049609", "createdAt": "2020-05-25T19:04:12Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -127,23 +123,32 @@ public boolean packageApp() throws IOException, InterruptedException {\n         prepareAndroidResources();\n         copyOtherDalvikClasses();\n         copySubstrateLibraries();\n-        generateSigningConfiguration();\n+        String configuration = generateSigningConfiguration();\n \n         ProcessRunner assembleDebug = new ProcessRunner(\n                             getAndroidProjectPath().resolve(\"gradlew\").toString(),\n                             \"-p\", getAndroidProjectPath().toString(),\n-                            \"assembleDebug\");\n+                            \"assemble\" + configuration);\n         assembleDebug.addToEnv(\"ANDROID_HOME\", sdk);\n         assembleDebug.addToEnv(\"JAVA_HOME\", projectConfiguration.getGraalPath().toString());\n-        return assembleDebug.runProcess(\"package-task\") == 0;\n+        if (assembleDebug.runProcess(\"package-task\") != 0) {\n+            return false;\n+        }\n+        Path generatedApk = getAndroidProjectPath().resolve(\"app\").resolve(\"build\")\n+                            .resolve(\"outputs\").resolve(\"apk\").resolve(configuration.toLowerCase())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1189f8571bad4400efbf4651f2255aa2789667a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3MTQwNQ==", "bodyText": "Should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430071405", "createdAt": "2020-05-25T20:50:29Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -127,23 +123,32 @@ public boolean packageApp() throws IOException, InterruptedException {\n         prepareAndroidResources();\n         copyOtherDalvikClasses();\n         copySubstrateLibraries();\n-        generateSigningConfiguration();\n+        String configuration = generateSigningConfiguration();\n \n         ProcessRunner assembleDebug = new ProcessRunner(\n                             getAndroidProjectPath().resolve(\"gradlew\").toString(),\n                             \"-p\", getAndroidProjectPath().toString(),\n-                            \"assembleDebug\");\n+                            \"assemble\" + configuration);\n         assembleDebug.addToEnv(\"ANDROID_HOME\", sdk);\n         assembleDebug.addToEnv(\"JAVA_HOME\", projectConfiguration.getGraalPath().toString());\n-        return assembleDebug.runProcess(\"package-task\") == 0;\n+        if (assembleDebug.runProcess(\"package-task\") != 0) {\n+            return false;\n+        }\n+        Path generatedApk = getAndroidProjectPath().resolve(\"app\").resolve(\"build\")\n+                            .resolve(\"outputs\").resolve(\"apk\").resolve(configuration.toLowerCase())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTYwOQ=="}, "originalCommit": {"oid": "c1189f8571bad4400efbf4651f2255aa2789667a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTU5MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowMTo0MVrOGaREgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowMTo0MVrOGaREgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NTg0MA==", "bodyText": "This would be better in a separate PR, as it affects all platforms.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430195840", "createdAt": "2020-05-26T07:01:41Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -89,7 +89,8 @@\n             \"-H:+AddAllCharsets\",\n             \"-H:+ReportExceptionStackTraces\",\n             \"-H:-DeadlockWatchdogExitOnTimeout\",\n-            \"-H:DeadlockWatchdogInterval=0\"\n+            \"-H:DeadlockWatchdogInterval=0\",\n+            \"-H:+RemoveSaturatedTypeFlows\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f22bb09f553a9731e54ddff1fa88a8660cb389"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYwMjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNTowOVrOGaRKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNTowOVrOGaRKkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NzM5NA==", "bodyText": "/native/android/android_project can be a constant (error-prone to spell it)", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430197394", "createdAt": "2020-05-26T07:05:09Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -532,86 +389,61 @@ private int sign(Path buildToolsPath, String alignedApk) throws IOException, Int\n     private Path getCapCacheDir() throws IOException {\n         Path capPath = paths.getGvmPath().resolve(\"capcache\");\n         if (!Files.exists(capPath)) {\n-            Files.createDirectory(capPath);\n-        }\n-        for (String cap : capFiles) {\n-            FileOps.copyResource(capLocation+cap, capPath.resolve(cap));\n+            FileOps.copyDirectoryFromResources(capLocation, capPath);\n         }\n         return capPath;\n     }\n \n-    private Path createDevelopKeystore() throws IOException, InterruptedException {\n-        Path keystore = Constants.USER_SUBSTRATE_PATH.resolve(Constants.ANDROID_KEYSTORE);\n-\n-        if (Files.exists(keystore)) {\n-            Logger.logDebug(\"The \" + Constants.ANDROID_KEYSTORE + \" file already exists, skipping\");\n-            return keystore;\n-        }\n-\n-        int processResult;\n-\n-        ProcessRunner generateTestKey = new ProcessRunner(\"keytool\", \"-genkey\", \"-v\", \"-keystore\", keystore.toString(), \"-storepass\",\n-                DEFAULT_DEBUG_KEY_STORE_PASSWORD, \"-alias\", DEFAULT_DEBUG_KEY_ALIAS, \"-keypass\", DEFAULT_DEBUG_KEY_ALIAS_PASSWORD, \"-keyalg\", \"RSA\", \"-keysize\", \"2048\", \"-validity\", \"10000\", \"-dname\", \"CN=Android Debug,O=Android,C=US\", \"-noprompt\");\n-        processResult = generateTestKey.runProcess(\"generateTestKey\");\n-        if (processResult != 0) {\n-            throw new IllegalArgumentException(\"fatal, can not create a keystore\");\n-        }\n-\n-        Logger.logDebug(\"Done creating \" + Constants.ANDROID_KEYSTORE);\n-        return keystore;\n-    }\n-\n-    private String findLatestBuildTool(Path sdkPath) throws IOException {\n-        Objects.requireNonNull(sdkPath);\n-        Path buildToolsPath = sdkPath.resolve(\"build-tools\");\n-        if (Files.exists(buildToolsPath)) {\n-            return Files.walk(buildToolsPath, 1)\n-                    .filter(file -> Files.isDirectory(file) && !file.equals(buildToolsPath))\n-                    .map(file -> new Version(file.getFileName().toString()))\n-                    .max(Version::compareTo)\n-                    .map(Version::toString)\n-                    .orElseThrow(BuildToolNotFoundException::new);\n+    /*\n+     * Copies the Android project from the jar resource and stores it in\n+     * a directory. Return that directory\n+     */\n+    private Path prepareAndroidProject() throws IOException {\n+        Path androidProject = getAndroidProjectPath();\n+        if (Files.exists(androidProject)) {\n+            FileOps.deleteDirectory(androidProject);\n         }\n-        throw new BuildToolNotFoundException();\n+        FileOps.copyDirectoryFromResources(\"/native/android/android_project\", androidProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f22bb09f553a9731e54ddff1fa88a8660cb389"}, "originalPosition": 535}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTgwNTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/Constants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozODo0MVrOGam3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo0Mjo0MlrOGapSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MzAwNg==", "bodyText": "Unused constants, first one can be used in prepareAndroidManifest. Second one can be removed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430553006", "createdAt": "2020-05-26T16:38:41Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379e252096a95e6337aeae94f69113f4905ea2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MjUyOQ==", "bodyText": "Manifest uses package name with dots as placeholder, so I removed this completely", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430592529", "createdAt": "2020-05-26T17:42:42Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MzAwNg=="}, "originalCommit": {"oid": "39379e252096a95e6337aeae94f69113f4905ea2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTgzMDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0MzowM1rOGanHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo0MTo0N1rOGapP2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Njk0Nw==", "bodyText": "Can you refactor the path /native/android/ to one constant, and then only the name to another one? There are few uses for the former and also for the latter.", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430556947", "createdAt": "2020-05-26T16:43:03Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";\n+    public static final String DALVIK_PROJECT_PATH = \"/native/android/android_project\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39379e252096a95e6337aeae94f69113f4905ea2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MTk2Mg==", "bodyText": "Fixed", "url": "https://github.com/gluonhq/substrate/pull/612#discussion_r430591962", "createdAt": "2020-05-26T17:41:47Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/Constants.java", "diffHunk": "@@ -138,6 +139,7 @@\n     public static final String DALVIK_PRECOMPILED_CLASSES = \"/precompiled/classes/\";\n     public static final String DALVIK_ACTIVITY_PACKAGE = \"com/gluonhq/helloandroid/\";\n     public static final String DALVIK_JAVAFX_PACKAGE = \"javafx/scene/input/\";\n+    public static final String DALVIK_PROJECT_PATH = \"/native/android/android_project\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1Njk0Nw=="}, "originalCommit": {"oid": "39379e252096a95e6337aeae94f69113f4905ea2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2910, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}