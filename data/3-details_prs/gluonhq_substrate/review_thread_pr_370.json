{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjU3MjA5", "number": 370, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDoxMDowN1rODhdwuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDoxMDowN1rODhdwuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDE3MjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDoxMDowN1rOFsNbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozODoyN1rOFsRx_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTY0Mw==", "bodyText": "why 24G? Wouldn't it depend on the user's machine? Maybe we need some system property to set it?", "url": "https://github.com/gluonhq/substrate/pull/370#discussion_r381901643", "createdAt": "2020-02-20T10:10:07Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -132,6 +132,8 @@ public boolean compile(String cp) throws IOException, InterruptedException {\n         }\n         compileRunner.addArg(\"--report-unsupported-elements-at-runtime\");\n         compileRunner.addArg(\"-Djdk.internal.lambda.eagerlyInitialize=false\");\n+        compileRunner.addArg(\"--no-server\");\n+        compileRunner.addArg(\"-J-Xmx24G\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42378f3a68bc3c9bee5f70303d7ff17dd1c5ea8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwODE2OQ==", "bodyText": "I'm ok with a system property that, if set, can overrule this value. But we still need a default.\n@lazar-mitrovic do you think 24G is an ok default?", "url": "https://github.com/gluonhq/substrate/pull/370#discussion_r381908169", "createdAt": "2020-02-20T10:21:49Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -132,6 +132,8 @@ public boolean compile(String cp) throws IOException, InterruptedException {\n         }\n         compileRunner.addArg(\"--report-unsupported-elements-at-runtime\");\n         compileRunner.addArg(\"-Djdk.internal.lambda.eagerlyInitialize=false\");\n+        compileRunner.addArg(\"--no-server\");\n+        compileRunner.addArg(\"-J-Xmx24G\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTY0Mw=="}, "originalCommit": {"oid": "a42378f3a68bc3c9bee5f70303d7ff17dd1c5ea8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MjA0NQ==", "bodyText": "I had issues when building on older llvm with graalpython included, where I had to bump it to > 40G (with swap enabled).\nIf you look at SubstrateVM's source it is clamped down to 80% of user memory, so maybe bumping this up to something crazy high like 128G wouldn't be a bad idea.", "url": "https://github.com/gluonhq/substrate/pull/370#discussion_r381972045", "createdAt": "2020-02-20T12:36:14Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -132,6 +132,8 @@ public boolean compile(String cp) throws IOException, InterruptedException {\n         }\n         compileRunner.addArg(\"--report-unsupported-elements-at-runtime\");\n         compileRunner.addArg(\"-Djdk.internal.lambda.eagerlyInitialize=false\");\n+        compileRunner.addArg(\"--no-server\");\n+        compileRunner.addArg(\"-J-Xmx24G\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTY0Mw=="}, "originalCommit": {"oid": "a42378f3a68bc3c9bee5f70303d7ff17dd1c5ea8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mjk5MQ==", "bodyText": "Or omitting Xmx since docs state that using only --no-server would:\nIf you run with --no-server option, you will get the whole 80% of what is reported as physical RAM as the baseline. This mode respects -Xmx arguments additionally.", "url": "https://github.com/gluonhq/substrate/pull/370#discussion_r381972991", "createdAt": "2020-02-20T12:38:27Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -132,6 +132,8 @@ public boolean compile(String cp) throws IOException, InterruptedException {\n         }\n         compileRunner.addArg(\"--report-unsupported-elements-at-runtime\");\n         compileRunner.addArg(\"-Djdk.internal.lambda.eagerlyInitialize=false\");\n+        compileRunner.addArg(\"--no-server\");\n+        compileRunner.addArg(\"-J-Xmx24G\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTY0Mw=="}, "originalCommit": {"oid": "a42378f3a68bc3c9bee5f70303d7ff17dd1c5ea8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2967, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}