{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNTY2ODU2", "number": 849, "title": "#813 list classpath deps relative to a temp folder", "bodyText": "Fixes #813\nAll classpath dependencies are first copied to a temporary folder. Then the pathing jar is created in the parent folder of that temporary folder. The Class-Path manifest entry of the pathing jar is then constructed by using the relative location of the copied dependencies. Any directories on the classpath are also resolved relatively against the location of the pathing jar.", "createdAt": "2020-12-04T14:24:40Z", "url": "https://github.com/gluonhq/substrate/pull/849", "merged": true, "mergeCommit": {"oid": "0b2568dd1960c7005c3821ee7a6d6f7fc7d92f9a"}, "closed": true, "closedAt": "2020-12-07T09:04:18Z", "author": {"login": "tiainen"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi4eYsAH2gAyNTMyNTY2ODU2OmJjMWEzYThkZjA2M2Y4YjczZTgzNzk4YThjYTNjYWEyMjM4Yzk4ZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjxuV2gFqTU0NTk0NDE3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc1a3a8df063f8b73e83798a8ca3caa2238c98d6", "author": {"user": {"login": "tiainen", "name": "Joeri Sykora"}}, "url": "https://github.com/gluonhq/substrate/commit/bc1a3a8df063f8b73e83798a8ca3caa2238c98d6", "committedDate": "2020-12-04T14:18:32Z", "message": "#813 list classpath deps relative to a temp folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1", "author": {"user": {"login": "tiainen", "name": "Joeri Sykora"}}, "url": "https://github.com/gluonhq/substrate/commit/ee6169c2351212850f0844bd73a6e06d169595d1", "committedDate": "2020-12-04T14:47:46Z", "message": "#813 ensure tmpPath directory exists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzUxMDQz", "url": "https://github.com/gluonhq/substrate/pull/849#pullrequestreview-545751043", "createdAt": "2020-12-06T21:43:43Z", "commit": {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo0Mzo0M1rOIAP0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTo1NToyMFrOIAP8gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMDE4OA==", "bodyText": "Shouldn't we delete tmpPath if exits before?", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537130188", "createdAt": "2020-12-06T21:43:43Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMTc5NA==", "bodyText": "Use File.separator?", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537131794", "createdAt": "2020-12-06T21:53:09Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);\n+\n+        String manifestClasspath = generateClasspathFromTemporaryFolder(tmpPath, classpath);\n+        Logger.logDebug(\"Class-Path manifest entry for pathing jar: \" + manifestClasspath);\n+\n         Manifest manifest = new Manifest();\n         Attributes attributes = manifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attributes.put(Attributes.Name.CLASS_PATH,\n-                classpath.replaceAll(File.pathSeparator, \" \"));\n-        File jarFile = File.createTempFile(\"classpathJar\", \".jar\");\n+        attributes.put(Attributes.Name.CLASS_PATH, manifestClasspath);\n+\n+        File jarFile = tmpPath.resolve(\"classpathJar.jar\").toFile();\n         try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), manifest)) {\n             jos.putNextEntry(new ZipEntry(\"META-INF/\"));\n         }\n         Logger.logDebug(\"Pathing jar created at \" + jarFile);\n         return jarFile.getAbsolutePath();\n     }\n \n+    /**\n+     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n+     * temporary path. It then returns a space separated string containing each classpath entry as\n+     * relative to the provided temporary path.\n+     */\n+    private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n+        Path depsPath = tmpPath.resolve(\"deps\");\n+\n+        String[] classpathEntries = classpath.split(File.pathSeparator);\n+\n+        Stream<String> convertedDirectories = Arrays.stream(classpathEntries)\n+                .map(Path::of)\n+                .filter(Files::isDirectory)\n+                .map(sourceDir -> tmpPath.toAbsolutePath().relativize(sourceDir).toString());\n+\n+        Stream<String> convertedFiles = Arrays.stream(classpathEntries)\n+                .map(Path::of)\n+                .filter(Files::isRegularFile)\n+                .map(sourceFile -> copyFile(sourceFile, depsPath.resolve(sourceFile.getFileName())))\n+                .map(destFile -> \"deps/\" + destFile.getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEzMjE2MA==", "bodyText": "Probably better to create a constant for \"deps\"?", "url": "https://github.com/gluonhq/substrate/pull/849#discussion_r537132160", "createdAt": "2020-12-06T21:55:20Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/util/FileOps.java", "diffHunk": "@@ -675,27 +675,64 @@ public static void downloadAndUnzip(String sourceUrl, Path destPath, String file\n     }\n \n     /**\n-     * Shorten the Java classpath with a pathing jar\n+     * Shorten the Java classpath with a pathing jar. This works by creating a temporary\n+     * empty jar file where the full classpath is defined in its Class-Path entry in\n+     * the manifest. All files on the classpath will be copied to the same temporary\n+     * folder, while all directories will be resolved relatively against that temporary\n+     * folder. The Class-Path entry will ultimately contain all classpath elements as a\n+     * reference that is relative to the pathing jar.\n+     *\n      * @param classpath A string with the classpath of files that will be added to the\n      *                 pathing jar Class-Path attribute\n      * @return a String with the path to the created pathing jar\n      * @throws IOException\n      */\n-    public static String createPathingJar(String classpath) throws IOException {\n+    public static String createPathingJar(Path tmpPath, String classpath) throws IOException {\n         Objects.requireNonNull(classpath);\n+\n+        Files.createDirectories(tmpPath);\n+\n+        String manifestClasspath = generateClasspathFromTemporaryFolder(tmpPath, classpath);\n+        Logger.logDebug(\"Class-Path manifest entry for pathing jar: \" + manifestClasspath);\n+\n         Manifest manifest = new Manifest();\n         Attributes attributes = manifest.getMainAttributes();\n         attributes.put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        attributes.put(Attributes.Name.CLASS_PATH,\n-                classpath.replaceAll(File.pathSeparator, \" \"));\n-        File jarFile = File.createTempFile(\"classpathJar\", \".jar\");\n+        attributes.put(Attributes.Name.CLASS_PATH, manifestClasspath);\n+\n+        File jarFile = tmpPath.resolve(\"classpathJar.jar\").toFile();\n         try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile), manifest)) {\n             jos.putNextEntry(new ZipEntry(\"META-INF/\"));\n         }\n         Logger.logDebug(\"Pathing jar created at \" + jarFile);\n         return jarFile.getAbsolutePath();\n     }\n \n+    /**\n+     * Copies all files in the classpath to the subfolder called <code>deps</code> under the provided\n+     * temporary path. It then returns a space separated string containing each classpath entry as\n+     * relative to the provided temporary path.\n+     */\n+    private static String generateClasspathFromTemporaryFolder(Path tmpPath, String classpath) {\n+        Path depsPath = tmpPath.resolve(\"deps\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee6169c2351212850f0844bd73a6e06d169595d1"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "author": {"user": {"login": "tiainen", "name": "Joeri Sykora"}}, "url": "https://github.com/gluonhq/substrate/commit/0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446", "committedDate": "2020-12-07T07:33:57Z", "message": "use constants"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTQ0MTcw", "url": "https://github.com/gluonhq/substrate/pull/849#pullrequestreview-545944170", "createdAt": "2020-12-07T09:00:33Z", "commit": {"oid": "0ecb6f46eec05fbeb70ce1abad4f8f44ad0bf446"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2023, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}