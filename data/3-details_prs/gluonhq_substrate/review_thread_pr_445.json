{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4ODc4Mjgx", "number": 445, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNzoxNlrODoWM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MDo1OFrODoZK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjMzMzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNzoxNlrOF21sLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0NTo1M1rOF26RbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NzA4Nw==", "bodyText": "Why +2 here?", "url": "https://github.com/gluonhq/substrate/pull/445#discussion_r393047087", "createdAt": "2020-03-16T14:07:16Z", "author": {"login": "tiainen"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -380,12 +392,43 @@ private int compileDalvikCode(String androidSrc, String androidJar) throws IOExc\n         ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n                 \"-d\", getApkClassPath().toString(),\n                 \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString(),\n+                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassPath().toString(),\n                 \"-bootclasspath\", androidJar);\n         processRunner.addArgs(sources);\n         return processRunner.runProcess(\"dalvikCompilation\");\n     }\n \n+    /**\n+     * Walks through the jars in the classpath, excluding the JavaFX ones,\n+     * and looks for META-INF/substrate/dalvik/*.class files.\n+     *\n+     * The method will copy all the class files found into the target folder\n+     *\n+     * @throws IOException\n+     */\n+    private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n+        Path targetFolder = getApkClassPath();\n+        Logger.logDebug(\"Scanning for dalvik classes\");\n+        final List<File> jars = new ClassPath(projectConfiguration.getClasspath()).getJars(true);\n+        String prefix = META_INF_SUBSTRATE_DALVIK + DALVIK_PRECOMPILED_CLASS;\n+        for (File jar : jars) {\n+            try (ZipFile zip = new ZipFile(jar)) {\n+                Logger.logDebug(\"Scanning \" + jar);\n+                for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n+                    ZipEntry zipEntry = (ZipEntry) e.nextElement();\n+                    String name = zipEntry.getName();\n+                    if (!zipEntry.isDirectory() && name.startsWith(META_INF_SUBSTRATE_DALVIK)) {\n+                        Path classPath = targetFolder.resolve(name.substring(prefix.length() + 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e074b4d1153472262cf870705a945f0fec4fbf6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA1MDE2Ng==", "bodyText": "+1 gives \"/com/gluonhq/helloandroid...\", so resolving \"/\" goes to root and doesn't take into account targetFolder. Adding +2 removes \"/\" and gives \"$targetFolder/com/gluonhq...\".", "url": "https://github.com/gluonhq/substrate/pull/445#discussion_r393050166", "createdAt": "2020-03-16T14:11:52Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -380,12 +392,43 @@ private int compileDalvikCode(String androidSrc, String androidJar) throws IOExc\n         ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n                 \"-d\", getApkClassPath().toString(),\n                 \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString(),\n+                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassPath().toString(),\n                 \"-bootclasspath\", androidJar);\n         processRunner.addArgs(sources);\n         return processRunner.runProcess(\"dalvikCompilation\");\n     }\n \n+    /**\n+     * Walks through the jars in the classpath, excluding the JavaFX ones,\n+     * and looks for META-INF/substrate/dalvik/*.class files.\n+     *\n+     * The method will copy all the class files found into the target folder\n+     *\n+     * @throws IOException\n+     */\n+    private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n+        Path targetFolder = getApkClassPath();\n+        Logger.logDebug(\"Scanning for dalvik classes\");\n+        final List<File> jars = new ClassPath(projectConfiguration.getClasspath()).getJars(true);\n+        String prefix = META_INF_SUBSTRATE_DALVIK + DALVIK_PRECOMPILED_CLASS;\n+        for (File jar : jars) {\n+            try (ZipFile zip = new ZipFile(jar)) {\n+                Logger.logDebug(\"Scanning \" + jar);\n+                for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n+                    ZipEntry zipEntry = (ZipEntry) e.nextElement();\n+                    String name = zipEntry.getName();\n+                    if (!zipEntry.isDirectory() && name.startsWith(META_INF_SUBSTRATE_DALVIK)) {\n+                        Path classPath = targetFolder.resolve(name.substring(prefix.length() + 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NzA4Nw=="}, "originalCommit": {"oid": "7e074b4d1153472262cf870705a945f0fec4fbf6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTI4Ng==", "bodyText": "I still don't understand. The value of prefix is META-INF/substrate/dalvik/precompiled/class/. And the name of a zip entry would be META-INF/substrate/dalvik/precompiled/class/com/hello/MyClass.class. This means that name.substring(prefix.length() + 2) results in the value m/hello/MyClass.class?", "url": "https://github.com/gluonhq/substrate/pull/445#discussion_r393115286", "createdAt": "2020-03-16T15:36:17Z", "author": {"login": "tiainen"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -380,12 +392,43 @@ private int compileDalvikCode(String androidSrc, String androidJar) throws IOExc\n         ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n                 \"-d\", getApkClassPath().toString(),\n                 \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString(),\n+                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassPath().toString(),\n                 \"-bootclasspath\", androidJar);\n         processRunner.addArgs(sources);\n         return processRunner.runProcess(\"dalvikCompilation\");\n     }\n \n+    /**\n+     * Walks through the jars in the classpath, excluding the JavaFX ones,\n+     * and looks for META-INF/substrate/dalvik/*.class files.\n+     *\n+     * The method will copy all the class files found into the target folder\n+     *\n+     * @throws IOException\n+     */\n+    private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n+        Path targetFolder = getApkClassPath();\n+        Logger.logDebug(\"Scanning for dalvik classes\");\n+        final List<File> jars = new ClassPath(projectConfiguration.getClasspath()).getJars(true);\n+        String prefix = META_INF_SUBSTRATE_DALVIK + DALVIK_PRECOMPILED_CLASS;\n+        for (File jar : jars) {\n+            try (ZipFile zip = new ZipFile(jar)) {\n+                Logger.logDebug(\"Scanning \" + jar);\n+                for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n+                    ZipEntry zipEntry = (ZipEntry) e.nextElement();\n+                    String name = zipEntry.getName();\n+                    if (!zipEntry.isDirectory() && name.startsWith(META_INF_SUBSTRATE_DALVIK)) {\n+                        Path classPath = targetFolder.resolve(name.substring(prefix.length() + 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NzA4Nw=="}, "originalCommit": {"oid": "7e074b4d1153472262cf870705a945f0fec4fbf6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyMjE1Ng==", "bodyText": "Should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/445#discussion_r393122156", "createdAt": "2020-03-16T15:45:53Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -380,12 +392,43 @@ private int compileDalvikCode(String androidSrc, String androidJar) throws IOExc\n         ProcessRunner processRunner = new ProcessRunner(projectConfiguration.getGraalPath().resolve(\"bin\").resolve(\"javac\").toString(),\n                 \"-d\", getApkClassPath().toString(),\n                 \"-source\", \"1.7\", \"-target\", \"1.7\",\n-                \"-cp\", getApkAndroidSourcePath().toString(),\n+                \"-cp\", getApkAndroidSourcePath().toString() + File.pathSeparator + getApkClassPath().toString(),\n                 \"-bootclasspath\", androidJar);\n         processRunner.addArgs(sources);\n         return processRunner.runProcess(\"dalvikCompilation\");\n     }\n \n+    /**\n+     * Walks through the jars in the classpath, excluding the JavaFX ones,\n+     * and looks for META-INF/substrate/dalvik/*.class files.\n+     *\n+     * The method will copy all the class files found into the target folder\n+     *\n+     * @throws IOException\n+     */\n+    private void copyOtherDalvikClasses() throws IOException, InterruptedException {\n+        Path targetFolder = getApkClassPath();\n+        Logger.logDebug(\"Scanning for dalvik classes\");\n+        final List<File> jars = new ClassPath(projectConfiguration.getClasspath()).getJars(true);\n+        String prefix = META_INF_SUBSTRATE_DALVIK + DALVIK_PRECOMPILED_CLASS;\n+        for (File jar : jars) {\n+            try (ZipFile zip = new ZipFile(jar)) {\n+                Logger.logDebug(\"Scanning \" + jar);\n+                for (Enumeration e = zip.entries(); e.hasMoreElements(); ) {\n+                    ZipEntry zipEntry = (ZipEntry) e.nextElement();\n+                    String name = zipEntry.getName();\n+                    if (!zipEntry.isDirectory() && name.startsWith(META_INF_SUBSTRATE_DALVIK)) {\n+                        Path classPath = targetFolder.resolve(name.substring(prefix.length() + 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NzA4Nw=="}, "originalCommit": {"oid": "7e074b4d1153472262cf870705a945f0fec4fbf6"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjgyMDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MDo1OFrOF26fxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo1MDo1OFrOF26fxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEyNTgyOQ==", "bodyText": "Rename the method to getApkClassesPath?", "url": "https://github.com/gluonhq/substrate/pull/445#discussion_r393125829", "createdAt": "2020-03-16T15:50:58Z", "author": {"login": "tiainen"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -322,7 +329,7 @@ private Path getApkBinPath() {\n     }\n \n     private Path getApkClassPath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab086f09b9eccf233e0d8e8f8d1cafde9aa805a4"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2990, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}