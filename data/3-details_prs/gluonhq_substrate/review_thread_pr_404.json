{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNzMwMjc4", "number": 404, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNDo0OVrODlXtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0OVrODlkM-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEyMzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNDo0OVrOFyOVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo0Mjo1M1rOFyWMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzg4Ng==", "bodyText": "New API should have a way to be set from SubstrateDispatcher::main as well (via System property).", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388207886", "createdAt": "2020-03-05T10:34:49Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,6 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n+    private boolean usePrecompiledCode = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNjc4OA==", "bodyText": "Is this the right approach?", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388336788", "createdAt": "2020-03-05T14:42:53Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,6 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n+    private boolean usePrecompiledCode = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzg4Ng=="}, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTI4NTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToyNDowNlrOFyP4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxOTozNFrOFyVRFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzI0Mw==", "bodyText": "This means that you copy the sources even for the precompiled case? It is not necessary, is it?", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388233243", "createdAt": "2020-03-05T11:24:06Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -152,16 +159,38 @@ public boolean link() throws IOException, InterruptedException {\n         Files.createDirectories(apkLibPath);\n         Files.createDirectories(apkLibArm64Path);\n         Path androidManifestPath = apkPath.resolve(\"AndroidManifest.xml\");\n-        Path dalvikActivityPackage = apkClassPath.resolve(\"com/gluonhq/helloandroid\");\n-        Path dalvikKeyCodePackage = apkClassPath.resolve(\"javafx/scene/input\");\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity.class\", dalvikActivityPackage.resolve(\"MainActivity.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$1.class\", dalvikActivityPackage.resolve(\"MainActivity$1.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$2.class\", dalvikActivityPackage.resolve(\"MainActivity$2.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$3.class\", dalvikActivityPackage.resolve(\"MainActivity$3.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$InternalSurfaceView.class\", dalvikActivityPackage.resolve(\"MainActivity$InternalSurfaceView.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode.class\", dalvikKeyCodePackage.resolve(\"KeyCode.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode$KeyCodeClass.class\", dalvikKeyCodePackage.resolve(\"KeyCode$KeyCodeClass.class\"));\n \n+        String androidCodeLocation = \"/native/android/dalvik\";\n+\n+        String androidSrc = androidCodeLocation + \"/source/\";\n+        String androidPrecompiled = androidCodeLocation + \"/precompiled/class/\";\n+\n+        if (!Files.isDirectory(apkAndroidSourcePath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMTU1OA==", "bodyText": "I was aiming to provide user an option do modify sources at later time (and then just flip the switch in configuration to recompile it)", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388321558", "createdAt": "2020-03-05T14:19:34Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -152,16 +159,38 @@ public boolean link() throws IOException, InterruptedException {\n         Files.createDirectories(apkLibPath);\n         Files.createDirectories(apkLibArm64Path);\n         Path androidManifestPath = apkPath.resolve(\"AndroidManifest.xml\");\n-        Path dalvikActivityPackage = apkClassPath.resolve(\"com/gluonhq/helloandroid\");\n-        Path dalvikKeyCodePackage = apkClassPath.resolve(\"javafx/scene/input\");\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity.class\", dalvikActivityPackage.resolve(\"MainActivity.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$1.class\", dalvikActivityPackage.resolve(\"MainActivity$1.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$2.class\", dalvikActivityPackage.resolve(\"MainActivity$2.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$3.class\", dalvikActivityPackage.resolve(\"MainActivity$3.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$InternalSurfaceView.class\", dalvikActivityPackage.resolve(\"MainActivity$InternalSurfaceView.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode.class\", dalvikKeyCodePackage.resolve(\"KeyCode.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode$KeyCodeClass.class\", dalvikKeyCodePackage.resolve(\"KeyCode$KeyCodeClass.class\"));\n \n+        String androidCodeLocation = \"/native/android/dalvik\";\n+\n+        String androidSrc = androidCodeLocation + \"/source/\";\n+        String androidPrecompiled = androidCodeLocation + \"/precompiled/class/\";\n+\n+        if (!Files.isDirectory(apkAndroidSourcePath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMzI0Mw=="}, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTMzNTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0MDo1NFrOFyQWNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo0MDoxN1rOFyWF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0MDk0OA==", "bodyText": "I get these warnings compiling the additional sources for Android:\n[SUB] glibc_shim.c:8:23: warning: incompatible pointer types passing 'struct stat64 *' to parameter of type 'struct stat *' >\n[SUB]     return stat(path, stat_buf);\n[SUB]                       ^~~~~~~~\n[SUB] /home/user/.gluon/substrate/Android/ndk-bundle/toolchains/llvm/prebuil>\n[SUB] int stat(const char* __path, struct stat* __buf);\n[SUB]                                           ^\n[SUB] glibc_shim.c:13:24: warning: incompatible pointer types passing 'struct s>\n[SUB]     return lstat(path, stat_buf);\n[SUB]                        ^~~~~~~~\n[SUB] /home/user/.gluon/substrate/Android/ndk-bundle/toolchains/llvm/prebuil>\n[SUB] int lstat(const char* __path, struct stat* __buf);\n[SUB]                                            ^\n[SUB] glibc_shim.c:18:26: warning: incompatible pointer types passing 'struct s>\n[SUB]     return fstat(fildes, stat_buf);\n[SUB]                          ^~~~~~~~\n[SUB] /home/user/.gluon/substrate/Android/ndk-bundle/toolchains/llvm/prebuil>\n[SUB] int fstat(int __fd, struct stat* __buf);\n[SUB]                                  ^\n[SUB] glibc_shim.c:49:30: warning: incompatible pointer to integer conversion p>\n[SUB]     return mknod(path, mode, dev);\n[SUB]                              ^~~\n[SUB]                              *\n[SUB] /home/user/.gluon/substrate/Android/ndk-bundle/toolchains/llvm/prebuil>\n[SUB] int mknod(const char* __path, mode_t __mode, dev_t __dev);\n[SUB]                                                    ^\n[SUB] 4 warnings generated.", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388240948", "createdAt": "2020-03-05T11:40:54Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -322,7 +321,7 @@ protected boolean compileAdditionalSources()\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n         }\n   \n-        int result = processRunner.runProcess(\"compile additional sources\", workDir.toFile());\n+        int result = processRunner.runProcess(\"compile-additional-sources\", workDir.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzNTA2NQ==", "bodyText": "Ouch, it looks like one more bionic quirk (using stat64 everywhere).\nThis should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388335065", "createdAt": "2020-03-05T14:40:17Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AbstractTargetConfiguration.java", "diffHunk": "@@ -322,7 +321,7 @@ protected boolean compileAdditionalSources()\n             FileOps.copyResource(getAdditionalSourceFileLocation()  + fileName, workDir.resolve(fileName));\n         }\n   \n-        int result = processRunner.runProcess(\"compile additional sources\", workDir.toFile());\n+        int result = processRunner.runProcess(\"compile-additional-sources\", workDir.toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0MDk0OA=="}, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM0ODYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0NTowOVrOFyQdzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDoxOTo1OVrOFyVSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjg5Mw==", "bodyText": "Is it me, or is this inverted?", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388242893", "createdAt": "2020-03-05T11:45:09Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -152,16 +159,38 @@ public boolean link() throws IOException, InterruptedException {\n         Files.createDirectories(apkLibPath);\n         Files.createDirectories(apkLibArm64Path);\n         Path androidManifestPath = apkPath.resolve(\"AndroidManifest.xml\");\n-        Path dalvikActivityPackage = apkClassPath.resolve(\"com/gluonhq/helloandroid\");\n-        Path dalvikKeyCodePackage = apkClassPath.resolve(\"javafx/scene/input\");\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity.class\", dalvikActivityPackage.resolve(\"MainActivity.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$1.class\", dalvikActivityPackage.resolve(\"MainActivity$1.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$2.class\", dalvikActivityPackage.resolve(\"MainActivity$2.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$3.class\", dalvikActivityPackage.resolve(\"MainActivity$3.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$InternalSurfaceView.class\", dalvikActivityPackage.resolve(\"MainActivity$InternalSurfaceView.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode.class\", dalvikKeyCodePackage.resolve(\"KeyCode.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode$KeyCodeClass.class\", dalvikKeyCodePackage.resolve(\"KeyCode$KeyCodeClass.class\"));\n \n+        String androidCodeLocation = \"/native/android/dalvik\";\n+\n+        String androidSrc = androidCodeLocation + \"/source/\";\n+        String androidPrecompiled = androidCodeLocation + \"/precompiled/class/\";\n+\n+        if (!Files.isDirectory(apkAndroidSourcePath)) {\n+            for (String srcFile : sourceGlueCode) {\n+                FileOps.copyResource(androidSrc + srcFile + \".java\", apkAndroidSourcePath.resolve(srcFile + \".java\"));\n+            }\n+        }\n+        \n+        if (!projectConfiguration.isUsePrecompiledCode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMTgyMw==", "bodyText": "Yep it is.. Will fix it right away", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388321823", "createdAt": "2020-03-05T14:19:59Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/target/AndroidTargetConfiguration.java", "diffHunk": "@@ -152,16 +159,38 @@ public boolean link() throws IOException, InterruptedException {\n         Files.createDirectories(apkLibPath);\n         Files.createDirectories(apkLibArm64Path);\n         Path androidManifestPath = apkPath.resolve(\"AndroidManifest.xml\");\n-        Path dalvikActivityPackage = apkClassPath.resolve(\"com/gluonhq/helloandroid\");\n-        Path dalvikKeyCodePackage = apkClassPath.resolve(\"javafx/scene/input\");\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity.class\", dalvikActivityPackage.resolve(\"MainActivity.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$1.class\", dalvikActivityPackage.resolve(\"MainActivity$1.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$2.class\", dalvikActivityPackage.resolve(\"MainActivity$2.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$3.class\", dalvikActivityPackage.resolve(\"MainActivity$3.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/MainActivity$InternalSurfaceView.class\", dalvikActivityPackage.resolve(\"MainActivity$InternalSurfaceView.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode.class\", dalvikKeyCodePackage.resolve(\"KeyCode.class\"));\n-        FileOps.copyResource(\"/native/android/dalvik/KeyCode$KeyCodeClass.class\", dalvikKeyCodePackage.resolve(\"KeyCode$KeyCodeClass.class\"));\n \n+        String androidCodeLocation = \"/native/android/dalvik\";\n+\n+        String androidSrc = androidCodeLocation + \"/source/\";\n+        String androidPrecompiled = androidCodeLocation + \"/precompiled/class/\";\n+\n+        if (!Files.isDirectory(apkAndroidSourcePath)) {\n+            for (String srcFile : sourceGlueCode) {\n+                FileOps.copyResource(androidSrc + srcFile + \".java\", apkAndroidSourcePath.resolve(srcFile + \".java\"));\n+            }\n+        }\n+        \n+        if (!projectConfiguration.isUsePrecompiledCode()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjg5Mw=="}, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTM4MTkwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/c/launcher.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1Njo0M1rOFyQyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo1Njo0M1rOFyQyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0ODA3Nw==", "bodyText": "typo", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388248077", "createdAt": "2020-03-05T11:56:43Z", "author": {"login": "jperedadnr"}, "path": "src/main/resources/native/android/c/launcher.c", "diffHunk": "@@ -1,221 +1,122 @@\n-#include <jni.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <unistd.h>\n-#include <pthread.h>\n-\n-\n-#include <errno.h>\n-#include <android/native_window_jni.h>\n #include \"grandroid.h\"\n \n-#define  LOG_TAG \"GraalGluon\"\n-\n-#define  LOGD(ignore, ...)  __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)\n-#define  LOGE(ignore, ...)  __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)\n-\n-extern int *run_main(int argc, char* argv[]);\n-\n-void __attribute__((weak)) androidJfx_requestGlassToRedraw() {}\n-void __attribute__((weak)) androidJfx_setNativeWindow(ANativeWindow* nativeWindow) {}\n-void __attribute__((weak)) androidJfx_setDensity(float nativeDensity) {}\n-void __attribute__((weak)) androidJfx_gotTouchEvent (int count, int* actions, int* ids, int* xs, int* ys, int primary) {}\n-void __attribute__((weak)) androidJfx_gotKeyEvent (int action, int key, jchar* chars, int count, int mods) {}\n-int  __attribute__((weak)) to_jfx_touch_action(int state) { return 0; }\n+extern int *run_main(int argc, char *argv[]);\n \n jclass activityClass;\n jobject activity;\n jmethodID activity_showIME;\n jmethodID activity_hideIME;\n \n-\n JavaVM *androidVM;\n-JNIEnv* androidEnv;\n+JNIEnv *androidEnv;\n ANativeWindow *window;\n jfloat density;\n-char* appDataDir;\n+char *appDataDir;\n \n int start_logger(const char *app_name);\n static int pfd[2];\n static pthread_t thr;\n static const char *tag = \"myapp\";\n-const char * origargs[] = {\n-        \"myapp\",\n-        \"-Djavafx.platform=android\",\n-        \"-Dmonocle.platform=Android\", // used in com.sun.glass.ui.monocle.NativePlatformFactory\n-        \"-Dembedded=monocle\",\n-        \"-Dglass.platform=Monocle\",\n-        \"-Djavafx.verbose=true\",\n-        \"-Dmonocle.input.traceEvents.verbose=true\",\n-        \"-Dprism.verbose=true\"};\n+const char *origargs[] = {\n+    \"myapp\",\n+    \"-Djavafx.platform=android\",\n+    \"-Dmonocle.platform=Android\", // used in com.sun.glass.ui.monocle.NativePlatformFactory\n+    \"-Dembedded=monocle\",\n+    \"-Dglass.platform=Monocle\",\n+    \"-Djavafx.verbose=true\",\n+    \"-Dmonocle.input.traceEvents.verbose=true\",\n+    \"-Dprism.verbose=true\"};\n \n int argsize = 8;\n \n-char** createArgs() {\n-LOGE(stderr, \"CREATE ARGS\");\n-    int origSize = sizeof(origargs)/sizeof(char*);\n-    char** result = malloc((origSize+2)* sizeof(char*));\n-    for (int i = 0; i < origSize; i++) {\n+char **createArgs()\n+{\n+    LOGE(stderr, \"CREATE ARGS\");\n+    int origSize = sizeof(origargs) / sizeof(char *);\n+    char **result = (char **)malloc((origSize + 2) * sizeof(char *));\n+    for (int i = 0; i < origSize; i++)\n+    {\n         result[i] = (char *)origargs[i];\n     }\n-    int tmpArgSize=18+strnlen(appDataDir, 512);\n-    char* tmpArgs = calloc(sizeof(char), tmpArgSize);\n-    strcpy(tmpArgs,\"-Djava.io.tmpdir=\");\n-    strcat(tmpArgs,appDataDir);\n-    result[origSize]=tmpArgs;\n+    int tmpArgSize = 18 + strnlen(appDataDir, 512);\n+    char *tmpArgs = calloc(sizeof(char), tmpArgSize);\n+    strcpy(tmpArgs, \"-Djava.io.tmpdir=\");\n+    strcat(tmpArgs, appDataDir);\n+    result[origSize] = tmpArgs;\n     argsize++;\n-    int userArgSize=13+strnlen(appDataDir, 512);\n-    char* userArgs = calloc(sizeof(char), userArgSize);\n-    strcpy(userArgs,\"-Duser.home=\");\n-    strcat(userArgs,appDataDir);\n-    result[origSize+1]=userArgs;\n+    int userArgSize = 13 + strnlen(appDataDir, 512);\n+    char *userArgs = calloc(sizeof(char), userArgSize);\n+    strcpy(userArgs, \"-Duser.home=\");\n+    strcat(userArgs, appDataDir);\n+    result[origSize + 1] = userArgs;\n     argsize++;\n-LOGE(stderr, \"CREATE ARGS done\");\n+    LOGE(stderr, \"CREATE ARGS done\");\n     return result;\n }\n \n-void registerMethodHandles (JNIEnv *aenv) {\n-    activityClass = (*aenv)->NewGlobalRef(aenv, \n-          (*aenv)->FindClass(aenv, \"com/gluonhq/helloandroid/MainActivity\"));\n+void registerMethodHandles(JNIEnv *aenv)\n+{\n+    activityClass = (*aenv)->NewGlobalRef(aenv,\n+                                          (*aenv)->FindClass(aenv, \"com/gluonhq/helloandroid/MainActivity\"));\n     activity_showIME = (*aenv)->GetStaticMethodID(aenv, activityClass, \"showIME\", \"()V\");\n     activity_hideIME = (*aenv)->GetStaticMethodID(aenv, activityClass, \"hideIME\", \"()V\");\n }\n \n-int JNI_OnLoad(JavaVM *vm, void *reserved) {\n+int JNI_OnLoad(JavaVM *vm, void *reserved)\n+{\n     androidVM = vm;\n-    (*vm)->GetEnv(vm, (void **) &androidEnv, JNI_VERSION_1_6);\n+    (*vm)->GetEnv(vm, (void **)&androidEnv, JNI_VERSION_1_6);\n     registerMethodHandles(androidEnv);\n-    LOGE(stderr, \"AndroidVM called into native, vm = %p, androidEnv = %p\",androidVM, androidEnv);\n+    LOGE(stderr, \"AndroidVM called into native, vm = %p, androidEnv = %p\", androidVM, androidEnv);\n     return JNI_VERSION_1_6;\n }\n \n-// === called from DALVIK. Minize work/dependencies here === // \n+// === called from DALVIK. Minize work/dependencies here === //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f82bc272681b8b005b53faa1c10ba31408bff0f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjI1MjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1Mzo0OVrOFyZKxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowOTozOFrOFykPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NTQ3Nw==", "bodyText": "Probably we want to keep it true (via client plugin main is not called)", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388385477", "createdAt": "2020-03-05T15:53:49Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,7 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n-    private boolean usePrecompiledCode = true;\n+    private boolean usePrecompiledCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7064b8e8a72ab3b9efd7b45f7bde0909c20cb434"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNzE3NA==", "bodyText": "Isn't this equivalent (constructor should always be called, right)?", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388427174", "createdAt": "2020-03-05T16:55:23Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,7 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n-    private boolean usePrecompiledCode = true;\n+    private boolean usePrecompiledCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NTQ3Nw=="}, "originalCommit": {"oid": "7064b8e8a72ab3b9efd7b45f7bde0909c20cb434"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODMyMg==", "bodyText": "Yes, you are right, but we do those settings in SubstrateDispatcher(via main, when running from command line, or gradle tests, or via client-plugin).", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388448322", "createdAt": "2020-03-05T17:29:59Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,7 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n-    private boolean usePrecompiledCode = true;\n+    private boolean usePrecompiledCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NTQ3Nw=="}, "originalCommit": {"oid": "7064b8e8a72ab3b9efd7b45f7bde0909c20cb434"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2Njk0OQ==", "bodyText": "This should be fixed now", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388566949", "createdAt": "2020-03-05T21:09:38Z", "author": {"login": "lazar-mitrovic"}, "path": "src/main/java/com/gluonhq/substrate/ProjectConfiguration.java", "diffHunk": "@@ -48,7 +48,7 @@\n \n     private boolean usePrismSW = false;\n     private boolean verbose = false;\n-    private boolean usePrecompiledCode = true;\n+    private boolean usePrecompiledCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NTQ3Nw=="}, "originalCommit": {"oid": "7064b8e8a72ab3b9efd7b45f7bde0909c20cb434"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE3MDQxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/c/javafx_adapter.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0N1rOFyiJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0N1rOFyiJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjUwOA==", "bodyText": "Issue found: Skipping configuration 'JNI_VERSION_1_8' since the value of 'JNI_VERSION_1_8' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388532508", "createdAt": "2020-03-05T20:03:47Z", "author": {"login": "eugener"}, "path": "src/main/resources/native/android/c/javafx_adapter.c", "diffHunk": "@@ -0,0 +1,96 @@\n+#include \"grandroid.h\"\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSetSurface(JNIEnv *env, jobject activity, jobject surface)\n+{\n+    LOGE(stderr, \"nativeSetSurface called, env at %p and size %ld, surface at %p\\n\", env, sizeof(JNIEnv), surface);\n+    window = ANativeWindow_fromSurface(env, surface);\n+    androidJfx_setNativeWindow(window);\n+    LOGE(stderr, \"native setSurface Ready, native window at %p\\n\", window);\n+}\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSetDataDir(JNIEnv *env, jobject that, jstring jdir)\n+{\n+    const char *cdir = (*env)->GetStringUTFChars(env, jdir, 0);\n+    int len = strnlen(cdir, 512);\n+    appDataDir = (char *)malloc(len + 1);\n+    strcpy(appDataDir, cdir);\n+    LOGE(stderr, \"appDataDir: %s\", appDataDir);\n+}\n+\n+JNIEXPORT jlong JNICALL Java_com_gluonhq_helloandroid_MainActivity_surfaceReady(JNIEnv *env, jobject activity, jobject surface, jfloat mydensity)\n+{\n+    LOGE(stderr, \"SurfaceReady, surface at %p\\n\", surface);\n+    window = ANativeWindow_fromSurface(env, surface);\n+    androidJfx_setNativeWindow(window);\n+    androidJfx_setDensity(mydensity);\n+    LOGE(stderr, \"SurfaceReady, native window at %p\\n\", window);\n+    density = mydensity;\n+    return (jlong)window;\n+}\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSurfaceRedrawNeeded(JNIEnv *env, jobject activity)\n+{\n+    LOGE(stderr, \"launcher, nativeSurfaceRedrawNeeded called. Invoke method on glass_monocle\\n\");\n+    androidJfx_requestGlassToRedraw();\n+}\n+\n+JNIEXPORT jint JNICALL\n+JNI_OnLoad_javafx_font(JavaVM *vm, void *reserved)\n+{\n+    LOGE(stderr, \"In dummy JNI_OnLoad_javafx_font\\n\");\n+#ifdef JNI_VERSION_1_8\n+    //min. returned JNI_VERSION required by JDK8 for builtin libraries\n+    JNIEnv *env;\n+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK)\n+    {\n+        return JNI_VERSION_1_4;\n+    }\n+    return JNI_VERSION_1_8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5006420aa4120de1b9e7684a82c51bb76e204d34"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE3MDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/c/javafx_adapter.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0OFrOFyiJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0OFrOFyiJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjUxNw==", "bodyText": "Issue found: Skipping configuration 'JNI_VERSION_1_8' since the value of 'JNI_VERSION_1_8' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388532517", "createdAt": "2020-03-05T20:03:48Z", "author": {"login": "eugener"}, "path": "src/main/resources/native/android/c/javafx_adapter.c", "diffHunk": "@@ -0,0 +1,96 @@\n+#include \"grandroid.h\"\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSetSurface(JNIEnv *env, jobject activity, jobject surface)\n+{\n+    LOGE(stderr, \"nativeSetSurface called, env at %p and size %ld, surface at %p\\n\", env, sizeof(JNIEnv), surface);\n+    window = ANativeWindow_fromSurface(env, surface);\n+    androidJfx_setNativeWindow(window);\n+    LOGE(stderr, \"native setSurface Ready, native window at %p\\n\", window);\n+}\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSetDataDir(JNIEnv *env, jobject that, jstring jdir)\n+{\n+    const char *cdir = (*env)->GetStringUTFChars(env, jdir, 0);\n+    int len = strnlen(cdir, 512);\n+    appDataDir = (char *)malloc(len + 1);\n+    strcpy(appDataDir, cdir);\n+    LOGE(stderr, \"appDataDir: %s\", appDataDir);\n+}\n+\n+JNIEXPORT jlong JNICALL Java_com_gluonhq_helloandroid_MainActivity_surfaceReady(JNIEnv *env, jobject activity, jobject surface, jfloat mydensity)\n+{\n+    LOGE(stderr, \"SurfaceReady, surface at %p\\n\", surface);\n+    window = ANativeWindow_fromSurface(env, surface);\n+    androidJfx_setNativeWindow(window);\n+    androidJfx_setDensity(mydensity);\n+    LOGE(stderr, \"SurfaceReady, native window at %p\\n\", window);\n+    density = mydensity;\n+    return (jlong)window;\n+}\n+\n+JNIEXPORT void JNICALL Java_com_gluonhq_helloandroid_MainActivity_nativeSurfaceRedrawNeeded(JNIEnv *env, jobject activity)\n+{\n+    LOGE(stderr, \"launcher, nativeSurfaceRedrawNeeded called. Invoke method on glass_monocle\\n\");\n+    androidJfx_requestGlassToRedraw();\n+}\n+\n+JNIEXPORT jint JNICALL\n+JNI_OnLoad_javafx_font(JavaVM *vm, void *reserved)\n+{\n+    LOGE(stderr, \"In dummy JNI_OnLoad_javafx_font\\n\");\n+#ifdef JNI_VERSION_1_8\n+    //min. returned JNI_VERSION required by JDK8 for builtin libraries\n+    JNIEnv *env;\n+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5006420aa4120de1b9e7684a82c51bb76e204d34"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzE3MDUwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/native/android/c/launcher.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0OVrOFyiJLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDowMzo0OVrOFyiJLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzMjUyNw==", "bodyText": "Issue found: Check buffer boundaries if used in a loop including recursive loops (CWE-120, CWE-20).", "url": "https://github.com/gluonhq/substrate/pull/404#discussion_r388532527", "createdAt": "2020-03-05T20:03:49Z", "author": {"login": "eugener"}, "path": "src/main/resources/native/android/c/launcher.c", "diffHunk": "@@ -224,9 +125,11 @@ static void *thread_func()\n {\n     ssize_t rdsz;\n     char buf[128];\n-    while((rdsz = read(pfd[0], buf, sizeof buf - 1)) > 0) {\n-        if(buf[rdsz - 1] == '\\n') --rdsz;\n-        buf[rdsz] = 0;  /* add null-terminator */\n+    while ((rdsz = read(pfd[0], buf, sizeof buf - 1)) > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5006420aa4120de1b9e7684a82c51bb76e204d34"}, "originalPosition": 286}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2975, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}