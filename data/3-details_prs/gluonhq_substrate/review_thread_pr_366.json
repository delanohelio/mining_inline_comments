{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzYzNDc3", "number": 366, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTozODoyMlrODh0XBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjo1MFrODnyTaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Nzg3NDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOTozODoyMlrOFsw6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOTo1NTo0NFrOF0v-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA==", "bodyText": "In this case, should there be some message to the caller that something went wrong?", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382483128", "createdAt": "2020-02-21T09:38:22Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTY4OA==", "bodyText": "There is. In the caller (handed off to printUpdateInstructionsAndFail)\nThe information is summarized, so you get a list of all packages to install, instead of doing repeated failed builds, adding a missing package each time.\nI think it might even be worth calling this code from the checkLinker method, so you get a list of missing OS packages to install, before having waited for the slow compilation step.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382515688", "createdAt": "2020-02-21T10:46:57Z", "author": {"login": "jskov-jyskebank-dk"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNjU3Ng==", "bodyText": "And btw, I think the build timed out because you had a build running at the same time.\nMy plan is to squash the commits and thus trigger a rebuild during the weekend.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r382516576", "createdAt": "2020-02-21T10:49:03Z", "author": {"login": "jskov-jyskebank-dk"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3MDU5MQ==", "bodyText": "@johanvos do I need to do something more to get this landed?", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387470591", "createdAt": "2020-03-04T06:29:25Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyNzQ3MQ==", "bodyText": "@abhinayagarwal is doing a review.\nIn general, I think this is a good step.\nHowever, there is a deeper issue that is unsolved yet, and that has to tackled one day too. The JavaFX SDK will create 3 versions of libavplugin.so: libavplugin-54.so, libavplugin-56.so and libavplugin-57.so. There versions each depend on specific corresponding versions of libavcodec-XX.so. At runtime, if libavplugin-57.so can be loaded (e.g. if libavcodec-57.so is on the system), that one is used. Otherwise, lower versions are tried.\nWe don't have this logic yet in our static builds. But I think this should be dealt with in another issue.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387527471", "createdAt": "2020-03-04T09:00:47Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTA0Mw==", "bodyText": "@jskov but in general, this looks very good!", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387849043", "createdAt": "2020-03-04T18:22:23Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5ODIyMA==", "bodyText": "@johanvos thanks! I will take time to address the last comments in the weekend.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r388098220", "createdAt": "2020-03-05T06:24:07Z", "author": {"login": "jskov-jyskebank-dk"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NjkwNw==", "bodyText": "@johanvos I have pushed a new version which addressed the comments (except for @jperedadnr 's about exception handling).\nThe Travis setup has some problems with stability.\nMy first push failed, I believe because another PR submission was building at the same time.\nI pushed a whitespace-only change and the new build was allowed to run alone and succeeded.\nCheers!", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389366907", "createdAt": "2020-03-08T12:56:19Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0ODkzNg==", "bodyText": "@jskov You say you have pushed new changes? I only see one commit from 21 days ago. Can you verify?", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390848936", "createdAt": "2020-03-11T09:42:54Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1MzE2MQ==", "bodyText": "@jperedadnr\nYes the current diff reflects the changes I made Sunday (e.g.  \"-Wl,--no-whole-archive\" added in LinuxTargetConfiguration.java).\nI flattened the changes into a single commit - and that is probably the original one.\nSorry, did not realize this would happen. Somewhat hides the changes I made along the way.\nBut that was how quarkus people wanted PRs, so I just repeated here. My bad.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390853161", "createdAt": "2020-03-11T09:50:13Z", "author": {"login": "jskov-jyskebank-dk"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1NTA4Ng==", "bodyText": "We usually squash at the end right before merging, otherwise it is hard to see the changes in the revision process.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390855086", "createdAt": "2020-03-11T09:53:33Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg1NjMyOQ==", "bodyText": "Which is the sensible way to do it :) Also what I do at work.\nMy apologies.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390856329", "createdAt": "2020-03-11T09:55:44Z", "author": {"login": "jskov-jyskebank-dk"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ4MzEyOA=="}, "originalCommit": {"oid": "4b3e450525b2b09a16d2d3c3818213aaa2e5be1c"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDg5NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwOToyMzowNVrOFxlhKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1NDozNFrOFzUPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzOTI0Mw==", "bodyText": "I think the -Wl,--no-whole-archive should be here, to clearly close the block of libs we need completely", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387539243", "createdAt": "2020-03-04T09:23:05Z", "author": {"login": "johanvos"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "diffHunk": "@@ -59,18 +58,11 @@\n             \"java\", \"nio\", \"zip\", \"net\", \"prefs\", \"jvm\", \"strictmath\", \"j2pkcs11\", \"sunec\", \"extnet\", \"libchelper\"\n     );\n \n-    private static final List<String> linuxfxlibs = Arrays.asList( \"-Wl,--whole-archive\",\n+    private static final List<String> linuxfxlibs = List.of(\n+            \"-Wl,--whole-archive\",\n             \"-lprism_es2\", \"-lglass\", \"-lglassgtk3\", \"-ljavafx_font\",\n             \"-ljavafx_font_freetype\", \"-ljavafx_font_pango\", \"-ljavafx_iio\",\n-            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\",\n-            \"-Wl,--no-whole-archive\", \"-lGL\", \"-lX11\",\"-lgtk-3\", \"-lgdk-3\",\n-            \"-lpangocairo-1.0\", \"-lpango-1.0\", \"-latk-1.0\",\n-            \"-lcairo-gobject\", \"-lcairo\", \"-lgdk_pixbuf-2.0\",\n-            \"-lgio-2.0\", \"-lgobject-2.0\", \"-lglib-2.0\", \"-lfreetype\",\n-            \"-lpangoft2-1.0\", \"-lgstreamer-lite\",\n-            \"-lgthread-2.0\", \"-lstdc++\", \"-lz\", \"-lXtst\",\n-            \"-lavcodec\", \"-lavformat\", \"-lavutil\",\n-            \"-lasound\", \"-lm\", \"-lgmodule-2.0\"\n+            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzMzOQ==", "bodyText": "added", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353339", "createdAt": "2020-03-08T09:54:34Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxTargetConfiguration.java", "diffHunk": "@@ -59,18 +58,11 @@\n             \"java\", \"nio\", \"zip\", \"net\", \"prefs\", \"jvm\", \"strictmath\", \"j2pkcs11\", \"sunec\", \"extnet\", \"libchelper\"\n     );\n \n-    private static final List<String> linuxfxlibs = Arrays.asList( \"-Wl,--whole-archive\",\n+    private static final List<String> linuxfxlibs = List.of(\n+            \"-Wl,--whole-archive\",\n             \"-lprism_es2\", \"-lglass\", \"-lglassgtk3\", \"-ljavafx_font\",\n             \"-ljavafx_font_freetype\", \"-ljavafx_font_pango\", \"-ljavafx_iio\",\n-            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\",\n-            \"-Wl,--no-whole-archive\", \"-lGL\", \"-lX11\",\"-lgtk-3\", \"-lgdk-3\",\n-            \"-lpangocairo-1.0\", \"-lpango-1.0\", \"-latk-1.0\",\n-            \"-lcairo-gobject\", \"-lcairo\", \"-lgdk_pixbuf-2.0\",\n-            \"-lgio-2.0\", \"-lgobject-2.0\", \"-lglib-2.0\", \"-lfreetype\",\n-            \"-lpangoft2-1.0\", \"-lgstreamer-lite\",\n-            \"-lgthread-2.0\", \"-lstdc++\", \"-lz\", \"-lXtst\",\n-            \"-lavcodec\", \"-lavformat\", \"-lavutil\",\n-            \"-lasound\", \"-lm\", \"-lgmodule-2.0\"\n+            \"-ljfxmedia\", \"-lfxplugins\", \"-lavplugin\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzOTI0Mw=="}, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTE0MTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDozMTo0NlrOFxn55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1NDo0M1rOFzUPgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODM0Mw==", "bodyText": "Missing javadoc", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387578343", "createdAt": "2020-03-04T10:31:46Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzM0NQ==", "bodyText": "added", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353345", "createdAt": "2020-03-08T09:54:43Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODM0Mw=="}, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTI5NDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToxOTozMVrOFxpZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwOTo0Mzo0NVrOF0vjwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg==", "bodyText": "Usually we run the process without try-catch and send the possible exceptions to the caller, mostly if these are somehow critical and the process should stop.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387602812", "createdAt": "2020-03-04T11:19:31Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MTczNw==", "bodyText": "Not possible because I call it from a stream.\nI can use UncheckedIOException instead, if that makes a difference.\nOr rewrite to avoid stream, if you prefer that.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389351737", "createdAt": "2020-03-08T09:31:20Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg=="}, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg0OTQ3Mg==", "bodyText": "Yes, the latter. We have done the same (sadly), moving some streams to for-loops.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r390849472", "createdAt": "2020-03-11T09:43:45Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMjgxMg=="}, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTI5NjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyMDoxM1rOFxpavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1NDo1MlrOFzUPiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzEzMg==", "bodyText": "Remove main?", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387603132", "createdAt": "2020-03-04T11:20:13Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            throw new IllegalStateException(\"Failed to lookup linker flags\", e);\n+        }\n+\n+        List<String> flags = List.of(process.getResponse().trim().split(\" \"));\n+        Logger.logDebug(\"Pkg \" + pkgName + \" provided flags: \" + flags);\n+        return flags;\n+    }\n+\n+    private void printUpdateInstructionsAndFail(List<String> missingPackages) {\n+        String nl = System.lineSeparator();\n+        String nlIndent = nl + \"  \";\n+        String instructions = missingPackages.stream()\n+                .sorted()\n+                .distinct()\n+                .collect(Collectors.joining(nlIndent));\n+\n+        Logger.logInfo(\"Cannot link because some development libraries are missing.\"\n+                + nl + \"Please install OS packages:\"\n+                + nlIndent + instructions);\n+        throw new IllegalStateException(\"Missing linker libraries\");\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzM1NQ==", "bodyText": "done", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r389353355", "createdAt": "2020-03-08T09:54:52Z", "author": {"login": "jskov"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())\n+                .collect(Collectors.toList());\n+\n+        if (!missingPackages.isEmpty()) {\n+            printUpdateInstructionsAndFail(missingPackages);\n+        }\n+\n+        Logger.logDebug(\"All flags: \" + pkgFlags);\n+        return pkgFlags;\n+    }\n+\n+    /**\n+     * Uses pkg-config to lookup linker flags for package.\n+     * \n+     * If pkg-config fails, adds amendment instructions to missingPackages.\n+     */\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+        if (pkgInfo.hardwired != null) {\n+            return List.of(pkgInfo.hardwired);\n+        }\n+\n+        String pkgName = pkgInfo.pkgName;\n+        ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n+        try {\n+            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+                return List.of();\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            throw new IllegalStateException(\"Failed to lookup linker flags\", e);\n+        }\n+\n+        List<String> flags = List.of(process.getResponse().trim().split(\" \"));\n+        Logger.logDebug(\"Pkg \" + pkgName + \" provided flags: \" + flags);\n+        return flags;\n+    }\n+\n+    private void printUpdateInstructionsAndFail(List<String> missingPackages) {\n+        String nl = System.lineSeparator();\n+        String nlIndent = nl + \"  \";\n+        String instructions = missingPackages.stream()\n+                .sorted()\n+                .distinct()\n+                .collect(Collectors.joining(nlIndent));\n+\n+        Logger.logInfo(\"Cannot link because some development libraries are missing.\"\n+                + nl + \"Please install OS packages:\"\n+                + nlIndent + instructions);\n+        throw new IllegalStateException(\"Missing linker libraries\");\n+    }\n+\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzEzMg=="}, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTMwMTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyMTo0N1rOFxpdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMToyMTo0N1rOFxpdkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwMzg1Nw==", "bodyText": "At some point we should cache this check, once all the packages are found, it doesn't make sense to check on every run, does it? It could be done in a follow-up PR, of course.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r387603857", "createdAt": "2020-03-04T11:21:47Z", "author": {"login": "jperedadnr"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.gluonhq.substrate.target.LinuxFlavor.Flavor;\n+import com.gluonhq.substrate.util.Logger;\n+import com.gluonhq.substrate.util.ProcessRunner;\n+\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.activeOf;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.debian;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.fedora;\n+import static com.gluonhq.substrate.target.LinuxLinkerFlags.PkgInfo.hardwired;\n+\n+/**\n+ * Defines linker flags for a given linux flavor (debian/fedora).\n+ */\n+public class LinuxLinkerFlags {\n+    private static final Flavor flavor = new LinuxFlavor().getFlavor();\n+\n+    /**\n+     * Defines per-flavor pkg-config package names and the associated OS package\n+     * name that provides it.\n+     */\n+    private static final List<PkgInfo> LINK_DEPENDENCIES = List.of(\n+        hardwired(\"-Wl,--no-whole-archive\"),\n+\n+        activeOf(debian(\"gl\", \"libgl-dev\"),\n+                 fedora(\"gl\", \"mesa-libGL-devel\")),\n+        activeOf(debian(\"x11\", \"libx11-dev\"),\n+                 fedora(\"x11\", \"libX11-devel\")),\n+        activeOf(debian(\"gtk+-x11-3.0\", \"libgtk-3-dev\"),\n+                 fedora(\"gtk+-3.0\", \"gtk3-devel\")),\n+        activeOf(debian(\"freetype2\", \"libfreetype6-dev\"),\n+                 fedora(\"freetype2\", \"freetype-devel\")),\n+        activeOf(debian(\"pangoft2\", \"libpango1.0-dev\"),\n+                 fedora(\"pangoft2\", \"pango-devel\")),\n+\n+        hardwired(\"-lgstreamer-lite\"),\n+\n+        activeOf(debian(\"gthread-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gthread-2.0\", \"glib2-devel\")),\n+\n+        hardwired(\"-lstdc++\"),\n+        \n+        activeOf(debian(\"zlib\", \"zlib1g-dev\"),\n+                 fedora(\"zlib\", \"zlib-devel\")),\n+\n+        activeOf(debian(\"xtst\", \"libxtst-dev\"),\n+                 fedora(\"xtst\", \"libXtst-devel\")),\n+\n+        // On fedora these require https://rpmfusion.org/\n+        activeOf(debian(\"libavcodec\", \"libavcodec-dev\"),\n+                 fedora(\"libavcodec\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavformat\", \"libavformat-dev\"),\n+                 fedora(\"libavformat\", \"ffmpeg-devel\")),\n+        activeOf(debian(\"libavutil\", \"libavutil-dev\"),\n+                 fedora(\"libavutil\", \"ffmpeg-devel\")),\n+\n+        activeOf(debian(\"alsa\", \"libasound2-dev\"),\n+                 fedora(\"alsa\", \"alsa-lib-devel\")),\n+\n+        hardwired(\"-lm\"),\n+\n+        activeOf(debian(\"gmodule-no-export-2.0\", \"libglib2.0-dev\"),\n+                 fedora(\"gmodule-no-export-2.0\", \"glib2-devel\"))\n+    );\n+\n+    public List<String> getLinkerFlags() {\n+        List<String> missingPackages = new ArrayList<>();\n+\n+        List<String> pkgFlags = LINK_DEPENDENCIES.stream()\n+                .flatMap(pkg -> lookupPackageFlags(pkg, missingPackages).stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55aedf768d1010ec2661e8843ac2d3a0802bb74d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDM4MjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoxNDoxNFrOF1-N_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoxNDoxNFrOF1-N_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEzODIzOQ==", "bodyText": "This method name looks odd to me. A better alternative can be isOSPackageMissing.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392138239", "createdAt": "2020-03-13T10:14:14Z", "author": {"login": "abhinayagarwal"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -127,28 +139,28 @@\n      *\n      * If pkg-config fails, adds amendment instructions to missingPackages.\n      */\n-    private List<String> lookupPackageFlags(PkgInfo pkgInfo, List<String> missingPackages) {\n+    private List<String> lookupPackageFlags(PkgInfo pkgInfo) throws IOException, InterruptedException {\n         if (pkgInfo.hardwired != null) {\n             return List.of(pkgInfo.hardwired);\n         }\n \n         String pkgName = pkgInfo.pkgName;\n         ProcessRunner process = new ProcessRunner(\"/usr/bin/pkg-config\", \"--libs\", pkgName);\n-        try {\n-            if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n-                missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n-                return List.of();\n-            }\n-        } catch (IOException | InterruptedException e) {\n-            throw new IllegalStateException(\"Failed to lookup linker flags\", e);\n+        if (process.runProcess(\"Get config for \" + pkgName) != 0) {\n+            missingPackages.add(pkgInfo.installName + \" (for pkgConfig \" + pkgName + \")\");\n+            return List.of();\n         }\n \n         List<String> flags = List.of(process.getResponse().trim().split(\" \"));\n         Logger.logDebug(\"Pkg \" + pkgName + \" provided flags: \" + flags);\n         return flags;\n     }\n \n-    private void printUpdateInstructionsAndFail(List<String> missingPackages) {\n+    private boolean anyOsPackageIsMissing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQyNzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODozNVrOF1-qQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODozNVrOF1-qQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTQ3NQ==", "bodyText": "A better location for the helper classes would be com.gluonhq.substrate.util.linux. We have all helper files for iOS in a similar directory.", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392145475", "createdAt": "2020-03-13T10:28:35Z", "author": {"login": "abhinayagarwal"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQyODM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODo0OVrOF1-qrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyODo0OVrOF1-qrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NTU4MQ==", "bodyText": "Same goes for this class", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392145581", "createdAt": "2020-03-13T10:28:49Z", "author": {"login": "abhinayagarwal"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxLinkerFlags.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQzMDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyOTo0NVrOF1-sVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDoyOTo0NVrOF1-sVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NjAwNw==", "bodyText": "readOsRelease -> readOSRelease", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392146007", "createdAt": "2020-03-13T10:29:45Z", "author": {"login": "abhinayagarwal"}, "path": "src/main/java/com/gluonhq/substrate/target/LinuxFlavor.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright (c) 2020, Gluon\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL GLUON BE LIABLE FOR ANY\n+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.gluonhq.substrate.target;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Determines flavor of linux from os-release\n+ */\n+public class LinuxFlavor {\n+    private static final Pattern OS_RELEASE_PROPERTY_PATTERN = Pattern.compile(\"([A-Z_-]+)=\\\"?(.+)\\\"?\");\n+\n+    public enum PackagingSystem {\n+        DEB,\n+        RPM\n+    }\n+\n+    public enum Flavor {\n+        DEBIAN(PackagingSystem.DEB),\n+        FEDORA(PackagingSystem.RPM);\n+\n+        private final PackagingSystem packagingSystem;\n+\n+        private Flavor(PackagingSystem packagingSystem) {\n+            this.packagingSystem = packagingSystem;\n+        }\n+\n+        public boolean isDebNaming() {\n+            return packagingSystem == PackagingSystem.DEB;\n+        }\n+\n+        public boolean isRpmNaming() {\n+            return packagingSystem == PackagingSystem.RPM;\n+        }\n+    }\n+    \n+    private LinuxFlavor() {}\n+\n+    /**\n+     * Returns flavor of linux system, based on os-release\n+     *\n+     * @return flavor of linux system\n+     */\n+    public static Flavor getFlavor() {\n+        return new LinuxFlavor().doGetFlavor();\n+    }\n+    \n+    private Flavor doGetFlavor() {\n+        List<String> osReleaseLines = readOsRelease();\n+        if (osReleaseLines.stream().anyMatch(l -> isFedora(l))) {\n+            return Flavor.FEDORA;\n+        }\n+        return Flavor.DEBIAN;\n+    }\n+\n+    private List<String> readOsRelease() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ1MjI1OnYy", "diffSide": "RIGHT", "path": ".travis.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjo1MFrOF1-5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjo1MFrOF1-5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTQyOQ==", "bodyText": "Can you also add this package to our Github Actions configuration file ?", "url": "https://github.com/gluonhq/substrate/pull/366#discussion_r392149429", "createdAt": "2020-03-13T10:36:50Z", "author": {"login": "abhinayagarwal"}, "path": ".travis.yml", "diffHunk": "@@ -29,6 +29,7 @@ matrix:\n             - *global_deps\n             - at-spi2-core\n             - build-essential\n+            - libgl-dev", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9fc80e7b860afbc5f20e04cf1ec8771322af220"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2965, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}