{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDg5MjI5", "number": 281, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo1ODozOVrOE8u-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMjowOVrOE9-jCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTE5NjMyOnYy", "diffSide": "RIGHT", "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo1ODozOVrOH5CDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1NjozNlrOH5rjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NDU4Ng==", "bodyText": "\u0430 \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0442\u0440\u0435\u043b\u044f\u043b\u043e?", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529564586", "createdAt": "2020-11-24T13:58:39Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +30,129 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+\n   private final AgentClient agentClient;\n   private final KeyValueClient kvClient;\n-  private final Registration service;\n-  private final String id;\n-  private final boolean enabled;\n+  private final Supplier<ImmutableRegistration.Builder> serviceTemplate;\n+  private final KVCache kvCache;\n+\n+  private final String serviceId;\n+  private final String hostName;\n+  private final boolean registrationEnabled;\n+  private final String weightPath;\n+  private final int warningDivider;\n   private final long sleepAfterDeregisterMillis;\n \n   public ConsulService(AgentClient agentClient, KeyValueClient kvClient,\n                        FileSettings fileSettings, String hostName, AppMetadata appMetadata,\n                        @Nullable LogLevelOverrideExtension logLevelOverrideExtension) {\n+    var applicationPort = fileSettings.getInteger(JettySettingsConstants.JETTY_PORT);\n+    this.hostName = hostName;\n+    this.serviceId = fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY) + \"-\" + this.hostName + \"-\" + applicationPort;\n     this.agentClient = agentClient;\n     this.kvClient = kvClient;\n-    this.sleepAfterDeregisterMillis = fileSettings.getLong(\"consul.wait.after.deregistration.millis\", 300L);\n+    this.weightPath = String.format(\"host/%s/weight\", this.hostName);\n+    this.kvCache = KVCache.newCache(kvClient, weightPath, fileSettings.getInteger(CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY, 10));\n+    this.sleepAfterDeregisterMillis = fileSettings.getLong(WAIT_AFTER_DEREGISTRATION_PROPERTY, 300L);\n+\n+    this.warningDivider = fileSettings.getInteger(WARNING_DIVIDER_PROPERTY, 3);\n+    var applicationHost = fileSettings.getString(CONSUL_CHECK_HOST_PROPERTY, \"127.0.0.1\");\n \n-    var applicationPort = fileSettings.getInteger(\"jetty.port\");\n-    var applicationHost = fileSettings.getString(\"consul.check.host\", \"127.0.0.1\");\n-    var id = fileSettings.getString(\"serviceName\") + \"-\" + hostName + \"-\" + applicationPort;\n-    var tags = new ArrayList<>(fileSettings.getStringList(\"consul.tags\"));\n-    var warningDivider = fileSettings.getInteger(\"consul.check.warningDivider\", 3);\n+    var tags = new ArrayList<>(fileSettings.getStringList(CONSUL_TAGS_PROPERTY));\n     if (logLevelOverrideExtension != null) {\n       tags.add(LOG_LEVEL_OVERRIDE_EXTENSION_TAG);\n     }\n-\n-    Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n+    this.registrationEnabled = fileSettings.getBoolean(CONSUL_REGISTRATION_ENABLED_PROPERTY, fileSettings.getBoolean(\"consul.enabled\", true));\n+    if (registrationEnabled) {\n+      Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n         .http(\"http://\" + applicationHost + \":\" + applicationPort + \"/status\")\n-        .interval(fileSettings.getString(\"consul.check.interval\", \"5s\"))\n-        .timeout(fileSettings.getString(\"consul.check.timeout\", \"5s\"))\n-        .deregisterCriticalServiceAfter(fileSettings.getString(\"consul.deregisterCritical.timeout\", \"10m\"))\n-        .successBeforePassing(fileSettings.getInteger(\"consul.check.successCount\", 2))\n-        .failuresBeforeCritical(fileSettings.getInteger(\"consul.check.failCount\", 2))\n+        .interval(fileSettings.getString(CONSUL_CHECK_INTERVAL_PROPERTY, \"5s\"))\n+        .timeout(fileSettings.getString(CONSUL_CHECK_TIMEOUT_PROPERTY, \"5s\"))\n+        .deregisterCriticalServiceAfter(fileSettings.getString(CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY, \"10m\"))\n+        .successBeforePassing(fileSettings.getInteger(CONSUL_CHECK_SUCCESS_COUNT_PROPERTY, 2))\n+        .failuresBeforeCritical(fileSettings.getInteger(CONSUL_CHECK_FAIL_COUNT_PROPERTY, 2))\n         .build();\n \n-    Optional<String> weight = getWeight(hostName);\n-    int weightForService;\n-    if (weight.isPresent()) {\n-      weightForService = weight.map(Integer::parseInt).get();\n-    } else {\n-      LOGGER.warn(\"No weight present for node:{}\", hostName);\n-      weightForService = DEFAULT_WEIGHT;\n-    }\n-\n-    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weightForService).warning(weightForService / warningDivider).build();\n-\n-    this.service = ImmutableRegistration.builder()\n-        .id(id)\n-        .name(fileSettings.getString(\"serviceName\"))\n+      this.serviceTemplate = () -> ImmutableRegistration.builder()\n+        .id(serviceId)\n+        .name(fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY))\n         .port(applicationPort)\n         .check(regCheck)\n-        .serviceWeights(serviceWeights)\n         .tags(tags)\n-        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()))\n-        .build();\n-\n-    this.id = id;\n-    this.enabled = fileSettings.getBoolean(\"consul.registration.enabled\", fileSettings.getBoolean(\"consul.enabled\", true));\n+        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()));\n+    } else {\n+      this.serviceTemplate = () -> {\n+        throw new IllegalStateException(\"Registration disabled. Template should not be called\");\n+      };\n+    }\n   }\n \n   public void register() {\n-    if (enabled) {\n-      try {\n-        agentClient.register(service);\n-        LOGGER.info(\"Registered consul service: {}\", service);\n-      } catch (RuntimeException ex) {\n-        throw new ConsulServiceException(\"Can't register service in consul\", ex);\n-      }\n+    if (!registrationEnabled) {\n+      LOGGER.info(\"Registration disabled. Skipping\");\n+      return;\n+    }\n+    try {\n+      int weight = getWeightOrDefault(getCurrentWeight());\n+      registerWithWeight(weight);\n+      startCache();\n+      LOGGER.info(\"Registered consul service: {} with weight {} and started cache to track weight changes\", serviceId, weight);\n+    } catch (RuntimeException ex) {\n+      throw new ConsulServiceException(\"Can't register service in consul\", ex);\n     }\n   }\n \n-  Optional<String> getWeight(String hostName){\n-    return kvClient.getValueAsString(String.format(\"host/%s/weight\", hostName));\n+  private void registerWithWeight(int weight) {\n+    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weight).warning(weight / warningDivider).build();\n+    agentClient.register(serviceTemplate.get().serviceWeights(serviceWeights).build());\n+  }\n+\n+  private int getWeightOrDefault(Optional<String> maybeWeight){\n+    return maybeWeight.map(Integer::parseInt).orElseGet(() -> {\n+      LOGGER.info(\"No weight present for node:{}. Setting default value = {}\", hostName, DEFAULT_WEIGHT);\n+      return DEFAULT_WEIGHT;\n+    });\n+  }\n+\n+  private Optional<String> getCurrentWeight() {\n+    return kvClient.getValueAsString(weightPath);\n+  }\n+\n+\n+  private void startCache() {\n+    kvCache.addListener(newValues -> {\n+      if (kvCache.getMap() == null) {\n+        //first cache init", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NTMzNA==", "bodyText": "\u043d\u0443 \u043f\u043e \u043b\u043e\u0433\u0438\u043a\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u044b\u0441\u0442\u0440\u0435\u043b\u0438\u0442\u044c. \u0442\u044b \u0440\u0435\u0433\u0430\u0435\u0448\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0448\u044c \u043a\u0435\u0448 \u0438 \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u0440\u0435\u0433\u0430\u0435\u0448\u044c\u0441\u044f \u0435\u0449\u0435 \u0440\u0430\u0437", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529685334", "createdAt": "2020-11-24T16:02:59Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +30,129 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+\n   private final AgentClient agentClient;\n   private final KeyValueClient kvClient;\n-  private final Registration service;\n-  private final String id;\n-  private final boolean enabled;\n+  private final Supplier<ImmutableRegistration.Builder> serviceTemplate;\n+  private final KVCache kvCache;\n+\n+  private final String serviceId;\n+  private final String hostName;\n+  private final boolean registrationEnabled;\n+  private final String weightPath;\n+  private final int warningDivider;\n   private final long sleepAfterDeregisterMillis;\n \n   public ConsulService(AgentClient agentClient, KeyValueClient kvClient,\n                        FileSettings fileSettings, String hostName, AppMetadata appMetadata,\n                        @Nullable LogLevelOverrideExtension logLevelOverrideExtension) {\n+    var applicationPort = fileSettings.getInteger(JettySettingsConstants.JETTY_PORT);\n+    this.hostName = hostName;\n+    this.serviceId = fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY) + \"-\" + this.hostName + \"-\" + applicationPort;\n     this.agentClient = agentClient;\n     this.kvClient = kvClient;\n-    this.sleepAfterDeregisterMillis = fileSettings.getLong(\"consul.wait.after.deregistration.millis\", 300L);\n+    this.weightPath = String.format(\"host/%s/weight\", this.hostName);\n+    this.kvCache = KVCache.newCache(kvClient, weightPath, fileSettings.getInteger(CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY, 10));\n+    this.sleepAfterDeregisterMillis = fileSettings.getLong(WAIT_AFTER_DEREGISTRATION_PROPERTY, 300L);\n+\n+    this.warningDivider = fileSettings.getInteger(WARNING_DIVIDER_PROPERTY, 3);\n+    var applicationHost = fileSettings.getString(CONSUL_CHECK_HOST_PROPERTY, \"127.0.0.1\");\n \n-    var applicationPort = fileSettings.getInteger(\"jetty.port\");\n-    var applicationHost = fileSettings.getString(\"consul.check.host\", \"127.0.0.1\");\n-    var id = fileSettings.getString(\"serviceName\") + \"-\" + hostName + \"-\" + applicationPort;\n-    var tags = new ArrayList<>(fileSettings.getStringList(\"consul.tags\"));\n-    var warningDivider = fileSettings.getInteger(\"consul.check.warningDivider\", 3);\n+    var tags = new ArrayList<>(fileSettings.getStringList(CONSUL_TAGS_PROPERTY));\n     if (logLevelOverrideExtension != null) {\n       tags.add(LOG_LEVEL_OVERRIDE_EXTENSION_TAG);\n     }\n-\n-    Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n+    this.registrationEnabled = fileSettings.getBoolean(CONSUL_REGISTRATION_ENABLED_PROPERTY, fileSettings.getBoolean(\"consul.enabled\", true));\n+    if (registrationEnabled) {\n+      Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n         .http(\"http://\" + applicationHost + \":\" + applicationPort + \"/status\")\n-        .interval(fileSettings.getString(\"consul.check.interval\", \"5s\"))\n-        .timeout(fileSettings.getString(\"consul.check.timeout\", \"5s\"))\n-        .deregisterCriticalServiceAfter(fileSettings.getString(\"consul.deregisterCritical.timeout\", \"10m\"))\n-        .successBeforePassing(fileSettings.getInteger(\"consul.check.successCount\", 2))\n-        .failuresBeforeCritical(fileSettings.getInteger(\"consul.check.failCount\", 2))\n+        .interval(fileSettings.getString(CONSUL_CHECK_INTERVAL_PROPERTY, \"5s\"))\n+        .timeout(fileSettings.getString(CONSUL_CHECK_TIMEOUT_PROPERTY, \"5s\"))\n+        .deregisterCriticalServiceAfter(fileSettings.getString(CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY, \"10m\"))\n+        .successBeforePassing(fileSettings.getInteger(CONSUL_CHECK_SUCCESS_COUNT_PROPERTY, 2))\n+        .failuresBeforeCritical(fileSettings.getInteger(CONSUL_CHECK_FAIL_COUNT_PROPERTY, 2))\n         .build();\n \n-    Optional<String> weight = getWeight(hostName);\n-    int weightForService;\n-    if (weight.isPresent()) {\n-      weightForService = weight.map(Integer::parseInt).get();\n-    } else {\n-      LOGGER.warn(\"No weight present for node:{}\", hostName);\n-      weightForService = DEFAULT_WEIGHT;\n-    }\n-\n-    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weightForService).warning(weightForService / warningDivider).build();\n-\n-    this.service = ImmutableRegistration.builder()\n-        .id(id)\n-        .name(fileSettings.getString(\"serviceName\"))\n+      this.serviceTemplate = () -> ImmutableRegistration.builder()\n+        .id(serviceId)\n+        .name(fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY))\n         .port(applicationPort)\n         .check(regCheck)\n-        .serviceWeights(serviceWeights)\n         .tags(tags)\n-        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()))\n-        .build();\n-\n-    this.id = id;\n-    this.enabled = fileSettings.getBoolean(\"consul.registration.enabled\", fileSettings.getBoolean(\"consul.enabled\", true));\n+        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()));\n+    } else {\n+      this.serviceTemplate = () -> {\n+        throw new IllegalStateException(\"Registration disabled. Template should not be called\");\n+      };\n+    }\n   }\n \n   public void register() {\n-    if (enabled) {\n-      try {\n-        agentClient.register(service);\n-        LOGGER.info(\"Registered consul service: {}\", service);\n-      } catch (RuntimeException ex) {\n-        throw new ConsulServiceException(\"Can't register service in consul\", ex);\n-      }\n+    if (!registrationEnabled) {\n+      LOGGER.info(\"Registration disabled. Skipping\");\n+      return;\n+    }\n+    try {\n+      int weight = getWeightOrDefault(getCurrentWeight());\n+      registerWithWeight(weight);\n+      startCache();\n+      LOGGER.info(\"Registered consul service: {} with weight {} and started cache to track weight changes\", serviceId, weight);\n+    } catch (RuntimeException ex) {\n+      throw new ConsulServiceException(\"Can't register service in consul\", ex);\n     }\n   }\n \n-  Optional<String> getWeight(String hostName){\n-    return kvClient.getValueAsString(String.format(\"host/%s/weight\", hostName));\n+  private void registerWithWeight(int weight) {\n+    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weight).warning(weight / warningDivider).build();\n+    agentClient.register(serviceTemplate.get().serviceWeights(serviceWeights).build());\n+  }\n+\n+  private int getWeightOrDefault(Optional<String> maybeWeight){\n+    return maybeWeight.map(Integer::parseInt).orElseGet(() -> {\n+      LOGGER.info(\"No weight present for node:{}. Setting default value = {}\", hostName, DEFAULT_WEIGHT);\n+      return DEFAULT_WEIGHT;\n+    });\n+  }\n+\n+  private Optional<String> getCurrentWeight() {\n+    return kvClient.getValueAsString(weightPath);\n+  }\n+\n+\n+  private void startCache() {\n+    kvCache.addListener(newValues -> {\n+      if (kvCache.getMap() == null) {\n+        //first cache init", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NDU4Ng=="}, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDQwNA==", "bodyText": "\u044d\u0445, \u043e\u043d\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442(", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r530244404", "createdAt": "2020-11-25T09:56:36Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +30,129 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+\n   private final AgentClient agentClient;\n   private final KeyValueClient kvClient;\n-  private final Registration service;\n-  private final String id;\n-  private final boolean enabled;\n+  private final Supplier<ImmutableRegistration.Builder> serviceTemplate;\n+  private final KVCache kvCache;\n+\n+  private final String serviceId;\n+  private final String hostName;\n+  private final boolean registrationEnabled;\n+  private final String weightPath;\n+  private final int warningDivider;\n   private final long sleepAfterDeregisterMillis;\n \n   public ConsulService(AgentClient agentClient, KeyValueClient kvClient,\n                        FileSettings fileSettings, String hostName, AppMetadata appMetadata,\n                        @Nullable LogLevelOverrideExtension logLevelOverrideExtension) {\n+    var applicationPort = fileSettings.getInteger(JettySettingsConstants.JETTY_PORT);\n+    this.hostName = hostName;\n+    this.serviceId = fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY) + \"-\" + this.hostName + \"-\" + applicationPort;\n     this.agentClient = agentClient;\n     this.kvClient = kvClient;\n-    this.sleepAfterDeregisterMillis = fileSettings.getLong(\"consul.wait.after.deregistration.millis\", 300L);\n+    this.weightPath = String.format(\"host/%s/weight\", this.hostName);\n+    this.kvCache = KVCache.newCache(kvClient, weightPath, fileSettings.getInteger(CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY, 10));\n+    this.sleepAfterDeregisterMillis = fileSettings.getLong(WAIT_AFTER_DEREGISTRATION_PROPERTY, 300L);\n+\n+    this.warningDivider = fileSettings.getInteger(WARNING_DIVIDER_PROPERTY, 3);\n+    var applicationHost = fileSettings.getString(CONSUL_CHECK_HOST_PROPERTY, \"127.0.0.1\");\n \n-    var applicationPort = fileSettings.getInteger(\"jetty.port\");\n-    var applicationHost = fileSettings.getString(\"consul.check.host\", \"127.0.0.1\");\n-    var id = fileSettings.getString(\"serviceName\") + \"-\" + hostName + \"-\" + applicationPort;\n-    var tags = new ArrayList<>(fileSettings.getStringList(\"consul.tags\"));\n-    var warningDivider = fileSettings.getInteger(\"consul.check.warningDivider\", 3);\n+    var tags = new ArrayList<>(fileSettings.getStringList(CONSUL_TAGS_PROPERTY));\n     if (logLevelOverrideExtension != null) {\n       tags.add(LOG_LEVEL_OVERRIDE_EXTENSION_TAG);\n     }\n-\n-    Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n+    this.registrationEnabled = fileSettings.getBoolean(CONSUL_REGISTRATION_ENABLED_PROPERTY, fileSettings.getBoolean(\"consul.enabled\", true));\n+    if (registrationEnabled) {\n+      Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n         .http(\"http://\" + applicationHost + \":\" + applicationPort + \"/status\")\n-        .interval(fileSettings.getString(\"consul.check.interval\", \"5s\"))\n-        .timeout(fileSettings.getString(\"consul.check.timeout\", \"5s\"))\n-        .deregisterCriticalServiceAfter(fileSettings.getString(\"consul.deregisterCritical.timeout\", \"10m\"))\n-        .successBeforePassing(fileSettings.getInteger(\"consul.check.successCount\", 2))\n-        .failuresBeforeCritical(fileSettings.getInteger(\"consul.check.failCount\", 2))\n+        .interval(fileSettings.getString(CONSUL_CHECK_INTERVAL_PROPERTY, \"5s\"))\n+        .timeout(fileSettings.getString(CONSUL_CHECK_TIMEOUT_PROPERTY, \"5s\"))\n+        .deregisterCriticalServiceAfter(fileSettings.getString(CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY, \"10m\"))\n+        .successBeforePassing(fileSettings.getInteger(CONSUL_CHECK_SUCCESS_COUNT_PROPERTY, 2))\n+        .failuresBeforeCritical(fileSettings.getInteger(CONSUL_CHECK_FAIL_COUNT_PROPERTY, 2))\n         .build();\n \n-    Optional<String> weight = getWeight(hostName);\n-    int weightForService;\n-    if (weight.isPresent()) {\n-      weightForService = weight.map(Integer::parseInt).get();\n-    } else {\n-      LOGGER.warn(\"No weight present for node:{}\", hostName);\n-      weightForService = DEFAULT_WEIGHT;\n-    }\n-\n-    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weightForService).warning(weightForService / warningDivider).build();\n-\n-    this.service = ImmutableRegistration.builder()\n-        .id(id)\n-        .name(fileSettings.getString(\"serviceName\"))\n+      this.serviceTemplate = () -> ImmutableRegistration.builder()\n+        .id(serviceId)\n+        .name(fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY))\n         .port(applicationPort)\n         .check(regCheck)\n-        .serviceWeights(serviceWeights)\n         .tags(tags)\n-        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()))\n-        .build();\n-\n-    this.id = id;\n-    this.enabled = fileSettings.getBoolean(\"consul.registration.enabled\", fileSettings.getBoolean(\"consul.enabled\", true));\n+        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()));\n+    } else {\n+      this.serviceTemplate = () -> {\n+        throw new IllegalStateException(\"Registration disabled. Template should not be called\");\n+      };\n+    }\n   }\n \n   public void register() {\n-    if (enabled) {\n-      try {\n-        agentClient.register(service);\n-        LOGGER.info(\"Registered consul service: {}\", service);\n-      } catch (RuntimeException ex) {\n-        throw new ConsulServiceException(\"Can't register service in consul\", ex);\n-      }\n+    if (!registrationEnabled) {\n+      LOGGER.info(\"Registration disabled. Skipping\");\n+      return;\n+    }\n+    try {\n+      int weight = getWeightOrDefault(getCurrentWeight());\n+      registerWithWeight(weight);\n+      startCache();\n+      LOGGER.info(\"Registered consul service: {} with weight {} and started cache to track weight changes\", serviceId, weight);\n+    } catch (RuntimeException ex) {\n+      throw new ConsulServiceException(\"Can't register service in consul\", ex);\n     }\n   }\n \n-  Optional<String> getWeight(String hostName){\n-    return kvClient.getValueAsString(String.format(\"host/%s/weight\", hostName));\n+  private void registerWithWeight(int weight) {\n+    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weight).warning(weight / warningDivider).build();\n+    agentClient.register(serviceTemplate.get().serviceWeights(serviceWeights).build());\n+  }\n+\n+  private int getWeightOrDefault(Optional<String> maybeWeight){\n+    return maybeWeight.map(Integer::parseInt).orElseGet(() -> {\n+      LOGGER.info(\"No weight present for node:{}. Setting default value = {}\", hostName, DEFAULT_WEIGHT);\n+      return DEFAULT_WEIGHT;\n+    });\n+  }\n+\n+  private Optional<String> getCurrentWeight() {\n+    return kvClient.getValueAsString(weightPath);\n+  }\n+\n+\n+  private void startCache() {\n+    kvCache.addListener(newValues -> {\n+      if (kvCache.getMap() == null) {\n+        //first cache init", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NDU4Ng=="}, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTIwMzEyOnYy", "diffSide": "RIGHT", "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDowMDowNFrOH5CH2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjowMzozNFrOH5JeUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NTY1Ng==", "bodyText": "\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0433\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c \u0432\u0435\u0441\u043e\u043c?", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529565656", "createdAt": "2020-11-24T14:00:04Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +30,129 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+\n   private final AgentClient agentClient;\n   private final KeyValueClient kvClient;\n-  private final Registration service;\n-  private final String id;\n-  private final boolean enabled;\n+  private final Supplier<ImmutableRegistration.Builder> serviceTemplate;\n+  private final KVCache kvCache;\n+\n+  private final String serviceId;\n+  private final String hostName;\n+  private final boolean registrationEnabled;\n+  private final String weightPath;\n+  private final int warningDivider;\n   private final long sleepAfterDeregisterMillis;\n \n   public ConsulService(AgentClient agentClient, KeyValueClient kvClient,\n                        FileSettings fileSettings, String hostName, AppMetadata appMetadata,\n                        @Nullable LogLevelOverrideExtension logLevelOverrideExtension) {\n+    var applicationPort = fileSettings.getInteger(JettySettingsConstants.JETTY_PORT);\n+    this.hostName = hostName;\n+    this.serviceId = fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY) + \"-\" + this.hostName + \"-\" + applicationPort;\n     this.agentClient = agentClient;\n     this.kvClient = kvClient;\n-    this.sleepAfterDeregisterMillis = fileSettings.getLong(\"consul.wait.after.deregistration.millis\", 300L);\n+    this.weightPath = String.format(\"host/%s/weight\", this.hostName);\n+    this.kvCache = KVCache.newCache(kvClient, weightPath, fileSettings.getInteger(CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY, 10));\n+    this.sleepAfterDeregisterMillis = fileSettings.getLong(WAIT_AFTER_DEREGISTRATION_PROPERTY, 300L);\n+\n+    this.warningDivider = fileSettings.getInteger(WARNING_DIVIDER_PROPERTY, 3);\n+    var applicationHost = fileSettings.getString(CONSUL_CHECK_HOST_PROPERTY, \"127.0.0.1\");\n \n-    var applicationPort = fileSettings.getInteger(\"jetty.port\");\n-    var applicationHost = fileSettings.getString(\"consul.check.host\", \"127.0.0.1\");\n-    var id = fileSettings.getString(\"serviceName\") + \"-\" + hostName + \"-\" + applicationPort;\n-    var tags = new ArrayList<>(fileSettings.getStringList(\"consul.tags\"));\n-    var warningDivider = fileSettings.getInteger(\"consul.check.warningDivider\", 3);\n+    var tags = new ArrayList<>(fileSettings.getStringList(CONSUL_TAGS_PROPERTY));\n     if (logLevelOverrideExtension != null) {\n       tags.add(LOG_LEVEL_OVERRIDE_EXTENSION_TAG);\n     }\n-\n-    Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n+    this.registrationEnabled = fileSettings.getBoolean(CONSUL_REGISTRATION_ENABLED_PROPERTY, fileSettings.getBoolean(\"consul.enabled\", true));\n+    if (registrationEnabled) {\n+      Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n         .http(\"http://\" + applicationHost + \":\" + applicationPort + \"/status\")\n-        .interval(fileSettings.getString(\"consul.check.interval\", \"5s\"))\n-        .timeout(fileSettings.getString(\"consul.check.timeout\", \"5s\"))\n-        .deregisterCriticalServiceAfter(fileSettings.getString(\"consul.deregisterCritical.timeout\", \"10m\"))\n-        .successBeforePassing(fileSettings.getInteger(\"consul.check.successCount\", 2))\n-        .failuresBeforeCritical(fileSettings.getInteger(\"consul.check.failCount\", 2))\n+        .interval(fileSettings.getString(CONSUL_CHECK_INTERVAL_PROPERTY, \"5s\"))\n+        .timeout(fileSettings.getString(CONSUL_CHECK_TIMEOUT_PROPERTY, \"5s\"))\n+        .deregisterCriticalServiceAfter(fileSettings.getString(CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY, \"10m\"))\n+        .successBeforePassing(fileSettings.getInteger(CONSUL_CHECK_SUCCESS_COUNT_PROPERTY, 2))\n+        .failuresBeforeCritical(fileSettings.getInteger(CONSUL_CHECK_FAIL_COUNT_PROPERTY, 2))\n         .build();\n \n-    Optional<String> weight = getWeight(hostName);\n-    int weightForService;\n-    if (weight.isPresent()) {\n-      weightForService = weight.map(Integer::parseInt).get();\n-    } else {\n-      LOGGER.warn(\"No weight present for node:{}\", hostName);\n-      weightForService = DEFAULT_WEIGHT;\n-    }\n-\n-    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weightForService).warning(weightForService / warningDivider).build();\n-\n-    this.service = ImmutableRegistration.builder()\n-        .id(id)\n-        .name(fileSettings.getString(\"serviceName\"))\n+      this.serviceTemplate = () -> ImmutableRegistration.builder()\n+        .id(serviceId)\n+        .name(fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY))\n         .port(applicationPort)\n         .check(regCheck)\n-        .serviceWeights(serviceWeights)\n         .tags(tags)\n-        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()))\n-        .build();\n-\n-    this.id = id;\n-    this.enabled = fileSettings.getBoolean(\"consul.registration.enabled\", fileSettings.getBoolean(\"consul.enabled\", true));\n+        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()));\n+    } else {\n+      this.serviceTemplate = () -> {\n+        throw new IllegalStateException(\"Registration disabled. Template should not be called\");\n+      };\n+    }\n   }\n \n   public void register() {\n-    if (enabled) {\n-      try {\n-        agentClient.register(service);\n-        LOGGER.info(\"Registered consul service: {}\", service);\n-      } catch (RuntimeException ex) {\n-        throw new ConsulServiceException(\"Can't register service in consul\", ex);\n-      }\n+    if (!registrationEnabled) {\n+      LOGGER.info(\"Registration disabled. Skipping\");\n+      return;\n+    }\n+    try {\n+      int weight = getWeightOrDefault(getCurrentWeight());\n+      registerWithWeight(weight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NjA5OA==", "bodyText": "\u043d\u0443 \u0441 \u0442\u0435\u043c, \u0447\u0442\u043e \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0435\u043d", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529686098", "createdAt": "2020-11-24T16:03:34Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +30,129 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+\n   private final AgentClient agentClient;\n   private final KeyValueClient kvClient;\n-  private final Registration service;\n-  private final String id;\n-  private final boolean enabled;\n+  private final Supplier<ImmutableRegistration.Builder> serviceTemplate;\n+  private final KVCache kvCache;\n+\n+  private final String serviceId;\n+  private final String hostName;\n+  private final boolean registrationEnabled;\n+  private final String weightPath;\n+  private final int warningDivider;\n   private final long sleepAfterDeregisterMillis;\n \n   public ConsulService(AgentClient agentClient, KeyValueClient kvClient,\n                        FileSettings fileSettings, String hostName, AppMetadata appMetadata,\n                        @Nullable LogLevelOverrideExtension logLevelOverrideExtension) {\n+    var applicationPort = fileSettings.getInteger(JettySettingsConstants.JETTY_PORT);\n+    this.hostName = hostName;\n+    this.serviceId = fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY) + \"-\" + this.hostName + \"-\" + applicationPort;\n     this.agentClient = agentClient;\n     this.kvClient = kvClient;\n-    this.sleepAfterDeregisterMillis = fileSettings.getLong(\"consul.wait.after.deregistration.millis\", 300L);\n+    this.weightPath = String.format(\"host/%s/weight\", this.hostName);\n+    this.kvCache = KVCache.newCache(kvClient, weightPath, fileSettings.getInteger(CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY, 10));\n+    this.sleepAfterDeregisterMillis = fileSettings.getLong(WAIT_AFTER_DEREGISTRATION_PROPERTY, 300L);\n+\n+    this.warningDivider = fileSettings.getInteger(WARNING_DIVIDER_PROPERTY, 3);\n+    var applicationHost = fileSettings.getString(CONSUL_CHECK_HOST_PROPERTY, \"127.0.0.1\");\n \n-    var applicationPort = fileSettings.getInteger(\"jetty.port\");\n-    var applicationHost = fileSettings.getString(\"consul.check.host\", \"127.0.0.1\");\n-    var id = fileSettings.getString(\"serviceName\") + \"-\" + hostName + \"-\" + applicationPort;\n-    var tags = new ArrayList<>(fileSettings.getStringList(\"consul.tags\"));\n-    var warningDivider = fileSettings.getInteger(\"consul.check.warningDivider\", 3);\n+    var tags = new ArrayList<>(fileSettings.getStringList(CONSUL_TAGS_PROPERTY));\n     if (logLevelOverrideExtension != null) {\n       tags.add(LOG_LEVEL_OVERRIDE_EXTENSION_TAG);\n     }\n-\n-    Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n+    this.registrationEnabled = fileSettings.getBoolean(CONSUL_REGISTRATION_ENABLED_PROPERTY, fileSettings.getBoolean(\"consul.enabled\", true));\n+    if (registrationEnabled) {\n+      Registration.RegCheck regCheck = ImmutableRegCheck.builder()\n         .http(\"http://\" + applicationHost + \":\" + applicationPort + \"/status\")\n-        .interval(fileSettings.getString(\"consul.check.interval\", \"5s\"))\n-        .timeout(fileSettings.getString(\"consul.check.timeout\", \"5s\"))\n-        .deregisterCriticalServiceAfter(fileSettings.getString(\"consul.deregisterCritical.timeout\", \"10m\"))\n-        .successBeforePassing(fileSettings.getInteger(\"consul.check.successCount\", 2))\n-        .failuresBeforeCritical(fileSettings.getInteger(\"consul.check.failCount\", 2))\n+        .interval(fileSettings.getString(CONSUL_CHECK_INTERVAL_PROPERTY, \"5s\"))\n+        .timeout(fileSettings.getString(CONSUL_CHECK_TIMEOUT_PROPERTY, \"5s\"))\n+        .deregisterCriticalServiceAfter(fileSettings.getString(CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY, \"10m\"))\n+        .successBeforePassing(fileSettings.getInteger(CONSUL_CHECK_SUCCESS_COUNT_PROPERTY, 2))\n+        .failuresBeforeCritical(fileSettings.getInteger(CONSUL_CHECK_FAIL_COUNT_PROPERTY, 2))\n         .build();\n \n-    Optional<String> weight = getWeight(hostName);\n-    int weightForService;\n-    if (weight.isPresent()) {\n-      weightForService = weight.map(Integer::parseInt).get();\n-    } else {\n-      LOGGER.warn(\"No weight present for node:{}\", hostName);\n-      weightForService = DEFAULT_WEIGHT;\n-    }\n-\n-    ServiceWeights serviceWeights = ImmutableServiceWeights.builder().passing(weightForService).warning(weightForService / warningDivider).build();\n-\n-    this.service = ImmutableRegistration.builder()\n-        .id(id)\n-        .name(fileSettings.getString(\"serviceName\"))\n+      this.serviceTemplate = () -> ImmutableRegistration.builder()\n+        .id(serviceId)\n+        .name(fileSettings.getString(NabCommonConfig.SERVICE_NAME_PROPERTY))\n         .port(applicationPort)\n         .check(regCheck)\n-        .serviceWeights(serviceWeights)\n         .tags(tags)\n-        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()))\n-        .build();\n-\n-    this.id = id;\n-    this.enabled = fileSettings.getBoolean(\"consul.registration.enabled\", fileSettings.getBoolean(\"consul.enabled\", true));\n+        .meta(Collections.singletonMap(\"serviceVersion\", appMetadata.getVersion()));\n+    } else {\n+      this.serviceTemplate = () -> {\n+        throw new IllegalStateException(\"Registration disabled. Template should not be called\");\n+      };\n+    }\n   }\n \n   public void register() {\n-    if (enabled) {\n-      try {\n-        agentClient.register(service);\n-        LOGGER.info(\"Registered consul service: {}\", service);\n-      } catch (RuntimeException ex) {\n-        throw new ConsulServiceException(\"Can't register service in consul\", ex);\n-      }\n+    if (!registrationEnabled) {\n+      LOGGER.info(\"Registration disabled. Skipping\");\n+      return;\n+    }\n+    try {\n+      int weight = getWeightOrDefault(getCurrentWeight());\n+      registerWithWeight(weight);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NTY1Ng=="}, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTIxMTc1OnYy", "diffSide": "RIGHT", "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabProdConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDowMjowNFrOH5CNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDowMjowNFrOH5CNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NzA2OQ==", "bodyText": "\u043c\u043e\u0436\u0435\u0442 \u0441\u0440\u0430\u0437\u0443 10_500?\n\u041f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0441 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u043f\u0430\u0434\u0430\u0442\u044c", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529567069", "createdAt": "2020-11-24T14:02:04Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabProdConfig.java", "diffHunk": "@@ -61,11 +68,16 @@ FilterHolder cacheFilter(FileSettings fileSettings, String serviceName, StatsDSe\n \n   @Bean\n   Consul consul(FileSettings fileSettings) {\n-    int port = ofNullable(fileSettings.getInteger(\"consul.http.port\"))\n+    int port = ofNullable(fileSettings.getInteger(CONSUL_PORT_PROPERTY))\n       .or(() -> of(System.getProperty(CONSUL_PORT_ENV_KEY)).map(Integer::valueOf))\n-      .orElseThrow(() -> new IllegalStateException(\"consul.http.port setting or \" + CONSUL_PORT_ENV_KEY + \" envmust be provided\"));\n-    HostAndPort hostAndPort = HostAndPort.fromParts(requireNonNullElse(fileSettings.getString(\"consul.http.host\"), \"127.0.0.1\"), port);\n-    return Consul.builder().withHostAndPort(hostAndPort).build();\n+      .orElseThrow(() -> new IllegalStateException(CONSUL_PORT_PROPERTY + \" setting or \" + CONSUL_PORT_ENV_KEY + \" envmust be provided\"));\n+    HostAndPort hostAndPort = HostAndPort.fromParts(requireNonNullElse(fileSettings.getString(CONSUL_HOST_PROPERTY), \"127.0.0.1\"), port);\n+    return Consul.builder()\n+      .withConnectTimeoutMillis(fileSettings.getLong(CONSUL_CLIENT_CONNECT_TIMEOUT_PROPERTY, 10_000))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6d6c34b722722a6e3be8705e6cd4d8e9356764"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTgzMTk0OnYy", "diffSide": "RIGHT", "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo1MDo1NFrOH5IVag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyODozNFrOH5zbgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NzQzNA==", "bodyText": "\u0432\u043e\u0442 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0438 \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b \u0432 \u0434\u0434\u0441", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529667434", "createdAt": "2020-11-24T15:50:54Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +33,137 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+  public static final String CONSUL_KV_CACHE_CONSISTENCY_MODE_PROPERTY = \"consul.weightCache.consistencyMode\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e192cc5532ca3a0bf3197c52e69d94fb4294360"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4Nzk1Mg==", "bodyText": "\u043a\u0430\u043a\u0438\u0435? \u0432 \u0441\u043c\u044b\u0441\u043b\u0435, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c stale?", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r529687952", "createdAt": "2020-11-24T16:04:58Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +33,137 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+  public static final String CONSUL_KV_CACHE_CONSISTENCY_MODE_PROPERTY = \"consul.weightCache.consistencyMode\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NzQzNA=="}, "originalCommit": {"oid": "8e192cc5532ca3a0bf3197c52e69d94fb4294360"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NjU5NA==", "bodyText": "\u0443\u0433\u0443", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r530176594", "createdAt": "2020-11-25T08:10:37Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +33,137 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+  public static final String CONSUL_KV_CACHE_CONSISTENCY_MODE_PROPERTY = \"consul.weightCache.consistencyMode\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NzQzNA=="}, "originalCommit": {"oid": "8e192cc5532ca3a0bf3197c52e69d94fb4294360"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MzUwNg==", "bodyText": "\u0442\u0443\u0442 \u0432\u0440\u043e\u0434\u0435 \u0442\u043e\u0436\u0435 \u0437\u0430\u043a\u0440\u044b\u043b\u0438 - \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0449\u0438\u0439 consul.consistencyMode", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r530373506", "createdAt": "2020-11-25T13:28:34Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/ConsulService.java", "diffHunk": "@@ -26,85 +33,137 @@\n   private static final String LOG_LEVEL_OVERRIDE_EXTENSION_TAG = \"log_level_override_extension_enabled\";\n   private static final int DEFAULT_WEIGHT = 100;\n \n+  public static final String WAIT_AFTER_DEREGISTRATION_PROPERTY = \"consul.wait.after.deregistration.millis\";\n+  public static final String WARNING_DIVIDER_PROPERTY = \"consul.check.warningDivider\";\n+  public static final String CONSUL_CHECK_HOST_PROPERTY = \"consul.check.host\";\n+  public static final String CONSUL_TAGS_PROPERTY = \"consul.tags\";\n+  public static final String CONSUL_REGISTRATION_ENABLED_PROPERTY = \"consul.registration.enabled\";\n+  public static final String CONSUL_CHECK_INTERVAL_PROPERTY = \"consul.check.interval\";\n+  public static final String CONSUL_CHECK_TIMEOUT_PROPERTY = \"consul.check.timeout\";\n+  public static final String CONSUL_DEREGISTER_CRITICAL_TIMEOUT_PROPERTY = \"consul.deregisterCritical.timeout\";\n+  public static final String CONSUL_CHECK_SUCCESS_COUNT_PROPERTY = \"consul.check.successCount\";\n+  public static final String CONSUL_CHECK_FAIL_COUNT_PROPERTY = \"consul.check.failCount\";\n+  public static final String CONSUL_KV_CACHE_WATCH_INTERVAL_PROPERTY = \"consul.weightCache.watchSeconds\";\n+  public static final String CONSUL_KV_CACHE_CONSISTENCY_MODE_PROPERTY = \"consul.weightCache.consistencyMode\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NzQzNA=="}, "originalCommit": {"oid": "8e192cc5532ca3a0bf3197c52e69d94fb4294360"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIyNzE0OnYy", "diffSide": "RIGHT", "path": "nab-example/src/main/java/ru/hh/nab/example/ExampleMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMDowMVrOH68eGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozNDoyN1rOH6837w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDIwMw==", "bodyText": "\u043d\u0435 \u043f\u0440\u043e\u043a\u043b\u044f\u043d\u0443\u0442 \u043b\u0438 \u043d\u0430\u0441 \u043f\u043e\u0442\u043e\u043c\u043a\u0438 \u0437\u0430 \u044d\u0442\u043e\u0442 \u0445\u043e\u0434\u043e\u043c \u043a\u043e\u043d\u0435\u043c.", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r531570203", "createdAt": "2020-11-27T12:20:01Z", "author": {"login": "heruv1m"}, "path": "nab-example/src/main/java/ru/hh/nab/example/ExampleMain.java", "diffHunk": "@@ -18,7 +18,7 @@ public static void main(String[] args) throws IOException {\n     // you need to run consul agent to be able to run NaB application\n     int consulPort = runConsulMock();\n     // better to use settings with fixed port, but for the sake of dynamic usage we use env\n-    System.setProperty(NabProdConfig.CONSUL_PORT_ENV_KEY, String.valueOf(consulPort));\n+    System.setProperty(NabProdConfig.CONSUL_PORT_PROPERTY, String.valueOf(consulPort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d7ad7e23eddd7ab3320ed6437d3d2e4500dba3b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NjgxNQ==", "bodyText": "\u0434\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e \u0438\u0434\u0435\u0435. \u044d\u0442\u043e \u0436 \u0432 example", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r531576815", "createdAt": "2020-11-27T12:34:27Z", "author": {"login": "dzharikhin"}, "path": "nab-example/src/main/java/ru/hh/nab/example/ExampleMain.java", "diffHunk": "@@ -18,7 +18,7 @@ public static void main(String[] args) throws IOException {\n     // you need to run consul agent to be able to run NaB application\n     int consulPort = runConsulMock();\n     // better to use settings with fixed port, but for the sake of dynamic usage we use env\n-    System.setProperty(NabProdConfig.CONSUL_PORT_ENV_KEY, String.valueOf(consulPort));\n+    System.setProperty(NabProdConfig.CONSUL_PORT_PROPERTY, String.valueOf(consulPort));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDIwMw=="}, "originalCommit": {"oid": "6d7ad7e23eddd7ab3320ed6437d3d2e4500dba3b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIzMzY4OnYy", "diffSide": "RIGHT", "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabCommonConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMjowOVrOH68iGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMjowOVrOH68iGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MTIyNg==", "bodyText": "\u044f \u0447\u0442\u043e \u0442\u043e \u043d\u0435 \u0432\u0438\u0436\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0439", "url": "https://github.com/hhru/nuts-and-bolts/pull/281#discussion_r531571226", "createdAt": "2020-11-27T12:22:09Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabCommonConfig.java", "diffHunk": "@@ -22,11 +22,25 @@\n @Configuration\n public class NabCommonConfig {\n   public static final String SERVICE_NAME_PROPERTY = \"serviceName\";\n+  public static final String NODE_NAME_PROPERTY = \"nodeName\";\n+  public static final String DATACENTER_NAME_PROPERTY = \"datacenter\";\n \n   @Bean\n   String serviceName(FileSettings fileSettings) {\n     return ofNullable(fileSettings.getString(SERVICE_NAME_PROPERTY))\n-        .orElseThrow(() -> new RuntimeException(String.format(\"'%s' property is not found in file settings\", SERVICE_NAME_PROPERTY)));\n+      .orElseThrow(() -> new RuntimeException(String.format(\"'%s' property is not found in file settings\", SERVICE_NAME_PROPERTY)));\n+  }\n+\n+  @Bean\n+  String datacenter(FileSettings fileSettings) {\n+    return ofNullable(fileSettings.getString(DATACENTER_NAME_PROPERTY))\n+      .orElseThrow(() -> new RuntimeException(String.format(\"'%s' property is not found in file settings\", DATACENTER_NAME_PROPERTY)));\n+  }\n+\n+  @Bean\n+  String nodeName(FileSettings fileSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d7ad7e23eddd7ab3320ed6437d3d2e4500dba3b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4299, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}