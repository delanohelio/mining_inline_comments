{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTg2MjQy", "number": 252, "title": "HH-113445 add LogLevelOverrideExtension", "bodyText": "https://jira.hh.ru/browse/HH-113445", "createdAt": "2020-07-27T08:06:33Z", "url": "https://github.com/hhru/nuts-and-bolts/pull/252", "merged": true, "mergeCommit": {"oid": "35dc30e874c421844e7d6ccb72c3bad40307a0e5"}, "closed": true, "closedAt": "2020-07-27T16:52:29Z", "author": {"login": "pvorlov"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc49QyNgFqTQ1NTU2MjUzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5Eq4AgBqjM1OTA3MzI2NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTYyNTM3", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455562537", "createdAt": "2020-07-27T08:08:22Z", "commit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowODoyMlrOG3X6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowODoyMlrOG3X6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNjY1Nw==", "bodyText": "\u041d\u0430\u0433\u043b\u043e \u0443\u043a\u0440\u0430\u043b \u0443 JClient'\u0430", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460716657", "createdAt": "2020-07-27T08:08:22Z", "author": {"login": "pvorlov"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogLevelOverrideApplier.class);\n+\n+  private final Map<String, String> initialLogLevels = new HashMap<>();\n+  private final Map<String, String> previousOverrides = new HashMap<>();\n+\n+  public void run(LogLevelOverrideExtension extension) {\n+    var executor = newSingleThreadScheduledExecutor((Runnable r) -> {\n+      Thread thread = new Thread(r, LogLevelOverrideApplier.class.getSimpleName());\n+      thread.setDaemon(true);\n+      return thread;\n+    });\n+    executor.scheduleWithFixedDelay(() -> {\n+      try {\n+        applyOverrides(getOrThrow(extension.loadLogLevelOverrides()));\n+      } catch (RuntimeException e) {\n+        LOGGER.error(\"Could not apply log level overrides\", e);\n+      }\n+    }, extension.updateInterval(), extension.updateInterval(), TimeUnit.MINUTES);\n+  }\n+\n+  private void applyOverrides(Map<String, String> overrides) {\n+    Set<String> obsoleteOverrides = new HashSet<>(previousOverrides.keySet());\n+    overrides.forEach((logger, logLevel) -> {\n+      obsoleteOverrides.remove(logger);\n+      if (!logLevel.equals(previousOverrides.get(logger))) {\n+        previousOverrides.put(logger, logLevel);\n+        var initialLogLevel = initialLogLevels.get(logger);\n+        var logbackLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(logger);\n+        if (initialLogLevel == null) {\n+          initialLogLevels.put(logger, logbackLogger.getLevel().levelStr);\n+        }\n+        logbackLogger.setLevel(Level.toLevel(logLevel));\n+      }\n+    });\n+    obsoleteOverrides.forEach(obsoleteOverrideLogger -> {\n+      previousOverrides.remove(obsoleteOverrideLogger);\n+      var logbackLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(obsoleteOverrideLogger);\n+      logbackLogger.setLevel(Level.toLevel(initialLogLevels.get(obsoleteOverrideLogger)));\n+      initialLogLevels.remove(obsoleteOverrideLogger);\n+    });\n+  }\n+\n+  private <T> T getOrThrow(CompletableFuture<T> future) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTYzMjQ5", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455563249", "createdAt": "2020-07-27T08:09:28Z", "commit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowOToyOFrOG3X8cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowOToyOFrOG3X8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNzE3MA==", "bodyText": "\u0421\u0434\u0435\u043b\u0430\u043b private, \u043e\u043d \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 run", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460717170", "createdAt": "2020-07-27T08:09:28Z", "author": {"login": "pvorlov"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabApplication.java", "diffHunk": "@@ -112,16 +115,27 @@ public static NabApplicationBuilder builder() {\n     return new NabApplicationBuilder();\n   }\n \n-  public static void configureLogger() {\n-    SLF4JBridgeHandler.removeHandlersForRootLogger();\n-    SLF4JBridgeHandler.install();\n-  }\n-\n   public static void configureSentry(ApplicationContext context) {\n     FileSettings settings = context.getBean(FileSettings.class);\n     Sentry.init(settings.getString(\"sentry.dsn\"));\n   }\n \n+  private static void configureLogger(ApplicationContext context) {\n+    SLF4JBridgeHandler.removeHandlersForRootLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTY0MzM2", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455564336", "createdAt": "2020-07-27T08:11:06Z", "commit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMTowN1rOG3X_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMTowN1rOG3X_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODA2Nw==", "bodyText": "\u041e\u0441\u0442\u0430\u0432\u0438\u043b \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438, \u043d\u043e \u043d\u0435 \u0443\u0432\u0435\u0440\u0435\u043d \u0447\u0442\u043e \u043d\u0430\u043c \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0443\u0436\u043d\u044b \u0442\u0430\u043d\u0446\u044b \u0441 jul-bridg'\u0435\u043c \u0432 \u0442\u0435\u0441\u0442\u0430\u0445.", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460718067", "createdAt": "2020-07-27T08:11:07Z", "author": {"login": "pvorlov"}, "path": "nab-testbase-old/src/main/java/ru/hh/nab/testbase/old/NabTestBase.java", "diffHunk": "@@ -31,7 +32,9 @@\n \n   @Before\n   public void setUpNabTestBase() {\n-    NabApplication.configureLogger();\n+    SLF4JBridgeHandler.removeHandlersForRootLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Nzc0MDU2", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455774056", "createdAt": "2020-07-27T13:21:54Z", "commit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzoyMTo1NFrOG3iLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzo1NTozNFrOG3jkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NDg0MA==", "bodyText": "\u0430 \u0447\u0435 \u043d\u0435 \u0432 \u0442\u0440\u0430\u0439 \u0431\u043b\u043e\u043a\u0435?", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460884840", "createdAt": "2020-07-27T13:21:54Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/NabApplication.java", "diffHunk": "@@ -112,16 +115,27 @@ public static NabApplicationBuilder builder() {\n     return new NabApplicationBuilder();\n   }\n \n-  public static void configureLogger() {\n-    SLF4JBridgeHandler.removeHandlersForRootLogger();\n-    SLF4JBridgeHandler.install();\n-  }\n-\n   public static void configureSentry(ApplicationContext context) {\n     FileSettings settings = context.getBean(FileSettings.class);\n     Sentry.init(settings.getString(\"sentry.dsn\"));\n   }\n \n+  private static void configureLogger(ApplicationContext context) {\n+    SLF4JBridgeHandler.removeHandlersForRootLogger();\n+    SLF4JBridgeHandler.install();\n+\n+    LogLevelOverrideExtension extension;\n+    try {\n+      extension = context.getBean(LogLevelOverrideExtension.class);\n+      LOGGER.info(\"{} activated\", LogLevelOverrideExtension.class.getSimpleName());\n+    } catch (NoSuchBeanDefinitionException e) {\n+      // Extension not activated, normal behaviour\n+      return;\n+    }\n+\n+    new LogLevelOverrideApplier().run(extension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NzEyMQ==", "bodyText": "\u043f\u0435\u0440\u0432\u0430\u044f \u0436\u0435 initialDelay - \u0442\u0430\u043c \u0436\u0435 \u043c\u043e\u0436\u043d\u043e 0 \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435?", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460887121", "createdAt": "2020-07-27T13:25:20Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogLevelOverrideApplier.class);\n+\n+  private final Map<String, String> initialLogLevels = new HashMap<>();\n+  private final Map<String, String> previousOverrides = new HashMap<>();\n+\n+  public void run(LogLevelOverrideExtension extension) {\n+    var executor = newSingleThreadScheduledExecutor((Runnable r) -> {\n+      Thread thread = new Thread(r, LogLevelOverrideApplier.class.getSimpleName());\n+      thread.setDaemon(true);\n+      return thread;\n+    });\n+    executor.scheduleWithFixedDelay(() -> {\n+      try {\n+        applyOverrides(getOrThrow(extension.loadLogLevelOverrides()));\n+      } catch (RuntimeException e) {\n+        LOGGER.error(\"Could not apply log level overrides\", e);\n+      }\n+    }, extension.updateInterval(), extension.updateInterval(), TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf9f6cf58964f61cdd150d0c31791c5908e6630"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg4NzY1OQ==", "bodyText": "\u0430 \u0437\u0430\u0447\u0435\u043c \u0442\u0443\u0442 \u0432\u043e\u043e\u0431\u0449\u0435 \u0447\u0442\u043e-\u0442\u043e \u0442\u0440\u043e\u0433\u0430\u0442\u044c?", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460887659", "createdAt": "2020-07-27T13:26:07Z", "author": {"login": "dzharikhin"}, "path": "nab-testbase-old/src/main/java/ru/hh/nab/testbase/old/NabTestBase.java", "diffHunk": "@@ -31,7 +32,9 @@\n \n   @Before\n   public void setUpNabTestBase() {\n-    NabApplication.configureLogger();\n+    SLF4JBridgeHandler.removeHandlersForRootLogger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODA2Nw=="}, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNzA1MA==", "bodyText": "\u043a\u0430\u043a-\u0442\u043e \u043c\u043d\u0435 \u0441\u0442\u0440\u0435\u043c\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 executor \u043d\u0435 \u0432 \u043f\u043e\u043b\u0435, \u043a\u043e\u043d\u0435\u0447\u043d\u043e)\n\u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460907050", "createdAt": "2020-07-27T13:54:51Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogLevelOverrideApplier.class);\n+\n+  private final Map<String, String> initialLogLevels = new HashMap<>();\n+  private final Map<String, String> previousOverrides = new HashMap<>();\n+\n+  public void run(LogLevelOverrideExtension extension) {\n+    var executor = newSingleThreadScheduledExecutor((Runnable r) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf9f6cf58964f61cdd150d0c31791c5908e6630"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNzYxOA==", "bodyText": "\u043b\u0443\u0447\u0448\u0435 \u0432 \u0438\u043c\u0435\u043d\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u044e\u043d\u0438\u0442\u044b \u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c. \u0436\u0430\u0432\u0430\u0434\u043e\u043a\u0438 - \u043d\u0435 \u0442\u0430\u043a \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460907618", "createdAt": "2020-07-27T13:55:34Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideExtension.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ru.hh.nab.starter.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Extension which provides ability to override static Loggers levels with dynamic ones.\n+ * To activate extension simply implement it as a Spring bean.\n+ */\n+public interface LogLevelOverrideExtension {\n+\n+  /**\n+   * How often override should be loaded and applied in minutes\n+   */\n+  int updateInterval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf9f6cf58964f61cdd150d0c31791c5908e6630"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODIxNzUz", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455821753", "createdAt": "2020-07-27T14:13:59Z", "commit": {"oid": "8cf9f6cf58964f61cdd150d0c31791c5908e6630"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoxMzo1OVrOG3kXKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDoxNDoyNlrOG3kYSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyMDYxOQ==", "bodyText": "\u0430 \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430?\n\u043e\u0434\u0438\u043d \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442, \u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442?", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460920619", "createdAt": "2020-07-27T14:13:59Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogLevelOverrideApplier.class);\n+\n+  private final Map<String, String> initialLogLevels = new HashMap<>();\n+  private final Map<String, String> previousOverrides = new HashMap<>();\n+\n+  public void run(LogLevelOverrideExtension extension) {\n+    var executor = newSingleThreadScheduledExecutor((Runnable r) -> {\n+      Thread thread = new Thread(r, LogLevelOverrideApplier.class.getSimpleName());\n+      thread.setDaemon(true);\n+      return thread;\n+    });\n+    executor.scheduleWithFixedDelay(() -> {\n+      try {\n+        applyOverrides(getOrThrow(extension.loadLogLevelOverrides()));\n+      } catch (RuntimeException e) {\n+        LOGGER.error(\"Could not apply log level overrides\", e);\n+      }\n+    }, extension.updateInterval(), extension.updateInterval(), TimeUnit.MINUTES);\n+  }\n+\n+  private void applyOverrides(Map<String, String> overrides) {\n+    Set<String> obsoleteOverrides = new HashSet<>(previousOverrides.keySet());\n+    overrides.forEach((logger, logLevel) -> {\n+      obsoleteOverrides.remove(logger);\n+      if (!logLevel.equals(previousOverrides.get(logger))) {\n+        previousOverrides.put(logger, logLevel);\n+        var initialLogLevel = initialLogLevels.get(logger);\n+        var logbackLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(logger);\n+        if (initialLogLevel == null) {\n+          initialLogLevels.put(logger, logbackLogger.getEffectiveLevel().levelStr);\n+        }\n+        logbackLogger.setLevel(Level.toLevel(logLevel));\n+      }\n+    });\n+    obsoleteOverrides.forEach(obsoleteOverrideLogger -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf9f6cf58964f61cdd150d0c31791c5908e6630"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkyMDkwNQ==", "bodyText": "\u0443 \u043e\u043d\u0438 \u0448\u0430\u0440\u044f\u0442 \u043a\u0430\u043a\u043e\u0439 \u0442\u043e \u043a\u043e\u0434?\n\u0422\u043e\u0433\u0434\u0430 \u043c\u043e\u0436\u0435\u0442 \u0432 utils?", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r460920905", "createdAt": "2020-07-27T14:14:26Z", "author": {"login": "heruv1m"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(LogLevelOverrideApplier.class);\n+\n+  private final Map<String, String> initialLogLevels = new HashMap<>();\n+  private final Map<String, String> previousOverrides = new HashMap<>();\n+\n+  public void run(LogLevelOverrideExtension extension) {\n+    var executor = newSingleThreadScheduledExecutor((Runnable r) -> {\n+      Thread thread = new Thread(r, LogLevelOverrideApplier.class.getSimpleName());\n+      thread.setDaemon(true);\n+      return thread;\n+    });\n+    executor.scheduleWithFixedDelay(() -> {\n+      try {\n+        applyOverrides(getOrThrow(extension.loadLogLevelOverrides()));\n+      } catch (RuntimeException e) {\n+        LOGGER.error(\"Could not apply log level overrides\", e);\n+      }\n+    }, extension.updateInterval(), extension.updateInterval(), TimeUnit.MINUTES);\n+  }\n+\n+  private void applyOverrides(Map<String, String> overrides) {\n+    Set<String> obsoleteOverrides = new HashSet<>(previousOverrides.keySet());\n+    overrides.forEach((logger, logLevel) -> {\n+      obsoleteOverrides.remove(logger);\n+      if (!logLevel.equals(previousOverrides.get(logger))) {\n+        previousOverrides.put(logger, logLevel);\n+        var initialLogLevel = initialLogLevels.get(logger);\n+        var logbackLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(logger);\n+        if (initialLogLevel == null) {\n+          initialLogLevels.put(logger, logbackLogger.getLevel().levelStr);\n+        }\n+        logbackLogger.setLevel(Level.toLevel(logLevel));\n+      }\n+    });\n+    obsoleteOverrides.forEach(obsoleteOverrideLogger -> {\n+      previousOverrides.remove(obsoleteOverrideLogger);\n+      var logbackLogger = (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(obsoleteOverrideLogger);\n+      logbackLogger.setLevel(Level.toLevel(initialLogLevels.get(obsoleteOverrideLogger)));\n+      initialLogLevels.remove(obsoleteOverrideLogger);\n+    });\n+  }\n+\n+  private <T> T getOrThrow(CompletableFuture<T> future) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNjY1Nw=="}, "originalCommit": {"oid": "4f18ae78768c5c95f4b3607a4355888360734829"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODI1Mjg5", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455825289", "createdAt": "2020-07-27T14:17:53Z", "commit": {"oid": "77f9944f9d4a37655114753cd394cf16bd30eaee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTIxMzM0", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455921334", "createdAt": "2020-07-27T16:01:27Z", "commit": {"oid": "4ed2bc83642148efb253caeef727305c9aabaa5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4af0728b95891fff01d130bd83f490c4a8109b01", "author": {"user": {"login": "pvorlov", "name": "Pavel Orlov"}}, "url": "https://github.com/hhru/nuts-and-bolts/commit/4af0728b95891fff01d130bd83f490c4a8109b01", "committedDate": "2020-07-27T16:08:52Z", "message": "HH-113445 add wrapper for null log levels"}, "afterCommit": {"oid": "4ed2bc83642148efb253caeef727305c9aabaa5b", "author": {"user": {"login": "pvorlov", "name": "Pavel Orlov"}}, "url": "https://github.com/hhru/nuts-and-bolts/commit/4ed2bc83642148efb253caeef727305c9aabaa5b", "committedDate": "2020-07-27T15:23:18Z", "message": "HH-113445 add Optional for extension bean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTI5MDc2", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#pullrequestreview-455929076", "createdAt": "2020-07-27T16:10:57Z", "commit": {"oid": "4af0728b95891fff01d130bd83f490c4a8109b01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoyNTo0MFrOG3qB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoyNTo0MFrOG3qB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMzQ5OA==", "bodyText": "withLogLevel", "url": "https://github.com/hhru/nuts-and-bolts/pull/252#discussion_r461013498", "createdAt": "2020-07-27T16:25:40Z", "author": {"login": "dzharikhin"}, "path": "nab-starter/src/main/java/ru/hh/nab/starter/logging/LogLevelOverrideApplier.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package ru.hh.nab.starter.logging;\n+\n+import ch.qos.logback.classic.Level;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import static java.util.concurrent.Executors.newSingleThreadScheduledExecutor;\n+import java.util.concurrent.TimeUnit;\n+import static java.util.stream.Collectors.toMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LogLevelOverrideApplier {\n+\n+  private static class LogInfo {\n+    private String logLevel;\n+\n+    public Optional<String> getLogLevelOptional() {\n+      return Optional.ofNullable(logLevel);\n+    }\n+\n+    public LogInfo setLogLevel(String logLevel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af0728b95891fff01d130bd83f490c4a8109b01"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165cb3732ba23ba698c1173075cdb1f325ff59c9", "author": {"user": {"login": "pvorlov", "name": "Pavel Orlov"}}, "url": "https://github.com/hhru/nuts-and-bolts/commit/165cb3732ba23ba698c1173075cdb1f325ff59c9", "committedDate": "2020-07-27T16:45:50Z", "message": "HH-113445 add LogLevelOverrideExtension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4af0728b95891fff01d130bd83f490c4a8109b01", "author": {"user": {"login": "pvorlov", "name": "Pavel Orlov"}}, "url": "https://github.com/hhru/nuts-and-bolts/commit/4af0728b95891fff01d130bd83f490c4a8109b01", "committedDate": "2020-07-27T16:08:52Z", "message": "HH-113445 add wrapper for null log levels"}, "afterCommit": {"oid": "165cb3732ba23ba698c1173075cdb1f325ff59c9", "author": {"user": {"login": "pvorlov", "name": "Pavel Orlov"}}, "url": "https://github.com/hhru/nuts-and-bolts/commit/165cb3732ba23ba698c1173075cdb1f325ff59c9", "committedDate": "2020-07-27T16:45:50Z", "message": "HH-113445 add LogLevelOverrideExtension"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3320, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}