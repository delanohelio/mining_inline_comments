{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNzY1MTE4", "number": 237, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo0OTo0MFrODv8EBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyOTowMlrODv-E2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTkzNzMyOnYy", "diffSide": "RIGHT", "path": "nab-jclient/src/main/java/ru/hh/nab/jclient/JClientContextProviderFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo0OTo0MFrOGCptrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjo1OTozMlrOGCuCdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzc3NA==", "bodyText": "\u0442\u0443\u0442 \u0442\u044b \u043b\u043e\u0432\u0438\u0448\u044c \u0438 \u0442\u043e, \u0447\u0442\u043e \u0432\u044b\u043b\u0435\u0442\u0438\u0442 \u0438\u0437 chain.doFilter(). \u043d\u0430\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u0443\u0437\u043a\u0438\u0439 try - \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 getRequestHeadersMap() \u0438 getQueryParamsMap()", "url": "https://github.com/hhru/nuts-and-bolts/pull/237#discussion_r405433774", "createdAt": "2020-04-08T10:49:40Z", "author": {"login": "Powerrr"}, "path": "nab-jclient/src/main/java/ru/hh/nab/jclient/JClientContextProviderFilter.java", "diffHunk": "@@ -33,6 +34,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     try {\n       contextThreadLocalSupplier.addContext(getRequestHeadersMap(request), getQueryParamsMap(request));\n       chain.doFilter(request, response);\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56e3b932c8fff53c12af7574e6249cc83be944b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NTEyMw==", "bodyText": "\u041f\u043e\u043f\u0440\u0430\u0432\u0438\u043b.\n\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f \u043f\u043e\u043d\u044f\u043b doFilter \u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f\u0445 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c", "url": "https://github.com/hhru/nuts-and-bolts/pull/237#discussion_r405455123", "createdAt": "2020-04-08T11:32:20Z", "author": {"login": "genroelgvozo"}, "path": "nab-jclient/src/main/java/ru/hh/nab/jclient/JClientContextProviderFilter.java", "diffHunk": "@@ -33,6 +34,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     try {\n       contextThreadLocalSupplier.addContext(getRequestHeadersMap(request), getQueryParamsMap(request));\n       chain.doFilter(request, response);\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzc3NA=="}, "originalCommit": {"oid": "56e3b932c8fff53c12af7574e6249cc83be944b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwNDYzMA==", "bodyText": "\u043a\u0441\u0442\u0430\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b getBlablaMap() \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c try-catch, \u0442\u043e\u0433\u0434\u0430 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 try \u043d\u0435 \u0431\u0443\u0434\u0435\u0442", "url": "https://github.com/hhru/nuts-and-bolts/pull/237#discussion_r405504630", "createdAt": "2020-04-08T12:59:32Z", "author": {"login": "Powerrr"}, "path": "nab-jclient/src/main/java/ru/hh/nab/jclient/JClientContextProviderFilter.java", "diffHunk": "@@ -33,6 +34,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n     try {\n       contextThreadLocalSupplier.addContext(getRequestHeadersMap(request), getQueryParamsMap(request));\n       chain.doFilter(request, response);\n+    } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMzc3NA=="}, "originalCommit": {"oid": "56e3b932c8fff53c12af7574e6249cc83be944b2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjI2NzE1OnYy", "diffSide": "RIGHT", "path": "nab-tests/src/test/java/ru/hh/nab/jclient/JClientContextProviderFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjoyOTowMlrOGCs6bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjozMToyOVrOGCs_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NjE5MQ==", "bodyText": "\u0434\u043e\u043f\u0438\u0448\u0438 \u0441\u044e\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443, \u0447\u0442\u043e \u0447\u0435\u0439\u043d \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f - \u0443\u0436 \u0431\u043e\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0447\u0443\u0434\u043b\u0438\u0432\u044b\u0439 \u043a\u043e\u0434)", "url": "https://github.com/hhru/nuts-and-bolts/pull/237#discussion_r405486191", "createdAt": "2020-04-08T12:29:02Z", "author": {"login": "dzharikhin"}, "path": "nab-tests/src/test/java/ru/hh/nab/jclient/JClientContextProviderFilterTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package ru.hh.nab.jclient;\n+\n+import org.junit.Test;\n+import ru.hh.jclient.common.HttpClientContextThreadLocalSupplier;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class JClientContextProviderFilterTest {\n+\n+  @Test\n+  public void testInvalidQueryParams() throws IOException, ServletException {\n+    JClientContextProviderFilter filter = new JClientContextProviderFilter(mock(HttpClientContextThreadLocalSupplier.class));\n+    HttpServletRequest request = mock(HttpServletRequest.class);\n+    HttpServletResponse response = mock(HttpServletResponse.class);\n+    FilterChain chain = mock(FilterChain.class);\n+\n+    when(request.getHeaderNames()).thenReturn(Collections.emptyEnumeration());\n+    when(request.getQueryString()).thenReturn(\"/query?%\");\n+\n+    filter.doFilter(request, response, chain);\n+    verify(response).sendError(HttpServletResponse.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8d09f500e2bad23463a3162993e4c9dc37ce59"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NzQ3OQ==", "bodyText": "\u0414\u0430, \u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u0434\u043e\u043f\u0438\u0448\u0443 (\u0441\u0430\u043c \u043f\u043e\u0434\u0443\u043c\u0430\u043b \u043e\u0431 \u044d\u0442\u043e\u043c \u0438 \u0437\u0430\u0431\u044b\u043b)\n\u0414\u0443\u043c\u0430\u043b \u043a\u0430\u043a \u043c\u0435\u043d\u0435\u0435 \u043f\u0440\u0438\u0447\u0443\u0434\u043b\u0438\u0432\u0435\u0435, \u043d\u0435 \u0441\u043c\u043e\u0433", "url": "https://github.com/hhru/nuts-and-bolts/pull/237#discussion_r405487479", "createdAt": "2020-04-08T12:31:29Z", "author": {"login": "genroelgvozo"}, "path": "nab-tests/src/test/java/ru/hh/nab/jclient/JClientContextProviderFilterTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package ru.hh.nab.jclient;\n+\n+import org.junit.Test;\n+import ru.hh.jclient.common.HttpClientContextThreadLocalSupplier;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class JClientContextProviderFilterTest {\n+\n+  @Test\n+  public void testInvalidQueryParams() throws IOException, ServletException {\n+    JClientContextProviderFilter filter = new JClientContextProviderFilter(mock(HttpClientContextThreadLocalSupplier.class));\n+    HttpServletRequest request = mock(HttpServletRequest.class);\n+    HttpServletResponse response = mock(HttpServletResponse.class);\n+    FilterChain chain = mock(FilterChain.class);\n+\n+    when(request.getHeaderNames()).thenReturn(Collections.emptyEnumeration());\n+    when(request.getQueryString()).thenReturn(\"/query?%\");\n+\n+    filter.doFilter(request, response, chain);\n+    verify(response).sendError(HttpServletResponse.SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ4NjE5MQ=="}, "originalCommit": {"oid": "aa8d09f500e2bad23463a3162993e4c9dc37ce59"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4228, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}