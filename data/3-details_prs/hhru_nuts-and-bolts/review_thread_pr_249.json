{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjIxNjI3", "number": 249, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyMjo0N1rOEIY3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyOToxOVrOEIyUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjMxNDg2OnYy", "diffSide": "RIGHT", "path": "nab-testbase-old/src/main/java/ru/hh/nab/testbase/old/JettyTestContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyMjo0N1rOGoUclw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyMjo0N1rOGoUclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzMTIyMw==", "bodyText": "\u0424\u0438\u043a\u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0430\u0433\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438, PortHolder \u043d\u0435 \u043e\u0442\u043f\u0443\u0441\u043a\u0430\u043b \u043f\u043e\u0440\u0442 \u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438 \u0441 testbase-old", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r444931223", "createdAt": "2020-06-24T14:22:47Z", "author": {"login": "pvorlov"}, "path": "nab-testbase-old/src/main/java/ru/hh/nab/testbase/old/JettyTestContainer.java", "diffHunk": "@@ -16,7 +16,7 @@\n   private final URI baseUri;\n \n   JettyTestContainer(NabApplication application, WebApplicationContext applicationContext, NabTestContext.PortHolder portHolder) {\n-    JettyServerFactory.JettyTestServer testServer = JettyServerFactory.createTestServer(portHolder.getPort());\n+    JettyServerFactory.JettyTestServer testServer = portHolder.releaseAndApply(JettyServerFactory::createTestServer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d1edb7e38ec79fc95ab879e456a51bc02bd36fe"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjQ1NzY4OnYy", "diffSide": "RIGHT", "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDo1MjoxNVrOGoV2qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTowMDo1NlrOGoWQYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NDI4MQ==", "bodyText": "\u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u043d\u0430\u0434\u043e \u043d\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0434\u0435\u043b\u0430\u0442\u044c, \u0434\u0430\u043c\u043f\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u0440\u0435\u0434\u044b \u044d\u0442\u043e \u0442\u044f\u0436\u0435\u043b\u043e \u0438 \u043f\u043e \u043f\u0435\u0440\u0444\u043e\u0440\u043c\u0430\u043d\u0441\u0443 \u0438 \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u0438\n\u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u044e\u0437\u0430\u0442\u044c RateLimiter \u0438\u0437 \u0433\u0443\u0430\u0432\u044b \u0438\u043b\u0438 \u0447\u0442\u043e\u043d\u0438\u0442\u044c \u0442\u0430\u043a\u043e\u0435", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r444954281", "createdAt": "2020-06-24T14:52:15Z", "author": {"login": "kincajou"}, "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ru.hh.nab.common.executor;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDiagnosticRejectedExecutionHandler implements RejectedExecutionHandler {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDiagnosticRejectedExecutionHandler.class);\n+\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    String threadPoolPhrase;\n+    if (executor instanceof MonitoredThreadPoolExecutor) {\n+      threadPoolPhrase = ((MonitoredThreadPoolExecutor) executor).getThreadPoolName() + \" thread pool\";\n+    } else {\n+      threadPoolPhrase = \"Thread pool\";\n+    }\n+    LOGGER.warn(\"{} is low on threads: size={}, activeCount={}, queueSize={}\",\n+        threadPoolPhrase, executor.getPoolSize(), executor.getActiveCount(), executor.getQueue().size());\n+\n+    StringBuilder threadDump = new StringBuilder(System.lineSeparator());\n+    ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f90e28f161c3287fba23299105fd3c0eaf2471"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MDg2Ng==", "bodyText": "\u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u0440\u0435\u0434 \u0432 \u043e\u0434\u0438\u043d \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u044d\u0442\u0438\u043c \u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f, \u0435\u0441\u043b\u0438 \u0448\u0442\u0443\u043a 100 \u0442\u0440\u0435\u0434\u043e\u0432 \u043d\u0430\u0447\u043d\u0443\u0442 \u0442\u043e \u0442\u0443\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e oom", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r444960866", "createdAt": "2020-06-24T15:00:56Z", "author": {"login": "kincajou"}, "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ru.hh.nab.common.executor;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDiagnosticRejectedExecutionHandler implements RejectedExecutionHandler {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDiagnosticRejectedExecutionHandler.class);\n+\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    String threadPoolPhrase;\n+    if (executor instanceof MonitoredThreadPoolExecutor) {\n+      threadPoolPhrase = ((MonitoredThreadPoolExecutor) executor).getThreadPoolName() + \" thread pool\";\n+    } else {\n+      threadPoolPhrase = \"Thread pool\";\n+    }\n+    LOGGER.warn(\"{} is low on threads: size={}, activeCount={}, queueSize={}\",\n+        threadPoolPhrase, executor.getPoolSize(), executor.getActiveCount(), executor.getQueue().size());\n+\n+    StringBuilder threadDump = new StringBuilder(System.lineSeparator());\n+    ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk1NDI4MQ=="}, "originalCommit": {"oid": "d5f90e28f161c3287fba23299105fd3c0eaf2471"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzEwOTIzOnYy", "diffSide": "RIGHT", "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozOTowMFrOGocakA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo0MDowNVrOGo4vnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MTc3Ng==", "bodyText": "\u0437\u0430 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u043a\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043e\u0431\u0435\u0436\u0438\u0442 \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u0442\u0443, \u0432 \u0441\u0435\u043a\u0446\u0438\u044e \u0442\u0430\u0431\u043e\u0440 \u0446\u044b\u0433\u0430\u043d \u0443\u0441\u043f\u0435\u0435\u0442 \u0437\u0430\u0439\u0442\u0438 \u0438 \u0443\u043a\u0440\u0430\u0441\u0442\u044c \u043b\u043e\u0448\u0430\u0434\u044c)\n\u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u043c\u0443\u0434\u0440\u0438\u0442\u044c \u0438 \u0434\u0430\u0431\u043b\u0447\u0435\u043a\u043d\u0443\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0430\u0439\u0437\u0435\u0434", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445061776", "createdAt": "2020-06-24T17:39:00Z", "author": {"login": "dzharikhin"}, "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ru.hh.nab.common.executor;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.time.LocalDateTime;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDiagnosticRejectedExecutionHandler implements RejectedExecutionHandler {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDiagnosticRejectedExecutionHandler.class);\n+  private static final int THREAD_DUMP_PRINTING_MIN_DELAY_IN_MINUTES = 5;\n+\n+  private volatile LocalDateTime lastThreadDumpPrinting;\n+\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    String threadPoolPhrase;\n+    if (executor instanceof MonitoredThreadPoolExecutor) {\n+      threadPoolPhrase = ((MonitoredThreadPoolExecutor) executor).getThreadPoolName() + \" thread pool\";\n+    } else {\n+      threadPoolPhrase = \"Thread pool\";\n+    }\n+    LOGGER.warn(\"{} is low on threads: size={}, activeCount={}, queueSize={}\",\n+        threadPoolPhrase, executor.getPoolSize(), executor.getActiveCount(), executor.getQueue().size());\n+\n+    var now = LocalDateTime.now();\n+    if (lastThreadDumpPrinting == null || now.isAfter(lastThreadDumpPrinting.plusMinutes(THREAD_DUMP_PRINTING_MIN_DELAY_IN_MINUTES))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3139f02024123139fb121fff9ca4fa0b33b49239"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyNTkxOQ==", "bodyText": "\u0421\u043e\u0433\u043b\u0430\u0441\u0435\u043d, \u043d\u043e \u0443\u0436\u0435 \u043d\u0435\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e. \u0423\u0432\u0451\u0437 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u044d\u0434.", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445525919", "createdAt": "2020-06-25T12:40:05Z", "author": {"login": "pvorlov"}, "path": "nab-common/src/main/java/ru/hh/nab/common/executor/ThreadDiagnosticRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package ru.hh.nab.common.executor;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.time.LocalDateTime;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDiagnosticRejectedExecutionHandler implements RejectedExecutionHandler {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDiagnosticRejectedExecutionHandler.class);\n+  private static final int THREAD_DUMP_PRINTING_MIN_DELAY_IN_MINUTES = 5;\n+\n+  private volatile LocalDateTime lastThreadDumpPrinting;\n+\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    String threadPoolPhrase;\n+    if (executor instanceof MonitoredThreadPoolExecutor) {\n+      threadPoolPhrase = ((MonitoredThreadPoolExecutor) executor).getThreadPoolName() + \" thread pool\";\n+    } else {\n+      threadPoolPhrase = \"Thread pool\";\n+    }\n+    LOGGER.warn(\"{} is low on threads: size={}, activeCount={}, queueSize={}\",\n+        threadPoolPhrase, executor.getPoolSize(), executor.getActiveCount(), executor.getQueue().size());\n+\n+    var now = LocalDateTime.now();\n+    if (lastThreadDumpPrinting == null || now.isAfter(lastThreadDumpPrinting.plusMinutes(THREAD_DUMP_PRINTING_MIN_DELAY_IN_MINUTES))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2MTc3Ng=="}, "originalCommit": {"oid": "3139f02024123139fb121fff9ca4fa0b33b49239"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ2Mzc5OnYy", "diffSide": "RIGHT", "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyNDo0N1rOGo9LbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTozMDozNVrOGpAJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODU3Mw==", "bodyText": "\u0432\u0441\u0435 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434 \u043e\u0434\u0438\u043d try catch \u043f\u043e \u0438\u0434\u0435\u0435", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445598573", "createdAt": "2020-06-25T14:24:47Z", "author": {"login": "kincajou"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NzE2Mg==", "bodyText": "\u0433\u043e\u0442\u043e\u0432\u043e", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445647162", "createdAt": "2020-06-25T15:30:35Z", "author": {"login": "pvorlov"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODU3Mw=="}, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ2OTM4OnYy", "diffSide": "RIGHT", "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyNjowMFrOGo9OyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTozMDoyOVrOGpAJCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5OTQzMg==", "bodyText": "\u043d\u0430\u043f\u0438\u0448\u0438 \u0432 \u043b\u043e\u0433 \u0447\u0442\u043e \u043e\u043d \u0441\u0442\u043e\u043f\u0430\u043d\u0443\u043b\u0441\u044f, \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u043a \u043a\u043e\u0433\u0434\u0430 \u043e\u043d \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u0435\u0441\u043b\u0438 \u0432\u0434\u0440\u0443\u0433 \u043d\u0430\u0447\u043d\u0443\u0442\u0441\u044f \u0447\u0443\u0434\u0435\u0441\u0430 \u0438\u043d\u0442\u0435\u0440\u0440\u0430\u043f\u0442\u0430 \u0442\u043e \u0443\u0432\u0438\u0434\u0438\u0448\u044c \u043f\u0440\u043e \u044d\u0442\u043e \u0432 \u043b\u043e\u0433\u0435", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445599432", "createdAt": "2020-06-25T14:26:00Z", "author": {"login": "kincajou"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {\n+          Thread.sleep(delayMs);\n+        }\n+        catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NzExNA==", "bodyText": "\u0433\u043e\u0442\u043e\u0432\u043e", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445647114", "createdAt": "2020-06-25T15:30:29Z", "author": {"login": "pvorlov"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {\n+          Thread.sleep(delayMs);\n+        }\n+        catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5OTQzMg=="}, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjQ4NDA4OnYy", "diffSide": "RIGHT", "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDoyOToxOVrOGo9YbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTozMjo0NVrOGpAPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMTkwMQ==", "bodyText": "\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u043a\u043e\u043c \u0435\u0433\u043e \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c? \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c logLinesPattern \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c. \u041d\u0435 \u043c\u043e\u0433\u0443 \u0447\u0435\u0442\u043a\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a \u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0447\u0442\u043e \u043a\u0430\u043f\u0447\u0443\u0440\u0438\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043b\u044f\u043c\u0431\u0434\u044b \u0442\u0440\u0435\u0434\u0430 \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u0441\u0430\u043c\u043e\u0433\u043e ThreadDumpWriter \u043a\u0430\u043a-\u0442\u043e \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0447\u0442\u043e\u043b\u0438\n\u0430 \u0432\u043e\u0442 logLinesPattern, \u043a\u043e\u0442\u043e\u0440\u0430\u044f effictively final, \u043a\u0430\u043f\u0447\u0443\u0440\u0438\u0442\u044c \u043d\u043e\u0440\u043c", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445601901", "createdAt": "2020-06-25T14:29:19Z", "author": {"login": "kincajou"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {\n+          Thread.sleep(delayMs);\n+        }\n+        catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+      }\n+    }, \"ThreadDumpWriter-\" + name).start();\n+  }\n+\n+  public void tryDumpThreads() {\n+    queue.offer(1);\n+  }\n+\n+  private void writeThreadDump() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0ODY0OQ==", "bodyText": "\u0421\u0434\u0435\u043b\u0430\u043b, \u043d\u043e \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u0443\u0434\u0430 \u043f\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u044f \u0431\u044b \u043f\u043e\u0447\u0438\u0442\u0430\u043b ;)", "url": "https://github.com/hhru/nuts-and-bolts/pull/249#discussion_r445648649", "createdAt": "2020-06-25T15:32:45Z", "author": {"login": "pvorlov"}, "path": "nab-common/src/main/java/ru/hh/nab/common/util/ThreadDumpWriter.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ru.hh.nab.common.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ThreadDumpWriter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ThreadDumpWriter.class);\n+\n+  private final ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);\n+  private final Pattern logLinesPattern;\n+\n+  public ThreadDumpWriter(String name, int linesInLogMessage, long delayMs) {\n+    logLinesPattern = Pattern.compile(\"(?:[^\\\\n]+\\\\n+){\" + (linesInLogMessage - 1) + \"}[^\\\\n]+\");\n+\n+    new Thread(() -> {\n+      while (!Thread.currentThread().isInterrupted()) {\n+        try {\n+          queue.take();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+        writeThreadDump();\n+        try {\n+          Thread.sleep(delayMs);\n+        }\n+        catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+      }\n+    }, \"ThreadDumpWriter-\" + name).start();\n+  }\n+\n+  public void tryDumpThreads() {\n+    queue.offer(1);\n+  }\n+\n+  private void writeThreadDump() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMTkwMQ=="}, "originalCommit": {"oid": "46ae91065f0244c5aa41245d678840a4662f8f0b"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4245, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}