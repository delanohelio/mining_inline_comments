{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzQxODQ5", "number": 246, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxMzo0MVrOD-NcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowMTowM1rOD-O6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTU4NTQ3OnYy", "diffSide": "RIGHT", "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxMzo0MVrOGYK9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxMzo0MVrOGYK9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5ODYxOA==", "bodyText": "\u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438 consumerFactory.getConsumer \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e (\u0432\u043d\u0443\u0442\u0440\u0438 subscribe) \u0438 \u043d\u0430 \u043d\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443, \u043d\u043e \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u043e\u043d\u0441\u0443\u043c\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044e\u0437\u0430\u0435\u0442\u0441\u044f \u0432 \u0438\u0442\u043e\u0433\u0435 \u043d\u0430\u0431 \u043a\u0430\u0444\u043a\u043e\u0439.\n\u041f\u043e\u0434\u0443\u043c\u0430\u043b, \u0447\u0442\u043e \u043b\u0443\u0447\u0448\u0435\n\n\u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043e\u0432\u0435\u0440\u0445\u0435\u0434\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0441\u0443\u043c\u0435\u0440\u0430\n\u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u044d\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430\u0441\u044c \u043d\u0430 \u0442\u043e\u043c \u0436\u0435 \u043a\u043e\u043d\u0441\u0443\u043c\u0435\u0440\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 pool-\u0438\u0442\u044c", "url": "https://github.com/hhru/nuts-and-bolts/pull/246#discussion_r427998618", "createdAt": "2020-05-20T13:13:41Z", "author": {"login": "bokshitsky"}, "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package ru.hh.nab.kafka.consumer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+\n+class FailFastDefaultKafkaConsumerFactory<K, V> extends DefaultKafkaConsumerFactory<K, V> {\n+\n+  private final String topicName;\n+\n+  public FailFastDefaultKafkaConsumerFactory(String topicName,\n+                                             Map<String, Object> configs,\n+                                             Deserializer<K> keyDeserializer,\n+                                             Deserializer<V> valueDeserializer) {\n+    super(configs, keyDeserializer, valueDeserializer);\n+    this.topicName = topicName;\n+  }\n+\n+  @Override\n+  protected KafkaConsumer<K, V> createKafkaConsumer(String groupId, String clientIdPrefix, String clientIdSuffixArg, Properties properties) {\n+    KafkaConsumer<K, V> kafkaConsumer = super.createKafkaConsumer(groupId, clientIdPrefix, clientIdSuffixArg, properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38bac2978e16a1e703a24e14b0c6ee57edcf677"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTU5MTcxOnYy", "diffSide": "RIGHT", "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNTowMFrOGYLBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzoxNTowMFrOGYLBZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5OTU4OQ==", "bodyText": "\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u043d\u0430 \u0441\u0442\u0435\u043d\u0434\u043e\u0432\u043e\u0439 \u043a\u0430\u0444\u043a\u0435:\n\u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u0440\u0443\u0431\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0442\u043e\u043f\u0438\u043a\u0443\n\u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u0440\u0443\u0431\u0438\u0442\u044c\u0441\u044f \u043a \u0442\u043e\u043f\u0438\u043a\u0443, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u0442 \u043f\u0440\u0430\u0432 \u0443 \u044e\u0437\u0435\u0440\u0430 \u043a\u043e\u043d\u0441\u0443\u043c\u0435\u0440\u0430", "url": "https://github.com/hhru/nuts-and-bolts/pull/246#discussion_r427999589", "createdAt": "2020-05-20T13:15:00Z", "author": {"login": "bokshitsky"}, "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package ru.hh.nab.kafka.consumer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+\n+class FailFastDefaultKafkaConsumerFactory<K, V> extends DefaultKafkaConsumerFactory<K, V> {\n+\n+  private final String topicName;\n+\n+  public FailFastDefaultKafkaConsumerFactory(String topicName,\n+                                             Map<String, Object> configs,\n+                                             Deserializer<K> keyDeserializer,\n+                                             Deserializer<V> valueDeserializer) {\n+    super(configs, keyDeserializer, valueDeserializer);\n+    this.topicName = topicName;\n+  }\n+\n+  @Override\n+  protected KafkaConsumer<K, V> createKafkaConsumer(String groupId, String clientIdPrefix, String clientIdSuffixArg, Properties properties) {\n+    KafkaConsumer<K, V> kafkaConsumer = super.createKafkaConsumer(groupId, clientIdPrefix, clientIdSuffixArg, properties);\n+    List<PartitionInfo> partitions = kafkaConsumer.partitionsFor(topicName); // fail if user not authorized to access topic\n+    if (partitions == null || partitions.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38bac2978e16a1e703a24e14b0c6ee57edcf677"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgyNjAxOnYy", "diffSide": "RIGHT", "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowMTowM1rOGYNQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMTozMVrOGYNxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNjIyOA==", "bodyText": "\u043c\u0431 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442", "url": "https://github.com/hhru/nuts-and-bolts/pull/246#discussion_r428036228", "createdAt": "2020-05-20T14:01:03Z", "author": {"login": "Iskuskov"}, "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package ru.hh.nab.kafka.consumer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+\n+class FailFastDefaultKafkaConsumerFactory<K, V> extends DefaultKafkaConsumerFactory<K, V> {\n+\n+  private final String topicName;\n+\n+  public FailFastDefaultKafkaConsumerFactory(String topicName,\n+                                             Map<String, Object> configs,\n+                                             Deserializer<K> keyDeserializer,\n+                                             Deserializer<V> valueDeserializer) {\n+    super(configs, keyDeserializer, valueDeserializer);\n+    this.topicName = topicName;\n+  }\n+\n+  @Override\n+  protected KafkaConsumer<K, V> createKafkaConsumer(String groupId, String clientIdPrefix, String clientIdSuffixArg, Properties properties) {\n+    KafkaConsumer<K, V> kafkaConsumer = super.createKafkaConsumer(groupId, clientIdPrefix, clientIdSuffixArg, properties);\n+    List<PartitionInfo> partitions = kafkaConsumer.partitionsFor(topicName); // fail if user is not authorized to access topic\n+    if (partitions == null || partitions.isEmpty()) {\n+      // fail if topic does not exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a467e1ec6d030e093f103c0df71fb69fd2f2269"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NDYwMg==", "bodyText": "\u041d\u0435\u043e\u0445\u043e\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u0435\u043b\u0430\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 null/empty \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442", "url": "https://github.com/hhru/nuts-and-bolts/pull/246#discussion_r428044602", "createdAt": "2020-05-20T14:11:31Z", "author": {"login": "bokshitsky"}, "path": "nab-kafka/src/main/java/ru/hh/nab/kafka/consumer/FailFastDefaultKafkaConsumerFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package ru.hh.nab.kafka.consumer;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.PartitionInfo;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+\n+class FailFastDefaultKafkaConsumerFactory<K, V> extends DefaultKafkaConsumerFactory<K, V> {\n+\n+  private final String topicName;\n+\n+  public FailFastDefaultKafkaConsumerFactory(String topicName,\n+                                             Map<String, Object> configs,\n+                                             Deserializer<K> keyDeserializer,\n+                                             Deserializer<V> valueDeserializer) {\n+    super(configs, keyDeserializer, valueDeserializer);\n+    this.topicName = topicName;\n+  }\n+\n+  @Override\n+  protected KafkaConsumer<K, V> createKafkaConsumer(String groupId, String clientIdPrefix, String clientIdSuffixArg, Properties properties) {\n+    KafkaConsumer<K, V> kafkaConsumer = super.createKafkaConsumer(groupId, clientIdPrefix, clientIdSuffixArg, properties);\n+    List<PartitionInfo> partitions = kafkaConsumer.partitionsFor(topicName); // fail if user is not authorized to access topic\n+    if (partitions == null || partitions.isEmpty()) {\n+      // fail if topic does not exist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNjIyOA=="}, "originalCommit": {"oid": "2a467e1ec6d030e093f103c0df71fb69fd2f2269"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}