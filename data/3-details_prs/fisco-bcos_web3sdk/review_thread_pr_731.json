{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Njk2OTcz", "number": 731, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOFJ6Tsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0NFrOFJ6T6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODE4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0NQ==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911145", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\n+                    \" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0Nw==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911147", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0OA==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911148", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE0OQ==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911149", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1MA==", "bodyText": "[PMD Java] Overridable method 'init' called during object construction (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nConstructorCallsOverridableMethod\nError Prone\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911150", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDozOVrOIMb6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1MQ==", "bodyText": "[PMD Java] High amount of different objects as members denotes a high coupling (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCouplingBetweenObjects\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#couplingbetweenobjects\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911151", "createdAt": "2020-12-30T02:04:39Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Mg==", "bodyText": "[PMD Java] The class 'Service' has a total cyclomatic complexity of 184 (highest 17). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911152", "createdAt": "2020-12-30T02:04:40Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1NA==", "bodyText": "[PMD Java] The class 'ChannelConnections' has a total cyclomatic complexity of 133 (highest 23). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911154", "createdAt": "2020-12-30T02:04:40Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1NQ==", "bodyText": "[PMD Java] The method 'startConnect()' has a cyclomatic complexity of 11. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911155", "createdAt": "2020-12-30T02:04:40Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -387,7 +396,8 @@ public void startConnect() throws Exception {\n                     @Override\n                     public void initChannel(SocketChannel ch) throws Exception {\n                         /*\n-                         * Each connection is fetched from the socketChannel, using the new handler connection information\n+                         * Each connection is fetched from the socketChannel, using the new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Ng==", "bodyText": "[PMD Java] The method 'initSslContext()' has a cyclomatic complexity of 23. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911156", "createdAt": "2020-12-30T02:04:40Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -559,6 +569,11 @@ private SslContext initSslContext() throws SSLException {\n         SslContext sslCtx;\n         try {\n \n+            if (!isEnableOpenSSL()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/channel/ChannelEthereumService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MFrOIMb6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1Nw==", "bodyText": "[PMD Java] The method 'send(Request, Class)' has a cyclomatic complexity of 21. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911157", "createdAt": "2020-12-30T02:04:40Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/channel/ChannelEthereumService.java", "diffHunk": "@@ -92,26 +92,36 @@ public ChannelEthereumService() {\n                     }\n \n                     if (StatusCode.RevertInstruction.equals(callResult.getStatus())) {\n-                        throw new ContractCallException(\n-                                \"The execution of the contract rolled back\"\n-                                        + (revertMessage.getValue1()\n-                                                ? \", \" + revertMessage.getValue2()\n-                                                : \"\")\n-                                        + \".\");\n+                        ContractCallException contractCallException =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE1OQ==", "bodyText": "[PMD Java] The class 'JsonRpc2_0Web3j' has a total cyclomatic complexity of 87 (highest 3). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911159", "createdAt": "2020-12-30T02:04:41Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -357,6 +358,44 @@ public BigInteger getBlockLimit() {\n                 TransactionReceiptWithProof.class);\n     }\n \n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2Mg==", "bodyText": "[PMD Java] The class 'Block' has a total cyclomatic complexity of 107 (highest 40). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911162", "createdAt": "2020-12-30T02:04:41Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -44,7 +48,10 @@ public Block getBlock() {\n         private String gasLimit;\n         private String gasUsed;\n         private String timestamp;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ContractABIDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2Ng==", "bodyText": "[PMD Java] The class 'ContractABIDefinition' is suspected to be a Data Class (WOC=27.273%, NOPA=0, NOAM=8, WMC=14) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911166", "createdAt": "2020-12-30T02:04:41Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ContractABIDefinition.java", "diffHunk": "@@ -65,8 +65,8 @@ public void addFunction(String name, ABIDefinition abiDefinition) {\n         String methodId = abiDefinition.getMethodId();\n         methodIDToFunctions.put(methodId, abiDefinition);\n \n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\n+        if (logger.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlockHeader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MVrOIMb6gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE2OQ==", "bodyText": "[PMD Java] The class 'BlockHeader' is suspected to be a Data Class (WOC=11.429%, NOPA=0, NOAM=30, WMC=38) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911169", "createdAt": "2020-12-30T02:04:41Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlockHeader.java", "diffHunk": "@@ -51,7 +52,7 @@ public void setSignature(String signature) {\n         private String gasUsed;\n         private String hash;\n         private String logsBloom;\n-        private BigInteger number;\n+        private String number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3Mg==", "bodyText": "[PMD Java] The class 'BlockTransactionReceiptsInfo' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=5) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911172", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()\n+                        .readValue(jsonData, BlockTransactionReceiptsInfo.class);\n+\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\n+                    \" base64 pack size: {}, unzip size: {}, json size: {}\",\n+                    base64Data.length(),\n+                    zipData.length,\n+                    jsonData.length);\n+            logger.trace(\" block receipts: {}\", blockTransactionReceiptsInfo);\n+        }\n+\n+        return blockTransactionReceiptsInfo;\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3NA==", "bodyText": "[PMD Java] The class 'BlockInfo' is suspected to be a Data Class (WOC=11.111%, NOPA=0, NOAM=8, WMC=9) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911174", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()\n+                        .readValue(jsonData, BlockTransactionReceiptsInfo.class);\n+\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\n+                    \" base64 pack size: {}, unzip size: {}, json size: {}\",\n+                    base64Data.length(),\n+                    zipData.length,\n+                    jsonData.length);\n+            logger.trace(\" block receipts: {}\", blockTransactionReceiptsInfo);\n+        }\n+\n+        return blockTransactionReceiptsInfo;\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {\n+        private BlockInfo blockInfo;\n+        private List<TransactionReceipt> transactionReceipts;\n+\n+        public BlockInfo getBlockInfo() {\n+            return blockInfo;\n+        }\n+\n+        public void setBlockInfo(BlockInfo blockInfo) {\n+            this.blockInfo = blockInfo;\n+        }\n+\n+        public List<TransactionReceipt> getTransactionReceipts() {\n+            return transactionReceipts;\n+        }\n+\n+        public void setTransactionReceipts(List<TransactionReceipt> transactionReceipts) {\n+            this.transactionReceipts = transactionReceipts;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ReceiptsInfo{\"\n+                    + \"blockInfo=\"\n+                    + blockInfo\n+                    + \", transactionReceipts=\"\n+                    + transactionReceipts\n+                    + '}';\n+        }\n+    }\n+\n+    /** The transaction receipts common fields of the block */\n+    public static class BlockInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3Nw==", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotTerminateVM\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_errorprone.html#donotterminatevm\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911177", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE3OA==", "bodyText": "[PMD Java] Avoid really long classes. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveClassLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveclasslength\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911178", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4MA==", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911180", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0MlrOIMb6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4Mg==", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911182", "createdAt": "2020-12-30T02:04:42Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4NA==", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911184", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "diffHunk": "@@ -12,6 +12,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE4Nw==", "bodyText": "[PMD Java] A high number of imports can indicate a high degree of coupling within an object. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveImports\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessiveimports\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911187", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5MA==", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911190", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -387,7 +396,8 @@ public void startConnect() throws Exception {\n                     @Override\n                     public void initChannel(SocketChannel ch) throws Exception {\n                         /*\n-                         * Each connection is fetched from the socketChannel, using the new handler connection information\n+                         * Each connection is fetched from the socketChannel, using the new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5Mg==", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911192", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5NQ==", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911195", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -89,6 +89,7 @@\n     private long reconnectDelay = (long) 20000;\n     private long connectTimeout = (long) 10000;\n     private long sslHandShakeTimeout = (long) 10000;\n+    private boolean enableOpenSSL = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5Nw==", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911197", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/Ethereum.java", "diffHunk": "@@ -12,6 +12,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0M1rOIMb6nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTE5OQ==", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911199", "createdAt": "2020-12-30T02:04:43Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/JsonRpc2_0Web3j.java", "diffHunk": "@@ -23,6 +23,7 @@\n import org.fisco.bcos.web3j.protocol.core.methods.response.BcosTransactionReceipt;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockHash;\n import org.fisco.bcos.web3j.protocol.core.methods.response.BlockNumber;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0NFrOIMb6og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0NFrOIMb6og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTIwMg==", "bodyText": "[PMD Java] This class has a bunch of public methods and attributes (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessivePublicCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#excessivepubliccount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911202", "createdAt": "2020-12-30T02:04:44Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -1,11 +1,15 @@\n package org.fisco.bcos.web3j.protocol.core.methods.response;\n \n+import com.fasterxml.jackson.core.JsonGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM2ODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0NFrOIMb6ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNDo0NFrOIMb6ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTIwMw==", "bodyText": "[PMD Java] Possible God Class (WMC=184, ATFD=527, TCC=21.283%) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nGodClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.30.0/pmd_rules_java_design.html#godclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/731#discussion_r549911203", "createdAt": "2020-12-30T02:04:44Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/channel/client/Service.java", "diffHunk": "@@ -297,6 +297,7 @@ public void initJavaOpt() {\n         logger.info(\" #jdk.disabled.namedCurves. \");\n \n         Security.setProperty(\"jdk.disabled.namedCurves\", \"\");\n+        System.setProperty(\"jdk.sunec.disableNative\", \"false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33655c8451cf14e7c016aab6859a9b89fdc3b72a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 631, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}