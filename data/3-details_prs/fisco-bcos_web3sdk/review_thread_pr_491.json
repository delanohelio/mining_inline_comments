{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDAwMjg3", "number": 491, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0MlrODYvO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0OFrODYvPAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2Mjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/P12Manager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0MlrOFexGEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0MlrOFexGEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk2OQ==", "bodyText": "Issue found: Avoid unused private fields such as 'logger'.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805969", "createdAt": "2020-01-17T07:52:42Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/client/P12Manager.java", "diffHunk": "@@ -23,11 +23,16 @@\n import org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.core.io.support.ResourcePatternResolver;\n \n public class P12Manager {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(P12Manager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2Mjk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ConnectionInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NFrOFexGGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NFrOFexGGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk3Ng==", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805976", "createdAt": "2020-01-17T07:52:44Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ConnectionInfo.java", "diffHunk": "@@ -44,10 +48,16 @@ public void setTopics(List<String> topics) {\n         this.topics = topics;\n     }\n \n-    private String nodeID = \"\";\n+    @Deprecated private String nodeID = \"\";\n+    @Deprecated private Boolean config = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2Mjk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NVrOFexGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NVrOFexGGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk3Nw==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805977", "createdAt": "2020-01-17T07:52:45Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -206,22 +216,15 @@ public ChannelHandlerContext randomNetworkConnection(\n             ConcurrentHashMap<String, BigInteger> nodeToBlockNumberMap) throws Exception {\n         List<ChannelHandlerContext> activeConnections = new ArrayList<ChannelHandlerContext>();\n \n-        getReadWriteLock().readLock().lock();\n-        try {\n-            for (String key : networkConnections.keySet()) {\n-                if (networkConnections.get(key) != null\n-                        && ChannelHandlerContextHelper.isChannelAvailable(\n-                                networkConnections.get(key))) {\n-                    activeConnections.add(networkConnections.get(key));\n-                }\n+        for (ChannelHandlerContext ctx : networkConnections.values()) {\n+            if (Objects.nonNull(ctx) && ChannelHandlerContextHelper.isChannelAvailable(ctx)) {\n+                activeConnections.add(ctx);\n             }\n-        } finally {\n-            getReadWriteLock().readLock().unlock();\n         }\n \n         if (activeConnections.isEmpty()) {\n-            logger.error(\"activeConnections isEmpty\");\n-            throw new Exception(\"activeConnections isEmpty\");\n+            logger.error(\" no active connection is available, maybe network connection exception\");\n+            throw new Exception(\" no active connection available network exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2Mjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/client/PEMManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NlrOFexGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0NlrOFexGHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk4MQ==", "bodyText": "Issue found: Avoid unused private fields such as 'logger'.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805981", "createdAt": "2020-01-17T07:52:46Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/client/PEMManager.java", "diffHunk": "@@ -25,11 +25,16 @@\n import org.bouncycastle.util.io.pem.PemObject;\r\n import org.bouncycastle.util.io.pem.PemReader;\r\n import org.fisco.bcos.web3j.crypto.ECKeyPair;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n import org.springframework.core.io.Resource;\r\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\r\n import org.springframework.core.io.support.ResourcePatternResolver;\r\n \r\n public class PEMManager {\r\n+\r\n+    private static final Logger logger = LoggerFactory.getLogger(PEMManager.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2MzA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0N1rOFexGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0N1rOFexGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk4OA==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805988", "createdAt": "2020-01-17T07:52:47Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ChannelConnections.java", "diffHunk": "@@ -446,29 +503,81 @@ public void initChannel(SocketChannel ch) throws Exception {\n                     }\n                 });\n \n+        List<Tuple3<String, Integer, ChannelFuture>> tuple3List = new ArrayList<>();\n+        // try to connect to all nodes\n+        for (ConnectionInfo connectionInfo : connections) {\n+            String IP = connectionInfo.getHost();\n+            Integer port = connectionInfo.getPort();\n+\n+            ChannelFuture channelFuture = bootstrap.connect(IP, port);\n+            tuple3List.add(new Tuple3<>(IP, port, channelFuture));\n+        }\n+\n+        boolean atLeastOneConnectSuccess = false;\n+        List<String> errorMessageList = new ArrayList<>();\n+        // Wait for all connection operations to complete\n+        for (Tuple3<String, Integer, ChannelFuture> tuple3 : tuple3List) {\n+            ChannelFuture connectFuture = tuple3.getValue3().awaitUninterruptibly();\n+            if (!connectFuture.isSuccess()) {\n+                logger.error(\n+                        \" connect to {}:{}, error: {}\",\n+                        tuple3.getValue1(),\n+                        tuple3.getValue2(),\n+                        connectFuture.cause().getMessage());\n+\n+                String connectFailedMessage =\n+                        Objects.isNull(connectFuture.cause())\n+                                ? \"connect to \"\n+                                        + tuple3.getValue1()\n+                                        + \":\"\n+                                        + tuple3.getValue2()\n+                                        + \" failed\"\n+                                : connectFuture.cause().getMessage();\n+                errorMessageList.add(connectFailedMessage);\n+            } else {\n+                // tcp connect success and waiting for SSL handshake\n+                logger.trace(\" connect to {}:{} success\", tuple3.getValue1(), tuple3.getValue2());\n+\n+                SslHandler sslhandler = connectFuture.channel().pipeline().get(SslHandler.class);\n+                Future<Channel> sshHandshakeFuture =\n+                        sslhandler.handshakeFuture().awaitUninterruptibly();\n+                if (sshHandshakeFuture.isSuccess()) {\n+                    atLeastOneConnectSuccess = true;\n+                    logger.trace(\n+                            \" ssl handshake success {}:{}\", tuple3.getValue1(), tuple3.getValue2());\n+                } else {\n+\n+                    String sslHandshakeFailedMessage =\n+                            \" ssl handshake failed:/\"\n+                                    + tuple3.getValue1()\n+                                    + \":\"\n+                                    + tuple3.getValue2();\n+\n+                    errorMessageList.add(sslHandshakeFailedMessage);\n+                }\n+            }\n+        }\n+\n+        // All connections failed\n+        if (!atLeastOneConnectSuccess) {\n+            logger.error(\" all connections have failed, \" + errorMessageList.toString());\n+            throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 361}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjY2MzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/channel/handler/ConnectionInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0OFrOFexGKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzo1Mjo0OFrOFexGKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwNTk5Mg==", "bodyText": "Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/491#discussion_r367805992", "createdAt": "2020-01-17T07:52:48Z", "author": {"login": "bxq2011hust"}, "path": "src/main/java/org/fisco/bcos/channel/handler/ConnectionInfo.java", "diffHunk": "@@ -44,10 +48,16 @@ public void setTopics(List<String> topics) {\n         this.topics = topics;\n     }\n \n-    private String nodeID = \"\";\n+    @Deprecated private String nodeID = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62dbeb88ad47bf639d2fb3f3fb32cb175a6de8f9"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 736, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}