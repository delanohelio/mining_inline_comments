{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTgwNDcw", "number": 708, "title": "add missing transaction fields and add hash interface to calclualte the hash", "bodyText": "", "createdAt": "2020-09-28T08:36:10Z", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708", "merged": true, "mergeCommit": {"oid": "78553b97e3dc7104a38a71df1d2dc3b20b25c2c2"}, "closed": true, "closedAt": "2020-09-28T09:00:39Z", "author": {"login": "cyjseagull"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNPaQFAH2gAyNDkzOTgwNDcwOjZmNTBhZmY2ZDNhYWE3Y2UzNmVjMmNkMDVhMzE0ZDkzZDFiYmZkY2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNPhtngFqTQ5NzMwMzAyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca", "author": {"user": {"login": "cyjseagull", "name": "cyjseagull"}}, "url": "https://github.com/FISCO-BCOS/web3sdk/commit/6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca", "committedDate": "2020-09-28T08:35:30Z", "message": "add missing transaction fields and add hash interface to calclualte the hash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Mjk4MTU0", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#pullrequestreview-497298154", "createdAt": "2020-09-28T08:37:00Z", "commit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "state": "COMMENTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzowMFrOHYzxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzowNlrOHYzxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA2Mg==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776062", "createdAt": "2020-09-28T08:37:00Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -308,6 +327,58 @@ public void setSealerList(List<String> sealerList) {\n             this.sealerList = sealerList;\n         }\n \n+        private byte[] encodeBlockHeader() {\n+            List<RlpType> encodedRlp = new ArrayList<>();\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(parentHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(stateRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(transactionsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(receiptsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(dbHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(logsBloom)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(number)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasLimit)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasUsed)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(timestamp)));\n+\n+            List<RlpType> extraDataRlp = new ArrayList<>();\n+            for (String data : extraData) {\n+                extraDataRlp.add(RlpString.create(Numeric.hexStringToByteArray(data)));\n+            }\n+            encodedRlp.add(new RlpList(extraDataRlp));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(sealer)));\n+            List<RlpType> sealerListRlp = new ArrayList<>();\n+            for (String sealerString : sealerList) {\n+                sealerListRlp.add(RlpString.create(Numeric.hexStringToByteArray(sealerString)));\n+            }\n+            encodedRlp.add(new RlpList(sealerListRlp));\n+            RlpList rlpList = new RlpList(encodedRlp);\n+            return RlpEncoder.encode(rlpList);\n+        }\n+\n+        public String calculateHash() throws RuntimeException {\n+            return calculateHash(Hash.getHashInterface());\n+        }\n+\n+        // calculate hash for the block or the block header\n+        public String calculateHash(HashInterface hashInterface) throws RuntimeException {\n+            try {\n+                byte[] hash = hashInterface.hash(encodeBlockHeader());\n+                return \"0x\" + Hex.toHexString(hash);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA2NA==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776064", "createdAt": "2020-09-28T08:37:01Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {\n+            // Note: shouldn't trimLeadingZeroes here for the Pub must be with the length of 64\n+            // Bytes\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getV())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        } else {\n+            // the v must add vBase\n+            int vWithVBase = Numeric.decodeQuantity(signature.getV()).intValue() + 27;\n+            result.add(RlpString.create((byte) vWithVBase));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        }\n+        return result;\n+    }\n+\n+    // calculate the hash for the transaction\n+    public String calculateHash(int cryptoType) throws RuntimeException {\n+        try {\n+            List<RlpType> encodedTransaction = encodeTransactionResponse(cryptoType);\n+            RlpList rlpList = new RlpList(encodedTransaction);\n+            HashInterface hashInterface;\n+            if (cryptoType == EncryptType.ECDSA_TYPE) {\n+                hashInterface = new SHA3Digest();\n+            } else {\n+                hashInterface = new SM3Digest();\n+            }\n+            return \"0x\" + Hex.toHexString(hashInterface.hash(RlpEncoder.encode(rlpList)));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA2NQ==", "bodyText": "[PMD Java] The String literal \"{\\n\" appears 4 times in this file; the first occurrence is on line 56 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776065", "createdAt": "2020-09-28T08:37:01Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA2OQ==", "bodyText": "[PMD Java] The String literal \"  \"id\": 1,\\n\" appears 4 times in this file; the first occurrence is on line 57 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776069", "createdAt": "2020-09-28T08:37:01Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA3MQ==", "bodyText": "[PMD Java] The String literal \"  \"jsonrpc\": \"2.0\",\\n\" appears 4 times in this file; the first occurrence is on line 58 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776071", "createdAt": "2020-09-28T08:37:01Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA3Mg==", "bodyText": "[PMD Java] The String literal \"  \"result\": {\\n\" appears 4 times in this file; the first occurrence is on line 59 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776072", "createdAt": "2020-09-28T08:37:02Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA3NA==", "bodyText": "[PMD Java] The String literal \"  }\\n\" appears 4 times in this file; the first occurrence is on line 81 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776074", "createdAt": "2020-09-28T08:37:02Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA3OA==", "bodyText": "[PMD Java] The String literal \"    ],\\n\" appears 4 times in this file; the first occurrence is on line 113 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776078", "createdAt": "2020-09-28T08:37:02Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());\n+    }\n+\n+    @Test\n+    public void testSMGetBlockAndCalculateHash() throws IOException {\n+        String blockHeaderStr =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"dbHash\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"extraData\\\": [],\\n\"\n+                        + \"    \\\"gasLimit\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"gasUsed\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0xc5360efd06024b02340eb2afa283fe022f57791e888f22366b77d6218a247a13\\\",\\n\"\n+                        + \"    \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"number\\\": 1,\\n\"\n+                        + \"    \\\"parentHash\\\": \\\"0x7e1b0fc3efa8026f282bfa994d3a79305542d5ad3ea65b84a8d72b152f15dfb1\\\",\\n\"\n+                        + \"    \\\"receiptsRoot\\\": \\\"0xd748b478e6b8f90e049f7a4a9d2b9acf76624baed8c2abe0e868b33cd5e989e5\\\",\\n\"\n+                        + \"    \\\"sealer\\\": \\\"0x3\\\",\\n\"\n+                        + \"    \\\"sealerList\\\": [\\n\"\n+                        + \"      \\\"1daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\",\\n\"\n+                        + \"      \\\"2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\",\\n\"\n+                        + \"      \\\"4905b78b643c19c03e7b8e6779fca2a3e917baa317e8d2abde6daec543d375ac5052aeda22fda7e174c780e04afd215f965237a809e814369a05bb90b965a6ed\\\",\\n\"\n+                        + \"      \\\"86f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"    ],\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA4MQ==", "bodyText": "[PMD Java] The String literal \"      {\\n\" appears 6 times in this file; the first occurrence is on line 115 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776081", "createdAt": "2020-09-28T08:37:02Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());\n+    }\n+\n+    @Test\n+    public void testSMGetBlockAndCalculateHash() throws IOException {\n+        String blockHeaderStr =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"dbHash\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"extraData\\\": [],\\n\"\n+                        + \"    \\\"gasLimit\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"gasUsed\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0xc5360efd06024b02340eb2afa283fe022f57791e888f22366b77d6218a247a13\\\",\\n\"\n+                        + \"    \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"number\\\": 1,\\n\"\n+                        + \"    \\\"parentHash\\\": \\\"0x7e1b0fc3efa8026f282bfa994d3a79305542d5ad3ea65b84a8d72b152f15dfb1\\\",\\n\"\n+                        + \"    \\\"receiptsRoot\\\": \\\"0xd748b478e6b8f90e049f7a4a9d2b9acf76624baed8c2abe0e868b33cd5e989e5\\\",\\n\"\n+                        + \"    \\\"sealer\\\": \\\"0x3\\\",\\n\"\n+                        + \"    \\\"sealerList\\\": [\\n\"\n+                        + \"      \\\"1daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\",\\n\"\n+                        + \"      \\\"2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\",\\n\"\n+                        + \"      \\\"4905b78b643c19c03e7b8e6779fca2a3e917baa317e8d2abde6daec543d375ac5052aeda22fda7e174c780e04afd215f965237a809e814369a05bb90b965a6ed\\\",\\n\"\n+                        + \"      \\\"86f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"signatureList\\\": [\\n\"\n+                        + \"      {\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA4NA==", "bodyText": "[PMD Java] The String literal \"      },\\n\" appears 4 times in this file; the first occurrence is on line 118 (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidDuplicateLiterals\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776084", "createdAt": "2020-09-28T08:37:02Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());\n+    }\n+\n+    @Test\n+    public void testSMGetBlockAndCalculateHash() throws IOException {\n+        String blockHeaderStr =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"dbHash\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"extraData\\\": [],\\n\"\n+                        + \"    \\\"gasLimit\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"gasUsed\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0xc5360efd06024b02340eb2afa283fe022f57791e888f22366b77d6218a247a13\\\",\\n\"\n+                        + \"    \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"number\\\": 1,\\n\"\n+                        + \"    \\\"parentHash\\\": \\\"0x7e1b0fc3efa8026f282bfa994d3a79305542d5ad3ea65b84a8d72b152f15dfb1\\\",\\n\"\n+                        + \"    \\\"receiptsRoot\\\": \\\"0xd748b478e6b8f90e049f7a4a9d2b9acf76624baed8c2abe0e868b33cd5e989e5\\\",\\n\"\n+                        + \"    \\\"sealer\\\": \\\"0x3\\\",\\n\"\n+                        + \"    \\\"sealerList\\\": [\\n\"\n+                        + \"      \\\"1daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\",\\n\"\n+                        + \"      \\\"2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\",\\n\"\n+                        + \"      \\\"4905b78b643c19c03e7b8e6779fca2a3e917baa317e8d2abde6daec543d375ac5052aeda22fda7e174c780e04afd215f965237a809e814369a05bb90b965a6ed\\\",\\n\"\n+                        + \"      \\\"86f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"signatureList\\\": [\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x0\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0xa99fcb5298a5dd39644af81b2c3ebd9839ffa9f2cb65c6c8b9f2b84b8804c93cf836cb45059cdefe8767ea922e0141318da7ffcc6d0d9db2b0cfa23638bc86591daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\"\\n\"\n+                        + \"      },\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA4Ng==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776086", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA4OQ==", "bodyText": "[PMD Java] Avoid throwing raw exception types. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidThrowingRawExceptionTypes\nDesign\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776089", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -308,6 +327,58 @@ public void setSealerList(List<String> sealerList) {\n             this.sealerList = sealerList;\n         }\n \n+        private byte[] encodeBlockHeader() {\n+            List<RlpType> encodedRlp = new ArrayList<>();\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(parentHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(stateRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(transactionsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(receiptsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(dbHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(logsBloom)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(number)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasLimit)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasUsed)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(timestamp)));\n+\n+            List<RlpType> extraDataRlp = new ArrayList<>();\n+            for (String data : extraData) {\n+                extraDataRlp.add(RlpString.create(Numeric.hexStringToByteArray(data)));\n+            }\n+            encodedRlp.add(new RlpList(extraDataRlp));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(sealer)));\n+            List<RlpType> sealerListRlp = new ArrayList<>();\n+            for (String sealerString : sealerList) {\n+                sealerListRlp.add(RlpString.create(Numeric.hexStringToByteArray(sealerString)));\n+            }\n+            encodedRlp.add(new RlpList(sealerListRlp));\n+            RlpList rlpList = new RlpList(encodedRlp);\n+            return RlpEncoder.encode(rlpList);\n+        }\n+\n+        public String calculateHash() throws RuntimeException {\n+            return calculateHash(Hash.getHashInterface());\n+        }\n+\n+        // calculate hash for the block or the block header\n+        public String calculateHash(HashInterface hashInterface) throws RuntimeException {\n+            try {\n+                byte[] hash = hashInterface.hash(encodeBlockHeader());\n+                return \"0x\" + Hex.toHexString(hash);\n+            } catch (Exception e) {\n+                logger.warn(\n+                        \"calculateHash for the block failed, blockNumber: {}, blockHash: {}, error info: {}\",\n+                        hash,\n+                        number,\n+                        e.getMessage());\n+                throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA5Mw==", "bodyText": "[PMD Java] Avoid throwing raw exception types. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidThrowingRawExceptionTypes\nDesign\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776093", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjA5Nw==", "bodyText": "[PMD Java] Avoid throwing raw exception types. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidThrowingRawExceptionTypes\nDesign\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776097", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {\n+            // Note: shouldn't trimLeadingZeroes here for the Pub must be with the length of 64\n+            // Bytes\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getV())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        } else {\n+            // the v must add vBase\n+            int vWithVBase = Numeric.decodeQuantity(signature.getV()).intValue() + 27;\n+            result.add(RlpString.create((byte) vWithVBase));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        }\n+        return result;\n+    }\n+\n+    // calculate the hash for the transaction\n+    public String calculateHash(int cryptoType) throws RuntimeException {\n+        try {\n+            List<RlpType> encodedTransaction = encodeTransactionResponse(cryptoType);\n+            RlpList rlpList = new RlpList(encodedTransaction);\n+            HashInterface hashInterface;\n+            if (cryptoType == EncryptType.ECDSA_TYPE) {\n+                hashInterface = new SHA3Digest();\n+            } else {\n+                hashInterface = new SM3Digest();\n+            }\n+            return \"0x\" + Hex.toHexString(hashInterface.hash(RlpEncoder.encode(rlpList)));\n+        } catch (Exception e) {\n+            logger.warn(\n+                    \"calculate hash for the transaction failed, blockHash: {}, blockNumber: {}, transactionHash: {}, error info: {}\",\n+                    blockHash,\n+                    blockNumber,\n+                    hash,\n+                    e);\n+            throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEwMA==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776100", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -308,6 +327,58 @@ public void setSealerList(List<String> sealerList) {\n             this.sealerList = sealerList;\n         }\n \n+        private byte[] encodeBlockHeader() {\n+            List<RlpType> encodedRlp = new ArrayList<>();\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(parentHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(stateRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(transactionsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(receiptsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(dbHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(logsBloom)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(number)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasLimit)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasUsed)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(timestamp)));\n+\n+            List<RlpType> extraDataRlp = new ArrayList<>();\n+            for (String data : extraData) {\n+                extraDataRlp.add(RlpString.create(Numeric.hexStringToByteArray(data)));\n+            }\n+            encodedRlp.add(new RlpList(extraDataRlp));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(sealer)));\n+            List<RlpType> sealerListRlp = new ArrayList<>();\n+            for (String sealerString : sealerList) {\n+                sealerListRlp.add(RlpString.create(Numeric.hexStringToByteArray(sealerString)));\n+            }\n+            encodedRlp.add(new RlpList(sealerListRlp));\n+            RlpList rlpList = new RlpList(encodedRlp);\n+            return RlpEncoder.encode(rlpList);\n+        }\n+\n+        public String calculateHash() throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEwMg==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776102", "createdAt": "2020-09-28T08:37:03Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BcosBlock.java", "diffHunk": "@@ -308,6 +327,58 @@ public void setSealerList(List<String> sealerList) {\n             this.sealerList = sealerList;\n         }\n \n+        private byte[] encodeBlockHeader() {\n+            List<RlpType> encodedRlp = new ArrayList<>();\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(parentHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(stateRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(transactionsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(receiptsRoot)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(dbHash)));\n+            encodedRlp.add(RlpString.create(Numeric.hexStringToByteArray(logsBloom)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(number)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasLimit)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(gasUsed)));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(timestamp)));\n+\n+            List<RlpType> extraDataRlp = new ArrayList<>();\n+            for (String data : extraData) {\n+                extraDataRlp.add(RlpString.create(Numeric.hexStringToByteArray(data)));\n+            }\n+            encodedRlp.add(new RlpList(extraDataRlp));\n+            encodedRlp.add(RlpString.create(Numeric.decodeQuantity(sealer)));\n+            List<RlpType> sealerListRlp = new ArrayList<>();\n+            for (String sealerString : sealerList) {\n+                sealerListRlp.add(RlpString.create(Numeric.hexStringToByteArray(sealerString)));\n+            }\n+            encodedRlp.add(new RlpList(sealerListRlp));\n+            RlpList rlpList = new RlpList(encodedRlp);\n+            return RlpEncoder.encode(rlpList);\n+        }\n+\n+        public String calculateHash() throws RuntimeException {\n+            return calculateHash(Hash.getHashInterface());\n+        }\n+\n+        // calculate hash for the block or the block header\n+        public String calculateHash(HashInterface hashInterface) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEwNA==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776104", "createdAt": "2020-09-28T08:37:04Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEwOA==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776108", "createdAt": "2020-09-28T08:37:04Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {\n+            // Note: shouldn't trimLeadingZeroes here for the Pub must be with the length of 64\n+            // Bytes\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getV())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        } else {\n+            // the v must add vBase\n+            int vWithVBase = Numeric.decodeQuantity(signature.getV()).intValue() + 27;\n+            result.add(RlpString.create((byte) vWithVBase));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        }\n+        return result;\n+    }\n+\n+    // calculate the hash for the transaction\n+    public String calculateHash(int cryptoType) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjExMQ==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776111", "createdAt": "2020-09-28T08:37:04Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {\n+            // Note: shouldn't trimLeadingZeroes here for the Pub must be with the length of 64\n+            // Bytes\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getV())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        } else {\n+            // the v must add vBase\n+            int vWithVBase = Numeric.decodeQuantity(signature.getV()).intValue() + 27;\n+            result.add(RlpString.create((byte) vWithVBase));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        }\n+        return result;\n+    }\n+\n+    // calculate the hash for the transaction\n+    public String calculateHash(int cryptoType) throws RuntimeException {\n+        try {\n+            List<RlpType> encodedTransaction = encodeTransactionResponse(cryptoType);\n+            RlpList rlpList = new RlpList(encodedTransaction);\n+            HashInterface hashInterface;\n+            if (cryptoType == EncryptType.ECDSA_TYPE) {\n+                hashInterface = new SHA3Digest();\n+            } else {\n+                hashInterface = new SM3Digest();\n+            }\n+            return \"0x\" + Hex.toHexString(hashInterface.hash(RlpEncoder.encode(rlpList)));\n+        } catch (Exception e) {\n+            logger.warn(\n+                    \"calculate hash for the transaction failed, blockHash: {}, blockNumber: {}, transactionHash: {}, error info: {}\",\n+                    blockHash,\n+                    blockNumber,\n+                    hash,\n+                    e);\n+            throw new RuntimeException(\n+                    \"calculate hash for transaction \" + hash + \" failed for \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    public String calculateHash() throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjExMw==", "bodyText": "[PMD Java] The method 'encodeTransactionResponse(int)' has a cyclomatic complexity of 10. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776113", "createdAt": "2020-09-28T08:37:04Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjExOA==", "bodyText": "[PMD Java] The class 'SignatureResponse' is suspected to be a Data Class (WOC=27.273%, NOPA=0, NOAM=8, WMC=14) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776118", "createdAt": "2020-09-28T08:37:04Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -22,6 +37,84 @@\n     private String r;\n     private String s;\n     private int v; // see https://github.com/web3j/web3j/issues/44\n+    private String blockLimit;\n+    private String chainId;\n+    private String groupId;\n+    private String extraData;\n+    private SignatureResponse signature;\n+\n+    public class SignatureResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEyMA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776120", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEyMg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776122", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/Transaction.java", "diffHunk": "@@ -233,6 +326,133 @@ public void setV(Object v) {\n         }\n     }\n \n+    public void setV(int v) {\n+        this.v = v;\n+    }\n+\n+    public String getBlockLimit() {\n+        return blockLimit;\n+    }\n+\n+    public void setBlockLimit(String blockLimit) {\n+        this.blockLimit = blockLimit;\n+    }\n+\n+    public String getChainId() {\n+        return chainId;\n+    }\n+\n+    public void setChainId(String chainId) {\n+        this.chainId = chainId;\n+    }\n+\n+    public String getGroupId() {\n+        return groupId;\n+    }\n+\n+    public void setGroupId(String groupId) {\n+        this.groupId = groupId;\n+    }\n+\n+    public String getExtraData() {\n+        return extraData;\n+    }\n+\n+    public void setExtraData(String extraData) {\n+        this.extraData = extraData;\n+    }\n+\n+    public SignatureResponse getSignature() {\n+        return signature;\n+    }\n+\n+    public void setSignature(SignatureResponse signature) {\n+        this.signature = signature;\n+    }\n+\n+    private List<RlpType> encodeTransactionResponse(int cryptoType) throws RuntimeException {\n+        if (blockLimit == null\n+                || chainId == null\n+                || groupId == null\n+                || extraData == null\n+                || signature == null) {\n+            throw new RuntimeException(\n+                    \"calculate hash for the transaction failed for missing fields! Please make sure FISCO BCOS version >= v2.7.0\");\n+        }\n+        List<RlpType> result = new ArrayList<>();\n+        // nonce\n+        result.add(RlpString.create(Numeric.decodeQuantity(nonce)));\n+        // gasPrice\n+        result.add(RlpString.create(Numeric.decodeQuantity(gasPrice)));\n+        // gas\n+        result.add(RlpString.create(Numeric.decodeQuantity(gas)));\n+        // blockLimit\n+        result.add(RlpString.create(Numeric.decodeQuantity(blockLimit)));\n+        // to\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n+        // value\n+        result.add(RlpString.create(Numeric.decodeQuantity(value)));\n+        // input\n+        result.add(RlpString.create(Numeric.hexStringToByteArray(input)));\n+        // chainId\n+        result.add(RlpString.create(Numeric.decodeQuantity(chainId)));\n+        // groupId\n+        result.add(RlpString.create(Numeric.decodeQuantity(groupId)));\n+        // extraData\n+        if (extraData.equals(\"0x\")) {\n+            result.add(RlpString.create(\"\"));\n+        } else {\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(extraData)));\n+        }\n+        int startIndex = 0;\n+        if (signature.getSignature().startsWith(\"0x\")) {\n+            startIndex = 2;\n+        }\n+        // signature\n+        if (cryptoType == 1) {\n+            // Note: shouldn't trimLeadingZeroes here for the Pub must be with the length of 64\n+            // Bytes\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getV())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getR())));\n+            result.add(RlpString.create(Numeric.hexStringToByteArray(signature.getS())));\n+        } else {\n+            // the v must add vBase\n+            int vWithVBase = Numeric.decodeQuantity(signature.getV()).intValue() + 27;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEyNQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776125", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEyOA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776128", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEzMQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776131", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEzMw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776133", "createdAt": "2020-09-28T08:37:05Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjEzNg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776136", "createdAt": "2020-09-28T08:37:06Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjE0MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776140", "createdAt": "2020-09-28T08:37:06Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());\n+    }\n+\n+    @Test\n+    public void testSMGetBlockAndCalculateHash() throws IOException {\n+        String blockHeaderStr =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"dbHash\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"extraData\\\": [],\\n\"\n+                        + \"    \\\"gasLimit\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"gasUsed\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0xc5360efd06024b02340eb2afa283fe022f57791e888f22366b77d6218a247a13\\\",\\n\"\n+                        + \"    \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"number\\\": 1,\\n\"\n+                        + \"    \\\"parentHash\\\": \\\"0x7e1b0fc3efa8026f282bfa994d3a79305542d5ad3ea65b84a8d72b152f15dfb1\\\",\\n\"\n+                        + \"    \\\"receiptsRoot\\\": \\\"0xd748b478e6b8f90e049f7a4a9d2b9acf76624baed8c2abe0e868b33cd5e989e5\\\",\\n\"\n+                        + \"    \\\"sealer\\\": \\\"0x3\\\",\\n\"\n+                        + \"    \\\"sealerList\\\": [\\n\"\n+                        + \"      \\\"1daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\",\\n\"\n+                        + \"      \\\"2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\",\\n\"\n+                        + \"      \\\"4905b78b643c19c03e7b8e6779fca2a3e917baa317e8d2abde6daec543d375ac5052aeda22fda7e174c780e04afd215f965237a809e814369a05bb90b965a6ed\\\",\\n\"\n+                        + \"      \\\"86f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"signatureList\\\": [\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x0\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0xa99fcb5298a5dd39644af81b2c3ebd9839ffa9f2cb65c6c8b9f2b84b8804c93cf836cb45059cdefe8767ea922e0141318da7ffcc6d0d9db2b0cfa23638bc86591daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\"\\n\"\n+                        + \"      },\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x3\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0x1addc8032fbca41e31afb429dd2f749653492684fcc7845acb4558d5b09095a311a2d965c2a59133b497cb2553c23f29c6613ca0d312acb4f9fd93df602936f686f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"      },\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x1\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0xd2831bc1b60ce6a0bf71bd89d312b57ef9ad211b4efea3f8bfd38387998d547f5db59ce870a65d16d98a344c85ce0f2e22d371ce455eef0a8c9566f5fa7f71ec2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\"\\n\"\n+                        + \"      }\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"stateRoot\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"timestamp\\\": \\\"0x174ce4a8931\\\",\\n\"\n+                        + \"    \\\"transactionsRoot\\\": \\\"0x60368d2fde59f678e096418d521b53fce8355fb8bca1448d4bb6f5209376e7fc\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosBlock bcosBlock = objectMapper.readValue(blockHeaderStr.getBytes(), BcosBlock.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjE0NQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#discussion_r495776145", "createdAt": "2020-09-28T08:37:06Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/block/MockBlockTest.java", "diffHunk": "@@ -43,4 +49,177 @@ public void getBlockNumber() throws IOException {\n         assertEquals(mockBlock.getNonce(), new BigInteger(\"0\"));\n         assertTrue(mockBlock.getNumber().intValue() == 1);\n     }\n+\n+    @Test\n+    public void testSMGetTransactionAndCalculateHash() throws IOException {\n+        String transactionString =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"blockHash\\\": \\\"0x2ff860cf49b95f721398b78a128617bf62ab03e09002895c4926f7be990615f1\\\",\\n\"\n+                        + \"    \\\"blockLimit\\\": \\\"0x38e\\\",\\n\"\n+                        + \"    \\\"blockNumber\\\": \\\"0x19b\\\",\\n\"\n+                        + \"    \\\"chainId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"extraData\\\": \\\"0x\\\",\\n\"\n+                        + \"    \\\"from\\\": \\\"0x37e6cd2081a11c345fac93eaff0ca9ef66f27451\\\",\\n\"\n+                        + \"    \\\"gas\\\": \\\"0x419ce0\\\",\\n\"\n+                        + \"    \\\"gasPrice\\\": \\\"0x51f4d5c00\\\",\\n\"\n+                        + \"    \\\"groupId\\\": \\\"0x1\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0x880ee49599e731086d44d268239bce2e36a1b1032329bcd3f194b2e86297caf4\\\",\\n\"\n+                        + \"    \\\"input\\\": \\\"0x3590b49f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f2c20464953434f0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"nonce\\\": \\\"0x22cbceaa80e80cf1aa6c719b659601f2ae6ed68d549c537be57b44bc7668405\\\",\\n\"\n+                        + \"    \\\"signature\\\": {\\n\"\n+                        + \"      \\\"r\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f32702540\\\",\\n\"\n+                        + \"      \\\"s\\\": \\\"0x94eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f\\\",\\n\"\n+                        + \"      \\\"signature\\\": \\\"0xcc108436f41e5ee91491f5e91bd72f1bdc43f6169d2b72bf96c7cf6f3270254094eec76fe9d7902a9d328ec169329820914b7720d675c657356fd68f4758108f6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\",\\n\"\n+                        + \"      \\\"v\\\": \\\"0x6feaf705e8b16de494b4fec3ec3176e38b1eaa416605f4bb5c141c2a22434580f03b8257b29213bdc059c9b3673a7c3868df55eb1b85c2abc22aae64e4d9cac6\\\"\\n\"\n+                        + \"    },\\n\"\n+                        + \"    \\\"to\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"transactionIndex\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"value\\\": \\\"0x0\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosTransaction bcosTransaction =\n+                objectMapper.readValue(transactionString.getBytes(), BcosTransaction.class);\n+        Assert.assertEquals(\n+                bcosTransaction.getTransaction().get().calculateHash(EncryptType.SM2_TYPE),\n+                bcosTransaction.getTransaction().get().getHash());\n+    }\n+\n+    @Test\n+    public void testSMGetBlockAndCalculateHash() throws IOException {\n+        String blockHeaderStr =\n+                \"{\\n\"\n+                        + \"  \\\"id\\\": 1,\\n\"\n+                        + \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\"\n+                        + \"  \\\"result\\\": {\\n\"\n+                        + \"    \\\"dbHash\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"extraData\\\": [],\\n\"\n+                        + \"    \\\"gasLimit\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"gasUsed\\\": \\\"0x0\\\",\\n\"\n+                        + \"    \\\"hash\\\": \\\"0xc5360efd06024b02340eb2afa283fe022f57791e888f22366b77d6218a247a13\\\",\\n\"\n+                        + \"    \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\\n\"\n+                        + \"    \\\"number\\\": 1,\\n\"\n+                        + \"    \\\"parentHash\\\": \\\"0x7e1b0fc3efa8026f282bfa994d3a79305542d5ad3ea65b84a8d72b152f15dfb1\\\",\\n\"\n+                        + \"    \\\"receiptsRoot\\\": \\\"0xd748b478e6b8f90e049f7a4a9d2b9acf76624baed8c2abe0e868b33cd5e989e5\\\",\\n\"\n+                        + \"    \\\"sealer\\\": \\\"0x3\\\",\\n\"\n+                        + \"    \\\"sealerList\\\": [\\n\"\n+                        + \"      \\\"1daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\",\\n\"\n+                        + \"      \\\"2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\",\\n\"\n+                        + \"      \\\"4905b78b643c19c03e7b8e6779fca2a3e917baa317e8d2abde6daec543d375ac5052aeda22fda7e174c780e04afd215f965237a809e814369a05bb90b965a6ed\\\",\\n\"\n+                        + \"      \\\"86f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"signatureList\\\": [\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x0\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0xa99fcb5298a5dd39644af81b2c3ebd9839ffa9f2cb65c6c8b9f2b84b8804c93cf836cb45059cdefe8767ea922e0141318da7ffcc6d0d9db2b0cfa23638bc86591daca8140ba483b560d1b3b8905ca07f447b305875a4f9c6cb2a826c9315ef10bc87a7e135d0a34f605f3a95ff5d9a8c83f2ac5f070c6fe740400910813110a2\\\"\\n\"\n+                        + \"      },\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x3\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0x1addc8032fbca41e31afb429dd2f749653492684fcc7845acb4558d5b09095a311a2d965c2a59133b497cb2553c23f29c6613ca0d312acb4f9fd93df602936f686f731c15ca2f44925fea7f379ca32a55245fb988228305c7625d4a174a186fc4472d4668053c7fe4c8608562cf2fb8fea1ab5ea4c96b9be01949b565ec36c9e\\\"\\n\"\n+                        + \"      },\\n\"\n+                        + \"      {\\n\"\n+                        + \"        \\\"index\\\": \\\"0x1\\\",\\n\"\n+                        + \"        \\\"signature\\\": \\\"0xd2831bc1b60ce6a0bf71bd89d312b57ef9ad211b4efea3f8bfd38387998d547f5db59ce870a65d16d98a344c85ce0f2e22d371ce455eef0a8c9566f5fa7f71ec2e6ddeb52fcdb0f0287c8b6bbe407f4a3a52bc1b04ea5b978ab698ac1802eb5db482ec1681b1d1d8d1a5e99143a7cde2b85fe29bbe6538066507a91fc8e5ecc6\\\"\\n\"\n+                        + \"      }\\n\"\n+                        + \"    ],\\n\"\n+                        + \"    \\\"stateRoot\\\": \\\"0x68a77b2364be2f3197bce9ca265a5405ed77904237d8e31dbacfe9e1d3119f77\\\",\\n\"\n+                        + \"    \\\"timestamp\\\": \\\"0x174ce4a8931\\\",\\n\"\n+                        + \"    \\\"transactionsRoot\\\": \\\"0x60368d2fde59f678e096418d521b53fce8355fb8bca1448d4bb6f5209376e7fc\\\"\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\";\n+\n+        BcosBlock bcosBlock = objectMapper.readValue(blockHeaderStr.getBytes(), BcosBlock.class);\n+        HashInterface hashInterface = new SM3Digest();\n+        Assert.assertEquals(\n+                bcosBlock.getBlock().calculateHash(hashInterface), bcosBlock.getBlock().getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzAyMTUw", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#pullrequestreview-497302150", "createdAt": "2020-09-28T08:42:30Z", "commit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzAzMDIx", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/708#pullrequestreview-497303021", "createdAt": "2020-09-28T08:43:39Z", "commit": {"oid": "6f50aff6d3aaa7ce36ec2cd05a314d93d1bbfdca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1849, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}