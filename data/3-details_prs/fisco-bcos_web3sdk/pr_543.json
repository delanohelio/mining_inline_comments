{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzAzNzY4", "number": 543, "title": "add ECCEncrpyt/ECCDecrypt", "bodyText": "", "createdAt": "2020-03-23T10:43:50Z", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/543", "merged": true, "mergeCommit": {"oid": "c26d451ccb4a4f90222d5bb550ef18e69525665b"}, "closed": true, "closedAt": "2020-03-23T11:11:17Z", "author": {"login": "ywy2090"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMo36jgH2gAyMzkyMzAzNzY4OjI2YzhjYTM4NTI0MmM5MGY0NDY1NmViZmFiMzAyYzc3NTg5YTNjNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQb-qUgFqTM3OTMxMjMyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26c8ca385242c90f44656ebfab302c77589a3c62", "author": {"user": {"login": "ywy2090", "name": null}}, "url": "https://github.com/FISCO-BCOS/web3sdk/commit/26c8ca385242c90f44656ebfab302c77589a3c62", "committedDate": "2020-03-11T15:30:27Z", "message": "add encrypt/decrypt/verify method for ECKeyPair."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00878aada8e110936985b104573419caa80b15c0", "author": {"user": {"login": "ywy2090", "name": null}}, "url": "https://github.com/FISCO-BCOS/web3sdk/commit/00878aada8e110936985b104573419caa80b15c0", "committedDate": "2020-03-12T01:33:49Z", "message": "update ECDSA encrpyt/decrypt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163626424146f7b30ad720f196f0240a42f629d4", "author": {"user": {"login": "ywy2090", "name": null}}, "url": "https://github.com/FISCO-BCOS/web3sdk/commit/163626424146f7b30ad720f196f0240a42f629d4", "committedDate": "2020-03-12T07:56:03Z", "message": "add ECCEcrypt/ECCDecrpyt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e5b4fa9035c9ca0aa023881676290baa539a95", "author": {"user": {"login": "ywy2090", "name": null}}, "url": "https://github.com/FISCO-BCOS/web3sdk/commit/65e5b4fa9035c9ca0aa023881676290baa539a95", "committedDate": "2020-03-22T14:29:18Z", "message": "fix ECCEncrpyt bug."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzEyMzIy", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/543#pullrequestreview-379312322", "createdAt": "2020-03-23T10:44:44Z", "commit": {"oid": "65e5b4fa9035c9ca0aa023881676290baa539a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0NDo0NFrOF5_y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0NDo0NFrOF5_y9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1ODM4OQ==", "bodyText": "[Misspell] \"encrpyt\" is a misspelling of \"encrypt\" (view)\n\n\n\n\nRule\n\n\n\n\n\"encrpyt\" is a misspelling of \"encrypt\"\n\n\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/543#discussion_r396358389", "createdAt": "2020-03-23T10:44:44Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/web3j/crypto/ECKeyPairTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package org.fisco.bcos.web3j.crypto;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.fisco.bcos.channel.client.P12Manager;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.tool.ECCDecrypt;\n+import org.fisco.bcos.web3j.crypto.tool.ECCEncrypt;\n+import org.junit.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class ECKeyPairTest {\n+\n+    @Test\n+    public void encryptECKeyPairTest() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"ecc encrypt test\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        String decrpptMessage = new String(decryptData, \"utf-8\");\n+        assertEquals(message, decrpptMessage);\n+    }\n+\n+    @Test\n+    public void encryptECKeyPairTestEmptyString() throws Exception {\n+        Credentials credentials = GenCredential.create();\n+        ECKeyPair ecKeyPair = credentials.getEcKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        assertEquals(message, new String(decryptData, \"utf-8\"));\n+    }\n+\n+    @Test\n+    public void encryptECKeyPairTestWithPem() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\n+                        \"classpath:applicationContext-keystore-sample.xml\");\n+        // test p12\n+        P12Manager p12 = context.getBean(P12Manager.class);\n+\n+        ECKeyPair ecKeyPair = p12.getECKeyPair();\n+\n+        ECCEncrypt encrypt = new ECCEncrypt(ecKeyPair.getPublicKey());\n+        ECCDecrypt decrypt = new ECCDecrypt(ecKeyPair.getPrivateKey());\n+\n+        String message = \"\";\n+        byte[] encryptData = encrypt.encrypt(message.getBytes(\"utf-8\"));\n+        byte[] decryptData = decrypt.decrypt(encryptData);\n+\n+        assertEquals(message, new String(decryptData, \"utf-8\"));\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTest() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+        String message = \"verify test\";\n+        ECDSASignature signature = ecKeyPair.sign(message.getBytes());\n+        boolean verify = ecKeyPair.verify(message.getBytes(), signature);\n+\n+        assertEquals(verify, true);\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTestEmptyString() throws Exception {\n+        ECKeyPair ecKeyPair = Keys.createEcKeyPair();\n+        String message = \"\";\n+        ECDSASignature signature = ecKeyPair.sign(message.getBytes());\n+        boolean verify = ecKeyPair.verify(message.getBytes(), signature);\n+\n+        assertEquals(verify, true);\n+    }\n+\n+    @Test\n+    public void verifyECKeyPairTestWithPem() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\n+                        \"classpath:applicationContext-keystore-sample.xml\");\n+        // test p12\n+        P12Manager p12 = context.getBean(P12Manager.class);\n+\n+        ECKeyPair ecKeyPair = p12.getECKeyPair();\n+\n+        String message = \"ecc encrpyt test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e5b4fa9035c9ca0aa023881676290baa539a95"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1900, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}