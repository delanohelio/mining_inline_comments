{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTkwODU2", "number": 564, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowNVrODxfzOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowOVrODxfzTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI3ODMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowNVrOGE_zOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowNVrOGE_zOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5Mjc5NA==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'area' (lines '91'-'145'). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataflowAnomalyAnalysis\nError Prone\n5\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/564#discussion_r407892794", "createdAt": "2020-04-14T06:22:05Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.fisco.bcos.channel.test.contract;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.fisco.bcos.web3j.crypto.Keys;\n+import java.math.BigInteger;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.utils.Web3AsyncThreadPoolSize;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import java.security.SecureRandom;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.crypto.Hash;\n+import org.fisco.bcos.web3j.crypto.ECDSASign;\n+import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.fisco.bcos.web3j.crypto.Sign;\n+\n+public class PerformanceEvidenceVerify{\n+    private static Logger logger = LoggerFactory.getLogger(PerformanceEvidenceVerify.class);\n+    private static AtomicInteger sended = new AtomicInteger(0);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String groupId = args[3];\n+            ApplicationContext context =\n+                    new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+            Service service = context.getBean(Service.class);\n+            service.setGroupId(Integer.parseInt(groupId));\n+            service.run();\n+\n+            System.out.println(\"Start Evidence test...\");\n+            System.out.println(\n+                    \"===================================================================\");\n+\n+            ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+            channelEthereumService.setChannelService(service);\n+\n+            Web3AsyncThreadPoolSize.web3AsyncCorePoolSize = 3000;\n+            Web3AsyncThreadPoolSize.web3AsyncPoolSize = 2000;\n+\n+            ScheduledExecutorService scheduledExecutorService =\n+                    Executors.newScheduledThreadPool(500);\n+            Web3j web3 =\n+                    Web3j.build(\n+                            channelEthereumService,\n+                            15 * 100,\n+                            scheduledExecutorService,\n+                            Integer.parseInt(groupId));\n+\n+            Credentials credentials = GenCredential.create();\n+\n+            BigInteger gasPrice = new BigInteger(\"30000000\");\n+            BigInteger gasLimit = new BigInteger(\"30000000\");\n+\n+            String command = args[0];\n+            Integer count = 0;\n+            Integer qps = 0;\n+\n+            switch (command) {\n+                case \"insert\":\n+                    count = Integer.parseInt(args[1]);\n+                    qps = Integer.parseInt(args[2]);\n+                    break;\n+                default:\n+                    System.out.println(\"Args: <insert> <Total> <QPS>\");\n+            }\n+\n+            ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();\n+            threadPool.setCorePoolSize(200);\n+            threadPool.setMaxPoolSize(500);\n+            threadPool.setQueueCapacity(count);\n+\n+            threadPool.initialize();\n+\n+            System.out.println(\"Deploying Evidence contract...\");\n+            EvidenceVerify evidence = EvidenceVerify.deploy(web3, credentials, gasPrice, gasLimit).send();\n+\n+            PerformanceCollector collector = new PerformanceCollector();\n+            collector.setTotal(count);\n+\n+            RateLimiter limiter = RateLimiter.create(qps);\n+            Integer area = count / 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d931d9219bc4d787cd8a2693e1b3339b04e917ec"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI3ODM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowNlrOGE_zQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowNlrOGE_zQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5MjgwMQ==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'signHandler' (lines '94'-'145'). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataflowAnomalyAnalysis\nError Prone\n5\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/564#discussion_r407892801", "createdAt": "2020-04-14T06:22:06Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.fisco.bcos.channel.test.contract;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.fisco.bcos.web3j.crypto.Keys;\n+import java.math.BigInteger;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.utils.Web3AsyncThreadPoolSize;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import java.security.SecureRandom;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.crypto.Hash;\n+import org.fisco.bcos.web3j.crypto.ECDSASign;\n+import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.fisco.bcos.web3j.crypto.Sign;\n+\n+public class PerformanceEvidenceVerify{\n+    private static Logger logger = LoggerFactory.getLogger(PerformanceEvidenceVerify.class);\n+    private static AtomicInteger sended = new AtomicInteger(0);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String groupId = args[3];\n+            ApplicationContext context =\n+                    new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+            Service service = context.getBean(Service.class);\n+            service.setGroupId(Integer.parseInt(groupId));\n+            service.run();\n+\n+            System.out.println(\"Start Evidence test...\");\n+            System.out.println(\n+                    \"===================================================================\");\n+\n+            ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+            channelEthereumService.setChannelService(service);\n+\n+            Web3AsyncThreadPoolSize.web3AsyncCorePoolSize = 3000;\n+            Web3AsyncThreadPoolSize.web3AsyncPoolSize = 2000;\n+\n+            ScheduledExecutorService scheduledExecutorService =\n+                    Executors.newScheduledThreadPool(500);\n+            Web3j web3 =\n+                    Web3j.build(\n+                            channelEthereumService,\n+                            15 * 100,\n+                            scheduledExecutorService,\n+                            Integer.parseInt(groupId));\n+\n+            Credentials credentials = GenCredential.create();\n+\n+            BigInteger gasPrice = new BigInteger(\"30000000\");\n+            BigInteger gasLimit = new BigInteger(\"30000000\");\n+\n+            String command = args[0];\n+            Integer count = 0;\n+            Integer qps = 0;\n+\n+            switch (command) {\n+                case \"insert\":\n+                    count = Integer.parseInt(args[1]);\n+                    qps = Integer.parseInt(args[2]);\n+                    break;\n+                default:\n+                    System.out.println(\"Args: <insert> <Total> <QPS>\");\n+            }\n+\n+            ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();\n+            threadPool.setCorePoolSize(200);\n+            threadPool.setMaxPoolSize(500);\n+            threadPool.setQueueCapacity(count);\n+\n+            threadPool.initialize();\n+\n+            System.out.println(\"Deploying Evidence contract...\");\n+            EvidenceVerify evidence = EvidenceVerify.deploy(web3, credentials, gasPrice, gasLimit).send();\n+\n+            PerformanceCollector collector = new PerformanceCollector();\n+            collector.setTotal(count);\n+\n+            RateLimiter limiter = RateLimiter.create(qps);\n+            Integer area = count / 10;\n+            final Integer total = count;\n+            \n+            ECDSASign signHandler = new ECDSASign();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d931d9219bc4d787cd8a2693e1b3339b04e917ec"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI3ODQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowN1rOGE_zRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowN1rOGE_zRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5MjgwNw==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'evidence' (lines '85'-'145'). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataflowAnomalyAnalysis\nError Prone\n5\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/564#discussion_r407892807", "createdAt": "2020-04-14T06:22:07Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.fisco.bcos.channel.test.contract;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.fisco.bcos.web3j.crypto.Keys;\n+import java.math.BigInteger;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.utils.Web3AsyncThreadPoolSize;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import java.security.SecureRandom;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.crypto.Hash;\n+import org.fisco.bcos.web3j.crypto.ECDSASign;\n+import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.fisco.bcos.web3j.crypto.Sign;\n+\n+public class PerformanceEvidenceVerify{\n+    private static Logger logger = LoggerFactory.getLogger(PerformanceEvidenceVerify.class);\n+    private static AtomicInteger sended = new AtomicInteger(0);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String groupId = args[3];\n+            ApplicationContext context =\n+                    new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+            Service service = context.getBean(Service.class);\n+            service.setGroupId(Integer.parseInt(groupId));\n+            service.run();\n+\n+            System.out.println(\"Start Evidence test...\");\n+            System.out.println(\n+                    \"===================================================================\");\n+\n+            ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+            channelEthereumService.setChannelService(service);\n+\n+            Web3AsyncThreadPoolSize.web3AsyncCorePoolSize = 3000;\n+            Web3AsyncThreadPoolSize.web3AsyncPoolSize = 2000;\n+\n+            ScheduledExecutorService scheduledExecutorService =\n+                    Executors.newScheduledThreadPool(500);\n+            Web3j web3 =\n+                    Web3j.build(\n+                            channelEthereumService,\n+                            15 * 100,\n+                            scheduledExecutorService,\n+                            Integer.parseInt(groupId));\n+\n+            Credentials credentials = GenCredential.create();\n+\n+            BigInteger gasPrice = new BigInteger(\"30000000\");\n+            BigInteger gasLimit = new BigInteger(\"30000000\");\n+\n+            String command = args[0];\n+            Integer count = 0;\n+            Integer qps = 0;\n+\n+            switch (command) {\n+                case \"insert\":\n+                    count = Integer.parseInt(args[1]);\n+                    qps = Integer.parseInt(args[2]);\n+                    break;\n+                default:\n+                    System.out.println(\"Args: <insert> <Total> <QPS>\");\n+            }\n+\n+            ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();\n+            threadPool.setCorePoolSize(200);\n+            threadPool.setMaxPoolSize(500);\n+            threadPool.setQueueCapacity(count);\n+\n+            threadPool.initialize();\n+\n+            System.out.println(\"Deploying Evidence contract...\");\n+            EvidenceVerify evidence = EvidenceVerify.deploy(web3, credentials, gasPrice, gasLimit).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d931d9219bc4d787cd8a2693e1b3339b04e917ec"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI3ODQ4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowOFrOGE_zTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowOFrOGE_zTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5MjgxNA==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'limiter' (lines '90'-'145'). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataflowAnomalyAnalysis\nError Prone\n5\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/564#discussion_r407892814", "createdAt": "2020-04-14T06:22:08Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.fisco.bcos.channel.test.contract;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.fisco.bcos.web3j.crypto.Keys;\n+import java.math.BigInteger;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.utils.Web3AsyncThreadPoolSize;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import java.security.SecureRandom;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.crypto.Hash;\n+import org.fisco.bcos.web3j.crypto.ECDSASign;\n+import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.fisco.bcos.web3j.crypto.Sign;\n+\n+public class PerformanceEvidenceVerify{\n+    private static Logger logger = LoggerFactory.getLogger(PerformanceEvidenceVerify.class);\n+    private static AtomicInteger sended = new AtomicInteger(0);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String groupId = args[3];\n+            ApplicationContext context =\n+                    new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+            Service service = context.getBean(Service.class);\n+            service.setGroupId(Integer.parseInt(groupId));\n+            service.run();\n+\n+            System.out.println(\"Start Evidence test...\");\n+            System.out.println(\n+                    \"===================================================================\");\n+\n+            ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+            channelEthereumService.setChannelService(service);\n+\n+            Web3AsyncThreadPoolSize.web3AsyncCorePoolSize = 3000;\n+            Web3AsyncThreadPoolSize.web3AsyncPoolSize = 2000;\n+\n+            ScheduledExecutorService scheduledExecutorService =\n+                    Executors.newScheduledThreadPool(500);\n+            Web3j web3 =\n+                    Web3j.build(\n+                            channelEthereumService,\n+                            15 * 100,\n+                            scheduledExecutorService,\n+                            Integer.parseInt(groupId));\n+\n+            Credentials credentials = GenCredential.create();\n+\n+            BigInteger gasPrice = new BigInteger(\"30000000\");\n+            BigInteger gasLimit = new BigInteger(\"30000000\");\n+\n+            String command = args[0];\n+            Integer count = 0;\n+            Integer qps = 0;\n+\n+            switch (command) {\n+                case \"insert\":\n+                    count = Integer.parseInt(args[1]);\n+                    qps = Integer.parseInt(args[2]);\n+                    break;\n+                default:\n+                    System.out.println(\"Args: <insert> <Total> <QPS>\");\n+            }\n+\n+            ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();\n+            threadPool.setCorePoolSize(200);\n+            threadPool.setMaxPoolSize(500);\n+            threadPool.setQueueCapacity(count);\n+\n+            threadPool.initialize();\n+\n+            System.out.println(\"Deploying Evidence contract...\");\n+            EvidenceVerify evidence = EvidenceVerify.deploy(web3, credentials, gasPrice, gasLimit).send();\n+\n+            PerformanceCollector collector = new PerformanceCollector();\n+            collector.setTotal(count);\n+\n+            RateLimiter limiter = RateLimiter.create(qps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d931d9219bc4d787cd8a2693e1b3339b04e917ec"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjI3ODUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowOVrOGE_zVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjoyMjowOVrOGE_zVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5MjgyMg==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'total' (lines '92'-'145'). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataflowAnomalyAnalysis\nError Prone\n5\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis\n\nYou can mark this issue as closed if you should not tackle it. (see our document about issues)", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/564#discussion_r407892822", "createdAt": "2020-04-14T06:22:09Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/contract/PerformanceEvidenceVerify.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.fisco.bcos.channel.test.contract;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.fisco.bcos.web3j.crypto.Keys;\n+import java.math.BigInteger;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.utils.Web3AsyncThreadPoolSize;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import java.security.SecureRandom;\n+import org.fisco.bcos.web3j.crypto.gm.GenCredential;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.crypto.Hash;\n+import org.fisco.bcos.web3j.crypto.ECDSASign;\n+import org.fisco.bcos.web3j.crypto.ECKeyPair;\n+import org.fisco.bcos.web3j.crypto.Sign;\n+\n+public class PerformanceEvidenceVerify{\n+    private static Logger logger = LoggerFactory.getLogger(PerformanceEvidenceVerify.class);\n+    private static AtomicInteger sended = new AtomicInteger(0);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String groupId = args[3];\n+            ApplicationContext context =\n+                    new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+            Service service = context.getBean(Service.class);\n+            service.setGroupId(Integer.parseInt(groupId));\n+            service.run();\n+\n+            System.out.println(\"Start Evidence test...\");\n+            System.out.println(\n+                    \"===================================================================\");\n+\n+            ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+            channelEthereumService.setChannelService(service);\n+\n+            Web3AsyncThreadPoolSize.web3AsyncCorePoolSize = 3000;\n+            Web3AsyncThreadPoolSize.web3AsyncPoolSize = 2000;\n+\n+            ScheduledExecutorService scheduledExecutorService =\n+                    Executors.newScheduledThreadPool(500);\n+            Web3j web3 =\n+                    Web3j.build(\n+                            channelEthereumService,\n+                            15 * 100,\n+                            scheduledExecutorService,\n+                            Integer.parseInt(groupId));\n+\n+            Credentials credentials = GenCredential.create();\n+\n+            BigInteger gasPrice = new BigInteger(\"30000000\");\n+            BigInteger gasLimit = new BigInteger(\"30000000\");\n+\n+            String command = args[0];\n+            Integer count = 0;\n+            Integer qps = 0;\n+\n+            switch (command) {\n+                case \"insert\":\n+                    count = Integer.parseInt(args[1]);\n+                    qps = Integer.parseInt(args[2]);\n+                    break;\n+                default:\n+                    System.out.println(\"Args: <insert> <Total> <QPS>\");\n+            }\n+\n+            ThreadPoolTaskExecutor threadPool = new ThreadPoolTaskExecutor();\n+            threadPool.setCorePoolSize(200);\n+            threadPool.setMaxPoolSize(500);\n+            threadPool.setQueueCapacity(count);\n+\n+            threadPool.initialize();\n+\n+            System.out.println(\"Deploying Evidence contract...\");\n+            EvidenceVerify evidence = EvidenceVerify.deploy(web3, credentials, gasPrice, gasLimit).send();\n+\n+            PerformanceCollector collector = new PerformanceCollector();\n+            collector.setTotal(count);\n+\n+            RateLimiter limiter = RateLimiter.create(qps);\n+            Integer area = count / 10;\n+            final Integer total = count;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d931d9219bc4d787cd8a2693e1b3339b04e917ec"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 649, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}