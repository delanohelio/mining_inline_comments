{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTI1MzU0", "number": 576, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowNzo1OVrOD2pYoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMlrOD2pYtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI3NzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowNzo1OVrOGMfwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowNzo1OVrOGMfwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjQ4MQ==", "bodyText": "[PMD] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756481", "createdAt": "2020-04-27T12:07:59Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2a115966f895bc2ed2f6289be96f6f480fec87"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI3NzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMFrOGMfwzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMFrOGMfwzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjQ5Mg==", "bodyText": "[PMD] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756492", "createdAt": "2020-04-27T12:08:00Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String getAccountStatus(String account) throws Exception {\n+        return chainGovernance.getAccountStatus(account).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2a115966f895bc2ed2f6289be96f6f480fec87"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI3NzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMVrOGMfw3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMVrOGMfw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjUwOA==", "bodyText": "[PMD] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756508", "createdAt": "2020-04-27T12:08:01Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2a115966f895bc2ed2f6289be96f6f480fec87"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjI3NzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMlrOGMfw5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowODowMlrOGMfw5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NjUxOA==", "bodyText": "[PMD] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.21.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/576#discussion_r415756518", "createdAt": "2020-04-27T12:08:02Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/precompile/permission/ChainGovernanceService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.fisco.bcos.web3j.precompile.permission;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.math.BigInteger;\n+import java.util.List;\n+import org.fisco.bcos.web3j.crypto.Credentials;\n+import org.fisco.bcos.web3j.precompile.common.PrecompiledCommon;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;\n+import org.fisco.bcos.web3j.tuples.generated.Tuple2;\n+import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;\n+import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;\n+\n+public class ChainGovernanceService {\n+    private static BigInteger gasPrice = new BigInteger(\"30000000000\");\n+    private static BigInteger gasLimit = new BigInteger(\"30000000000\");\n+\n+    private static final String chainGovernanceAddress =\n+            \"0x0000000000000000000000000000000000001008\";\n+\n+    private ChainGovernance chainGovernance;\n+    private Web3j web3j;\n+\n+    public static String getChainGovernanceAddress() {\n+        return chainGovernanceAddress;\n+    }\n+\n+    public ChainGovernance getChainGovernance() {\n+        return chainGovernance;\n+    }\n+\n+    public void setChainGovernance(ChainGovernance chainGovernance) {\n+        this.chainGovernance = chainGovernance;\n+    }\n+\n+    public ChainGovernanceService(Web3j web3j, Credentials credentials) {\n+        ContractGasProvider contractGasProvider = new StaticGasProvider(gasPrice, gasLimit);\n+        chainGovernance =\n+                ChainGovernance.load(\n+                        chainGovernanceAddress, web3j, credentials, contractGasProvider);\n+        this.web3j = web3j;\n+    }\n+\n+    public List<PermissionInfo> listOperators() throws Exception {\n+        String operatorsInfo = chainGovernance.listOperators().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                operatorsInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateCommitteeMemberWeight(String account, int weight) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance\n+                        .updateCommitteeMemberWeight(account, BigInteger.valueOf(weight))\n+                        .send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public BigInteger queryThreshold() throws Exception {\n+        return chainGovernance.queryThreshold().send();\n+    }\n+\n+    public Tuple2<Boolean, BigInteger> queryCommitteeMemberWeight(String account) throws Exception {\n+        return chainGovernance.queryCommitteeMemberWeight(account).send();\n+    }\n+\n+    public String grantCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.grantCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public List<PermissionInfo> listCommitteeMembers() throws Exception {\n+        String committeeMembersInfo = chainGovernance.listCommitteeMembers().send();\n+        ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+        return objectMapper.readValue(\n+                committeeMembersInfo,\n+                objectMapper\n+                        .getTypeFactory()\n+                        .constructCollectionType(List.class, PermissionInfo.class));\n+    }\n+\n+    public String updateThreshold(int threshold) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.updateThreshold(BigInteger.valueOf(threshold)).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeCommitteeMember(String account) throws Exception {\n+        TransactionReceipt transactionReceipt =\n+                chainGovernance.revokeCommitteeMember(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String grantOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.grantOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String revokeOperator(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.revokeOperator(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String freezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.freezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String unfreezeAccount(String account) throws Exception {\n+        TransactionReceipt transactionReceipt = chainGovernance.unfreezeAccount(account).send();\n+        return PrecompiledCommon.handleTransactionReceipt(transactionReceipt, web3j);\n+    }\n+\n+    public String getAccountStatus(String account) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2a115966f895bc2ed2f6289be96f6f480fec87"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 658, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}