{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTY4NzEz", "number": 715, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozM1rOEwrbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo0NzowOVrOEwv8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozM1rOHmY2Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozM1rOHmY2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAyNg==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015026", "createdAt": "2020-10-22T09:27:33Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAyOA==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015028", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzEyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzMA==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015030", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzEzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzMg==", "bodyText": "[PMD Java] Avoid using Literals in Conditional Statements (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidLiteralsInIfCondition\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015032", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzNA==", "bodyText": "[PMD Java] Overridable method 'init' called during object construction (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nConstructorCallsOverridableMethod\nError Prone\n1\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015034", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzNg==", "bodyText": "[PMD Java] The class 'BlockTransactionReceiptsInfo' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=5) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015036", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.util.List;\n+\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+\n+public class BlockTransactionReceipts\n+        extends Response<BlockTransactionReceipts.BlockTransactionReceiptsInfo> {\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts() {\n+        return getResult();\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNFrOHmY2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTAzOQ==", "bodyText": "[PMD Java] The class 'BlockInfo' is suspected to be a Data Class (WOC=11.111%, NOPA=0, NOAM=8, WMC=9) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDataClass\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#dataclass\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015039", "createdAt": "2020-10-22T09:27:34Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.util.List;\n+\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+\n+public class BlockTransactionReceipts\n+        extends Response<BlockTransactionReceipts.BlockTransactionReceiptsInfo> {\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts() {\n+        return getResult();\n+    }\n+\n+    public static class BlockTransactionReceiptsInfo {\n+        private BlockInfo blockInfo;\n+        private List<TransactionReceipt> transactionReceipts;\n+\n+        public BlockInfo getBlockInfo() {\n+            return blockInfo;\n+        }\n+\n+        public void setBlockInfo(BlockInfo blockInfo) {\n+            this.blockInfo = blockInfo;\n+        }\n+\n+        public List<TransactionReceipt> getTransactionReceipts() {\n+            return transactionReceipts;\n+        }\n+\n+        public void setTransactionReceipts(List<TransactionReceipt> transactionReceipts) {\n+            this.transactionReceipts = transactionReceipts;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"ReceiptsInfo{\"\n+                    + \"blockInfo=\"\n+                    + blockInfo\n+                    + \", transactionReceipts=\"\n+                    + transactionReceipts\n+                    + '}';\n+        }\n+    }\n+\n+    public static class BlockInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA0Mw==", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotCallSystemExit\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#donotcallsystemexit\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015043", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzIzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA0Nw==", "bodyText": "[PMD Java] System.exit() should not be used in J2EE/JEE apps (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nDoNotCallSystemExit\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#donotcallsystemexit\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015047", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());\n+\n+        } catch (Exception e) {\n+            System.out.println(\" Failed => \" + e.getMessage());\n+            logger.error(\"e: \", e);\n+        } finally {\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1MQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015051", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzI3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1Mg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015052", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA1Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015056", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNVrOHmY2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015060", "createdAt": "2020-10-22T09:27:35Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzMyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2Mg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015062", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzM0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2NQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015065", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA2OA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015068", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3NA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015074", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015076", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozNlrOHmY2Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA3OA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015078", "createdAt": "2020-10-22T09:27:36Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015080", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4Mw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015083", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4Ng==", "bodyText": "[PMD Java] A switch statement does not contain a break (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nMissingBreakInSwitch\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_errorprone.html#missingbreakinswitch\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015086", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA4OQ==", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015089", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5MQ==", "bodyText": "[PMD Java] A method/constructor should not explicitly throw java.lang.Exception (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSignatureDeclareThrowsException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015091", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5NQ==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015095", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzYyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozN1rOHmY2eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTA5Nw==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015097", "createdAt": "2020-10-22T09:27:37Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwMg==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015102", "createdAt": "2020-10-22T09:27:38Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwNA==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015104", "createdAt": "2020-10-22T09:27:38Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4NzY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTEwNw==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015107", "createdAt": "2020-10-22T09:27:38Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc4Nzc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyNzozOFrOHmY2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTExNA==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510015114", "createdAt": "2020-10-22T09:27:38Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count) throws IOException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getResult().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b91509331bc45b2d5a2a7d23106be73d8b85533"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTQ1OTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyNlrOHmfUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyNlrOHmfUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTA5OA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121098", "createdAt": "2020-10-22T12:30:26Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d908e3739f5676bd3b333d53e46174a7cf059b12"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTQ1OTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTEwMw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121103", "createdAt": "2020-10-22T12:30:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/protocol/core/methods/response/BlockTransactionReceipts.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package org.fisco.bcos.web3j.protocol.core.methods.response;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n+import java.util.zip.Inflater;\n+import org.fisco.bcos.web3j.crypto.gm.sm2.util.Arrays;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.protocol.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BlockTransactionReceipts extends Response<String> {\n+\n+    private static Logger logger = LoggerFactory.getLogger(BlockTransactionReceipts.class);\n+\n+    public byte[] compress(String data) {\n+\n+        Deflater compress = new Deflater();\n+\n+        compress.setInput(data.getBytes());\n+\n+        byte[] compressedData = new byte[data.length()];\n+        compress.finish();\n+\n+        int compressLength = compress.deflate(compressedData, 0, compressedData.length);\n+        return Arrays.copyOfRange(compressedData, 0, compressLength);\n+    }\n+\n+    public byte[] uncompress(byte[] compressedData) throws IOException, DataFormatException {\n+\n+        Inflater decompressor = new Inflater();\n+        decompressor.setInput(compressedData);\n+\n+        try (ByteArrayOutputStream bos = new ByteArrayOutputStream(compressedData.length)) {\n+            byte[] buf = new byte[1024];\n+            while (!decompressor.finished()) {\n+                int count = decompressor.inflate(buf);\n+                bos.write(buf, 0, count);\n+            }\n+\n+            return bos.toByteArray();\n+        }\n+    }\n+\n+    public BlockTransactionReceiptsInfo getBlockTransactionReceipts()\n+            throws IOException, DataFormatException {\n+\n+        String base64Data = getResult();\n+        /** Base64 encoding data */\n+        byte[] zipData = Base64.getDecoder().decode(base64Data);\n+\n+        /** zip compression data */\n+        byte[] jsonData = uncompress(zipData);\n+\n+        BlockTransactionReceiptsInfo blockTransactionReceiptsInfo =\n+                ObjectMapperFactory.getObjectMapper()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d908e3739f5676bd3b333d53e46174a7cf059b12"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTQ1OTQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTEwNg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121106", "createdAt": "2020-10-22T12:30:27Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d908e3739f5676bd3b333d53e46174a7cf059b12"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTQ1OTUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTExMg==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121112", "createdAt": "2020-10-22T12:30:27Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d908e3739f5676bd3b333d53e46174a7cf059b12"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTQ1OTUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMDoyN1rOHmfUmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMTExNA==", "bodyText": "[PMD Java] The initializer for variable 'blockTxReceipts' is never used (overwritten on line 112) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nUnusedAssignment\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#unusedassignment\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510121114", "createdAt": "2020-10-22T12:30:27Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d908e3739f5676bd3b333d53e46174a7cf059b12"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTUyNTM4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo0NzowOVrOHmf9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo0NzowOVrOHmf9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzMTU2Mw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (object not created locally) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510131563", "createdAt": "2020-10-22T12:47:09Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(\n+                    \" ## Result: \" + blockTransactionReceipts.getBlockTransactionReceipts());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTUyNTQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo0NzowOVrOHmf9bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo0NzowOVrOHmf9bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzMTU2Ng==", "bodyText": "[PMD Java] System.out.println is used (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSystemPrintln\nBest Practices\n2\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.27.0/pmd_rules_java_bestpractices.html#systemprintln\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/715#discussion_r510131566", "createdAt": "2020-10-22T12:47:09Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/channel/test/rpc/BlockTxReceipts.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.fisco.bcos.channel.test.rpc;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.zip.DataFormatException;\n+import org.fisco.bcos.channel.client.Service;\n+import org.fisco.bcos.web3j.protocol.Web3j;\n+import org.fisco.bcos.web3j.protocol.channel.ChannelEthereumService;\n+import org.fisco.bcos.web3j.protocol.core.methods.response.BlockTransactionReceipts;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+public class BlockTxReceipts {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(GroupManager.class);\n+\n+    public BlockTxReceipts() throws Exception {\n+        this.web3j = init();\n+    }\n+\n+    private Web3j web3j;\n+\n+    public Web3j getWeb3j() {\n+        return web3j;\n+    }\n+\n+    public void setWeb3j(Web3j web3j) {\n+        this.web3j = web3j;\n+    }\n+\n+    public Web3j init() throws Exception {\n+        ApplicationContext context =\n+                new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\");\n+        Service service = context.getBean(Service.class);\n+        service.run();\n+\n+        ChannelEthereumService channelEthereumService = new ChannelEthereumService();\n+        channelEthereumService.setChannelService(service);\n+\n+        Web3j web3j = Web3j.build(channelEthereumService, service.getGroupId());\n+        return web3j;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(BigInteger blockNumber)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber).send();\n+        logger.info(\n+                \"blockNumber: {}, result: {}\",\n+                blockNumber,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceipts(\n+            BigInteger blockNumber, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceipts(blockNumber, offset, count).send();\n+        logger.info(\n+                \"blockNumber: {}, offset: {}, count: {}, result: {}\",\n+                blockNumber,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(String blockHash)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash).send();\n+        logger.info(\n+                \"blockHash: {}, result: {}\",\n+                blockHash,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public BlockTransactionReceipts getBlockTransactionReceiptsByHash(\n+            String blockHash, BigInteger offset, BigInteger count)\n+            throws IOException, DataFormatException {\n+        BlockTransactionReceipts blockTransactionReceipts =\n+                web3j.getBlockTransactionReceiptsByHash(blockHash, offset, count).send();\n+        logger.info(\n+                \"blockHash: {}, offset: {}, count: {}, result: {}\",\n+                blockHash,\n+                offset,\n+                count,\n+                blockTransactionReceipts.getBlockTransactionReceipts());\n+        return blockTransactionReceipts;\n+    }\n+\n+    public static void Usage() {\n+        System.out.println(\" Usage:\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceipts blockNumber [offset] [count]\");\n+        System.out.println(\n+                \" \\t java -cp conf/:lib/*:apps/* org.fisco.bcos.channel.test.rpc.BlockTxReceipts getBlockTransactionReceiptsByHash blockHash [offset] [count]\");\n+        System.exit(0);\n+    }\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            Usage();\n+        }\n+\n+        BlockTxReceipts blockTxReceipts = null;\n+        try {\n+            blockTxReceipts = new BlockTxReceipts();\n+            String command = args[0];\n+            String blockNumberOrBlockHash = args[1];\n+\n+            BigInteger offset = BigInteger.ZERO;\n+            BigInteger count = BigInteger.valueOf(-1);\n+            if (args.length > 2) {\n+                offset = new BigInteger(args[2]);\n+            }\n+\n+            if (args.length > 3) {\n+                count = new BigInteger(args[3]);\n+            }\n+\n+            System.out.println(\n+                    \" ## command: \"\n+                            + command\n+                            + \" ,blockNumberOrBlockHash: \"\n+                            + blockNumberOrBlockHash\n+                            + \" ,offset: \"\n+                            + offset\n+                            + \" ,count: \"\n+                            + count);\n+\n+            BlockTransactionReceipts blockTransactionReceipts = null;\n+            switch (command) {\n+                case \"getBlockTransactionReceipts\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceipts(\n+                                    new BigInteger(blockNumberOrBlockHash), offset, count);\n+                    break;\n+                case \"getBlockTransactionReceiptsByHash\":\n+                    blockTransactionReceipts =\n+                            blockTxReceipts.getBlockTransactionReceiptsByHash(\n+                                    blockNumberOrBlockHash, offset, count);\n+                    break;\n+                default:\n+                    {\n+                        System.out.println(\" unrecognized methods. \");\n+                    }\n+            }\n+\n+            System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4394c5f5d77b7946b57152d1dfa500f63ef4dc71"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 619, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}