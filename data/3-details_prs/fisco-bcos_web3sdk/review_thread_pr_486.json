{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTQ0NDY4", "number": 486, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzoyNToxNlrODVcong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzo1ODoyMVrODVls9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzODE1ODM4OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzoyNToxNlrOFZrf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wMlQxMzoyNToxNlrOFZrf7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjQ3MTQwNQ==", "bodyText": "[PMD] Found 'DU'-anomaly for variable 'publicKeyBytes' (lines '72'-'86'). (see on Sider)\n\n\n\n\nRule\n\n\n\n\nError Prone-DataflowAnomalyAnalysis-05494a1db449e2d66c833277a6cffe821b6225d6\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.20.0/pmd_rules_java_errorprone.html#dataflowanomalyanalysis", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/486#discussion_r362471405", "createdAt": "2020-01-02T13:25:16Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "diffHunk": "@@ -52,4 +63,25 @@ public void testPublicKeyFromPrivatePoint() {\n         ECPoint point = Sign.publicPointFromPrivate(SampleKeys.PRIVATE_KEY);\n         assertThat(Sign.publicFromPoint(point.getEncoded(false)), equalTo(SampleKeys.PUBLIC_KEY));\n     }\n+    \n+    @Test\n+    public void testGmSignVerify() throws IOException {\n+        byte[] sourceData = Hex.decode(\"434477813974bf58f94bcf760833c2b40f77a5fc360485b0b9ed1bd9682edb45\");\n+        String publicKey =\n+                \"e8c670380cb220095268f40221fc748fa6ac39d6e930e63c30da68bad97f885da6e8c9ad722c3683ab859393220d1431eb1818ed44a942efb07b261a0fc769e7\";\n+        byte[] publicKeyBytes = Hex.decode(publicKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa5d8659dc9eec4631a6ca008a14a844341cc83"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTY0NDAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzo1ODoyMFrOFZ5hVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzo1ODoyMFrOFZ5hVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcwMTE0MQ==", "bodyText": "[PMD] Potential violation of Law of Demeter (object not created locally) (see on Sider)\n\n\n\n\nRule\n\n\n\n\nDesign-LawOfDemeter-b97a717b6b3cf4346fbdcd26a2e8e1637439cf60\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.20.0/pmd_rules_java_design.html#lawofdemeter", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/486#discussion_r362701141", "createdAt": "2020-01-03T03:58:20Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "diffHunk": "@@ -52,4 +62,31 @@ public void testPublicKeyFromPrivatePoint() {\n         ECPoint point = Sign.publicPointFromPrivate(SampleKeys.PRIVATE_KEY);\n         assertThat(Sign.publicFromPoint(point.getEncoded(false)), equalTo(SampleKeys.PUBLIC_KEY));\n     }\n+\n+    @Test\n+    public void testGmSignVerify() throws IOException {\n+        byte[] sourceData =\n+                Hex.decode(\"434477813974bf58f94bcf760833c2b40f77a5fc360485b0b9ed1bd9682edb45\");\n+        String publicKey =\n+                \"e8c670380cb220095268f40221fc748fa6ac39d6e930e63c30da68bad97f885da6e8c9ad722c3683ab859393220d1431eb1818ed44a942efb07b261a0fc769e7\";\n+        String sign =\n+                \"09628650676000c8d18bf43db68e7f66dfaed230d87e6391c29eb594b7b9cc3c8d370dbd29ce62bbcf3506adb57f041d8646ae4f70a26ea5179418e738fd4372e8c670380cb220095268f40221fc748fa6ac39d6e930e63c30da68bad97f885da6e8c9ad722c3683ab859393220d1431eb1818ed44a942efb07b261a0fc769e7\";\n+        byte[] signatureBytes = Numeric.hexStringToByteArray(\"0x\" + sign);\n+\n+        ASN1Integer d_r =\n+                new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(signatureBytes, 0, 32)));\n+        ASN1Integer d_s =\n+                new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(signatureBytes, 32, 64)));\n+        ASN1EncodableVector v2 = new ASN1EncodableVector();\n+        v2.add(d_r);\n+        v2.add(d_s);\n+        DERSequence der = new DERSequence(v2);\n+        boolean b =\n+                SM2Algorithm.verify(\n+                        sourceData,\n+                        der.getEncoded(),\n+                        publicKey.substring(0, 64),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa7300fef3285e9ff512d2ff43501631c3f222a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTY0NDA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzo1ODoyMVrOFZ5hVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMzo1ODoyMVrOFZ5hVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjcwMTE0Mw==", "bodyText": "[PMD] Potential violation of Law of Demeter (object not created locally) (see on Sider)\n\n\n\n\nRule\n\n\n\n\nDesign-LawOfDemeter-b97a717b6b3cf4346fbdcd26a2e8e1637439cf60\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.20.0/pmd_rules_java_design.html#lawofdemeter", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/486#discussion_r362701143", "createdAt": "2020-01-03T03:58:21Z", "author": {"login": "sider"}, "path": "src/test/java/org/fisco/bcos/web3j/crypto/SignTest.java", "diffHunk": "@@ -52,4 +62,31 @@ public void testPublicKeyFromPrivatePoint() {\n         ECPoint point = Sign.publicPointFromPrivate(SampleKeys.PRIVATE_KEY);\n         assertThat(Sign.publicFromPoint(point.getEncoded(false)), equalTo(SampleKeys.PUBLIC_KEY));\n     }\n+\n+    @Test\n+    public void testGmSignVerify() throws IOException {\n+        byte[] sourceData =\n+                Hex.decode(\"434477813974bf58f94bcf760833c2b40f77a5fc360485b0b9ed1bd9682edb45\");\n+        String publicKey =\n+                \"e8c670380cb220095268f40221fc748fa6ac39d6e930e63c30da68bad97f885da6e8c9ad722c3683ab859393220d1431eb1818ed44a942efb07b261a0fc769e7\";\n+        String sign =\n+                \"09628650676000c8d18bf43db68e7f66dfaed230d87e6391c29eb594b7b9cc3c8d370dbd29ce62bbcf3506adb57f041d8646ae4f70a26ea5179418e738fd4372e8c670380cb220095268f40221fc748fa6ac39d6e930e63c30da68bad97f885da6e8c9ad722c3683ab859393220d1431eb1818ed44a942efb07b261a0fc769e7\";\n+        byte[] signatureBytes = Numeric.hexStringToByteArray(\"0x\" + sign);\n+\n+        ASN1Integer d_r =\n+                new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(signatureBytes, 0, 32)));\n+        ASN1Integer d_s =\n+                new ASN1Integer(new BigInteger(1, Arrays.copyOfRange(signatureBytes, 32, 64)));\n+        ASN1EncodableVector v2 = new ASN1EncodableVector();\n+        v2.add(d_r);\n+        v2.add(d_s);\n+        DERSequence der = new DERSequence(v2);\n+        boolean b =\n+                SM2Algorithm.verify(\n+                        sourceData,\n+                        der.getEncoded(),\n+                        publicKey.substring(0, 64),\n+                        publicKey.substring(64, 128));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa7300fef3285e9ff512d2ff43501631c3f222a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 730, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}