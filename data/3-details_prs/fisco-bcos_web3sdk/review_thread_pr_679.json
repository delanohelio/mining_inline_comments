{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyOTQ4NjE0", "number": 679, "reviewThreads": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyNlrOEP6kPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOEP69XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyNlrOGz0ZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyNlrOGz0ZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNA==", "bodyText": "[PMD Java] The class 'ABICodecJsonWrapper' has a total cyclomatic complexity of 80 (highest 35). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988934", "createdAt": "2020-07-20T01:52:26Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNg==", "bodyText": "[PMD Java] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988936", "createdAt": "2020-07-20T01:52:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzNw==", "bodyText": "[PMD Java] Private field 'objectMapper' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988937", "createdAt": "2020-07-20T01:52:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzOA==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988938", "createdAt": "2020-07-20T01:52:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODkzOQ==", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a cyclomatic complexity of 35. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988939", "createdAt": "2020-07-20T01:52:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyN1rOGz0ZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Mg==", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988942", "createdAt": "2020-07-20T01:52:27Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Mw==", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a NCSS line count of 81. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nNcssCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#ncsscount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988943", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0NA==", "bodyText": "[PMD Java] A high ratio of statements to labels in a switch statement.  Consider refactoring. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchDensity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#switchdensity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988944", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0Nw==", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988947", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0OA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988948", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk0OQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988949", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOFrOGz0ZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1MQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988951", "createdAt": "2020-07-20T01:52:28Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1Mw==", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988953", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1NQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988955", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988956", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk1OQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988959", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988960", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjoyOVrOGz0ZIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Mg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988962", "createdAt": "2020-07-20T01:52:29Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2NA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988964", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2NQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988965", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988966", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2Nw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988967", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk2OA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988968", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMFrOGz0ZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988970", "createdAt": "2020-07-20T01:52:30Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3MQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988971", "createdAt": "2020-07-20T01:52:31Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Mg==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988972", "createdAt": "2020-07-20T01:52:31Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3NA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988974", "createdAt": "2020-07-20T01:52:31Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988976", "createdAt": "2020-07-20T01:52:31Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMVrOGz0ZMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3Nw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988977", "createdAt": "2020-07-20T01:52:31Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTIzNjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMlrOGz0ZMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMTo1MjozMlrOGz0ZMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODk3OQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456988979", "createdAt": "2020-07-20T01:52:32Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,498 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197b2181ec58dfb73cc3878531808ab1a38d9606"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxMw==", "bodyText": "[PMD Java] The class 'ABICodecJsonWrapper' has a total cyclomatic complexity of 80 (highest 35). (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998213", "createdAt": "2020-07-20T02:36:48Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNA==", "bodyText": "[PMD Java] Found non-transient, non-static member. Please mark as transient or provide accessors. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nBeanMembersShouldSerialize\nError Prone\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_errorprone.html#beanmembersshouldserialize\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998214", "createdAt": "2020-07-20T02:36:48Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNQ==", "bodyText": "[PMD Java] Private field 'objectMapper' could be made final; it is only initialized in the declaration or constructor. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nImmutableField\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#immutablefield\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998215", "createdAt": "2020-07-20T02:36:48Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNg==", "bodyText": "[PMD Java] A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidUncheckedExceptionsInSignatures\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998216", "createdAt": "2020-07-20T02:36:48Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OFrOGz09SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxNw==", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a cyclomatic complexity of 35. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nCyclomaticComplexity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#cyclomaticcomplexity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998217", "createdAt": "2020-07-20T02:36:48Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIxOQ==", "bodyText": "[PMD Java] Avoid really long methods. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nExcessiveMethodLength\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#excessivemethodlength\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998219", "createdAt": "2020-07-20T02:36:49Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMQ==", "bodyText": "[PMD Java] The method 'encodeNode(String, ABIObject, JsonNode)' has a NCSS line count of 81. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nNcssCount\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#ncsscount\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998221", "createdAt": "2020-07-20T02:36:49Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMg==", "bodyText": "[PMD Java] A high ratio of statements to labels in a switch statement.  Consider refactoring. (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchDensity\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#switchdensity\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998222", "createdAt": "2020-07-20T02:36:49Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyMw==", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998223", "createdAt": "2020-07-20T02:36:49Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo0OVrOGz09UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998224", "createdAt": "2020-07-20T02:36:49Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998225", "createdAt": "2020-07-20T02:36:50Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998226", "createdAt": "2020-07-20T02:36:50Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyNw==", "bodyText": "[PMD Java] Switch statements should have a default label (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nSwitchStmtsShouldHaveDefault\nBest Practices\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_bestpractices.html#switchstmtsshouldhavedefault\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998227", "createdAt": "2020-07-20T02:36:50Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIyOA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998228", "createdAt": "2020-07-20T02:36:50Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MFrOGz09Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998230", "createdAt": "2020-07-20T02:36:50Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998232", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzMw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998233", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzNg==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998236", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzNw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998237", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODIzOQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998239", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MVrOGz09YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0MA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998240", "createdAt": "2020-07-20T02:36:51Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0MQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998241", "createdAt": "2020-07-20T02:36:52Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Mw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998243", "createdAt": "2020-07-20T02:36:52Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998246", "createdAt": "2020-07-20T02:36:52Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI0Nw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998247", "createdAt": "2020-07-20T02:36:52Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1MlrOGz09ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1MA==", "bodyText": "[PMD Java] Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nAvoidCatchingGenericException\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998250", "createdAt": "2020-07-20T02:36:52Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1Mw==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998253", "createdAt": "2020-07-20T02:36:53Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1NA==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998254", "createdAt": "2020-07-20T02:36:53Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1NQ==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998255", "createdAt": "2020-07-20T02:36:53Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTMwMDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMjozNjo1M1rOGz09cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5ODI1Ng==", "bodyText": "[PMD Java] Potential violation of Law of Demeter (method chain calls) (view)\n\n\n\n\nRule\nRuleset\nPriority\n\n\n\n\nLawOfDemeter\nDesign\n3\n\n\n\nReferences:\n\nhttps://pmd.github.io/pmd-6.25.0/pmd_rules_java_design.html#lawofdemeter\n\nYou can close this issue if no need to fix it. Learn more.", "url": "https://github.com/FISCO-BCOS/web3sdk/pull/679#discussion_r456998256", "createdAt": "2020-07-20T02:36:53Z", "author": {"login": "sider"}, "path": "src/main/java/org/fisco/bcos/web3j/abi/wrapper/ABICodecJsonWrapper.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package org.fisco.bcos.web3j.abi.wrapper;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import java.io.IOException;\n+import java.security.InvalidParameterException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.fisco.bcos.web3j.abi.datatypes.Address;\n+import org.fisco.bcos.web3j.abi.datatypes.Bool;\n+import org.fisco.bcos.web3j.abi.datatypes.Bytes;\n+import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;\n+import org.fisco.bcos.web3j.abi.datatypes.Utf8String;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;\n+import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;\n+import org.fisco.bcos.web3j.abi.wrapper.ABIObject.ListType;\n+import org.fisco.bcos.web3j.protocol.ObjectMapperFactory;\n+import org.fisco.bcos.web3j.utils.Numeric;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ABICodecJsonWrapper {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ABICodecJsonWrapper.class);\n+\n+    private ObjectMapper objectMapper = ObjectMapperFactory.getObjectMapper();\n+\n+    private void errorReport(String path, String expected, String actual)\n+            throws InvalidParameterException {\n+        String errorMessage =\n+                \"Arguments mismatch: \" + path + \", expected: \" + expected + \", actual: \" + actual;\n+        logger.error(errorMessage);\n+        throw new InvalidParameterException(errorMessage);\n+    }\n+\n+    private ABIObject encodeNode(String path, ABIObject template, JsonNode node) {\n+        ABIObject abiObject = template.newObject();\n+\n+        switch (abiObject.getType()) {\n+            case VALUE:\n+                {\n+                    if (!node.isValueNode()) {\n+                        errorReport(\n+                                path,\n+                                abiObject.getType().toString(),\n+                                node.getNodeType().toString());\n+                    }\n+\n+                    switch (template.getValueType()) {\n+                        case BOOL:\n+                            {\n+                                if (!node.isBoolean()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                abiObject.setBoolValue(new Bool(node.asBoolean()));\n+                                break;\n+                            }\n+                        case INT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Int256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Int256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case UINT:\n+                            {\n+                                if (!node.isNumber() && !node.isBigInteger()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                if (node.isNumber()) {\n+                                    abiObject.setNumericValue(new Uint256(node.asLong()));\n+                                } else {\n+                                    abiObject.setNumericValue(new Uint256(node.bigIntegerValue()));\n+                                }\n+\n+                                break;\n+                            }\n+                        case ADDRESS:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),\n+                                            node.getNodeType().toString());\n+                                }\n+\n+                                try {\n+                                    abiObject.setAddressValue(new Address(node.asText()));\n+                                } catch (Exception e) {\n+                                    errorReport(\n+                                            \"Invalid address value\",\n+                                            template.getValueType().toString(),\n+                                            node.asText());\n+                                }\n+                                break;\n+                            }\n+                        case BYTES:\n+                            {\n+                                if (!node.isTextual()) {\n+                                    errorReport(\n+                                            path,\n+                                            template.getValueType().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0c0bc7d04bedac383b4082a00050831ddda07b"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}