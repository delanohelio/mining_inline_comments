{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDgyODIy", "number": 511, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoyNjozMFrODx4-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToxMzozMVrOD32zmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQwMzM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoyNjozMFrOGFniNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowOTo0M1rOGHWMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw==", "bodyText": "It's better to use Paths.get", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408543797", "createdAt": "2020-04-15T02:26:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2ODYyMQ==", "bodyText": "ok", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409668621", "createdAt": "2020-04-16T15:56:53Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjgzNw==", "bodyText": "I meant line 39.\nWtich Paths.get the, the '/' in offlineResourcesBaseUrl of VIPCfg will have no affect on the result.\nPlease check.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409946837", "createdAt": "2020-04-17T01:51:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1NjkzOA==", "bodyText": "By new flow, client will fallback to local bundles if failing to get from server.\nI couldn't find changes on this. Could you check this?\n\nSure.  I was planning to check it in the next Pr so that you are not overwhelmed. I have just checked it in now.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r410356938", "createdAt": "2020-04-17T17:09:43Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQyNTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjozOTowOVrOGFnviw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjozOTowOVrOGFnviw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NzIxMQ==", "bodyText": "How about replacing with:\ntry (Reader reader = new InputStreamReader(is, \"UTF-8\");) {", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408547211", "createdAt": "2020-04-15T02:39:09Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {\n+        JSONObject jsonObj = null;\n+        \n+        ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+        InputStream is = classloader.getResourceAsStream(pathName);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjgyNDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyOToyNFrOGGlUTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo1Nzo1NVrOGGsO5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjA0Ng==", "bodyText": "Does this function work if the bundle is out of the client(jar)?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409556046", "createdAt": "2020-04-16T13:29:24Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2OTM1MQ==", "bodyText": "Yes, as long as it is in the application's classpath.\nYou can run Main.java in the sample app to test this. Offline bundles have been added in sample-client-app/src/main/resources/offlineBundles/default/", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409669351", "createdAt": "2020-04-16T15:57:55Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjA0Ng=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjg0NjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozNDozNFrOGGlibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0NzoyOVrOGIgWLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA==", "bodyText": "how about using 'refreshComponentMessages' as the function name?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409559660", "createdAt": "2020-04-16T13:34:34Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1NjgxNg==", "bodyText": "\"refresh\" implies an update. This method can either be an update or a new load, so \"get\" seems to be more generic.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409656816", "createdAt": "2020-04-16T15:40:15Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MTg2Nw==", "bodyText": "but it returns 'void', meaning outside caller get nothing. If there's case to detect the change on service, how to do it?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411051867", "createdAt": "2020-04-20T02:21:09Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3MTc1OQ==", "bodyText": "Caller of the method gets the change inside the object that is passed as argument.\nSo after calling .getCompinentMessages(cacheItem); , cacheItem has the updated value (If it was indeed updated because it was expired. Otherwise, no change).\n\"case to detect the change on service, how to do it\" -- I have the answer in the unit tests!\nIf the MessageCacheItem was updated, the timestamp property would have changed to a later timestamp.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411571759", "createdAt": "2020-04-20T17:47:29Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjg2NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODoxOFrOGGltyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo1NzowMVrOGGsMbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjU2OQ==", "bodyText": "should judge if messages is empty before adding to cache.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409562569", "createdAt": "2020-04-16T13:38:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);\n+    \t} else {\n+    \t\tpathName = filePath;\n+    \t}\n+    \tMap<String, String> messages = JSONBundleUtil.getMessages(pathName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2ODcxNg==", "bodyText": "The judge is inside addCachedData.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409668716", "createdAt": "2020-04-16T15:57:01Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);\n+    \t} else {\n+    \t\tpathName = filePath;\n+    \t}\n+    \tMap<String, String> messages = JSONBundleUtil.getMessages(pathName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjU2OQ=="}, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Mzk3NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyOTo0OFrOGIFFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDo0Nzo1NlrOGItk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEwNw==", "bodyText": "Suggest checking cfg when initializing to report errors early.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411125107", "createdAt": "2020-04-20T06:29:48Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -76,10 +76,13 @@ public Message getMessageInstance(Class c, VIPCfg cfg) {\n         Message i = null;\n         if (c == null) {\n             return i;\n-        } else if (this.getCfg().getVipServer() == null\n-                || this.getCfg().getProductName() == null\n+        } else if (this.getCfg().getProductName() == null\n                 || this.getCfg().getVersion() == null) {\n-            logger.error(\"VipServer|ProductName|Version is null!\");\n+            logger.error(\"ProductName|Version is null!\");\n+            return i;\n+        } else if (this.getCfg().getVipServer() == null \n+        \t\t&& this.getCfg().getOfflineResourcesBaseUrl() == null) {\n+        \tlogger.error(\"One of offlineResourcesBaseUrl and vipServer must not be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4ODUyMg==", "bodyText": "Yes, I agree. But let's not do it in this PR. The scope of this is for offline mode support only. Let's do the improvements in a separate PR.\nI also do not like that the I18nFactory has its own instance of VIPCfg, but let's not touch this for now.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411788522", "createdAt": "2020-04-21T00:47:56Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -76,10 +76,13 @@ public Message getMessageInstance(Class c, VIPCfg cfg) {\n         Message i = null;\n         if (c == null) {\n             return i;\n-        } else if (this.getCfg().getVipServer() == null\n-                || this.getCfg().getProductName() == null\n+        } else if (this.getCfg().getProductName() == null\n                 || this.getCfg().getVersion() == null) {\n-            logger.error(\"VipServer|ProductName|Version is null!\");\n+            logger.error(\"ProductName|Version is null!\");\n+            return i;\n+        } else if (this.getCfg().getVipServer() == null \n+        \t\t&& this.getCfg().getOfflineResourcesBaseUrl() == null) {\n+        \tlogger.error(\"One of offlineResourcesBaseUrl and vipServer must not be null!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEwNw=="}, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDAxNTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo0MzoxM1rOGIFcIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDo1OTo1MFrOGIt0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDkxNQ==", "bodyText": "The judge logic isn't consistent with comments'.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411130915", "createdAt": "2020-04-20T06:43:13Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -57,13 +60,27 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n \t        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n \t        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n-\t        \n-        \tif (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n-\t\t        Map<String,String> messages = this.getMsgsJson(response);\n-\t\t        if (messages != null) {\n-\t\t        \tcacheItem.addCachedData(messages);\n-\t\t        }\n-        \t}\n+\t\t\t      \n+\t        if (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n+\t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n+\t\t        try {\n+\t        \t\tif (getResponseCode(respObj) == 200 && \n+\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n+\t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MjUyOQ==", "bodyText": "It actually is. Anyway, I have updated it to be more clear.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411792529", "createdAt": "2020-04-21T00:59:50Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -57,13 +60,27 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n \t        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n \t        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n-\t        \n-        \tif (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n-\t\t        Map<String,String> messages = this.getMsgsJson(response);\n-\t\t        if (messages != null) {\n-\t\t        \tcacheItem.addCachedData(messages);\n-\t\t        }\n-        \t}\n+\t\t\t      \n+\t        if (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n+\t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n+\t\t        try {\n+\t        \t\tif (getResponseCode(respObj) == 200 && \n+\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n+\t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDkxNQ=="}, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDMwMTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowMDoxN1rOGIH__w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMTowMToxMFrOGIt2aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3Mjg2Mw==", "bodyText": "Should defaultLocale be from VIPCfg?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411172863", "createdAt": "2020-04-20T08:00:17Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,57 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), dto.getComment(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), LocaleUtility.defaultLocale.toLanguageTag(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5MzAwMw==", "bodyText": "I am not changing this logic in this PR. The only change here is to support offline mode. Let's do it in the next PR.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411793003", "createdAt": "2020-04-21T01:01:10Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,57 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), dto.getComment(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), LocaleUtility.defaultLocale.toLanguageTag(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3Mjg2Mw=="}, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODQ1ODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToxNTozMFrOGIuJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0NDowN1rOGMyTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw==", "bodyText": "Service is removing fallback behavior.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411797853", "createdAt": "2020-04-21T01:15:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MzQzNg==", "bodyText": "The service-side's fallback to default locale? Yes we ignore it because we handle it on the client side. This is what is in the new client workflow. Please review the workflow, and then look at StringService lines 45-50.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412393436", "createdAt": "2020-04-21T18:29:16Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTE3NA==", "bodyText": "We don't need to consider fallback because service won't fallback in the future.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413545174", "createdAt": "2020-04-23T06:33:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExOTU4MA==", "bodyText": "I did not understand your comment. Could you please expound?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414119580", "createdAt": "2020-04-23T20:58:42Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2MDI3OA==", "bodyText": "@Xiaochao8 , are we planning to change the service's locale fallback logic in the future?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416060278", "createdAt": "2020-04-27T18:44:07Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODQ2ODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToxOTozMFrOGIuOaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODozMjo1NlrOGJSpOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTE0NQ==", "bodyText": "I don't see where 'match' is. Could you point out?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411799145", "createdAt": "2020-04-21T01:19:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)\n+\t        \t\t\t\t// Use the response only if its locale matches the request's locale\n \t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n \t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5NTgzNA==", "bodyText": "getResponseCode(respObj) == 200 --> means the response was successful\n\n\nLocaleUtility.isDefaultLocale(this.dto.getLocale()) --->  the request was for the default locale (en), so no problem\n\n\n!LocaleUtility.isDefaultLocale(getLocale(respObj)) --> the response's locale is not for the default locale (not en), so the service did not use the fallback mechanism here and therefore the response matches the request's locale.\n\n\nIf the response was 200, the request was for non-default, and the response was for the default locale, then we do not consider this case as \"successful\" fetch from service. So the client's fallback mechanism will kick in (review the workflow).", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412395834", "createdAt": "2020-04-21T18:32:56Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)\n+\t        \t\t\t\t// Use the response only if its locale matches the request's locale\n \t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n \t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTE0NQ=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY2NDEwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0MTowM1rOGIv5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTo0ODo0OVrOGLC6dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw==", "bodyText": "To get the string, the logic is not coherent, e.g. translation.getString is parallel with cacheItem.cachedData.get(key)\ndo you think it make sense?\nMy suggestion is CacheService should be in translation.getString, it should be not exposed to API caller(developer).", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411826443", "createdAt": "2020-04-21T02:41:03Z", "author": {"login": "linr211"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class OfflineModeTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"fil\");\n+    String comment = \"comment\";\n+    String messageFil = \"[{0}] Alerto sa pagsusuri\";\n+    String messageFr =\"[{0}] Alerte de test\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        VIPCfg.resetInstance();\n+    }\n+    \n+    @Test\n+    public void testGetMsgsOfflineMode() {\n+    \tVIPCfg cfg = VIPCfg.getInstance();\n+  \n+        try {\n+            cfg.initialize(\"vipconfig-offline\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \t\n+        Cache c = cfg.createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(cfg);\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        \n+    \tCacheService cs = new CacheService(dto);\n+    \t\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tMessageCacheItem cacheItem = cs.getCacheOfComponent();\n+    \tassertNotNull(cacheItem);\n+    \tassertEquals(messageFil, cacheItem.cachedData.get(key));\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNDIxNA==", "bodyText": "I do not recommend for product developers to use CacheService directly. This code is just for testing that what translation.getString returned is same as what is in the cache. We still recommend getting the string using translation.getString().", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412404214", "createdAt": "2020-04-21T18:45:42Z", "author": {"login": "jessiejuachon"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class OfflineModeTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"fil\");\n+    String comment = \"comment\";\n+    String messageFil = \"[{0}] Alerto sa pagsusuri\";\n+    String messageFr =\"[{0}] Alerte de test\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        VIPCfg.resetInstance();\n+    }\n+    \n+    @Test\n+    public void testGetMsgsOfflineMode() {\n+    \tVIPCfg cfg = VIPCfg.getInstance();\n+  \n+        try {\n+            cfg.initialize(\"vipconfig-offline\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \t\n+        Cache c = cfg.createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(cfg);\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        \n+    \tCacheService cs = new CacheService(dto);\n+    \t\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tMessageCacheItem cacheItem = cs.getCacheOfComponent();\n+    \tassertNotNull(cacheItem);\n+    \tassertEquals(messageFil, cacheItem.cachedData.get(key));\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzNTI1NA==", "bodyText": "Are both(transaltion.getString and cacheItem.cachedData.get) sequential? What transaltion.getString will return for the first call?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414235254", "createdAt": "2020-04-24T01:48:49Z", "author": {"login": "linr211"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class OfflineModeTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"fil\");\n+    String comment = \"comment\";\n+    String messageFil = \"[{0}] Alerto sa pagsusuri\";\n+    String messageFr =\"[{0}] Alerte de test\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        VIPCfg.resetInstance();\n+    }\n+    \n+    @Test\n+    public void testGetMsgsOfflineMode() {\n+    \tVIPCfg cfg = VIPCfg.getInstance();\n+  \n+        try {\n+            cfg.initialize(\"vipconfig-offline\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \t\n+        Cache c = cfg.createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(cfg);\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        \n+    \tCacheService cs = new CacheService(dto);\n+    \t\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tMessageCacheItem cacheItem = cs.getCacheOfComponent();\n+    \tassertNotNull(cacheItem);\n+    \tassertEquals(messageFil, cacheItem.cachedData.get(key));\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw=="}, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDAzMTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyMTowOFrOGJgVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0ODoyN1rOGLrwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ==", "bodyText": "Suggest to set 'never expire'", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412620189", "createdAt": "2020-04-22T02:21:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwMTA5NA==", "bodyText": "It has to expire becasue maybe the service was just temporarily down. So that when it expires, fetch from service can be re-tried.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413501094", "createdAt": "2020-04-23T04:32:40Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}, "originalCommit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NTY5NQ==", "bodyText": "When service is empty, it should be set as never expire.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413545695", "createdAt": "2020-04-23T06:34:12Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}, "originalCommit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNDUyMA==", "bodyText": "See MessageCacheItem.isExpired", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414904520", "createdAt": "2020-04-24T22:48:27Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ=="}, "originalCommit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDUyODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo0OToyM1rOGKbkWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMTowMzo1MFrOGK8B4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDYxNg==", "bodyText": "Why was this method added?\nAren't we going to remove source-related things out of client SDK?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413590616", "createdAt": "2020-04-23T07:49:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,6 +49,43 @@ public TranslationMessage() {\n         super();\n     }\n \n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyMjQ2Nw==", "bodyText": "2 use cases for using source messages:\n\nSource not collected yet\nI think in some products, it is acceptable to deploy the product even if source messages have just been added/updated by developers, and available neither in Singleton service (online mode) nor offline bundles. (e.g. VMC deploys every 2 weeks if I am not mistaken. It can have new source strings that are not yet in the SaaS Singleton).  In this case, the source message will be displayed.\nisPseudo = true\n\nThat being said, only these 2 use cases use the source messages. #1 is not even applicable for on-prem products where translations have to be complete before release to production. #2 is not applicable in production.\nOn the other hand, there is no more source collection!\nAlso, the fallback mechanism (as seen in the new client workflow) uses the default locale instead of the source messages because the default locale may not be the same as the source locale. The implementation of this fallback mechanism is quite simple (about 10 lines of code in StringService.getString).\nNote: I have updated the code with method comments for clarity.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414122467", "createdAt": "2020-04-23T21:03:50Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,6 +49,43 @@ public TranslationMessage() {\n         super();\n     }\n \n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDYxNg=="}, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDczMjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNDowNVrOGKdd_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo1MjoyN1rOGLr1sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMTc1OQ==", "bodyText": "We don't need to provide such fine-grained interface internally. Suggest transfering component data internally, then getting string message in the last step.\nCache works in this way.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413621759", "createdAt": "2020-04-23T08:34:05Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,58 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());\n+\t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n+\t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());\n+\t\t} catch (Exception e) {\n+\t\t\t// Do not update cacheItem\n+\t\t}\n+    }\n \n+    @Override\n     public String getString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNTc3Nw==", "bodyText": "okay", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414905777", "createdAt": "2020-04-24T22:52:27Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,58 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());\n+\t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n+\t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());\n+\t\t} catch (Exception e) {\n+\t\t\t// Do not update cacheItem\n+\t\t}\n+    }\n \n+    @Override\n     public String getString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMTc1OQ=="}, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDc1MDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/FormatUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNzo1NlrOGKdo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo1NzoxNVrOGLr7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDU0MA==", "bodyText": "Should log error when check fails?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413624540", "createdAt": "2020-04-23T08:37:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FormatUtils.java", "diffHunk": "@@ -30,7 +30,10 @@ public static String format(String pattern, Object... arguments) {\n     }\n \n     public static String format(String pattern, Locale locale, Object... arguments) {\n-        MessageFormat messageFormat = new MessageFormat(pattern, locale);\n-        return messageFormat.format(arguments, new StringBuilder(), new FieldPosition(0)).toString();\n+    \tif (pattern != null && !pattern.isEmpty() && arguments != null && arguments.length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNzMyMA==", "bodyText": "okay", "url": "https://github.com/vmware/singleton/pull/511#discussion_r414907320", "createdAt": "2020-04-24T22:57:15Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FormatUtils.java", "diffHunk": "@@ -30,7 +30,10 @@ public static String format(String pattern, Object... arguments) {\n     }\n \n     public static String format(String pattern, Locale locale, Object... arguments) {\n-        MessageFormat messageFormat = new MessageFormat(pattern, locale);\n-        return messageFormat.format(arguments, new StringBuilder(), new FieldPosition(0)).toString();\n+    \tif (pattern != null && !pattern.isEmpty() && arguments != null && arguments.length > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDU0MA=="}, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTkzNjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoxMDoxNFrOGL9zKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDozMFrOGMyKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMDA0Mg==", "bodyText": "args is unnecessary.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415200042", "createdAt": "2020-04-26T03:10:14Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1Nzg5OQ==", "bodyText": "Right", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416057899", "createdAt": "2020-04-27T18:40:30Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMDA0Mg=="}, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk4OTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo0ODo1MFrOGL-KNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo1NTo0MVrOGMyzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNTk0Mw==", "bodyText": "Still need to consider if isPseudo == true?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415205943", "createdAt": "2020-04-26T03:48:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2ODM1OA==", "bodyText": "Question.. why do we need to fetch the actual localized message if isPseudo is true? Isn't isPseudo just to show which keys use the client library? So isn't it enough to wrap the key like @@key@@?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416068358", "createdAt": "2020-04-27T18:55:41Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNTk0Mw=="}, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk5NDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MjoyNlrOGL-MUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDoxOFrOGMyJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQ4MQ==", "bodyText": "It seems that this line is unnecessary.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206481", "createdAt": "2020-04-26T03:52:26Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzczNA==", "bodyText": "Right", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416057734", "createdAt": "2020-04-27T18:40:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQ4MQ=="}, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk5NzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDoyM1rOGL-NcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDoyM1rOGL-NcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc2OA==", "bodyText": "Need to consider if adding ConstantsKeys.PSEUDOCHAR2?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206768", "createdAt": "2020-04-26T03:54:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  \n+\t\t    \t\n+    \t\t}\n+    \t}\n+    \treturn FormatUtils.format(message, locale, args);\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDY0MDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzozNTowOFrOGNGuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMzoyOVrOGNir3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NDc5OQ==", "bodyText": "why need to set it again? the instance of factory already has initialized with the cfg.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416394799", "createdAt": "2020-04-28T07:35:08Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1Mjk1OA==", "bodyText": "For testing purposes where different tests may use different config files. See CacheServiceTest.java", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416852958", "createdAt": "2020-04-28T19:03:29Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NDc5OQ=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDY4NDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0NjoxOFrOGNHIIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDo0NDo0NVrOGNsNOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ==", "bodyText": "VIPCfg.java is designed for the configuration file only and Opt classes are called by Service classes, so it's not proper to have it in this file.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401441", "createdAt": "2020-04-28T07:46:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -56,7 +62,18 @@\n     private String                     version;\n     private String                     vipServer;\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n-\n+    private String\t\t\t\t\t   offlineResourcesBaseUrl;\n+    \n+    /**\n+     * The optional SourceOpt object to access source messages. If SourceOpt is defined, then you can use a source message:\n+     * \ta. as fallback if neither localized message nor default locale message was not retrieved successfully\n+     * \tb. for pseudo-translation\n+     * \tc. if the message hasn't been collected for localization\n+     * e.g. ResourceBundleSrcOpt is the SourceOpt implementation that retrieves source messages from a .properties file. \n+     * If source messages need to come from another location such as a DB, then have another implementation like DBSourceOpt.\n+     */\n+    private SourceOpt\t\t\t\t   srcOpt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MjU4OQ==", "bodyText": "Where would you like to have it?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416852589", "createdAt": "2020-04-28T19:02:50Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -56,7 +62,18 @@\n     private String                     version;\n     private String                     vipServer;\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n-\n+    private String\t\t\t\t\t   offlineResourcesBaseUrl;\n+    \n+    /**\n+     * The optional SourceOpt object to access source messages. If SourceOpt is defined, then you can use a source message:\n+     * \ta. as fallback if neither localized message nor default locale message was not retrieved successfully\n+     * \tb. for pseudo-translation\n+     * \tc. if the message hasn't been collected for localization\n+     * e.g. ResourceBundleSrcOpt is the SourceOpt implementation that retrieves source messages from a .properties file. \n+     * If source messages need to come from another location such as a DB, then have another implementation like DBSourceOpt.\n+     */\n+    private SourceOpt\t\t\t\t   srcOpt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwODk1NQ==", "bodyText": "Move this to the next PR", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417008955", "createdAt": "2020-04-29T00:44:45Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -56,7 +62,18 @@\n     private String                     version;\n     private String                     vipServer;\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n-\n+    private String\t\t\t\t\t   offlineResourcesBaseUrl;\n+    \n+    /**\n+     * The optional SourceOpt object to access source messages. If SourceOpt is defined, then you can use a source message:\n+     * \ta. as fallback if neither localized message nor default locale message was not retrieved successfully\n+     * \tb. for pseudo-translation\n+     * \tc. if the message hasn't been collected for localization\n+     * e.g. ResourceBundleSrcOpt is the SourceOpt implementation that retrieves source messages from a .properties file. \n+     * If source messages need to come from another location such as a DB, then have another implementation like DBSourceOpt.\n+     */\n+    private SourceOpt\t\t\t\t   srcOpt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDY4NjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0Njo0OVrOGNHJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMTozMFrOGNsnDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw==", "bodyText": "when this function will be called?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401877", "createdAt": "2020-04-28T07:46:49Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -86,6 +103,10 @@ public static synchronized VIPCfg getInstance() {\n         }\n         return gcInstance;\n     }\n+    \n+    public static synchronized void resetInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTcxMw==", "bodyText": "See @before in CacheServiceTest.java and OfflineModeTest.java\nVipCfg is different for each test so have to reset it.\nI see that for other tests, you are manually putting configurations back to original as a workaround.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416855713", "createdAt": "2020-04-28T19:08:11Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -86,6 +103,10 @@ public static synchronized VIPCfg getInstance() {\n         }\n         return gcInstance;\n     }\n+    \n+    public static synchronized void resetInstance() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTU2Ng==", "bodyText": "I will change this.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015566", "createdAt": "2020-04-29T01:11:30Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -86,6 +103,10 @@ public static synchronized VIPCfg getInstance() {\n         }\n         return gcInstance;\n     }\n+    \n+    public static synchronized void resetInstance() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDY5MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0ODoxMVrOGNHM2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMTo0OFrOGNsnYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA==", "bodyText": "not proper parameter of SourceOpt", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416402648", "createdAt": "2020-04-28T07:48:11Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -120,9 +141,19 @@ public void initialize(String vipServer, String productName, String version) {\n     }\n     \n     /**\n-     * initialize the instance by a properties file\n+     * Initialize VIPCfg instance using a configuration file\n+     * \n+     * @param cfg The configuration file\n+     * @param srcOpt The optional SourceOpt object which gives access to source messages\n+     */\n+    public void initialize(String cfg, SourceOpt srcOpt) throws VIPClientInitException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NjYxNg==", "bodyText": "Where would you like to define the source? You hardcoded the source type to a ResourceBundle in getString2, which does not address the use case you mentioned the other time where source messages could come from DB or something else.\nWhat is your solution to this? Using the old getString with source parameter is not acceptable because it is error prone and devs have to type the source manually every time they need to use the string.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416856616", "createdAt": "2020-04-28T19:09:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -120,9 +141,19 @@ public void initialize(String vipServer, String productName, String version) {\n     }\n     \n     /**\n-     * initialize the instance by a properties file\n+     * Initialize VIPCfg instance using a configuration file\n+     * \n+     * @param cfg The configuration file\n+     * @param srcOpt The optional SourceOpt object which gives access to source messages\n+     */\n+    public void initialize(String cfg, SourceOpt srcOpt) throws VIPClientInitException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTY1MA==", "bodyText": "Let's move this to the next PR", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015650", "createdAt": "2020-04-29T01:11:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -120,9 +141,19 @@ public void initialize(String vipServer, String productName, String version) {\n     }\n     \n     /**\n-     * initialize the instance by a properties file\n+     * Initialize VIPCfg instance using a configuration file\n+     * \n+     * @param cfg The configuration file\n+     * @param srcOpt The optional SourceOpt object which gives access to source messages\n+     */\n+    public void initialize(String cfg, SourceOpt srcOpt) throws VIPClientInitException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDcxMzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1MzoyOVrOGNHZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToxMjo0NlrOGNsoOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw==", "bodyText": "i am not sure the remove for source collection codes is clean or not, so please have another PR for it.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416405923", "createdAt": "2020-04-28T07:53:29Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -303,10 +342,12 @@ public void setPseudo(boolean pseudo) {\n         this.pseudo = pseudo;\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NzY1NA==", "bodyText": "What would you like me to remove? The @deprecated annotations?\nWhich part about removing source collection do you not understand?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416857654", "createdAt": "2020-04-28T19:11:39Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -303,10 +342,12 @@ public void setPseudo(boolean pseudo) {\n         this.pseudo = pseudo;\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNTg2NQ==", "bodyText": "Move the source logic for getMessage in the next PR.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417015865", "createdAt": "2020-04-29T01:12:46Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -303,10 +342,12 @@ public void setPseudo(boolean pseudo) {\n         this.pseudo = pseudo;\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDcyNzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo1NzowNFrOGNHitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToyMTowNFrOGNsvtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA==", "bodyText": "not proper to config the SourceOpt in VIPcfg.java", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416408244", "createdAt": "2020-04-28T07:57:04Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {\n+\t\tthis.msgOriginsQueue = msgOriginsQueue;\n+\t}\n+\n+\tpublic SourceOpt getSrcOpt() {\n+\t\treturn srcOpt;\n+\t}\n+\n+\tpublic void setSrcOpt(SourceOpt srcOpt) {\n+\t\tthis.srcOpt = srcOpt;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1ODY3MQ==", "bodyText": "Where would you like to put it?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416858671", "createdAt": "2020-04-28T19:13:25Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {\n+\t\tthis.msgOriginsQueue = msgOriginsQueue;\n+\t}\n+\n+\tpublic SourceOpt getSrcOpt() {\n+\t\treturn srcOpt;\n+\t}\n+\n+\tpublic void setSrcOpt(SourceOpt srcOpt) {\n+\t\tthis.srcOpt = srcOpt;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzc4Mg==", "bodyText": "Move to the next PR", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417017782", "createdAt": "2020-04-29T01:21:04Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {\n+\t\tthis.msgOriginsQueue = msgOriginsQueue;\n+\t}\n+\n+\tpublic SourceOpt getSrcOpt() {\n+\t\treturn srcOpt;\n+\t}\n+\n+\tpublic void setSrcOpt(SourceOpt srcOpt) {\n+\t\tthis.srcOpt = srcOpt;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTQwODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo0NzozOVrOGNOGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMToyMToyOFrOGNswLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA==", "bodyText": "if the message is not empty, should return it and skip source handling?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416515750", "createdAt": "2020-04-28T10:47:39Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -47,29 +48,104 @@ public void setCfg(final VIPCfg cfg) {\n     public TranslationMessage() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The optional SourceOpt object which gives access to source messages\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from sourceOpt, if available</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = null;\n+    \tSourceOpt sourceOpt = VIPCfg.getInstance().getSrcOpt();\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \t// If sourceOpt is defined, pseudo-translation which uses the source message is supported\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \t// Get the message in the target locale\n+    \tmessage = getCachedMessage(component, key, locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MDM1NA==", "bodyText": "That was my initial thought, but the code in getString uses the source message for the following:\n```\n// \ta. if neither localized message nor default locale message was not retrieved successfully\n// \tb. for pseudo-translation\n//      c. if the message hasn't been collected for localization\nCan we skip these?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416860354", "createdAt": "2020-04-28T19:16:22Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -47,29 +48,104 @@ public void setCfg(final VIPCfg cfg) {\n     public TranslationMessage() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The optional SourceOpt object which gives access to source messages\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from sourceOpt, if available</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = null;\n+    \tSourceOpt sourceOpt = VIPCfg.getInstance().getSrcOpt();\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \t// If sourceOpt is defined, pseudo-translation which uses the source message is supported\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \t// Get the message in the target locale\n+    \tmessage = getCachedMessage(component, key, locale);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzkwMA==", "bodyText": "Move to the next PR", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417017900", "createdAt": "2020-04-29T01:21:28Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -47,29 +48,104 @@ public void setCfg(final VIPCfg cfg) {\n     public TranslationMessage() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The optional SourceOpt object which gives access to source messages\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from sourceOpt, if available</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = null;\n+    \tSourceOpt sourceOpt = VIPCfg.getInstance().getSrcOpt();\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \t// If sourceOpt is defined, pseudo-translation which uses the source message is supported\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \t// Get the message in the target locale\n+    \tmessage = getCachedMessage(component, key, locale);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjM2OTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1N1rOGNXZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyMDozNFrOGNjSkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2Nzk5OA==", "bodyText": "For the first call, the cacheOfComponent will be empty and then fallback to default value? is this correct?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416667998", "createdAt": "2020-04-28T14:38:57Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,59 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2Mjg2NQ==", "bodyText": "Yes, this is correct. If query for the target locale failed, then query for the default locale (which may or may not be the same as the source locale).  See the workflow design:\nhttps://confluence.eng.vmware.com/display/GQ/Singleton+Client+Library+-+Caching%2C+Fallback+Mechanism%2C+and+Other+Features#SingletonClientLibrary-Caching,FallbackMechanism,andOtherFeatures-L10nQuery", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416862865", "createdAt": "2020-04-28T19:20:34Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,59 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2Nzk5OA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjQ0MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo1MzoxM1rOGNYHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToxMjozN1rOGNjAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3OTY5MA==", "bodyText": "I don't see how to use this function 'setMsgOriginsQueue' and how to create the parameter 'msgOriginsQueue'.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416679690", "createdAt": "2020-04-28T14:53:13Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1ODIxMA==", "bodyText": "This function is not used, I can remove it if you like.\nSee VIPCfg.initialize:\n        // so add DataSourceEnum.VIP first to msgOriginsQueue\n        if (prop.containsKey(\"vipServer\")) {\n            this.vipServer = prop.getString(\"vipServer\");\n            this.msgOriginsQueue.add(DataSourceEnum.VIP);\n        }\n        if (prop.containsKey(\"offlineResourcesBaseUrl\")) {\n        \tthis.offlineResourcesBaseUrl = prop.getString(\"offlineResourcesBaseUrl\");\n        \tthis.msgOriginsQueue.add(DataSourceEnum.Bundle);\n        }", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416858210", "createdAt": "2020-04-28T19:12:37Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3OTY5MA=="}, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg0NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNDo1MFrOGN4CWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoyODo0MVrOGOHDiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjc3OA==", "bodyText": "The path should be relative to current working directory instead of Thread.currentThread().getContextClassLoader(), to make it easy to collect source.\nSource collection will make use of config file.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417202778", "createdAt": "2020-04-29T10:04:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,49 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n-\n-    public String getString() {\n-        JSONObject jo = this.getComponentMessages();\n-        String k = dto.getKey();\n-        String v = \"\";\n-        if (jo != null) {\n-            v = jo.get(k) == null ? \"\" : v;\n-        }\n-        return v;\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0ODg0Mw==", "bodyText": "Let's make this change after this PR because it is related to source collection?\nAlso, source collection will NOT make use of config file.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417448843", "createdAt": "2020-04-29T16:28:41Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,49 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n-\n-    public String getString() {\n-        JSONObject jo = this.getComponentMessages();\n-        String k = dto.getKey();\n-        String v = \"\";\n-        if (jo != null) {\n-            v = jo.get(k) == null ? \"\" : v;\n-        }\n-        return v;\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjc3OA=="}, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk1MTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTowNzoxNlrOGOWXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjo1MzoxOFrOGOX8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTcwMA==", "bodyText": "Need to remove this?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417699700", "createdAt": "2020-04-30T01:07:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNTU4MQ==", "bodyText": "Next PR", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417725581", "createdAt": "2020-04-30T02:53:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTcwMA=="}, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk1NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTowOTo1MlrOGOWaPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjo1MDo0OFrOGOX6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDQxMg==", "bodyText": "Remove this 2 methods or make them private?\nThey don't need to exported.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700412", "createdAt": "2020-04-30T01:09:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +411,24 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void addMsgOriginsQueue(DataSourceEnum dataSource) {\n+\t\tthis.msgOriginsQueue.add(dataSource);\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNDk3OA==", "bodyText": "This is just a standard setter. This can be useful.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417724978", "createdAt": "2020-04-30T02:50:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +411,24 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void addMsgOriginsQueue(DataSourceEnum dataSource) {\n+\t\tthis.msgOriginsQueue.add(dataSource);\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDQxMg=="}, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk2MDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToxMjoxOFrOGOWcfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjo1MjowMVrOGOX7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDk5MQ==", "bodyText": "If cachedData == null, then do nothing?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700991", "createdAt": "2020-04-30T01:12:18Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyNTI5OA==", "bodyText": "Yes, do nothing because there is nothing to add.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417725298", "createdAt": "2020-04-30T02:52:01Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDk5MQ=="}, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODk2MjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToxMzozMVrOGOWdqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozMjo1NVrOGOWw0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMTI4OA==", "bodyText": "In this logic, we should prevent querying fro server parallelly.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417701288", "createdAt": "2020-04-30T01:13:31Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);\n \t}\n \t\n-\tpublic synchronized void addCacheItem (MessageCacheItem cacheItem) {\n+\tpublic synchronized void setCacheItem (MessageCacheItem cacheItem) {\n+\t\t// Do not update cacheItem if timestamp is earlier than current. \n+\t\t// An older timestamp comes from an old thread that was blocked.\n+\t\tif (cacheItem.getTimestamp() < this.timestamp) \n+\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNjE5Mw==", "bodyText": "We can leave it if much effort.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417706193", "createdAt": "2020-04-30T01:32:55Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);\n \t}\n \t\n-\tpublic synchronized void addCacheItem (MessageCacheItem cacheItem) {\n+\tpublic synchronized void setCacheItem (MessageCacheItem cacheItem) {\n+\t\t// Do not update cacheItem if timestamp is earlier than current. \n+\t\t// An older timestamp comes from an old thread that was blocked.\n+\t\tif (cacheItem.getTimestamp() < this.timestamp) \n+\t\t\treturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMTI4OA=="}, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4572, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}