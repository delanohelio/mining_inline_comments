{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDYwNTAy", "number": 887, "title": "add the s3 configuration of encrypt access key and secret key", "bodyText": "", "createdAt": "2020-11-27T08:11:25Z", "url": "https://github.com/vmware/singleton/pull/887", "merged": true, "mergeCommit": {"oid": "f58b934d2fcc0341a9150a831945dfa0d9f33cdf"}, "closed": true, "closedAt": "2020-11-30T04:31:25Z", "author": {"login": "tigershi"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZxmsKgH2gAyNTI4NDYwNTAyOjQwYmI5MGZjMzdkOTFiNWFhZjRjODgxMTJlNDJiOWIyNWZmNmQwODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdglb9HAFqTUzOTg5MDgyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "40bb90fc37d91b5aaf4c88112e42b9b25ff6d085", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/40bb90fc37d91b5aaf4c88112e42b9b25ff6d085", "committedDate": "2020-11-06T07:12:57Z", "message": "fix print client hearder bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea966fb89fe368f927525e840204c45d1965d270", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/ea966fb89fe368f927525e840204c45d1965d270", "committedDate": "2020-11-13T03:51:12Z", "message": "change the gateway pattern url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "395857fdf8d2899fe43ca0616d69943cd4c3cb43", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/395857fdf8d2899fe43ca0616d69943cd4c3cb43", "committedDate": "2020-11-26T06:49:13Z", "message": "fixed the interceptor bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9d6cf137d70e7eadcd8c0b7058cc445c9b4b66", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/ba9d6cf137d70e7eadcd8c0b7058cc445c9b4b66", "committedDate": "2020-11-27T07:51:03Z", "message": "add the S3 password encrypt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/f2d5980b8bd5a955012b12f601fcad55448b534e", "committedDate": "2020-11-27T08:11:35Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Nzg2NzQ4", "url": "https://github.com/vmware/singleton/pull/887#pullrequestreview-539786748", "createdAt": "2020-11-27T08:29:40Z", "commit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzkwODA5", "url": "https://github.com/vmware/singleton/pull/887#pullrequestreview-539790809", "createdAt": "2020-11-27T08:36:22Z", "commit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODcyMDY2", "url": "https://github.com/vmware/singleton/pull/887#pullrequestreview-539872066", "createdAt": "2020-11-27T10:32:37Z", "commit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjozN1rOH65JJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNjo0MFrOH65YAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTY4NQ==", "bodyText": "Remove the comment and log the error message?", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515685", "createdAt": "2020-11-27T10:32:37Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTc4NQ==", "bodyText": "same as above", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515785", "createdAt": "2020-11-27T10:32:47Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjU5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password is encryption or not\n          \n          \n            \n            \t * the s3 password is encrypted or not", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531516591", "createdAt": "2020-11-27T10:33:59Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNzU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password public key use to decrypt data\n          \n          \n            \n            \t * the public key for decrypting data", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531517576", "createdAt": "2020-11-27T10:34:45Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate Boolean encryption;\n+\t\n+\n+\t/**\n+\t * the s3 password public key use to decrypt data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * it use to decode the access key and Secret key\n          \n          \n            \n             * This class is to decode the access key and Secret key", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531519488", "createdAt": "2020-11-27T10:36:40Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODkwODIy", "url": "https://github.com/vmware/singleton/pull/887#pullrequestreview-539890822", "createdAt": "2020-11-27T10:59:50Z", "commit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo1MFrOH66HlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo1MFrOH66HlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTY2OQ==", "bodyText": "Please check this issue reported by SONAR:\nhttps://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&rule_key=java%3AS5542", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531531669", "createdAt": "2020-11-27T10:59:50Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key\n+ *\n+ */\n+public class RsaCryptUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4169, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}