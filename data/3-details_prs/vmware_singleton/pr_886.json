{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDA0OTEx", "number": 886, "title": "save L10n resources to Amazon S3", "bodyText": "", "createdAt": "2020-11-27T05:39:11Z", "url": "https://github.com/vmware/singleton/pull/886", "merged": true, "mergeCommit": {"oid": "a7de655712f5214ad33abf8aa81787dae258d7fe"}, "closed": true, "closedAt": "2020-12-02T03:02:30Z", "author": {"login": "Xiaochao8"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdge_6_gH2gAyNTI4NDA0OTExOjQ1MTcyMzMzZjJkY2ZlMjk2ZWMxOTg4Njc3MmU2MjkzNWIwMTQxMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiFkmpAFqTU0MjQ2MjIzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45172333f2dcfe296ec19886772e62935b014103", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/45172333f2dcfe296ec19886772e62935b014103", "committedDate": "2020-11-27T03:29:47Z", "message": "Support saving resources to Amazon S3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0339560900d079a93efd0febd40c845ee601cd57", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/0339560900d079a93efd0febd40c845ee601cd57", "committedDate": "2020-11-27T05:36:45Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9b1c654106c6c7f45052c5ad0b610ebd504ef8", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/9c9b1c654106c6c7f45052c5ad0b610ebd504ef8", "committedDate": "2020-11-27T06:06:25Z", "message": "Add test cases & minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04ff6163b69679e90d9b9dcff228be9dd3f58ab6", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/04ff6163b69679e90d9b9dcff228be9dd3f58ab6", "committedDate": "2020-11-27T07:17:51Z", "message": "exclude S3 test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72e041fedd180e6490d0e241995369f37e737962", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/72e041fedd180e6490d0e241995369f37e737962", "committedDate": "2020-11-27T07:18:43Z", "message": "Merge branch 'master' into l10ns3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82625adecc65219acc1a5ff9faf7b73b40524bcd", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/82625adecc65219acc1a5ff9faf7b73b40524bcd", "committedDate": "2020-11-27T11:35:20Z", "message": "Improve test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a91326df94d65b5aea66473f719fffcddc4efaf7", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/a91326df94d65b5aea66473f719fffcddc4efaf7", "committedDate": "2020-11-27T11:58:36Z", "message": "sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "committedDate": "2020-11-27T14:37:54Z", "message": "sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c773d86d8f217bdd1c2e3f9cb53dd021e74fe33c", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/c773d86d8f217bdd1c2e3f9cb53dd021e74fe33c", "committedDate": "2020-11-29T10:51:47Z", "message": "Select DAO by profile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "659af7f26afabd77dfacca1a5112a013415a0846", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/659af7f26afabd77dfacca1a5112a013415a0846", "committedDate": "2020-11-29T11:11:22Z", "message": "cccccc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "committedDate": "2020-11-29T12:35:07Z", "message": "cccc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/b2832b2b6f68fa4ba74f5203fedac984f0b83b84", "committedDate": "2020-11-29T12:35:07Z", "message": "cccc"}, "afterCommit": {"oid": "49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/49d4e805e201c3286b3bd5e7dc546d1d432c7a82", "committedDate": "2020-11-27T14:37:54Z", "message": "sonar issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a9302a2974301b9c0d5384dd9a1ecbe9c7ae098", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/1a9302a2974301b9c0d5384dd9a1ecbe9c7ae098", "committedDate": "2020-11-29T14:53:25Z", "message": "ccc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05e2fe2ac08acf53aa6c02e74f482c44f859a5cd", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/05e2fe2ac08acf53aa6c02e74f482c44f859a5cd", "committedDate": "2020-11-29T15:02:04Z", "message": "cccccc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980788fe3334eeb173a8e33fe4b3a998abf2f022", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/980788fe3334eeb173a8e33fe4b3a998abf2f022", "committedDate": "2020-11-29T23:36:39Z", "message": "cccccccc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/9310b9b84ea890137940ef68f66d9494f2d7e326", "committedDate": "2020-11-30T00:12:08Z", "message": "Sonar issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTU2NTc2", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540556576", "createdAt": "2020-11-30T01:56:19Z", "commit": {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo1NjoyMFrOH7pk_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMTo1NjoyMFrOH7pk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMwOTI0NA==", "bodyText": "why change the i18n codes", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532309244", "createdAt": "2020-11-30T01:56:20Z", "author": {"login": "tigershi"}, "path": "g11n-ws/modules/md-data-api-s3impl/build.gradle", "diffHunk": "@@ -35,7 +35,8 @@ repositories {\n \n dependencies {\n     compile project(\":md-data-api\")\n-\tcompile project(\":vip-common\")\n+    compile project(\":vip-common\")\n+    compile project(\":md-data-s3util\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTcwOTc4", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540570978", "createdAt": "2020-11-30T02:58:00Z", "commit": {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo1ODowMFrOH7qZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMjo1ODowMFrOH7qZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static Logger logger = LoggerFactory.getLogger(SourceService.class);\n          \n          \n            \n            \tprivate static Logger logger = LoggerFactory.getLogger(RemoteSyncServicempl.class);", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532322639", "createdAt": "2020-11-30T02:58:00Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java", "diffHunk": "@@ -17,13 +29,19 @@\n import com.vmware.vip.common.constants.ConstantsKeys;\n import com.vmware.vip.common.constants.ConstantsUnicode;\n import com.vmware.vip.common.l10n.source.dto.ComponentSourceDTO;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n \n /**\n  * This implementation of interface SourceService.\n  */\n @Service\n public class RemoteSyncServicempl implements RemoteSyncService {\n \n+\tprivate static Logger logger = LoggerFactory.getLogger(SourceService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9310b9b84ea890137940ef68f66d9494f2d7e326"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe899ae638847668ca4d3dc4115d3fd4842194d1", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/fe899ae638847668ca4d3dc4115d3fd4842194d1", "committedDate": "2020-11-30T02:58:08Z", "message": "Update g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24fda5387a1d5c5647e54cd5699955feb4107c21", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/24fda5387a1d5c5647e54cd5699955feb4107c21", "committedDate": "2020-11-30T05:17:19Z", "message": "Remove project md-data-s3util"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e368d11e2e2526689842d20f8ff6901d50e401e7", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/e368d11e2e2526689842d20f8ff6901d50e401e7", "committedDate": "2020-11-30T05:22:17Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f063ec845828495e6570f37e2d0cc9243677ca65", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/f063ec845828495e6570f37e2d0cc9243677ca65", "committedDate": "2020-11-30T05:27:16Z", "message": "ccccc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d99df6f0d316676d2fdb1ada9338ba509ed94fa3", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/d99df6f0d316676d2fdb1ada9338ba509ed94fa3", "committedDate": "2020-11-30T05:36:04Z", "message": "Merge branch 'master' into l10ns3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/a7b90090fe5c1c4dcdfdf68b2573554fa846821e", "committedDate": "2020-11-30T05:57:18Z", "message": "Add encryption to l10n s3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjE3NTMx", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540617531", "createdAt": "2020-11-30T06:03:03Z", "commit": {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowMzowM1rOH7s7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowMzowM1rOH7s7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA3OQ==", "bodyText": "why remove the return\uff1f", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532364079", "createdAt": "2020-11-30T06:03:03Z", "author": {"login": "tigershi"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/conf/CollectSourceValidationInterceptor.java", "diffHunk": "@@ -237,7 +237,6 @@ private static void validateAllowList(HttpServletRequest request, Map<String, Li\n \t\t}\n \t\tif(!allowList.isEmpty() && allowList.containsKey(productName)\n \t\t\t\t&& allowList.get(productName).contains(version)) {\n-\t\t\treturn;\n \t\t}else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjE4MDU3", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540618057", "createdAt": "2020-11-30T06:04:43Z", "commit": {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowNDo0NFrOH7s89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowNDo0NFrOH7s89w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDUzNQ==", "bodyText": "I recommend change a other name for this class. because the same class name have defined in i18n manager", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532364535", "createdAt": "2020-11-30T06:04:44Z", "author": {"login": "tigershi"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key\n+ *\n+ */\n+public class RsaCryptUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b90090fe5c1c4dcdfdf68b2573554fa846821e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1ea58ccc9caee679bdfdccedb6f8fcb382eda3", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/8b1ea58ccc9caee679bdfdccedb6f8fcb382eda3", "committedDate": "2020-11-30T06:07:35Z", "message": "Minor change - modify build.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231bb10f00debe2a341e7203e661ed3ea30a5129", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/231bb10f00debe2a341e7203e661ed3ea30a5129", "committedDate": "2020-11-30T06:10:13Z", "message": "fix according to commments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjI0Nzcw", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540624770", "createdAt": "2020-11-30T06:24:43Z", "commit": {"oid": "231bb10f00debe2a341e7203e661ed3ea30a5129"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjI4MDQz", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540628043", "createdAt": "2020-11-30T06:33:54Z", "commit": {"oid": "231bb10f00debe2a341e7203e661ed3ea30a5129"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbeac2c7323d1baa3c2bf30bf72850b09f45368f", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/fbeac2c7323d1baa3c2bf30bf72850b09f45368f", "committedDate": "2020-11-30T09:27:10Z", "message": "Add a delay to wait for S3 operation complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f967369c78e0f6e373573e04c11afd317680dce", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/5f967369c78e0f6e373573e04c11afd317680dce", "committedDate": "2020-11-30T09:30:04Z", "message": "Merge branch 'master' into l10ns3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/c88cfe922c2c7411f0dc89325263177b396d2da6", "committedDate": "2020-11-30T10:07:06Z", "message": "Use content instead of version to check file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODk4Nzkz", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540898793", "createdAt": "2020-11-30T13:18:44Z", "commit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzoxODo0NFrOH76soA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1OTozM1rOH78Tig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4OTcyOA==", "bodyText": "What if s3util is null?\nAlso, double check it in other methods or classes.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532589728", "createdAt": "2020-11-30T13:18:44Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5MTU0OA==", "bodyText": "Should add sync for this method?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532591548", "createdAt": "2020-11-30T13:21:41Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTIxMw==", "bodyText": "To make the code more simple, you could throw the exception to upper layer and handle it.\nFor the failure of file update, I think we should add a mark for Logz to track and alert it?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532595213", "createdAt": "2020-11-30T13:27:29Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {\n+\t\tlogger.info(\"[Save sources to storage]: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tboolean bExist = false;\n+\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5NTg1MQ==", "bodyText": "should use logger.error?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532595851", "createdAt": "2020-11-30T13:28:33Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/S3SourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,87 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.source.dao.impl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SourceDaoImpl implements SourceDao {\n+\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SourceDaoImpl.class);\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Autowired\n+\tprivate SqlLiteDao sqlLite;\n+\n+\t/**\n+\t * the path of local resource file,can be configured in spring config file\n+\t **/\n+\t@Value(\"${source.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO componentMessagesDTO) {\n+\t\tlogger.info(\"Read content from file: {}/{}\", componentMessagesDTO.getLocale(),\n+\t\t\t\tcomponentMessagesDTO.getComponent());\n+\n+\t\treturn s3util.readBundle(basePath, componentMessagesDTO);\n+\t}\n+\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO compDTO) {\n+\t\tlogger.info(\"[Save sources to storage]: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tboolean bExist = false;\n+\t\ttry {\n+\t\t\tbExist = s3util.isBundleExist(basePath, compDTO);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (!s3util.lockBundleFile(basePath, compDTO, 10000)) {\n+\t\t\tlogger.info(\"failed to lock bundle file, return.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU5OTM0Nw==", "bodyText": "add sync for the method and final for the parameters.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532599347", "createdAt": "2020-11-30T13:33:57Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/SourceUtils.java", "diffHunk": "@@ -36,6 +52,54 @@ public static SourceAPIResponseDTO handleSourceResponse(boolean isSourceCached){\n \t\t}\n \t\treturn sourceAPIResponseDTO;\n \t}\n+\n+\t/*\n+\t * merge the cache content with JSON bundle by component, the structure of\n+\t * componentJSON is same with the bundle file.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static SingleComponentDTO mergeCacheWithBundle(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwMTA2MA==", "bodyText": "duplicated check for null with StringUtils.isEmpty?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532601060", "createdAt": "2020-11-30T13:36:40Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/SourceUtils.java", "diffHunk": "@@ -36,6 +52,54 @@ public static SourceAPIResponseDTO handleSourceResponse(boolean isSourceCached){\n \t\t}\n \t\treturn sourceAPIResponseDTO;\n \t}\n+\n+\t/*\n+\t * merge the cache content with JSON bundle by component, the structure of\n+\t * componentJSON is same with the bundle file.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static SingleComponentDTO mergeCacheWithBundle(\n+\t\t\tSingleComponentDTO cachedComponentSourceDTO, String componentJSON) {\n+\t\tComponentMessagesDTO componentMessagesDTO = new ComponentMessagesDTO();\n+\t\tBeanUtils.copyProperties(cachedComponentSourceDTO, componentMessagesDTO);\n+\t\tif (!StringUtils.isEmpty(componentJSON)) {\n+\t\t\tJSONParser parser = new JSONParser();\n+\t\t\tContainerFactory containerFactory = MapUtil.getContainerFactory();\n+\t\t\tMap<String, Object> messages;\n+\t\t\tMap<String, Object> bundle = null;\n+\t\t\ttry {\n+\t\t\t\tbundle = (Map<String, Object>) parser.parse(componentJSON,\n+\t\t\t\t\t\tcontainerFactory);\n+\t\t\t} catch (ParseException e) {\n+\t\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\t\t\n+\t\t\t}\n+\t\t\tif ( (bundle != null) && !StringUtils.isEmpty(bundle)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDA3OA==", "bodyText": "In this PR, there are too many try-catch, please throw it to a central place and handle it.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532604078", "createdAt": "2020-11-30T13:41:31Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\tString result = null;\n+\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNTA2OQ==", "bodyText": "In this PR, to reduce the log file size, please try to use logger.debug, not logger.info.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532605069", "createdAt": "2020-11-30T13:43:02Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNzI3Mw==", "bodyText": "add sync for this method.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532607273", "createdAt": "2020-11-30T13:46:19Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3Util.class);\n+\n+\tprivate AmazonS3 s3Inst;\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate boolean encryption;\n+\n+\t/**\n+\t * the s3 password public key used to decrypt data\n+\t */\n+\t@Value(\"${s3.password.publicKey}\")\n+\tprivate String publicKey;\n+\n+\t/**\n+\t * the s3 access Key\n+\t */\n+\t@Value(\"${s3.password.accessKey}\")\n+\tprivate String accessKey;\n+\n+\t/**\n+\t * the s3 secret key\n+\t */\n+\t@Value(\"${s3.password.secretkey}\")\n+\tprivate String secretkey;\n+\n+\t/**\n+\t * the s3 region name\n+\t */\n+\t@Value(\"${s3.region}\")\n+\tprivate String s3Region;\n+\n+\t/**\n+\t * the s3 bucket Name\n+\t */\n+\t@Value(\"${s3.bucketName}\")\n+\tprivate String bucketName;\n+\n+\tprivate Random random = new Random(System.currentTimeMillis());\n+\n+\tprivate static long retryInterval = 500; // milliseconds\n+\tprivate static long deadlockInterval = 10 * 60 * 1000L; // 10 minutes\n+\tprivate static long waitS3Operation = 100; // milliseconds\n+\t\n+\t/**\n+\t * initialize the the S3 client environment\n+\t */\n+\t@PostConstruct\n+\tprivate void init() {\n+\t\ts3Inst = AmazonS3ClientBuilder.standard()\n+\t\t\t\t.withCredentials(new AWSStaticCredentialsProvider(\n+\t\t\t\t\t\tnew BasicAWSCredentials(this.getAccessKey(), this.getSecretkey())))\n+\t\t\t\t.withRegion(s3Region).enablePathStyleAccess().build();\n+\t\tif (!s3Inst.doesBucketExistV2(bucketName)) {\n+\t\t\ts3Inst.createBucket(bucketName);\n+\t\t\t// Verify that the bucket was created by retrieving it and checking its\n+\t\t\t// location.\n+\t\t\tString bucketLocation = s3Inst.getBucketLocation(new GetBucketLocationRequest(bucketName));\n+\t\t\tlogger.info(\"Bucket location: {}\", bucketLocation);\n+\t\t}\n+\t}\n+\n+\tpublic String readBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"read bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\tString result = null;\n+\t\ttry {\n+\t\t\tresult = s3Inst.getObjectAsString(bucketName, bundlePath);\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t}\n+\n+\t\tlogger.info(\"end reading bundle file\");\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean writeBundle(String basePath, SingleComponentDTO compDTO) {\n+\t\tlogger.info(\"write bundle file: {}/{}/{}/{}\", compDTO.getProductName(), compDTO.getVersion(),\n+\t\t\t\tcompDTO.getComponent(), compDTO.getLocale());\n+\n+\t\ttry {\n+\t\t\tString bundlePath = getBundleFilePath(basePath, compDTO);\n+\t\t\ts3Inst.putObject(bucketName, bundlePath, convertComponentToString(compDTO));\n+\t\t\treturn true;\n+\t\t} catch (Exception e) {\n+\t\t\tlogger.error(e.getMessage(), e);\n+\t\t\treturn false;\n+\t\t} finally {\n+\t\t\tlogger.info(\"end writing bundle file\");\n+\t\t}\n+\t}\n+\n+\tpublic boolean isBundleExist(String basePath, SingleComponentDTO singleComponentDTO) {\n+\t\tString bundlePath = getBundleFilePath(basePath, singleComponentDTO);\n+\t\treturn s3Inst.doesObjectExist(bucketName, bundlePath);\n+\t}\n+\n+\tpublic String convertComponentToString(SingleComponentDTO compDTO) throws JsonProcessingException {\n+\t\tMap<String, Object> json = new HashMap<>();\n+\t\tjson.put(ConstantsKeys.COMPONENT, compDTO.getComponent());\n+\t\tjson.put(ConstantsKeys.lOCALE, compDTO.getLocale());\n+\t\tjson.put(ConstantsKeys.MESSAGES, compDTO.getMessages());\n+\t\tjson.put(ConstantsKeys.ID, compDTO.getId());\n+\t\treturn new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(json);\n+\t}\n+\n+\tpublic boolean lockBundleFile(String basePath, SingleComponentDTO compDTO, long waittime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjczMg==", "bodyText": "This class is too complicated, it mix business logic(read, write, update, ect.) with string handling and lock, so:\n\nMove string handling to a common class which can handle the string;\nConsider use an internal class for lock", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532612732", "createdAt": "2020-11-30T13:54:41Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/utils/S3Util.java", "diffHunk": "@@ -0,0 +1,283 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.utils;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+import com.amazonaws.services.s3.model.GetBucketLocationRequest;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.conf.RsaCryptUtil;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+\n+@Component(\"S3Util\")\n+@Profile(\"s3\")\n+public class S3Util {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA==", "bodyText": "add description of this method, it's not easy to understand what happen in it.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532616074", "createdAt": "2020-11-30T13:59:33Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,92 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTM2ODAw", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-540936800", "createdAt": "2020-11-30T14:04:44Z", "commit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowNDo0NFrOH78h0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowNDo0NFrOH78h0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxOTcyOQ==", "bodyText": "Remove any unnecessary comment lines.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r532619729", "createdAt": "2020-11-30T14:04:44Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/SourceServiceImpl.java", "diffHunk": "@@ -203,90 +202,90 @@ private static boolean catcheMapDTO(Map<String, ComponentSourceDTO> sources) thr\n \t\n \t\n \t\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static void updateKeyValue( ComponentSourceDTO cacheComSourceDTO,  Map<String, Object> messages,  Map<String, Object> comments, String ehcacheKey) throws VIPCacheException {\n-\t\tfor(Entry<String, Object> entry: messages.entrySet()) {\n-\t\t\tString key = entry.getKey();\n-\t\t\tObject source= entry.getValue();\n-\t\t\tObject comment = comments.get(key);\n-\t\t\t\n-\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getMessages(), key, source);\n-\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\t\t\t\t\n-\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getComments(), key, comment);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tSourceCacheUtils.updateSourceCache(ehcacheKey, cacheComSourceDTO);\n-\t\tLOGGER.info(\"Update cache: {}\", ehcacheKey);\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static boolean catcheStrDTO(StringSourceDTO stringSourceDTO) throws L10nAPIException {\n-\n-\t\tstringSourceDTO.setLocale(ConstantsKeys.LATEST);\n-\t\tString key = getKey(stringSourceDTO);\n-\t\tString source = stringSourceDTO.getSource();\n-\t\tString comment = stringSourceDTO.getComment();\n-\t\tString ehcacheKey = PathUtil.generateCacheKey(stringSourceDTO);\n-\t\tComponentSourceDTO cacheComSourceDTO = null;\n-\t\ttry {\n-\t\t\tcacheComSourceDTO = TranslationCache3.getCachedObject(CacheName.SOURCE, ehcacheKey);\n-\n-\t\t\tif (StringUtils.isEmpty(cacheComSourceDTO)) {\n-\t\t\t\tcacheComSourceDTO = new ComponentSourceDTO();\n-\t\t\t\tBeanUtils.copyProperties(stringSourceDTO, cacheComSourceDTO);\n-\t\t\t\tcacheComSourceDTO.setMessages(key, source);\n-\t\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\t\t\t\t\tcacheComSourceDTO.setComments(key, comment);\n-\t\t\t\t}\n-\n-\t\t\t\tTranslationCache3.addCachedObject(CacheName.SOURCE, ehcacheKey, cacheComSourceDTO);\n-\n-\t\t\t} else {\n-\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getMessages(), key, source);\n-\t\t\t\t\n-\t\t\t\tcacheComSourceDTO.setMessages(key, source);\n-\n-\t\t\t\tif (!StringUtils.isEmpty(comment)) {\n-\n-\t\t\t\t\tMapUtil.updateKeyValue(cacheComSourceDTO.getComments(), key, comment);\n-\n-\t\t\t\t\tcacheComSourceDTO.setComments(key, comment);\n-\t\t\t\t}\n-\t\t\t\tTranslationCache3.updateCachedObject(CacheName.SOURCE, ehcacheKey, cacheComSourceDTO);\n-\t\t\t\tLOGGER.info(\"Update cache: {}\", ehcacheKey);\n-\t\t\t}\n-\t\t} catch (VIPCacheException e) {\n-\t\t\tLOGGER.error(e.getMessage(), e);\n-\t\t\tthrow new L10nAPIException(\"Error occurs in cache when perform cacheSource function.\", e);\n-\t\t}\n-\t\treturn true;\n-\t}\n+//\t@SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a6e0e23b193ae1c66a2507924e6344d0bba68b", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/e2a6e0e23b193ae1c66a2507924e6344d0bba68b", "committedDate": "2020-12-01T03:05:06Z", "message": "change after review.\nChange S3 encryption keys."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/f144b7eccf1f659fef11875d0daa7e957cc5de68", "committedDate": "2020-12-01T04:57:07Z", "message": "Create an internal Locker class to lock S3 file.\nMove String operation out of S3Util"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e2310149af9d7f5faa9ba8f9d539c818d11958f", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/6e2310149af9d7f5faa9ba8f9d539c818d11958f", "committedDate": "2020-12-01T04:43:06Z", "message": "Create an internal Locker class to lock S3 file."}, "afterCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/f144b7eccf1f659fef11875d0daa7e957cc5de68", "committedDate": "2020-12-01T04:57:07Z", "message": "Create an internal Locker class to lock S3 file.\nMove String operation out of S3Util"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDkyOTA2", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-541492906", "createdAt": "2020-12-01T05:10:21Z", "commit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNToxMDoyMVrOH8Ya5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNTozMTo1M1rOH8YyBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NjcwOQ==", "bodyText": "all info log in dao layer should be changed to debug log, to avoid frequently log update and large log file;\nall error log should be thrown to upper layer to handle.\nplease have a global check.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533076709", "createdAt": "2020-12-01T05:10:21Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/LocalSourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.source.dao.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.exceptions.VIPResourceOperationException;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.LocalJSONReader;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+import com.vmware.vip.common.utils.SortJSONUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@Repository\n+@Profile(value=\"bundle\")\n+public class LocalSourceDaoImpl implements SourceDao {\n+    private static Logger LOGGER = LoggerFactory.getLogger(LocalSourceDaoImpl.class);\n+\n+    @Autowired\n+    private SqlLiteDao sqlLite;\n+\n+    /**\n+     * the path of local resource file,can be configed in spring config file\n+     **/\n+    @Value(\"${source.bundle.file.basepath}\")\n+    private String basepath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO singleComponentDTO) {\n+\t\tString result = \"\";\n+\t\tString component = singleComponentDTO.getComponent();\n+\t\tif (StringUtils.isEmpty(component)) {\n+\t\t\tcomponent = ConstantsFile.DEFAULT_COMPONENT;\n+\t\t\tsingleComponentDTO.setComponent(component);\n+\t\t}\n+\t\tString filepath = ConstantsFile.L10N_BUNDLES_PATH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getProductVersionConcatName(singleComponentDTO)\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ component\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getLocalizedJSONFileName(ConstantsKeys.LATEST);\n+\t\tLOGGER.info(\"Read content from file: {}{}\",  basepath, filepath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3NzUxOQ==", "bodyText": "change it to updateOrAddBundle?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533077519", "createdAt": "2020-12-01T05:13:24Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/dao/impl/LocalSourceDaoImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.l10n.source.dao.impl;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vmware.l10n.record.dao.SqlLiteDao;\n+import com.vmware.l10n.source.dao.SourceDao;\n+import com.vmware.l10n.utils.SourceUtils;\n+import com.vmware.vip.common.constants.ConstantsChar;\n+import com.vmware.vip.common.constants.ConstantsFile;\n+import com.vmware.vip.common.constants.ConstantsKeys;\n+import com.vmware.vip.common.exceptions.VIPResourceOperationException;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.i18n.resourcefile.LocalJSONReader;\n+import com.vmware.vip.common.i18n.resourcefile.ResourceFilePathGetter;\n+import com.vmware.vip.common.l10n.source.dto.ComponentMessagesDTO;\n+import com.vmware.vip.common.utils.SortJSONUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+@Repository\n+@Profile(value=\"bundle\")\n+public class LocalSourceDaoImpl implements SourceDao {\n+    private static Logger LOGGER = LoggerFactory.getLogger(LocalSourceDaoImpl.class);\n+\n+    @Autowired\n+    private SqlLiteDao sqlLite;\n+\n+    /**\n+     * the path of local resource file,can be configed in spring config file\n+     **/\n+    @Value(\"${source.bundle.file.basepath}\")\n+    private String basepath;\n+\n+\t@Override\n+\tpublic String getFromBundle(SingleComponentDTO singleComponentDTO) {\n+\t\tString result = \"\";\n+\t\tString component = singleComponentDTO.getComponent();\n+\t\tif (StringUtils.isEmpty(component)) {\n+\t\t\tcomponent = ConstantsFile.DEFAULT_COMPONENT;\n+\t\t\tsingleComponentDTO.setComponent(component);\n+\t\t}\n+\t\tString filepath = ConstantsFile.L10N_BUNDLES_PATH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getProductVersionConcatName(singleComponentDTO)\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ component\n+\t\t\t\t+ ConstantsChar.BACKSLASH\n+\t\t\t\t+ ResourceFilePathGetter\n+\t\t\t\t\t\t.getLocalizedJSONFileName(ConstantsKeys.LATEST);\n+\t\tLOGGER.info(\"Read content from file: {}{}\",  basepath, filepath);\n+\n+\t\tif (new File(basepath + filepath).exists()) {\n+\t\t\tresult = new LocalJSONReader().readLocalJSONFile(basepath\n+\t\t\t\t\t+ filepath);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\t\n+\t@Override\n+\tpublic boolean updateToBundle(ComponentMessagesDTO componentMessagesDTO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3ODc1MA==", "bodyText": "should be logger.error?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533078750", "createdAt": "2020-12-01T05:17:56Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/source/service/impl/RemoteSyncServicempl.java", "diffHunk": "@@ -63,12 +81,54 @@ public void send(ComponentSourceDTO componentSourceDTO, String remoteURL)\n \t\t\t\t\tcomponentSourceDTO.getMessages());\n \t\t\trequestParam.put(ConstantsKeys.COMMENTS,\n \t\t\t\t\tcomponentSourceDTO.getComments());\n-\t\t\tpushFlag = sourceDao.sendToRemote(url.toString(), requestParam);\n+\t\t\tpushFlag = sendToRemote(url.toString(), requestParam);\n \t\t}\n \t\tif (!pushFlag) {\n \t\t\tthrow new L10nAPIException(\"Error occur when send to remote [\"\n \t\t\t\t\t+ remoteURL + \"].\");\n \t\t}\n \t}\n \n+\t/**\n+\t * Send source strings to GRM by component.\n+\t *\n+\t * @param url          the URL of register strings API provided by GRM\n+\t * @param requestParam the request body, it includes 'messages' and 'comments',\n+\t *                     the former represents source strings and the latter\n+\t *                     represents comments for source strings\n+\t * @return send result, true represents success, false represents failure.\n+\t */\n+\tpublic boolean sendToRemote(String url, Map<String, Object> requestParam) {\n+\t\tlogger.info(\"Send data to remote server [{}] ...\", url);\n+\t\tlogger.info(\"The request body is: {}\", requestParam);\n+\t\tboolean result = false;\n+\t\tRestTemplate restTemplate = new RestTemplate();\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\tMediaType type = MediaType.parseMediaType(\"application/json; charset=UTF-8\");\n+\t\theaders.setContentType(type);\n+\t\theaders.add(\"Accept\", MediaType.APPLICATION_JSON.toString());\n+\t\tJSONObject jsonObj = new JSONObject(requestParam);\n+\t\tHttpEntity<String> formEntity = new HttpEntity<String>(jsonObj.toString(), headers);\n+\t\ttry {\n+\t\t\tResponseEntity<GRMResponseDTO> responseEntity = restTemplate.postForEntity(url, formEntity,\n+\t\t\t\t\tGRMResponseDTO.class);\n+\t\t\tGRMResponseDTO gRMResponseDTO = responseEntity.getBody();\n+\t\t\tif (gRMResponseDTO == null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (gRMResponseDTO.getStatus() == GRMAPIResponseStatus.CREATED.getCode()) {\n+\t\t\t\tresult = true;\n+\t\t\t\tlogger.info(\"The request has succeeded, the result: {} {}\", gRMResponseDTO.getStatus(),\n+\t\t\t\t\t\tgRMResponseDTO.getResult());\n+\t\t\t} else {\n+\t\t\t\tlogger.info(\"The request has failed, the response code: {} reason: {}\", +gRMResponseDTO.getStatus(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjAxNw==", "bodyText": "componentMessagesDTO does not need to be converted to linked DTO by code line 68 ~ 80 do it?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082017", "createdAt": "2020-12-01T05:29:50Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+    /**\n+     * Get translation data from local file\n+     *\n+     * @param componentMessagesDTO Specify the bundle file to get.\n+     * @return componentMessagesDTO\n+     */\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)\n+\t\t\tthrows L10nAPIException {\n+\t\tlogger.info(\"[get Translation from S3]\");\n+\n+\t\t\n+\t\tString bunldeString;\n+\t\ttry {\n+\t\t\tif (s3util.isBundleExist(basePath, componentMessagesDTO)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileFound.toString());\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, componentMessagesDTO);\n+\t\t\t} else {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileNotFound.toString());\n+\t\t\t\tComponentMessagesDTO tempDTO = new ComponentMessagesDTO();\n+\t\t\t\tBeanUtils.copyProperties(componentMessagesDTO, tempDTO);\n+\t\t\t\ttempDTO.setLocale(ConstantsUnicode.EN);\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, tempDTO);\n+\t\t\t}\n+\t\t\tif (StringUtils.isEmpty(bunldeString)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(TranslationQueryStatusType.ComponentNotFound.toString());\n+\t\t\t\treturn componentMessagesDTO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjQwOA==", "bodyText": "should change the method name to getTranslationFromS3? From the logic it does not read from local.", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082408", "createdAt": "2020-12-01T05:31:07Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,92 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxNjA3NA=="}, "originalCommit": {"oid": "c88cfe922c2c7411f0dc89325263177b396d2da6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA4MjYzMA==", "bodyText": "change it to writeTranslationToS3?", "url": "https://github.com/vmware/singleton/pull/886#discussion_r533082630", "createdAt": "2020-12-01T05:31:53Z", "author": {"login": "linr211"}, "path": "g11n-ws/vip-manager-l10n/src/main/java/com/vmware/l10n/translation/dao/impl/S3SingleComponentDaoImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+//Copyright 2019-2020 VMware, Inc.\n+//SPDX-License-Identifier: EPL-2.0\n+package com.vmware.l10n.translation.dao.impl;\n+\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.util.StringUtils;\n+\n+import com.amazonaws.SdkClientException;\n+import com.vmware.l10n.translation.dao.SingleComponentDao;\n+import com.vmware.l10n.translation.dto.ComponentMessagesDTO;\n+import com.vmware.l10n.utils.S3Util;\n+import com.vmware.vip.common.constants.ConstantsUnicode;\n+import com.vmware.vip.common.constants.TranslationQueryStatusType;\n+import com.vmware.vip.common.i18n.dto.SingleComponentDTO;\n+import com.vmware.vip.common.l10n.exception.L10nAPIException;\n+\n+\n+@Repository\n+@Profile(\"s3\")\n+public class S3SingleComponentDaoImpl implements SingleComponentDao {\n+\tprivate static Logger logger = LoggerFactory.getLogger(S3SingleComponentDaoImpl.class);\n+\n+\t@Value(\"${translation.bundle.file.basepath}\")\n+\tprivate String basePath;\n+\n+\t@Autowired\n+\tprivate S3Util s3util;\n+\n+    /**\n+     * Get translation data from local file\n+     *\n+     * @param componentMessagesDTO Specify the bundle file to get.\n+     * @return componentMessagesDTO\n+     */\n+\t@Override\n+\tpublic ComponentMessagesDTO getLocalTranslationFromFile(ComponentMessagesDTO componentMessagesDTO)\n+\t\t\tthrows L10nAPIException {\n+\t\tlogger.info(\"[get Translation from S3]\");\n+\n+\t\t\n+\t\tString bunldeString;\n+\t\ttry {\n+\t\t\tif (s3util.isBundleExist(basePath, componentMessagesDTO)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileFound.toString());\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, componentMessagesDTO);\n+\t\t\t} else {\n+\t\t\t\tcomponentMessagesDTO.setStatus(\"Translation\" + TranslationQueryStatusType.FileNotFound.toString());\n+\t\t\t\tComponentMessagesDTO tempDTO = new ComponentMessagesDTO();\n+\t\t\t\tBeanUtils.copyProperties(componentMessagesDTO, tempDTO);\n+\t\t\t\ttempDTO.setLocale(ConstantsUnicode.EN);\n+\t\t\t\tbunldeString = s3util.readBundle(basePath, tempDTO);\n+\t\t\t}\n+\t\t\tif (StringUtils.isEmpty(bunldeString)) {\n+\t\t\t\tcomponentMessagesDTO.setStatus(TranslationQueryStatusType.ComponentNotFound.toString());\n+\t\t\t\treturn componentMessagesDTO;\n+\t\t\t}\n+\t\t} catch (SdkClientException e) {\n+\t\t\tthrow new L10nAPIException(\"Connecting S3 failed.\", e);\n+\t\t}\n+\n+\t\tSingleComponentDTO caseComponentMessagesDTO;\n+\t\ttry {\n+\t\t\tcaseComponentMessagesDTO = SingleComponentDTO.getSingleComponentDTOWithLinkedMessages(bunldeString);\n+\t\t\tcaseComponentMessagesDTO.setProductName(componentMessagesDTO.getProductName());\n+\t\t\tcaseComponentMessagesDTO.setVersion(componentMessagesDTO.getVersion());\n+\t\t\tcaseComponentMessagesDTO.setStatus(componentMessagesDTO.getStatus());\n+\t\t} catch (ParseException e) {\n+\t\t\tthrow new L10nAPIException(\"Parsing json failed.\", e);\n+\t\t}\n+\n+\t\tComponentMessagesDTO msgDTO = new ComponentMessagesDTO();\n+\t\tBeanUtils.copyProperties(caseComponentMessagesDTO, msgDTO);\n+\t\treturn msgDTO;\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean writeLocalTranslationToFile(ComponentMessagesDTO componentMessagesDTO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f144b7eccf1f659fef11875d0daa7e957cc5de68"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e26a170669b5089c1f107c3f51b865d6a5cd116", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/7e26a170669b5089c1f107c3f51b865d6a5cd116", "committedDate": "2020-12-01T06:19:57Z", "message": "Change after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNTI1MDkx", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-541525091", "createdAt": "2020-12-01T06:39:16Z", "commit": {"oid": "7e26a170669b5089c1f107c3f51b865d6a5cd116"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7ec10c72d392e1402b5f7d6ed579a3c9dd1561", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/5c7ec10c72d392e1402b5f7d6ed579a3c9dd1561", "committedDate": "2020-12-01T07:08:28Z", "message": "remove extra log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a5a7562da2786afbfcd3d954bb3fd8b99be3406", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/8a5a7562da2786afbfcd3d954bb3fd8b99be3406", "committedDate": "2020-12-01T08:04:07Z", "message": "Lower log level\nThrow exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7078045b1c985beabbd76b0a82696872ed9cf4d5", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/7078045b1c985beabbd76b0a82696872ed9cf4d5", "committedDate": "2020-12-01T08:15:29Z", "message": "Fix test errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODI1OTIz", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-541825923", "createdAt": "2020-12-01T11:58:41Z", "commit": {"oid": "7078045b1c985beabbd76b0a82696872ed9cf4d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDYyMjMz", "url": "https://github.com/vmware/singleton/pull/886#pullrequestreview-542462233", "createdAt": "2020-12-02T03:00:10Z", "commit": {"oid": "7078045b1c985beabbd76b0a82696872ed9cf4d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}