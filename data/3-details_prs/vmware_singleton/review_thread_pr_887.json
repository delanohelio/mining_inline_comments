{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDYwNTAy", "number": 887, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjozN1rOE98U6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo1MFrOE98_KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg2OTg3OnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjozN1rOH65JJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjozN1rOH65JJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTY4NQ==", "bodyText": "Remove the comment and log the error message?", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515685", "createdAt": "2020-11-27T10:32:37Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg3MDQ0OnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjo0N1rOH65JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMjo0N1rOH65JiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTc4NQ==", "bodyText": "same as above", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531515785", "createdAt": "2020-11-27T10:32:47Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg3NjIxOnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMzo1OVrOH65Mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMzo1OVrOH65Mrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjU5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password is encryption or not\n          \n          \n            \n            \t * the s3 password is encrypted or not", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531516591", "createdAt": "2020-11-27T10:33:59Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg4NDUxOnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNDo0NVrOH65QiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNDo0NVrOH65QiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNzU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * the s3 password public key use to decrypt data\n          \n          \n            \n            \t * the public key for decrypting data", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531517576", "createdAt": "2020-11-27T10:34:45Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/S3Config.java", "diffHunk": "@@ -6,67 +6,116 @@\n \n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Configuration;\n+\n /**\n  * the configuration of the S3 client\n  */\n @Configuration\n public class S3Config {\n \n-   public String getAccessKey() {\n-      return accessKey;\n-   }\n-\n-   public void setAccessKey(String accessKey) {\n-      this.accessKey = accessKey;\n-   }\n-\n-   public String getSecretkey() {\n-      return secretkey;\n-   }\n-\n-   public void setSecretkey(String secretkey) {\n-      this.secretkey = secretkey;\n-   }\n-\n-   public String getBucketName() {\n-      return bucketName;\n-   }\n-\n-   public void setBucketName(String bucketName) {\n-      this.bucketName = bucketName;\n-   }\n-\n-   public String getS3Region() {\n-      return s3Region;\n-   }\n-\n-   public void setS3Region(String s3Region) {\n-      this.s3Region = s3Region;\n-   }\n-\n-   /**\n-    * the s3 access Key\n-    */\n-   @Value(\"${s3.accessKey}\")\n-   private String accessKey;\n-\n-   /**\n-    * the s3 secret key\n-    */\n-   @Value(\"${s3.secretkey}\")\n-   private String secretkey;\n-\n-   /**\n-    * the s3 region name\n-    */\n-   @Value(\"${s3.region}\")\n-   private String s3Region;\n-\n-   /**\n-    * the s3 buncket Name\n-    */\n-   @Value(\"${s3.bucketName}\")\n-   private String bucketName;\n+\tpublic String getAccessKey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.accessKey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.accessKey;\n+\t\t}\n+\t}\n+\n+\tpublic void setAccessKey(String accessKey) {\n+\t\tthis.accessKey = accessKey;\n+\t}\n+\n+\tpublic String getSecretkey() {\n+\t\tif (this.encryption) {\n+\t\t\ttry {\n+\t\t\t\treturn RsaCryptUtils.decryptData(this.secretkey, this.publicKey);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t// TODO Auto-generated catch block\n+\t\t\t\te.printStackTrace();\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} else {\n+\t\t\treturn this.secretkey;\n+\t\t}\n+\t}\n+\n+\tpublic void setSecretkey(String secretkey) {\n+\t\tthis.secretkey = secretkey;\n+\t}\n+\n+\tpublic String getBucketName() {\n+\t\treturn bucketName;\n+\t}\n+\n+\tpublic void setBucketName(String bucketName) {\n+\t\tthis.bucketName = bucketName;\n+\t}\n+\n+\tpublic String getS3Region() {\n+\t\treturn s3Region;\n+\t}\n+\n+\tpublic void setS3Region(String s3Region) {\n+\t\tthis.s3Region = s3Region;\n+\t}\n+\n+\tpublic Boolean isEncryption() {\n+\t\treturn encryption;\n+\t}\n+\n+\tpublic void setEncryption(Boolean encryption) {\n+\t\tthis.encryption = encryption;\n+\t}\n+\n+\tpublic String getPublicKey() {\n+\t\treturn publicKey;\n+\t}\n+\n+\tpublic void setPublicKey(String publicKey) {\n+\t\tthis.publicKey = publicKey;\n+\t}\n+\n+\t/**\n+\t * the s3 password is encryption or not\n+\t */\n+\t@Value(\"${s3.password.encryption:false}\")\n+\tprivate Boolean encryption;\n+\t\n+\n+\t/**\n+\t * the s3 password public key use to decrypt data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzkwMDEyOnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNjo0MFrOH65YAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNjo0MFrOH65YAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * it use to decode the access key and Secret key\n          \n          \n            \n             * This class is to decode the access key and Secret key", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531519488", "createdAt": "2020-11-27T10:36:40Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzk3ODAwOnYy", "diffSide": "RIGHT", "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo1MFrOH66HlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo1MFrOH66HlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTY2OQ==", "bodyText": "Please check this issue reported by SONAR:\nhttps://sonarcloud.io/organizations/singleton/rules?open=java%3AS5542&rule_key=java%3AS5542", "url": "https://github.com/vmware/singleton/pull/887#discussion_r531531669", "createdAt": "2020-11-27T10:59:50Z", "author": {"login": "Xiaochao8"}, "path": "g11n-ws/modules/md-data-api-s3impl/src/main/java/com/vmware/vip/messages/data/conf/RsaCryptUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vip.messages.data.conf;\n+ \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+/**\n+ * \n+ * it use to decode the access key and Secret key\n+ *\n+ */\n+public class RsaCryptUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d5980b8bd5a955012b12f601fcad55448b534e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4411, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}