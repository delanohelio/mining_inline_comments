{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjYxODAy", "number": 532, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1OToxMlrOD5reFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MjoyM1rOD6ew1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODA3NjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNTo1OToxMlrOGRE_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzozMDo1MVrOGRdw7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MDY2Ng==", "bodyText": "Isn't the parameter 'language' used? so remove it?\nFor the returned type 'Map<String, String>\u2018, if the key and value are some, why not use List instead of Map?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420560666", "createdAt": "2020-05-06T05:59:12Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());\n+    \n+    @Override\n+    public Map<String, String> getDisplayNamesFromCLDR(String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NjYzOQ==", "bodyText": "It now used.\nIt is not the same anymore.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420966639", "createdAt": "2020-05-06T17:30:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());\n+    \n+    @Override\n+    public Map<String, String> getDisplayNamesFromCLDR(String language) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2MDY2Ng=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODEwMzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxMjozM1rOGRFOtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxMjozM1rOGRFOtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NDY2MQ==", "bodyText": "Check if a language tag matches the default locale -> Check if a language tag matches the default locale from configuration file", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420564661", "createdAt": "2020-05-06T06:12:33Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -101,19 +101,13 @@ public static boolean isDefaultLocale(Locale locale) {\n     }\n \n     /*\n-     * Judge if a locale string is English locale string.\n+     * Check if a language tag matches the default locale", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE0NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozMzoyM1rOGRFo_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozMzoyM1rOGRFo_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MTM4OA==", "bodyText": "getName() is unncessary.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420571388", "createdAt": "2020-05-06T06:33:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE2MDg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozOTo1NFrOGRFx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjozOTo1NFrOGRFx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MzY2Mw==", "bodyText": "file.getFileName().toString() are called twice, so it's better to save it in a variable?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420573663", "createdAt": "2020-05-06T06:39:54Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());\n+    \n+    @Override\n+    public Map<String, String> getDisplayNamesFromCLDR(String language) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \t\n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {\n+\t\t\t\tlistOfFiles.map(file -> file.getFileName().toString().substring(9, file.getFileName().toString().indexOf(\".\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE2NzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0Mjo1MFrOGRF2Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo0Mjo1MFrOGRF2Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3NDcyMg==", "bodyText": "What does it have to do with CLDR?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420574722", "createdAt": "2020-05-06T06:42:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());\n+    \n+    @Override\n+    public Map<String, String> getDisplayNamesFromCLDR(String language) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODE5MDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjo1MjoxOFrOGRGDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjo1ODowMVrOGSXQag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ==", "bodyText": "Why change LocaleOpt to RemoteLocaleOpt?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420578235", "createdAt": "2020-05-06T06:52:18Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3MDYxMw==", "bodyText": "Because LocaleOpt is now the interface. Implementing types are RemoteLocaleOpt and LocalLocaleOpt.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420970613", "createdAt": "2020-05-06T17:37:01Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNzYxMA==", "bodyText": "What if offline mode, then call this method?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421207610", "createdAt": "2020-05-07T02:49:01Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMDkzNw==", "bodyText": "This gets the supported regions per language from the service, which returns the list from CLDR. I am not up to date with @linr211 plan for CLDR data in offline mode (sorry, I will catch up). Are we planning to package CLDR with the client library?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421730937", "createdAt": "2020-05-07T19:08:54Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4OTc3OA==", "bodyText": "I mean you need to handle this situation. When offline mode, return error or empty.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421889778", "createdAt": "2020-05-08T01:44:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwNDc4Mw==", "bodyText": "If offline mode, isn't it okay to still allow the user to get the list from remote? If service is not available, http call will error out.\nBy the way, what is this list for? Where will product teams use this list?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421904783", "createdAt": "2020-05-08T02:42:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwODU4Ng==", "bodyText": "@Xiaochao8 , let's continue this one in the next PR.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421908586", "createdAt": "2020-05-08T02:58:01Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -47,7 +49,7 @@ public LocaleService() {\n             }\n             logger.trace(\"get region list of '\" + language\n                     + \"' data from backend\");\n-            Map<String, String> tmpMap = new LocaleOpt()\n+            Map<String, String> tmpMap = new RemoteLocaleOpt()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3ODIzNQ=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODIxNTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzowMTo0NFrOGRGSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowMDoyMlrOGRe8oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MjAzNw==", "bodyText": "Suggest substituting loop for recursion. That maybe more efficient.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420582037", "createdAt": "2020-05-06T07:01:44Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -59,8 +61,12 @@ public LocaleService() {\n         return respMap;\n     }\n \n-    public Map<String, String> getDisplayNamesFromCLDR(String language) {\n-        Map<String, String> dispMap = null;\n+    public Map<String, String> getDisplayNamesFromCLDR(String language, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NjAxNw==", "bodyText": "Efficiency wise, it is the same: O(n), n = number of items in msgSourceQueueIter.\nIt is exactly the same number of lines of code also, so I do not prefer anything.\nNonetheless, I changed it to while loop (iteration).", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420986017", "createdAt": "2020-05-06T18:00:22Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/LocaleService.java", "diffHunk": "@@ -59,8 +61,12 @@ public LocaleService() {\n         return respMap;\n     }\n \n-    public Map<String, String> getDisplayNamesFromCLDR(String language) {\n-        Map<String, String> dispMap = null;\n+    public Map<String, String> getDisplayNamesFromCLDR(String language, ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4MjAzNw=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI3NDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoyNDowMlrOGRG3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1MToxNFrOGRelLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MTU0Mg==", "bodyText": "Why change to L2?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420591542", "createdAt": "2020-05-06T07:24:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -104,18 +104,16 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n \n     public List<Locale> getSupportedLocalesFromCache() {\n         List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDAxNA==", "bodyText": "This is actually a bug that I just fixed. I found it by writing LocaleTest.testGetSupportedLocalesOfflineBundles().\nHere is the bug description:\nIn LocaleService.getDisplayNamesFromCLDR, the list of supported locales is cached in CACHE_L2. But CacheService. getSupportedLocalesFromCache never find it in the cache because it has been looking for it in CACHE_L3. So it always tries to get it from the service every time.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420980014", "createdAt": "2020-05-06T17:51:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -104,18 +104,16 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n \n     public List<Locale> getSupportedLocalesFromCache() {\n         List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MTU0Mg=="}, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODU0MzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0Njo1NVrOGRJg0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0Njo1NVrOGRJg0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDgzMw==", "bodyText": "Change 9 to length(\"messages_\")?", "url": "https://github.com/vmware/singleton/pull/532#discussion_r420634833", "createdAt": "2020-05-06T08:46:55Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class.getName());\n+    \n+    @Override\n+    public Map<String, String> getDisplayNamesFromCLDR(String language) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \t\n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {\n+\t\t\t\tlistOfFiles.map(file -> file.getFileName().toString().substring(9, file.getFileName().toString().indexOf(\".\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e3695951a48d21de82180c140beead3924cf75"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjE0ODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjozODo0NlrOGRsT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTowOTo1MVrOGSMcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNDk1Nw==", "bodyText": "Java 8's \"Files.exists\" should not be used (squid:S3725)\nCODE_SMELLCode smellMAJORMajor\nThe Files.exists method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files that don't actually exist.\nThe same goes for Files.notExists, Files.isDirectory and Files.isRegularFile.\nNote that this rule is automatically disabled when the project's sonar.java.source is not 8.\nNoncompliant Code Example\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n// do something\n}\nCompliant Solution\nPath myPath;\nif(myPath.toFile().exists())) {\n// do something\n}", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421204957", "createdAt": "2020-05-07T02:38:46Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class);\n+    private static final String BUNDLE_PREFIX = \"messages_\";\n+    \n+    @Override\n+    public Map<String, String> getLanguages(String displayLanguage) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \tLocale inLocale = Locale.forLanguageTag(displayLanguage); \n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyNjUyNg==", "bodyText": "I did not use Files.exists.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421726526", "createdAt": "2020-05-07T19:00:55Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class);\n+    private static final String BUNDLE_PREFIX = \"messages_\";\n+    \n+    @Override\n+    public Map<String, String> getLanguages(String displayLanguage) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \tLocale inLocale = Locale.forLanguageTag(displayLanguage); \n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNDk1Nw=="}, "originalCommit": {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczMTQ4OQ==", "bodyText": "I did not use Files.exists.\nDo you mean Files.walk? Can you suggest an alternative? Thanks.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421731489", "createdAt": "2020-05-07T19:09:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class);\n+    private static final String BUNDLE_PREFIX = \"messages_\";\n+    \n+    @Override\n+    public Map<String, String> getLanguages(String displayLanguage) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \tLocale inLocale = Locale.forLanguageTag(displayLanguage); \n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwNDk1Nw=="}, "originalCommit": {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQ3NzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MDo1N1rOGSWDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MDo1N1rOGSWDTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4ODg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {\n          \n          \n            \n            \t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(p -> p.toFile().isFile())) {", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421888844", "createdAt": "2020-05-08T01:40:57Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class);\n+    private static final String BUNDLE_PREFIX = \"messages_\";\n+    \n+    @Override\n+    public Map<String, String> getLanguages(String displayLanguage) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \tLocale inLocale = Locale.forLanguageTag(displayLanguage); \n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQ4MDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MjoyM1rOGSWE5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTo0MjoyM1rOGSWE5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4OTI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\treturn fileName.substring(BUNDLE_PREFIX.length(), fileName.indexOf(\".\"));\n          \n          \n            \n            \t\t\t\t\treturn fileName.substring(BUNDLE_PREFIX.length(), fileName.indexOf('.'));\n          \n      \n    \n    \n  \n\nPut single-quotes around '.' to use the faster \"indexOf(char)\" method.", "url": "https://github.com/vmware/singleton/pull/532#discussion_r421889255", "createdAt": "2020-05-08T01:42:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.opt.LocaleOpt;\n+\n+public class LocalLocaleOpt implements LocaleOpt{\n+\n+    private Logger logger = LoggerFactory.getLogger(LocalLocaleOpt.class);\n+    private static final String BUNDLE_PREFIX = \"messages_\";\n+    \n+    @Override\n+    public Map<String, String> getLanguages(String displayLanguage) {\n+   \n+    \tMap<String, String> supportedLocales = new HashMap<String, String>();\n+    \tLocale inLocale = Locale.forLanguageTag(displayLanguage); \n+    \tString offlineResourcesBaseUrl = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+\t\ttry {\n+\t\t\tPath path = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(Paths.get(offlineResourcesBaseUrl).toString()).toURI());\n+\t\t\t\n+\t\t\ttry (Stream<Path> listOfFiles = Files.walk(path).filter(Files::isRegularFile)) {\n+\t\t\t\tlistOfFiles.map(file -> {\n+\t\t\t\t\tString fileName = file.getFileName().toString();\n+\t\t\t\t\treturn fileName.substring(BUNDLE_PREFIX.length(), fileName.indexOf(\".\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4588, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}