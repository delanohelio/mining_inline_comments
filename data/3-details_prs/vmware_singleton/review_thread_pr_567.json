{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDAwMzYx", "number": 567, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowOTozMFrOD-CxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNjozMlrOEHy9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzgzNjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowOTozMFrOGX5wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzowOTozMFrOGX5wbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNjcxOQ==", "bodyText": "The value may be false.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r427716719", "createdAt": "2020-05-20T03:09:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -186,6 +186,8 @@ public void initialize(String cfg) throws VIPClientInitException {\n         }\n         if (prop.containsKey(\"sourceLocale\"))\n         \tLocaleUtility.setSourceLocale(Locale.forLanguageTag(prop.getString(\"sourceLocale\")));\n+        if (prop.containsKey(\"prodMode\"))\n+        \tthis.prodMode = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg1OTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/common/ConstantsMsg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNTozMVrOGX5-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNTozMVrOGX5-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDM5Mg==", "bodyText": "Should add locale?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r427720392", "createdAt": "2020-05-20T03:25:31Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/common/ConstantsMsg.java", "diffHunk": "@@ -13,5 +13,6 @@\n     public static final String SERVER_CONTENT_ERROR = \"The content from server is wrong!\";\r\n     public static final String UNKNOWN_ERROR        = \"Unknown error.\";\r\n     public static final String GET_MESSAGES_FAILED  = \"Failed to get messages for component {0}, locale: {1}, data source: {2}.\";\r\n+    public static final String GET_MESSAGE_FAILED\t= \"Failed to get any message for key: {0} of component {1}.\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg2MjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzoyNzoyOFrOGX6Afg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoxMDo1N1rOGYX5xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDgzMA==", "bodyText": "This is only used in the if block below.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r427720830", "createdAt": "2020-05-20T03:27:28Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -36,19 +36,21 @@ public String getString(MessagesDTO dto) {\n     \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxMDYzMA==", "bodyText": "It is used twice: in lines 41 and 42.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r428210630", "createdAt": "2020-05-20T18:10:57Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -36,19 +36,21 @@ public String getString(MessagesDTO dto) {\n     \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMDgzMA=="}, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg2NjIzOnYy", "diffSide": "RIGHT", "path": "sample-client-app/src/main/resources/sampleconfig.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzozMDowNlrOGX6Cyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzoyNzowM1rOGYhOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTQxOA==", "bodyText": "This should be false by default.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r427721418", "createdAt": "2020-05-20T03:30:06Z", "author": {"login": "Xiaochao8"}, "path": "sample-client-app/src/main/resources/sampleconfig.properties", "diffHunk": "@@ -1,27 +1,28 @@\n-# It's used for categorizing translation by product on Singleton side to maintain translation.\r\n-productName = JavaSample\r\n-\r\n-# Define the translation's version used by Singleton service.\r\n-version = 1.0.0\r\n-\r\n-######################################################################################\r\n-# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\r\n-# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\r\n-#                     else the translation will be fetched to cache when API call happens.\r\n-# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\r\n-# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\r\n-#                     else there's no source collection.\r\n-# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\r\n-# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\r\n-# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\r\n-######################################################################################\r\n-vipServer = http://localhost:8090\r\n-offlineResourcesBaseUrl = offlineBundles\r\n-initializeCache = false\r\n-pseudo = false\r\n-collectSource = false\r\n-cleanCache = false\r\n-cacheExpiredTime = 8600000\r\n-machineTranslation = false\r\n-defaultLocale = fr\r\n-sourceLocale = en\n\\ No newline at end of file\n+# It's used for categorizing translation by product on Singleton side to maintain translation.\n+productName = JavaSample\n+\n+# Define the translation's version used by Singleton service.\n+version = 1.0.0\n+\n+######################################################################################\n+# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\n+# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\n+#                     else the translation will be fetched to cache when API call happens.\n+# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\n+# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\n+#                     else there's no source collection.\n+# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\n+# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\n+# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\n+######################################################################################\n+vipServer = http://localhost:8090\n+offlineResourcesBaseUrl = offlineBundles\n+initializeCache = false\n+pseudo = false\n+collectSource = false\n+cleanCache = false\n+cacheExpiredTime = 8600000\n+machineTranslation = false\n+defaultLocale = fr\n+sourceLocale = en\n+prodMode = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNzIxMw==", "bodyText": "It is false by default in VIPCfg.java. We want to demonstrate prodMode = true here in the sample app so that the default locale will be returned as fallback.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r428207213", "createdAt": "2020-05-20T18:05:06Z", "author": {"login": "jessiejuachon"}, "path": "sample-client-app/src/main/resources/sampleconfig.properties", "diffHunk": "@@ -1,27 +1,28 @@\n-# It's used for categorizing translation by product on Singleton side to maintain translation.\r\n-productName = JavaSample\r\n-\r\n-# Define the translation's version used by Singleton service.\r\n-version = 1.0.0\r\n-\r\n-######################################################################################\r\n-# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\r\n-# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\r\n-#                     else the translation will be fetched to cache when API call happens.\r\n-# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\r\n-# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\r\n-#                     else there's no source collection.\r\n-# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\r\n-# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\r\n-# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\r\n-######################################################################################\r\n-vipServer = http://localhost:8090\r\n-offlineResourcesBaseUrl = offlineBundles\r\n-initializeCache = false\r\n-pseudo = false\r\n-collectSource = false\r\n-cleanCache = false\r\n-cacheExpiredTime = 8600000\r\n-machineTranslation = false\r\n-defaultLocale = fr\r\n-sourceLocale = en\n\\ No newline at end of file\n+# It's used for categorizing translation by product on Singleton side to maintain translation.\n+productName = JavaSample\n+\n+# Define the translation's version used by Singleton service.\n+version = 1.0.0\n+\n+######################################################################################\n+# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\n+# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\n+#                     else the translation will be fetched to cache when API call happens.\n+# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\n+# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\n+#                     else there's no source collection.\n+# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\n+# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\n+# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\n+######################################################################################\n+vipServer = http://localhost:8090\n+offlineResourcesBaseUrl = offlineBundles\n+initializeCache = false\n+pseudo = false\n+collectSource = false\n+cleanCache = false\n+cacheExpiredTime = 8600000\n+machineTranslation = false\n+defaultLocale = fr\n+sourceLocale = en\n+prodMode = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTQxOA=="}, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM2MzQwNA==", "bodyText": "I will just manually set prodMode=true in one of the examples.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r428363404", "createdAt": "2020-05-20T23:27:03Z", "author": {"login": "jessiejuachon"}, "path": "sample-client-app/src/main/resources/sampleconfig.properties", "diffHunk": "@@ -1,27 +1,28 @@\n-# It's used for categorizing translation by product on Singleton side to maintain translation.\r\n-productName = JavaSample\r\n-\r\n-# Define the translation's version used by Singleton service.\r\n-version = 1.0.0\r\n-\r\n-######################################################################################\r\n-# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\r\n-# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\r\n-#                     else the translation will be fetched to cache when API call happens.\r\n-# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\r\n-# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\r\n-#                     else there's no source collection.\r\n-# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\r\n-# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\r\n-# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\r\n-######################################################################################\r\n-vipServer = http://localhost:8090\r\n-offlineResourcesBaseUrl = offlineBundles\r\n-initializeCache = false\r\n-pseudo = false\r\n-collectSource = false\r\n-cleanCache = false\r\n-cacheExpiredTime = 8600000\r\n-machineTranslation = false\r\n-defaultLocale = fr\r\n-sourceLocale = en\n\\ No newline at end of file\n+# It's used for categorizing translation by product on Singleton side to maintain translation.\n+productName = JavaSample\n+\n+# Define the translation's version used by Singleton service.\n+version = 1.0.0\n+\n+######################################################################################\n+# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\n+# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\n+#                     else the translation will be fetched to cache when API call happens.\n+# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\n+# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\n+#                     else there's no source collection.\n+# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\n+# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\n+# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\n+######################################################################################\n+vipServer = http://localhost:8090\n+offlineResourcesBaseUrl = offlineBundles\n+initializeCache = false\n+pseudo = false\n+collectSource = false\n+cleanCache = false\n+cacheExpiredTime = 8600000\n+machineTranslation = false\n+defaultLocale = fr\n+sourceLocale = en\n+prodMode = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTQxOA=="}, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzg2Njc5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/vipconfig.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMzozMDoyNVrOGX6DFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODoxMToyNlrOGYX6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTQ5Mg==", "bodyText": "This should be false by default.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r427721492", "createdAt": "2020-05-20T03:30:25Z", "author": {"login": "Xiaochao8"}, "path": "src/main/resources/vipconfig.properties", "diffHunk": "@@ -22,4 +22,5 @@ collectSource = false\n cleanCache = false\n cacheExpiredTime = 8600000\n machineTranslation = false\n-defaultLocale = en\n\\ No newline at end of file\n+defaultLocale = en\n+prodMode = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxMDg5Mg==", "bodyText": "I have just removed this from vipconfig.properties and changed only specific tests for prodMode =true.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r428210892", "createdAt": "2020-05-20T18:11:26Z", "author": {"login": "jessiejuachon"}, "path": "src/main/resources/vipconfig.properties", "diffHunk": "@@ -22,4 +22,5 @@ collectSource = false\n cleanCache = false\n cacheExpiredTime = 8600000\n machineTranslation = false\n-defaultLocale = en\n\\ No newline at end of file\n+defaultLocale = en\n+prodMode = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyMTQ5Mg=="}, "originalCommit": {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc1MjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowNTo1MVrOGawTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowNTo1MVrOGawTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNzU3MA==", "bodyText": "If statement added for use case #1: Requested locale is not supported (bundle not found online or offline)", "url": "https://github.com/vmware/singleton/pull/567#discussion_r430707570", "createdAt": "2020-05-26T21:05:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -36,19 +36,21 @@ public String getString(MessagesDTO dto) {\n     \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n     \tMessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n     \t\n-    \t// While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n-    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n-    \t\tLocale fallback = fallbackLocalesIter.next();\n-\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n-\t\t\t\t\tkey, dto.getSource(), fallback.toLanguageTag(), null);\n-\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n-\t\t\t\n-\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n-\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\tCacheService cacheService = new CacheService(dto);\n-\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+    \tif (VIPCfg.getInstance().isProdMode()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8094f40d6ea7c7e196d310238080f228a050e36"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc1NzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowNzozM1rOGawWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowNzozM1rOGawWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwODM3Mg==", "bodyText": "If-statement added for use case#2: A requested (target/default) message is not found; source message is also not found.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r430708372", "createdAt": "2020-05-26T21:07:33Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -96,7 +97,9 @@ public String getMessage(final Locale locale, final String component, final Stri\n     \t\tif (source != null && !source.isEmpty()) {\n     \t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n     \t\t}\n-    \t\treturn key;\n+    \t\tif (VIPCfg.getInstance().isProdMode())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8094f40d6ea7c7e196d310238080f228a050e36"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ3ODM5OnYy", "diffSide": "RIGHT", "path": "sample-client-app/src/main/resources/sampleconfig.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo0Nzo1MFrOGmGUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyMDozM1rOGmMcpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMjY4MA==", "bodyText": "Why do you change this file?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442602680", "createdAt": "2020-06-19T02:47:50Z", "author": {"login": "Xiaochao8"}, "path": "sample-client-app/src/main/resources/sampleconfig.properties", "diffHunk": "@@ -1,27 +1,27 @@\n-# It's used for categorizing translation by product on Singleton side to maintain translation.\r\n-productName = JavaSample\r\n-\r\n-# Define the translation's version used by Singleton service.\r\n-version = 1.0.0\r\n-\r\n-######################################################################################\r\n-# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\r\n-# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\r\n-#                     else the translation will be fetched to cache when API call happens.\r\n-# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\r\n-# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\r\n-#                     else there's no source collection.\r\n-# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\r\n-# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\r\n-# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\r\n-######################################################################################\r\n-vipServer = http://localhost:8090\r\n-offlineResourcesBaseUrl = offlineBundles\r\n-initializeCache = false\r\n-pseudo = false\r\n-collectSource = false\r\n-cleanCache = false\r\n-cacheExpiredTime = 8600000\r\n-machineTranslation = false\r\n-defaultLocale = fr\r\n-sourceLocale = en\n\\ No newline at end of file\n+# It's used for categorizing translation by product on Singleton side to maintain translation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwMzAxNA==", "bodyText": "It had carriage returns at the end. I just cleaned it up.\nhttps://stackoverflow.com/questions/1822849/what-are-these-ms-that-keep-showing-up-in-my-files-in-emacs", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442703014", "createdAt": "2020-06-19T08:20:33Z", "author": {"login": "jessiejuachon"}, "path": "sample-client-app/src/main/resources/sampleconfig.properties", "diffHunk": "@@ -1,27 +1,27 @@\n-# It's used for categorizing translation by product on Singleton side to maintain translation.\r\n-productName = JavaSample\r\n-\r\n-# Define the translation's version used by Singleton service.\r\n-version = 1.0.0\r\n-\r\n-######################################################################################\r\n-# [vipServer      ] - Singleton server's location. It could points to local Singleton server, or remote Singleton server.\r\n-# [initializeCache] - If initializeCache is true, the translation will be loaded to application cache from Singleton service when application starts up;\r\n-#                     else the translation will be fetched to cache when API call happens.\r\n-# [pseudo         ] - If pseudo is true, client will return pseudo translation whether translation is ready or not.\r\n-# [collectSource  ] - If collectSource is true, will enable the source collection functionality which means client will send the received sources to Singleton server for translation;\r\n-#                     else there's no source collection.\r\n-# [cleanCache     ] - If cleanCache is true, cache will be cleaned periodically.\r\n-# [cacheExpiredTime  ] - Cache expiration time. unit: millisecond.\r\n-# [machineTranslation] - If machineTranslation is true, will get translation by machine translation.\r\n-######################################################################################\r\n-vipServer = http://localhost:8090\r\n-offlineResourcesBaseUrl = offlineBundles\r\n-initializeCache = false\r\n-pseudo = false\r\n-collectSource = false\r\n-cleanCache = false\r\n-cacheExpiredTime = 8600000\r\n-machineTranslation = false\r\n-defaultLocale = fr\r\n-sourceLocale = en\n\\ No newline at end of file\n+# It's used for categorizing translation by product on Singleton side to maintain translation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMjY4MA=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ3OTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo0ODo0MlrOGmGVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNzowM1rOGmMpLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMjkwNg==", "bodyText": "Why do you add this?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442602906", "createdAt": "2020-06-19T02:48:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -26,17 +26,19 @@\n import com.vmware.vipclient.i18n.util.JSONUtils;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n+@Deprecated\n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n+    @Deprecated\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n     \t\n-    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n     \tMessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n     \t\n     \t// While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNjIyMw==", "bodyText": "Do you mean line 41? I just moved it from line 36 to here, next to the while loop where it is used.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442706223", "createdAt": "2020-06-19T08:27:03Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -26,17 +26,19 @@\n import com.vmware.vipclient.i18n.util.JSONUtils;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n+@Deprecated\n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n+    @Deprecated\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n     \t\n-    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n     \tMessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n     \t\n     \t// While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMjkwNg=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ4MTMxOnYy", "diffSide": "LEFT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo0OTo0OFrOGmGWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoxODozMFrOGmMYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMzE2Ng==", "bodyText": "Can you please don't make this change?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442603166", "createdAt": "2020-06-19T02:49:48Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -67,7 +67,6 @@\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n     private String\t\t\t\t\t   offlineResourcesBaseUrl;\n     \n-    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwMTk5Nw==", "bodyText": "Why do we need 2 blank lines? I just cleaned this up  a bit.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442701997", "createdAt": "2020-06-19T08:18:30Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -67,7 +67,6 @@\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n     private String\t\t\t\t\t   offlineResourcesBaseUrl;\n     \n-    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwMzE2Ng=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzUwNzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowNzo0NlrOGmGmrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowNzo0NlrOGmGmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzI3OA==", "bodyText": "How about to change name to getMessageFromCache?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442607278", "createdAt": "2020-06-19T03:07:46Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -63,8 +67,8 @@ public TranslationMessage() {\n      */\n     private String getCachedMessage(String component, String key, Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzUxMzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzoxMTo0N1rOGmGp-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0NDowMlrOGqfkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwODEyMw==", "bodyText": "The loop should break here.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442608123", "createdAt": "2020-06-19T03:11:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -305,17 +306,38 @@ public boolean postString(final Locale locale, final String component,\n         return cs.getMessages().getCachedData();\n     }\n     \n-    /**\n-     * Retrieves localized messages\n-     *\n-     * @param locale The locale in which the message is requested to be localized\n-     * @param component The Singleton component \n-     * @return Message keys, each one mapped to the localized message\n+     /**\n+     * Retrieves the set of localized messages from the cache. It applies locale fallback mechanism in case of failure.\n+     * \n+     * @param component The Singleton component\n+     * @param locale The locale in which the messages are requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The messages in the requested locale</li> \n+     * \t\t<li>The messages in the default locale</li>\n+     * \t\t<li>The source messages</li>\n+     * </ul>\n      */\n     public Map<String, String> getMessages(final Locale locale, final String component) {\n         MessagesDTO dto = new MessagesDTO(component, null, null, locale.toLanguageTag(), this.cfg);\n-        ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        MessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n+        \n+        // While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n+    \t\tLocale fallback = fallbackLocalesIter.next();\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), fallback.toLanguageTag(), null);\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n+\t\t\t\n+\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tCacheService cacheService = new CacheService(dto);\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTA0Mg==", "bodyText": "If !cacheItem.getCachedData().isEmpty(), then the while loop condition is not satisfied anymore in the next iteration. So it naturally breaks, no need to add a break statement.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r442705042", "createdAt": "2020-06-19T08:24:41Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -305,17 +306,38 @@ public boolean postString(final Locale locale, final String component,\n         return cs.getMessages().getCachedData();\n     }\n     \n-    /**\n-     * Retrieves localized messages\n-     *\n-     * @param locale The locale in which the message is requested to be localized\n-     * @param component The Singleton component \n-     * @return Message keys, each one mapped to the localized message\n+     /**\n+     * Retrieves the set of localized messages from the cache. It applies locale fallback mechanism in case of failure.\n+     * \n+     * @param component The Singleton component\n+     * @param locale The locale in which the messages are requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The messages in the requested locale</li> \n+     * \t\t<li>The messages in the default locale</li>\n+     * \t\t<li>The source messages</li>\n+     * </ul>\n      */\n     public Map<String, String> getMessages(final Locale locale, final String component) {\n         MessagesDTO dto = new MessagesDTO(component, null, null, locale.toLanguageTag(), this.cfg);\n-        ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        MessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n+        \n+        // While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n+    \t\tLocale fallback = fallbackLocalesIter.next();\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), fallback.toLanguageTag(), null);\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n+\t\t\t\n+\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tCacheService cacheService = new CacheService(dto);\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwODEyMw=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4MzQyMA==", "bodyText": "Don't need to judge twice in one cycle.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r443383420", "createdAt": "2020-06-22T08:04:22Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -305,17 +306,38 @@ public boolean postString(final Locale locale, final String component,\n         return cs.getMessages().getCachedData();\n     }\n     \n-    /**\n-     * Retrieves localized messages\n-     *\n-     * @param locale The locale in which the message is requested to be localized\n-     * @param component The Singleton component \n-     * @return Message keys, each one mapped to the localized message\n+     /**\n+     * Retrieves the set of localized messages from the cache. It applies locale fallback mechanism in case of failure.\n+     * \n+     * @param component The Singleton component\n+     * @param locale The locale in which the messages are requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The messages in the requested locale</li> \n+     * \t\t<li>The messages in the default locale</li>\n+     * \t\t<li>The source messages</li>\n+     * </ul>\n      */\n     public Map<String, String> getMessages(final Locale locale, final String component) {\n         MessagesDTO dto = new MessagesDTO(component, null, null, locale.toLanguageTag(), this.cfg);\n-        ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        MessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n+        \n+        // While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n+    \t\tLocale fallback = fallbackLocalesIter.next();\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), fallback.toLanguageTag(), null);\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n+\t\t\t\n+\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tCacheService cacheService = new CacheService(dto);\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwODEyMw=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDUwNA==", "bodyText": "I don't get it. What do you mean by judge twice in one cycle?\nWhen it enters the while loop, cacheItem.getCachedData() must be empty. Then in line 331, a new object will be fetched and assigned to cacheItem so cacheItem.getCachedData() will NOT be empty anymore. If this happens in line 331, I want to load this newly fetched cacheItem into the cache --> lines 334-337.\nHow do you want to change this logic?", "url": "https://github.com/vmware/singleton/pull/567#discussion_r447210504", "createdAt": "2020-06-29T19:44:02Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -305,17 +306,38 @@ public boolean postString(final Locale locale, final String component,\n         return cs.getMessages().getCachedData();\n     }\n     \n-    /**\n-     * Retrieves localized messages\n-     *\n-     * @param locale The locale in which the message is requested to be localized\n-     * @param component The Singleton component \n-     * @return Message keys, each one mapped to the localized message\n+     /**\n+     * Retrieves the set of localized messages from the cache. It applies locale fallback mechanism in case of failure.\n+     * \n+     * @param component The Singleton component\n+     * @param locale The locale in which the messages are requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The messages in the requested locale</li> \n+     * \t\t<li>The messages in the default locale</li>\n+     * \t\t<li>The source messages</li>\n+     * </ul>\n      */\n     public Map<String, String> getMessages(final Locale locale, final String component) {\n         MessagesDTO dto = new MessagesDTO(component, null, null, locale.toLanguageTag(), this.cfg);\n-        ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        MessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n+        \n+        // While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n+    \t\tLocale fallback = fallbackLocalesIter.next();\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), fallback.toLanguageTag(), null);\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n+\t\t\t\n+\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tCacheService cacheService = new CacheService(dto);\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwODEyMw=="}, "originalCommit": {"oid": "adb40eca02003a216df29187d4688206dfed5268"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTk5MzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMToyOTowMlrOGmvqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMToyOTowMlrOGmvqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3OTg4Nw==", "bodyText": "329~338 has indention problem.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r443279887", "createdAt": "2020-06-22T01:29:02Z", "author": {"login": "jin-jasper"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -305,17 +306,38 @@ public boolean postString(final Locale locale, final String component,\n         return cs.getMessages().getCachedData();\n     }\n     \n-    /**\n-     * Retrieves localized messages\n-     *\n-     * @param locale The locale in which the message is requested to be localized\n-     * @param component The Singleton component \n-     * @return Message keys, each one mapped to the localized message\n+     /**\n+     * Retrieves the set of localized messages from the cache. It applies locale fallback mechanism in case of failure.\n+     * \n+     * @param component The Singleton component\n+     * @param locale The locale in which the messages are requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The messages in the requested locale</li> \n+     * \t\t<li>The messages in the default locale</li>\n+     * \t\t<li>The source messages</li>\n+     * </ul>\n      */\n     public Map<String, String> getMessages(final Locale locale, final String component) {\n         MessagesDTO dto = new MessagesDTO(component, null, null, locale.toLanguageTag(), this.cfg);\n-        ComponentService cs = new ComponentService(dto);\n-        return cs.getMessages().getCachedData();\n+        MessageCacheItem cacheItem = new ComponentService(dto).getMessages();\n+        \n+        // While failed to get MessageCacheItem, use MessageCacheItem of the next fallback locale. \n+    \tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+    \twhile (cacheItem.getCachedData().isEmpty() && fallbackLocalesIter.hasNext()) {\n+    \t\tLocale fallback = fallbackLocalesIter.next();\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), fallback.toLanguageTag(), null);\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages();\n+\t\t\t\n+\t\t\t// Cache a reference to the MessageCacheItem of the fallback locale \n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tCacheService cacheService = new CacheService(dto);\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTk5ODE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/common/ConstantsMsg.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTozMzo1MlrOGmvsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTozMzo1MlrOGmvsrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MDU1OA==", "bodyText": "alignment problem of equal sign", "url": "https://github.com/vmware/singleton/pull/567#discussion_r443280558", "createdAt": "2020-06-22T01:33:52Z", "author": {"login": "jin-jasper"}, "path": "src/main/java/com/vmware/vipclient/i18n/common/ConstantsMsg.java", "diffHunk": "@@ -13,5 +13,6 @@\n     public static final String SERVER_CONTENT_ERROR = \"The content from server is wrong!\";\r\n     public static final String UNKNOWN_ERROR        = \"Unknown error.\";\r\n     public static final String GET_MESSAGES_FAILED  = \"Failed to get messages for component {0}, locale: {1}, data source: {2}.\";\r\n+    public static final String GET_MESSAGE_FAILED\t= \"Failed to get any message for key: {0} of component {1}, requested locale: {2}\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAwNzU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo0MzowNFrOGmvyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo0MzowNFrOGmvyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MTk3OQ==", "bodyText": "There is a space char or a tab at the end of the line.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r443281979", "createdAt": "2020-06-22T01:43:04Z", "author": {"login": "jin-jasper"}, "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "diffHunk": "@@ -211,7 +220,7 @@ public void testGetComponentMessages() {\n         Assert.assertEquals(message_zh_CN, retMap5.get(key));\n \n         Map<String, String> retMap6 = translation.getMessages(Locale.forLanguageTag(\"zh-Hant-TW\"), component);\n-        Assert.assertEquals(message_zh_TW, retMap6.get(key));\n+        Assert.assertEquals(message_zh_TW, retMap6.get(key));  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjEwNDkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNjozMlrOGnXroQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMzowNjozMlrOGnXroQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkzNTY0OQ==", "bodyText": "'ProdMode' should be deleted.", "url": "https://github.com/vmware/singleton/pull/567#discussion_r443935649", "createdAt": "2020-06-23T03:06:32Z", "author": {"login": "jin-jasper"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -106,16 +110,19 @@ public void testGetMsgsFailedKeyNotFound() {\n         Locale newLocale = new Locale(\"en\");\n         dto.setLocale(newLocale.toLanguageTag());\n     \t\n-    \tString message = translation.getMessage(newLocale, component, key, args);\n-    \t// Return the key because message does not exist in any locale\n-    \tassertEquals(key, message);\n+        VIPJavaClientException e = assertThrows(VIPJavaClientException.class, () -> {\n+        \ttranslation.getMessage(newLocale, component, key, args);\n+        });\n+        \n+    \t// Throw an exception because message key does not exist anywhere\n+    \tassertEquals(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, newLocale), e.getMessage());\n     \t\n     \tcfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);\n     \tcfg.setMsgOriginsQueue(msgOriginsQueueOrig);\n     }\n     \n     @Test\n-    public void testGetMsgsFailedUseDefault() { \n+    public void testGetMsgsFailedProdModeUseDefault() { ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4610, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}