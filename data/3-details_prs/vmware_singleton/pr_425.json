{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDMyOTg4", "number": 425, "title": "G11n java client - New caching workflow", "bodyText": "Adding this API to load configuration from a JSON configuration file.\nThe JSON schema shall be common across all supported client libraries.\nThe content of the sample config file will be enhanced later.\n\n\nHave also pushed changes for adding a map of cache properties (e.g. etag, cache-control).\nMarked the services (LocaleService, ComponentService, etc) with TODO to indicate unimplemented fetching of these cache properties from the http response.", "createdAt": "2020-03-11T01:01:19Z", "url": "https://github.com/vmware/singleton/pull/425", "merged": true, "mergeCommit": {"oid": "096d312214c72c9695563802f58869ade619719b"}, "closed": true, "closedAt": "2020-04-14T16:29:16Z", "author": {"login": "jessiejuachon"}, "timelineItems": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMbkXiAH2gAyMzg2NDMyOTg4OmY0YzEyMTQ3Zjk1OGM1MDE0YjhlNDc5NTljZjIxNmE5ZGIxZDM4MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXaaBtAFqTM5MjU2OTE0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f4c12147f958c5014b8e47959cf216a9db1d380d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/f4c12147f958c5014b8e47959cf216a9db1d380d", "committedDate": "2020-03-11T00:00:20Z", "message": "Loading configuration from the JSON configuration file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "committedDate": "2020-03-11T00:54:17Z", "message": "Removing code that is not yet ready to be used from the sample application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5e72b73b497563607e5031d5afa322caffd03fca", "committedDate": "2020-03-11T22:01:24Z", "message": "fixing failing code scan\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68NFL24bPpi-pS5s&open=AXDG68NFL24bPpi-pS5s\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68IGL24bPpi-pS2r&open=AXDG68IGL24bPpi-pS2r\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjM4NDQ5", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-373238449", "createdAt": "2020-03-12T02:16:07Z", "commit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMjoxNjowN1rOF1PLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMjoxNjowN1rOF1PLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2NzU3OA==", "bodyText": "to make it compatible, should it require to do same parsing for properties file's initialization?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r391367578", "createdAt": "2020-03-12T02:16:07Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d85ca7fca1290a93558fd937afd18dc27e92d6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/73d85ca7fca1290a93558fd937afd18dc27e92d6", "committedDate": "2020-03-12T07:58:55Z", "message": "Adding a cache properties map to hold cache details such as etag and cache control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a381070ef1e057fda0b08ca5d65323482273a86", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/2a381070ef1e057fda0b08ca5d65323482273a86", "committedDate": "2020-03-12T08:09:09Z", "message": "Removing white space\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "committedDate": "2020-03-12T09:09:08Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/056891a79856058bf9af28c44110f588e61eeefc", "committedDate": "2020-03-12T22:59:17Z", "message": "Parse headers, response code, response message from an HTTP response and return them upstream."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDE3MTAz", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-375017103", "createdAt": "2020-03-16T09:00:18Z", "commit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowMDoxOFrOF2quPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNzoyNlrOF2rQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzM4OA==", "bodyText": "why configFile doesn't contain '.json'?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392867388", "createdAt": "2020-03-16T09:00:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODIzNg==", "bodyText": "should validate 'online_service_url'? other parameters as well?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392868236", "createdAt": "2020-03-16T09:02:01Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODQxMw==", "bodyText": "fine.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392868413", "createdAt": "2020-03-16T09:02:22Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2NzU3OA=="}, "originalCommit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NjE1NQ==", "bodyText": "'product' and 'version' should be removed? since they are defined in 'online_service_url'.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392876155", "createdAt": "2020-03-16T09:17:26Z", "author": {"login": "linr211"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"product\": \"JavaSample\",\n+  \"version\": \"1.0.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "committedDate": "2020-03-17T19:30:18Z", "message": "Storing response headers in Map of cache properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17978bd621bc7ee7de27205534568fee986b1d0b", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/17978bd621bc7ee7de27205534568fee986b1d0b", "committedDate": "2020-03-17T22:50:12Z", "message": "Fixing failing unit test due to NullPointerException when doing Map.putAll(null)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c691708a3b9b0a891622a7a96d3d979ff3cb807", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/6c691708a3b9b0a891622a7a96d3d979ff3cb807", "committedDate": "2020-03-17T23:41:27Z", "message": "Changes after code review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTI1MDgx", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-376925081", "createdAt": "2020-03-18T14:36:43Z", "commit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjo0M1rOF4H7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjo0M1rOF4H7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NDQ2MA==", "bodyText": "Should process this exception?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r394394460", "createdAt": "2020-03-18T14:36:43Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java", "diffHunk": "@@ -80,28 +81,37 @@ public ComponentsService(final VIPCfg config) {\n \n         // Query from server.\n         final ComponentsBasedOpt opt = new ComponentsBasedOpt(this.cfg);\n-        final JSONObject response = opt.queryFromServer(componentsToQuery, localesToQuery);\n-        final JSONArray bundles = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.BUNDLES);\n-        final JSONArray localesFromServer = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.LOCALES);\n-        final Map<String, String> localeMap = this.makeLocaleMap(localesToQuery, localesFromServer);\n-\n-        // combine data from server into the map to return.\n-        final Iterator<?> iter = bundles.iterator();\n-        while (iter.hasNext()) {\n-            final JSONObject bundle = (JSONObject) iter.next();\n-            final String locale = localeMap.get(bundle.get(ConstantsKeys.LOCALE));\n-            final String comp = (String) bundle.get(ConstantsKeys.COMPONENT);\n-            final JSONObject messages = (JSONObject) bundle.get(ConstantsKeys.MESSAGES);\n-\n-            // update cache.\n-            final MessagesDTO dto = new MessagesDTO();\n-            dto.setComponent(comp);\n-            dto.setLocale(locale);\n-            new CacheService(dto).addCacheOfComponent(messages);\n-\n-            // update map to return.\n-            dataMap.get(locale).put(comp, messages);\n-        }\n+        JSONObject response;\n+\t\ttry {\n+\t\t\tresponse = opt.queryFromServer(componentsToQuery, localesToQuery);\n+\t\t\tfinal JSONArray bundles = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.BUNDLES);\n+\t        final JSONArray localesFromServer = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.LOCALES);\n+\t        final Map<String, String> localeMap = this.makeLocaleMap(localesToQuery, localesFromServer);\n+\n+\t        // combine data from server into the map to return.\n+\t        final Iterator<?> iter = bundles.iterator();\n+\t        while (iter.hasNext()) {\n+\t            final JSONObject bundle = (JSONObject) iter.next();\n+\t            final String locale = localeMap.get(bundle.get(ConstantsKeys.LOCALE));\n+\t            final String comp = (String) bundle.get(ConstantsKeys.COMPONENT);\n+\t            final JSONObject messages = (JSONObject) bundle.get(ConstantsKeys.MESSAGES);\n+\n+\t            // update cache.\n+\t            final MessagesDTO dto = new MessagesDTO();\n+\t            dto.setComponent(comp);\n+\t            dto.setLocale(locale);\n+\t            \n+\t            // TODO pass map of cache properties such as etag and cache control headers\n+\t            Map<String, Object> cacheProps = null;         \n+\t            new CacheService(dto).addCacheOfComponent(messages, cacheProps);\n+\n+\t            // update map to return.\n+\t            dataMap.get(locale).put(comp, messages);\n+\t        }\n+\t\t} catch (IOException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a8aa1c4afd56cc1042939892a22dbca64adc1d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/41a8aa1c4afd56cc1042939892a22dbca64adc1d", "committedDate": "2020-03-18T22:09:37Z", "message": "Removing exception handling for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/dd2455d5e68187dd4061b9c71ccd2799480d3d85", "committedDate": "2020-03-19T16:43:36Z", "message": "Deprecating VIPCfg.initialize; cleaning up code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjAzNjk5", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-378203699", "createdAt": "2020-03-20T02:21:08Z", "commit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjoyMTowOFrOF5GGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjoyMTowOFrOF5GGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxMzAwMQ==", "bodyText": "Do you think opt is more clear?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r395413001", "createdAt": "2020-03-20T02:21:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,17 +33,24 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt cbo = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/e26d372496ced19785a48b187e3bcdb1c1442ba1", "committedDate": "2020-03-20T15:45:46Z", "message": "Storing the http response code in the cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjg2MTg1", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-380286185", "createdAt": "2020-03-24T13:04:04Z", "commit": {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODQxODM1", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-380841835", "createdAt": "2020-03-25T03:44:37Z", "commit": {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "committedDate": "2020-03-25T20:11:07Z", "message": "Using cached etag as if-none-match request header value in the request in order to get a 304 NOT MODIFIED http response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "committedDate": "2020-03-26T04:04:49Z", "message": "Handling 404 response from Singleton service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529e5cc756460c5314a09a015caad7f4d26482d9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/529e5cc756460c5314a09a015caad7f4d26482d9", "committedDate": "2020-03-26T23:38:04Z", "message": "Using HTTP repsonse's Cache-Control max-age and timestamp to dertermine if component locale's cache has expired"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40fcf9dc23a01cc336b67e7eddea16d85be9817", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b40fcf9dc23a01cc336b67e7eddea16d85be9817", "committedDate": "2020-03-26T23:49:56Z", "message": "Moving constants to URLUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa123f9a1bee0d349ab6c36384288c99e865fb99", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/fa123f9a1bee0d349ab6c36384288c99e865fb99", "committedDate": "2020-03-27T00:07:11Z", "message": "Fixing failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b2054bc21a61ecdcecbb74f5a97b7af714682f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/30b2054bc21a61ecdcecbb74f5a97b7af714682f", "committedDate": "2020-03-27T02:47:23Z", "message": "Fixing failing code scan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "committedDate": "2020-03-27T06:47:07Z", "message": "Merge branch 'g11n-java-client' into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "committedDate": "2020-03-30T00:29:34Z", "message": "Cleaning up import in ComponentService,java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8450e444632e849f020704d65106fed11417b0a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d8450e444632e849f020704d65106fed11417b0a", "committedDate": "2020-03-30T03:03:20Z", "message": "Cleaning up code - caching/expiry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "committedDate": "2020-03-30T03:04:44Z", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjcwNTA0", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-382670504", "createdAt": "2020-03-27T08:49:16Z", "commit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0OToxNlrOF8n76w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo1NzoxOVrOF9Y2sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzE5NQ==", "bodyText": "Should it break after this line?\nShould it catch  NumberFormatException?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399113195", "createdAt": "2020-03-27T08:49:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +52,52 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n+    \tMap<String, Object> cache = new HashMap<String, Object>();\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps != null) {\n+    \t\tcache.put(CACHE_PROPERTIES, cacheProps);\n+    \t}\n+    \t\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n         Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        if (cachedObject != null) {\n+        \tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+        }\n+        return cache;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps == null || cacheProps.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn false;\n+    \t}\n+    \tMap<String, Object> headers = (Map<String, Object>) cacheProps.get(URLUtils.HEADERS);\n+    \tif (headers == null) {\n+    \t\treturn false;\n+    \t}\n+    \tList<String> cacheCtrlString = (List<String>) headers.get(URLUtils.CACHE_CONTROL);\n+    \tif (cacheCtrlString == null || cacheCtrlString.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tlong maxAgeMillis = Long.MAX_VALUE;\n+    \tfor (String ccs : cacheCtrlString) {\n+    \t\tString[] cacheCtrlDirectives = ccs.split(\",\");\n+    \t\tfor (String ccd: cacheCtrlDirectives) {\n+    \t\t\tString[] ccdString = ccd.split(\"=\");\n+    \t\t\tif (ccdString[0].equals(URLUtils.MAX_AGE)) {\n+    \t\t\t\tmaxAgeMillis = Long.parseLong(ccdString[1]) * 1000l;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MzM3OA==", "bodyText": "Should it update cache properties?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399893378", "createdAt": "2020-03-30T02:08:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/persist/CacheSyncThread.java", "diffHunk": "@@ -42,9 +43,13 @@ public void run() {\n     }\n \n     private String fetch(MessagesDTO dto) {\n+    \tMap<String, Object> response = null;\n+\t\t\t\n         String r = \"\";\n         ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n-        JSONObject jo = opt.getComponentMessages();\n+\t\tresponse = opt.getComponentMessages(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTU4NQ==", "bodyText": "Add return in line 80 and remove this else?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399895585", "createdAt": "2020-03-30T02:20:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTY2NQ==", "bodyText": "Change condition to (etags == null || etags.isEmpty())?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399895665", "createdAt": "2020-03-30T02:21:12Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NjA3OA==", "bodyText": "Change to String.join(etags, \",\") ?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399896078", "createdAt": "2020-03-30T02:23:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {\n+        \trequester.removeCustomizedHeaderParams(IF_NONE_MATCH_HEADER);\n+        }\n+    }\n+    \n+    private static String createIfNoneMatchValue(List<String> etags) {\n+    \tif(etags == null || etags.isEmpty()) {\n+            return null;\n+        }\n+        final StringBuilder b = new StringBuilder();\n+        final Iterator<String> it = etags.iterator();\n+        b.append(it.next());\n+        while(it.hasNext()) {\n+            b.append(\", \").append(it.next());\n+        }\n+        return b.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODc1NA==", "bodyText": "Should it remove oldmap.putAll(dataMap);\nThen add all new dataMap to the cacheMessages?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399898754", "createdAt": "2020-03-30T02:37:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,24 +46,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, dataMap, cacheProps);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(Map<String, String> dataMap, Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n+            Map<String, Object> oldmap = c.get(cacheKey);\n             if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n+                c.put(cacheKey, dataMap, cacheProps);\n             } else {\n                 oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+                Map<String, String> cachedMessages = (Map<String, String>) oldmap.get(Cache.MESSAGES);\n+                c.put(cacheKey, cachedMessages, cacheProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNDY3NQ==", "bodyText": "Do you think it is better to call getComponentTranslation rather than getMessages?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399914675", "createdAt": "2020-03-30T03:57:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +36,34 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tMap<String, Object> cache = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = (Map<String, String>) cache.get(Cache.MESSAGES);\n+    \tMap<String, Object> cacheProps = (Map<String, Object>) cache.get(Cache.CACHE_PROPERTIES);\n+        \n+    \tif ((cacheOfComponent == null && !cacheservice.isContainComponent()) ||\n+    \t\t   (cacheOfComponent != null && cacheservice.isContainComponent() \n+    \t\t   && cacheProps!=null && !cacheProps.isEmpty() && cacheservice.isExpired())) {\n+            if (cacheProps == null) {\n+            \tcacheProps = new HashMap<String, Object>();\n             }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \t\tObject o = new ComponentService(dto).getMessages(cacheProps);\n+\n+    \t\tInteger responseCode = (Integer) cacheProps.get(URLUtils.RESPONSE_CODE);\n+    \t\tif (responseCode != null) {\n+\t    \t\tif (responseCode.equals(HttpURLConnection.HTTP_NOT_MODIFIED)) {\n+\t    \t\t\tlogger.info(HttpURLConnection.HTTP_NOT_MODIFIED + \"NOT_MODIFIED for \" + dto.getCompositStrAsCacheKey());\n+\t    \t\t\t// Do not change the cache content\n+\t    \t\t} else if (responseCode.equals(HttpURLConnection.HTTP_OK)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTE0Nzg3", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-383514787", "createdAt": "2020-03-30T03:48:51Z", "commit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo0ODo1MlrOF9YwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozNzozOFrOF9ZWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMjk4MA==", "bodyText": "It's better to move this file to 'test' and add a unit test for it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399912980", "createdAt": "2020-03-30T03:48:52Z", "author": {"login": "linr211"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNzI5Mw==", "bodyText": "Move them to ConstantsKeys.java.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399917293", "createdAt": "2020-03-30T04:10:29Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -9,22 +9,33 @@\n \n public interface Cache {\n \n+\tpublic final static String MESSAGES = \"messages\";\n+\tpublic final static String CACHE_PROPERTIES = \"cache_properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODMzOQ==", "bodyText": "no use to this new parameter 'cacheProps'?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399918339", "createdAt": "2020-03-30T04:15:41Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -19,12 +20,16 @@ public FormattingCache() {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n         Object cachedObject = formattingMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        Map<String, Object> cache = new HashMap<String, Object>();\n+    \tif (cachedObject != null) {\n+    \t\tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+    \t}\n+        return cache;\n     }\n \n-    public synchronized boolean put(String cacheKey, Map<String, String> map) {\n+    public synchronized boolean put(String cacheKey, Map<String, String> map, Map<String, Object> cacheProps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODY0MA==", "bodyText": "Isn't the parameter 'cachkey' used?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399918640", "createdAt": "2020-03-30T04:17:21Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -82,6 +87,9 @@ public synchronized int getXCapacity() {\n         return this.capacityX;\n     }\n \n+    public boolean isExpired(String cacheKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjgwNQ==", "bodyText": "I think it's better to have another container ( or a class similar to MessageCache) to maintain the data of 'cacheProperties', it can find etag and expiration from the container by cachekey.\nBasically, MessageCache is for maintaining cached data pool and cacheProperties is for maintaining the etag-expiration. For any searching data from MessageCache, it will firstly detect if expired from  cacheProperties: if yes it should get the etag and make request to remote service, if not it should return cached data from MessageCache.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399922805", "createdAt": "2020-03-30T04:37:38Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTQ2MjE0", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-383546214", "createdAt": "2020-03-30T05:51:47Z", "commit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo1MTo0N1rOF9aeTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo1MTo0N1rOF9aeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MTE5OQ==", "bodyText": "Change this to static and add another instance variable to store cache control header params?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399941199", "createdAt": "2020-03-30T05:51:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -60,7 +61,17 @@ public void setBaseURL(String baseURL) {\n     private Map<String, String> customizedHeaderParams = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjQyMjM0", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-383642234", "createdAt": "2020-03-30T08:42:06Z", "commit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "committedDate": "2020-03-31T02:51:56Z", "message": "Adding tests for new caching workflow; enabling old caching workflow using cacheExpiredTime config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06adb3ac3d456f897882ee1af237d29c7f03967", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d06adb3ac3d456f897882ee1af237d29c7f03967", "committedDate": "2020-03-31T03:16:31Z", "message": "Fixing a failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c855873e5585f19152290738e4dbf6f0180b06", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/48c855873e5585f19152290738e4dbf6f0180b06", "committedDate": "2020-03-31T05:37:28Z", "message": "Adding mock server response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e45bedd128d76023c8089f9194069ea0bf30f6a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4e45bedd128d76023c8089f9194069ea0bf30f6a", "committedDate": "2020-03-31T18:55:50Z", "message": "Removing unused file sampleconfig.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a40dc87413ed76788fc60332b91741137d5e829", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/6a40dc87413ed76788fc60332b91741137d5e829", "committedDate": "2020-03-31T21:46:03Z", "message": "Changes from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4c3c12d4549eac93be3481db3309dea80c6a9e6c", "committedDate": "2020-03-31T23:34:51Z", "message": "Value of VIPCfg.cacheExpiredTime is -1 when value is not set in config file. This means max age from server will be used. Setting VIPCfg.cacheExpiredTime to 0 disables caching."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTk0NjEw", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-386194610", "createdAt": "2020-04-02T08:08:19Z", "commit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowODoxOVrOF_f4rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowODoxOVrOF_f4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzAyMg==", "bodyText": "If you don't need frequent delete or add data, I am not recommended use LinkedHashMap", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402127022", "createdAt": "2020-04-02T08:08:19Z", "author": {"login": "tigershi"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "committedDate": "2020-04-02T17:10:51Z", "message": "Changing a LinkedHashMap to a HashMap because insertion order does not need to be maintained."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baef0d06f0facd4fe2383185dc1b7979bba186a7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/baef0d06f0facd4fe2383185dc1b7979bba186a7", "committedDate": "2020-04-03T05:54:04Z", "message": "Adding CacheItem object to contain map of data and a another map for any other cache properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a96e9a7dbec8e912f29439334792d7b51069d6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/02a96e9a7dbec8e912f29439334792d7b51069d6", "committedDate": "2020-04-03T05:59:48Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/78d88f796cb3bd3f015bb1d589717fe6897abc05", "committedDate": "2020-04-03T06:14:21Z", "message": "Fixing code scan issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/655c223992bf244c4136a52c636119c9edf605fe", "committedDate": "2020-04-03T08:36:12Z", "message": "Code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzMzMzQx", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-387333341", "createdAt": "2020-04-03T14:57:25Z", "commit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo1NzoyNlrOGAZL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo1NzoyNlrOGAZL6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg==", "bodyText": "Let's say there's a product having 100 components, how many 'cacheProps' instances would be in the memory?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403065832", "createdAt": "2020-04-03T14:57:26Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8746915f5015f497b6956e8f8b743806330cc51c", "committedDate": "2020-04-05T17:28:09Z", "message": "Lazily instantiating cacheProps; code clean up and comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDAxNjY5", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-387001669", "createdAt": "2020-04-03T07:31:37Z", "commit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMTozN1rOGAIPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMjoxMTo1MlrOGBFyoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4ODEwNQ==", "bodyText": "Suggest to move this to the beginning of the method because of efficicency.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402788105", "createdAt": "2020-04-03T07:31:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -73,22 +102,23 @@ public String getRemovedKeyFromHitMap() {\n         return key;\n     }\n \n-    public synchronized boolean put(String cacheKey, Map<String, String> map) {\n+    public synchronized boolean put(String cacheKey, CacheItem itemToCache) {\n         if (this.isFull()) {\n             String k = getRemovedKeyFromHitMap();\n             this.remove(k);\n             hitMap.remove(k);\n-        }\n+        } \n         if (!this.isFull()) {\n-            if (cachedComponentsMap.get(cacheKey) != null) {\n-                Map<String, String> t = cachedComponentsMap.get(cacheKey);\n-                if (t != null) {\n-                    t.putAll(map);\n-                }\n-            } else {\n-                cachedComponentsMap.put(cacheKey, map);\n-            }\n-\n+        \tif (itemToCache != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTAwMA==", "bodyText": "Suggest to change the type of both key and value to Object in order to make it a common cache.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402789000", "createdAt": "2020-04-03T07:33:35Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMzEyMg==", "bodyText": "How about moving line 68 into if block to improve efficiency?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403413122", "createdAt": "2020-04-04T02:42:15Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,25 +47,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(CacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, itemToCache);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(CacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n-            if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n-            } else {\n-                oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+            CacheItem cacheItem = c.get(cacheKey);\n+            if (cacheItem == null) {\n+            \tcacheItem = new CacheItem();\n             }\n+            cacheItem.addCachedData(itemToCache.getCachedData());\n+            cacheItem.addCacheProperties(itemToCache.getCacheProperties());\n+            c.put(cacheKey, cacheItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTM5NA==", "bodyText": "We don't need to specify productName and version in the conf file, instead, let product specify them at run time. This is more flexible.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403625394", "createdAt": "2020-04-05T01:38:28Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTgzMw==", "bodyText": "Why not get them from json config file now?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403625833", "createdAt": "2020-04-05T01:39:40Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url\n+\t\t\tthis.productName = (String) jsonObject.get(\"product\");\n+\t\t\t// TODO will be removed once version becomes part of online_service_url\n+\t\t\tthis.version = (String) jsonObject.get(\"version\");\n+\t\t\t\n+\t\t\t// TODO get these from json config file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNzQwMQ==", "bodyText": "We don't need to set this any more because cache expires by component in new design.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403627401", "createdAt": "2020-04-05T01:43:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -195,7 +245,7 @@ public void setTranslationCache(Cache c) {\n         }\n         Cache createdCache = TranslationCacheManager\n                 .getCache(VIPCfg.CACHE_L3);\n-        if (createdCache != null && this.getCacheExpiredTime() > 0) {\n+        if (createdCache != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n             c.setExpiredTime(this.getCacheExpiredTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMDg5OQ==", "bodyText": "Please put this class in a file because cache is a common interface and may contain objects of other types.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403630899", "createdAt": "2020-04-05T01:51:49Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,54 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ==", "bodyText": "Suggest move this method to cacheitem class, this belongs to the class.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403632131", "createdAt": "2020-04-05T01:54:41Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMzc3MA==", "bodyText": "var cacheItem is unnecessary, return cachedComponentsMap.get(cacheKey) directly.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403633770", "createdAt": "2020-04-05T01:58:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,39 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODQ1OQ==", "bodyText": "Suggest changing to size += cacheItem.getCachedData().size()", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403638459", "createdAt": "2020-04-05T02:16:53Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -156,10 +186,10 @@ public int getCachedKeySize() {\n         Set<String> s = this.getCachedTranslationMap().keySet();\n         int size = 0;\n         for (String key : s) {\n-            Object o = this.getCachedTranslationMap().get(key);\n-            if (o != null) {\n-                Map<String, String> m = (Map<String, String>) o;\n-                size = size + m.keySet().size();\n+        \tCacheItem cacheItem = this.getCachedTranslationMap().get(key);\n+            if (cacheItem != null) {\n+                \n+                size = size + cacheItem.getCachedData().keySet().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTI5Mg==", "bodyText": "How about merging these two ifs into one?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403641292", "createdAt": "2020-04-05T02:57:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +29,56 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public Map<String, Object> getComponentMessages(Map<String, Object> cacheProps) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n-        }\n+        HttpRequester requester = VIPCfg.getInstance().getVipService().getHttpRequester();\n+        if (VIPCfg.getInstance().getCacheExpiredTime() == VIPCfg.cacheExpiredTimeNotSet)\n+        \tURLUtils.addIfNoneMatchHeader (cacheProps, requester);\n+        Map<String, Object> response = requester.request(url, ConstantsKeys.GET,\n+        \t\tnull);\n+        \n+        return response;\n     }\n \n+    public JSONObject getMsgsJson(Map<String, Object> response) {\n+    \tif (response != null && response.get(URLUtils.RESPONSE_CODE) != null) {\n+    \t\tif (response.get(URLUtils.RESPONSE_CODE).equals(HttpURLConnection.HTTP_OK)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1ODczMQ==", "bodyText": "Move this line into below if block since it's needed only there.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403658731", "createdAt": "2020-04-05T06:56:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2NTgyNg==", "bodyText": "Why add this judge? We can make use of etag if possible.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403665826", "createdAt": "2020-04-05T08:09:21Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +29,56 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public Map<String, Object> getComponentMessages(Map<String, Object> cacheProps) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n-        }\n+        HttpRequester requester = VIPCfg.getInstance().getVipService().getHttpRequester();\n+        if (VIPCfg.getInstance().getCacheExpiredTime() == VIPCfg.cacheExpiredTimeNotSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MDA4Nw==", "bodyText": "Does this mean the default setting is never expired?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403670087", "createdAt": "2020-04-05T08:48:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,36 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cacheItem;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n+    \tif (cacheItem == null) {\n+    \t\treturn true;\n+    \t}\n+    \tMap<String,Object> cacheProps = cacheItem.getCacheProperties();\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn true;\n+    \t}\n+    \tLong maxAgeMillis = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ==", "bodyText": "Need to remove any expiration related methods and variables in this class because we change the expiration logic to cacheitem in new design", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403673105", "createdAt": "2020-04-05T09:16:10Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzU1MQ==", "bodyText": "By design, we need to use a separated thread to refresh cache in the background.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403673551", "createdAt": "2020-04-05T09:19:49Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +34,21 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif ((cacheItem == null && !cacheservice.isContainComponent()) || cacheservice.isExpired()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw==", "bodyText": "Need to add cache expiration determination in all the get methods of class TranslationMessage, then refresh cache in the background.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403674747", "createdAt": "2020-04-05T09:30:39Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNzQwNQ==", "bodyText": "We don't need to set this any more because cache expires by component in new design.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403707405", "createdAt": "2020-04-05T14:12:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -223,7 +273,7 @@ public synchronized Cache createTranslationCache(Class cacheClass) {\n                     Task.startTaskOfCacheClean(VIPCfg.getInstance(), interalCleanCache);\n                 }\n                 Cache c = TranslationCacheManager.getCache(VIPCfg.CACHE_L3);\n-                if (c != null && this.getCacheExpiredTime() > 0) {\n+                if (c != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n                     c.setExpiredTime(this.getCacheExpiredTime());\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxMzE1Mw==", "bodyText": "Do you think it's good to change to cachedMessages = this.getMessages(cacheProps);", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403713153", "createdAt": "2020-04-05T14:57:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjMxNQ==", "bodyText": "Don't need to judge because cacheProperties can't be null.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403796315", "createdAt": "2020-04-06T02:10:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {\n+\t\t\t\tthis.cachedData.putAll(cachedData);\n+\t\t\t}\n+\t\t}\n+        \n+\t\tpublic Map<String, Object> getCacheProperties() {\n+\t\t\treturn cacheProperties;\n+\t\t}\n+\t\t\n+\t\tpublic void addCacheProperties(Map<String, Object> cacheProperties) {\n+\t\t\tsynchronized(this) {\n+\t\t\t\tif (this.cacheProperties == null) {\n+\t\t\t\t\tthis.cacheProperties = new HashMap<String, Object>();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (cacheProperties != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA==", "bodyText": "Don't need to judge because cachedData can't be null.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403796640", "createdAt": "2020-04-06T02:11:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "committedDate": "2020-04-07T03:26:44Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4e18358f37c29502cfdeb60c44b94e63653601", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/3a4e18358f37c29502cfdeb60c44b94e63653601", "committedDate": "2020-04-07T03:36:56Z", "message": "Adding header to CacheItem.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "committedDate": "2020-04-07T03:49:29Z", "message": "Fixing code san issue. Synchronize on a final field"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NzY5MzE3", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-388769317", "createdAt": "2020-04-07T04:07:00Z", "commit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDowNzowMFrOGByHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDowNzowMFrOGByHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMjkyOA==", "bodyText": "calling KeySet is unnecessary.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404522928", "createdAt": "2020-04-07T04:07:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -184,7 +182,7 @@ public int getCachedKeySize() {\n         for (String key : s) {\n         \tCacheItem cacheItem = this.getCachedTranslationMap().get(key);\n             if (cacheItem != null) {              \n-                size = size + cacheItem.getCachedData().keySet().size();\n+                size += cacheItem.getCachedData().keySet().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8f57e243ed1f450349392e990b4502dd74543f91", "committedDate": "2020-04-07T04:07:44Z", "message": "Fixing code scan bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODQ3NDYy", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-388847462", "createdAt": "2020-04-07T07:22:45Z", "commit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMjo0NVrOGB2OTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMDoyM1rOGB4uhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDE1OQ==", "bodyText": "It seems that loadConfig doesn't exist.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404590159", "createdAt": "2020-04-07T07:22:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,20 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n      * initialize the instance by a properties file\n-     * \n+     * @deprecated\n+     * This method is no longer acceptable to load configurations.\n+     * <p> Use {@link VIPCfg#loadConfig(String)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwOTA5Ng==", "bodyText": "It there is a null cacheItem in cache, then it won't be updated in any case.\nDo you think it's good to use cacheService.isContainComponent() to judge if item in cache?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404609096", "createdAt": "2020-04-07T07:54:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDMxMA==", "bodyText": "It seems this can run only once because running ==false after the first run.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404630310", "createdAt": "2020-04-07T08:29:04Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else if ((cacheItem == null && !cacheService.isContainComponent())) { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+    private volatile boolean running = true;\n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTE3Mg==", "bodyText": "Suggest changing to Map<String, String>  cacheOfComponent = new ComponentService(dto).getMessages(cacheProps);", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404631172", "createdAt": "2020-04-07T08:30:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else if ((cacheItem == null && !cacheService.isContainComponent())) { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+    private volatile boolean running = true;\n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t    \twhile (running) {\n+\t    \t\ttry {\n+\t\t\t    \t// Use the cacheProps that is already in the cache.\n+\t\t\t    \tpopulateCache(cacheProps, cacheService, dto);\n+\t    \t\t} finally {\n+\t\t\t    \trunning = false;\n+\t\t\t    }\n+\t    \t}\n+\t\t    \n+\t\t};\n+\t\tnew Thread(task).start();\n+\t}\n+\t\n+\tprivate Map<String, String> populateCache(Map<String, Object> cacheProps, \n+\t\t\tCacheService cacheService, MessagesDTO dto) {\n+    \t// Pass cacheProps to getMessages so that:\n+\t\t// 1. A previously stored ETag, if any, can be used for the next HTTP request.\n+\t\t// 2. Cached properties can be refreshed with new properties from the next HTTP response.\n+\t\tObject o = new ComponentService(dto).getMessages(cacheProps);\n+\t\t\n+\t\tMap<String, String>  cacheOfComponent = (Map<String, String>) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72c8799ffbbb23dc61115375cbee52573e792ec9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/72c8799ffbbb23dc61115375cbee52573e792ec9", "committedDate": "2020-04-07T17:15:34Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/92edfc88a64c21470fc06c37b65503a6d9042f90", "committedDate": "2020-04-07T19:15:13Z", "message": "Updating CasheService.isContainComponent to return false if cache key is stored but has a null value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTg4Njkx", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-389588691", "createdAt": "2020-04-08T01:03:26Z", "commit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowMzoyNlrOGCbcVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowMzoyNlrOGCbcVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA==", "bodyText": "'While' loop runs only once because running becomes false after the first round. Do you think a normal function call can do the task?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405199958", "createdAt": "2020-04-08T01:03:26Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/2042554b861d0b97b04a8d29c3a051106e24d8f0", "committedDate": "2020-04-08T04:57:56Z", "message": "HttpRequester if-none-match header and other customized headers are added to each specific request locally."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjQyMTQ4", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-389642148", "createdAt": "2020-04-08T04:19:24Z", "commit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoxOToyNFrOGCecfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNTozN1rOGCfH-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTE0OA==", "bodyText": "I mean you need to consider the other two exported function 'getStrings' in TranslationMessage. Now only getString is considered.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405249148", "createdAt": "2020-04-08T04:19:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTQ3Mw==", "bodyText": "If an exception will cause a thread to close, then we don't need the while loop. But we still need to consider whether the exception will cause the application down.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405249473", "createdAt": "2020-04-08T04:20:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA=="}, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MDI4Mg==", "bodyText": "Do you think it's better to add this at the beginning of the method to make sure that the 2 mechanisms aren't conflicted?\nif (VIPCfg.getInstance().getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\nreturn false;\n}", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405260282", "createdAt": "2020-04-08T05:05:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,35 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cachedComponentsMap.get(cacheKey);\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjU3NjAy", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-389657602", "createdAt": "2020-04-08T05:16:30Z", "commit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNToxNjozMFrOGCfSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNToxOToyOVrOGCfVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2Mjg3Nw==", "bodyText": "Why not assign params to commonHeaderParams directly?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405262877", "createdAt": "2020-04-08T05:16:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MzY0Ng==", "bodyText": "What if product wants to remove some params?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405263646", "createdAt": "2020-04-08T05:19:29Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();\n+    \t\t}\n+    \t\tcommonHeaderParams.putAll(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae707fface7ade445bc391f9f0e4125734eeddb1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ae707fface7ade445bc391f9f0e4125734eeddb1", "committedDate": "2020-04-08T17:09:39Z", "message": "Code clean up; keep old caching expiration logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82818d5909f1b1e2117f7599993ea50777bd982a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/82818d5909f1b1e2117f7599993ea50777bd982a", "committedDate": "2020-04-08T21:12:57Z", "message": "Fixing code scan bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "committedDate": "2020-04-08T21:50:07Z", "message": "Merge branch 'g11n-java-client' into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "committedDate": "2020-04-09T00:13:02Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/78dcc1cc7de1700d332c4901ec3f09e546befd26", "committedDate": "2020-04-09T07:14:14Z", "message": "Removing response code and response msg from cache; Passing cacheItem object to be updated down the line."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTk0MDQw", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-390594040", "createdAt": "2020-04-09T08:33:20Z", "commit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMzoyMFrOGDO8jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMzoyMFrOGDO8jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0Mzc5MA==", "bodyText": "Suggest to move this judge into addCachedData method, because It's necessary all the time.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406043790", "createdAt": "2020-04-09T08:33:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -12,11 +12,13 @@ public CacheItem() {\n \t\t\n \t}\n \t\n-\tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+\tpublic CacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n \t\tsuper();\n \t\tif (dataMap != null) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzgxNDIy", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-390781422", "createdAt": "2020-04-09T13:16:48Z", "commit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo0OVrOGDYNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNzozN1rOGDZFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTYwNg==", "bodyText": "should move maxAgeMillis to MessageCache because the value is same for different CacheItem instance.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406195606", "createdAt": "2020-04-09T13:16:49Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.base.cache;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CacheItem {\n+\tpublic CacheItem() {\n+\t\t\n+\t}\n+\t\n+\tpublic CacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tsuper();\n+\t\tif (dataMap != null) \n+\t\t\tthis.addCachedData(dataMap);\n+\t\tthis.etag = etag;\n+\t\tthis.timestamp = timestamp;\n+\t\tthis.maxAgeMillis = maxAgeMillis;\n+\t}\n+\t\n+\tpublic CacheItem (Map<String, String> dataMap) {\n+\t\tsuper();\n+\t\tif (dataMap != null)\n+\t\t\tthis.addCachedData(dataMap);\n+\t}\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\tprivate String etag;\n+\tprivate long timestamp;\n+\tprivate Long maxAgeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMjk5OA==", "bodyText": "I agree with Xiaochao that it's part of cacheitem, and we can still use current isExpired() function for other type of cache implementation.\nReopen it, please double check it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406202998", "createdAt": "2020-04-09T13:27:48Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwOTg1Nw==", "bodyText": "It's not good to add '@deprecated' fields or functions in the new codes.\nHow about this judge: if cacheExpiredTime is set, use it to do expiration check and ignore max-age; else use max-age to check?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406209857", "createdAt": "2020-04-09T13:37:37Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -47,14 +47,20 @@\n     private boolean                    pseudo;\n     private boolean                    collectSource;\n     private boolean                    cleanCache;\n-    private long                       cacheExpiredTime;\n+    \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9281c640b3b78d987e1fd865b01f16e4edbfd768", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/9281c640b3b78d987e1fd865b01f16e4edbfd768", "committedDate": "2020-04-10T04:03:05Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26577625b3eb13f1f9367f313dd94d47c9113749", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/26577625b3eb13f1f9367f313dd94d47c9113749", "committedDate": "2020-04-10T04:08:23Z", "message": "Adding header to CacheItem.java file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/9e80f09d4838f9de33bf9dce100744f4832630a0", "committedDate": "2020-04-10T04:35:16Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjgxMjQ1", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391281245", "createdAt": "2020-04-10T06:05:46Z", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNTo0N1rOGDx6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNTo0N1rOGDx6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjc0MA==", "bodyText": "Do you think it's necessary to make this class thread safe?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406616740", "createdAt": "2020-04-10T06:05:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -8,8 +8,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import com.vmware.vipclient.i18n.VIPCfg;\n-\n public class MessageCache implements Cache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjg0NTU3", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391284557", "createdAt": "2020-04-10T06:19:31Z", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTozMVrOGDyHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTozMVrOGDyHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0Mw==", "bodyText": "How about changing like this? It seems better.\nif (cacheItem == null) {\nc.put(cacheKey, itemToCache);\n}\nelse {\ncacheItem.addCacheItem(itemToCache);\n}", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406619943", "createdAt": "2020-04-10T06:19:31Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -36,29 +37,28 @@ public CacheService(MessagesDTO dto) {\n         if (c == null) {\n             return null;\n         } else {\n-            return c.get(cacheKey);\n+            return (MessageCacheItem) c.get(cacheKey);\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, itemToCache);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n-            if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n-            } else {\n-                oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n+            if (cacheItem == null) {\n+            \tcacheItem = new MessageCacheItem();\n+            \tc.put(cacheKey, cacheItem);\n             }\n+            cacheItem.addCacheItem(itemToCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzAzNTI1", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391303525", "createdAt": "2020-04-10T07:21:06Z", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMTowN1rOGDzKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMjoxMFrOGDzL_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzIzNA==", "bodyText": "should remove @deprecated?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406637234", "createdAt": "2020-04-10T07:21:07Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/TranslationCacheManager.java", "diffHunk": "@@ -36,13 +36,31 @@ public static synchronized TranslationCacheManager createTranslationCacheManager\n     }\n \n     public static Cache getCache(String name) {\n-        Cache c = container.get(name);\n-        if (c != null && c.isExpired()) {\n-            c.clear();\n-            c.setLastClean(System.currentTimeMillis());\n-        }\n+        Cache c = container.get(name);      \n+        cleanEntireCache(c);\n+        \n         return c;\n     }\n+    \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzU2Ng==", "bodyText": "should remove @deprecated?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406637566", "createdAt": "2020-04-10T07:22:10Z", "author": {"login": "linr211"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class CacheServiceTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"de\");\n+    String comment = \"comment\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+    }\n+    \n+    @Test\n+    public void testExpireUsingCacheControlMaxAge() {\n+    \tVIPCfg gc = VIPCfg.getInstance();\n+        try {\n+            gc.initialize(\"vipconfig\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \tgc.initializeVIPService();\n+    \t\n+    \t// Explicitly set this config to the default which is -1, as if the config property was not set.\n+        // This is done so that the cache-control max age form the server response is used instead.\n+        VIPCfg.getInstance().setCacheExpiredTime(0l);\n+        \n+        Cache c = VIPCfg.getInstance().createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(VIPCfg.getInstance());\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        CacheService cs = new CacheService(dto);\n+        \n+        // CacheItem does not exist yet\n+        MessageCacheItem cacheItem = cs.getCacheOfComponent();\n+        assertNull(cacheItem);\n+        \n+        // This triggers the first http call\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tcacheItem = cs.getCacheOfComponent();\n+        Long responseTime = (Long) cacheItem.getTimestamp();\n+        \n+        // TODO Store response code in cache if we want to test this\n+        //int responseCode = cacheItem.getResponseCode();\n+        //assertEquals(new Integer(200), responseCode);\n+        \n+        // Set max age to 0 to explicitly expire the cache for testing purposes.\n+        cacheItem.setMaxAgeMillis(0l);\n+        \n+        // Second request for the same message.\n+        // This should trigger another HTTP request because cache had been explicitly expired above.\n+        // The http request includes If-None-Match header that is set to the previously received eTag value.\n+        translation.getString(locale, component, key, source, comment, args);\n+        \n+        // Because nothing has changed on the server and If-None-Match request header was properly set, \n+        // the server responds with a 304 Not Modified.\n+        // However, cache update happens in a separate thread, and the previously cached item \n+        // was immediately returned in the main thread for optimal performance.\n+        // This means no changes yet in the cached response code nor the response time.\n+        Long responseTime2 = cacheItem.getTimestamp();\n+        assertTrue(responseTime2.equals(responseTime)); \n+        assertTrue(cacheItem.getMaxAgeMillis() == 0l);\n+        \n+        // TODO Store response code in cache if we want to test this\n+        //responseCode = cacheItem.getResponseCode();\n+        //assertEquals(new Integer(200), responseCode);\n+        \n+        // Give time for the separate thread to finish.\n+        try {\n+\t\t\tThread.sleep(5000);\n+\t\t} catch (InterruptedException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+        \n+        // Third request for the same message.\n+        // This should fetch messages and properties from cache \n+        translation.getString(locale, component, key, source, comment, args);\n+        \n+        // TODO Store response code in cache if we want to test \n+        //responseCode = cacheItem.getResponseCode();        \n+        //assertEquals(new Integer(304), responseCode);\n+        \n+        // The cached response time had been updated by the separate thread \n+        // to the timestamp of the second response.  \n+        // This, in effect, extends the cache expiration.\n+        Long responseTime3 = cacheItem.getTimestamp();\n+        assertTrue(responseTime3 > responseTime); \n+        assertTrue(cacheItem.getMaxAgeMillis() > 0l);\n+        \n+    }\n+    \n+    @Test\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68467f34882da413ed852f2ed4b1394e88bf64b1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/68467f34882da413ed852f2ed4b1394e88bf64b1", "committedDate": "2020-04-10T23:14:41Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d67c72ee939034deb58b99d4fdf0fcc38857c006", "committedDate": "2020-04-10T23:28:38Z", "message": "Fixing code scan bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzI3MjI3", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391727227", "createdAt": "2020-04-11T02:19:11Z", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzI4Mzc0", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391728374", "createdAt": "2020-04-11T02:34:33Z", "commit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzM5NjYz", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-391739663", "createdAt": "2020-04-11T06:01:03Z", "commit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjowMTowM1rOGEKuPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjowMTowM1rOGEKuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyMzE2NA==", "bodyText": "Only when 304 or success, then update cacheItem.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r407023164", "createdAt": "2020-04-11T06:01:03Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +30,65 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n+        \n+        Map<String, String> headers = new HashMap<String, String>();\n+        if (cacheItem.getEtag() != null)\n+        \theaders.put(URLUtils.IF_NONE_MATCH_HEADER, cacheItem.getEtag());\n+        \n+        Map<String, Object> response = VIPCfg.getInstance().getVipService().getHttpRequester()\n+        \t\t.request(url, ConstantsKeys.GET,null, headers);\n+        \n+        if (response.get(URLUtils.HEADERS) != null)\n+        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n+        if (response.get(URLUtils.RESPONSE_TIMESTAMP) != null)\n+        \tcacheItem.setTimestamp((long) response.get(URLUtils.RESPONSE_TIMESTAMP) );\n+        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n+        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n+        Map<String,String> messages = this.getMsgsJson(response);\n+        if (messages != null) {\n+        \tcacheItem.addCachedData(messages);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85919738596847c3cd42fd2397226fb498cf6e28", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/85919738596847c3cd42fd2397226fb498cf6e28", "committedDate": "2020-04-13T21:22:27Z", "message": "Not storing anything in cache if response is neither 200 nor 304"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTM5MDc0", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-392539074", "createdAt": "2020-04-14T01:12:59Z", "commit": {"oid": "85919738596847c3cd42fd2397226fb498cf6e28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTY5MTQz", "url": "https://github.com/vmware/singleton/pull/425#pullrequestreview-392569143", "createdAt": "2020-04-14T02:52:18Z", "commit": {"oid": "85919738596847c3cd42fd2397226fb498cf6e28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4317, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}