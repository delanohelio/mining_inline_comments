{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDMyOTg4", "number": 425, "reviewThreads": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMjoxNjowN1rODnUACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjowMTowM1rODw6nNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTQ4NzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMjoxNjowN1rOF1PLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowMjoyMlrOF2qyPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2NzU3OA==", "bodyText": "to make it compatible, should it require to do same parsing for properties file's initialization?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r391367578", "createdAt": "2020-03-12T02:16:07Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ3MDI1MA==", "bodyText": "The new VIPCfg.loadConfig(String cfg) will load the configuration from a JSON file. It is not yet fully implemented. It only loads the online_service_url for now just to demonstrate. This is only meant to be a starting point.\nSupport for backwards compatibility:\nWhen an existing application upgrades to the new version of the library, it doesn't have to immediately use this new VIPCfg.loadConfig(String cfg) method. It is there for when the application eventually starts using it. The old VIPCfg.initialize(String cfg) should still work, just marked with @deprecated.\nBoth methods will be available for quite some time until the deprecated method is no longer supported in some future version. In other words, we will remove VIPCfg.initialize(String cfg) eventually, but not immediately.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r391470250", "createdAt": "2020-03-12T08:42:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2NzU3OA=="}, "originalCommit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODQxMw==", "bodyText": "fine.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392868413", "createdAt": "2020-03-16T09:02:22Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2NzU3OA=="}, "originalCommit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTIwODIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowMDoxOFrOF2quPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowMzowMFrOF3lpKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzM4OA==", "bodyText": "why configFile doesn't contain '.json'?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392867388", "createdAt": "2020-03-16T09:00:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjc0Ng==", "bodyText": "That makes sense. I will change it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r393832746", "createdAt": "2020-03-17T17:03:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NzM4OA=="}, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTIxMzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTowMjowMVrOF2qxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo1NTo0NVrOF3z1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODIzNg==", "bodyText": "should validate 'online_service_url'? other parameters as well?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392868236", "createdAt": "2020-03-16T09:02:01Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNTg2NQ==", "bodyText": "Yes, we should add validation for the parameters.\nThere is also no validation in the VIPCfg.initialize method. Let's make sure to have this in the new loadConfig method.\nOther parameters should be added to loadConfig as well. Let's add them one by one, as we start using them. For example, I am about to add the \"prod_mode\" parameter because I need to use it for the exception/messaging logic.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r393835865", "createdAt": "2020-03-17T17:07:47Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODIzNg=="}, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NTMyMw==", "bodyText": "sure", "url": "https://github.com/vmware/singleton/pull/425#discussion_r394065323", "createdAt": "2020-03-18T01:55:45Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +125,46 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n+    /**\n+     * Load client configuration from a JSON file in the resource folder \n+     * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws ParseException \n+     * @throws IOException \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile + \".json\");\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2ODIzNg=="}, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTI2Mjk1OnYy", "diffSide": "RIGHT", "path": "sample-client-app/src/main/resources/sampleconfig.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOToxNzoyNlrOF2rQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo1NDo1MFrOF3z0yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NjE1NQ==", "bodyText": "'product' and 'version' should be removed? since they are defined in 'online_service_url'.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r392876155", "createdAt": "2020-03-16T09:17:26Z", "author": {"login": "linr211"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"product\": \"JavaSample\",\n+  \"version\": \"1.0.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzODMyMA==", "bodyText": "I will remove these 2 properties once the online_service_url has the correct value. I am waiting because there is an ongoing effort to improve API endpoint URLS in the service, right?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r393838320", "createdAt": "2020-03-17T17:11:38Z", "author": {"login": "jessiejuachon"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"product\": \"JavaSample\",\n+  \"version\": \"1.0.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NjE1NQ=="}, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NTA5Nw==", "bodyText": "The API endpoints URLs don't need change, they follow REST.\nWe might need some the code change so that the \"online_service_url\" can match the endpoints URL.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r394065097", "createdAt": "2020-03-18T01:54:50Z", "author": {"login": "linr211"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"product\": \"JavaSample\",\n+  \"version\": \"1.0.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NjE1NQ=="}, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDYyNzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjo0M1rOF4H7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDozNjo0M1rOF4H7XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5NDQ2MA==", "bodyText": "Should process this exception?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r394394460", "createdAt": "2020-03-18T14:36:43Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java", "diffHunk": "@@ -80,28 +81,37 @@ public ComponentsService(final VIPCfg config) {\n \n         // Query from server.\n         final ComponentsBasedOpt opt = new ComponentsBasedOpt(this.cfg);\n-        final JSONObject response = opt.queryFromServer(componentsToQuery, localesToQuery);\n-        final JSONArray bundles = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.BUNDLES);\n-        final JSONArray localesFromServer = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.LOCALES);\n-        final Map<String, String> localeMap = this.makeLocaleMap(localesToQuery, localesFromServer);\n-\n-        // combine data from server into the map to return.\n-        final Iterator<?> iter = bundles.iterator();\n-        while (iter.hasNext()) {\n-            final JSONObject bundle = (JSONObject) iter.next();\n-            final String locale = localeMap.get(bundle.get(ConstantsKeys.LOCALE));\n-            final String comp = (String) bundle.get(ConstantsKeys.COMPONENT);\n-            final JSONObject messages = (JSONObject) bundle.get(ConstantsKeys.MESSAGES);\n-\n-            // update cache.\n-            final MessagesDTO dto = new MessagesDTO();\n-            dto.setComponent(comp);\n-            dto.setLocale(locale);\n-            new CacheService(dto).addCacheOfComponent(messages);\n-\n-            // update map to return.\n-            dataMap.get(locale).put(comp, messages);\n-        }\n+        JSONObject response;\n+\t\ttry {\n+\t\t\tresponse = opt.queryFromServer(componentsToQuery, localesToQuery);\n+\t\t\tfinal JSONArray bundles = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.BUNDLES);\n+\t        final JSONArray localesFromServer = (JSONArray) opt.getDataPart(response).get(ConstantsKeys.LOCALES);\n+\t        final Map<String, String> localeMap = this.makeLocaleMap(localesToQuery, localesFromServer);\n+\n+\t        // combine data from server into the map to return.\n+\t        final Iterator<?> iter = bundles.iterator();\n+\t        while (iter.hasNext()) {\n+\t            final JSONObject bundle = (JSONObject) iter.next();\n+\t            final String locale = localeMap.get(bundle.get(ConstantsKeys.LOCALE));\n+\t            final String comp = (String) bundle.get(ConstantsKeys.COMPONENT);\n+\t            final JSONObject messages = (JSONObject) bundle.get(ConstantsKeys.MESSAGES);\n+\n+\t            // update cache.\n+\t            final MessagesDTO dto = new MessagesDTO();\n+\t            dto.setComponent(comp);\n+\t            dto.setLocale(locale);\n+\t            \n+\t            // TODO pass map of cache properties such as etag and cache control headers\n+\t            Map<String, Object> cacheProps = null;         \n+\t            new CacheService(dto).addCacheOfComponent(messages, cacheProps);\n+\n+\t            // update map to return.\n+\t            dataMap.get(locale).put(comp, messages);\n+\t        }\n+\t\t} catch (IOException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDg3ODU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMjoyMTowOFrOF5GGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxMToxMVrOF-oYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxMzAwMQ==", "bodyText": "Do you think opt is more clear?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r395413001", "createdAt": "2020-03-20T02:21:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,17 +33,24 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt cbo = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNDM2NA==", "bodyText": "What does \"opt\" mean in ComponentBasedOpt?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401204364", "createdAt": "2020-03-31T20:46:02Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,17 +33,24 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt cbo = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxMzAwMQ=="}, "originalCommit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNzczMQ==", "bodyText": "I have changed it to \"opt\".", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401217731", "createdAt": "2020-03-31T21:11:11Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,17 +33,24 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt cbo = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQxMzAwMQ=="}, "originalCommit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDM1OTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0OToxNlrOF8n76w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNjoxOVrOF-qdfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzE5NQ==", "bodyText": "Should it break after this line?\nShould it catch  NumberFormatException?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399113195", "createdAt": "2020-03-27T08:49:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +52,52 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n+    \tMap<String, Object> cache = new HashMap<String, Object>();\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps != null) {\n+    \t\tcache.put(CACHE_PROPERTIES, cacheProps);\n+    \t}\n+    \t\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n         Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        if (cachedObject != null) {\n+        \tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+        }\n+        return cache;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps == null || cacheProps.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn false;\n+    \t}\n+    \tMap<String, Object> headers = (Map<String, Object>) cacheProps.get(URLUtils.HEADERS);\n+    \tif (headers == null) {\n+    \t\treturn false;\n+    \t}\n+    \tList<String> cacheCtrlString = (List<String>) headers.get(URLUtils.CACHE_CONTROL);\n+    \tif (cacheCtrlString == null || cacheCtrlString.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tlong maxAgeMillis = Long.MAX_VALUE;\n+    \tfor (String ccs : cacheCtrlString) {\n+    \t\tString[] cacheCtrlDirectives = ccs.split(\",\");\n+    \t\tfor (String ccd: cacheCtrlDirectives) {\n+    \t\t\tString[] ccdString = ccd.split(\"=\");\n+    \t\t\tif (ccdString[0].equals(URLUtils.MAX_AGE)) {\n+    \t\t\t\tmaxAgeMillis = Long.parseLong(ccdString[1]) * 1000l;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTcwOA==", "bodyText": "Error/exception handling will be covered in #461", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401251708", "createdAt": "2020-03-31T22:26:19Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +52,52 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n+    \tMap<String, Object> cache = new HashMap<String, Object>();\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps != null) {\n+    \t\tcache.put(CACHE_PROPERTIES, cacheProps);\n+    \t}\n+    \t\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n         Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        if (cachedObject != null) {\n+        \tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+        }\n+        return cache;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tMap<String,Object> cacheProps = this.cacheProperties.get(cacheKey);\n+    \tif (cacheProps == null || cacheProps.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn false;\n+    \t}\n+    \tMap<String, Object> headers = (Map<String, Object>) cacheProps.get(URLUtils.HEADERS);\n+    \tif (headers == null) {\n+    \t\treturn false;\n+    \t}\n+    \tList<String> cacheCtrlString = (List<String>) headers.get(URLUtils.CACHE_CONTROL);\n+    \tif (cacheCtrlString == null || cacheCtrlString.isEmpty()) {\n+    \t\treturn false;\n+    \t}\n+    \tlong maxAgeMillis = Long.MAX_VALUE;\n+    \tfor (String ccs : cacheCtrlString) {\n+    \t\tString[] cacheCtrlDirectives = ccs.split(\",\");\n+    \t\tfor (String ccd: cacheCtrlDirectives) {\n+    \t\t\tString[] ccdString = ccd.split(\"=\");\n+    \t\t\tif (ccdString[0].equals(URLUtils.MAX_AGE)) {\n+    \t\t\t\tmaxAgeMillis = Long.parseLong(ccdString[1]) * 1000l;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzE5NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc2NTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/persist/CacheSyncThread.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjowODo1NlrOF9Xjgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo0MjoyMFrOF_z9mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MzM3OA==", "bodyText": "Should it update cache properties?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399893378", "createdAt": "2020-03-30T02:08:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/persist/CacheSyncThread.java", "diffHunk": "@@ -42,9 +43,13 @@ public void run() {\n     }\n \n     private String fetch(MessagesDTO dto) {\n+    \tMap<String, Object> response = null;\n+\t\t\t\n         String r = \"\";\n         ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n-        JSONObject jo = opt.getComponentMessages();\n+\t\tresponse = opt.getComponentMessages(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NDcwNw==", "bodyText": "When does this thread run?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401794707", "createdAt": "2020-04-01T17:41:55Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/persist/CacheSyncThread.java", "diffHunk": "@@ -42,9 +43,13 @@ public void run() {\n     }\n \n     private String fetch(MessagesDTO dto) {\n+    \tMap<String, Object> response = null;\n+\t\t\t\n         String r = \"\";\n         ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n-        JSONObject jo = opt.getComponentMessages();\n+\t\tresponse = opt.getComponentMessages(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MzM3OA=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTk2MQ==", "bodyText": "@Xiaochao8 , I marked this again as unresolved because I need to know when this thread runs..\n@linr211 , can you provide the information, it not Xiaochao? Thanks!", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402455961", "createdAt": "2020-04-02T16:42:20Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/persist/CacheSyncThread.java", "diffHunk": "@@ -42,9 +43,13 @@ public void run() {\n     }\n \n     private String fetch(MessagesDTO dto) {\n+    \tMap<String, Object> response = null;\n+\t\t\t\n         String r = \"\";\n         ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n-        JSONObject jo = opt.getComponentMessages();\n+\t\tresponse = opt.getComponentMessages(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5MzM3OA=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc4MDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjoyMDozOFrOF9XsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozNDo0OFrOF_zp3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTU4NQ==", "bodyText": "Add return in line 80 and remove this else?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399895585", "createdAt": "2020-03-30T02:20:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNjM0Ng==", "bodyText": "The method's return type is 'void' so there should be no return statement. The removeCustomizedHeaderParams in the else statement is for removing any previously added headers. Why are the header parameters stored in an instance variable?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401206346", "createdAt": "2020-03-31T20:49:42Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTU4NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjQ5NQ==", "bodyText": "There are 2 cases, added or not added.  returning in line after line 79 means added, other cases mean not added.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402066495", "createdAt": "2020-04-02T05:53:09Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTU4NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MDkwOQ==", "bodyText": "Actually, the else statement does something! It removes any If-None-Match header that is already there (stored by a previous http request, because customizedHeaderParams is a global instance variable that is shared across all requests). If we do not remove, the If-None-Match header from previous request will be sent, which is incorrect.\nThis is also why I am saying customizedHeaderParams should not be a global variable.. but I do not want to change it in this PR because it is out of scope.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402450909", "createdAt": "2020-04-02T16:34:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTU4NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc4MDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjoyMToxMlrOF9XscQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo1ODo1MVrOF-oAIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTY2NQ==", "bodyText": "Change condition to (etags == null || etags.isEmpty())?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399895665", "createdAt": "2020-03-30T02:21:12Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMTQyNQ==", "bodyText": "Actually, this check is not needed anymore because it is already inside createIfNoneMatchValue. I will remove this.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401211425", "createdAt": "2020-03-31T20:58:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NTY2NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTc4MzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjoyMzozMFrOF9XuDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo1MTo0M1rOF-nwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NjA3OA==", "bodyText": "Change to String.join(etags, \",\") ?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399896078", "createdAt": "2020-03-30T02:23:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {\n+        \trequester.removeCustomizedHeaderParams(IF_NONE_MATCH_HEADER);\n+        }\n+    }\n+    \n+    private static String createIfNoneMatchValue(List<String> etags) {\n+    \tif(etags == null || etags.isEmpty()) {\n+            return null;\n+        }\n+        final StringBuilder b = new StringBuilder();\n+        final Iterator<String> it = etags.iterator();\n+        b.append(it.next());\n+        while(it.hasNext()) {\n+            b.append(\", \").append(it.next());\n+        }\n+        return b.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwNzQ2MQ==", "bodyText": "String.join is not supported before Java 8", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401207461", "createdAt": "2020-03-31T20:51:43Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/url/URLUtils.java", "diffHunk": "@@ -51,4 +66,34 @@ public static boolean isStringInListIgnoreCase(List<String> list,\n         }\n         return false;\n     }\n+    \n+    public static void addIfNoneMatchHeader(Map<String, Object> cacheProps, final HttpRequester requester) {\n+    \tif (cacheProps != null && !cacheProps.isEmpty()) {\n+        \tMap<String, List<String>> responseHeaders = (Map<String, List<String>>) cacheProps.get(HEADERS);\n+        \tif (responseHeaders != null) {\n+\t        \tList<String> etags = (List<String>) responseHeaders.get(ETAG);\n+\t        \tif (etags != null) {\n+\t        \t\tString ifNoneMatch = createIfNoneMatchValue(etags);\n+\t        \t\tMap<String, String> headers = new HashMap<String, String>();\n+\t        \t\theaders.put(IF_NONE_MATCH_HEADER,ifNoneMatch);\n+\t        \t\trequester.setCustomizedHeaderParams(headers);\n+\t        \t}\n+        \t}\n+        } else {\n+        \trequester.removeCustomizedHeaderParams(IF_NONE_MATCH_HEADER);\n+        }\n+    }\n+    \n+    private static String createIfNoneMatchValue(List<String> etags) {\n+    \tif(etags == null || etags.isEmpty()) {\n+            return null;\n+        }\n+        final StringBuilder b = new StringBuilder();\n+        final Iterator<String> it = etags.iterator();\n+        b.append(it.next());\n+        while(it.hasNext()) {\n+            b.append(\", \").append(it.next());\n+        }\n+        return b.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NjA3OA=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTgwMTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjozNzowOFrOF9X4gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTowODoxNFrOF-oTBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODc1NA==", "bodyText": "Should it remove oldmap.putAll(dataMap);\nThen add all new dataMap to the cacheMessages?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399898754", "createdAt": "2020-03-30T02:37:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,24 +46,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, dataMap, cacheProps);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(Map<String, String> dataMap, Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n+            Map<String, Object> oldmap = c.get(cacheKey);\n             if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n+                c.put(cacheKey, dataMap, cacheProps);\n             } else {\n                 oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+                Map<String, String> cachedMessages = (Map<String, String>) oldmap.get(Cache.MESSAGES);\n+                c.put(cacheKey, cachedMessages, cacheProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNjEzNw==", "bodyText": "Actually, I did not change this logic. It has been there since before. I am also wondering why we need to retain the  old values from the oldmap. In any case, I don't want to change the logic in this PR because it is out of this PR's scope.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401216137", "createdAt": "2020-03-31T21:07:59Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,24 +46,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, dataMap, cacheProps);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(Map<String, String> dataMap, Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n+            Map<String, Object> oldmap = c.get(cacheKey);\n             if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n+                c.put(cacheKey, dataMap, cacheProps);\n             } else {\n                 oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+                Map<String, String> cachedMessages = (Map<String, String>) oldmap.get(Cache.MESSAGES);\n+                c.put(cacheKey, cachedMessages, cacheProps);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODc1NA=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNjI2Mw==", "bodyText": "Let's revisit this later.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401216263", "createdAt": "2020-03-31T21:08:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,24 +46,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, dataMap, cacheProps);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(Map<String, String> dataMap, Map<String, Object> cacheProps) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n+            Map<String, Object> oldmap = c.get(cacheKey);\n             if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n+                c.put(cacheKey, dataMap, cacheProps);\n             } else {\n                 oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+                Map<String, String> cachedMessages = (Map<String, String>) oldmap.get(Cache.MESSAGES);\n+                c.put(cacheKey, cachedMessages, cacheProps);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODc1NA=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTg5ODMyOnYy", "diffSide": "RIGHT", "path": "sample-client-app/src/main/resources/sampleconfig.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo0ODo1MlrOF9YwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0Njo0OVrOF-jaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMjk4MA==", "bodyText": "It's better to move this file to 'test' and add a unit test for it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399912980", "createdAt": "2020-03-30T03:48:52Z", "author": {"login": "linr211"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNjI2Nw==", "bodyText": "I am removing this file for now. It is not yet being used in this PR. VIPCfg.loadConfig is also not being used yet in this PR.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401136267", "createdAt": "2020-03-31T18:46:49Z", "author": {"login": "jessiejuachon"}, "path": "sample-client-app/src/main/resources/sampleconfig.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMjk4MA=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTkwOTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo1NzoxOVrOF9Y2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowNTozOFrOF_KOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNDY3NQ==", "bodyText": "Do you think it is better to call getComponentTranslation rather than getMessages?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399914675", "createdAt": "2020-03-30T03:57:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +36,34 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tMap<String, Object> cache = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = (Map<String, String>) cache.get(Cache.MESSAGES);\n+    \tMap<String, Object> cacheProps = (Map<String, Object>) cache.get(Cache.CACHE_PROPERTIES);\n+        \n+    \tif ((cacheOfComponent == null && !cacheservice.isContainComponent()) ||\n+    \t\t   (cacheOfComponent != null && cacheservice.isContainComponent() \n+    \t\t   && cacheProps!=null && !cacheProps.isEmpty() && cacheservice.isExpired())) {\n+            if (cacheProps == null) {\n+            \tcacheProps = new HashMap<String, Object>();\n             }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \t\tObject o = new ComponentService(dto).getMessages(cacheProps);\n+\n+    \t\tInteger responseCode = (Integer) cacheProps.get(URLUtils.RESPONSE_CODE);\n+    \t\tif (responseCode != null) {\n+\t    \t\tif (responseCode.equals(HttpURLConnection.HTTP_NOT_MODIFIED)) {\n+\t    \t\t\tlogger.info(HttpURLConnection.HTTP_NOT_MODIFIED + \"NOT_MODIFIED for \" + dto.getCompositStrAsCacheKey());\n+\t    \t\t\t// Do not change the cache content\n+\t    \t\t} else if (responseCode.equals(HttpURLConnection.HTTP_OK)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MjIxOQ==", "bodyText": "It has been \"getMessages\" even before this PR, I do not want to do any code clean up or rename not related to the caching issue.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401772219", "createdAt": "2020-04-01T17:05:38Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +36,34 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tMap<String, Object> cache = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = (Map<String, String>) cache.get(Cache.MESSAGES);\n+    \tMap<String, Object> cacheProps = (Map<String, Object>) cache.get(Cache.CACHE_PROPERTIES);\n+        \n+    \tif ((cacheOfComponent == null && !cacheservice.isContainComponent()) ||\n+    \t\t   (cacheOfComponent != null && cacheservice.isContainComponent() \n+    \t\t   && cacheProps!=null && !cacheProps.isEmpty() && cacheservice.isExpired())) {\n+            if (cacheProps == null) {\n+            \tcacheProps = new HashMap<String, Object>();\n             }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \t\tObject o = new ComponentService(dto).getMessages(cacheProps);\n+\n+    \t\tInteger responseCode = (Integer) cacheProps.get(URLUtils.RESPONSE_CODE);\n+    \t\tif (responseCode != null) {\n+\t    \t\tif (responseCode.equals(HttpURLConnection.HTTP_NOT_MODIFIED)) {\n+\t    \t\t\tlogger.info(HttpURLConnection.HTTP_NOT_MODIFIED + \"NOT_MODIFIED for \" + dto.getCompositStrAsCacheKey());\n+\t    \t\t\t// Do not change the cache content\n+\t    \t\t} else if (responseCode.equals(HttpURLConnection.HTTP_OK)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNDY3NQ=="}, "originalCommit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTkyNzAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoxMDoyOVrOF9ZA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyNDo0M1rOF-oyzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNzI5Mw==", "bodyText": "Move them to ConstantsKeys.java.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399917293", "createdAt": "2020-03-30T04:10:29Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -9,22 +9,33 @@\n \n public interface Cache {\n \n+\tpublic final static String MESSAGES = \"messages\";\n+\tpublic final static String CACHE_PROPERTIES = \"cache_properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNDM5Ng==", "bodyText": "It's actually easier to have constants inside the classes that are using them, instead of altogether in one file. This way, we know that these 2 constants are related to Cache objects.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401224396", "createdAt": "2020-03-31T21:24:43Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -9,22 +9,33 @@\n \n public interface Cache {\n \n+\tpublic final static String MESSAGES = \"messages\";\n+\tpublic final static String CACHE_PROPERTIES = \"cache_properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxNzI5Mw=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTkzMzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoxNTo0MVrOF9ZFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToxNDoxNFrOF-oetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODMzOQ==", "bodyText": "no use to this new parameter 'cacheProps'?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399918339", "createdAt": "2020-03-30T04:15:41Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -19,12 +20,16 @@ public FormattingCache() {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n         Object cachedObject = formattingMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        Map<String, Object> cache = new HashMap<String, Object>();\n+    \tif (cachedObject != null) {\n+    \t\tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+    \t}\n+        return cache;\n     }\n \n-    public synchronized boolean put(String cacheKey, Map<String, String> map) {\n+    public synchronized boolean put(String cacheKey, Map<String, String> map, Map<String, Object> cacheProps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxOTI1Mw==", "bodyText": "This is for passing any cache-related properties (etag, max-age, resposne time, etc),  if any. We will use this once we support on-the-fly L2 update.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401219253", "createdAt": "2020-03-31T21:14:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -19,12 +20,16 @@ public FormattingCache() {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public Map<String, Object> get(String cacheKey) {\n         Object cachedObject = formattingMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        Map<String, Object> cache = new HashMap<String, Object>();\n+    \tif (cachedObject != null) {\n+    \t\tcache.put(MESSAGES,  (Map<String, String>) cachedObject);\n+    \t}\n+        return cache;\n     }\n \n-    public synchronized boolean put(String cacheKey, Map<String, String> map) {\n+    public synchronized boolean put(String cacheKey, Map<String, String> map, Map<String, Object> cacheProps) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODMzOQ=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTkzNTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDoxNzoyMVrOF9ZGMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyOToyNlrOGCL_1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODY0MA==", "bodyText": "Isn't the parameter 'cachkey' used?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399918640", "createdAt": "2020-03-30T04:17:21Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -82,6 +87,9 @@ public synchronized int getXCapacity() {\n         return this.capacityX;\n     }\n \n+    public boolean isExpired(String cacheKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNTAwNg==", "bodyText": "In formatting cache, it is not yet used. because we are not yet expiring L2 data. Eventually, it will be used once we support on-the-fly L2 data updates.\nThe interface is common to all so this has to be there.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401225006", "createdAt": "2020-03-31T21:25:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -82,6 +87,9 @@ public synchronized int getXCapacity() {\n         return this.capacityX;\n     }\n \n+    public boolean isExpired(String cacheKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODY0MA=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjkwMA==", "bodyText": "@linr211 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404946900", "createdAt": "2020-04-07T16:29:26Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/FormattingCache.java", "diffHunk": "@@ -82,6 +87,9 @@ public synchronized int getXCapacity() {\n         return this.capacityX;\n     }\n \n+    public boolean isExpired(String cacheKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxODY0MA=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTk2MzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNDozNzozOFrOF9ZWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMToyOTo0NFrOF-o8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjgwNQ==", "bodyText": "I think it's better to have another container ( or a class similar to MessageCache) to maintain the data of 'cacheProperties', it can find etag and expiration from the container by cachekey.\nBasically, MessageCache is for maintaining cached data pool and cacheProperties is for maintaining the etag-expiration. For any searching data from MessageCache, it will firstly detect if expired from  cacheProperties: if yes it should get the etag and make request to remote service, if not it should return cached data from MessageCache.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399922805", "createdAt": "2020-03-30T04:37:38Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMzU5MQ==", "bodyText": "I will wait for finalizing this to provide more comments.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399923591", "createdAt": "2020-03-30T04:41:25Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjgwNQ=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNjgxOA==", "bodyText": "I think another container is not a good idea. Anything related to the cached data must sit together with the data in one container as they are tightly related (accessed together, stored together). One must not be updated without the other. Think of cacheProperties as just metadata/added notes to the cached messages. CacheProperties is meaningless on its own, without the messages. This is why it should not be separated.\nIf I had the choice, I would even put everything in a single object and not have 2 maps! But this will be too much code change so I settled with 2 maps. Anyway, this can be discussed and changed later but let's keep this as is for this PR to minimize code changes.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401226818", "createdAt": "2020-03-31T21:29:44Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMjgwNQ=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDA4NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTo1MTo0N1rOF9aeTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo0NjowOFrOF-jY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MTE5OQ==", "bodyText": "Change this to static and add another instance variable to store cache control header params?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r399941199", "createdAt": "2020-03-30T05:51:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -60,7 +61,17 @@ public void setBaseURL(String baseURL) {\n     private Map<String, String> customizedHeaderParams = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzNTg0NQ==", "bodyText": "Actually, header request parameters may vary per request. This should be a local variable in the request method instead of a global variable. Otherwise, I have to clean it up for every request, which is why I had to add the remove method.\nI do not want to change this now because it has been like that before, and improving this is not related to this PR. I wasn't sure why this has been an instance variable. Are we using this setCustomizedHeaderParams anywhere before?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r401135845", "createdAt": "2020-03-31T18:46:08Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -60,7 +61,17 @@ public void setBaseURL(String baseURL) {\n     private Map<String, String> customizedHeaderParams = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MTE5OQ=="}, "originalCommit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk1NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowODoxOVrOF_f4rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozOToxOFrOF_z1vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzAyMg==", "bodyText": "If you don't need frequent delete or add data, I am not recommended use LinkedHashMap", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402127022", "createdAt": "2020-04-02T08:08:19Z", "author": {"login": "tigershi"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1Mzk1MQ==", "bodyText": "You are right, I don't think that LinkedHashMap is necessary because we do not need to keep the insertion order. I have changed it to a simple HashMap. Please mark this as resolved after review and if you agree. Thanks!\nActually cachedComponentsMap should be a simple HashMap too but I do not want to change it in this PR because it is out of scope. Maybe later in a code clean up PR/issue. :)\nA bit more info: The frequency of add/delete is the same as that of cachedComponentsMap. Before this PR, every time the cache expires, we send a new http request, clear the cachedComponentsMap and add the newly fetched messages from the response body. In this PR, the same thing will happen for the response headers associated to the messages, but stored in this cacheProperties Map. Also, cachedComponentsMap is not updated if the response is 304 Not Modified.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402453951", "createdAt": "2020-04-02T16:39:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -4,18 +4,27 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.messages.api.url.URLUtils;\n+\n public class MessageCache implements Cache {\n     private String                           id                  = \"cache-default\";\n \n     private long                             expiredTime         = 864000000;                                       // 240hr\n     private long                             lastClean           = System.currentTimeMillis();\n \n-    private Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n-\n+    private final Map<String, Map<String, String>> cachedComponentsMap = new LinkedHashMap<String, Map<String, String>>();\n+    private final Map<String, Map<String, Object>> cacheProperties = new LinkedHashMap<String, Map<String, Object>>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzAyMg=="}, "originalCommit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODEyNjAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMTozN1rOGAIPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMTozN1rOGAIPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4ODEwNQ==", "bodyText": "Suggest to move this to the beginning of the method because of efficicency.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402788105", "createdAt": "2020-04-03T07:31:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -73,22 +102,23 @@ public String getRemovedKeyFromHitMap() {\n         return key;\n     }\n \n-    public synchronized boolean put(String cacheKey, Map<String, String> map) {\n+    public synchronized boolean put(String cacheKey, CacheItem itemToCache) {\n         if (this.isFull()) {\n             String k = getRemovedKeyFromHitMap();\n             this.remove(k);\n             hitMap.remove(k);\n-        }\n+        } \n         if (!this.isFull()) {\n-            if (cachedComponentsMap.get(cacheKey) != null) {\n-                Map<String, String> t = cachedComponentsMap.get(cacheKey);\n-                if (t != null) {\n-                    t.putAll(map);\n-                }\n-            } else {\n-                cachedComponentsMap.put(cacheKey, map);\n-            }\n-\n+        \tif (itemToCache != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODEzMTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMzozNVrOGAISiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyODo1NVrOGCL-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTAwMA==", "bodyText": "Suggest to change the type of both key and value to Object in order to make it a common cache.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r402789000", "createdAt": "2020-04-03T07:33:35Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MjcyNQ==", "bodyText": "We cannot use Object as a HashMap key. Key in a HashMap has to be an immutable object such as String. https://howtodoinjava.com/java/collections/hashmap/design-good-key-for-hashmap/", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404262725", "createdAt": "2020-04-06T17:25:32Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTAwMA=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjUzNw==", "bodyText": "@Xiaochao8 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404946537", "createdAt": "2020-04-07T16:28:55Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTAwMA=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTk0ODIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDo1NzoyNlrOGAZL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo1NToxMVrOGDZ0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg==", "bodyText": "Let's say there's a product having 100 components, how many 'cacheProps' instances would be in the memory?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403065832", "createdAt": "2020-04-03T14:57:26Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNDkxOA==", "bodyText": "Thanks for your question!\nFirst, if cacheProps is not used (like in FormattingCache), then no cacheProps instance will be in memory because the cacheProps Map will not be instantiated at all (updating this now, thanks for the reminder). The property must be optional.\nWhat are you proposing to do for cache properties of MessageCache? If we store them in a separate \"container\" (which is pre-OOP style), it will consume the same amount of memory to store the same http headers(etag, etc). Maybe even more because of the footprint of the separate container, and the footprint of having to use the dto key twice just to associate the headers to the cached messages stored in a separate container (more lines of code). It is also prone to inconsistency.\nI strongly suggest using standard Java object-oriented programming where object properties that are related to each other are defined in a single object.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403724918", "createdAt": "2020-04-05T16:28:28Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMDYzMA==", "bodyText": "I think you didn't get my points.\nFirstly it doesn't matter with the 'pre-OOP' at all. It's just a concept for 'container' which may be just a simple hashmap to store the etag with component-key, it's separated from MessageCache.\nSecondly, looks like you don't get my question about 100 components. By your change, i think there will be 100 cacheProps(map) instances in the memory which may not worked(consume too much memory) if there are more components, in other words it will limit the support to the case of large components.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405400630", "createdAt": "2020-04-08T09:50:57Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NjQ0MA==", "bodyText": "Colin, I think you are the one not getting my point. OOP vs a huge hashmap \"container\" greatly matters here. See if this helps you understand:\nEach CacheProps map has the following key value pairs.\n\"RESPONSE_TIME\" : \"xxxxxx\"\n\"HEADER\" : \"list of headers\"\n\"RESPONSE_CODE\" : \"200\"\n\"RESPONSE_MESSAGE\": \"response_msg\"\n\nI  store this map inside CacheItem object (object-oriented programming).\nNow if you store these information in one \"container\"... let's say a huge HashMap,\nthe key will be the cacheKey, and the value will be this cacheProps map above. You will also have to store 100 cacheProps maps, each of them associated to the key.\nThe only difference is you're putting the cacheProps map in another big hashmap \"container\" instead of in each CacheItem. Do you see my point now?\nThe disadvantage is you have to use the cache key twice, query twice: 1 from the MessageCache, and another from the huge HashMap \"container\".\nYou also use the key twice to store.\nThis means double the processing time for get/put which is not optimal.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405686440", "createdAt": "2020-04-08T17:18:12Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4MDU3OA==", "bodyText": "If you still doubt , I have tested implementations with 100 cache keys, 1000 messages each. I compared both implementation's memory consumption. See that they differ by about 100 bytes which is insignificant.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405780578", "createdAt": "2020-04-08T20:03:28Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxOTU4MA==", "bodyText": "What's the reason to store HEADER, RESPONSE_CODE, RESPONSE_MESSAGE? I think they not required to keep in memory; instead, we only need to store etag and response timestamp? so, why we can't just use one map with component as key, etag-timestamp as value? With this, the map size is the number of components, not really huge.\nOverall, the principle should keep the memory concise, maintainable and controllable.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405919580", "createdAt": "2020-04-09T02:22:10Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0NDQ0NQ==", "bodyText": "We can remove response code and response message if you want, but it is the same concept. The key has to be component-locale combination: the existing cacheKey in MessageCache. Each item in the data cache has a corresponding set of etag/timestamp... you will store this in a separate Map.. as I did above. Same memory consumption, but 2 steps to store/query in different places,\nFrankly, concatenating etag and timestamp adds processing overhead in storing and eventually you have to parse this to be used separately! Poor design.\nAnd what happens if you add more properties later on you create another map? Very bad design, in my opinion. Please review OOP concepts.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405944445", "createdAt": "2020-04-09T04:06:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMTk1OA==", "bodyText": "Since there's agreement on reducing cacheProps instances, mark it to resolve.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406221958", "createdAt": "2020-04-09T13:55:11Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);\n-            cs.addCacheOfComponent(dataMap);\n-            retMap = dataMap;\n+            \n+            cs.addCacheOfComponent(new CacheItem (dataMap, cacheProps));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgzMg=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjM4MDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjo0MjoxNVrOGAuYgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMjo0MjoxNVrOGAuYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMzEyMg==", "bodyText": "How about moving line 68 into if block to improve efficiency?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403413122", "createdAt": "2020-04-04T02:42:15Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -40,25 +47,25 @@ public CacheService(MessagesDTO dto) {\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(CacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, itemToCache);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(CacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n-            if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n-            } else {\n-                oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+            CacheItem cacheItem = c.get(cacheKey);\n+            if (cacheItem == null) {\n+            \tcacheItem = new CacheItem();\n             }\n+            cacheItem.addCachedData(itemToCache.getCachedData());\n+            cacheItem.addCacheProperties(itemToCache.getCacheProperties());\n+            c.put(cacheKey, cacheItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDE3OTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTozODoyOFrOGA7Vsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowNjoyMVrOGBhg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTM5NA==", "bodyText": "We don't need to specify productName and version in the conf file, instead, let product specify them at run time. This is more flexible.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403625394", "createdAt": "2020-04-05T01:38:28Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MDg2MQ==", "bodyText": "I am removing the entire loadConfig method for now because it is not yet used in this PR.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404250861", "createdAt": "2020-04-06T17:06:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTM5NA=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDE4NDAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTozOTo0MFrOGA7XaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowNzoxMFrOGBhi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTgzMw==", "bodyText": "Why not get them from json config file now?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403625833", "createdAt": "2020-04-05T01:39:40Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url\n+\t\t\tthis.productName = (String) jsonObject.get(\"product\");\n+\t\t\t// TODO will be removed once version becomes part of online_service_url\n+\t\t\tthis.version = (String) jsonObject.get(\"version\");\n+\t\t\t\n+\t\t\t// TODO get these from json config file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MTM2NQ==", "bodyText": "I am removing the entire loadConfig method for now because it is not yet used in this PR.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404251365", "createdAt": "2020-04-06T17:07:10Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,55 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n-     * initialize the instance by a properties file\n+     * Load client configuration from a JSON file in the resource folder \n      * \n+     * @param configFile This is the name of the JSON configuration file \n+     * @throws VIPClientInitException  \n+     */\n+    public void loadConfig(String configFile) throws VIPClientInitException {\n+    \tClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+    \tInputStream is = classloader.getResourceAsStream(configFile);\n+    \t\n+    \tReader reader = new InputStreamReader(is);\n+    \tJSONParser parser = new JSONParser();\n+\t\tJSONObject jsonObject = null;\n+\t\ttry {\n+\t\t\tjsonObject = (JSONObject) parser.parse(reader);\n+\t\t\tthis.vipServer = (String) jsonObject.get(\"online_service_url\");\n+\t\t\tthis.offline_resources_base_url = (String) jsonObject.get(\"offline_resources_base_url\");\n+\t\t\t\n+\t\t\t// TODO will be removed once product name becomes part of online_service_url\n+\t\t\tthis.productName = (String) jsonObject.get(\"product\");\n+\t\t\t// TODO will be removed once version becomes part of online_service_url\n+\t\t\tthis.version = (String) jsonObject.get(\"version\");\n+\t\t\t\n+\t\t\t// TODO get these from json config file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNTgzMw=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDE5ODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTo0MzozMFrOGA7diQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyODowOVrOGCL8NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNzQwMQ==", "bodyText": "We don't need to set this any more because cache expires by component in new design.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403627401", "createdAt": "2020-04-05T01:43:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -195,7 +245,7 @@ public void setTranslationCache(Cache c) {\n         }\n         Cache createdCache = TranslationCacheManager\n                 .getCache(VIPCfg.CACHE_L3);\n-        if (createdCache != null && this.getCacheExpiredTime() > 0) {\n+        if (createdCache != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n             c.setExpiredTime(this.getCacheExpiredTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTU3Mg==", "bodyText": "This enables support for both \"old\" and \"new\" caching mechanism. This is the logic:\nIf cacheExpiredTime is VIPCfg.cacheExpiredTimeNotSet which is -1, this means the NEW caching logic will be applied because the max-age from http response will be used in MessageCache.isExpired(String cacheKey).\nOtherwise, set the cacheExpiredTime value which is used:\n\nin MessageCache.isExpired(String cacheKey) to determine cache expiration and\nin MessageCache.isExpired() and TranslationManager.getCache(String name) to clear the cache if expired.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404259572", "createdAt": "2020-04-06T17:20:26Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -195,7 +245,7 @@ public void setTranslationCache(Cache c) {\n         }\n         Cache createdCache = TranslationCacheManager\n                 .getCache(VIPCfg.CACHE_L3);\n-        if (createdCache != null && this.getCacheExpiredTime() > 0) {\n+        if (createdCache != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n             c.setExpiredTime(this.getCacheExpiredTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNzQwMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTk3Mg==", "bodyText": "@Xiaochao8 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404945972", "createdAt": "2020-04-07T16:28:09Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -195,7 +245,7 @@ public void setTranslationCache(Cache c) {\n         }\n         Cache createdCache = TranslationCacheManager\n                 .getCache(VIPCfg.CACHE_L3);\n-        if (createdCache != null && this.getCacheExpiredTime() > 0) {\n+        if (createdCache != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n             c.setExpiredTime(this.getCacheExpiredTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYyNzQwMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDIyOTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTo1MTo0OVrOGA7rMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyNTo1NlrOGBiQNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMDg5OQ==", "bodyText": "Please put this class in a file because cache is a common interface and may contain objects of other types.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403630899", "createdAt": "2020-04-05T01:51:49Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,54 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2Mjk2NA==", "bodyText": "Sure. Thanks!", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404262964", "createdAt": "2020-04-06T17:25:56Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,54 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMDg5OQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDI0MTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTo1NDo0MVrOGA7wAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyNzo0OFrOGDYqdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ==", "bodyText": "Suggest move this method to cacheitem class, this belongs to the class.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403632131", "createdAt": "2020-04-05T01:54:41Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MjY3Mw==", "bodyText": "It belongs to Cache because the implementing classes (MessageCache, FormattingCache..)may have different implementations of isExpired. For example, MessageCache uses the http response time, and max age to determine if cache is expired, but this may not be applicable to FormattingCache (Colin is still working on the solution/design for L2 so we do not know yet)\nCacheItem is meant to be a simple POJO, just getters and setters.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404252673", "createdAt": "2020-04-06T17:09:12Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0Njc2Nw==", "bodyText": "@Xiaochao8 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404946767", "createdAt": "2020-04-07T16:29:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMjk5OA==", "bodyText": "I agree with Xiaochao that it's part of cacheitem, and we can still use current isExpired() function for other type of cache implementation.\nReopen it, please double check it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406202998", "createdAt": "2020-04-09T13:27:48Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;\n \n+import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n public interface Cache {\n-\n+\t\n     /**\n-     * get a component's strings by key\n+     * get a component's cached data by key\n      * \n      * @param key\n-     * @return map of all strings under the component\n+     * @return CacheItem object instance that holds the cached data (messages and associated properties)\n      */\n-    public Map<String, String> get(String key);\n+    public CacheItem get(String key);\n \n     /**\n-     * put strings to cache by key\n+     * check if the cache is expired\n      * \n      * @param key\n-     * @param map\n+     * @return false if expired\n+     */\n+    public boolean isExpired(String key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMjEzMQ=="}, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDI1NTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTo1ODo0MlrOGA72ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMTo1ODo0MlrOGA72ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzMzc3MA==", "bodyText": "var cacheItem is unnecessary, return cachedComponentsMap.get(cacheKey) directly.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403633770", "createdAt": "2020-04-05T01:58:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,39 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDI5ODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjoxNjo1M1rOGA8Iuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjoxNjo1M1rOGA8Iuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODQ1OQ==", "bodyText": "Suggest changing to size += cacheItem.getCachedData().size()", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403638459", "createdAt": "2020-04-05T02:16:53Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -156,10 +186,10 @@ public int getCachedKeySize() {\n         Set<String> s = this.getCachedTranslationMap().keySet();\n         int size = 0;\n         for (String key : s) {\n-            Object o = this.getCachedTranslationMap().get(key);\n-            if (o != null) {\n-                Map<String, String> m = (Map<String, String>) o;\n-                size = size + m.keySet().size();\n+        \tCacheItem cacheItem = this.getCachedTranslationMap().get(key);\n+            if (cacheItem != null) {\n+                \n+                size = size + cacheItem.getCachedData().keySet().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDMyMjUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjo1NzoyMFrOGA8TzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjo1NzoyMFrOGA8TzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTI5Mg==", "bodyText": "How about merging these two ifs into one?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403641292", "createdAt": "2020-04-05T02:57:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +29,56 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public Map<String, Object> getComponentMessages(Map<String, Object> cacheProps) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n-        }\n+        HttpRequester requester = VIPCfg.getInstance().getVipService().getHttpRequester();\n+        if (VIPCfg.getInstance().getCacheExpiredTime() == VIPCfg.cacheExpiredTimeNotSet)\n+        \tURLUtils.addIfNoneMatchHeader (cacheProps, requester);\n+        Map<String, Object> response = requester.request(url, ConstantsKeys.GET,\n+        \t\tnull);\n+        \n+        return response;\n     }\n \n+    public JSONObject getMsgsJson(Map<String, Object> response) {\n+    \tif (response != null && response.get(URLUtils.RESPONSE_CODE) != null) {\n+    \t\tif (response.get(URLUtils.RESPONSE_CODE).equals(HttpURLConnection.HTTP_OK)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDQ3MDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNjo1Njo0MlrOGA9X6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNjo1Njo0MlrOGA9X6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1ODczMQ==", "bodyText": "Move this line into below if block since it's needed only there.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403658731", "createdAt": "2020-04-05T06:56:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDUyNjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwODowOToyMVrOGA9zog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwODowOToyMVrOGA9zog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY2NTgyNg==", "bodyText": "Why add this judge? We can make use of etag if possible.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403665826", "createdAt": "2020-04-05T08:09:21Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +29,56 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public Map<String, Object> getComponentMessages(Map<String, Object> cacheProps) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n-        }\n+        HttpRequester requester = VIPCfg.getInstance().getVipService().getHttpRequester();\n+        if (VIPCfg.getInstance().getCacheExpiredTime() == VIPCfg.cacheExpiredTimeNotSet)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDU2MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwODo0ODo1MFrOGA-ERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0Mjo1NFrOGBi5cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MDA4Nw==", "bodyText": "Does this mean the default setting is never expired?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403670087", "createdAt": "2020-04-05T08:48:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,36 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cacheItem;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n+    \tif (cacheItem == null) {\n+    \t\treturn true;\n+    \t}\n+    \tMap<String,Object> cacheProps = cacheItem.getCacheProperties();\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn true;\n+    \t}\n+    \tLong maxAgeMillis = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MzUyMQ==", "bodyText": "It should be Long.MIN_VALUE .. always expired if neither cacheExpiredTime nor max age is set. I will change this.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404273521", "createdAt": "2020-04-06T17:42:54Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,36 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cacheItem;\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);\n+    \tif (cacheItem == null) {\n+    \t\treturn true;\n+    \t}\n+    \tMap<String,Object> cacheProps = cacheItem.getCacheProperties();\n+    \tLong responseTimeStamp = (Long) cacheProps.get(URLUtils.RESPONSE_TIMESTAMP);\n+    \tif (responseTimeStamp == null) {\n+    \t\treturn true;\n+    \t}\n+    \tLong maxAgeMillis = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MDA4Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDU4MzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwOToxNjoxMFrOGA-QEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzozMDoxN1rOGCdxHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ==", "bodyText": "Need to remove any expiration related methods and variables in this class because we change the expiration logic to cacheitem in new design", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403673105", "createdAt": "2020-04-05T09:16:10Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MTEyMg==", "bodyText": "No, the expiration logic belongs to Cache. Each class implementing Cache such as MessageCache, FormattingCache, may have its own implementation of expiration. MessageCache uses the http response max age and response time, but  this not be applicable to FormattingCache (Colin still working on a solution proposal so we do not know yet).\nCacheItem is meant to be a simple POJO, just getters and setters.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404261122", "createdAt": "2020-04-06T17:22:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjMzMQ==", "bodyText": "@Xiaochao8 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404946331", "createdAt": "2020-04-07T16:28:40Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMzc0NA==", "bodyText": "The old cache expiration mechanism conflicts with it in the new design. When the CacheExpiredTime is set, it will clear all the cache when it's time.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405203744", "createdAt": "2020-04-08T01:18:07Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzODA0Ng==", "bodyText": "It doesn't conflict. It is just different. So we allow both:\n\nIf CacheExpiredTime is set in vipconfig.properties, then the client library will use the \"old\" caching like you said, it will clear the entire cache when it is expired. It will not use the max-age from the response.\nIf CacheExpiredTime is not set, then the client library will use the \"new\" caching and use max-age if it is in the http response. If the http response does not have max-age, then the default 864000000 of MessageCache.expiredTime will be used.\n\nThere is no conflict. The product application will use either 1 or 2. The product application will not suddenly break when client library is upgraded.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405238046", "createdAt": "2020-04-08T03:30:17Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -4,27 +4,36 @@\n  */\n package com.vmware.vipclient.i18n.base.cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzEwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDU4NzMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwOToxOTo0OVrOGA-Rzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1ODoyMFrOGBloZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzU1MQ==", "bodyText": "By design, we need to use a separated thread to refresh cache in the background.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403673551", "createdAt": "2020-04-05T09:19:49Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +34,21 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif ((cacheItem == null && !cacheservice.isContainComponent()) || cacheservice.isExpired()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODMxMA==", "bodyText": "Thanks for the reminder!\nStringService is currently not thread-safe due to the MessageDTO being an instance member.  I have made the MessageDTO object a local variable for thread-safety.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404318310", "createdAt": "2020-04-06T18:58:20Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -33,17 +34,21 @@ public StringService(MessagesDTO dto) {\n \n     @SuppressWarnings(\"unchecked\")\n     public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    \tString key = dto.getKey();\n+    \tCacheService cacheservice = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheservice.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif ((cacheItem == null && !cacheservice.isContainComponent()) || cacheservice.isExpired()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzU1MQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDU5Njc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwOTozMDozOVrOGA-Wew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowNjoyNlrOGCzoIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw==", "bodyText": "Need to add cache expiration determination in all the get methods of class TranslationMessage, then refresh cache in the background.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403674747", "createdAt": "2020-04-05T09:30:39Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3OTQwMg==", "bodyText": "Why in TranslationMessage? Cache expiration and refresh happens down the line. TranslationMessage does not need to be aware if cache is expired. It will just automatically receive the refreshed values. For example:\nTranslationMessage.getString calls StringService.getString.\nStringService.getString takes care of expiration determination and refresh an returns the string to TranslationMessage.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404279402", "createdAt": "2020-04-06T17:52:24Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjE3MA==", "bodyText": "Also notice that all unit tests are already passing in CacheServiceTest. Cache is refreshed when expected without having to put the logic inside  TranslationMessage.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404316170", "createdAt": "2020-04-06T18:54:42Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NzE1OQ==", "bodyText": "@Xiaochao8 Can we now mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404967159", "createdAt": "2020-04-07T16:59:11Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTE0OA==", "bodyText": "I mean you need to consider the other two exported function 'getStrings' in TranslationMessage. Now only getString is considered.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405249148", "createdAt": "2020-04-08T04:19:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NjE5Mw==", "bodyText": "That will be in a separate PR. There is ongoing discussion on whether to support this or not.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405596193", "createdAt": "2020-04-08T15:06:26Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -13,6 +13,7 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc0Nw=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDg0NzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNDoxMjoyM1rOGBAWDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoyODoyNVrOGCL86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNzQwNQ==", "bodyText": "We don't need to set this any more because cache expires by component in new design.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403707405", "createdAt": "2020-04-05T14:12:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -223,7 +273,7 @@ public synchronized Cache createTranslationCache(Class cacheClass) {\n                     Task.startTaskOfCacheClean(VIPCfg.getInstance(), interalCleanCache);\n                 }\n                 Cache c = TranslationCacheManager.getCache(VIPCfg.CACHE_L3);\n-                if (c != null && this.getCacheExpiredTime() > 0) {\n+                if (c != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n                     c.setExpiredTime(this.getCacheExpiredTime());\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTg5Mw==", "bodyText": "Same comment as above: This enables support for both \"old\" and \"new\" caching mechanism. This is the logic:\nIf cacheExpiredTime is VIPCfg.cacheExpiredTimeNotSet which is -1, this means use the NEW caching logic which uses the http max-age. Otherwise, still set this cacheExpiredTime value and use it instead of http max age.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404259893", "createdAt": "2020-04-06T17:20:59Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -223,7 +273,7 @@ public synchronized Cache createTranslationCache(Class cacheClass) {\n                     Task.startTaskOfCacheClean(VIPCfg.getInstance(), interalCleanCache);\n                 }\n                 Cache c = TranslationCacheManager.getCache(VIPCfg.CACHE_L3);\n-                if (c != null && this.getCacheExpiredTime() > 0) {\n+                if (c != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n                     c.setExpiredTime(this.getCacheExpiredTime());\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNzQwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjE1NQ==", "bodyText": "@Xiaochao8 Can we mark this as Resolved?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404946155", "createdAt": "2020-04-07T16:28:25Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -223,7 +273,7 @@ public synchronized Cache createTranslationCache(Class cacheClass) {\n                     Task.startTaskOfCacheClean(VIPCfg.getInstance(), interalCleanCache);\n                 }\n                 Cache c = TranslationCacheManager.getCache(VIPCfg.CACHE_L3);\n-                if (c != null && this.getCacheExpiredTime() > 0) {\n+                if (c != null && this.getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\n                     c.setExpiredTime(this.getCacheExpiredTime());\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNzQwNQ=="}, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDg5MDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNDo1NzozOFrOGBAsgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNDo1NzozOFrOGBAsgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxMzE1Mw==", "bodyText": "Do you think it's good to change to cachedMessages = this.getMessages(cacheProps);", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403713153", "createdAt": "2020-04-05T14:57:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -31,41 +32,48 @@ public ComponentService(MessagesDTO dto) {\n     }\n \n     /*\n-     * get messages from local bundle or from remote vip service(non-Javadoc)\n+     * Get messages from local bundle or from remote vip service(non-Javadoc)\n      * \n      * @see\n      * com.vmware.vipclient.i18n.messages.service.IComponentService#getMessages\n      * (com.vmware.vipclient.i18n.base.DataSourceEnum)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> getMessages() {\n+    public Map<String, String> getMessages(final Map<String, Object> cacheProps) {\n         Map<String, String> transMap = new HashMap<String, String>();\n+        ComponentBasedOpt opt = new ComponentBasedOpt(dto);\n         if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.VIP) {\n-            transMap = new ComponentBasedOpt(dto).getComponentMessages();\n+        \tMap<String, Object> response = opt.getComponentMessages(cacheProps);\n+\t    \ttransMap = opt.getMsgsJson(response);\n+\t    \tcacheProps.clear();\n+\t    \tcacheProps.putAll(response);\n         } else if (VIPCfg.getInstance().getMessageOrigin() == DataSourceEnum.Bundle) {\n             transMap = new LocalMessagesOpt(dto).getComponentMessages();\n         }\n         return transMap;\n     }\n \n     public Map<String, String> getComponentTranslation() {\n-        Map<String, String> retMap = new HashMap<String, String>();\n         CacheService cs = new CacheService(dto);\n-        retMap = cs.getCacheOfComponent();\n-        if (retMap == null\n-                && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n+        CacheItem cacheItem = cs.getCacheOfComponent(); \n+        cacheItem = cacheItem == null ? new CacheItem() : cacheItem;\n+        Map<String, String> cachedMessages = cacheItem.getCachedData();\n+ \n+        if (cachedMessages.isEmpty() && VIPCfg.getInstance().getCacheMode() == CacheMode.DISK) {\n             Loader loader = VIPCfg.getInstance().getCacheManager()\n                     .getLoaderInstance(DiskCacheLoader.class);\n-            retMap = loader.load(dto.getCompositStrAsCacheKey());\n+            cachedMessages = loader.load(dto.getCompositStrAsCacheKey());\n         }\n-        if (retMap == null && !cs.isContainComponent()) {\n-            Object o = this.getMessages();\n+        if (cachedMessages.isEmpty() && !cs.isContainComponent()) {\n+        \tMap<String, Object> cacheProps = new HashMap<String, Object>();\n+            Object o = this.getMessages(cacheProps);\n             Map<String, String> dataMap = (o == null ? null\n                     : (Map<String, String>) o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTUyNzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMjoxMDowMFrOGBFxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozNjowOVrOGBipUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjMxNQ==", "bodyText": "Don't need to judge because cacheProperties can't be null.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403796315", "createdAt": "2020-04-06T02:10:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {\n+\t\t\t\tthis.cachedData.putAll(cachedData);\n+\t\t\t}\n+\t\t}\n+        \n+\t\tpublic Map<String, Object> getCacheProperties() {\n+\t\t\treturn cacheProperties;\n+\t\t}\n+\t\t\n+\t\tpublic void addCacheProperties(Map<String, Object> cacheProperties) {\n+\t\t\tsynchronized(this) {\n+\t\t\t\tif (this.cacheProperties == null) {\n+\t\t\t\t\tthis.cacheProperties = new HashMap<String, Object>();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (cacheProperties != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTM5NQ==", "bodyText": "cacheProperties is actually null at the beginning because it is not instantiated. I intentionally did this lazy initialization because Colin was insisting that cacheProperties may not be always needed.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404269395", "createdAt": "2020-04-06T17:36:09Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {\n+\t\t\t\tthis.cachedData.putAll(cachedData);\n+\t\t\t}\n+\t\t}\n+        \n+\t\tpublic Map<String, Object> getCacheProperties() {\n+\t\t\treturn cacheProperties;\n+\t\t}\n+\t\t\n+\t\tpublic void addCacheProperties(Map<String, Object> cacheProperties) {\n+\t\t\tsynchronized(this) {\n+\t\t\t\tif (this.cacheProperties == null) {\n+\t\t\t\t\tthis.cacheProperties = new HashMap<String, Object>();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (cacheProperties != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjMxNQ=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTUyOTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMjoxMTo1MlrOGBFyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTozMjozN1rOGDGlGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA==", "bodyText": "Don't need to judge because cachedData can't be null.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r403796640", "createdAt": "2020-04-06T02:11:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2ODI5OQ==", "bodyText": "It can be null if some developer makes a mistake of instantiating a CacheItem like this:\nnew CacheItem(null,null);\nI am going to remove this check from here, but will put it in the constructor.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404268299", "createdAt": "2020-04-06T17:34:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMjI0OQ==", "bodyText": "It seems I'm wrong, this.cachedData can't be null, but parameter 'cachedData' may be null. The judge is needed still.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405202249", "createdAt": "2020-04-08T01:12:27Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5MzEzNw==", "bodyText": "This is because the existing code ComponentService(dto).getMessages returns null value if http code fails, and actually saves the null value in cache. I agree with you, this is wrong!\nI do not want to change the return of ComponentService(dto).getMessages for now because it is out of scope of this PR. However, I do not want to store null values in the cache, so let's put an empty map there that could be populated later.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405693137", "createdAt": "2020-04-08T17:29:01Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NjI0NA==", "bodyText": "Any suggestions?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405696244", "createdAt": "2020-04-08T17:34:22Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwNjcxNQ==", "bodyText": "You can see this in the usage of putAll\n* @throws NullPointerException if the specified map is null\nSo don't pass null value to the Map.putAll method.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405906715", "createdAt": "2020-04-09T01:32:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/Cache.java", "diffHunk": "@@ -110,5 +119,62 @@\n      * @return a drop id\n      */\n     public String getDropId();\n+    \n+    public class CacheItem {\n+    \tpublic CacheItem() {\n+    \t\t\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t\tthis.addCacheProperties(cacheProps);\n+    \t}\n+    \t\n+    \tpublic CacheItem (Map<String, String> dataMap) {\n+    \t\tsuper();\n+    \t\tthis.addCachedData(dataMap);\n+    \t}\n+    \t\n+    \tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\n+\t\t/*\n+    \t * A map of properties associated to the cachedData (e.g. etag and cache control)\n+    \t * This map is optional and will not be instantiated if not needed.\n+    \t */\n+    \tprivate Map<String, Object> cacheProperties;\n+        \n+        public Map<String, String> getCachedData() {\n+\t\t\treturn cachedData;\n+\t\t}\n+        \n+        public void addCachedData(Map<String, String> cachedData) {\n+\t\t\tif (cachedData != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5NjY0MA=="}, "originalCommit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDE2OTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDowNzowMFrOGByHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1NjoyNVrOGCNHew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMjkyOA==", "bodyText": "calling KeySet is unnecessary.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404522928", "createdAt": "2020-04-07T04:07:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -184,7 +182,7 @@ public int getCachedKeySize() {\n         for (String key : s) {\n         \tCacheItem cacheItem = this.getCachedTranslationMap().get(key);\n             if (cacheItem != null) {              \n-                size = size + cacheItem.getCachedData().keySet().size();\n+                size += cacheItem.getCachedData().keySet().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NTI0Mw==", "bodyText": "Ok, I will update this one. However, after this, can we try not try to clean up code that has been already there before? In other words, if I did not change the code and it has been there before this PR, let's improve it in a separate PR. I want to limit the scope of this PR.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404965243", "createdAt": "2020-04-07T16:56:25Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -184,7 +182,7 @@ public int getCachedKeySize() {\n         for (String key : s) {\n         \tCacheItem cacheItem = this.getCachedTranslationMap().get(key);\n             if (cacheItem != null) {              \n-                size = size + cacheItem.getCachedData().keySet().size();\n+                size += cacheItem.getCachedData().keySet().size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMjkyOA=="}, "originalCommit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDYwOTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMjo0NVrOGB2OTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNDozM1rOGCLVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDE1OQ==", "bodyText": "It seems that loadConfig doesn't exist.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404590159", "createdAt": "2020-04-07T07:22:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,20 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n      * initialize the instance by a properties file\n-     * \n+     * @deprecated\n+     * This method is no longer acceptable to load configurations.\n+     * <p> Use {@link VIPCfg#loadConfig(String)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNjEwMA==", "bodyText": "Yes, it doesn't exist yet. It will be in a separate PR/issue. Let me remove this \"deprecated\" for now.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404936100", "createdAt": "2020-04-07T16:14:33Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -117,17 +128,20 @@ public void initialize(String vipServer, String productName, String version) {\n         this.version = version;\n         this.vipServer = vipServer;\n     }\n-\n+    \n     /**\n      * initialize the instance by a properties file\n-     * \n+     * @deprecated\n+     * This method is no longer acceptable to load configurations.\n+     * <p> Use {@link VIPCfg#loadConfig(String)} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDE1OQ=="}, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDcyOTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1NDo1MlrOGB3YSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNDoyM1rOGCNcyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwOTA5Ng==", "bodyText": "It there is a null cacheItem in cache, then it won't be updated in any case.\nDo you think it's good to use cacheService.isContainComponent() to judge if item in cache?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404609096", "createdAt": "2020-04-07T07:54:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDY5Nw==", "bodyText": "Okay, but isn't it the same result? I do need to get cacheItem from the cache anyway. So if it is null, then the cache doesn't have it.\nSpeaking of, I am simplifying line 41:\n} else if ((cacheItem == null && !cacheService.isContainComponent()))\ninto\n} else {", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404970697", "createdAt": "2020-04-07T17:04:23Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwOTA5Ng=="}, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg2MTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODoyOTowNFrOGB4rJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowOTo0OFrOGCNq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDMxMA==", "bodyText": "It seems this can run only once because running ==false after the first run.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404630310", "createdAt": "2020-04-07T08:29:04Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else if ((cacheItem == null && !cacheService.isContainComponent())) { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+    private volatile boolean running = true;\n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NDI5Ng==", "bodyText": "Yes, it is meant to run only once. I added the finally block because if populateCache throws an unchecked runtime exception, the thread will not close.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404974296", "createdAt": "2020-04-07T17:09:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else if ((cacheItem == null && !cacheService.isContainComponent())) { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+    private volatile boolean running = true;\n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDMxMA=="}, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg2NzExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMDoyM1rOGB4uhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMDoyM1rOGB4uhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTE3Mg==", "bodyText": "Suggest changing to Map<String, String>  cacheOfComponent = new ComponentService(dto).getMessages(cacheProps);", "url": "https://github.com/vmware/singleton/pull/425#discussion_r404631172", "createdAt": "2020-04-07T08:30:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,64 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheItem != null) { // Item is in cache\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else if ((cacheItem == null && !cacheService.isContainComponent())) { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+    private volatile boolean running = true;\n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t    \twhile (running) {\n+\t    \t\ttry {\n+\t\t\t    \t// Use the cacheProps that is already in the cache.\n+\t\t\t    \tpopulateCache(cacheProps, cacheService, dto);\n+\t    \t\t} finally {\n+\t\t\t    \trunning = false;\n+\t\t\t    }\n+\t    \t}\n+\t\t    \n+\t\t};\n+\t\tnew Thread(task).start();\n+\t}\n+\t\n+\tprivate Map<String, String> populateCache(Map<String, Object> cacheProps, \n+\t\t\tCacheService cacheService, MessagesDTO dto) {\n+    \t// Pass cacheProps to getMessages so that:\n+\t\t// 1. A previously stored ETag, if any, can be used for the next HTTP request.\n+\t\t// 2. Cached properties can be refreshed with new properties from the next HTTP response.\n+\t\tObject o = new ComponentService(dto).getMessages(cacheProps);\n+\t\t\n+\t\tMap<String, String>  cacheOfComponent = (Map<String, String>) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQzODA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowMzoyNlrOGCbcVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTowODozOFrOGCzuJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA==", "bodyText": "'While' loop runs only once because running becomes false after the first round. Do you think a normal function call can do the task?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405199958", "createdAt": "2020-04-08T01:03:26Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzOTAwOQ==", "bodyText": "No. The task is done in parallel in a separate thread so that the getString method happening in the main thread returns without waiting for the task to finish. This is by design.\nThe while loop just makes sure uses the \"running=false\" in the finally block so that if any runtime exception happens,. the thread is not left alive.. which may lead to memory leak.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405239009", "createdAt": "2020-04-08T03:34:22Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA=="}, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI0OTQ3Mw==", "bodyText": "If an exception will cause a thread to close, then we don't need the while loop. But we still need to consider whether the exception will cause the application down.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405249473", "createdAt": "2020-04-08T04:20:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA=="}, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NzczNQ==", "bodyText": "I am updating this to remove the while loop and just return in the finally block.\nA RuntimeException will not bring the application down immediately. It will just leave the thread open. If a lot of these threads are eventually left open, it is a memory leak issue which eventually consume the entire memory and bring the application down.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405597735", "createdAt": "2020-04-08T15:08:38Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -16,37 +16,65 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.DataSourceEnum;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.messages.api.opt.server.ComponentBasedOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.server.StringBasedOpt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n \n public class StringService {\n-    private MessagesDTO dto    = null;\n-\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n-\n-    public StringService(MessagesDTO dto) {\n-        this.dto = dto;\n-    }\n-\n+    \n     @SuppressWarnings(\"unchecked\")\n-    public String getString() {\n-        String key = dto.getKey();\n-        CacheService cacheservice = new CacheService(dto);\n-        Map<String, String> map = cacheservice.getCacheOfComponent();\n-        if (map == null) {\n-            if (!cacheservice.isContainComponent()) {\n-                Object o = new ComponentService(dto).getMessages();\n-                map = (Map<String, String>) o;\n-                cacheservice.addCacheOfComponent(map);\n-            }\n-        }\n-        return (map == null || map.get(key) == null ? \"\" : map.get(key));\n+    public String getString(MessagesDTO dto) {\n+    \tString key = dto.getKey();\n+    \tCacheService cacheService = new CacheService(dto);\n+    \tMap<String, String> cacheOfComponent = null;\n+    \tif (cacheService.isContainComponent()) { // Item is in cache\n+    \t\tCacheItem cacheItem = cacheService.getCacheOfComponent();\n+    \t\tcacheOfComponent = cacheItem.getCachedData();\n+    \t\tif (cacheService.isExpired()) { // cacheItem has expired\n+    \t\t\t// Update the cache in a separate thread\n+    \t\t\tpopulateCacheTask(cacheItem.getCacheProperties(), cacheService, dto); \t\t\n+    \t\t}\n+    \t} else { // Item is not in cache\n+    \t\t// Create a new HashMap to store cache properties.\n+    \t\tcacheOfComponent = populateCache(new HashMap<String, Object>(), cacheService, dto);\n+       } \n+       return (cacheOfComponent == null || cacheOfComponent.get(key) == null ? \"\" : cacheOfComponent.get(key));\n+    }\n+    \n+\tprivate void populateCacheTask(Map<String, Object> cacheProps, final CacheService cacheService, MessagesDTO dto) {\n+\t\tRunnable task = () -> {\n+\t\t\tboolean running = true;\n+\t    \twhile (running) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5OTk1OA=="}, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDgzODMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNTozN1rOGCfH-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo1OTo1MlrOGC2BjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MDI4Mg==", "bodyText": "Do you think it's better to add this at the beginning of the method to make sure that the 2 mechanisms aren't conflicted?\nif (VIPCfg.getInstance().getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet) {\nreturn false;\n}", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405260282", "createdAt": "2020-04-08T05:05:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,35 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cachedComponentsMap.get(cacheKey);\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNTQ2OA==", "bodyText": "Okay, that means the individual cacheItem will not be expired if VIPCfg.getInstance().getCacheExpiredTime() != VIPCfg.cacheExpiredTimeNotSet.\nNo change in old cache expiration.\nThis makes sense,  I will update the code.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405635468", "createdAt": "2020-04-08T15:59:52Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -43,13 +46,35 @@ public void setId(String id) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public Map<String, String> get(String cacheKey) {\n+    public CacheItem get(String cacheKey) {\n         Integer i = hitMap.get(cacheKey);\n         if (i != null) {\n             hitMap.put(cacheKey, i.intValue() + 1);\n         }\n-        Object cachedObject = cachedComponentsMap.get(cacheKey);\n-        return cachedObject == null ? null : (Map<String, String>) cachedObject;\n+        return cachedComponentsMap.get(cacheKey);\n+    }\n+    \n+    public boolean isExpired(String cacheKey) {\n+    \tCacheItem cacheItem = cachedComponentsMap.get(cacheKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MDI4Mg=="}, "originalCommit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDg1NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNToxNjozMFrOGCfSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMDowOTo1OFrOGDFQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2Mjg3Nw==", "bodyText": "Why not assign params to commonHeaderParams directly?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405262877", "createdAt": "2020-04-08T05:16:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg4NTA3Nw==", "bodyText": "Okay, I will bring this back to the original implementation and assign directly.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405885077", "createdAt": "2020-04-09T00:09:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2Mjg3Nw=="}, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDg2MTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNToxOToyOVrOGCfVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNTo0OFrOGC5yFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MzY0Ng==", "bodyText": "What if product wants to remove some params?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405263646", "createdAt": "2020-04-08T05:19:29Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();\n+    \t\t}\n+    \t\tcommonHeaderParams.putAll(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzA0Ng==", "bodyText": "This is out of scope of this PR. Remove method was not there before, and it is not needed in this PR. Let's not touch it.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r405697046", "createdAt": "2020-04-08T17:35:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/HttpRequester.java", "diffHunk": "@@ -50,17 +51,23 @@\n      */\n     private String                  baseURL;\n \n-    public void setBaseURL(String baseURL) {\n-        this.baseURL = baseURL;\n-    }\n-\n     /**\n-     * The extra parameters to add to http header\n+     * HTTP headers that are common to all HTTP requests\n      */\n-    private Map<String, String> customizedHeaderParams = null;\n+    private Map<String, String> commonHeaderParams = null;\n \n     public void setCustomizedHeaderParams(Map<String, String> params) {\n-        customizedHeaderParams = params;\n+    \tif (params!=null && !params.isEmpty()) {\n+    \t\tif (commonHeaderParams == null) {\n+    \t\t\tcommonHeaderParams = new HashMap<String, String>();\n+    \t\t}\n+    \t\tcommonHeaderParams.putAll(params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MzY0Ng=="}, "originalCommit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTgxNzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMzoyMFrOGDO8jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozMzoyMFrOGDO8jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0Mzc5MA==", "bodyText": "Suggest to move this judge into addCachedData method, because It's necessary all the time.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406043790", "createdAt": "2020-04-09T08:33:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -12,11 +12,13 @@ public CacheItem() {\n \t\t\n \t}\n \t\n-\tpublic CacheItem (Map<String, String> dataMap, final Map<String, Object> cacheProps) {\n+\tpublic CacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n \t\tsuper();\n \t\tif (dataMap != null) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo0OVrOGDYNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo0OVrOGDYNlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTYwNg==", "bodyText": "should move maxAgeMillis to MessageCache because the value is same for different CacheItem instance.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406195606", "createdAt": "2020-04-09T13:16:49Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/CacheItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.base.cache;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class CacheItem {\n+\tpublic CacheItem() {\n+\t\t\n+\t}\n+\t\n+\tpublic CacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tsuper();\n+\t\tif (dataMap != null) \n+\t\t\tthis.addCachedData(dataMap);\n+\t\tthis.etag = etag;\n+\t\tthis.timestamp = timestamp;\n+\t\tthis.maxAgeMillis = maxAgeMillis;\n+\t}\n+\t\n+\tpublic CacheItem (Map<String, String> dataMap) {\n+\t\tsuper();\n+\t\tif (dataMap != null)\n+\t\t\tthis.addCachedData(dataMap);\n+\t}\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n+\tprivate String etag;\n+\tprivate long timestamp;\n+\tprivate Long maxAgeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg2NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNzozN1rOGDZFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNzozN1rOGDZFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwOTg1Nw==", "bodyText": "It's not good to add '@deprecated' fields or functions in the new codes.\nHow about this judge: if cacheExpiredTime is set, use it to do expiration check and ignore max-age; else use max-age to check?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406209857", "createdAt": "2020-04-09T13:37:37Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -47,14 +47,20 @@\n     private boolean                    pseudo;\n     private boolean                    collectSource;\n     private boolean                    cleanCache;\n-    private long                       cacheExpiredTime;\n+    \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ3MDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNTo0N1rOGDx6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjowNTo0N1rOGDx6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxNjc0MA==", "bodyText": "Do you think it's necessary to make this class thread safe?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406616740", "createdAt": "2020-04-10T06:05:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCache.java", "diffHunk": "@@ -8,8 +8,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import com.vmware.vipclient.i18n.VIPCfg;\n-\n public class MessageCache implements Cache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQ5MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTozMVrOGDyHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjoxOTozMVrOGDyHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTk0Mw==", "bodyText": "How about changing like this? It seems better.\nif (cacheItem == null) {\nc.put(cacheKey, itemToCache);\n}\nelse {\ncacheItem.addCacheItem(itemToCache);\n}", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406619943", "createdAt": "2020-04-10T06:19:31Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -36,29 +37,28 @@ public CacheService(MessagesDTO dto) {\n         if (c == null) {\n             return null;\n         } else {\n-            return c.get(cacheKey);\n+            return (MessageCacheItem) c.get(cacheKey);\n         }\n     }\n \n-    public void addCacheOfComponent(Map<String, String> dataMap) {\n+    public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            c.put(cacheKey, dataMap);\n+            c.put(cacheKey, itemToCache);\n         }\n     }\n \n-    public void updateCacheOfComponent(Map<String, String> dataMap) {\n+    public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n         Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n         if (c != null) {\n-            Map<String, String> oldmap = c.get(cacheKey);\n-            if (oldmap == null) {\n-                c.put(cacheKey, dataMap);\n-            } else {\n-                oldmap.putAll(dataMap);\n-                c.put(cacheKey, oldmap);\n+            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n+            if (cacheItem == null) {\n+            \tcacheItem = new MessageCacheItem();\n+            \tc.put(cacheKey, cacheItem);\n             }\n+            cacheItem.addCacheItem(itemToCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzYwOTMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/TranslationCacheManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMTowN1rOGDzKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMTowN1rOGDzKsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzIzNA==", "bodyText": "should remove @deprecated?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406637234", "createdAt": "2020-04-10T07:21:07Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/TranslationCacheManager.java", "diffHunk": "@@ -36,13 +36,31 @@ public static synchronized TranslationCacheManager createTranslationCacheManager\n     }\n \n     public static Cache getCache(String name) {\n-        Cache c = container.get(name);\n-        if (c != null && c.isExpired()) {\n-            c.clear();\n-            c.setLastClean(System.currentTimeMillis());\n-        }\n+        Cache c = container.get(name);      \n+        cleanEntireCache(c);\n+        \n         return c;\n     }\n+    \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzYxMTU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMjoxMFrOGDzL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyMjoxMFrOGDzL_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzU2Ng==", "bodyText": "should remove @deprecated?", "url": "https://github.com/vmware/singleton/pull/425#discussion_r406637566", "createdAt": "2020-04-10T07:22:10Z", "author": {"login": "linr211"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class CacheServiceTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"de\");\n+    String comment = \"comment\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+    }\n+    \n+    @Test\n+    public void testExpireUsingCacheControlMaxAge() {\n+    \tVIPCfg gc = VIPCfg.getInstance();\n+        try {\n+            gc.initialize(\"vipconfig\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \tgc.initializeVIPService();\n+    \t\n+    \t// Explicitly set this config to the default which is -1, as if the config property was not set.\n+        // This is done so that the cache-control max age form the server response is used instead.\n+        VIPCfg.getInstance().setCacheExpiredTime(0l);\n+        \n+        Cache c = VIPCfg.getInstance().createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(VIPCfg.getInstance());\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        CacheService cs = new CacheService(dto);\n+        \n+        // CacheItem does not exist yet\n+        MessageCacheItem cacheItem = cs.getCacheOfComponent();\n+        assertNull(cacheItem);\n+        \n+        // This triggers the first http call\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tcacheItem = cs.getCacheOfComponent();\n+        Long responseTime = (Long) cacheItem.getTimestamp();\n+        \n+        // TODO Store response code in cache if we want to test this\n+        //int responseCode = cacheItem.getResponseCode();\n+        //assertEquals(new Integer(200), responseCode);\n+        \n+        // Set max age to 0 to explicitly expire the cache for testing purposes.\n+        cacheItem.setMaxAgeMillis(0l);\n+        \n+        // Second request for the same message.\n+        // This should trigger another HTTP request because cache had been explicitly expired above.\n+        // The http request includes If-None-Match header that is set to the previously received eTag value.\n+        translation.getString(locale, component, key, source, comment, args);\n+        \n+        // Because nothing has changed on the server and If-None-Match request header was properly set, \n+        // the server responds with a 304 Not Modified.\n+        // However, cache update happens in a separate thread, and the previously cached item \n+        // was immediately returned in the main thread for optimal performance.\n+        // This means no changes yet in the cached response code nor the response time.\n+        Long responseTime2 = cacheItem.getTimestamp();\n+        assertTrue(responseTime2.equals(responseTime)); \n+        assertTrue(cacheItem.getMaxAgeMillis() == 0l);\n+        \n+        // TODO Store response code in cache if we want to test this\n+        //responseCode = cacheItem.getResponseCode();\n+        //assertEquals(new Integer(200), responseCode);\n+        \n+        // Give time for the separate thread to finish.\n+        try {\n+\t\t\tThread.sleep(5000);\n+\t\t} catch (InterruptedException e) {\n+\t\t\t// TODO Auto-generated catch block\n+\t\t\te.printStackTrace();\n+\t\t}\n+        \n+        // Third request for the same message.\n+        // This should fetch messages and properties from cache \n+        translation.getString(locale, component, key, source, comment, args);\n+        \n+        // TODO Store response code in cache if we want to test \n+        //responseCode = cacheItem.getResponseCode();        \n+        //assertEquals(new Integer(304), responseCode);\n+        \n+        // The cached response time had been updated by the separate thread \n+        // to the timestamp of the second response.  \n+        // This, in effect, extends the cache expiration.\n+        Long responseTime3 = cacheItem.getTimestamp();\n+        assertTrue(responseTime3 > responseTime); \n+        assertTrue(cacheItem.getMaxAgeMillis() > 0l);\n+        \n+    }\n+    \n+    @Test\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjE4NTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjowMTowM1rOGEKuPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNjowMTowM1rOGEKuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyMzE2NA==", "bodyText": "Only when 304 or success, then update cacheItem.", "url": "https://github.com/vmware/singleton/pull/425#discussion_r407023164", "createdAt": "2020-04-11T06:01:03Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -26,39 +30,65 @@ public ComponentBasedOpt(final MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n-    public JSONObject getComponentMessages() {\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n         String url = V2URL.getComponentTranslationURL(this.dto,\n                 VIPCfg.getInstance().getVipService().getHttpRequester().getBaseURL());\n         if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n             url = url.replace(\"pseudo=false\", \"pseudo=true\");\n         }\n-        String responseStr = VIPCfg.getInstance().getVipService().getHttpRequester().request(url, ConstantsKeys.GET,\n-                null);\n-        if (null == responseStr || responseStr.equals(\"\"))\n-            return null;\n-        else {\n-            if (ConstantsKeys.LATEST.equals(this.dto.getLocale())) {\n-                responseStr = responseStr.replace(ConstantsKeys.PSEUDOCHAR, \"\");\n-            }\n-\n-            JSONObject msgObject = (JSONObject) this.getMessagesFromResponse(responseStr,\n-                    ConstantsKeys.MESSAGES);\n-\n-            return msgObject;\n+        \n+        Map<String, String> headers = new HashMap<String, String>();\n+        if (cacheItem.getEtag() != null)\n+        \theaders.put(URLUtils.IF_NONE_MATCH_HEADER, cacheItem.getEtag());\n+        \n+        Map<String, Object> response = VIPCfg.getInstance().getVipService().getHttpRequester()\n+        \t\t.request(url, ConstantsKeys.GET,null, headers);\n+        \n+        if (response.get(URLUtils.HEADERS) != null)\n+        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n+        if (response.get(URLUtils.RESPONSE_TIMESTAMP) != null)\n+        \tcacheItem.setTimestamp((long) response.get(URLUtils.RESPONSE_TIMESTAMP) );\n+        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n+        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n+        Map<String,String> messages = this.getMsgsJson(response);\n+        if (messages != null) {\n+        \tcacheItem.addCachedData(messages);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4547, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}