{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDgyODIy", "number": 511, "title": "Loading offline resource bundles", "bodyText": "", "createdAt": "2020-04-15T00:45:19Z", "url": "https://github.com/vmware/singleton/pull/511", "merged": true, "mergeCommit": {"oid": "6bbdad38a8d83ef3c448d77f0ad9e81014d7856e"}, "closed": true, "closedAt": "2020-04-30T03:00:08Z", "author": {"login": "jessiejuachon"}, "timelineItems": {"totalCount": 103, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcciXDjgFqTQwMzEzODA2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccj9ShgFqTQwMzE2ODYzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTM4MDY2", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-403138066", "createdAt": "2020-04-30T00:57:55Z", "commit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTQwOTU1", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-403140955", "createdAt": "2020-04-30T01:07:16Z", "commit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTowNzoxNlrOGOWXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMToxMzozMVrOGOWdqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTcwMA==", "bodyText": "Need to remove this?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417699700", "createdAt": "2020-04-30T01:07:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDQxMg==", "bodyText": "Remove this 2 methods or make them private?\nThey don't need to exported.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700412", "createdAt": "2020-04-30T01:09:52Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +411,24 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void addMsgOriginsQueue(DataSourceEnum dataSource) {\n+\t\tthis.msgOriginsQueue.add(dataSource);\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDk5MQ==", "bodyText": "If cachedData == null, then do nothing?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417700991", "createdAt": "2020-04-30T01:12:18Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMTI4OA==", "bodyText": "In this logic, we should prevent querying fro server parallelly.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417701288", "createdAt": "2020-04-30T01:13:31Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -31,16 +32,28 @@ public MessageCacheItem (Map<String, String> dataMap) {\n \t\n \tprivate String etag;\n \tprivate long timestamp;\n-\tprivate Long maxAgeMillis = 864000000l;\n+\tprivate Long maxAgeMillis = 86400000l;\n+\t\n+\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n \t\n-\tpublic final Map<String, String> cachedData = new HashMap<String, String>();\n+\tpublic void addCacheData(String key, String value) {\n+\t\tthis.cachedData.put(key, value);\n+\t}\n+\t\n+\tpublic boolean isCachedDataEmpty() {\n+\t\treturn this.cachedData.isEmpty();\n+\t}\n \t\n \tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n \t\tif (cachedData != null) \n \t\t\tthis.cachedData.putAll(cachedData);\n \t}\n \t\n-\tpublic synchronized void addCacheItem (MessageCacheItem cacheItem) {\n+\tpublic synchronized void setCacheItem (MessageCacheItem cacheItem) {\n+\t\t// Do not update cacheItem if timestamp is earlier than current. \n+\t\t// An older timestamp comes from an old thread that was blocked.\n+\t\tif (cacheItem.getTimestamp() < this.timestamp) \n+\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTY4NjMx", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-403168631", "createdAt": "2020-04-30T02:49:35Z", "commit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c12147f958c5014b8e47959cf216a9db1d380d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/f4c12147f958c5014b8e47959cf216a9db1d380d", "committedDate": "2020-03-11T00:00:20Z", "message": "Loading configuration from the JSON configuration file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "committedDate": "2020-03-11T00:54:17Z", "message": "Removing code that is not yet ready to be used from the sample application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e72b73b497563607e5031d5afa322caffd03fca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5e72b73b497563607e5031d5afa322caffd03fca", "committedDate": "2020-03-11T22:01:24Z", "message": "fixing failing code scan\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68NFL24bPpi-pS5s&open=AXDG68NFL24bPpi-pS5s\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68IGL24bPpi-pS2r&open=AXDG68IGL24bPpi-pS2r\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d85ca7fca1290a93558fd937afd18dc27e92d6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/73d85ca7fca1290a93558fd937afd18dc27e92d6", "committedDate": "2020-03-12T07:58:55Z", "message": "Adding a cache properties map to hold cache details such as etag and cache control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a381070ef1e057fda0b08ca5d65323482273a86", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/2a381070ef1e057fda0b08ca5d65323482273a86", "committedDate": "2020-03-12T08:09:09Z", "message": "Removing white space\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "committedDate": "2020-03-12T09:09:08Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056891a79856058bf9af28c44110f588e61eeefc", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/056891a79856058bf9af28c44110f588e61eeefc", "committedDate": "2020-03-12T22:59:17Z", "message": "Parse headers, response code, response message from an HTTP response and return them upstream."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "committedDate": "2020-03-17T19:30:18Z", "message": "Storing response headers in Map of cache properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17978bd621bc7ee7de27205534568fee986b1d0b", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/17978bd621bc7ee7de27205534568fee986b1d0b", "committedDate": "2020-03-17T22:50:12Z", "message": "Fixing failing unit test due to NullPointerException when doing Map.putAll(null)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c691708a3b9b0a891622a7a96d3d979ff3cb807", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/6c691708a3b9b0a891622a7a96d3d979ff3cb807", "committedDate": "2020-03-17T23:41:27Z", "message": "Changes after code review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a8aa1c4afd56cc1042939892a22dbca64adc1d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/41a8aa1c4afd56cc1042939892a22dbca64adc1d", "committedDate": "2020-03-18T22:09:37Z", "message": "Removing exception handling for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/dd2455d5e68187dd4061b9c71ccd2799480d3d85", "committedDate": "2020-03-19T16:43:36Z", "message": "Deprecating VIPCfg.initialize; cleaning up code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/e26d372496ced19785a48b187e3bcdb1c1442ba1", "committedDate": "2020-03-20T15:45:46Z", "message": "Storing the http response code in the cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "committedDate": "2020-03-25T20:11:07Z", "message": "Using cached etag as if-none-match request header value in the request in order to get a 304 NOT MODIFIED http response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "committedDate": "2020-03-26T04:04:49Z", "message": "Handling 404 response from Singleton service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "529e5cc756460c5314a09a015caad7f4d26482d9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/529e5cc756460c5314a09a015caad7f4d26482d9", "committedDate": "2020-03-26T23:38:04Z", "message": "Using HTTP repsonse's Cache-Control max-age and timestamp to dertermine if component locale's cache has expired"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40fcf9dc23a01cc336b67e7eddea16d85be9817", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b40fcf9dc23a01cc336b67e7eddea16d85be9817", "committedDate": "2020-03-26T23:49:56Z", "message": "Moving constants to URLUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa123f9a1bee0d349ab6c36384288c99e865fb99", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/fa123f9a1bee0d349ab6c36384288c99e865fb99", "committedDate": "2020-03-27T00:07:11Z", "message": "Fixing failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b2054bc21a61ecdcecbb74f5a97b7af714682f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/30b2054bc21a61ecdcecbb74f5a97b7af714682f", "committedDate": "2020-03-27T02:47:23Z", "message": "Fixing failing code scan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "author": {"user": {"login": "Xiaochao8", "name": "Xiaochao Li"}}, "url": "https://github.com/vmware/singleton/commit/0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "committedDate": "2020-03-27T06:47:07Z", "message": "Merge branch 'g11n-java-client' into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "committedDate": "2020-03-30T00:29:34Z", "message": "Cleaning up import in ComponentService,java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8450e444632e849f020704d65106fed11417b0a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d8450e444632e849f020704d65106fed11417b0a", "committedDate": "2020-03-30T03:03:20Z", "message": "Cleaning up code - caching/expiry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "committedDate": "2020-03-30T03:04:44Z", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "committedDate": "2020-03-31T02:51:56Z", "message": "Adding tests for new caching workflow; enabling old caching workflow using cacheExpiredTime config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06adb3ac3d456f897882ee1af237d29c7f03967", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d06adb3ac3d456f897882ee1af237d29c7f03967", "committedDate": "2020-03-31T03:16:31Z", "message": "Fixing a failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c855873e5585f19152290738e4dbf6f0180b06", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/48c855873e5585f19152290738e4dbf6f0180b06", "committedDate": "2020-03-31T05:37:28Z", "message": "Adding mock server response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e45bedd128d76023c8089f9194069ea0bf30f6a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4e45bedd128d76023c8089f9194069ea0bf30f6a", "committedDate": "2020-03-31T18:55:50Z", "message": "Removing unused file sampleconfig.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a40dc87413ed76788fc60332b91741137d5e829", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/6a40dc87413ed76788fc60332b91741137d5e829", "committedDate": "2020-03-31T21:46:03Z", "message": "Changes from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4c3c12d4549eac93be3481db3309dea80c6a9e6c", "committedDate": "2020-03-31T23:34:51Z", "message": "Value of VIPCfg.cacheExpiredTime is -1 when value is not set in config file. This means max age from server will be used. Setting VIPCfg.cacheExpiredTime to 0 disables caching."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "committedDate": "2020-04-02T17:10:51Z", "message": "Changing a LinkedHashMap to a HashMap because insertion order does not need to be maintained."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baef0d06f0facd4fe2383185dc1b7979bba186a7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/baef0d06f0facd4fe2383185dc1b7979bba186a7", "committedDate": "2020-04-03T05:54:04Z", "message": "Adding CacheItem object to contain map of data and a another map for any other cache properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a96e9a7dbec8e912f29439334792d7b51069d6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/02a96e9a7dbec8e912f29439334792d7b51069d6", "committedDate": "2020-04-03T05:59:48Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/78d88f796cb3bd3f015bb1d589717fe6897abc05", "committedDate": "2020-04-03T06:14:21Z", "message": "Fixing code scan issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655c223992bf244c4136a52c636119c9edf605fe", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/655c223992bf244c4136a52c636119c9edf605fe", "committedDate": "2020-04-03T08:36:12Z", "message": "Code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8746915f5015f497b6956e8f8b743806330cc51c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8746915f5015f497b6956e8f8b743806330cc51c", "committedDate": "2020-04-05T17:28:09Z", "message": "Lazily instantiating cacheProps; code clean up and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "committedDate": "2020-04-07T03:26:44Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4e18358f37c29502cfdeb60c44b94e63653601", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/3a4e18358f37c29502cfdeb60c44b94e63653601", "committedDate": "2020-04-07T03:36:56Z", "message": "Adding header to CacheItem.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "committedDate": "2020-04-07T03:49:29Z", "message": "Fixing code san issue. Synchronize on a final field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f57e243ed1f450349392e990b4502dd74543f91", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8f57e243ed1f450349392e990b4502dd74543f91", "committedDate": "2020-04-07T04:07:44Z", "message": "Fixing code scan bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72c8799ffbbb23dc61115375cbee52573e792ec9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/72c8799ffbbb23dc61115375cbee52573e792ec9", "committedDate": "2020-04-07T17:15:34Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/92edfc88a64c21470fc06c37b65503a6d9042f90", "committedDate": "2020-04-07T19:15:13Z", "message": "Updating CasheService.isContainComponent to return false if cache key is stored but has a null value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/2042554b861d0b97b04a8d29c3a051106e24d8f0", "committedDate": "2020-04-08T04:57:56Z", "message": "HttpRequester if-none-match header and other customized headers are added to each specific request locally."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae707fface7ade445bc391f9f0e4125734eeddb1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ae707fface7ade445bc391f9f0e4125734eeddb1", "committedDate": "2020-04-08T17:09:39Z", "message": "Code clean up; keep old caching expiration logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82818d5909f1b1e2117f7599993ea50777bd982a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/82818d5909f1b1e2117f7599993ea50777bd982a", "committedDate": "2020-04-08T21:12:57Z", "message": "Fixing code scan bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "committedDate": "2020-04-08T21:50:07Z", "message": "Merge branch 'g11n-java-client' into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "committedDate": "2020-04-09T00:13:02Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/78dcc1cc7de1700d332c4901ec3f09e546befd26", "committedDate": "2020-04-09T07:14:14Z", "message": "Removing response code and response msg from cache; Passing cacheItem object to be updated down the line."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9281c640b3b78d987e1fd865b01f16e4edbfd768", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/9281c640b3b78d987e1fd865b01f16e4edbfd768", "committedDate": "2020-04-10T04:03:05Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26577625b3eb13f1f9367f313dd94d47c9113749", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/26577625b3eb13f1f9367f313dd94d47c9113749", "committedDate": "2020-04-10T04:08:23Z", "message": "Adding header to CacheItem.java file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/9e80f09d4838f9de33bf9dce100744f4832630a0", "committedDate": "2020-04-10T04:35:16Z", "message": "Fixing failing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68467f34882da413ed852f2ed4b1394e88bf64b1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/68467f34882da413ed852f2ed4b1394e88bf64b1", "committedDate": "2020-04-10T23:14:41Z", "message": "Changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d67c72ee939034deb58b99d4fdf0fcc38857c006", "committedDate": "2020-04-10T23:28:38Z", "message": "Fixing code scan bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85919738596847c3cd42fd2397226fb498cf6e28", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/85919738596847c3cd42fd2397226fb498cf6e28", "committedDate": "2020-04-13T21:22:27Z", "message": "Not storing anything in cache if response is neither 200 nor 304"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "committedDate": "2020-04-15T00:36:42Z", "message": "Loading messages from specified offline resource bundles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce2488b8af539a1456959b97e482435b11d5aeff", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ce2488b8af539a1456959b97e482435b11d5aeff", "committedDate": "2020-04-15T00:43:12Z", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "109296301af054a8def120b98fd7e877acdb465f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/109296301af054a8def120b98fd7e877acdb465f", "committedDate": "2020-04-15T00:48:03Z", "message": "Adding header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "committedDate": "2020-04-15T01:14:11Z", "message": "Fixing failing unie test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDE2MDU2", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-393416056", "createdAt": "2020-04-15T02:26:30Z", "commit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoyNjozMFrOGFniNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjozOTowOVrOGFnviw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0Mzc5Nw==", "bodyText": "It's better to use Paths.get", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408543797", "createdAt": "2020-04-15T02:26:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NzIxMQ==", "bodyText": "How about replacing with:\ntry (Reader reader = new InputStreamReader(is, \"UTF-8\");) {", "url": "https://github.com/vmware/singleton/pull/511#discussion_r408547211", "createdAt": "2020-04-15T02:39:09Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {\n+        JSONObject jsonObj = null;\n+        \n+        ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n+        InputStream is = classloader.getResourceAsStream(pathName);\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjMyNTUw", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-394632550", "createdAt": "2020-04-16T13:29:24Z", "commit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyOToyNFrOGGlUTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODoxOFrOGGltyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1NjA0Ng==", "bodyText": "Does this function work if the bundle is out of the client(jar)?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409556046", "createdAt": "2020-04-16T13:29:24Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -19,7 +20,31 @@\n \n public class FileUtil {\n     static Logger logger = LoggerFactory.getLogger(FileUtil.class);\n-\n+    \n+    public static JSONObject readJson(String pathName)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1OTY2MA==", "bodyText": "how about using 'refreshComponentMessages' as the function name?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409559660", "createdAt": "2020-04-16T13:34:34Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MjU2OQ==", "bodyText": "should judge if messages is empty before adding to cache.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r409562569", "createdAt": "2020-04-16T13:38:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,24 +4,47 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString pathName = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tif (pathName != null) {\n+    \t\tpathName = pathName.concat(filePath);\n+    \t} else {\n+    \t\tpathName = filePath;\n+    \t}\n+    \tMap<String, String> messages = JSONBundleUtil.getMessages(pathName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada17f19d4e56d283ae65886b08e0d6a71031ba7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ada17f19d4e56d283ae65886b08e0d6a71031ba7", "committedDate": "2020-04-16T17:06:32Z", "message": "Code changes after review; code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc60eeffd82dc8e8214207524bda4864edd05add", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/fc60eeffd82dc8e8214207524bda4864edd05add", "committedDate": "2020-04-17T16:14:41Z", "message": "Using java.nio.file.Paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/3e70449176a975fa30985714d2c9f03795c72d6b", "committedDate": "2020-04-17T17:07:36Z", "message": "Offline mode as fallback when service fetch fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "committedDate": "2020-04-17T17:56:53Z", "message": "Resetting VIPCfg and I18nFactory instances for each test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "committedDate": "2020-04-17T17:59:27Z", "message": "Resetting VIPCfg and I18nFactory after test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "committedDate": "2020-04-17T22:31:30Z", "message": "Fixing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTcxMDQ0", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-396171044", "createdAt": "2020-04-20T06:29:48Z", "commit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyOTo0OFrOGIFFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODowMDoxN1rOGIH__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTEwNw==", "bodyText": "Suggest checking cfg when initializing to report errors early.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411125107", "createdAt": "2020-04-20T06:29:48Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -76,10 +76,13 @@ public Message getMessageInstance(Class c, VIPCfg cfg) {\n         Message i = null;\n         if (c == null) {\n             return i;\n-        } else if (this.getCfg().getVipServer() == null\n-                || this.getCfg().getProductName() == null\n+        } else if (this.getCfg().getProductName() == null\n                 || this.getCfg().getVersion() == null) {\n-            logger.error(\"VipServer|ProductName|Version is null!\");\n+            logger.error(\"ProductName|Version is null!\");\n+            return i;\n+        } else if (this.getCfg().getVipServer() == null \n+        \t\t&& this.getCfg().getOfflineResourcesBaseUrl() == null) {\n+        \tlogger.error(\"One of offlineResourcesBaseUrl and vipServer must not be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzMDkxNQ==", "bodyText": "The judge logic isn't consistent with comments'.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411130915", "createdAt": "2020-04-20T06:43:13Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -57,13 +60,27 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n \t        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n \t        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n-\t        \n-        \tif (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n-\t\t        Map<String,String> messages = this.getMsgsJson(response);\n-\t\t        if (messages != null) {\n-\t\t        \tcacheItem.addCachedData(messages);\n-\t\t        }\n-        \t}\n+\t\t\t      \n+\t        if (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n+\t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n+\t\t        try {\n+\t        \t\tif (getResponseCode(respObj) == 200 && \n+\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n+\t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3Mjg2Mw==", "bodyText": "Should defaultLocale be from VIPCfg?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411172863", "createdAt": "2020-04-20T08:00:17Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,57 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), dto.getComment(), \n+\t\t\t\t\tdto.getKey(), dto.getSource(), LocaleUtility.defaultLocale.toLanguageTag(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b92e4480ca25d122c7f98dc389d7e4884a59a25", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5b92e4480ca25d122c7f98dc389d7e4884a59a25", "committedDate": "2020-04-20T17:42:50Z", "message": "Limit to wiremock test logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb41b5042e733f21f5cda4428faab6e0a95e19a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/dfb41b5042e733f21f5cda4428faab6e0a95e19a", "committedDate": "2020-04-20T21:47:47Z", "message": "Decreasing unit test log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a7105c4fdc5d88d8db80340b3b00d947622cc7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/21a7105c4fdc5d88d8db80340b3b00d947622cc7", "committedDate": "2020-04-21T00:43:23Z", "message": "this test is timing out and trying to connect 70+ times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/84343d506461aea4976a86fa25e7bb1b06703150", "committedDate": "2020-04-21T00:56:15Z", "message": "Adding comments to code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTIyODk1", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-396922895", "createdAt": "2020-04-21T01:15:30Z", "commit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToxNTozMFrOGIuJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMToxOTozMFrOGIuOaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5Nzg1Mw==", "bodyText": "Service is removing fallback behavior.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411797853", "createdAt": "2020-04-21T01:15:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc5OTE0NQ==", "bodyText": "I don't see where 'match' is. Could you point out?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411799145", "createdAt": "2020-04-21T01:19:30Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -65,7 +65,10 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n \t        \t\tif (getResponseCode(respObj) == 200 && \n-\t        \t\t\t\t// Do not use service response if not matching the locale in the request\n+\t        \t\t\t\t// If the response is 200, there are 2 possible cases:\n+\t        \t\t\t\t// 1. the response's locale matches the request's locale OR\n+\t        \t\t\t\t// 2. the response's locale is for the default locale (service's fall back behavior)\n+\t        \t\t\t\t// Use the response only if its locale matches the request's locale\n \t        \t\t\t\t(LocaleUtility.isDefaultLocale(this.dto.getLocale()) || \n \t        \t\t\t\t\t\t!LocaleUtility.isDefaultLocale(getLocale(respObj)))){    \t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTQ4NjI2", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-396948626", "createdAt": "2020-04-21T02:41:03Z", "commit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0MTowM1rOGIv5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0MTowM1rOGIv5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjQ0Mw==", "bodyText": "To get the string, the logic is not coherent, e.g. translation.getString is parallel with cacheItem.cachedData.get(key)\ndo you think it make sense?\nMy suggestion is CacheService should be in translation.getString, it should be not exposed to API caller(developer).", "url": "https://github.com/vmware/singleton/pull/511#discussion_r411826443", "createdAt": "2020-04-21T02:41:03Z", "author": {"login": "linr211"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/OfflineModeTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.service;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Locale;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.vmware.vip.i18n.BaseTestClass;\n+import com.vmware.vipclient.i18n.I18nFactory;\n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.Cache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCache;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.TranslationCacheManager;\n+import com.vmware.vipclient.i18n.base.instances.TranslationMessage;\n+import com.vmware.vipclient.i18n.exceptions.VIPClientInitException;\n+import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+\n+public class OfflineModeTest extends BaseTestClass {\n+\n+\tString component = \"JAVA\";\n+    String key = \"LeadTest\";\n+    String source = \"[{0}] Test alert\";\n+    Locale locale = new Locale(\"fil\");\n+    String comment = \"comment\";\n+    String messageFil = \"[{0}] Alerto sa pagsusuri\";\n+    String messageFr =\"[{0}] Alerte de test\";\n+    Object[] args = { \"a\" };\n+\n+    MessagesDTO dto = new MessagesDTO();\n+    \n+    @Before\n+    public void init() {\n+        dto.setComponent(component);\n+        dto.setKey(key);\n+        dto.setSource(source);\n+        dto.setLocale(locale.toLanguageTag());\n+        VIPCfg.resetInstance();\n+    }\n+    \n+    @Test\n+    public void testGetMsgsOfflineMode() {\n+    \tVIPCfg cfg = VIPCfg.getInstance();\n+  \n+        try {\n+            cfg.initialize(\"vipconfig-offline\");\n+        } catch (VIPClientInitException e) {\n+            logger.error(e.getMessage());\n+        }\n+    \t\n+        Cache c = cfg.createTranslationCache(MessageCache.class);\n+        TranslationCacheManager.cleanCache(c);\n+        I18nFactory i18n = I18nFactory.getInstance(cfg);\n+        TranslationMessage translation = (TranslationMessage) i18n.getMessageInstance(TranslationMessage.class);\n+        \n+        dto.setProductID(VIPCfg.getInstance().getProductName());\n+        dto.setVersion(VIPCfg.getInstance().getVersion());\n+        \n+    \tCacheService cs = new CacheService(dto);\n+    \t\n+    \ttranslation.getString(locale, component, key, source, comment, args);\n+    \t\n+    \tMessageCacheItem cacheItem = cs.getCacheOfComponent();\n+    \tassertNotNull(cacheItem);\n+    \tassertEquals(messageFil, cacheItem.cachedData.get(key));\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84343d506461aea4976a86fa25e7bb1b06703150"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8e443e6de5070baf91c76e1f4001188e8be0d5", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/be8e443e6de5070baf91c76e1f4001188e8be0d5", "committedDate": "2020-04-21T18:26:20Z", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b805d3672e0b286648b612dd48d3fabe73f92fd4", "committedDate": "2020-04-21T19:14:03Z", "message": "Adding timestamp to cache fromn local bundle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Nzk3NTMz", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-397797533", "createdAt": "2020-04-22T02:21:07Z", "commit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyMTowOFrOGJgVnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyMTowOFrOGJgVnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDE4OQ==", "bodyText": "Suggest to set 'never expire'", "url": "https://github.com/vmware/singleton/pull/511#discussion_r412620189", "createdAt": "2020-04-22T02:21:08Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,6 +43,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\t\tgetResource(path.toString()).toURI());\n \t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n \t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/17bc16cd019c4d40ad82df7590869f82a76b0a96", "committedDate": "2020-04-23T04:26:42Z", "message": "Deprecating methods in TranslationMessage; adding new method getMessage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODQzMjEy", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-398843212", "createdAt": "2020-04-23T07:49:23Z", "commit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo0OToyM1rOGKbkWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODozNzo1NlrOGKdo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5MDYxNg==", "bodyText": "Why was this method added?\nAren't we going to remove source-related things out of client SDK?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413590616", "createdAt": "2020-04-23T07:49:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,6 +49,43 @@ public TranslationMessage() {\n         super();\n     }\n \n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyMTc1OQ==", "bodyText": "We don't need to provide such fine-grained interface internally. Suggest transfering component data internally, then getting string message in the last step.\nCache works in this way.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413621759", "createdAt": "2020-04-23T08:34:05Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,58 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());\n+\t\t\tMap<String, String> messages = JSONBundleUtil.getMessages(path);\n+\t    \tcacheItem.addCachedData(messages);\n+\t    \tcacheItem.setTimestamp(System.currentTimeMillis());\n+\t\t} catch (Exception e) {\n+\t\t\t// Do not update cacheItem\n+\t\t}\n+    }\n \n+    @Override\n     public String getString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNDU0MA==", "bodyText": "Should log error when check fails?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r413624540", "createdAt": "2020-04-23T08:37:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FormatUtils.java", "diffHunk": "@@ -30,7 +30,10 @@ public static String format(String pattern, Object... arguments) {\n     }\n \n     public static String format(String pattern, Locale locale, Object... arguments) {\n-        MessageFormat messageFormat = new MessageFormat(pattern, locale);\n-        return messageFormat.format(arguments, new StringBuilder(), new FieldPosition(0)).toString();\n+    \tif (pattern != null && !pattern.isEmpty() && arguments != null && arguments.length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15da01004363a3441944149c106b79908ba4cde6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/15da01004363a3441944149c106b79908ba4cde6", "committedDate": "2020-04-24T08:58:03Z", "message": "Added tests for TranslationMessage.getMessage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631de868cb3b40899ace35017268bdb65b236091", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/631de868cb3b40899ace35017268bdb65b236091", "committedDate": "2020-04-24T09:15:35Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd9adb09499997921630426e9a8327bf615ee50", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ffd9adb09499997921630426e9a8327bf615ee50", "committedDate": "2020-04-24T09:28:59Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c00f7ae3cacc0e17ab59a776b02c3be04a106252", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c00f7ae3cacc0e17ab59a776b02c3be04a106252", "committedDate": "2020-04-24T20:29:27Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0504c49a179166868cbae84874647925d88c2a3", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d0504c49a179166868cbae84874647925d88c2a3", "committedDate": "2020-04-24T22:28:00Z", "message": "Removing comment field because source collection is not supported anymore; cleaning up tests; adding comments for javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79b18d0035a35a23fb26fe76cae4868e848a11b8", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/79b18d0035a35a23fb26fe76cae4868e848a11b8", "committedDate": "2020-04-24T22:44:30Z", "message": "Code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9f5db8cd6110c5b714bc098d54680308c63d9a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ec9f5db8cd6110c5b714bc098d54680308c63d9a", "committedDate": "2020-04-24T22:58:26Z", "message": "Changes from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "committedDate": "2020-04-24T23:25:19Z", "message": "Code clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDUyNTc1", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-400452575", "createdAt": "2020-04-26T03:10:14Z", "commit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoxMDoxNFrOGL9zKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1NDoyM1rOGL-NcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMDA0Mg==", "bodyText": "args is unnecessary.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415200042", "createdAt": "2020-04-26T03:10:14Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNTk0Mw==", "bodyText": "Still need to consider if isPseudo == true?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415205943", "createdAt": "2020-04-26T03:48:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQ4MQ==", "bodyText": "It seems that this line is unnecessary.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206481", "createdAt": "2020-04-26T03:52:26Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjc2OA==", "bodyText": "Need to consider if adding ConstantsKeys.PSEUDOCHAR2?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r415206768", "createdAt": "2020-04-26T03:54:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -48,28 +49,112 @@ public TranslationMessage() {\n         super();\n     }\n \n+    \n+    /**\n+     * Gets the localized message \n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with \n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = getCachedMessage(component, key, locale, args);\n+    \tif (message == null)\n+    \t\treturn key;\n+    \treturn FormatUtils.format(message, locale, args);\t\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale, Object[] args) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The SourceOpt object which gives access to the source messages written by developers\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from SourceOpt</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final SourceOpt sourceOpt,\n+            final String key, final Object... args) {\n+    \tString message = null;\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \tmessage = getCachedMessage(component, key, locale, args);\n+    \t\n+    \tif (source != null) {\n+    \t\tif (message == null || message.isEmpty()) {\n+    \t\t\tmessage = FormatUtils.format(source, sourceOpt.getLocale(), args);\n+    \t\t\tif (VIPCfg.getInstance().isPseudo()) {\n+    \t\t\t\tmessage = ConstantsKeys.PSEUDOCHAR2 + message + ConstantsKeys.PSEUDOCHAR2;\n+    \t\t\t}\n+    \t\t\treturn message;\n+    \t\t} else if (!VIPCfg.getInstance().isPseudo()) {\n+\t\t    \t// If the source message is not equal to the cached source (loaded from remote or from offline bundle file),\n+\t\t    \t// it means that this source message hasn't been collected for localization, so return the source message\n+\t    \t\tMessagesDTO sourceLocaleDTO = new MessagesDTO(component, key, source, sourceOpt.getLocale().toLanguageTag(), this.cfg);\n+\t    \t\tStringService s = new StringService();\n+\t            String cachedSrcLocaleMsg = s.getString(sourceLocaleDTO);\n+\t            if (!source.equals(cachedSrcLocaleMsg) || \n+\t            \t\tcachedSrcLocaleMsg == null || cachedSrcLocaleMsg.isEmpty()) {\n+\t            \treturn FormatUtils.format(source, sourceOpt.getLocale(), args);\n+\t            }  \n+\t\t    \t\n+    \t\t}\n+    \t}\n+    \treturn FormatUtils.format(message, locale, args);\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e44a8c46fd2856ca97cf71158cb9804880e3e17", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4e44a8c46fd2856ca97cf71158cb9804880e3e17", "committedDate": "2020-04-26T22:36:42Z", "message": "Optional SourceOpt in initialization\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "committedDate": "2020-04-27T00:58:16Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406cb2a268cd5e18eee310577137c8f364bc8309", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/406cb2a268cd5e18eee310577137c8f364bc8309", "committedDate": "2020-04-28T03:14:02Z", "message": "Adding comments to code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c80696ab2f0bdfcc80ba268705ed147aed423b07", "committedDate": "2020-04-28T04:33:36Z", "message": "Adding comment for javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTcwODM4", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-401570838", "createdAt": "2020-04-28T07:35:08Z", "commit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzozNTowOFrOGNGuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo0NzozOVrOGNOGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NDc5OQ==", "bodyText": "why need to set it again? the instance of factory already has initialized with the cfg.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416394799", "createdAt": "2020-04-28T07:35:08Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/I18nFactory.java", "diffHunk": "@@ -53,6 +53,7 @@ public static synchronized I18nFactory getInstance(VIPCfg cfg) {\n         if (factory == null) {\n             factory = new I18nFactory(cfg);\n         }\n+        factory.setCfg(cfg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTQ0MQ==", "bodyText": "VIPCfg.java is designed for the configuration file only and Opt classes are called by Service classes, so it's not proper to have it in this file.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401441", "createdAt": "2020-04-28T07:46:18Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -56,7 +62,18 @@\n     private String                     version;\n     private String                     vipServer;\n     private String                     i18nScope     = \"numbers,dates,currencies,plurals,measurements\";\n-\n+    private String\t\t\t\t\t   offlineResourcesBaseUrl;\n+    \n+    /**\n+     * The optional SourceOpt object to access source messages. If SourceOpt is defined, then you can use a source message:\n+     * \ta. as fallback if neither localized message nor default locale message was not retrieved successfully\n+     * \tb. for pseudo-translation\n+     * \tc. if the message hasn't been collected for localization\n+     * e.g. ResourceBundleSrcOpt is the SourceOpt implementation that retrieves source messages from a .properties file. \n+     * If source messages need to come from another location such as a DB, then have another implementation like DBSourceOpt.\n+     */\n+    private SourceOpt\t\t\t\t   srcOpt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMTg3Nw==", "bodyText": "when this function will be called?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416401877", "createdAt": "2020-04-28T07:46:49Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -86,6 +103,10 @@ public static synchronized VIPCfg getInstance() {\n         }\n         return gcInstance;\n     }\n+    \n+    public static synchronized void resetInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwMjY0OA==", "bodyText": "not proper parameter of SourceOpt", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416402648", "createdAt": "2020-04-28T07:48:11Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -120,9 +141,19 @@ public void initialize(String vipServer, String productName, String version) {\n     }\n     \n     /**\n-     * initialize the instance by a properties file\n+     * Initialize VIPCfg instance using a configuration file\n+     * \n+     * @param cfg The configuration file\n+     * @param srcOpt The optional SourceOpt object which gives access to source messages\n+     */\n+    public void initialize(String cfg, SourceOpt srcOpt) throws VIPClientInitException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwNTkyMw==", "bodyText": "i am not sure the remove for source collection codes is clean or not, so please have another PR for it.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416405923", "createdAt": "2020-04-28T07:53:29Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -303,10 +342,12 @@ public void setPseudo(boolean pseudo) {\n         this.pseudo = pseudo;\n     }\n \n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQwODI0NA==", "bodyText": "not proper to config the SourceOpt in VIPcfg.java", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416408244", "createdAt": "2020-04-28T07:57:04Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {\n+\t\tthis.msgOriginsQueue = msgOriginsQueue;\n+\t}\n+\n+\tpublic SourceOpt getSrcOpt() {\n+\t\treturn srcOpt;\n+\t}\n+\n+\tpublic void setSrcOpt(SourceOpt srcOpt) {\n+\t\tthis.srcOpt = srcOpt;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxNTc1MA==", "bodyText": "if the message is not empty, should return it and skip source handling?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416515750", "createdAt": "2020-04-28T10:47:39Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -47,29 +48,104 @@ public void setCfg(final VIPCfg cfg) {\n     public TranslationMessage() {\n         super();\n     }\n-\n+    \n+    /**\n+     * Retrieves the localized message from the cache\n+     * \n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param locale The locale in which the message is requested to be localized\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The message in the requested locale</li> \n+     * \t\t<li>The message in the default locale</li>\n+     * \t\t<li>null</li>\n+     * </ul>\n+     */\n+    private String getCachedMessage(String component, String key, Locale locale) {\n+    \tMessagesDTO dto = new MessagesDTO(component, key, null, locale.toLanguageTag(), this.cfg);\n+    \tStringService s = new StringService();\n+    \treturn s.getString(dto);\n+    }\n+    \n+    \n+    /**\n+     * Retrieves the localized message from the cache, with added functionality such as:\n+     * <ul>\n+     * \t<li>Pseudo-localization</li>\n+     * \t<li>Fallback to source message when message is neither collected nor translated yet</li>\n+     * </ul>\n+     * \n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param sourceOpt The optional SourceOpt object which gives access to source messages\n+     * @param key The key that represents the message\n+     * @param args Values to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list: \n+     * <ul>\n+     * \t\t<li>The pseudo message, if isPseudo is true</li> \n+     * \t\t<li>The message in the requested locale, if available</li>\n+     * \t\t<li>The message in the default locale, if available</li>\n+     * \t\t<li>The message from sourceOpt, if available</li>\n+     * \t\t<li>key</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n+    \tString message = null;\n+    \tSourceOpt sourceOpt = VIPCfg.getInstance().getSrcOpt();\n+    \tString source = (sourceOpt == null) ? null : sourceOpt.getMessage(key);\n+    \t\n+    \t// If sourceOpt is defined, pseudo-translation which uses the source message is supported\n+    \tif (VIPCfg.getInstance().isPseudo() && source != null && sourceOpt.getLocale().equals(locale)) {\n+    \t\treturn ConstantsKeys.PSEUDOCHAR2 + FormatUtils.format(source, sourceOpt.getLocale(), args) + ConstantsKeys.PSEUDOCHAR2;\n+    \t}\n+    \t\n+    \t// Get the message in the target locale\n+    \tmessage = getCachedMessage(component, key, locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTAzNzY4", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-401903768", "createdAt": "2020-04-28T14:38:57Z", "commit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1N1rOGNXZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDozODo1N1rOGNXZXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY2Nzk5OA==", "bodyText": "For the first call, the cacheOfComponent will be empty and then fallback to default value? is this correct?", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416667998", "createdAt": "2020-04-28T14:38:57Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/StringService.java", "diffHunk": "@@ -22,33 +22,59 @@\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.JSONUtils;\n+import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n public class StringService {\n     Logger              logger = LoggerFactory.getLogger(StringService.class);\n     \n     @SuppressWarnings(\"unchecked\")\n     public String getString(MessagesDTO dto) {\n     \tString key = dto.getKey();\n+    \t\n+    \tMessageCacheItem cacheItem = getComponentLocaleCache(dto);\n+    \t\n+    \t// If failed to get MessageCacheItem of a non-default locale, \n+    \t// use MessageCacheItem of the default locale instead. \n+    \tMap<String, String> cacheOfComponent = cacheItem.getCachedData();\t\n+    \tif (cacheOfComponent.isEmpty() && !LocaleUtility.isDefaultLocale(dto.getLocale())) {\n+\t\t\tMessagesDTO defaultLocaleDTO = new MessagesDTO(dto.getComponent(), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTE4NDgw", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-401918480", "createdAt": "2020-04-28T14:53:13Z", "commit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo1MzoxM1rOGNYHCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDo1MzoxM1rOGNYHCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY3OTY5MA==", "bodyText": "I don't see how to use this function 'setMsgOriginsQueue' and how to create the parameter 'msgOriginsQueue'.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r416679690", "createdAt": "2020-04-28T14:53:13Z", "author": {"login": "linr211"}, "path": "src/main/java/com/vmware/vipclient/i18n/VIPCfg.java", "diffHunk": "@@ -393,4 +436,27 @@ public void setCachePath(String cachePath) {\n         this.cachePath = cachePath;\n     }\n \n+\tpublic String getOfflineResourcesBaseUrl() {\n+\t\treturn offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic void setOfflineResourcesBaseUrl(String offlineResourcesBaseUrl) {\n+\t\tthis.offlineResourcesBaseUrl = offlineResourcesBaseUrl;\n+\t}\n+\n+\tpublic List<DataSourceEnum> getMsgOriginsQueue() {\n+\t\treturn msgOriginsQueue;\n+\t}\n+\n+\tpublic void setMsgOriginsQueue(List<DataSourceEnum> msgOriginsQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d111e4404a4f171dcdfb001228afcbad996753", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/79d111e4404a4f171dcdfb001228afcbad996753", "committedDate": "2020-04-28T21:54:07Z", "message": "Cleaning up code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d8d5d7ee9e667c88187761c5332d3c9485cf26", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/24d8d5d7ee9e667c88187761c5332d3c9485cf26", "committedDate": "2020-04-28T22:02:21Z", "message": "Code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "committedDate": "2020-04-28T23:28:49Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369643f588359e1ceb430768ab473566c503da3c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/369643f588359e1ceb430768ab473566c503da3c", "committedDate": "2020-04-29T03:17:37Z", "message": "Removing source message fallback from this PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "committedDate": "2020-04-29T04:09:00Z", "message": "Merge branch 'g11n-java-client' into g11n-java-client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTAzMTA2", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-402503106", "createdAt": "2020-04-29T09:29:59Z", "commit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjg2NjI0", "url": "https://github.com/vmware/singleton/pull/511#pullrequestreview-400686624", "createdAt": "2020-04-27T07:22:02Z", "commit": {"oid": "de5c4ee9c7db7d3f53a979e15fdcae60a28958d4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNDo1MFrOGN4CWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDowNDo1MFrOGN4CWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjc3OA==", "bodyText": "The path should be relative to current working directory instead of Thread.currentThread().getContextClassLoader(), to make it easy to collect source.\nSource collection will make use of config file.", "url": "https://github.com/vmware/singleton/pull/511#discussion_r417202778", "createdAt": "2020-04-29T10:04:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -4,31 +4,49 @@\n  */\n package com.vmware.vipclient.i18n.messages.api.opt.local;\n \n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n import org.json.simple.JSONObject;\n \n+import com.vmware.vipclient.i18n.VIPCfg;\n+import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n+import com.vmware.vipclient.i18n.messages.api.opt.MessageOpt;\n import com.vmware.vipclient.i18n.messages.api.opt.Opt;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n+import com.vmware.vipclient.i18n.util.FormatUtils;\n import com.vmware.vipclient.i18n.util.JSONBundleUtil;\n \n-public class LocalMessagesOpt implements Opt {\n+public class LocalMessagesOpt implements Opt, MessageOpt {\n+\t\n+\tprivate static final String OFFLINE_RESOURCE_PATH = \"{0}/messages_{1}.json\";\n     private MessagesDTO dto;\n \n     public LocalMessagesOpt(MessagesDTO dto) {\n         this.dto = dto;\n     }\n \n+    @Deprecated\n     public JSONObject getComponentMessages() {\n         return JSONBundleUtil.getMessages(dto.getLocale(), dto.getProductID(),\n                 dto.getVersion(), dto.getComponent());\n     }\n-\n-    public String getString() {\n-        JSONObject jo = this.getComponentMessages();\n-        String k = dto.getKey();\n-        String v = \"\";\n-        if (jo != null) {\n-            v = jo.get(k) == null ? \"\" : v;\n-        }\n-        return v;\n+    \n+    @Override\n+    public void getComponentMessages(MessageCacheItem cacheItem) {\n+    \tString resource = VIPCfg.getInstance().getOfflineResourcesBaseUrl();\n+    \tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), dto.getLocale());\n+    \tPath path = Paths.get(resource, filePath);\n+\t\ttry {\n+\t\t\tpath = Paths.get(Thread.currentThread().getContextClassLoader().\n+\t\t\t\t\tgetResource(path.toString()).toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4337, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}