{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzM2Mzk2", "number": 800, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTo1OTo1MFrOEmVdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjoyODoyN1rOEmWFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjMyOTE2OnYy", "diffSide": "RIGHT", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTo1OTo1MFrOHWTLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMTo1OTo1MFrOHWTLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NDg4NQ==", "bodyText": "This one is not used,Remove this line?", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493144885", "createdAt": "2020-09-23T01:59:50Z", "author": {"login": "chaoq0318"}, "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/CLDRUtils.java", "diffHunk": "@@ -19,6 +19,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjM0OTk2OnYy", "diffSide": "RIGHT", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowNDo0MVrOHWTXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowNDo0MVrOHWTXBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NzkxMA==", "bodyText": "Remove this line?", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493147910", "createdAt": "2020-09-23T02:04:41Z", "author": {"login": "chaoq0318"}, "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -9,142 +9,224 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.TimeZone;\n import java.util.TreeMap;\n \n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vmware.i18n.common.Constants;\n import com.vmware.i18n.utils.JSONUtil;\n \n public class CldrTimeZoneUtils {\n-    \n-  \n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n-            String language) {\n-        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n-        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n-        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n-        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n-        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n-        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n-        String regionFormatTypeDaylight = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-daylight\");\n-        String regionFormatTypeStandard = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-standard\");\n-        String fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n-        Iterator<JSONObject> iterator = arry.iterator();\n-        List<CldrMetaZone> metaZones = new ArrayList<>();\n-        while (iterator.hasNext()) {\n-            JSONObject objZone = iterator.next();\n-            String zoneKey = (String) select(objZone, \"mapZone._type\");\n-            String territory = (String) select(objZone, \"mapZone._territory\");\n-            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n-            JSONObject metazoneValue = (JSONObject) select(dates,\n-                    \"timeZoneNames.metazone.\" + metazoneKey);\n-            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n-            String exemplarCity = null;\n-            try {\n-                exemplarCity = (String) select(dates,\n-                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n-\n-            } catch (Exception e) {\n-                // TODO Auto-generated catch block\n-                exemplarCity = \"\";\n-                e.printStackTrace();\n-            }\n-\n-            Map<String, TimeZoneDisplayName> metaZonePerperties = new TreeMap<String, TimeZoneDisplayName>();\n-           \n-            if (metazoneValue == null) {\n-                TimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                String standard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n-                longPerp.setStandard(standard);\n-                metaZonePerperties.put(Constants.LONG, longPerp);\n-            } else {\n-                String longStandard = (String) select(metazoneValue, \"long.standard\");\n-                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n-                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n-                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n-                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n-                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n-                if(longStandard != null || longDaylight != null || longGeneric != null) {\n-                \tTimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                \tlongPerp.setDaylight(longDaylight);\n-                \tlongPerp.setGeneric(longGeneric);\n-                \tlongPerp.setStandard(longStandard);\n-                \tmetaZonePerperties.put(Constants.LONG, longPerp);\n-                }\n-                if(shortStandard != null || shortDaylight != null || shortGeneric != null) {\n-                \tTimeZoneDisplayName shortPerp = new TimeZoneDisplayName();\n-                \tshortPerp.setDaylight(shortDaylight);\n-                \tshortPerp.setGeneric(shortGeneric);\n-                \tshortPerp.setStandard(shortStandard);\n-                \tmetaZonePerperties.put(Constants.SHORT, shortPerp);\n-                }\n-               \n-            }\n-            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, metaZonePerperties,\n-                    territory));\n-        }\n-\n-        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n-                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n-                metaZones);\n-        String result = null;\n-        try {\n-            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n-        } catch (JsonProcessingException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n \n-    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n-            String hourFormat) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static Map<String, JSONArray> findTimezoneKeys(JSONObject metaZonesJson) {\n+\t\tJSONObject timzone = (JSONObject) select(metaZonesJson, \"supplemental.metaZones.metazoneInfo.timezone\");\n+\t\tMap<String, JSONArray> result = new TreeMap<String, JSONArray>();\n+\t\tfor (Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) timzone.entrySet()) {\n+\t\t\tString zoneKeystr1 = entry.getKey();\n+\t\t\tObject obj1 = entry.getValue();\n+\t\t\tif (obj1 instanceof List) {\n+\t\t\t\tJSONArray objArry = (JSONArray) obj1;\n+\t\t\t\tJSONObject usesMetazones = (JSONObject) objArry.get(0);\n+\t\t\t\tJSONObject usesMetazoneObj = (JSONObject) usesMetazones.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\tif (usesMetazoneObj != null) {\n+\t\t\t\t\tresult.put(zoneKeystr1, objArry);\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tJSONObject jsonObj1 = (JSONObject) obj1;\n+\t\t\tfor (Entry<String, Object> entry1 : (Set<Map.Entry<String, Object>>) jsonObj1.entrySet()) {\n+\t\t\t\tString zoneKeystr2 = entry1.getKey();\n+\t\t\t\tObject obj2 = entry1.getValue();\n+\t\t\t\tif (obj2 instanceof List) {\n+\t\t\t\t\tJSONArray objArry2 = (JSONArray) obj2;\n+\t\t\t\t\tJSONObject usesMetazones2 = (JSONObject) objArry2.get(0);\n+\t\t\t\t\tJSONObject usesMetazoneObj2 = (JSONObject) usesMetazones2.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\tif (usesMetazoneObj2 != null) {\n+\t\t\t\t\t\tzoneKeystr2 = zoneKeystr1 + \"/\" + zoneKeystr2;\n+\t\t\t\t\t\tresult.put(zoneKeystr2, objArry2);\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tJSONObject jsonObj2 = (JSONObject) obj2;\n+\t\t\t\tfor (Entry<String, Object> entry2 : (Set<Map.Entry<String, Object>>) jsonObj2.entrySet()) {\n+\t\t\t\t\tString zoneKeystr3 = entry2.getKey();\n+\t\t\t\t\tObject obj3 = entry2.getValue();\n+\t\t\t\t\tif (obj3 instanceof List) {\n+\t\t\t\t\t\tJSONArray objArry3 = (JSONArray) obj3;\n+\t\t\t\t\t\tJSONObject usesMetazones3 = (JSONObject) objArry3.get(0);\n+\t\t\t\t\t\tJSONObject usesMetazoneObj3 = (JSONObject) usesMetazones3\n+\t\t\t\t\t\t\t\t.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\t\tif (usesMetazoneObj3 != null) {\n+\t\t\t\t\t\t\tzoneKeystr3 = zoneKeystr1 + \"/\" + zoneKeystr2 + \"/\" + zoneKeystr3;\n+\t\t\t\t\t\t\tresult.put(zoneKeystr3, objArry3);\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tJSONObject jsonObj3 = (JSONObject) obj3;\n+\t\t\t\t\tfor (Entry<String, Object> entry3 : (Set<Map.Entry<String, Object>>) jsonObj3.entrySet()) {\n+\t\t\t\t\t\tString zoneKeystr4 = entry3.getKey();\n+\t\t\t\t\t\tObject obj4 = entry3.getValue();\n+\t\t\t\t\t\tif (obj4 instanceof List) {\n+\t\t\t\t\t\t\tJSONArray objArry4 = (JSONArray) obj4;\n+\t\t\t\t\t\t\tJSONObject usesMetazones4 = (JSONObject) objArry4.get(0);\n+\t\t\t\t\t\t\tJSONObject usesMetazoneObj4 = (JSONObject) usesMetazones4\n+\t\t\t\t\t\t\t\t\t.get(Constants.TIMEZONENAME_USES_METAZONE);\n+\t\t\t\t\t\t\tif (usesMetazoneObj4 != null) {\n+\t\t\t\t\t\t\t\tzoneKeystr4 = zoneKeystr1 + \"/\" + zoneKeystr2 + \"/\" + zoneKeystr3 + \"/\" + zoneKeystr4;\n+\t\t\t\t\t\t\t\tresult.put(zoneKeystr4, objArry4);\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tSystem.out.println(\"###############there have 5 level timezone key####################\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n \n-        TimeZone timeZone = TimeZone.getTimeZone(targetId);\n-        \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n+\t\t\tString language) {\n+\t\tJSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n+\t\tJSONObject dates = (JSONObject) select(timeZoneNamesPath, \"main.\" + language + \".dates\");\n+\t\tString gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n+\t\tString gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n+\t\tString hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n+\t\tString regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n+\t\tString regionFormatTypeDaylight = (String) select(dates, \"timeZoneNames.regionFormat-type-daylight\");\n+\t\tString regionFormatTypeStandard = (String) select(dates, \"timeZoneNames.regionFormat-type-standard\");\n+\t\tString fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n+\t\t//List<CldrMetaZone> metaZones = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQzMTk5OnYy", "diffSide": "RIGHT", "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjoyODoyN1rOHWUGnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNTo0NzozMVrOHWXROA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MDA5Mw==", "bodyText": "Most of the code here is the same, are there other ways to optimize it? Like iteration.", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493160093", "createdAt": "2020-09-23T02:28:27Z", "author": {"login": "chaoq0318"}, "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -9,142 +9,224 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.TimeZone;\n import java.util.TreeMap;\n \n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vmware.i18n.common.Constants;\n import com.vmware.i18n.utils.JSONUtil;\n \n public class CldrTimeZoneUtils {\n-    \n-  \n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n-            String language) {\n-        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n-        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n-        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n-        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n-        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n-        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n-        String regionFormatTypeDaylight = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-daylight\");\n-        String regionFormatTypeStandard = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-standard\");\n-        String fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n-        Iterator<JSONObject> iterator = arry.iterator();\n-        List<CldrMetaZone> metaZones = new ArrayList<>();\n-        while (iterator.hasNext()) {\n-            JSONObject objZone = iterator.next();\n-            String zoneKey = (String) select(objZone, \"mapZone._type\");\n-            String territory = (String) select(objZone, \"mapZone._territory\");\n-            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n-            JSONObject metazoneValue = (JSONObject) select(dates,\n-                    \"timeZoneNames.metazone.\" + metazoneKey);\n-            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n-            String exemplarCity = null;\n-            try {\n-                exemplarCity = (String) select(dates,\n-                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n-\n-            } catch (Exception e) {\n-                // TODO Auto-generated catch block\n-                exemplarCity = \"\";\n-                e.printStackTrace();\n-            }\n-\n-            Map<String, TimeZoneDisplayName> metaZonePerperties = new TreeMap<String, TimeZoneDisplayName>();\n-           \n-            if (metazoneValue == null) {\n-                TimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                String standard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n-                longPerp.setStandard(standard);\n-                metaZonePerperties.put(Constants.LONG, longPerp);\n-            } else {\n-                String longStandard = (String) select(metazoneValue, \"long.standard\");\n-                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n-                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n-                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n-                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n-                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n-                if(longStandard != null || longDaylight != null || longGeneric != null) {\n-                \tTimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                \tlongPerp.setDaylight(longDaylight);\n-                \tlongPerp.setGeneric(longGeneric);\n-                \tlongPerp.setStandard(longStandard);\n-                \tmetaZonePerperties.put(Constants.LONG, longPerp);\n-                }\n-                if(shortStandard != null || shortDaylight != null || shortGeneric != null) {\n-                \tTimeZoneDisplayName shortPerp = new TimeZoneDisplayName();\n-                \tshortPerp.setDaylight(shortDaylight);\n-                \tshortPerp.setGeneric(shortGeneric);\n-                \tshortPerp.setStandard(shortStandard);\n-                \tmetaZonePerperties.put(Constants.SHORT, shortPerp);\n-                }\n-               \n-            }\n-            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, metaZonePerperties,\n-                    territory));\n-        }\n-\n-        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n-                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n-                metaZones);\n-        String result = null;\n-        try {\n-            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n-        } catch (JsonProcessingException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n \n-    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n-            String hourFormat) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static Map<String, JSONArray> findTimezoneKeys(JSONObject metaZonesJson) {\n+\t\tJSONObject timzone = (JSONObject) select(metaZonesJson, \"supplemental.metaZones.metazoneInfo.timezone\");\n+\t\tMap<String, JSONArray> result = new TreeMap<String, JSONArray>();\n+\t\tfor (Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) timzone.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxMTk2MA==", "bodyText": "this is the business required", "url": "https://github.com/vmware/singleton/pull/800#discussion_r493211960", "createdAt": "2020-09-23T05:47:31Z", "author": {"login": "tigershi"}, "path": "g11n-ws/tools/tool-cldr-extractor/src/main/java/com/vmware/i18n/utils/timezone/CldrTimeZoneUtils.java", "diffHunk": "@@ -9,142 +9,224 @@\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.TimeZone;\n import java.util.TreeMap;\n \n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.vmware.i18n.common.Constants;\n import com.vmware.i18n.utils.JSONUtil;\n \n public class CldrTimeZoneUtils {\n-    \n-  \n-    \n-    @SuppressWarnings(\"unchecked\")\n-    public static String createTimeZoneNameJson(JSONObject metaZonesJson, JSONObject timeZoneNamesPath,\n-            String language) {\n-        JSONArray arry = (JSONArray) select(metaZonesJson, \"supplemental.metaZones.metazones\");\n-        JSONObject dates = (JSONObject) select(timeZoneNamesPath,\"main.\" + language + \".dates\");\n-        String gmtZeroFormat = (String) select(dates, \"timeZoneNames.gmtZeroFormat\");\n-        String gmtFormat = (String) select(dates, \"timeZoneNames.gmtFormat\");\n-        String hourFormat = (String) select(dates, \"timeZoneNames.hourFormat\");\n-        String regionFormat = (String) select(dates, \"timeZoneNames.regionFormat\");\n-        String regionFormatTypeDaylight = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-daylight\");\n-        String regionFormatTypeStandard = (String) select(dates,\n-                \"timeZoneNames.regionFormat-type-standard\");\n-        String fallbackFormat = (String) select(dates, \"timeZoneNames.fallbackFormat\");\n-        Iterator<JSONObject> iterator = arry.iterator();\n-        List<CldrMetaZone> metaZones = new ArrayList<>();\n-        while (iterator.hasNext()) {\n-            JSONObject objZone = iterator.next();\n-            String zoneKey = (String) select(objZone, \"mapZone._type\");\n-            String territory = (String) select(objZone, \"mapZone._territory\");\n-            String metazoneKey = (String) select(objZone, \"mapZone._other\");\n-            JSONObject metazoneValue = (JSONObject) select(dates,\n-                    \"timeZoneNames.metazone.\" + metazoneKey);\n-            String timeZone = findTimeZone(zoneKey, gmtFormat, gmtZeroFormat, hourFormat);\n-            String exemplarCity = null;\n-            try {\n-                exemplarCity = (String) select(dates,\n-                        \"timeZoneNames.zone.\" + zoneKey.replace(\"/\", \".\") + \".exemplarCity\");\n-\n-            } catch (Exception e) {\n-                // TODO Auto-generated catch block\n-                exemplarCity = \"\";\n-                e.printStackTrace();\n-            }\n-\n-            Map<String, TimeZoneDisplayName> metaZonePerperties = new TreeMap<String, TimeZoneDisplayName>();\n-           \n-            if (metazoneValue == null) {\n-                TimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                String standard = MessageFormat.format(regionFormatTypeStandard, exemplarCity);\n-                longPerp.setStandard(standard);\n-                metaZonePerperties.put(Constants.LONG, longPerp);\n-            } else {\n-                String longStandard = (String) select(metazoneValue, \"long.standard\");\n-                String longDaylight = (String) select(metazoneValue, \"long.daylight\");\n-                String longGeneric = (String) select(metazoneValue, \"long.generic\");\n-                String shortStandard = (String) select(metazoneValue, \"short.standard\");\n-                String shortDaylight = (String) select(metazoneValue, \"short.daylight\");\n-                String shortGeneric = (String) select(metazoneValue, \"short.generic\");\n-                if(longStandard != null || longDaylight != null || longGeneric != null) {\n-                \tTimeZoneDisplayName longPerp = new TimeZoneDisplayName();\n-                \tlongPerp.setDaylight(longDaylight);\n-                \tlongPerp.setGeneric(longGeneric);\n-                \tlongPerp.setStandard(longStandard);\n-                \tmetaZonePerperties.put(Constants.LONG, longPerp);\n-                }\n-                if(shortStandard != null || shortDaylight != null || shortGeneric != null) {\n-                \tTimeZoneDisplayName shortPerp = new TimeZoneDisplayName();\n-                \tshortPerp.setDaylight(shortDaylight);\n-                \tshortPerp.setGeneric(shortGeneric);\n-                \tshortPerp.setStandard(shortStandard);\n-                \tmetaZonePerperties.put(Constants.SHORT, shortPerp);\n-                }\n-               \n-            }\n-            metaZones.add(new CldrMetaZone(zoneKey, exemplarCity, metazoneKey, timeZone, metaZonePerperties,\n-                    territory));\n-        }\n-\n-        TimeZoneName zone = new TimeZoneName(language, gmtZeroFormat, gmtFormat, hourFormat,\n-                regionFormat, regionFormatTypeDaylight, regionFormatTypeStandard, fallbackFormat,\n-                metaZones);\n-        String result = null;\n-        try {\n-            result = new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(zone);\n-        } catch (JsonProcessingException e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-        }\n-        return result;\n-    }\n \n-    private static String findTimeZone(String targetId, String gmtFormat, String gmtZeroFormat,\n-            String hourFormat) {\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static Map<String, JSONArray> findTimezoneKeys(JSONObject metaZonesJson) {\n+\t\tJSONObject timzone = (JSONObject) select(metaZonesJson, \"supplemental.metaZones.metazoneInfo.timezone\");\n+\t\tMap<String, JSONArray> result = new TreeMap<String, JSONArray>();\n+\t\tfor (Entry<String, Object> entry : (Set<Map.Entry<String, Object>>) timzone.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MDA5Mw=="}, "originalCommit": {"oid": "f6b15c74bd7480e3f5ae51a2b9fc97beb01f47bc"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4328, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}