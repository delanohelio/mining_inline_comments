{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTcwMjA0", "number": 869, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1MzoyOFrOE4Mqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMjo1Nzo0OVrOE_53Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzYzMjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1MzoyOFrOHx-fFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzoxMzo0OFrOHySimw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NjAzOA==", "bodyText": "Since the offline bundle's root path can be configed freely in config file, so the path of shared lib and that of main application maybe different, then we can't use 'VIPCfg.getInstance().getOfflineResourcesBaseUrl()' here due to it only represents main application's bundle path, or when this code is called by shared lib, the path will be null.\nBesides, we also need to consider when the shared lib's bundle path is the same with that of main application's, how to differentiate them.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522166038", "createdAt": "2020-11-12T14:53:28Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -48,19 +49,19 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\ttry {\n \t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n \t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1MDQxMg==", "bodyText": "Hi Huihui, I think you are talking about a different issue/PR which will be resolved separately.\nissue:#755\nPR: #858\nThere is no change in this PR regarding configuring the offlineResourceBaseURL. This bug/PR still assumes that offlineResourceBaseURL is configured in the main VIPCfg only, and is globally shared across main and \"sub\" Instances. In other words, the issue above is not related to this.\nThe bug also exists only when executing the main app outside of the executable jar (like in an IDE). This is because if the single configured offlineResourceBaseURL folder exists in both main and shared lib, it loads the first offlineResourceBaseURL folder that it finds, which is in the main app's file system. It ignores the jar filers. That is how ClassLoader.getResource works.  However. if the main app is packaged as a jar, it combines its own files and shared lib jars' files into a single file system. Hence, the offlineResourceBaseURL folder will contain components from main app and shared libs, if present.\nIn the sample-app-with-shared-lib, the offlineResourceBaseURL folder inside the subinstance (shared lib) jar is not read when my IDE's JVM picks only the offlineResourceBaseURL in the main app. The expected behavior is that it will also load the bundles inside the offlineResourceBaseURL folder in the shared library jars, just like when the main app is packaged as an executable jar. In other words, if the the shared library jar carries the translations inside it, the translation should be loaded by the root application as well.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522250412", "createdAt": "2020-11-12T16:41:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -48,19 +49,19 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\ttry {\n \t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n \t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NjAzOA=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5NDYxOQ==", "bodyText": "On a side note that is not related to the scope of this PR, we will resolve your concern about being able to configure separate VIPCfg properties per product/shared lib in issue:#755. You are headed towards the right direction though. VIPCfg.getInstance().. is not correctly used. Once we remove this singleton pattern implementation through PR: #858, instead of VIPCfg.getInstance(), we will start using VIPCfgFactory.getCfg(productname) for product-specific cases such as L3, and VIPCfgFactory.getCfg() for non-product-specific cases such as for patterns. See the samples in the PR and my reply to your comments there for your reference. Again, this PR is not related to that.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522494619", "createdAt": "2020-11-12T23:13:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -48,19 +49,19 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\ttry {\n \t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n \t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NjAzOA=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzcxMTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTowOTo1NFrOHx_RBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNToxNjo0OVrOH_BNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ==", "bodyText": "Here should only get the supported locales of main application, right? Because supported locales should oriented on main application.\nIf yes, when the bundle's root path of shared lib and that of main application's is the same and their supported locales are different, these code will merge shared lib's supported locale and main application's, which lead to when 'getAllComponentTranslation' method in ProductService is executed, there will be some wrong locale&component combinations.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522178821", "createdAt": "2020-11-12T15:09:54Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ1NzE1MA==", "bodyText": "You are right! Even before this PR, getSupportedLocales already collects all locales under all components in the  main app's offlineResourceBaseURL. A wrong locale&component combination may already happen even without a shared lib. For instance, 2 components in the main app may have different sets of bundles at some point (e.g. component A's translations are ready but component B's translations are not ready yet), so they have different sets of supported locales. You are right, this gives a false positive for some combinations. which results to trying to fetch the bundle even if the combination does not exist. Wrong behavior, but not very harmful. We have been ignoring this issue even before this PR.\nNonetheless, we should improve this behavior, but we have to do it separately from this PR as the solution should apply to both main app and shared libs. I have filed #870 to track this. In my opinion, getSupportedLocales should be fetched and cached per product component, which will resolve the issue for both the main app and shared libs.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522457150", "createdAt": "2020-11-12T22:09:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNTQwMw==", "bodyText": "I think 2 components in the main app have different sets of bundles can only happen at development stage, rarely happen at production stage, so wrong locale&component combination rarely happen at production stage, too. So before this PR we can ignore the issue.\nBut after this PR, wrong locale&component combination may happen at production stage. More important, at runtime there will be unnecessary fetch from either Singleton service or local bundle for main app's unsupported locales when shared lib's supported locales are listed as main app's. So there may be necessary to improve this.\nFor the resolution I think there maybe no necessary to getSupportedLocales per product component, add {product}/{version} floder in local bundle path is enough, how do you think?\nBesides, the title of issue #870 had better changed to the problem need to be resolved instead of specific resolution. So suggest the title 'Supported locales should use main app's'.\nAnd other issues had better be filed like this, too.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r527525403", "createdAt": "2020-11-20T08:36:58Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYyOTg1MQ==", "bodyText": "I agree, the correct solution should be getting supported locales by product and version, not get them from all product-versions.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534629851", "createdAt": "2020-12-03T02:55:54Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgyOTAwNw==", "bodyText": "@huihuiw01 , No we cannot ignore the issue for now. It could happen that there are multiple nested jar shared libraries (hence, many URIs for the offline resource bundle location) for the SAME product-version, but different component-locales set in each shared library. This happens in production like in Atlas. For example, the main app only has component1 in the offline location, but has a nested shared library jar that has component2 in the same offline location inside the jar (again, same product version). Without this PR, it will only see component1. It will miss component2 entirely, so all messages in component2 will not be localized.\nThe issue of having some wrong locale-component combination already exists even before this PR. See sample-app-with-shared-lib as an evidence. The application is not packaged as a nested jar (a fat jar instead), and the offline bundle location path is same in the main app (sample-app-with-shared-lib) and in the shared library (sample-shared-lib). Even if product-versions are different (JavaSample 1.0.0 vs. SharedProduct 1.0.0), all of the component folders of both products end up in the same offline bundle location folder in the fat  jar.. causing the incorrect combinations that you are referring to. This is an existing bug tracked in 870. This PR did not cause the issue. It has been there already.\nAgain, let's resolve the issue of getting supported locales and components by product-version (or propose any other solution)  in #870. This is less harmful because incorrect component-locale combinations will only result to a false fetch, which should only affect performance but barely noticeable for now.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r535829007", "createdAt": "2020-12-04T04:33:35Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg0MjIwMg==", "bodyText": "I agree, the correct solution should be getting supported locales by product and version, not get them from all product-versions.\n\nYes, I agree. We will work on that separately.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r535842202", "createdAt": "2020-12-04T05:16:49Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODgyMQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mzc2NTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyMTozNVrOHx_zqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjozMTo1MVrOH3W-eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzY5MQ==", "bodyText": "Here should get the merged result of shared lib's component list and main application's so that all of them can be cached at main application start up, right?\nBut when the bundle's root path of shared lib and that of main application's is different, you can only get main application's component list.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522187691", "createdAt": "2020-11-12T15:21:35Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3NzEyOA==", "bodyText": "You are right again! This is exactly why we should be able to configure a different offlineResourceBaseURL (and other properties.. in short a different VIPCfg instance) for shared libs. The app should not be forced to use the main app's offlineResourceBaseUR (and other properties) for shared libs. This problem is tracked in issue: #755 as mentioned above.\nAgain, separate issue so please review this PR only in the existing premise: Main app's VIPCfg.offlineResourceBaseURL is used in main app and in all shared config at the moment.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r522477128", "createdAt": "2020-11-12T22:39:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzY5MQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MTYyNg==", "bodyText": "But I think issue #755 only track the problem that main app and shared libs are able to use different config.\nThe problem still need to be resolved here is: get the merged result of shared lib's component list and main application's. This problem can be resolved either in PR #858 or in a new PR.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r527581626", "createdAt": "2020-11-20T10:01:49Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzY5MQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMDE3MA==", "bodyText": "You are right. Thats still needs to be resolved after 858. PR 858 is the first step towards that.\nFor this PR, assume that the main and shared lib's product name and offline bundle paths are exactly the same. There is no problem in a fat executable jar, but there is a problem when using IDE (or whenever the shared lib is a nested jar).", "url": "https://github.com/vmware/singleton/pull/869#discussion_r527810170", "createdAt": "2020-11-20T16:31:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzY5MQ=="}, "originalCommit": {"oid": "e53e1c149a8b2b03efcc8f9459ac409da4b0e83a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk1NDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDo1MzoyNFrOH8nG3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxNDowNVrOH9it_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxNzM0Mw==", "bodyText": "Both if block and else block call 'getSupportedLocales(path, supportedLocales);' , so it's better extract this line out of if-else block.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r533317343", "createdAt": "2020-12-01T10:53:24Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NDAxMg==", "bodyText": "I had the same thought even before this PR. I tried to extract it, but I got a FileSystemNotFound exception from the first block. getSupportedLocales must be inside the try block. After the try block, the file system had been closed already which causes the exception.\nFor any change or improvement related to this, it's best to do it in a separate PR. Let's stick to the scope of this PR and not do more changes than necessary.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534294012", "createdAt": "2020-12-02T16:14:05Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxNzM0Mw=="}, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTk2NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDo1NjowM1rOH8nNYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoxNzoxMlrOH9i3pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTAxMQ==", "bodyText": "Both if block and else block call 'getComponents(path, components);' , so it's better extract this line out of if-else block.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r533319011", "createdAt": "2020-12-01T10:56:03Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI5NjQ4Ng==", "bodyText": "Same reply as above. This was not changed in this PR.", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534296486", "createdAt": "2020-12-02T16:17:12Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -64,20 +63,18 @@ public void getSupportedLocales(MessageCacheItem cacheItem) {\n     public List<String> getComponents() {\n         List<String> components = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getComponents(path, components);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getComponents(path, components);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTAxMQ=="}, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDUxNDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTozMzo1N1rOH9SCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTozMzo1N1rOH9SCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAyMDcyOA==", "bodyText": "How about this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static List<URI> findUris(Path path) {\n          \n          \n            \n                public static List<URI> getAllResources(Path path) {", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534020728", "createdAt": "2020-12-02T09:33:57Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -88,4 +87,17 @@ public static JSONObject readLocalJsonFile(String filePath) {\n         return jsonObj;\n     }\n \n+    public static List<URI> findUris(Path path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDYwNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo1NDo0N1rOH9S7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo1NDo0N1rOH9S7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTI4NA==", "bodyText": "How about this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            URL url = urls.nextElement();\n          \n          \n            \n                            uris.add(url.toURI());\n          \n          \n            \n                            uris.add(urls.nextElement().toURI());", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534035284", "createdAt": "2020-12-02T09:54:47Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/FileUtil.java", "diffHunk": "@@ -88,4 +87,17 @@ public static JSONObject readLocalJsonFile(String filePath) {\n         return jsonObj;\n     }\n \n+    public static List<URI> findUris(Path path) {\n+        List<URI> uris = new LinkedList<>();\n+        try {\n+            Enumeration<URL> urls = Thread.currentThread().getContextClassLoader().getResources(path.toString());\n+            while(urls.hasMoreElements()) {\n+                URL url = urls.nextElement();\n+                uris.add(url.toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDQzNzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMjo1Nzo0OVrOH93Qhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNDo0NDoxNlrOH_AmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMDUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n          \n          \n            \n                                    path = fileSystem.getPath(Paths.get(uri).toString());\n          \n          \n            \n                                    getSupportedLocales(path, supportedLocales);\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                path = Paths.get(uri);\n          \n          \n            \n                                getSupportedLocales(path, supportedLocales);\n          \n          \n            \n                            }\n          \n          \n            \n                                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n          \n          \n            \n                                    path = fileSystem.getPath(Paths.get(uri).toString());\n          \n          \n            \n                                }\n          \n          \n            \n                            } else {\n          \n          \n            \n                                path = Paths.get(uri);\n          \n          \n            \n                            }\n          \n          \n            \n                            getSupportedLocales(path, supportedLocales);", "url": "https://github.com/vmware/singleton/pull/869#discussion_r534630535", "createdAt": "2020-12-03T02:57:49Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzMjA4OQ==", "bodyText": "Did the same mistake which causes a FileSystemNotFoundException. Because line 43 opens the file system, getSupportedLocales must be executed inside the try, before the file system closes.\nPasting my reply to Huihui above which you may have missed:\n_\"I had the same thought even before this PR. I tried to extract it, but I got a FileSystemNotFound exception from the first block. getSupportedLocales must be inside the try block. After the try block, the file system had been closed already which causes the exception.\nFor any change or improvement related to this, it's best to do it in a separate PR. Let's stick to the scope of this PR and not do more changes than necessary.\"_", "url": "https://github.com/vmware/singleton/pull/869#discussion_r535832089", "createdAt": "2020-12-04T04:44:16Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -33,22 +34,20 @@ public LocalProductOpt(BaseDTO dto) {\n     }\n \n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n-        List<String> supportedLocales = new ArrayList<String>();\n+        List<String> supportedLocales = new ArrayList<>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n-\n-            URI uri = Thread.currentThread().getContextClassLoader().\n-                    getResource(path.toString()).toURI();\n-\n-            if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n+            List<URI> uris = FileUtil.findUris(path);\n+            for (URI uri : uris) {\n+                if (uri.getScheme().equals(\"jar\")) {\n+                    try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n+                        path = fileSystem.getPath(Paths.get(uri).toString());\n+                        getSupportedLocales(path, supportedLocales);\n+                    }\n+                } else {\n+                    path = Paths.get(uri);\n                     getSupportedLocales(path, supportedLocales);\n                 }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzMDUzNQ=="}, "originalCommit": {"oid": "e486164a8376b193498e1c6ea0c72da3a2b37a24"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4375, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}