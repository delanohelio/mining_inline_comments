{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTk2MTEx", "number": 878, "title": "Non-blocking getSupportedLocales + Use getResourceAsStream to read resource bundle", "bodyText": "For the reviewers:\nIssues described in #882:\n\n\nThe java client library tries to walk the file system when getting the list of supported locales. This fails when the file system is in a nested jar. Such is the case in Spring boot applications where the offline bundles directory may exist inside dependency jars which under BOOT-INV/libs. This is related to #877\n\n\nThe java client library tries to access the file system when reading the bundle (code is in LocalMessagesOpt.getComponentMessages). This fails when the file system is in a nested jar.\n\n\nAll files changed in this PR are for # 1 above, except for change sin LocalMessagesOpt.java which is for # 2.", "createdAt": "2020-11-17T17:55:34Z", "url": "https://github.com/vmware/singleton/pull/878", "merged": true, "mergeCommit": {"oid": "8d7af99406fccd673f1fe205b48a33eae19f3af7"}, "closed": true, "closedAt": "2020-12-07T01:11:09Z", "author": {"login": "jessiejuachon"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdddQLAgH2gAyNTIyNTk2MTExOjVmNDIwOTlhYzEyZjQzNTljMjQzYWQ0MDVlZmI4MTRmM2ZkOTQ4MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjqrF-AFqTU0NTc3MTM1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5f42099ac12f4359c243ad405efb814f3fd94804", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5f42099ac12f4359c243ad405efb814f3fd94804", "committedDate": "2020-11-17T17:45:57Z", "message": "Non-blocking getSupportedLocales"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a207056bed88cde53601edd708ae91fd6d47af9f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a207056bed88cde53601edd708ae91fd6d47af9f", "committedDate": "2020-11-17T22:13:49Z", "message": "fixing failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d291d7a04e00bd56a78149615e5bf1c6dffe95a6", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d291d7a04e00bd56a78149615e5bf1c6dffe95a6", "committedDate": "2020-11-17T22:17:05Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "134d23d8c2685edbe4b82d59739870e7b021860e", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/134d23d8c2685edbe4b82d59739870e7b021860e", "committedDate": "2020-11-18T00:23:58Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a75c69b1b1a255519ec8e06ff11bcaef021229e2", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a75c69b1b1a255519ec8e06ff11bcaef021229e2", "committedDate": "2020-11-18T01:06:44Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5850ad5190a38f0c3aee4b94602d2a5384aa77", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/de5850ad5190a38f0c3aee4b94602d2a5384aa77", "committedDate": "2020-11-18T01:36:11Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c67db91591df11e8cd642210d94019fd5de56c7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/1c67db91591df11e8cd642210d94019fd5de56c7", "committedDate": "2020-11-18T01:38:11Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b27c305b8851a72336741b0c4d9081c6644121", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d7b27c305b8851a72336741b0c4d9081c6644121", "committedDate": "2020-11-18T21:02:22Z", "message": "Refresh cache of supported locales in a separate thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b5238462e0043a61fd106d44e2f2acf4d6f476", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a9b5238462e0043a61fd106d44e2f2acf4d6f476", "committedDate": "2020-11-18T21:15:59Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1dca831225246a33e4a94fd746b2a2b0864a70c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/e1dca831225246a33e4a94fd746b2a2b0864a70c", "committedDate": "2020-11-18T21:17:29Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f05a14b8eec7eed046f2243fee5da8e6c3c61c1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7f05a14b8eec7eed046f2243fee5da8e6c3c61c1", "committedDate": "2020-11-19T01:00:11Z", "message": "fixing sonarcube bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120e4d9475e2224189bbef81203f278c460d96c1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/120e4d9475e2224189bbef81203f278c460d96c1", "committedDate": "2020-11-19T01:08:47Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b385da498cfb7edd56e53c4fd661616a900391", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c0b385da498cfb7edd56e53c4fd661616a900391", "committedDate": "2020-11-19T03:32:39Z", "message": "sonarcube bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12cc751f788b20f5b77a031742467e37c5b0e0e5", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/12cc751f788b20f5b77a031742467e37c5b0e0e5", "committedDate": "2020-11-22T18:26:38Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0dae5dcca2b92157818d1f8d34416d787cabcd3", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d0dae5dcca2b92157818d1f8d34416d787cabcd3", "committedDate": "2020-11-22T19:58:16Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b86d3374fa641cfb1c43436bbebdc13509ada1db", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b86d3374fa641cfb1c43436bbebdc13509ada1db", "committedDate": "2020-11-30T21:52:52Z", "message": "Use getResourceAsStream to read bundle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "117b8b2131600336b0563874390108697b98444a", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/117b8b2131600336b0563874390108697b98444a", "committedDate": "2020-12-01T22:40:26Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7ae72d527ef95c5aefab314b1235b1cd75267b6e", "committedDate": "2020-12-02T17:34:33Z", "message": "adding else block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODQ2MDIy", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-542846022", "createdAt": "2020-12-02T13:43:05Z", "commit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MzowNVrOH9bfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MzowNVrOH9bfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ==", "bodyText": "Why does it need this class and make it singleton?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534175491", "createdAt": "2020-12-02T13:43:05Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDM3OTQ3", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-543437947", "createdAt": "2020-12-03T04:38:45Z", "commit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozODo0NVrOH95N3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjozOTo0OFrOH997sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MjYyMw==", "bodyText": "Is it better rename parameter 'withCacheRefresh' to 'refreshCache'?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534662623", "createdAt": "2020-12-03T04:38:45Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -105,10 +122,13 @@ public ProductService(BaseDTO dto) {\n         }\n     }\n \n-    public boolean isSupportedLocale(Locale locale) {\n-        return getSupportedLanguageTags().contains(LocaleUtility.fmtToMappedLocale(locale).toLanguageTag());\n+    public boolean isSupportedLocale(boolean withCacheRefresh, Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMzMyNA==", "bodyText": "I think before starting this task you need check if the supported locales list in cache by calling 'new ProductService(dto).getSupportedLocales(false)', if not in cache you need start this task, otherwise you needn't refresh cache.\nWithout the check, each call of 'getMessage' method will trigger the cache refresh of supported locale list actually which is needn't.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534703324", "createdAt": "2020-12-03T06:01:06Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +130,42 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwNDU3NA==", "bodyText": "What's the purpose of this synchronized block?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534704574", "createdAt": "2020-12-03T06:02:32Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -35,27 +35,28 @@ public LocalProductOpt(BaseDTO dto) {\n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n         List<String> supportedLocales = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n \n             URI uri = Thread.currentThread().getContextClassLoader().\n                     getResource(path.toString()).toURI();\n \n             if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n-                    getSupportedLocales(path, supportedLocales);\n+                synchronized (LocalFileSystem.getInstance()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczOTg5MA==", "bodyText": "It will continue execute the following code after this line finish.\nSo either add return statement after this line or put it into if-else block.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534739890", "createdAt": "2020-12-03T06:39:48Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,8 +50,11 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n+\t\tif (!proceed(dataSource))\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource in the queue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDM1NjEy", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-543435612", "createdAt": "2020-12-03T04:31:46Z", "commit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMTo0NlrOH95FuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoyMzo0MlrOH-Bh3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDUzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t * Ths could happen if:\n          \n          \n            \n            \t\t\t * This could happen if:", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534660537", "createdAt": "2020-12-03T04:31:46Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();\n+\t\t\tJSONParser jsonParser = new JSONParser();\n+\t\t\tJSONObject jsonObject = (JSONObject) jsonParser.parse(new InputStreamReader(is, \"UTF-8\"));\n+\t\t\tMap<String, String> messages = (JSONObject) jsonObject.get(\"messages\");\n \t\t\tcacheItem.setCacheItem(messages, null, System.currentTimeMillis(), null);\n \t\t} catch (Exception e) {\n \t\t\tlogger.debug(e.getMessage());\n-\t\t\t// Do not update cacheItem\n \t\t}\n     }\n-    \n-    private List<Locale> getSupportedLocales() {\n-\t\tProductService ps = new ProductService(dto);\n-\t\tSet<String> supportedLanguages = ps.getSupportedLanguageTags(DataSourceEnum.Bundle);\n-        logger.debug(\"supported languages: [{}]\", supportedLanguages.toString());\n-    \tList<Locale> supportedLocales = new LinkedList<Locale>();\n-    \tfor (String languageTag : supportedLanguages) {\n-    \t\tsupportedLocales.add(Locale.forLanguageTag(languageTag));\n-    \t}\n-    \treturn supportedLocales;\n-    }\n+\n+\tprivate InputStream getInputStream() {\n+\t\tString locale = LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag();\n+\t\twhile (true) {\n+\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), locale);\n+\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n+\t\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());\n+\t\t\tif (is != null)\n+\t\t\t\treturn is;\n+\t\t\t/*\n+\t\t\t * If valid URI is not found, find the next best matching locale available in the file system\n+\t\t\t * Ths could happen if:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTczMg==", "bodyText": "No need to call \"toString()\" method as formatting and string conversion is done by the Formatter.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534771732", "createdAt": "2020-12-03T07:05:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,44 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) {\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n+\n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<Locale> supportedLocales = ps.getSupportedLocales(false, dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NDcwNA==", "bodyText": "I think it's not good to bring so many parameters to method, and so many similar methods. This makes it difficult to read and hard to maintain.\nPlease improve the design.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534774704", "createdAt": "2020-12-03T07:07:36Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5ODgxNA==", "bodyText": "It's not good to use this method everywhere. We should use only one type - set or list - internally.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534798814", "createdAt": "2020-12-03T07:23:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjY5NzQ0", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-543669744", "createdAt": "2020-12-03T07:29:09Z", "commit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoyOTowOVrOH-CGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNDo0M1rOH-FvXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgwODIwNw==", "bodyText": "What if refreshing cache fails?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534808207", "createdAt": "2020-12-03T07:29:09Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        if (withCacheRefresh)\n+            return getSupportedLanguageTags(dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxNzg4NA==", "bodyText": "I think parameter 'withCacheRefresh' makes no sense because cache must be populated before judgement.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534817884", "createdAt": "2020-12-03T07:34:58Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -105,10 +122,13 @@ public ProductService(BaseDTO dto) {\n         }\n     }\n \n-    public boolean isSupportedLocale(Locale locale) {\n-        return getSupportedLanguageTags().contains(LocaleUtility.fmtToMappedLocale(locale).toLanguageTag());\n+    public boolean isSupportedLocale(boolean withCacheRefresh, Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNTg4OQ==", "bodyText": "In this code lines, getting supported locales from cache are executed twice. It's redundant and inefficient. Please improve the design.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534835889", "createdAt": "2020-12-03T07:46:32Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,44 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) {\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n+\n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<Locale> supportedLocales = ps.getSupportedLocales(false, dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales.toString());\n \n+\t\treturn (supportedLocales.isEmpty() ||\n+\t\t\t\tps.isSupportedLocale(false, dataSource, Locale.forLanguageTag(dto.getLocale())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NTk2OQ==", "bodyText": "By our design, the refreshment should be done at each time getting supported locales rather than here.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534865969", "createdAt": "2020-12-03T08:03:40Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +131,43 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.error(\"Failed to refresh list of supported locales.\");\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw==", "bodyText": "We should cache this instead of merging every time.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534867807", "createdAt": "2020-12-03T08:04:43Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c99efe185ef61b7a074b8cbc00a24463ea7a800", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5c99efe185ef61b7a074b8cbc00a24463ea7a800", "committedDate": "2020-12-03T17:12:28Z", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e58155aebeaaf97b7cff398f9e22141c6713721d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/e58155aebeaaf97b7cff398f9e22141c6713721d", "committedDate": "2020-12-03T21:38:26Z", "message": "changes after code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebb186d42c08a8a2171d8fa200cfcec0fecbce1", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/cebb186d42c08a8a2171d8fa200cfcec0fecbce1", "committedDate": "2020-12-03T21:46:36Z", "message": "rename parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eb761b82c7b52c06668720213f915fe63cdf7f7", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4eb761b82c7b52c06668720213f915fe63cdf7f7", "committedDate": "2020-12-03T22:59:06Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fa2837842baae6e1297b5411c1fd8dec6954a72", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/9fa2837842baae6e1297b5411c1fd8dec6954a72", "committedDate": "2020-12-03T22:59:54Z", "message": "Merge branch 'non-block-cache' of github.com:jessiejuachon/singleton into non-block-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6559b36f1a8c94dddb9b52c38ac025fb6b3ea88", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d6559b36f1a8c94dddb9b52c38ac025fb6b3ea88", "committedDate": "2020-12-04T03:38:15Z", "message": "thread safety"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ab40c53fea011ae2e894a5c8e511a73a49be3cf", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5ab40c53fea011ae2e894a5c8e511a73a49be3cf", "committedDate": "2020-12-04T03:52:03Z", "message": "adding comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bc13855d88e03b1890b8300d6b065b38a8b589", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/26bc13855d88e03b1890b8300d6b065b38a8b589", "committedDate": "2020-12-04T03:56:58Z", "message": "space clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/f47feea51f629fd43fce5d37db886abd60ba831f", "committedDate": "2020-12-04T05:58:28Z", "message": "thread-safe file system access"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzA5NDUy", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-544709452", "createdAt": "2020-12-04T07:24:13Z", "commit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyNDoxNFrOH_EAwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxMzo1NFrOH_HrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4ODA2Ng==", "bodyText": "I think the flow should as below:\nGet supported locales from product service. Returning null if cache is empty.  The product service will refresh cache.\nIf supported locales isn't empty, then pick up locale from them.\nCurrent implementation is a little messy, hard to read and maintain.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535888066", "createdAt": "2020-12-04T07:24:14Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());\n+\n+\t\tProductService ps = new ProductService(dto);\n+\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\tps.refreshSupportedLocalesTask();\n+\n+\t\t//Match against list of supported locales that is already in the cache\n+\t\tSet<Locale> supportedLocales = LocaleUtility.langTagtoLocaleSet(ps.getCachedSupportedLocales());\n+\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(supportedLocales, Locale.forLanguageTag(dto.getLocale()));\n+\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\tdto.setLocale(matchedLocale.toLanguageTag());\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5Njc4OQ==", "bodyText": "The interfaces should be consistent.\nDo you plan to create such interface for component module as getCachedMessages or create interface getCacheComponents for component list?\nIf cache is empty, just populate the cache. if not, then return cache data and refresh cache if it's expired.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535896789", "createdAt": "2020-12-04T07:43:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzIyOQ==", "bodyText": "It seems a new update process can be started after previous one has started successfully. right?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535917229", "createdAt": "2020-12-04T08:23:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODEzOA==", "bodyText": "Is this too coarse-grained, there is only one level3 cache globally. Does this mean that only one cache item can be created at the same time?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535918138", "createdAt": "2020-12-04T08:24:59Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.\n+                    if (cacheItem.isExpired())\n+                        refreshLocalesCacheItemTask(cacheItem, dataSource);\n+                }\n+            }\n             return cacheItem.getCachedData().keySet();\n         } else {\n-            cacheItem = createLocalesCacheItem(dataSource);\n+            // Allow only 1 thread to create the cacheItem.\n+            synchronized (TranslationCacheManager.getInstance().getCache(VIPCfg.CACHE_L3)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMDAwNg==", "bodyText": "It's better to create 2 method, one is getSupportedLocales and another is refreshSupportedLocales to reduct ambiguity.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535920006", "createdAt": "2020-12-04T08:28:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNzc2Mw==", "bodyText": "Why proceed if pseudo is true?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535937763", "createdAt": "2020-12-04T08:57:17Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,47 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) { //Requested locale is not supported, does not match any supported locales\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n \n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<String> supportedLocales = ps.getCachedSupportedLocales(dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales);\n+\n+\t\t/*\n+\t\t * Do not block refreshCacheItem if set of supported locales is not in cache (i.e. supportedLocales.isEmpty()).\n+\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t */\n+\t\treturn (supportedLocales.isEmpty() || supportedLocales.contains(dto.getLocale()) || VIPCfg.getInstance().isPseudo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODkwOA==", "bodyText": "The only reason we need this interface is that supported locales isn't cached. Suggest cache it when initialization. Then all the logic will be same as other features.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535938908", "createdAt": "2020-12-04T08:58:58Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODA0OA==", "bodyText": "If this is necessary. Suggest to do this when create dto object.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535948048", "createdAt": "2020-12-04T09:13:54Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDc2NDQ0", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-545076444", "createdAt": "2020-12-04T15:49:31Z", "commit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo0OTozMVrOH_Ww0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowODoxM1rOH_XjLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTI4MA==", "bodyText": "Actually when locale list is in cache, you won't populate it, so here 'refreshSupportedLocalesTask' may not appropriate, how about 'getSupportedLocalesTask'?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536195280", "createdAt": "2020-12-04T15:49:31Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -143,13 +175,16 @@ private MessageCacheItem createLocalesCacheItem(DataSourceEnum dataSource) {\n         }\n         return null;\n     }\n-    private Set<Locale> langTagtoLocaleSet (Set<String> languageTags) {\n-        Set<Locale> locales = new HashSet<>();\n-        if (languageTags != null) {\n-            for (String languageTag : languageTags) {\n-                locales.add(Locale.forLanguageTag(languageTag));\n+\n+    public void refreshSupportedLocalesTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODE3Mw==", "bodyText": "There are 3 'getSupportedLocales' methods and 2 'getCachedSupportedLocales' methods, and they call each other, and seems 2 'getCachedSupportedLocales' are not the relation of overload, it's a little difficult to understand the relationship of these methods, it's better optimize the methods' name.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536208173", "createdAt": "2020-12-04T16:08:13Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f11aa817ce79100f273f64a1f62e42fa4546f9e", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8f11aa817ce79100f273f64a1f62e42fa4546f9e", "committedDate": "2020-12-04T21:40:42Z", "message": "optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b6e2f49a6b61b1b693df24c5e2e9f4eb462023", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/84b6e2f49a6b61b1b693df24c5e2e9f4eb462023", "committedDate": "2020-12-04T22:49:18Z", "message": "Merge remote-tracking branch 'upstream/g11n-java-client' into non-block-cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODYyMjcy", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-544862272", "createdAt": "2020-12-04T11:05:56Z", "commit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNTo1N1rOH_MCfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxMzo1NlrOH_6neA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxOTU4Mw==", "bodyText": "close the stream?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536019583", "createdAt": "2020-12-04T11:05:57Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3MjM2OQ==", "bodyText": "As huihui said, the additional footprint isn't much because they are just a very few strings. But will improve performance greatly. Don't need to combine two set anymore.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536772369", "createdAt": "2020-12-05T13:51:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MDYyNQ==", "bodyText": "It seems you created so much code just to work around an extreme situation, getSupportedLocales keeps fail. In this case,  we should remove test supported locales because stability takes precendence over performance. Let users take charge of it. Get the supported locale before getting translation or bear the delay of unsupported locale. In fact this logic has been there before for a long time.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536780625", "createdAt": "2020-12-05T14:09:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5Njc4OQ=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjcxMg==", "bodyText": "according OO thinking, the dataSource should be responsible of its methods instead of product service.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536782712", "createdAt": "2020-12-05T14:13:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODE3Mw=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTkxMzMy", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-545591332", "createdAt": "2020-12-05T14:30:00Z", "commit": {"oid": "84b6e2f49a6b61b1b693df24c5e2e9f4eb462023"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozMDowMFrOH_7EAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozMDowMFrOH_7EAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDAxOA==", "bodyText": "Why change FileSystem to getResourceAsStream?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536790018", "createdAt": "2020-12-05T14:30:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();\n+\t\t\tJSONParser jsonParser = new JSONParser();\n+\t\t\tJSONObject jsonObject = (JSONObject) jsonParser.parse(new InputStreamReader(is, \"UTF-8\"));\n+\t\t\tMap<String, String> messages = (JSONObject) jsonObject.get(\"messages\");\n \t\t\tcacheItem.setCacheItem(messages, null, System.currentTimeMillis(), null);\n \t\t} catch (Exception e) {\n \t\t\tlogger.debug(e.getMessage());\n-\t\t\t// Do not update cacheItem\n \t\t}\n     }\n-    \n-    private List<Locale> getSupportedLocales() {\n-\t\tProductService ps = new ProductService(dto);\n-\t\tSet<String> supportedLanguages = ps.getSupportedLanguageTags(DataSourceEnum.Bundle);\n-        logger.debug(\"supported languages: [{}]\", supportedLanguages.toString());\n-    \tList<Locale> supportedLocales = new LinkedList<Locale>();\n-    \tfor (String languageTag : supportedLanguages) {\n-    \t\tsupportedLocales.add(Locale.forLanguageTag(languageTag));\n-    \t}\n-    \treturn supportedLocales;\n-    }\n+\n+\tprivate InputStream getInputStream() {\n+\t\tString locale = LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag();\n+\t\twhile (true) {\n+\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), locale);\n+\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n+\t\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b6e2f49a6b61b1b693df24c5e2e9f4eb462023"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d830b283732b915a0d9993cd291cb262325c83c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/1d830b283732b915a0d9993cd291cb262325c83c", "committedDate": "2020-12-05T18:06:53Z", "message": "removing file system lock from this PR (out of scope)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55e685870091baa74bf354458e566ce504e1038", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b55e685870091baa74bf354458e566ce504e1038", "committedDate": "2020-12-05T19:30:48Z", "message": "closing input stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ac6f6df8f74f120528d93ea25c27bf10197cb4", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d8ac6f6df8f74f120528d93ea25c27bf10197cb4", "committedDate": "2020-12-05T19:46:27Z", "message": "closing inputstream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzE4MTk1", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-545718195", "createdAt": "2020-12-06T15:33:17Z", "commit": {"oid": "d8ac6f6df8f74f120528d93ea25c27bf10197cb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NzcxMzU0", "url": "https://github.com/vmware/singleton/pull/878#pullrequestreview-545771354", "createdAt": "2020-12-07T00:47:40Z", "commit": {"oid": "d8ac6f6df8f74f120528d93ea25c27bf10197cb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4151, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}