{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzODA5MTc3", "number": 645, "title": "Create singleton-service-DB-Build-Introducation.md", "bodyText": "", "createdAt": "2020-07-03T01:43:14Z", "url": "https://github.com/vmware/singleton/pull/645", "merged": true, "mergeCommit": {"oid": "243fd89b77cdd2d043c83fd0b8c5cf53b44b0b8f"}, "closed": true, "closedAt": "2020-07-09T02:02:10Z", "author": {"login": "tigershi"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxJWRxgH2gAyNDQzODA5MTc3OjMyYzk1MjRhZTg1Mzg2ODE5NTRlY2RiM2U1NzkwNmU5ODBmMzJlMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczFNDQAFqTQ0NTI0MDQ4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32c9524ae8538681954ecdb3e57906e980f32e10", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/32c9524ae8538681954ecdb3e57906e980f32e10", "committedDate": "2020-07-03T01:41:51Z", "message": "Create singleton-service-DB-Build-Introducation.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzUwNTQx", "url": "https://github.com/vmware/singleton/pull/645#pullrequestreview-444350541", "createdAt": "2020-07-08T01:21:05Z", "commit": {"oid": "32c9524ae8538681954ecdb3e57906e980f32e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToyMTowNlrOGuU1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToyMTowNlrOGuU1Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyOTAwMw==", "bodyText": "Remove some space line, only keep one space line.", "url": "https://github.com/vmware/singleton/pull/645#discussion_r451229003", "createdAt": "2020-07-08T01:21:06Z", "author": {"login": "nannany00"}, "path": "content/en/docs/overview/singleton-service/singleton-service-DB-Build-Introducation.md", "diffHunk": "@@ -0,0 +1,436 @@\n+---\n+title: \"DB builder for User guideline\"\n+date: 2020-07-02T11:09:53+08:00\n+draft: false\n+weight: 20\n+---\n+\n+# 1. Prerequisites\n+\n+- **Java 8 (Java 9+ are not supported, will get compiler issue)**\n+- **Git**\n+- **Docker** \n+\n+# 2. Create Singleton Database docker image\n+## 2.1 Required \n++ **Linux 64-bit Operation System and install docker successfully**\n+\n+## 2.2 Prepare the init db scripts\n+### 2.2.1 prepare the create users and databases sql scripts vipinitdb.sql\n+\n+``` \n+CREATE USER pgvipconfig WITH PASSWORD 'vipconfig';\n+ \n+CREATE USER pgvipdata WITH PASSWORD 'vipdata';\n+ \n+CREATE DATABASE vipconfig OWNER pgvipconfig;\n+ \n+CREATE DATABASE vipdata0 OWNER pgvipdata;\n+\n+CREATE DATABASE vipdata1 OWNER pgvipdata;\n+```\n+\n+### 2.2.2 prepare the create config tab sql scripts vipinitconfigtab.sql\n+\n+```\n+create table vip_product(id bigint not null, product character varying(100) not null, datasource character varying(50) not null,\n+                          status  smallint not null default 0, created_userid bigint, crt_time timestamp);\n+                          \n+create sequence vip_product_seq increment by 1 minvalue 1 no maxvalue start with 1;\n+ \n+alter table vip_product add primary key(id);\n+ \n+alter table vip_product alter column id set default nextval('vip_product_seq');\n+ \n+alter table vip_product add constraint uk_vip_product unique(product);\n+```\n+\n+\n+### 2.2.3 prepare the create data table sql scripts vipinitdatatab.sql\n+\n+```\n+create table vip_msg(id bigint not null, product character varying(100) not null,\n+ \n+                                         version character varying(50) not null,\n+ \n+                                         component character varying(100) not null,\n+ \n+                                         locale character varying(100) not null,\n+ \n+                                         messages jsonb,\n+ \n+                                         crt_time timestamp) partition by list(product);\n+ \n+```  \n+\n+\n+\n+## 2.3 prepare the Dockerfile\n+\n+\n+\n+```\n+FROM postgres:10.3\n+ \n+MAINTAINER Shi Hu <shihu@wmware.com>\n+ \n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c9524ae8538681954ecdb3e57906e980f32e10"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzUwNzYy", "url": "https://github.com/vmware/singleton/pull/645#pullrequestreview-444350762", "createdAt": "2020-07-08T01:21:50Z", "commit": {"oid": "32c9524ae8538681954ecdb3e57906e980f32e10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToyMTo1MFrOGuU2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMToyMTo1MFrOGuU2Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyOTIwNg==", "bodyText": "Add some descriptions before the command.", "url": "https://github.com/vmware/singleton/pull/645#discussion_r451229206", "createdAt": "2020-07-08T01:21:50Z", "author": {"login": "nannany00"}, "path": "content/en/docs/overview/singleton-service/singleton-service-DB-Build-Introducation.md", "diffHunk": "@@ -0,0 +1,436 @@\n+---\n+title: \"DB builder for User guideline\"\n+date: 2020-07-02T11:09:53+08:00\n+draft: false\n+weight: 20\n+---\n+\n+# 1. Prerequisites\n+\n+- **Java 8 (Java 9+ are not supported, will get compiler issue)**\n+- **Git**\n+- **Docker** \n+\n+# 2. Create Singleton Database docker image\n+## 2.1 Required \n++ **Linux 64-bit Operation System and install docker successfully**\n+\n+## 2.2 Prepare the init db scripts\n+### 2.2.1 prepare the create users and databases sql scripts vipinitdb.sql\n+\n+``` \n+CREATE USER pgvipconfig WITH PASSWORD 'vipconfig';\n+ \n+CREATE USER pgvipdata WITH PASSWORD 'vipdata';\n+ \n+CREATE DATABASE vipconfig OWNER pgvipconfig;\n+ \n+CREATE DATABASE vipdata0 OWNER pgvipdata;\n+\n+CREATE DATABASE vipdata1 OWNER pgvipdata;\n+```\n+\n+### 2.2.2 prepare the create config tab sql scripts vipinitconfigtab.sql\n+\n+```\n+create table vip_product(id bigint not null, product character varying(100) not null, datasource character varying(50) not null,\n+                          status  smallint not null default 0, created_userid bigint, crt_time timestamp);\n+                          \n+create sequence vip_product_seq increment by 1 minvalue 1 no maxvalue start with 1;\n+ \n+alter table vip_product add primary key(id);\n+ \n+alter table vip_product alter column id set default nextval('vip_product_seq');\n+ \n+alter table vip_product add constraint uk_vip_product unique(product);\n+```\n+\n+\n+### 2.2.3 prepare the create data table sql scripts vipinitdatatab.sql\n+\n+```\n+create table vip_msg(id bigint not null, product character varying(100) not null,\n+ \n+                                         version character varying(50) not null,\n+ \n+                                         component character varying(100) not null,\n+ \n+                                         locale character varying(100) not null,\n+ \n+                                         messages jsonb,\n+ \n+                                         crt_time timestamp) partition by list(product);\n+ \n+```  \n+\n+\n+\n+## 2.3 prepare the Dockerfile\n+\n+\n+\n+```\n+FROM postgres:10.3\n+ \n+MAINTAINER Shi Hu <shihu@wmware.com>\n+ \n+ \n+ \n+ENV INITDB_PATH /usr/local/initdb\n+ \n+ \n+ \n+ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d\n+ \n+ \n+ \n+RUN mkdir -p $INITDB_PATH\n+ \n+ \n+ \n+COPY ./vipinitdb.sql $INITDB_PATH/\n+ \n+COPY ./vipinitdatatab.sql $INITDB_PATH/\n+ \n+COPY ./vipinitconfigtab.sql $INITDB_PATH/\n+ \n+ \n+ \n+COPY ./vipinstalldb.sh $AUTO_RUN_DIR/\n+ \n+ \n+ \n+RUN chmod a+x $AUTO_RUN_DIR/vipinstalldb.sh\n+```\n+\n+\n+ \n+ \n+### 2.4 prepare the execute shell vipinstalldb.sh\n+   \n+```\n+psql -U postgres  -d postgres -f $INITDB_PATH/vipinitdb.sql\n+ \n+ \n+ \n+ psql -U pgvipconfig -d vipconfig -f $INITDB_PATH/vipinitconfigtab.sql\n+ \n+ \n+ \n+ psql -U pgvipdata -d vipdata0 -f $INITDB_PATH/vipinitdatatab.sql\n+ \n+ \n+ \n+  psql -U pgvipdata -d vipdata1 -f $INITDB_PATH/vipinitdatatab.sql\n+```\n+\n+\n+## 2.5 build the docker image\n+### 2.5.1 pull the postgresql DB\u2019s official  docker image\n+\n+```\n+  docker pull postgres:10.3\n+```\n+### 2.5.2 you need the mv the  all file under same directory as following show\n+\n+```\n+tiger@docker:~/initdb$ ls\n+ \n+Dockerfile  vipinitconfigtab.sql  vipinitdatatab.sql  vipinitdb.sql  vipinstalldb.sh\n+```\n+\n+### 2.5.3 execute docker build\n+\n+```\n+  docker build -t vipdb_pg:v1 .\n+```\n+\n+## 2.6 run docker image\n+\n+```\n+tiger@docker:~$ docker run --name='vipdb' -d  -p 5432:5432 vipdb_pg:v1\n+ \n+1c9c7864aa3f21af6d0c27932be833465935418a5b6e8a495a1b58dce44fbb78\n+ \n+tiger@docker:~$ docker ps\n+ \n+CONTAINER ID        IMAGE                                                             COMMAND                  CREATED             STATUS              PORTS                    NAMES\n+ \n+1c9c7864aa3f        vipdb_pg:v1   \"docker-entrypoint.s...\"   4 seconds ago       Up 3 seconds        0.0.0.0:5432->5432/tcp   vipdb\n+```\n+\n+# 3. Compile DB builder installer \n+\n+## 3.1 Clone the repository using Git.\n+```\n+git clone https://github.com/vmware/singleton.git\n+```\n+Or\n+```\n+git clone git@github.com:vmware/singleton.git\n+```\n+\n+## 3.2 Modify the configurations\n+### 3.2.1 Modify gradle.properties and set datatype to pgdb\n+\n+```\n+branchName =\n+\n+buildNumber = 0.1.0\n+profileName = \n+# if datatype value is pgdb, will include md-data-api-pgimpl module, if datatype value is s3, will include md-data-api-s3impl module, \n+# else will include md-data-api-bundleimpl module\n+datatype=pgdb\n+# add the sync data module\n+syncdata=false\n+```\n+\n+### 3.2.2 Create vip-manager-i18n/src/main/resources/application-pgdb.yml as following:\n+\n+```\n+spring:\n+  application:\n+    name: Singleton \n+#the following is datasoures configuration\n+  datasource: \n+    name: config\n+    type: com.alibaba.druid.pool.DruidDataSource\n+    driverClassName: org.postgresql.Driver\n+    url: jdbc:postgresql://{yourIPAddress}:5432/vipconfig\n+    username: pgvipconfig\n+    password: vipconfig\n+#Initialize the connection pool parameters.\n+    initialSize: 5\n+    minIdle: 5\n+    maxActive: 30\n+#max wait time ms when get a db connection\n+    maxWait: 60000\n+# the interval time of check the idle db connection \n+    timeBetweenEvictionRunsMillis: 60000\n+# the min life time of a connection   \n+    minEvictableIdleTimeMillis: 300000\n+    validationQuery: SELECT 'x'\n+    testWhileIdle: true\n+    testOnBorrow: false\n+    testOnReturn: false\n+# open the PSCache and configurate the capacity of every connection  \n+    poolPreparedStatements: true\n+    maxPoolPreparedStatementPerConnectionSize: 20\n+    postgres:\n+      datasoures: \n+        # the vip datanodes' data source\n+        - name: vipdata1\n+          type: com.alibaba.druid.pool.DruidDataSource\n+          driverClassName: org.postgresql.Driver\n+          url: jdbc:postgresql://{yourIPAddress}:5432/vipdata1\n+          username: pgvipdata\n+          password: vipdata\n+  #Initialize the connection pool parameters.\n+          initialSize: 5\n+          minIdle: 5\n+          maxActive: 30\n+\n+          maxWait: 60000\n+ \n+          timeBetweenEvictionRunsMillis: 60000\n+ \n+          minEvictableIdleTimeMillis: 300000\n+\n+          validationQuery: SELECT 'x'\n+          testWhileIdle: true\n+          testOnBorrow: false\n+          testOnReturn: false\n+ \n+          poolPreparedStatements: true\n+          maxPoolPreparedStatementPerConnectionSize: 20\n+#configurate  Monitoring & Statistics filters  \n+        # filters: stat,wall,slf4j\n+# open merge sql and statistic slow SQL function\n+         #connectionProperties:druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000\n+# combine  DruidDataSources monitor data\n+         #useGlobalDataSourceStat:true \n+    \n+        - name: vipdata0\n+          type: com.alibaba.druid.pool.DruidDataSource\n+          driverClassName: org.postgresql.Driver\n+          url: jdbc:postgresql://{yourIPAddress}:5432/vipdata0\n+          username: pgvipdata\n+          password: vipdata\n+    #Initialize the connection pool parameters.\n+          initialSize: 5\n+          minIdle: 5\n+          maxActive: 30\n+          maxWait: 60000\n+ \n+          timeBetweenEvictionRunsMillis: 60000\n+ \n+          minEvictableIdleTimeMillis: 300000\n+\n+          validationQuery: SELECT 'x'\n+          testWhileIdle: true\n+          testOnBorrow: false\n+          testOnReturn: false\n+ \n+          poolPreparedStatements: true\n+          maxPoolPreparedStatementPerConnectionSize: 20\n+ \n+        # filters: stat,wall,slf4j\n+\n+         #connectionProperties:druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000\n+\n+         #useGlobalDataSourceStat:true \n+\n+# logging\n+logging:\n+  config: classpath:log4j2-spring.xml\n+\n+# EMBEDDED SERVER CONFIGURATION (ServerProperties)\n+server:\n+  scheme: https\n+  port: 8090\n+  max-http-header-size: 8192\n+  https: \n+    key-store: classpath:vip.jks\n+    key-store-password: 123456\n+    key-password: 123456\n+    key-store-type: JKS\n+    key-alias: server\n+  http: \n+    port: -1\n+  trace:\n+    enable: false\n+#collection source server\n+source:\n+  cache:\n+    flag: false\n+    server:\n+      url: https://localhost:8088\n+#translation synch\n+translation:\n+  synch:\n+    git:\n+      flag: false\n+pseudo:\n+  notExistSourceTag: '@@'\n+  existSourceTag: '#@'\n+csp:\n+  api:\n+    auth:\n+      enable: false\n+vipservice:\n+  authority:\n+    enable: false\n+    session:\n+      expiretime: 30\n+    token:\n+      expiretime: 130\n+  cross:\n+    domain:\n+      enable: true\n+      alloworigin: '*'\n+      maxage: 3600\n+      allowmethods: GET, POST, PUT, DELETE, OPTIONS\n+      allowheaders: csp-auth-token, Content-Type\n+cache-control:\n+  value=max-age: 604800, public\n+#swagger2-ui switch\n+swagger-ui:\n+  enable: true\n+#actuator\n+management:\n+  endpoints:\n+    web:\n+      base-path: /actuator\n+      exposure:\n+        include: info, health\n+    jmx: \n+      exposure:\n+        exclude: '*'\n+```\n+\n+### 3.2.3  Modify vip-manager-i18n/src/main/resources/application.properties as following\n+\n+```\n+##\n+#Copyright 2019 VMware, Inc.\n+#SPDX-License-Identifier: EPL-2.0\n+##\n+\n+#build version information\n+build.number.builddate=3/14/2018\n+build.number.buildnumber=7953895\n+build.number.branch=master\n+# enable default config \n+spring.profiles.active=pgdb\n+```\n+\n+### 3.2.4 Build the singleton source code\n+\n+Go to singleton/g11n-ws to run a build using Gradle.\n+\n+```\n+cd singleton/g11n-ws\n+./gradlew build\n+```\n+Jar files will be generated inside the following location:\n+\n+singleton/publish (Eg. singleton/publish/singleton-0.1.0.jar)\n+\n+# 4 To start using Singleton Service\n+\n+## 4.1 Start Singleton server\n+Navigate to singleton/publish and run the Spring Boot main application.\n+\n+```\n+cd ../publish\n+java -jar singleton-0.1.0.jar\n+```\n+\n+A user interface for testing all available API endpoints will be available in the following URL:\n+\n+https://localhost:8090/i18n/api/doc/swagger-ui.html\n+or\n+\n+http://localhost:8091/i18n/api/doc/swagger-ui.html\n+\n+\n+## 4.2 Add the test data\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c9524ae8538681954ecdb3e57906e980f32e10"}, "originalPosition": 398}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2682abb536d3440f0cb444746546189caf42450", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/a2682abb536d3440f0cb444746546189caf42450", "committedDate": "2020-07-08T01:49:14Z", "message": "Update singleton-service-DB-Build-Introducation.md\n\nfixed the comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1bf744fa44a38dac687a3271b73946286c7df2", "author": {"user": {"login": "tigershi", "name": "tigershi"}}, "url": "https://github.com/vmware/singleton/commit/8d1bf744fa44a38dac687a3271b73946286c7df2", "committedDate": "2020-07-09T01:58:09Z", "message": "Update singleton-service-DB-Build-Introducation.md\n\nremove the space"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjQwNDgy", "url": "https://github.com/vmware/singleton/pull/645#pullrequestreview-445240482", "createdAt": "2020-07-09T02:00:00Z", "commit": {"oid": "8d1bf744fa44a38dac687a3271b73946286c7df2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}