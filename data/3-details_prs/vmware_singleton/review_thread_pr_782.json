{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODM4MTMx", "number": 782, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozNzoxMlrOEjYrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMjoxNVrOEl-XqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTM5OTU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozNzoxMlrOHRtTxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozNzoxMlrOHRtTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzMDE4MA==", "bodyText": "To make sure these 2 lines can be performed, above code should be in catch block.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r488330180", "createdAt": "2020-09-15T01:37:12Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -225,4 +229,26 @@ public void testExpireUsingCacheExpiredTimeConfig() throws InterruptedException\n         responseTime2 = cacheItem.getTimestamp();\n         assertTrue(responseTime2 > responseTime); \n     }\n+\n+    @Test\n+    public void testGetSupportedLocalesOfflineBundles() {\n+        //Enable offline mode\n+        String offlineResourcesBaseUrlOrig = cfg.getOfflineResourcesBaseUrl();\n+        cfg.setOfflineResourcesBaseUrl(\"offlineBundles/\");\n+        List<DataSourceEnum> msgOriginsQueueOrig = cfg.getMsgOriginsQueue();\n+        cfg.setMsgOriginsQueue(new LinkedList<>(Arrays.asList(DataSourceEnum.Bundle)));\n+\n+        cfg.createTranslationCache(MessageCache.class);\n+        cfg.initializeMessageCache();\n+\n+        CacheService cs = new CacheService(new MessagesDTO());\n+        List<Locale> supportedLocales = cs.getSupportedLocalesFromCache();\n+        assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n+        assertEquals(\"Filipino\", supportedLocales.get(\n+                supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+\n+        // Disable offline mode off for next tests.\n+        cfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76346c41a944787e2b314b46c95c6900467676e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDI3ODI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMToyMzoyNVrOHScrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMToyMzoyNVrOHScrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNjE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } finally {", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489106181", "createdAt": "2020-09-16T01:23:25Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -238,17 +238,19 @@ public void testGetSupportedLocalesOfflineBundles() {\n         List<DataSourceEnum> msgOriginsQueueOrig = cfg.getMsgOriginsQueue();\n         cfg.setMsgOriginsQueue(new LinkedList<>(Arrays.asList(DataSourceEnum.Bundle)));\n \n-        cfg.createTranslationCache(MessageCache.class);\n-        cfg.initializeMessageCache();\n-\n-        CacheService cs = new CacheService(new MessagesDTO());\n-        List<Locale> supportedLocales = cs.getCachedLocales();\n-        assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n-        assertEquals(\"Filipino\", supportedLocales.get(\n-                supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+        try {\n+            cfg.createTranslationCache(MessageCache.class);\n+            cfg.initializeMessageCache();\n \n-        // Disable offline mode off for next tests.\n-        cfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);\n-        cfg.setMsgOriginsQueue(msgOriginsQueueOrig);\n+            CacheService cs = new CacheService(new MessagesDTO());\n+            List<Locale> supportedLocales = cs.getCachedLocales();\n+            assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n+            assertEquals(\"Filipino\", supportedLocales.get(\n+                    supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550de8c10adc68e50124a5be911f6cc15e5434fd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTA2NzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo0NTowMVrOHTLBnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNDowMDoxM1rOHTQIbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NTYyOA==", "bodyText": "What's this change for?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489865628", "createdAt": "2020-09-17T01:45:01Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -25,19 +22,20 @@ public CacheService(MessagesDTO dto) {\n     }\n     \n     public MessageCacheItem getCacheOfComponent() {\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c == null)\n+            return null;\n         String cacheKey = dto.getCompositStrAsCacheKey();\n+        MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n+        if (cacheItem != null)\n+            return cacheItem;\n         Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getCachedLocales(),\n+                this.getSupportedLocalesFromCache(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) c.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0OTI5Mw==", "bodyText": "See issue 781 for description. #781", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489949293", "createdAt": "2020-09-17T04:00:13Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -25,19 +22,20 @@ public CacheService(MessagesDTO dto) {\n     }\n     \n     public MessageCacheItem getCacheOfComponent() {\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c == null)\n+            return null;\n         String cacheKey = dto.getCompositStrAsCacheKey();\n+        MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n+        if (cacheItem != null)\n+            return cacheItem;\n         Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getCachedLocales(),\n+                this.getSupportedLocalesFromCache(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) c.get(cacheKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NTYyOA=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTA3NjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo0NzozNlrOHTLH6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjowNjoyMVrOHT3J3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NzI0MQ==", "bodyText": "Product service should consume cache service. But here cache service makes use of product service. It seems a design problem.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489867241", "createdAt": "2020-09-17T01:47:36Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {\n+        List<Locale> result = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MTQwOQ==", "bodyText": "You have a point. Let me move things around.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489881409", "createdAt": "2020-09-17T02:10:38Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {\n+        List<Locale> result = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NzI0MQ=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTg0Mw==", "bodyText": "@Xiaochao8 I think it's ok to call product service here, because it's reasonable for service classes to call each other.\nTo avoid this, I see Jessiely need make changes to multiple files,  I think it's unnecessary. How do you think?\n@jessiejuachon Not sure if it's easy for you to revert the change for this?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490251843", "createdAt": "2020-09-17T13:36:33Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {\n+        List<Locale> result = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NzI0MQ=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4ODYzOA==", "bodyText": "Actually, I realized that what's needed in CacheService.isContainComponent and CacheService.getCacheOfComponent is not the actual list of supported locales. Instead, it only needs the list of locales of currently cached messages in L3. In other words, a locale may be supported in VIP service, but if its messages are not yet in client-side cache, it should not be included in the list to pick from.\nI have reverted back most changes. Please review again.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490588638", "createdAt": "2020-09-17T22:06:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {\n+        List<Locale> result = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NzI0MQ=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTA4MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo0ODo1MVrOHTLLQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzoyNjozNlrOHUBQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2ODA5OQ==", "bodyText": "Don't know how the locale are from cache. Does product service get data from cache?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489868099", "createdAt": "2020-09-17T01:48:51Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3ODk4NQ==", "bodyText": "If you see in ProductService, it uses the cache, but also tries to fetch from data store if not found in cache and loads it in cache.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489878985", "createdAt": "2020-09-17T02:06:11Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2ODA5OQ=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NDIyNg==", "bodyText": "If it is the cases. This method should belong to product service. This is the normal way to get locales. get locale request -> service -> cache-> data source.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490754226", "createdAt": "2020-09-18T07:26:36Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2ODA5OQ=="}, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTQ1NTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzozMzoyNFrOHTPItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozODoyMFrOHTirHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkzMjk4Mw==", "bodyText": "I think you needn't convert locale list to locale map, just add locale list to cache is enough.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489932983", "createdAt": "2020-09-17T03:33:24Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,18 +73,31 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n-        List<String> locales = null;\n+    public Set<String> getSupportedLocales(){\n+        FormattingCacheService cacheService = new FormattingCacheService();\n+        Map<String, String> supportedLanguages = cacheService.getSupportedLanguages(dto);\n+        if (supportedLanguages != null && !supportedLanguages.isEmpty())\n+            return supportedLanguages.keySet();\n+\n+        Set<String> locales = new HashSet<>();\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n-        while((locales == null || locales.isEmpty()) && msgSourceQueueIter.hasNext()){\n+        while(locales.isEmpty() && msgSourceQueueIter.hasNext()){\n             DataSourceEnum dataSource = msgSourceQueueIter.next();\n             ProductOpt opt = dataSource.createProductOpt(dto);\n-            locales = opt.getSupportedLocales();\n+            locales.addAll(opt.getSupportedLocales());\n             // If failed to get locales from the data source, log the error.\n-            if (locales == null || locales.isEmpty()) {\n+            if (locales.isEmpty()) {\n                 logger.error(ConstantsMsg.GET_LOCALES_FAILED, dataSource.toString());\n             }\n         }\n+\n+        // Add list of supported locales to cache\n+        Map<String, String> cacheMap = new HashMap<>();\n+        for (String locale : locales) {\n+            cacheMap.put(locale, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk0Nzk5NQ==", "bodyText": "FormattingCacheItem has a Map<String,String> property. How do you add a list instead?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489947995", "createdAt": "2020-09-17T03:58:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,18 +73,31 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n-        List<String> locales = null;\n+    public Set<String> getSupportedLocales(){\n+        FormattingCacheService cacheService = new FormattingCacheService();\n+        Map<String, String> supportedLanguages = cacheService.getSupportedLanguages(dto);\n+        if (supportedLanguages != null && !supportedLanguages.isEmpty())\n+            return supportedLanguages.keySet();\n+\n+        Set<String> locales = new HashSet<>();\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n-        while((locales == null || locales.isEmpty()) && msgSourceQueueIter.hasNext()){\n+        while(locales.isEmpty() && msgSourceQueueIter.hasNext()){\n             DataSourceEnum dataSource = msgSourceQueueIter.next();\n             ProductOpt opt = dataSource.createProductOpt(dto);\n-            locales = opt.getSupportedLocales();\n+            locales.addAll(opt.getSupportedLocales());\n             // If failed to get locales from the data source, log the error.\n-            if (locales == null || locales.isEmpty()) {\n+            if (locales.isEmpty()) {\n                 logger.error(ConstantsMsg.GET_LOCALES_FAILED, dataSource.toString());\n             }\n         }\n+\n+        // Add list of supported locales to cache\n+        Map<String, String> cacheMap = new HashMap<>();\n+        for (String locale : locales) {\n+            cacheMap.put(locale, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkzMjk4Mw=="}, "originalCommit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MzA4NA==", "bodyText": "Get it, it make sense to convert it to a map for reusing cacheItem Object.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490253084", "createdAt": "2020-09-17T13:38:20Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,18 +73,31 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n-        List<String> locales = null;\n+    public Set<String> getSupportedLocales(){\n+        FormattingCacheService cacheService = new FormattingCacheService();\n+        Map<String, String> supportedLanguages = cacheService.getSupportedLanguages(dto);\n+        if (supportedLanguages != null && !supportedLanguages.isEmpty())\n+            return supportedLanguages.keySet();\n+\n+        Set<String> locales = new HashSet<>();\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n-        while((locales == null || locales.isEmpty()) && msgSourceQueueIter.hasNext()){\n+        while(locales.isEmpty() && msgSourceQueueIter.hasNext()){\n             DataSourceEnum dataSource = msgSourceQueueIter.next();\n             ProductOpt opt = dataSource.createProductOpt(dto);\n-            locales = opt.getSupportedLocales();\n+            locales.addAll(opt.getSupportedLocales());\n             // If failed to get locales from the data source, log the error.\n-            if (locales == null || locales.isEmpty()) {\n+            if (locales.isEmpty()) {\n                 logger.error(ConstantsMsg.GET_LOCALES_FAILED, dataSource.toString());\n             }\n         }\n+\n+        // Add list of supported locales to cache\n+        Map<String, String> cacheMap = new HashMap<>();\n+        for (String locale : locales) {\n+            cacheMap.put(locale, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkzMjk4Mw=="}, "originalCommit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkwNzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxMzo1MVrOHUCvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxMzo1MVrOHUCvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3ODQ5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CacheItem cacheItem = c.get(key);\n          \n          \n            \n                    return cacheItem;\n          \n          \n            \n                    return c.get(key);", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490778498", "createdAt": "2020-09-18T08:13:51Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {\n-        boolean f = false;\n-        String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.get(cacheKey) != null;\n-        }\n-        return f;\n+        cacheItem.setCacheItem(itemToCache);\n     }\n \n     public boolean isContainStatus() {\n-        boolean f = false;\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.keySet().contains(cacheKey);\n-        }\n-        return f;\n+        return this.getCacheItem(cacheKey) != null;\n     }\n \n     public Map<String, String> getCacheOfStatus() {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-        \tMessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-        \tif (cacheItem != null) {\n-        \t\treturn (Map<String, String>) cacheItem.getCachedData();\n-        \t}\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem != null) {\n+            return cacheItem.getCachedData();\n         }\n         return null;\n     }\n \n     public void addCacheOfStatus(Map<String, String> dataMap) {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, new MessageCacheItem(dataMap));\n-        }\n+        addCacheItem(cacheKey, new MessageCacheItem(dataMap));\n     }\n \n-    public List<Locale> getSupportedLocalesFromCache() {\n-        List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> keySet = c.keySet();\n-       \n-        for (String key : keySet) {\n-        \tif (key.startsWith(ConstantsKeys.DISPNS_PREFIX)) {\n-        \t\tFormatCacheItem cacheItem = (FormatCacheItem) c.get(key);\n-        \t\tMap<String, String> langTagToDisplayNameMap = cacheItem.getCachedData();\n-        \t\tfor (String languageTag : langTagToDisplayNameMap.keySet()) {\n-        \t\t\tlocales.add(Locale.forLanguageTag(languageTag));\n-        \t\t}\n-        \t\tbreak;\n-        \t}\n+    public List<Locale> getLocalesOfCachedMsgs() {\n+        List<Locale> locales = new LinkedList<>();\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c != null) {\n+            Set<String> cacheKeys = c.keySet();\n+            for (String key : cacheKeys) {\n+                Locale locale = getLocaleByCachedKey(key);\n+                if (locale != null)\n+                    locales.add(locale);\n+            }\n         }\n         return locales;\n     }\n \n     private Locale getLocaleByCachedKey(String key) {\n+        if (key.startsWith(ConstantsKeys.DISPNS_PREFIX))\n+            return null;\n         String locale = key.substring(\n                 key.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2, key.length());\n         return Locale.forLanguageTag(locale.replace(\"_\", \"-\"));\n     }\n-    \n+\n+    private void addCacheItem(String key, CacheItem cacheItem) {\n+        if (key != null && cacheItem != null) {\n+            Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+            if (c != null) {\n+                c.put(key, cacheItem);\n+            }\n+        }\n+    }\n+\n+    private CacheItem getCacheItem(String key) {\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c == null)\n+            return null;\n+        CacheItem cacheItem = c.get(key);\n+        return cacheItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDkxMzg2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxNToyMFrOHUCzEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjo1NToyM1rOHVsbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTQxMQ==", "bodyText": "Please don't remove this method, this is to fix a bug about source collection. Need to store null objects to cache to avoid bugs.\nYou can confirm this with Colin.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490779411", "createdAt": "2020-09-18T08:15:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NzI0Mw==", "bodyText": "I put it back, but if you check the code, it is exactly the same as CacheService.getCacheOfComponent()!=null\nPlease review to double-check and let me know. It would be good to remove this method if it is not necessary.\nOn that note, we are not going to use the java client library for source collection anymore, even for existing products.\nAlso, if you check where CacheService.addCacheOfComponent is invoked, you will see that we do not store null in the cache. We do not even store a MessageCacheItem with an empty map.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491247243", "createdAt": "2020-09-19T00:54:52Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTQxMQ=="}, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2NzAzOA==", "bodyText": "@Xiaochao8 , did you check where this method is used? Do you agree that we can remove it to simplify code? We can replace\nMessageCacheItem cacheItem = null;\nif (cacheService.isContainComponent()) { // Item is in cache\ncacheItem = cacheService.getCacheOfComponent();\nwith\nMessageCacheItem cacheItem = cacheService.getCacheOfComponent();\nif (cacheItem != null) { // Item is in cache`\\", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492167038", "createdAt": "2020-09-21T15:49:31Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTQxMQ=="}, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxMDAxNg==", "bodyText": "After offline discussion, the conclusion is to remove this method.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492510016", "createdAt": "2020-09-22T06:55:23Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTQxMQ=="}, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDk0MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMzoyNFrOHUDERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDo1MTo0N1rOHUfVTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzgxNA==", "bodyText": "We should have a prefix for translation bundles. If not and  there is a new prefix added, this line needs to be changed.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490783814", "createdAt": "2020-09-18T08:23:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {\n-        boolean f = false;\n-        String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.get(cacheKey) != null;\n-        }\n-        return f;\n+        cacheItem.setCacheItem(itemToCache);\n     }\n \n     public boolean isContainStatus() {\n-        boolean f = false;\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.keySet().contains(cacheKey);\n-        }\n-        return f;\n+        return this.getCacheItem(cacheKey) != null;\n     }\n \n     public Map<String, String> getCacheOfStatus() {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-        \tMessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-        \tif (cacheItem != null) {\n-        \t\treturn (Map<String, String>) cacheItem.getCachedData();\n-        \t}\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem != null) {\n+            return cacheItem.getCachedData();\n         }\n         return null;\n     }\n \n     public void addCacheOfStatus(Map<String, String> dataMap) {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, new MessageCacheItem(dataMap));\n-        }\n+        addCacheItem(cacheKey, new MessageCacheItem(dataMap));\n     }\n \n-    public List<Locale> getSupportedLocalesFromCache() {\n-        List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> keySet = c.keySet();\n-       \n-        for (String key : keySet) {\n-        \tif (key.startsWith(ConstantsKeys.DISPNS_PREFIX)) {\n-        \t\tFormatCacheItem cacheItem = (FormatCacheItem) c.get(key);\n-        \t\tMap<String, String> langTagToDisplayNameMap = cacheItem.getCachedData();\n-        \t\tfor (String languageTag : langTagToDisplayNameMap.keySet()) {\n-        \t\t\tlocales.add(Locale.forLanguageTag(languageTag));\n-        \t\t}\n-        \t\tbreak;\n-        \t}\n+    public List<Locale> getLocalesOfCachedMsgs() {\n+        List<Locale> locales = new LinkedList<>();\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c != null) {\n+            Set<String> cacheKeys = c.keySet();\n+            for (String key : cacheKeys) {\n+                Locale locale = getLocaleByCachedKey(key);\n+                if (locale != null)\n+                    locales.add(locale);\n+            }\n         }\n         return locales;\n     }\n \n     private Locale getLocaleByCachedKey(String key) {\n+        if (key.startsWith(ConstantsKeys.DISPNS_PREFIX))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NjkyNw==", "bodyText": "This change is not related to this PR so I have removed it.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491246927", "createdAt": "2020-09-19T00:51:47Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {\n-        boolean f = false;\n-        String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.get(cacheKey) != null;\n-        }\n-        return f;\n+        cacheItem.setCacheItem(itemToCache);\n     }\n \n     public boolean isContainStatus() {\n-        boolean f = false;\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.keySet().contains(cacheKey);\n-        }\n-        return f;\n+        return this.getCacheItem(cacheKey) != null;\n     }\n \n     public Map<String, String> getCacheOfStatus() {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-        \tMessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-        \tif (cacheItem != null) {\n-        \t\treturn (Map<String, String>) cacheItem.getCachedData();\n-        \t}\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem != null) {\n+            return cacheItem.getCachedData();\n         }\n         return null;\n     }\n \n     public void addCacheOfStatus(Map<String, String> dataMap) {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, new MessageCacheItem(dataMap));\n-        }\n+        addCacheItem(cacheKey, new MessageCacheItem(dataMap));\n     }\n \n-    public List<Locale> getSupportedLocalesFromCache() {\n-        List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> keySet = c.keySet();\n-       \n-        for (String key : keySet) {\n-        \tif (key.startsWith(ConstantsKeys.DISPNS_PREFIX)) {\n-        \t\tFormatCacheItem cacheItem = (FormatCacheItem) c.get(key);\n-        \t\tMap<String, String> langTagToDisplayNameMap = cacheItem.getCachedData();\n-        \t\tfor (String languageTag : langTagToDisplayNameMap.keySet()) {\n-        \t\t\tlocales.add(Locale.forLanguageTag(languageTag));\n-        \t\t}\n-        \t\tbreak;\n-        \t}\n+    public List<Locale> getLocalesOfCachedMsgs() {\n+        List<Locale> locales = new LinkedList<>();\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c != null) {\n+            Set<String> cacheKeys = c.keySet();\n+            for (String key : cacheKeys) {\n+                Locale locale = getLocaleByCachedKey(key);\n+                if (locale != null)\n+                    locales.add(locale);\n+            }\n         }\n         return locales;\n     }\n \n     private Locale getLocaleByCachedKey(String key) {\n+        if (key.startsWith(ConstantsKeys.DISPNS_PREFIX))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzgxNA=="}, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA2MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzowM1rOHVE73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mjo0NlrOHVXomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Set<Locale> getSupportedLocales() {\n          \n          \n            \n                public Set<Locale> getSupportedLocaleSet() {", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491863005", "createdAt": "2020-09-21T08:17:03Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -91,4 +87,18 @@ public ProductService(BaseDTO dto) {\n         }\n         return locales;\n     }\n+\n+    public Set<Locale> getSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTM2OQ==", "bodyText": "We actually only need 1 method. I will use: public Set<Locale> getSupportedLocales() to replace the following 2 signatures:\n\npublic Set< Locale > getSupportedLocales()\npublic List< String > getSupportedLocales()", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492169369", "createdAt": "2020-09-21T15:52:46Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -91,4 +87,18 @@ public ProductService(BaseDTO dto) {\n         }\n         return locales;\n     }\n+\n+    public Set<Locale> getSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzAwNQ=="}, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODA2MTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzoxNlrOHVE8OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mzo0OVrOHVXrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzA5Nw==", "bodyText": "Suggest not to change this method but to name new method to another name.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> getSupportedLanguageTags(){\n          \n          \n            \n                public List<String> getSupportedlocales(){", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491863097", "createdAt": "2020-09-21T08:17:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,7 +73,7 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n+    public List<String> getSupportedLanguageTags(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDA5NA==", "bodyText": "See my comment above.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492170094", "createdAt": "2020-09-21T15:53:49Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,7 +73,7 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n+    public List<String> getSupportedLanguageTags(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzA5Nw=="}, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDI1OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1NjoyMVrOHVaFxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNToyNzozMlrOHVqqjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwOTYwNg==", "bodyText": "It looks a bit detour, how about move such logic to getMessages() method, and change getMessages() method like below?\npublic MessageCacheItem getMessages() {\nMessageCacheItem cacheItem = null;\nIterator fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\nProductService ps = new ProductService(dto);\nLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\nif (matchedLocale != null){//handle supported locales\nthis.dto.setLocale(matchedLocale.toLanguageTag());\nreturn this.getMessages(fallbackLocalesIter);\n}else{// handle non-supported locales\nwhile(fallbackLocalesIter.hasNext()){\nMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\ncacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\nif (!cacheItem.getCachedData().isEmpty())\nbreak;\n}\n}\nreturn cacheItem;\n}", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492209606", "createdAt": "2020-09-21T16:56:21Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,23 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MTE2NQ==", "bodyText": "@huihuiw01 , you are missing some use cases in your code suggestion above.\n\nWe need to fetch data from data store and create a new CacheItem if data is not found in cache (see line 119).\nWe need to check for expiry of MessageCacheItem objects and refresh the content accordingly. These are in lines 108-109, 116\nWe want fallbackLocalesIter to be a parameter of the method. If you trace getMessages, it eventually calls createCacheItem (if cacheItem is not yet in cache). In createCacheItem, if fallbackLocalesIter is null, no fallback is applied. We need this for use cases where fallback is not necessary.\nLocaleUtility.pickupLocaleFromList returns the second input parameter if no match was found from the first parameter, so your check if (matchedLocale != null){//handle supported locales does not work. My workaround for it is line 140.\n\nThat being said, yes we do not need to cache non-supported locales with an empty cacheData map anymore because we are now using ProductService.getSupportedLocales to identify which is supported and which is not. However, if you look at ProductService.getSupportedLocales, it is not yet using the cache, so each call to this method is expensive (as of now). Hence, I was planning to postpone code clean up to PR757.  What do you think?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492481165", "createdAt": "2020-09-22T05:27:32Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,23 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwOTYwNg=="}, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTk4NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo0Njo0NVrOHVqF1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNToyODo0M1rOHVqruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MTc2NQ==", "bodyText": "Is this change related to the issue?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492471765", "createdAt": "2020-09-22T04:46:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -21,6 +21,7 @@ public MessageCacheItem(Map<String, String> dataMap) {\n \t}\n \t\n \tpublic MessageCacheItem (String locale, Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.maxAgeMillis = maxAgeMillis == null ? this.maxAgeMillis : maxAgeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MTQ2NQ==", "bodyText": "No, just code clean up. We do not want to override the default value with a null. Need separate PR?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492481465", "createdAt": "2020-09-22T05:28:43Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -21,6 +21,7 @@ public MessageCacheItem(Map<String, String> dataMap) {\n \t}\n \t\n \tpublic MessageCacheItem (String locale, Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.maxAgeMillis = maxAgeMillis == null ? this.maxAgeMillis : maxAgeMillis;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MTc2NQ=="}, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTk4NjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo0Nzo1MFrOHVqGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTozMDoyNVrOHVqtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MjAxMQ==", "bodyText": "Are all the changes in this file related to the issue? It seems there are revisions.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492472011", "createdAt": "2020-09-22T04:47:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,60 +6,37 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MTk0MQ==", "bodyText": "It is just code clean up. The following were repeated everywhere so I put in 2 separate methods:\n` private void addCacheItem(String key, CacheItem cacheItem) {\nif (key != null && cacheItem != null) {\nCache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\nif (c != null) {\nc.put(key, cacheItem);\n}\n}\n}\nprivate CacheItem getCacheItem(String key) {\n    Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n    if (c == null)\n        return null;\n    return c.get(key);\n}`", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492481941", "createdAt": "2020-09-22T05:30:25Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,60 +6,37 @@\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MjAxMQ=="}, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjAwMzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo1OTowMlrOHVqQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTozMjoxOFrOHVqvhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDQyMQ==", "bodyText": "This is another kind of fallback, and this PR isn't related to #781. Could you describe the PR again?\nIntroducing another kind of fallback logic is a big change. We should have a design first.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492474421", "createdAt": "2020-09-22T04:59:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4MjQzNg==", "bodyText": "There is no new fallback in this PR! Lines 137-139 is just plain old locale matching logic that was moved out of CacheService.getCacheOfCompnent to here.\nThe \"if\" in line 140 is there only because LocaleUtility.pickupLocaleFromList returns the second parameter if no match is found from the list of supported locales.\nLines 143-144 are there only because ProductService.getsupportedLocales currently does not use cache so every call so it is expensive, which I am planning to change in PR757 as I told Huihui above. I can remove 143-144 above from this PR to simplify.\nZoom call?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492482436", "createdAt": "2020-09-22T05:32:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDQyMQ=="}, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjU0NjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMjoxNVrOHVvMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1ODoxNlrOHVwkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTM1MA==", "bodyText": "I think here still lack else logic, if block only handles scenario that there is matched locale;\nwhen there is no matched locale, you need get fallback locale's content for request(not matched) locale.\nfor example, only fr supported, when request for ru, match result is ru, right?\nru -> default locale (not found)-> source locale.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492555350", "createdAt": "2020-09-22T08:22:15Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +130,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (!matchedLocale.equals(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c67f8a5295867ec53e93a4f755646b56469ed"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3NzkwOQ==", "bodyText": "That happens in line 151. It will continue there without entering the \"if\".", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492577909", "createdAt": "2020-09-22T08:58:16Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +130,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (!matchedLocale.equals(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTM1MA=="}, "originalCommit": {"oid": "ef3c67f8a5295867ec53e93a4f755646b56469ed"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4311, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}