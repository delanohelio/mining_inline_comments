{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNzg0MTU2", "number": 579, "title": "put into a big change to follow a new client workflow including new c\u2026", "bodyText": "\u2026onfiguration format and local bundle support", "createdAt": "2020-05-22T08:20:01Z", "url": "https://github.com/vmware/singleton/pull/579", "merged": true, "mergeCommit": {"oid": "efd2e0b8b22bb84e825e9aea91f66b407838b236"}, "closed": true, "closedAt": "2020-06-15T07:17:17Z", "author": {"login": "jin-jasper"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjtU8RAH2gAyNDIxNzg0MTU2OmM0YTE2OWNmODIyYjBiZmMxMjBiMzViM2U2YmFjZjJlYTk0NGViYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn1c5yAFqTQyNDA3NjI4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad", "author": {"user": {"login": "jin-jasper", "name": null}}, "url": "https://github.com/vmware/singleton/commit/c4a169cf822b0bfc120b35b3e6bacf2ea944ebad", "committedDate": "2020-05-22T07:42:02Z", "message": "put into a big change to follow a new client workflow including new configuration format and local bundle support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTUyNDE0", "url": "https://github.com/vmware/singleton/pull/579#pullrequestreview-419152414", "createdAt": "2020-05-27T12:42:27Z", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0MjoyN1rOGbHcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoyMDo0OFrOGbJv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NjYzNQ==", "bodyText": "IExtension is a kind of SingletonClientManager? if not, SingletonClientManager.GetInstance() should be changed to SingletonClientManager.GetExtentionInstance()?", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431086635", "createdAt": "2020-05-27T12:42:27Z", "author": {"login": "linr211"}, "path": "singletonclient/SingletonClient/I18n.cs", "diffHunk": "@@ -56,8 +56,8 @@ public static IRelease GetRelease(IConfig config)\n         /// <returns></returns>\n         public static IExtension GetExtension()\n         {\n-            SingletonClientManager client = SingletonClientManager.GetInstance();\n-            return client;\n+            IExtension extension = SingletonClientManager.GetInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyMjQ5MQ==", "bodyText": "The update feature doesn't get agreement, right?", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431122491", "createdAt": "2020-05-27T13:19:17Z", "author": {"login": "linr211"}, "path": "singletonclient/SingletonClient/Implementation/SingletonUpdate.cs", "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeffusing Newtonsoft.Json.Linq;\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace SingletonClient.Implementation\n+{\n+    public interface ISingletonUpdate\n+    {\n+        /// <summary>\n+        /// Update brief information about components or locales.\n+        /// </summary>\n+        /// <param name=\"url\"></param>\n+        /// <param name=\"infoName\"></param>\n+        /// <param name=\"infoList\"></param>\n+        void UpdateBriefinfo(string url, string infoName, List<string> infoList);\n+\n+        /// <summary>\n+        /// Update bundle from offline storage.\n+        /// </summary>\n+        /// <param name=\"componentCache\"></param>\n+        /// <param name=\"storeType\"></param>\n+        /// <param name=\"resourcePath\"></param>\n+        /// <param name=\"locale\"></param>\n+        /// <param name=\"parserName\"></param>\n+        void UpdateBundleFromOffline(IComponentMessages componentCache,\n+            string storeType, string resourcePath, string locale, string parserName);\n+\n+        /// <summary>\n+        /// Update bundle from key-value map.\n+        /// </summary>\n+        /// <param name=\"componentCache\"></param>\n+        /// <param name=\"map\"></param>\n+        void UpdateBundleFromMap(IComponentMessages componentCache, Hashtable map);\n+\n+        /// <summary>\n+        /// Load offline bundle to its cache.\n+        /// </summary>\n+        /// <param name=\"locale\"></param>\n+        /// <returns></returns>\n+        ILocaleMessages LoadOfflineBundle(string locale, bool useNearLocale);\n+    }\n+\n+    public class SingletonUpdate: ISingletonUpdate\n+    {\n+        protected ISingletonRelease _release;\n+        protected ISingletonConfig _config;\n+\n+        private List<string> _usedOfflineLocales = new List<string>();\n+\n+        public SingletonUpdate(ISingletonRelease release)\n+        {\n+            _release = release;\n+            _config = release.GetSingletonConfig();\n+        }\n+\n+        private void UpdateList(List<string> strList, JArray ja)\n+        {\n+            strList.Clear();\n+            foreach (var one in ja)\n+            {\n+                strList.Add(one.ToString());\n+            }\n+        }\n+\n+        public void UpdateBriefinfo(string url, string infoName, List<string> infoList)\n+        {\n+            Hashtable headers = SingletonUtil.NewHashtable();\n+            JObject obj = SingletonUtil.HttpGetJson(_release.GetAccessService(), url, headers);\n+\n+            if (SingletonUtil.CheckResponseValid(obj, headers))\n+            {\n+                JObject result = obj.Value<JObject>(SingletonConst.KeyResult);\n+                JObject data = result.Value<JObject>(SingletonConst.KeyData);\n+                JArray ar = data.Value<JArray>(infoName);\n+                UpdateList(infoList, ar);\n+            }\n+        }\n+\n+        private void UpdateBundleFromInternal(\n+            IComponentMessages componentCache, string resourceName, string locale, string parserName)\n+        {\n+            if (resourceName.Contains(SingletonConst.PlaceNoLocaleDefine))\n+            {\n+                return;\n+            }\n+\n+            Hashtable bundle;\n+\n+            IResourceParser parser = SingletonClientManager.GetInstance().GetResourceParser(parserName);\n+            if (parser == null)\n+            {\n+                string resourceRoot = _config.GetInternalResourceRoot();\n+                if (!string.IsNullOrEmpty(resourceRoot))\n+                {\n+                    resourceName = resourceRoot + \".\" + resourceName;\n+                }\n+                bundle = _config.GetConfig().ReadResourceMap(resourceName, parserName, locale);\n+            }\n+            else\n+            {\n+                string text = _config.GetConfig().ReadResourceText(resourceName);\n+                bundle = parser.Parse(text);\n+            }\n+\n+            UpdateBundleFromMap(componentCache, bundle);\n+        }\n+\n+        private void UpdateBundleFromExternal(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNDQ2MA==", "bodyText": "The feature of product mode is not finalized, you might need to remove it in future.", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431124460", "createdAt": "2020-05-27T13:20:48Z", "author": {"login": "linr211"}, "path": "singletonclient/SingletonClient/Implementation/SingletonConfig.cs", "diffHunk": "@@ -164,27 +299,313 @@ public string ReadResourceText(string resourceName)\n         /// <param name=\"resourceName\"></param>\n         /// <param name=\"parser\"></param>\n         /// <returns></returns>\n-        public Hashtable ReadResourceMap(string resourceName, ISourceParser parser)\n+        public Hashtable ReadResourceMap(string resourceName, string format, string locale)\n         {\n-            string[] array = resourceName.Split(new char[] {'(', ')'});\n+            if (string.IsNullOrEmpty(resourceName) || string.IsNullOrEmpty(format))\n+            {\n+                return null;\n+            }\n+            if (locale == null)\n+            {\n+                locale = ConfigConst.DefaultLocale;\n+            }\n+\n             string baseName = _resourceBaseName;\n-            if (array.Length > 1)\n+            string[] parts = _resourceBaseName.Split(new char[] { '.' });\n+            resourceName = parts[0] + \".\" + resourceName;\n+\n+            if (ConfigConst.FormatResx.Equals(format))\n             {\n-                string[] parts = _resourceBaseName.Split(new char[] { '.' });\n-                parts[parts.Length - 1] = array[1];\n-                baseName = string.Join(\".\", parts);\n-                resourceName = array[0];\n+                return SingletonUtil.ReadResourceMap(resourceName, locale, _resourceAssembly);\n             }\n \n-            if (string.IsNullOrEmpty(resourceName))\n+            return null;\n+        }\n+    }\n+\n+    public class SingletonConfigWrapper: ISingletonConfig\n+    {\n+        private IConfig _config;\n+\n+        private string _onlineUrl;\n+        private string _offlineUrl;\n+        private string _serviceUrl;\n+\n+        private string _product;\n+        private string _version;\n+\n+        private string _bundleRoot;\n+        private List<string> _externalComponentList;\n+\n+        private bool _isProductMode;\n+        private bool _isOnlineSupported;\n+        private bool _isOfflineSupported;\n+        private bool _isSourceDefault;\n+        private bool _isLoadOnStartup;\n+\n+        public SingletonConfigWrapper(IConfig config)\n+        {\n+            _config = config;\n+\n+            _onlineUrl = GetTextWithDefault(ConfigConst.KeyOnlineUrl, null);\n+            _offlineUrl = GetTextWithDefault(ConfigConst.KeyOfflineUrl, null);\n+\n+            if (_onlineUrl != null)\n             {\n-                return SingletonUtil.ReadResourceMap(baseName, _resourceAssembly);\n+                string[] strings = (_onlineUrl + \"/\").Replace(\"//\", \"/\").Split('/');\n+                _serviceUrl = strings[0] + \"//\" + strings[1];\n+                ExtractProductInfo(strings);\n             }\n+            if (_offlineUrl != null)\n+            {\n+                _bundleRoot = _offlineUrl.Replace(\"file:///\", \"\").Replace(\"://\", \"\\x01\");\n+                _bundleRoot = (_bundleRoot + \"/\").Replace(\"//\", \"/\");\n+                string[] strings = _bundleRoot.Split('/');\n+                ExtractProductInfo(strings);\n \n-            Byte[] bytes = SingletonUtil.ReadResource(baseName, _resourceAssembly, resourceName);\n-            string text = SingletonUtil.ConvertToText(bytes);\n-            Hashtable bundle = parser.Parse(text);\n-            return bundle;\n+                BuildExternalComponentList();\n+                _bundleRoot = _bundleRoot.Replace(\"\\x01\", \"://\");\n+            }\n+\n+            IConfigItem configItem = _config.GetItem(ConfigConst.KeyProductMode);\n+            _isProductMode = (configItem == null) ? true : configItem.GetBool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 438}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjE0MTQ1", "url": "https://github.com/vmware/singleton/pull/579#pullrequestreview-419214145", "createdAt": "2020-05-27T13:37:11Z", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozNzoxMlrOGbKfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozOTo1NFrOGbKmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNjU5NA==", "bodyText": "please use 'version' for keeping consistent with Java version.", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431136594", "createdAt": "2020-05-27T13:37:12Z", "author": {"login": "linr211"}, "path": "singletonclient/Product1ResLib/SingletonRes/sgtn_sample.yml", "diffHunk": "@@ -1,25 +1,34 @@\n-\ufeff# product name\n-productName: Testing\n+\ufeff\n+online_service_url: http://127.0.0.1:8090/singleton/CSHARP/\n+l10n_version: 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNzg0Mg==", "bodyText": "what's the difference with 'offline_resources_base_url'", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431137842", "createdAt": "2020-05-27T13:39:01Z", "author": {"login": "linr211"}, "path": "singletonclient/Product1ResLib/SingletonRes/sgtn_sample.yml", "diffHunk": "@@ -1,25 +1,34 @@\n-\ufeff# product name\n-productName: Testing\n+\ufeff\n+online_service_url: http://127.0.0.1:8090/singleton/CSHARP/\n+l10n_version: 2.0.0\n \n-# product version\n-version: 4.0.0\n+offline_resources_base_url: CSHARP\n \n-singletonServer: http://127.0.0.1:8092/\n+prod_mode: false\n+default_locale: en-US\n \n-pseudo: false\n-machineTranslation: false\n-collectSource: true\n+default_resource_format: properties, internal\n+internal_resources_root: SingletonRes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzODQ2NA==", "bodyText": "what cace_type means?", "url": "https://github.com/vmware/singleton/pull/579#discussion_r431138464", "createdAt": "2020-05-27T13:39:54Z", "author": {"login": "linr211"}, "path": "singletonclient/Product1ResLib/SingletonRes/sgtn_sample.yml", "diffHunk": "@@ -1,25 +1,34 @@\n-\ufeff# product name\n-productName: Testing\n+\ufeff\n+online_service_url: http://127.0.0.1:8090/singleton/CSHARP/\n+l10n_version: 2.0.0\n \n-# product version\n-version: 4.0.0\n+offline_resources_base_url: CSHARP\n \n-singletonServer: http://127.0.0.1:8092/\n+prod_mode: false\n+default_locale: en-US\n \n-pseudo: false\n-machineTranslation: false\n-collectSource: true\n+default_resource_format: properties, internal\n+internal_resources_root: SingletonRes\n \n-cacheType: default\n-accessServiceType: default\n+# optional, access service type\n+access_service_type: default\n \n-logger: default\n-logType: Debug\n+# optional, cache type\n+cache_type: default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDA0MjEz", "url": "https://github.com/vmware/singleton/pull/579#pullrequestreview-422404213", "createdAt": "2020-06-02T07:19:03Z", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDM0NDk4", "url": "https://github.com/vmware/singleton/pull/579#pullrequestreview-424034498", "createdAt": "2020-06-04T01:06:51Z", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDc2Mjgy", "url": "https://github.com/vmware/singleton/pull/579#pullrequestreview-424076282", "createdAt": "2020-06-04T03:25:40Z", "commit": {"oid": "c4a169cf822b0bfc120b35b3e6bacf2ea944ebad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4194, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}