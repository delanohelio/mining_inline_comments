{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODM4MTMx", "number": 782, "title": "Fix for bug 781 - ComponentService.getMessages is not retrieving \"matchedLocale\" from cache properly", "bodyText": "\u2026ncorrectly using L2's data.", "createdAt": "2020-09-14T19:35:14Z", "url": "https://github.com/vmware/singleton/pull/782", "merged": true, "mergeCommit": {"oid": "3e45dc6c7d20ac8bfd7082adde4ef30b0e78494c"}, "closed": true, "closedAt": "2020-09-22T16:22:09Z", "author": {"login": "jessiejuachon"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI4cCKAH2gAyNDg2ODM4MTMxOmI3NjM0NmM0MWE5NDQ3ODdlMmIzMTRiNDZjOTVjNjkwMDQ2NzY3NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLVpX8AFqTQ5MzMzMTg0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b76346c41a944787e2b314b46c95c6900467676e", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/b76346c41a944787e2b314b46c95c6900467676e", "committedDate": "2020-09-14T19:33:56Z", "message": "Fix for bug 781 - L3's CacheService.getSupportedLocalesFromCache is incorrectly using L2's data."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjYzMDg2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-488263086", "createdAt": "2020-09-15T01:37:12Z", "commit": {"oid": "b76346c41a944787e2b314b46c95c6900467676e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozNzoxMlrOHRtTxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMTozNzoxMlrOHRtTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMzMDE4MA==", "bodyText": "To make sure these 2 lines can be performed, above code should be in catch block.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r488330180", "createdAt": "2020-09-15T01:37:12Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -225,4 +229,26 @@ public void testExpireUsingCacheExpiredTimeConfig() throws InterruptedException\n         responseTime2 = cacheItem.getTimestamp();\n         assertTrue(responseTime2 > responseTime); \n     }\n+\n+    @Test\n+    public void testGetSupportedLocalesOfflineBundles() {\n+        //Enable offline mode\n+        String offlineResourcesBaseUrlOrig = cfg.getOfflineResourcesBaseUrl();\n+        cfg.setOfflineResourcesBaseUrl(\"offlineBundles/\");\n+        List<DataSourceEnum> msgOriginsQueueOrig = cfg.getMsgOriginsQueue();\n+        cfg.setMsgOriginsQueue(new LinkedList<>(Arrays.asList(DataSourceEnum.Bundle)));\n+\n+        cfg.createTranslationCache(MessageCache.class);\n+        cfg.initializeMessageCache();\n+\n+        CacheService cs = new CacheService(new MessagesDTO());\n+        List<Locale> supportedLocales = cs.getSupportedLocalesFromCache();\n+        assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n+        assertEquals(\"Filipino\", supportedLocales.get(\n+                supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+\n+        // Disable offline mode off for next tests.\n+        cfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76346c41a944787e2b314b46c95c6900467676e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6aa09e4cdbcaef61b32385310acb75db46f8618", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/a6aa09e4cdbcaef61b32385310acb75db46f8618", "committedDate": "2020-09-15T02:22:14Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "550de8c10adc68e50124a5be911f6cc15e5434fd", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/550de8c10adc68e50124a5be911f6cc15e5434fd", "committedDate": "2020-09-15T15:27:58Z", "message": "code clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjEwNDQ2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-489210446", "createdAt": "2020-09-16T01:23:25Z", "commit": {"oid": "550de8c10adc68e50124a5be911f6cc15e5434fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMToyMzoyNVrOHScrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMToyMzoyNVrOHScrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEwNjE4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } finally {", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489106181", "createdAt": "2020-09-16T01:23:25Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vipclient/i18n/messages/service/CacheServiceTest.java", "diffHunk": "@@ -238,17 +238,19 @@ public void testGetSupportedLocalesOfflineBundles() {\n         List<DataSourceEnum> msgOriginsQueueOrig = cfg.getMsgOriginsQueue();\n         cfg.setMsgOriginsQueue(new LinkedList<>(Arrays.asList(DataSourceEnum.Bundle)));\n \n-        cfg.createTranslationCache(MessageCache.class);\n-        cfg.initializeMessageCache();\n-\n-        CacheService cs = new CacheService(new MessagesDTO());\n-        List<Locale> supportedLocales = cs.getCachedLocales();\n-        assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n-        assertEquals(\"Filipino\", supportedLocales.get(\n-                supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+        try {\n+            cfg.createTranslationCache(MessageCache.class);\n+            cfg.initializeMessageCache();\n \n-        // Disable offline mode off for next tests.\n-        cfg.setOfflineResourcesBaseUrl(offlineResourcesBaseUrlOrig);\n-        cfg.setMsgOriginsQueue(msgOriginsQueueOrig);\n+            CacheService cs = new CacheService(new MessagesDTO());\n+            List<Locale> supportedLocales = cs.getCachedLocales();\n+            assertTrue(supportedLocales.contains(Locale.forLanguageTag(\"fil\")));\n+            assertEquals(\"Filipino\", supportedLocales.get(\n+                    supportedLocales.indexOf(Locale.forLanguageTag(\"fil\"))).getDisplayName());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "550de8c10adc68e50124a5be911f6cc15e5434fd"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/1599f5c616b65f1592e7d4590cfbe5380b1c1d09", "committedDate": "2020-09-17T01:09:38Z", "message": "Fix for issue 781: CacheService.getCacheOfComponent cannot get \"matchedLocale\" properly if L2 supported locale list cache is not yet populated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMTg3NTA2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-490187506", "createdAt": "2020-09-17T01:45:00Z", "commit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo0NTowMVrOHTLBnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo0ODo1MVrOHTLLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NTYyOA==", "bodyText": "What's this change for?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489865628", "createdAt": "2020-09-17T01:45:01Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -25,19 +22,20 @@ public CacheService(MessagesDTO dto) {\n     }\n     \n     public MessageCacheItem getCacheOfComponent() {\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c == null)\n+            return null;\n         String cacheKey = dto.getCompositStrAsCacheKey();\n+        MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n+        if (cacheItem != null)\n+            return cacheItem;\n         Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getCachedLocales(),\n+                this.getSupportedLocalesFromCache(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) c.get(cacheKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2NzI0MQ==", "bodyText": "Product service should consume cache service. But here cache service makes use of product service. It seems a design problem.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489867241", "createdAt": "2020-09-17T01:47:36Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {\n+        List<Locale> result = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg2ODA5OQ==", "bodyText": "Don't know how the locale are from cache. Does product service get data from cache?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489868099", "createdAt": "2020-09-17T01:48:51Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -101,17 +99,14 @@ public void addCacheOfStatus(Map<String, String> dataMap) {\n         }\n     }\n \n-    public List<Locale> getCachedLocales() {\n-        List<Locale> locales = new ArrayList<>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> cacheKeys = c.keySet();\n-        for (String key: cacheKeys) {\n-            locales.add(getLocaleByCachedKey(key));\n+    public List<Locale> getSupportedLocalesFromCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1599f5c616b65f1592e7d4590cfbe5380b1c1d09"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144", "committedDate": "2020-09-17T02:03:54Z", "message": "adding test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMjE4ODUx", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-490218851", "createdAt": "2020-09-17T03:33:24Z", "commit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzozMzoyNFrOHTPItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMzozMzoyNFrOHTPItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkzMjk4Mw==", "bodyText": "I think you needn't convert locale list to locale map, just add locale list to cache is enough.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r489932983", "createdAt": "2020-09-17T03:33:24Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,18 +73,31 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n-        List<String> locales = null;\n+    public Set<String> getSupportedLocales(){\n+        FormattingCacheService cacheService = new FormattingCacheService();\n+        Map<String, String> supportedLanguages = cacheService.getSupportedLanguages(dto);\n+        if (supportedLanguages != null && !supportedLanguages.isEmpty())\n+            return supportedLanguages.keySet();\n+\n+        Set<String> locales = new HashSet<>();\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n-        while((locales == null || locales.isEmpty()) && msgSourceQueueIter.hasNext()){\n+        while(locales.isEmpty() && msgSourceQueueIter.hasNext()){\n             DataSourceEnum dataSource = msgSourceQueueIter.next();\n             ProductOpt opt = dataSource.createProductOpt(dto);\n-            locales = opt.getSupportedLocales();\n+            locales.addAll(opt.getSupportedLocales());\n             // If failed to get locales from the data source, log the error.\n-            if (locales == null || locales.isEmpty()) {\n+            if (locales.isEmpty()) {\n                 logger.error(ConstantsMsg.GET_LOCALES_FAILED, dataSource.toString());\n             }\n         }\n+\n+        // Add list of supported locales to cache\n+        Map<String, String> cacheMap = new HashMap<>();\n+        for (String locale : locales) {\n+            cacheMap.put(locale, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0a9ddb949210dfb1b1bb4cdae68b476f2ec144"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b8e3a075254feae7a9c35d6cbe406b3a14780e", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/24b8e3a075254feae7a9c35d6cbe406b3a14780e", "committedDate": "2020-09-17T03:55:27Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b2159f01fc3311cb18b4ec93eb50e6b5545b7c", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/22b2159f01fc3311cb18b4ec93eb50e6b5545b7c", "committedDate": "2020-09-17T04:25:08Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4247c994d7edc94bab9f178f714ee779e9633ec8", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/4247c994d7edc94bab9f178f714ee779e9633ec8", "committedDate": "2020-09-17T21:18:16Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a0a4c9252680a248be21158e361b1a6652c569", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/88a0a4c9252680a248be21158e361b1a6652c569", "committedDate": "2020-09-17T21:54:02Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d82802c83348c7bad66f6b4c58521fa69a2e43d", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/3d82802c83348c7bad66f6b4c58521fa69a2e43d", "committedDate": "2020-09-17T22:01:09Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444b0bf7d50cd00a2b56f44ef947759fbb451efb", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/444b0bf7d50cd00a2b56f44ef947759fbb451efb", "committedDate": "2020-09-17T22:25:09Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d975d9796b68690d669d61685bec6e646bf610df", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d975d9796b68690d669d61685bec6e646bf610df", "committedDate": "2020-09-18T01:37:58Z", "message": "adding test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7a9a44184972db0266d45725a736db45ad0b94b", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d7a9a44184972db0266d45725a736db45ad0b94b", "committedDate": "2020-09-18T01:52:45Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "534137ac37d9d112ea0b90faf32f18b33a0843b5", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/534137ac37d9d112ea0b90faf32f18b33a0843b5", "committedDate": "2020-09-18T02:01:54Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e540e9ad43cc82954d97a6516726f682172b11f", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/7e540e9ad43cc82954d97a6516726f682172b11f", "committedDate": "2020-09-18T02:07:33Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8899bfe6698c88d86bca1973bab3ce9dbbc4a2e4", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8899bfe6698c88d86bca1973bab3ce9dbbc4a2e4", "committedDate": "2020-09-18T02:24:13Z", "message": "fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ce24535976e852325ecc330570b3fac50d81080", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/5ce24535976e852325ecc330570b3fac50d81080", "committedDate": "2020-09-18T02:27:12Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/c5e9620db2a0af01c4226169b07beec90abee0b8", "committedDate": "2020-09-18T02:33:23Z", "message": "code clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjQ1MjU4", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-491245258", "createdAt": "2020-09-18T08:13:51Z", "commit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoxMzo1MVrOHUCvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMzoyNFrOHUDERg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3ODQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CacheItem cacheItem = c.get(key);\n          \n          \n            \n                    return cacheItem;\n          \n          \n            \n                    return c.get(key);", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490778498", "createdAt": "2020-09-18T08:13:51Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {\n-        boolean f = false;\n-        String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.get(cacheKey) != null;\n-        }\n-        return f;\n+        cacheItem.setCacheItem(itemToCache);\n     }\n \n     public boolean isContainStatus() {\n-        boolean f = false;\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.keySet().contains(cacheKey);\n-        }\n-        return f;\n+        return this.getCacheItem(cacheKey) != null;\n     }\n \n     public Map<String, String> getCacheOfStatus() {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-        \tMessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-        \tif (cacheItem != null) {\n-        \t\treturn (Map<String, String>) cacheItem.getCachedData();\n-        \t}\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem != null) {\n+            return cacheItem.getCachedData();\n         }\n         return null;\n     }\n \n     public void addCacheOfStatus(Map<String, String> dataMap) {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, new MessageCacheItem(dataMap));\n-        }\n+        addCacheItem(cacheKey, new MessageCacheItem(dataMap));\n     }\n \n-    public List<Locale> getSupportedLocalesFromCache() {\n-        List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> keySet = c.keySet();\n-       \n-        for (String key : keySet) {\n-        \tif (key.startsWith(ConstantsKeys.DISPNS_PREFIX)) {\n-        \t\tFormatCacheItem cacheItem = (FormatCacheItem) c.get(key);\n-        \t\tMap<String, String> langTagToDisplayNameMap = cacheItem.getCachedData();\n-        \t\tfor (String languageTag : langTagToDisplayNameMap.keySet()) {\n-        \t\t\tlocales.add(Locale.forLanguageTag(languageTag));\n-        \t\t}\n-        \t\tbreak;\n-        \t}\n+    public List<Locale> getLocalesOfCachedMsgs() {\n+        List<Locale> locales = new LinkedList<>();\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c != null) {\n+            Set<String> cacheKeys = c.keySet();\n+            for (String key : cacheKeys) {\n+                Locale locale = getLocaleByCachedKey(key);\n+                if (locale != null)\n+                    locales.add(locale);\n+            }\n         }\n         return locales;\n     }\n \n     private Locale getLocaleByCachedKey(String key) {\n+        if (key.startsWith(ConstantsKeys.DISPNS_PREFIX))\n+            return null;\n         String locale = key.substring(\n                 key.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2, key.length());\n         return Locale.forLanguageTag(locale.replace(\"_\", \"-\"));\n     }\n-    \n+\n+    private void addCacheItem(String key, CacheItem cacheItem) {\n+        if (key != null && cacheItem != null) {\n+            Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+            if (c != null) {\n+                c.put(key, cacheItem);\n+            }\n+        }\n+    }\n+\n+    private CacheItem getCacheItem(String key) {\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c == null)\n+            return null;\n+        CacheItem cacheItem = c.get(key);\n+        return cacheItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3OTQxMQ==", "bodyText": "Please don't remove this method, this is to fix a bug about source collection. Need to store null objects to cache to avoid bugs.\nYou can confirm this with Colin.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490779411", "createdAt": "2020-09-18T08:15:20Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzgxNA==", "bodyText": "We should have a prefix for translation bundles. If not and  there is a new prefix added, this line needs to be changed.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r490783814", "createdAt": "2020-09-18T08:23:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,127 +6,101 @@\n \n import com.vmware.vipclient.i18n.VIPCfg;\n import com.vmware.vipclient.i18n.base.cache.Cache;\n-import com.vmware.vipclient.i18n.base.cache.FormatCacheItem;\n+import com.vmware.vipclient.i18n.base.cache.CacheItem;\n import com.vmware.vipclient.i18n.base.cache.MessageCacheItem;\n import com.vmware.vipclient.i18n.messages.dto.MessagesDTO;\n import com.vmware.vipclient.i18n.util.ConstantsKeys;\n import com.vmware.vipclient.i18n.util.LocaleUtility;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n public class CacheService {\n     private MessagesDTO dto;\n \n     public CacheService(MessagesDTO dto) {\n         this.dto = dto;\n     }\n-    \n+\n     public MessageCacheItem getCacheOfComponent() {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(\n-                this.getSupportedLocalesFromCache(),\n+        Locale matchedLocale = LocaleUtility.pickupLocaleFromList(this.getLocalesOfCachedMsgs(),\n                 this.getLocaleByCachedKey(cacheKey));\n         cacheKey = cacheKey.substring(0,\n                 cacheKey.indexOf(ConstantsKeys.UNDERLINE_POUND) + 2)\n                 + matchedLocale.toLanguageTag();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c == null) {\n-            return null;\n-        } else {\n-            return (MessageCacheItem) c.get(cacheKey);\n-        }\n+        return (MessageCacheItem) this.getCacheItem(cacheKey);\n     }\n \n     public void addCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, itemToCache);\n-        }\n+        this.addCacheItem(cacheKey, itemToCache);\n     }\n \n     public void updateCacheOfComponent(MessageCacheItem itemToCache) {\n         String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            MessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-            if (cacheItem == null) {\n-            \tcacheItem = new MessageCacheItem();\n-            \tc.put(cacheKey, cacheItem);\n-            }\n-            cacheItem.setCacheItem(itemToCache);\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem == null) {\n+            cacheItem = new MessageCacheItem();\n+            this.addCacheItem(cacheKey, cacheItem);\n         }\n-    }\n-\n-    public boolean isContainComponent() {\n-        boolean f = false;\n-        String cacheKey = dto.getCompositStrAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.get(cacheKey) != null;\n-        }\n-        return f;\n+        cacheItem.setCacheItem(itemToCache);\n     }\n \n     public boolean isContainStatus() {\n-        boolean f = false;\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            f = c.keySet().contains(cacheKey);\n-        }\n-        return f;\n+        return this.getCacheItem(cacheKey) != null;\n     }\n \n     public Map<String, String> getCacheOfStatus() {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-        \tMessageCacheItem cacheItem = (MessageCacheItem) c.get(cacheKey);\n-        \tif (cacheItem != null) {\n-        \t\treturn (Map<String, String>) cacheItem.getCachedData();\n-        \t}\n+        MessageCacheItem cacheItem = (MessageCacheItem) this.getCacheItem(cacheKey);\n+        if (cacheItem != null) {\n+            return cacheItem.getCachedData();\n         }\n         return null;\n     }\n \n     public void addCacheOfStatus(Map<String, String> dataMap) {\n         String cacheKey = dto.getTransStatusAsCacheKey();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n-        if (c != null) {\n-            c.put(cacheKey, new MessageCacheItem(dataMap));\n-        }\n+        addCacheItem(cacheKey, new MessageCacheItem(dataMap));\n     }\n \n-    public List<Locale> getSupportedLocalesFromCache() {\n-        List<Locale> locales = new ArrayList<Locale>();\n-        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L2);\n-        if (c == null) {\n-            return locales;\n-        }\n-        Set<String> keySet = c.keySet();\n-       \n-        for (String key : keySet) {\n-        \tif (key.startsWith(ConstantsKeys.DISPNS_PREFIX)) {\n-        \t\tFormatCacheItem cacheItem = (FormatCacheItem) c.get(key);\n-        \t\tMap<String, String> langTagToDisplayNameMap = cacheItem.getCachedData();\n-        \t\tfor (String languageTag : langTagToDisplayNameMap.keySet()) {\n-        \t\t\tlocales.add(Locale.forLanguageTag(languageTag));\n-        \t\t}\n-        \t\tbreak;\n-        \t}\n+    public List<Locale> getLocalesOfCachedMsgs() {\n+        List<Locale> locales = new LinkedList<>();\n+        Cache c = VIPCfg.getInstance().getCacheManager().getCache(VIPCfg.CACHE_L3);\n+        if (c != null) {\n+            Set<String> cacheKeys = c.keySet();\n+            for (String key : cacheKeys) {\n+                Locale locale = getLocaleByCachedKey(key);\n+                if (locale != null)\n+                    locales.add(locale);\n+            }\n         }\n         return locales;\n     }\n \n     private Locale getLocaleByCachedKey(String key) {\n+        if (key.startsWith(ConstantsKeys.DISPNS_PREFIX))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjkyMDI1", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-491292025", "createdAt": "2020-09-18T09:17:29Z", "commit": {"oid": "c5e9620db2a0af01c4226169b07beec90abee0b8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2905e394b44b4dbca0b1f649553d8c18e0ac5b3", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d2905e394b44b4dbca0b1f649553d8c18e0ac5b3", "committedDate": "2020-09-18T19:13:45Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1e4e942eb38181e3a570181910b80d3d2467a3", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/8b1e4e942eb38181e3a570181910b80d3d2467a3", "committedDate": "2020-09-18T22:32:58Z", "message": "code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/303957ed1b264b5fdaa6b2b55f89ad5225565f14", "committedDate": "2020-09-18T22:51:17Z", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f238d95f5266b54feb7e585cad2138a8b3992be0", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/f238d95f5266b54feb7e585cad2138a8b3992be0", "committedDate": "2020-09-19T00:46:09Z", "message": "adding comments to code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzY3MTY2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-492367166", "createdAt": "2020-09-21T08:17:03Z", "commit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzowM1rOHVE73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoxNzoxNlrOHVE8OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Set<Locale> getSupportedLocales() {\n          \n          \n            \n                public Set<Locale> getSupportedLocaleSet() {", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491863005", "createdAt": "2020-09-21T08:17:03Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -91,4 +87,18 @@ public ProductService(BaseDTO dto) {\n         }\n         return locales;\n     }\n+\n+    public Set<Locale> getSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2MzA5Nw==", "bodyText": "Suggest not to change this method but to name new method to another name.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> getSupportedLanguageTags(){\n          \n          \n            \n                public List<String> getSupportedlocales(){", "url": "https://github.com/vmware/singleton/pull/782#discussion_r491863097", "createdAt": "2020-09-21T08:17:16Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -77,7 +73,7 @@ public ProductService(BaseDTO dto) {\n      *\n      * @return list of locales of the product specified in the dto object\n      */\n-    public List<String> getSupportedLocales(){\n+    public List<String> getSupportedLanguageTags(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5dffd6d34f587752c26f625e22ecccb58bd4d06", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/d5dffd6d34f587752c26f625e22ecccb58bd4d06", "committedDate": "2020-09-21T15:58:49Z", "message": "clean up code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09633098597875043343c72416e9f04f7984917", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/f09633098597875043343c72416e9f04f7984917", "committedDate": "2020-09-21T16:00:23Z", "message": "Merge branch 'g11n-java-client-781' of github.com:jessiejuachon/singleton into g11n-java-client-781"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODA3OTY2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-492807966", "createdAt": "2020-09-21T16:56:21Z", "commit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1NjoyMVrOHVaFxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1NjoyMVrOHVaFxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwOTYwNg==", "bodyText": "It looks a bit detour, how about move such logic to getMessages() method, and change getMessages() method like below?\npublic MessageCacheItem getMessages() {\nMessageCacheItem cacheItem = null;\nIterator fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\nProductService ps = new ProductService(dto);\nLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\nif (matchedLocale != null){//handle supported locales\nthis.dto.setLocale(matchedLocale.toLanguageTag());\nreturn this.getMessages(fallbackLocalesIter);\n}else{// handle non-supported locales\nwhile(fallbackLocalesIter.hasNext()){\nMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\ncacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\nif (!cacheItem.getCachedData().isEmpty())\nbreak;\n}\n}\nreturn cacheItem;\n}", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492209606", "createdAt": "2020-09-21T16:56:21Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,23 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303957ed1b264b5fdaa6b2b55f89ad5225565f14"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMTI0NTc2", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-493124576", "createdAt": "2020-09-22T04:46:44Z", "commit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo0Njo0NVrOHVqF1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDo1OTowMlrOHVqQNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MTc2NQ==", "bodyText": "Is this change related to the issue?", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492471765", "createdAt": "2020-09-22T04:46:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -21,6 +21,7 @@ public MessageCacheItem(Map<String, String> dataMap) {\n \t}\n \t\n \tpublic MessageCacheItem (String locale, Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.maxAgeMillis = maxAgeMillis == null ? this.maxAgeMillis : maxAgeMillis;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3MjAxMQ==", "bodyText": "Are all the changes in this file related to the issue? It seems there are revisions.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492472011", "createdAt": "2020-09-22T04:47:50Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/CacheService.java", "diffHunk": "@@ -6,60 +6,37 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ3NDQyMQ==", "bodyText": "This is another kind of fallback, and this PR isn't related to #781. Could you describe the PR again?\nIntroducing another kind of fallback logic is a big change. We should have a design first.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492474421", "createdAt": "2020-09-22T04:59:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +131,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (ps.isSupportedLocale(matchedLocale)) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09633098597875043343c72416e9f04f7984917"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef3c67f8a5295867ec53e93a4f755646b56469ed", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/ef3c67f8a5295867ec53e93a4f755646b56469ed", "committedDate": "2020-09-22T07:31:00Z", "message": "code clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMjI3MTcz", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-493227173", "createdAt": "2020-09-22T08:22:15Z", "commit": {"oid": "ef3c67f8a5295867ec53e93a4f755646b56469ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMjoxNVrOHVvMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMjoxNVrOHVvMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTM1MA==", "bodyText": "I think here still lack else logic, if block only handles scenario that there is matched locale;\nwhen there is no matched locale, you need get fallback locale's content for request(not matched) locale.\nfor example, only fr supported, when request for ru, match result is ru, right?\nru -> default locale (not found)-> source locale.", "url": "https://github.com/vmware/singleton/pull/782#discussion_r492555350", "createdAt": "2020-09-22T08:22:15Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -130,11 +130,28 @@ private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n \t\tCacheService cacheService = new CacheService(dto);\n \t\t// Create a new cacheItem object to be stored in cache\n \t\tMessageCacheItem cacheItem = new MessageCacheItem();\n-\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n \n+\t\t// If the requested locale is not supported, but matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\"),\n+\t\t// return the messages of the supported locale that best matches the requested locale.\n+\t\tProductService ps = new ProductService(dto);\n+\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n+\t\t\tif (!matchedLocale.equals(Locale.forLanguageTag(dto.getLocale()))) {\n+\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages(null);\n+\t\t\t\tMessageCacheItem cacheItemCopy = new MessageCacheItem(matchedLocale.toLanguageTag(), null, null, System.currentTimeMillis(), cacheItem.getMaxAgeMillis());\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItemCopy);\n+\t\t\t\treturn cacheItem;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3c67f8a5295867ec53e93a4f755646b56469ed"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6f313329c70155c876dd750365b3ece9df9147", "author": {"user": {"login": "jessiejuachon", "name": "JESSIELY JUACHON"}}, "url": "https://github.com/vmware/singleton/commit/0c6f313329c70155c876dd750365b3ece9df9147", "committedDate": "2020-09-22T09:03:34Z", "message": "code clean up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMjYzMDYw", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-493263060", "createdAt": "2020-09-22T09:07:36Z", "commit": {"oid": "0c6f313329c70155c876dd750365b3ece9df9147"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMzMxODQz", "url": "https://github.com/vmware/singleton/pull/782#pullrequestreview-493331843", "createdAt": "2020-09-22T10:43:36Z", "commit": {"oid": "0c6f313329c70155c876dd750365b3ece9df9147"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4036, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}