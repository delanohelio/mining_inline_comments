{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNTk2MTEx", "number": 878, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MzowNVrOE_n-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozMDowMFrOFBPvVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTUwNjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MzowNVrOH9bfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODozNzozMFrOH_-wAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ==", "bodyText": "Why does it need this class and make it singleton?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534175491", "createdAt": "2020-12-02T13:43:05Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxMDkzNQ==", "bodyText": "This is used as a lock in synchronized blocks in LocalProductOpt.\nFileSystems.newFilesystem is not thread safe so we want only 1 thread to be able to do it at a time. FileSystemAlreadyExistsException exception is thrown if another thread is simultaneously accessing the file system, making the current thread fail. We do not want the current thread to fail. Instead, we want it to wait for the other thread to finish so it could access the file system properly.  To test this, have multiple threads try to access the file system (e.g. 100 calls that will get the list of supported locales at the same time.)", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535410935", "createdAt": "2020-12-03T16:57:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MzA2NQ==", "bodyText": "Because we just read the file so lock is unnecessary.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535883065", "createdAt": "2020-12-04T07:12:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NjI2NQ==", "bodyText": "The file system is corresponding to uri, so it shouldn't to have only one lock for all file systems.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535886265", "createdAt": "2020-12-04T07:20:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5Mjk0Nw==", "bodyText": "Because we just read the file so lock is unnecessary.\n\nTry it with multiple threads and see the exception I said.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536392947", "createdAt": "2020-12-04T21:34:56Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg1MDQzMg==", "bodyText": "Let's narrow down the scope to deliver this faster. Since this fix is not related to the Atlas bug, I have removed it from this PR and created this issue: #910.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536850432", "createdAt": "2020-12-05T18:37:30Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalFileSystem.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*\n+ * Copyright 2019-2020 VMware, Inc.\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package com.vmware.vipclient.i18n.messages.api.opt.local;\n+\n+public class LocalFileSystem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3NTQ5MQ=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDY0MDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMTo0NlrOH95FuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMTo0NlrOH95FuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t * Ths could happen if:\n          \n          \n            \n            \t\t\t * This could happen if:", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534660537", "createdAt": "2020-12-03T04:31:46Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();\n+\t\t\tJSONParser jsonParser = new JSONParser();\n+\t\t\tJSONObject jsonObject = (JSONObject) jsonParser.parse(new InputStreamReader(is, \"UTF-8\"));\n+\t\t\tMap<String, String> messages = (JSONObject) jsonObject.get(\"messages\");\n \t\t\tcacheItem.setCacheItem(messages, null, System.currentTimeMillis(), null);\n \t\t} catch (Exception e) {\n \t\t\tlogger.debug(e.getMessage());\n-\t\t\t// Do not update cacheItem\n \t\t}\n     }\n-    \n-    private List<Locale> getSupportedLocales() {\n-\t\tProductService ps = new ProductService(dto);\n-\t\tSet<String> supportedLanguages = ps.getSupportedLanguageTags(DataSourceEnum.Bundle);\n-        logger.debug(\"supported languages: [{}]\", supportedLanguages.toString());\n-    \tList<Locale> supportedLocales = new LinkedList<Locale>();\n-    \tfor (String languageTag : supportedLanguages) {\n-    \t\tsupportedLocales.add(Locale.forLanguageTag(languageTag));\n-    \t}\n-    \treturn supportedLocales;\n-    }\n+\n+\tprivate InputStream getInputStream() {\n+\t\tString locale = LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag();\n+\t\twhile (true) {\n+\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), locale);\n+\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n+\t\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());\n+\t\t\tif (is != null)\n+\t\t\t\treturn is;\n+\t\t\t/*\n+\t\t\t * If valid URI is not found, find the next best matching locale available in the file system\n+\t\t\t * Ths could happen if:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDY1NDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozODo0NVrOH95N3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozODo0NVrOH95N3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MjYyMw==", "bodyText": "Is it better rename parameter 'withCacheRefresh' to 'refreshCache'?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534662623", "createdAt": "2020-12-03T04:38:45Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -105,10 +122,13 @@ public ProductService(BaseDTO dto) {\n         }\n     }\n \n-    public boolean isSupportedLocale(Locale locale) {\n-        return getSupportedLanguageTags().contains(LocaleUtility.fmtToMappedLocale(locale).toLanguageTag());\n+    public boolean isSupportedLocale(boolean withCacheRefresh, Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDkwNzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjowMTowNlrOH97s3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNzo1MVrOH-niPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMzMyNA==", "bodyText": "I think before starting this task you need check if the supported locales list in cache by calling 'new ProductService(dto).getSupportedLocales(false)', if not in cache you need start this task, otherwise you needn't refresh cache.\nWithout the check, each call of 'getMessage' method will trigger the cache refresh of supported locale list actually which is needn't.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534703324", "createdAt": "2020-12-03T06:01:06Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +130,42 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyMTUwMA==", "bodyText": "If you trace this code, it will eventually call ProductService.getSupportedLanguageTags(DataSourceEnum). In there, it returns the cached data if it exists in cache and is not expired.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535421500", "createdAt": "2020-12-03T17:07:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +130,42 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMzMyNA=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDkxNTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjowMjozMlrOH97xvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODozNjo1OFrOH_-uww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwNDU3NA==", "bodyText": "What's the purpose of this synchronized block?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534704574", "createdAt": "2020-12-03T06:02:32Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -35,27 +35,28 @@ public LocalProductOpt(BaseDTO dto) {\n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n         List<String> supportedLocales = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n \n             URI uri = Thread.currentThread().getContextClassLoader().\n                     getResource(path.toString()).toURI();\n \n             if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n-                    getSupportedLocales(path, supportedLocales);\n+                synchronized (LocalFileSystem.getInstance()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyNDg0Mg==", "bodyText": "Pasting my reply to Xiaochao above:\n\"FileSystems.newFilesystem is not thread safe so we want only 1 thread to be able to do it at a time. FileSystemAlreadyExistsException exception is thrown if another thread is simultaneously accessing the file system, making the current thread fail. We do not want the current thread to fail. Instead, we want it to wait for the other thread to finish so it could access the file system properly. To test this, have multiple threads try to access the file system (e.g. 100 calls that will get the list of supported locales at the same time.)\"", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535424842", "createdAt": "2020-12-03T17:11:34Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -35,27 +35,28 @@ public LocalProductOpt(BaseDTO dto) {\n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n         List<String> supportedLocales = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n \n             URI uri = Thread.currentThread().getContextClassLoader().\n                     getResource(path.toString()).toURI();\n \n             if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n-                    getSupportedLocales(path, supportedLocales);\n+                synchronized (LocalFileSystem.getInstance()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwNDU3NA=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg1MDExNQ==", "bodyText": "Let's narrow down the scope to deliver this faster.  Since this fix is not related to the Atlas bug, I have removed it from this PR and created this issue:  #910.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536850115", "createdAt": "2020-12-05T18:36:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalProductOpt.java", "diffHunk": "@@ -35,27 +35,28 @@ public LocalProductOpt(BaseDTO dto) {\n     public void getSupportedLocales(MessageCacheItem cacheItem) {\n         List<String> supportedLocales = new ArrayList<String>();\n         try {\n-\n             Path path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl());\n \n             URI uri = Thread.currentThread().getContextClassLoader().\n                     getResource(path.toString()).toURI();\n \n             if (uri.getScheme().equals(\"jar\")) {\n-                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-                    path = fileSystem.getPath(path.toString());\n-                    getSupportedLocales(path, supportedLocales);\n+                synchronized (LocalFileSystem.getInstance()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwNDU3NA=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTExODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjozOTo0OFrOH997sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzoxMjowOVrOH-nw4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczOTg5MA==", "bodyText": "It will continue execute the following code after this line finish.\nSo either add return statement after this line or put it into if-else block.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534739890", "createdAt": "2020-12-03T06:39:48Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,8 +50,11 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n+\t\tif (!proceed(dataSource))\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource in the queue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyNTI0OQ==", "bodyText": "I had updated this yesterday. Perhaps you did not see?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535425249", "createdAt": "2020-12-03T17:12:09Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,8 +50,11 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n+\t\tif (!proceed(dataSource))\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource in the queue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDczOTg5MA=="}, "originalCommit": {"oid": "117b8b2131600336b0563874390108697b98444a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTI5ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowNToyNFrOH9_4FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowNToyNFrOH9_4FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3MTczMg==", "bodyText": "No need to call \"toString()\" method as formatting and string conversion is done by the Formatter.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534771732", "createdAt": "2020-12-03T07:05:24Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,44 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) {\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n+\n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<Locale> supportedLocales = ps.getSupportedLocales(false, dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTMxNDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzowNzozNlrOH-ADsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo0NzoyMFrOH-2EFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NDcwNA==", "bodyText": "I think it's not good to bring so many parameters to method, and so many similar methods. This makes it difficult to read and hard to maintain.\nPlease improve the design.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534774704", "createdAt": "2020-12-03T07:07:36Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyNjA0Nw==", "bodyText": "What is your suggested design? I see that you are not a fan of method overloading. Would you prefer 2 different method names and repeated code with slightly different behavior?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535426047", "createdAt": "2020-12-03T17:13:17Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NDcwNA=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY1OTU0Mg==", "bodyText": "See the updated code. I have cleaned up some methods.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535659542", "createdAt": "2020-12-03T21:47:20Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc3NDcwNA=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTQ1MDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoyMzo0MlrOH-Bh3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo0OToyMVrOH-2OLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5ODgxNA==", "bodyText": "It's not good to use this method everywhere. We should use only one type - set or list - internally.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534798814", "createdAt": "2020-12-03T07:23:42Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyODc2NQ==", "bodyText": "They are both Set type. List was not used. This method converts from Set language tags to Set locales.\nThis is outside of this PR's scope. The method has been there since before this PR. Changing this will affect other parts of the code that is outside of this PR: LocalLocaleOpt needs Set but LocaleUtility.pickupLocaleFromList needs Set\u2014both are not included in this PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535428765", "createdAt": "2020-12-03T17:16:58Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5ODgxNA=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2MjEyNQ==", "bodyText": "See the updated code. I have moved this utility method to LocaleUtilityand used it for the call to LocaleUtility.pickupLocaleFromList only.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535662125", "createdAt": "2020-12-03T21:49:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDc5ODgxNA=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTUwMzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzoyOTowOVrOH-CGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzoyOTo0OVrOH-ohkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgwODIwNw==", "bodyText": "What if refreshing cache fails?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534808207", "createdAt": "2020-12-03T07:29:09Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        if (withCacheRefresh)\n+            return getSupportedLanguageTags(dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQzNzcxMw==", "bodyText": "No changes here.  If cacheItem is expired, getSupportedLanguageTags(dataSource) returns the expired cacheItem and refreshes the cacheItem in a separate thread. If the cacheItem is not in cache yet and populating the cache fails, it returns an empty Set. The behavior is the same as before this PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535437713", "createdAt": "2020-12-03T17:29:49Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        if (withCacheRefresh)\n+            return getSupportedLanguageTags(dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgwODIwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTU1ODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzozNDo1OFrOH-CsXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzozNDo1OFrOH-CsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgxNzg4NA==", "bodyText": "I think parameter 'withCacheRefresh' makes no sense because cache must be populated before judgement.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534817884", "createdAt": "2020-12-03T07:34:58Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -105,10 +122,13 @@ public ProductService(BaseDTO dto) {\n         }\n     }\n \n-    public boolean isSupportedLocale(Locale locale) {\n-        return getSupportedLanguageTags().contains(LocaleUtility.fmtToMappedLocale(locale).toLanguageTag());\n+    public boolean isSupportedLocale(boolean withCacheRefresh, Locale locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY1OTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0NjozMlrOH-DysQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0NjozMlrOH-DysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgzNTg4OQ==", "bodyText": "In this code lines, getting supported locales from cache are executed twice. It's redundant and inefficient. Please improve the design.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534835889", "createdAt": "2020-12-03T07:46:32Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,44 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) {\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n+\n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<Locale> supportedLocales = ps.getSupportedLocales(false, dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales.toString());\n \n+\t\treturn (supportedLocales.isEmpty() ||\n+\t\t\t\tps.isSupportedLocale(false, dataSource, Locale.forLanguageTag(dto.getLocale())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTgyNzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMzo0MFrOH-FoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzo0Mzo0NFrOH-pG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NTk2OQ==", "bodyText": "By our design, the refreshment should be done at each time getting supported locales rather than here.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534865969", "createdAt": "2020-12-03T08:03:40Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +131,43 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.error(\"Failed to refresh list of supported locales.\");\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ0NzI0OQ==", "bodyText": "Yes, cache refresh is done as needed every time you get the list of supported locales. In other words, every time ProductService.getSupportedLocales(DataSourceEnum) is called\u2014If cache has expired, it refreshes the cache in a separate thread. However, if data is not yet in cache, this method waits for the response before returning. Now, there is no problem with this if cache is initialized at application start up time. In fact, we want it to wait for the response in that case. However, if initializeCache=false, the very first call to this method which is triggered in Locale Matching causes a delay. Worst, if this very first call to the method fails, everything fails..which should not be the case. It should just continue and try to fetch the message bundle using the originally requested locale.\nIn the design spec: https://confluence.eng.vmware.com/pages/viewpage.action?pageId=530637182#SingletonClientLibrary-Caching,FallbackMechanism,andOtherFeatures-L10nLocaleMatching, see when \"L10n Fetch for list of supported locales\" is triggered simultaneously, but does not block the L10n Query workflow.\nIn the L10n Query workflow: https://confluence.eng.vmware.com/pages/viewpage.action?pageId=530637182#SingletonClientLibrary-Caching,FallbackMechanism,andOtherFeatures-L10nQuery, you will see that there is no judgment box for whether \"L10n Locale Matching\" is successful or not. The path just continues no matter what the result of the locale matching is (non-blocking)", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535447249", "createdAt": "2020-12-03T17:43:44Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -111,20 +131,43 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n \t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\n+\t\t\t/*\n+\t\t\t * Do not block createCacheItem if set of supported locales is not in cache (i.e. ps.getSupportedLocales(false).isEmpty()).\n+\t\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t\t */\n+\t\t\tif (ps.getSupportedLocales(false).isEmpty() || ps.isSupportedLocale(false, locale) || VIPCfg.getInstance().isPseudo()) {\n \t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n \t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t} else   // Requested locale is not supported and does not match any supported locales\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n+\tprivate void refreshSupportedLocalesTask() {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tRunnable runnable = () -> {\n+\t\t\ttry {\n+\t\t\t\tps.getSupportedLocales();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.error(\"Failed to refresh list of supported locales.\");\n+\t\t\t}\n+\t\t};\n+\t\tnew Thread(runnable).start();\n+\t}\n+\n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\trefreshSupportedLocalesTask();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NTk2OQ=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTgzNzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNDo0M1rOH-FvXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxMzo1MToxOVrOH_5_EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw==", "bodyText": "We should cache this instead of merging every time.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r534867807", "createdAt": "2020-12-03T08:04:43Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1MDM2Mg==", "bodyText": "Caching a combined set will duplicate the data in memory, so the footprint will unnecessarily increase. Note that the separated sets (per data source) are also required.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535450362", "createdAt": "2020-12-03T17:48:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNjA5NA==", "bodyText": "@jessiejuachon I have below questions:\n\nCaching a combined set should reduce the data in memory, I can't understand how duplicate?\nSince the locale list and component list data size is small, so the footprint won't increase so much.\nAlso don't understand why separated sets (per data source) are also required?\n\nSince they may not have relation to 882, so shouldn't block this PR merged.\nIf need optimize, of course this can be done in a new PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536216094", "createdAt": "2020-12-04T16:19:42Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNjEwMg==", "bodyText": "If this is what Xiaochao means by caching the combined set, then cache will have:\n\n\noffline + online locales\noffline locales\nonline locales\n1 above is a duplicate of # 2 + # 3\n\n\n\nNot so much of an increase, but why the need to increase it? Combining 2 and 3 at runtime is just O(1) time complexity anyway. I think either way, is fine.\n\n\nSee how ComponentService.proceed uses ProductService.getCachedSupportedLocales(dataSource). It checks if the locale currently being requested is supported in the specific dataSource.  This is because the list of supported locales may be different between offline and online at runtime. We had discussed some use cases some time ago: if new locales are added to remote VIP service at runtime, or if new message bundles are added to SAAS product before updating VIP service.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536236102", "createdAt": "2020-12-04T16:49:26Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc3MjM2OQ==", "bodyText": "As huihui said, the additional footprint isn't much because they are just a very few strings. But will improve performance greatly. Don't need to combine two set anymore.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536772369", "createdAt": "2020-12-05T13:51:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,24 +72,41 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    public Set<Locale> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the list of locales of a product.\n      *\n+     * @param withCacheRefresh If true, it recursively applies data source fallback mechanism in case of failure.\n      * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh));\n+    }\n+\n+    public Set<Locale> getSupportedLocales(boolean withCacheRefresh, DataSourceEnum dataSource) {\n+        return langTagtoLocaleSet(getSupportedLanguageTags(withCacheRefresh, dataSource));\n     }\n \n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLanguageTags(boolean withCacheRefresh) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            supportedLangTags.addAll(getSupportedLanguageTags(withCacheRefresh, msgSourceQueueIter.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2NzgwNw=="}, "originalCommit": {"oid": "7ae72d527ef95c5aefab314b1235b1cd75267b6e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjM4NDI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyNDoxNFrOH_EAwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNDo1M1rOH_a5_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4ODA2Ng==", "bodyText": "I think the flow should as below:\nGet supported locales from product service. Returning null if cache is empty.  The product service will refresh cache.\nIf supported locales isn't empty, then pick up locale from them.\nCurrent implementation is a little messy, hard to read and maintain.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535888066", "createdAt": "2020-12-04T07:24:14Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());\n+\n+\t\tProductService ps = new ProductService(dto);\n+\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\tps.refreshSupportedLocalesTask();\n+\n+\t\t//Match against list of supported locales that is already in the cache\n+\t\tSet<Locale> supportedLocales = LocaleUtility.langTagtoLocaleSet(ps.getCachedSupportedLocales());\n+\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(supportedLocales, Locale.forLanguageTag(dto.getLocale()));\n+\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\tdto.setLocale(matchedLocale.toLanguageTag());\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MzE2NQ==", "bodyText": "Looks pretty much the same to me. Based on the flow you described\n\nComponentService will get supported locales from product service\nThis PR does it when ComponentService.doLocaleMatching calls ps.getCachedSupportedLocales().\nThe product service returns an empty set if cache of locales is not found.\nProductService.getCachedSupportedLocales() in # 1 returns an empty set if not found in cache.\nThe Product Service will refresh the cache if needed\nSure, ProductService.getCachedSupportedLocales now refreshes the cache in a separate thread instead of doing it separately here.\nIf supported locales set isn't null/empty, then pick up the locale from them.\nThis PR does it in ComponentService.doLocaleMatching after step 2: dto.setLocale(matchedLocale.toLanguageTag());\n\nAs 99% of the flow matches (only #3 needs some update, I am not sure what you mean by \"little messy, hard to read and maintain\".\nThe only added logic to the flow is ComponentService.proceed(), which is only called when message bundle is not yet in cache or is expired. This is for performance enhancement.  ComponentService.proceed calls ps.getCachedSupportedLocales(dataSource) to check if the requested locale (dto.getLocale()) is supported in that specific data source. This is so that if it is not supported in that data source, it won't even try to fetch the message bundle. This is important especially if that invalid fetch is to a remote VIP service which will affect performance.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536263165", "createdAt": "2020-12-04T17:34:53Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());\n+\n+\t\tProductService ps = new ProductService(dto);\n+\n+\t\t//Refresh the cache of supported locales as needed in a separate thread (non-blocking).\n+\t\tps.refreshSupportedLocalesTask();\n+\n+\t\t//Match against list of supported locales that is already in the cache\n+\t\tSet<Locale> supportedLocales = LocaleUtility.langTagtoLocaleSet(ps.getCachedSupportedLocales());\n+\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(supportedLocales, Locale.forLanguageTag(dto.getLocale()));\n+\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\tdto.setLocale(matchedLocale.toLanguageTag());\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4ODA2Ng=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQ0NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0Mzo0NVrOH_Ei1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDowOTozOFrOH_6fUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5Njc4OQ==", "bodyText": "The interfaces should be consistent.\nDo you plan to create such interface for component module as getCachedMessages or create interface getCacheComponents for component list?\nIf cache is empty, just populate the cache. if not, then return cache data and refresh cache if it's expired.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535896789", "createdAt": "2020-12-04T07:43:45Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3MDQ0Nw==", "bodyText": "Please review the other issue linked to this: #877:\nWe do not need getCachedXXX for other data. We only need the presence/absence of cached supported locales to be non-blocking.\ngetCachedSupportedLcoales is an exception because we use it to pre-determine if getComponentMessages must even proceed or not. The locale list is not the requested information. It is used for performance enhancement only: so that if locale is not supported, it won't even try to fetch the bundle, and it will directly serve fallback locale bundle. However, if this performance-related call to getSupportedLocales was not even previously cached, it defeats its purpose. Not having this list in the cache should not make the call to getComponentMessages wait. Why wait for a separate call to getSupportedLocales when it can send this very first call to getComponentMessages directly? Refreshing the locales list can be done simultaneously in a separate thread to benefit succeeding getComponentMessages calls, but it is of no benefit to the first call at this point.\nMore importantly, if getSupportedLocales previously failed (or keeps on failing like in Atlas because FileSystems.newFilesSystems walk does not work in nested jars for Java 11 or less), it should definitely not block getComponentMessages. Otherwise, localized messages cannot be served at all. This is an unacceptable bug. Hence, we use getCachedSupportedLocales to just search from cache and not have to wait to fetch supported locales from data source every time, which is expected to fail in this scenario.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536270447", "createdAt": "2020-12-04T17:46:51Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5Njc4OQ=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MDYyNQ==", "bodyText": "It seems you created so much code just to work around an extreme situation, getSupportedLocales keeps fail. In this case,  we should remove test supported locales because stability takes precendence over performance. Let users take charge of it. Get the supported locale before getting translation or bear the delay of unsupported locale. In fact this logic has been there before for a long time.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536780625", "createdAt": "2020-12-05T14:09:38Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5Njc4OQ=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU4OTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyMzoyM1rOH_FyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0MjowOFrOH_jBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzIyOQ==", "bodyText": "It seems a new update process can be started after previous one has started successfully. right?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535917229", "createdAt": "2020-12-04T08:23:23Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3NDM0Mw==", "bodyText": "Yes, and that is why inside the synchronized block, another if (cacheItem.isExpired()) is done so that it will not proceed with the update if previous thread has already refreshed the cacheItem.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536274343", "createdAt": "2020-12-04T17:53:22Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzIyOQ=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjEwMQ==", "bodyText": "Anyway, I have removed this part out of this PR to narrow down the scope. I will include it in another PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536396101", "createdAt": "2020-12-04T21:42:08Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxNzIyOQ=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjU5NjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyNDo1OVrOH_F2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0MjoyMFrOH_jBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODEzOA==", "bodyText": "Is this too coarse-grained, there is only one level3 cache globally. Does this mean that only one cache item can be created at the same time?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535918138", "createdAt": "2020-12-04T08:24:59Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.\n+                    if (cacheItem.isExpired())\n+                        refreshLocalesCacheItemTask(cacheItem, dataSource);\n+                }\n+            }\n             return cacheItem.getCachedData().keySet();\n         } else {\n-            cacheItem = createLocalesCacheItem(dataSource);\n+            // Allow only 1 thread to create the cacheItem.\n+            synchronized (TranslationCacheManager.getInstance().getCache(VIPCfg.CACHE_L3)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3NDk1OQ==", "bodyText": "I agree. Any suggestions on what object to use as a lock that will be specific to the item that does not exist yet?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536274959", "createdAt": "2020-12-04T17:54:21Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.\n+                    if (cacheItem.isExpired())\n+                        refreshLocalesCacheItemTask(cacheItem, dataSource);\n+                }\n+            }\n             return cacheItem.getCachedData().keySet();\n         } else {\n-            cacheItem = createLocalesCacheItem(dataSource);\n+            // Allow only 1 thread to create the cacheItem.\n+            synchronized (TranslationCacheManager.getInstance().getCache(VIPCfg.CACHE_L3)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODEzOA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjIyMw==", "bodyText": "I have removed this part out of this PR to narrow down the scope. I will include it in another PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536396223", "createdAt": "2020-12-04T21:42:20Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {\n         Iterator<DataSourceEnum> msgSourceQueueIter = VIPCfg.getInstance().getMsgOriginsQueue().iterator();\n         Set<String> supportedLangTags = new HashSet<>();\n         while(msgSourceQueueIter.hasNext()) {\n-            supportedLangTags.addAll(getSupportedLanguageTags(msgSourceQueueIter.next()));\n+            if (refreshCache)\n+                supportedLangTags.addAll(getSupportedLocales(msgSourceQueueIter.next()));\n+            else\n+                supportedLangTags.addAll(getCachedSupportedLocales(msgSourceQueueIter.next()));\n         }\n         return supportedLangTags;\n     }\n \n-    public Set<String> getSupportedLanguageTags(DataSourceEnum dataSource) {\n+    /**\n+     * Retrieves the cached set of locales that are supported in the given data source.\n+     *\n+     * @param dataSource The data source\n+     * @return The cached set of locales that are supported in the given data source.\n+     */\n+    public Set<String> getCachedSupportedLocales(DataSourceEnum dataSource) {\n+        CacheService cs = new CacheService(new MessagesDTO(dto));\n+        MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n+        return cacheItem == null ? new HashSet<>() : cacheItem.getCachedData().keySet();\n+    }\n+\n+    /**\n+     * Retrieves the set of locales that are supported in the given data source.\n+     * It will trigger a cache populate or refresh as necessary before returning.\n+     *\n+     * @param dataSource The data source\n+     * @return The set of locales supported in the given data source.\n+     */\n+    public Set<String> getSupportedLocales(DataSourceEnum dataSource) {\n         CacheService cs = new CacheService(new MessagesDTO(dto));\n         MessageCacheItem cacheItem = cs.getCacheOfLocales(dataSource);\n         if (cacheItem != null) {\n-            if (cacheItem.isExpired())\n-                refreshLocalesCacheItemTask(cacheItem, dataSource);\n+            if (cacheItem.isExpired()) {\n+                synchronized (cacheItem) { // Allow only 1 thread to refresh the cacheItem at a time.\n+                    if (cacheItem.isExpired())\n+                        refreshLocalesCacheItemTask(cacheItem, dataSource);\n+                }\n+            }\n             return cacheItem.getCachedData().keySet();\n         } else {\n-            cacheItem = createLocalesCacheItem(dataSource);\n+            // Allow only 1 thread to create the cacheItem.\n+            synchronized (TranslationCacheManager.getInstance().getCache(VIPCfg.CACHE_L3)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODEzOA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjYwODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODoyODoxOVrOH_F9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0NDo0M1rOH_jGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMDAwNg==", "bodyText": "It's better to create 2 method, one is getSupportedLocales and another is refreshSupportedLocales to reduct ambiguity.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535920006", "createdAt": "2020-12-04T08:28:19Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NzMxNQ==", "bodyText": "I have renamed this to combineSupportedLocales. The overloading should be clear. Below are the method signatures\n\ngetSupportedLocales() - gets all supported locales (from all data sources)\ngetSupportedLocales(dataSource) - gets supported locales from the specified data source\ngetCachedSupportedLocales() - gets all supported locales (from all data sources) from cache\ngetCachedSupportedLocales(dataSource) - gets supported locales from the specified data source from cache\nprivate combineSupportedLocales (refreshCache) - combines the list of supported locales from all dataSources. Used in # 1 and # 3.\n\nI have also updated javadoc for all methods.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536397315", "createdAt": "2020-12-04T21:44:43Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {\n+        return getSupportedLocales(false);\n+    }\n+\n     /**\n-     * Retrieves the list of locales of a product. It recursively applies data source fallback mechanism in case of failure.\n+     * Retrieves the set of supported locales.\n      *\n-     * @return list of locales of the product specified in the dto object, or an empty list in case of failure to retrieve from any data source.\n+     * @param refreshCache If true, it will trigger a cache populate or refresh as necessary before returning.\n+     *                         If false, it will return the data from the cache as is, or an empty Set if not in cache.\n+     * @return The set of supported locales.\n      */\n-    public Set<Locale> getSupportedLocales() {\n-        return langTagtoLocaleSet(getSupportedLanguageTags());\n-    }\n-\n-    public Set<String> getSupportedLanguageTags() {\n+    private Set<String> getSupportedLocales(boolean refreshCache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMDAwNg=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjczMzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1NzoxN1rOH_HC4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODowMDowMFrOH_b1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNzc2Mw==", "bodyText": "Why proceed if pseudo is true?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535937763", "createdAt": "2020-12-04T08:57:17Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,47 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) { //Requested locale is not supported, does not match any supported locales\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n \n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<String> supportedLocales = ps.getCachedSupportedLocales(dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales);\n+\n+\t\t/*\n+\t\t * Do not block refreshCacheItem if set of supported locales is not in cache (i.e. supportedLocales.isEmpty()).\n+\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t */\n+\t\treturn (supportedLocales.isEmpty() || supportedLocales.contains(dto.getLocale()) || VIPCfg.getInstance().isPseudo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3ODM1Nw==", "bodyText": "This has been there since before this PR. I just moved the if-statement judgements from ComponentService.getMessage to here, so no change here.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536278357", "createdAt": "2020-12-04T18:00:00Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -49,25 +50,47 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t\t\treturn;\n \t\t}\n \n-\t\tlong timestampOld = cacheItem.getTimestamp();\n \t\tDataSourceEnum dataSource = msgSourceQueueIter.next();\n-\t\tString localeOrig = dto.getLocale();\n-\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n-\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n-\t\t}\n-\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n-\t\tlong timestamp = cacheItem.getTimestamp();\n-\t\tif (timestampOld == timestamp) {\n-\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n-\t\t}\n-\t\tdto.setLocale(localeOrig);\n+\t\tif (!proceed(dataSource)) { //Requested locale is not supported, does not match any supported locales\n+\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter); // Try the next dataSource\n+\t\t} else {\n+\t\t\tlong timestampOld = cacheItem.getTimestamp();\n+\t\t\tString localeOrig = dto.getLocale();\n+\t\t\tif (dataSource.equals(DataSourceEnum.VIP) && dto.getLocale().equals(ConstantsKeys.SOURCE)) {\n+\t\t\t\tdto.setLocale(ConstantsKeys.LATEST);\n+\t\t\t}\n+\t\t\tdataSource.createMessageOpt(dto).getComponentMessages(cacheItem);\n+\t\t\tlong timestamp = cacheItem.getTimestamp();\n+\t\t\tif (timestampOld == timestamp) {\n+\t\t\t\tlogger.debug(FormatUtils.format(ConstantsMsg.GET_MESSAGES_FAILED, dto.getComponent(), dto.getLocale(), dataSource.toString()));\n+\t\t\t}\n+\t\t\tdto.setLocale(localeOrig);\n \n-\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n-\t\tif (timestamp == 0) {\n-\t\t\t// Try the next dataSource in the queue\n-\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t// If timestamp is 0, it means that cacheItem not yet in cache. So try the next data source.\n+\t\t\tif (timestamp == 0) {\n+\t\t\t\t// Try the next dataSource in the queue\n+\t\t\t\trefreshCacheItem(cacheItem, msgSourceQueueIter);\n+\t\t\t}\n \t\t}\n+\t}\n \n+\t/**\n+\t * @return 'true' for either of the following cases. Otherwise, false (locale not supported in data source).\n+\t * <ul>\n+\t * \t<li>the dataSource's set of supported locales is not in cache. If the list is not in cache, it should not block refreshCacheItem</li>\n+\t * \t<li>the requested locale is found in the data source's cached set of supported locales.</li>\n+\t * </ul>\n+\t */\n+\tprivate boolean proceed(DataSourceEnum dataSource) {\n+\t\tProductService ps = new ProductService(dto);\n+\t\tSet<String> supportedLocales = ps.getCachedSupportedLocales(dataSource);\n+\t\tlogger.debug(\"supported languages: [{}]\", supportedLocales);\n+\n+\t\t/*\n+\t\t * Do not block refreshCacheItem if set of supported locales is not in cache (i.e. supportedLocales.isEmpty()).\n+\t\t * This happens either when cache is not initialized, OR previous attempts to fetch the set had failed.\n+\t\t */\n+\t\treturn (supportedLocales.isEmpty() || supportedLocales.contains(dto.getLocale()) || VIPCfg.getInstance().isPseudo());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNzc2Mw=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjc0MTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODo1ODo1OFrOH_HHXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1NToyOFrOH_joHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODkwOA==", "bodyText": "The only reason we need this interface is that supported locales isn't cached. Suggest cache it when initialization. Then all the logic will be same as other features.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535938908", "createdAt": "2020-12-04T08:58:58Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyOTc4NA==", "bodyText": "I also agree cache locale list when initialization no matter initializeCache is true or false, since it may reduce the chance of locale list fetching be triggered by message fetching which can improve performance at message fetching.\nFurther more, we may remove fetch locale list task code at message fetching.\nThis can be done in a new PR.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536229784", "createdAt": "2020-12-04T16:39:44Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODkwOA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4MDI0NA==", "bodyText": "We should not force to cache this at app start up. This is why we have initializeCache property in the config. You may look at this as \"small\" data to always preload at start up time, but this is poor coding practice. We always lazy-load when possible. For instance whenever we use the Singleton design pattern, we do no even initialize the instance until it is needed (lazy initialization). Same should apply here.\n\nBesides, why are you against caching the list in a separate thread only when requested instead of at app start up time? It calls the exact same code (ProductService.processSupportedLocales). We just added a logic to call createLocalesCacheItemTask in a separate thread if it needs to be non-blocking. Nothing else was changed in the existing logic.\n\nIn some cases, getSupportedLocales from offline resource bundle will always fail (FileSystems.newFileSystem walk fails in nested jar applications like in Atlas for Java 11 or less), so always calling getSupportedLocales that fails will affect performance as it tries to read from the disk (slow).", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536280244", "createdAt": "2020-12-04T18:03:03Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODkwOA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNjA0NA==", "bodyText": "Please check ProductService. The code is now more unified.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536406044", "createdAt": "2020-12-04T21:55:28Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzODkwOA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjgwMzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOToxMzo1NFrOH_HrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODowMzoyOVrOH_b9xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODA0OA==", "bodyText": "If this is necessary. Suggest to do this when create dto object.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r535948048", "createdAt": "2020-12-04T09:13:54Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4MDUxNg==", "bodyText": "Absolutely necessary. This one matches 'fr' to 'fr-CA' if 'fr-CA' is not supported. This has been there even before this PR.  Let's not change it here.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536280516", "createdAt": "2020-12-04T18:03:29Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -109,22 +132,28 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \t\t\tif (cacheItem.isExpired())\n \t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n \t\t} else { // Item is not in cache.\n-\t\t\tProductService ps = new ProductService(dto);\n-\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n-\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n-\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n-\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n-\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n-\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n \t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t}\n+\n \t\treturn cacheItem;\n \t}\n \n \tprivate void doLocaleMatching() {\n-\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(), Locale.forLanguageTag(dto.getLocale()));\n-\t\tif (matchedLocale != null) // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\tdto.setLocale(LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0ODA0OA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzI4NTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNTo1N1rOH_MCfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTowNTo1N1rOH_MCfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxOTU4Mw==", "bodyText": "close the stream?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536019583", "createdAt": "2020-12-04T11:05:57Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDQ3NDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTo0OTozMVrOH_Ww0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxODo0MVrOH_gmeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTI4MA==", "bodyText": "Actually when locale list is in cache, you won't populate it, so here 'refreshSupportedLocalesTask' may not appropriate, how about 'getSupportedLocalesTask'?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536195280", "createdAt": "2020-12-04T15:49:31Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -143,13 +175,16 @@ private MessageCacheItem createLocalesCacheItem(DataSourceEnum dataSource) {\n         }\n         return null;\n     }\n-    private Set<Locale> langTagtoLocaleSet (Set<String> languageTags) {\n-        Set<Locale> locales = new HashSet<>();\n-        if (languageTags != null) {\n-            for (String languageTag : languageTags) {\n-                locales.add(Locale.forLanguageTag(languageTag));\n+\n+    public void refreshSupportedLocalesTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NjQ3Mw==", "bodyText": "I have removed this task entirely. See code changes.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536356473", "createdAt": "2020-12-04T20:18:41Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -143,13 +175,16 @@ private MessageCacheItem createLocalesCacheItem(DataSourceEnum dataSource) {\n         }\n         return null;\n     }\n-    private Set<Locale> langTagtoLocaleSet (Set<String> languageTags) {\n-        Set<Locale> locales = new HashSet<>();\n-        if (languageTags != null) {\n-            for (String languageTag : languageTags) {\n-                locales.add(Locale.forLanguageTag(languageTag));\n+\n+    public void refreshSupportedLocalesTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NTI4MA=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDU1ODg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjowODoxM1rOH_XjLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDoxMzo1NlrOH_6neA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODE3Mw==", "bodyText": "There are 3 'getSupportedLocales' methods and 2 'getCachedSupportedLocales' methods, and they call each other, and seems 2 'getCachedSupportedLocales' are not the relation of overload, it's a little difficult to understand the relationship of these methods, it's better optimize the methods' name.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536208173", "createdAt": "2020-12-04T16:08:13Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NTUyNQ==", "bodyText": "I have renamed 1 method only. The overloading should be clear. Look how the method signatures are self-explanatory.. descriptions seem to be repetitive of what is already obvious.\n\ngetSupportedLocales() - gets all supported locales (from all data sources)\ngetSupportedLocales(dataSource) - gets supported locales from the specified data source\ngetCachedSupportedLocales() - gets all supported locales (from all data sources) from cache\ngetCachedSupportedLocales(dataSource) - gets supported locales from the specified data source from cache\nprivate combineSupportedLocales (refreshCache) - combines the list of supported locales from all dataSources. Used in # 1 and # 3.\n\nI have also updated javadoc for all methods.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536365525", "createdAt": "2020-12-04T20:37:14Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODE3Mw=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc4MjcxMg==", "bodyText": "according OO thinking, the dataSource should be responsible of its methods instead of product service.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536782712", "createdAt": "2020-12-05T14:13:56Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java", "diffHunk": "@@ -72,44 +73,75 @@ public ProductService(BaseDTO dto) {\n         return components;\n     }\n \n+    private Set<String> getSupportedLocales() {\n+        return getSupportedLocales(true);\n+    }\n+\n+    public Set<String> getCachedSupportedLocales() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwODE3Mw=="}, "originalCommit": {"oid": "f47feea51f629fd43fce5d37db886abd60ba831f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2ODUwNzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxNDozMDowMFrOH_7EAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxODo0MDo1M1rOH_-4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDAxOA==", "bodyText": "Why change FileSystem to getResourceAsStream?", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536790018", "createdAt": "2020-12-05T14:30:00Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();\n+\t\t\tJSONParser jsonParser = new JSONParser();\n+\t\t\tJSONObject jsonObject = (JSONObject) jsonParser.parse(new InputStreamReader(is, \"UTF-8\"));\n+\t\t\tMap<String, String> messages = (JSONObject) jsonObject.get(\"messages\");\n \t\t\tcacheItem.setCacheItem(messages, null, System.currentTimeMillis(), null);\n \t\t} catch (Exception e) {\n \t\t\tlogger.debug(e.getMessage());\n-\t\t\t// Do not update cacheItem\n \t\t}\n     }\n-    \n-    private List<Locale> getSupportedLocales() {\n-\t\tProductService ps = new ProductService(dto);\n-\t\tSet<String> supportedLanguages = ps.getSupportedLanguageTags(DataSourceEnum.Bundle);\n-        logger.debug(\"supported languages: [{}]\", supportedLanguages.toString());\n-    \tList<Locale> supportedLocales = new LinkedList<Locale>();\n-    \tfor (String languageTag : supportedLanguages) {\n-    \t\tsupportedLocales.add(Locale.forLanguageTag(languageTag));\n-    \t}\n-    \treturn supportedLocales;\n-    }\n+\n+\tprivate InputStream getInputStream() {\n+\t\tString locale = LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag();\n+\t\twhile (true) {\n+\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), locale);\n+\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n+\t\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b6e2f49a6b61b1b693df24c5e2e9f4eb462023"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg1MjUyMw==", "bodyText": "This is one of the primary root causes of the bug. Aside from getSupportedLocales is failing, and even if it succeeds, getComponentMessages is also failing! This is because FileSystems.newFileSystem fails in nested jars (not supported in Java 11 or below). However, getResourceAsStream does not fail! So getComponentMessages actually succeeds in this PR even for nested jars like in Atlas.", "url": "https://github.com/vmware/singleton/pull/878#discussion_r536852523", "createdAt": "2020-12-05T18:40:53Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -43,40 +43,37 @@ public JSONObject getComponentMessages() {\n     \n     @Override\n     public void getComponentMessages(MessageCacheItem cacheItem) {\n-        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange((dto.getLocale()))),\n-        \t\tgetSupportedLocales());\n \t\ttry {\n-\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), bestMatch.toLanguageTag());\n-\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n-\t\t\t\n-\t\t\tURI uri = Thread.currentThread().getContextClassLoader().\n-\t\t\t\t\tgetResource(path.toString()).toURI();\n-\t\t\t\n-\t\t\tMap<String, String> messages = null;\n-\t    \tif (uri.getScheme().equals(\"jar\")) {\n-\t\t\t\ttry(FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.<String, Object>emptyMap())) {\n-\t\t\t\t\tpath = fileSystem.getPath(path.toString());\n-\t\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tpath = Paths.get(uri);\n-\t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n-\t\t\t}\n+\t\t\tInputStream is = getInputStream();\n+\t\t\tJSONParser jsonParser = new JSONParser();\n+\t\t\tJSONObject jsonObject = (JSONObject) jsonParser.parse(new InputStreamReader(is, \"UTF-8\"));\n+\t\t\tMap<String, String> messages = (JSONObject) jsonObject.get(\"messages\");\n \t\t\tcacheItem.setCacheItem(messages, null, System.currentTimeMillis(), null);\n \t\t} catch (Exception e) {\n \t\t\tlogger.debug(e.getMessage());\n-\t\t\t// Do not update cacheItem\n \t\t}\n     }\n-    \n-    private List<Locale> getSupportedLocales() {\n-\t\tProductService ps = new ProductService(dto);\n-\t\tSet<String> supportedLanguages = ps.getSupportedLanguageTags(DataSourceEnum.Bundle);\n-        logger.debug(\"supported languages: [{}]\", supportedLanguages.toString());\n-    \tList<Locale> supportedLocales = new LinkedList<Locale>();\n-    \tfor (String languageTag : supportedLanguages) {\n-    \t\tsupportedLocales.add(Locale.forLanguageTag(languageTag));\n-    \t}\n-    \treturn supportedLocales;\n-    }\n+\n+\tprivate InputStream getInputStream() {\n+\t\tString locale = LocaleUtility.fmtToMappedLocale(dto.getLocale()).toLanguageTag();\n+\t\twhile (true) {\n+\t\t\tString filePath = FormatUtils.format(OFFLINE_RESOURCE_PATH, dto.getComponent(), locale);\n+\t\t\tPath path = Paths.get(VIPCfg.getInstance().getOfflineResourcesBaseUrl(), filePath);\n+\t\t\tInputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(path.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5MDAxOA=="}, "originalCommit": {"oid": "84b6e2f49a6b61b1b693df24c5e2e9f4eb462023"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4389, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}