{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODQzODM4", "number": 823, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyNjo1M1rOEtR9Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzozNzowNFrOExvXEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTE1NjA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vip/i18n/LocaleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyNjo1M1rOHg-7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToyNjo1M1rOHg-7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0NzUxNw==", "bodyText": "Add one more test case: zh is supported, zh-Hans and zh-Hant aren't supported.  Request zh-Hant will return null rather than zh.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504347517", "createdAt": "2020-10-14T01:26:53Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vip/i18n/LocaleTest.java", "diffHunk": "@@ -46,34 +42,72 @@ public void init() {\n     public void testPickupLocaleFromList() {\n         Locale[] supportedLocales = { Locale.forLanguageTag(\"de\"),\n                 Locale.forLanguageTag(\"es\"), Locale.forLanguageTag(\"fr\"),\n+                Locale.forLanguageTag(\"fr-CA\"),\n                 Locale.forLanguageTag(\"ja\"), Locale.forLanguageTag(\"ko\"),\n+                Locale.forLanguageTag(\"zh\"),\n                 Locale.forLanguageTag(\"zh-Hans\"),\n                 Locale.forLanguageTag(\"zh-Hant\")\n \n         };\n         Locale[] testLocales = { Locale.forLanguageTag(\"de\"),\n                 Locale.forLanguageTag(\"es\"), Locale.forLanguageTag(\"fr\"),\n+                Locale.forLanguageTag(\"fr-CA\"), Locale.forLanguageTag(\"fr-FR\"),\n                 Locale.forLanguageTag(\"ja\"), Locale.forLanguageTag(\"ko\"),\n-                Locale.forLanguageTag(\"zh\"), Locale.forLanguageTag(\"zh-CN\"),\n+                Locale.forLanguageTag(\"zh\"),\n+                Locale.forLanguageTag(\"zh-CN\"),\n                 Locale.forLanguageTag(\"zh-TW\"),\n                 Locale.forLanguageTag(\"zh-HANS-CN\"),\n                 Locale.forLanguageTag(\"zh-HANT-TW\"),\n                 Locale.forLanguageTag(\"zh-HANS\"),\n                 Locale.forLanguageTag(\"zh-HANT\") };\n \n-        String[] expectedLocales = { \"de\", \"es\", \"fr\", \"ja\", \"ko\", \"zh\",\n+        String[] expectedLocales = { \"de\", \"es\", \"fr\", \"fr-CA\", \"fr\", \"ja\", \"ko\", \"zh\",\n                 \"zh-Hans\", \"zh-Hant\", \"zh-Hans\", \"zh-Hant\", \"zh-Hans\", \"zh-Hant\" };\n \n         for (int i = 0; i < testLocales.length; i++) {\n             String matchedLanguageTag = LocaleUtility.pickupLocaleFromList(\n-                    Arrays.asList(supportedLocales), testLocales[i])\n+                    new HashSet<>(Arrays.asList(supportedLocales)), testLocales[i])\n                     .toLanguageTag();\n \n             logger.debug(matchedLanguageTag + \"-----\" + expectedLocales[i]);\n             Assert.assertEquals(expectedLocales[i], matchedLanguageTag);\n         }\n     }\n \n+    @Test\n+    public void testPickupLocaleFromListNotFound() {\n+        Locale[] supportedLocales = { Locale.forLanguageTag(\"de\"),\n+                Locale.forLanguageTag(\"es\"), Locale.forLanguageTag(\"fr\"),\n+                Locale.forLanguageTag(\"fr-CA\"),\n+                Locale.forLanguageTag(\"ja\"), Locale.forLanguageTag(\"ko\"),\n+                Locale.forLanguageTag(\"zh-Hans\"),\n+                Locale.forLanguageTag(\"zh-Hant\")\n+\n+        };\n+        Assert.assertNull(LocaleUtility.pickupLocaleFromList(new HashSet<>(Arrays.asList(supportedLocales)), Locale.forLanguageTag(\"fil\")));\n+    }\n+\n+    /**\n+     *  For any Chinese locale (zh-*) that is not supported,\n+     *  return null so that fallback locale will be used even if \"zh\" is supported.\n+     *  For any non-Chinese locale, return the best match (e.g. 'de' if 'de-DE' is not supported).\n+     */\n+    @Test\n+    public void testPickupLocaleFromList_special_case_zh_HK() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDE3MzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODozODozMFrOHhIXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODozODozMFrOHhIXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwMjA3Nw==", "bodyText": "Is it better rename 'getMessagesFallbackLocale' to 'getFallbackLocaleMessages' ?", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504502077", "createdAt": "2020-10-14T08:38:30Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getMessagesFallbackLocale(Iterator<Locale> fallbackLocalesIter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDMwMzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTowODo0NVrOHhJmKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0NToxNVrOHljeTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyMjI4MA==", "bodyText": "I think if you handle locale before looking for the messages from cache, the logic here may be  simplifier.\nIn my opinion, the logic should be as below:\n\nHandle locale:\nLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\nIf matchedLocale is not empty, use matchedLocale to fetch messages from data source;\nif matchedLocale is empty, directly use fallback locale to fetch messages from data source;\nif above fetch failed, fallback;", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504522280", "createdAt": "2020-10-14T09:08:45Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NjgzNw==", "bodyText": "I understand what you are saying. The problem with this is due to the legacy code where locale is part of the DTO. If the matched locale is not null, there are 2 possible scenarios:\na. The requested locale is a supported locale (exact match) -- lines 110-113\nHere, createCacheItem in line 111 fetches the matched locale and caches it. Take note that it uses the dto's locale to generate the cache key.\nb. The requested locale is not an exact match (e.g. fr-CA which is not supported matches fr which is supported) -- lines 117-118\nHere, createCacheItem must be done on the supported locale (fr), not the requested locale (fr-CA). If I directly call createCacheItem for this case, the cache key will have fr-CA for the same set of fr messages, causing duplicate sets of messages in the cache, which is not good. So, call ComponentService(matchedLocaleDTO).getMessages instead.\nThis is why these 2 scenarios are handled differently. We can refactor this in the future and extract locale out of the DTO, but I did not want to touch that legacy code for now.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504966837", "createdAt": "2020-10-14T20:55:44Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyMjI4MA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MDU1Nw==", "bodyText": "Can reseting dto's locale after locale matching resolve the problem you mentioned?\nI think when matchedLocale is not empty, all later logic(no matter find from cache or find from data source) should use matchedLocale, request locale is useless.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r509140557", "createdAt": "2020-10-21T09:45:15Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyMjI4MA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDM0MjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToxODo1NlrOHhJ-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDo0Mjo0OFrOHhkUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyODUwNA==", "bodyText": "Why use fallback locale instead of 'zh'?", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504528504", "createdAt": "2020-10-14T09:18:56Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -147,43 +142,15 @@ public static boolean isSameLocale(String locale1, String locale2) {\n     /*\n      * pick up the matched locale from a locale list\n      */\n-    public static Locale pickupLocaleFromList(List<Locale> locales,\n-            Locale preferredLocale) {\n-        Locale langLocale = null;\n-        preferredLocale = fmtToMappedLocale(preferredLocale);\n+    public static Locale pickupLocaleFromList(Set<Locale> locales,\n+                                              Locale preferredLocale) {\n+        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n \n-        // Use the first locale from the browser's list of preferred languages\n-        // for the matching, so that it can keep the same way of getting locale\n-        // with other VMware products, like vSphere Web Client, etc.\n-        for (Locale configuredLocale : locales) {\n-            // Language is matched\n-            configuredLocale = fmtToMappedLocale(configuredLocale);\n-            if (configuredLocale.getLanguage().equals(\n-                    preferredLocale.getLanguage())) {\n-                String configuredScript = configuredLocale.getScript();\n-                String preferredScript = preferredLocale.getScript();\n-                // Country is matched\n-                if (((preferredScript.equalsIgnoreCase(\"\")) && (configuredScript\n-                        .equalsIgnoreCase(\"\")))\n-                        || ((!preferredScript.equalsIgnoreCase(\"\")) && (preferredScript\n-                                .equalsIgnoreCase(configuredScript)))) {\n-                    return configuredLocale;\n-                }\n-                langLocale = langLocale == null ? configuredLocale : langLocale;\n-            }\n-        }\n-\n-        // With Chinese locale which is not configured/supported in web.xml, it\n-        // will return 'en_US' as default to meet the usage custom of Chinese,\n-        // e.g. for 'zh-HK' from client(browser) which is not\n-        // configured/supported yet, it will return 'en_US';\n-        // Other locale, like 'de-DE' 'ja-JP' etc.,\n-        // it will return 'de' 'ja'(main/parent language).\n-        if (langLocale != null\n-                && (!langLocale.getLanguage().equalsIgnoreCase(\"zh\"))) {\n-            return new Locale(langLocale.getLanguage());\n+        // For any Chinese locale (zh-*) that is not supported, use the fallback locale even if \"zh\" is supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MDA5OA==", "bodyText": "It has been like that previously. I am guessing it was an old requirement.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504960098", "createdAt": "2020-10-14T20:42:48Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -147,43 +142,15 @@ public static boolean isSameLocale(String locale1, String locale2) {\n     /*\n      * pick up the matched locale from a locale list\n      */\n-    public static Locale pickupLocaleFromList(List<Locale> locales,\n-            Locale preferredLocale) {\n-        Locale langLocale = null;\n-        preferredLocale = fmtToMappedLocale(preferredLocale);\n+    public static Locale pickupLocaleFromList(Set<Locale> locales,\n+                                              Locale preferredLocale) {\n+        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n \n-        // Use the first locale from the browser's list of preferred languages\n-        // for the matching, so that it can keep the same way of getting locale\n-        // with other VMware products, like vSphere Web Client, etc.\n-        for (Locale configuredLocale : locales) {\n-            // Language is matched\n-            configuredLocale = fmtToMappedLocale(configuredLocale);\n-            if (configuredLocale.getLanguage().equals(\n-                    preferredLocale.getLanguage())) {\n-                String configuredScript = configuredLocale.getScript();\n-                String preferredScript = preferredLocale.getScript();\n-                // Country is matched\n-                if (((preferredScript.equalsIgnoreCase(\"\")) && (configuredScript\n-                        .equalsIgnoreCase(\"\")))\n-                        || ((!preferredScript.equalsIgnoreCase(\"\")) && (preferredScript\n-                                .equalsIgnoreCase(configuredScript)))) {\n-                    return configuredLocale;\n-                }\n-                langLocale = langLocale == null ? configuredLocale : langLocale;\n-            }\n-        }\n-\n-        // With Chinese locale which is not configured/supported in web.xml, it\n-        // will return 'en_US' as default to meet the usage custom of Chinese,\n-        // e.g. for 'zh-HK' from client(browser) which is not\n-        // configured/supported yet, it will return 'en_US';\n-        // Other locale, like 'de-DE' 'ja-JP' etc.,\n-        // it will return 'de' 'ja'(main/parent language).\n-        if (langLocale != null\n-                && (!langLocale.getLanguage().equalsIgnoreCase(\"zh\"))) {\n-            return new Locale(langLocale.getLanguage());\n+        // For any Chinese locale (zh-*) that is not supported, use the fallback locale even if \"zh\" is supported.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyODUwNA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQ4NjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NTowN1rOHhLXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTo0NjozM1rOHjQqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA==", "bodyText": "We can unify this these 2 situations. If matchedLocale == null, then set locale to fallback locale. Get its translation afterwards.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504551228", "createdAt": "2020-10-14T09:55:07Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MjA0MQ==", "bodyText": "You have a similar comment as Huihui. Pasting my reply below:\nThe problem with this is due to the legacy code where locale is part of the DTO. If the matched locale is not null, there are 2 possible scenarios:\na. The requested locale is a supported locale (exact match) -- lines 110-113\nHere, createCacheItem in line 111 fetches the matched locale and caches it. Take note that it uses the dto's locale to generate the cache key.\nb. The requested locale is not an exact match (e.g. fr-CA which is not supported matches fr which is supported) -- lines 117-118\nHere, createCacheItem must be done on the supported locale (fr), not the requested locale (fr-CA). If I directly call createCacheItem for this case, the cache key will have fr-CA for the same set of fr messages, causing duplicate sets of messages in the cache, which is not good. So, call ComponentService(matchedLocaleDTO).getMessages instead.\nThis is why these 2 scenarios are handled differently. We can refactor this in the future and extract locale out of the DTO, but I did not want to touch that legacy code for now.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r504972041", "createdAt": "2020-10-14T21:06:12Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxODk3OQ==", "bodyText": "I think that our comments are different. I'm saying 115~120.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r505218979", "createdAt": "2020-10-15T06:49:41Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1OTcyNA==", "bodyText": "I do not understand then. Could you please provide a code suggestion?", "url": "https://github.com/vmware/singleton/pull/823#discussion_r505959724", "createdAt": "2020-10-16T01:19:08Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3MzgyMg==", "bodyText": "Please check this code suggestion for 115 - 120:\nProductService ps = new ProductService(dto);\nLocale localeToQuery = Locale.forLanguageTag(dto.getLocale());\nif (!ps.isSupportedLocale(localeToQuery)) {\nlocaleToQuery = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), localeToQuery);\nif (localeToQuery == null) {// Requested locale is not supported and does not match any supported locales\nif (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\nlocaleToQuery = fallbackLocalesIter.next();\n}\n} else {\nreturn new MessageCacheItem();\n}\n}\n\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), localeToQuery.toLanguageTag(), dto.getProductID(), dto.getVersion());\n\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n\t}", "url": "https://github.com/vmware/singleton/pull/823#discussion_r505973822", "createdAt": "2020-10-16T01:47:02Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczNTIwOQ==", "bodyText": "Thanks for the code suggestion. It will work, but I think what I currently have is cleaner and has less lines of code, don't you think? Basically, your if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) \nis a repeat of line 132 in getMessagesFallbackLocale.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r506735209", "createdAt": "2020-10-16T21:46:33Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +106,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getMessagesFallbackLocale(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTIyOA=="}, "originalCommit": {"oid": "dd03ac877e2f0b986ee8b3e8df69c2d025887875"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDc1ODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNjo1ODo1M1rOHh01FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjoyOTo1NlrOHjRcRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMDYxMg==", "bodyText": "Is it necessary to judge dto locale is same as the fallback locale?", "url": "https://github.com/vmware/singleton/pull/823#discussion_r505230612", "createdAt": "2020-10-15T06:58:53Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +105,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b1fd9470c31ddac319b39ec4b67a4605685c96"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0Nzk3Mg==", "bodyText": "It's not necessary, but it is an improvement. If we do not check for dto.getLocale == fallback and it happens, it will just try to fetch for the dto locale again and will fail again, and move on to the next item in the queue. Nonetheless, I have added the check for optimization.\nMoreover, I hsve removed the following restriction to allow falling back to SOURCE messages:\n!dto.getLocale().equals(ConstantsKeys.SOURCE)", "url": "https://github.com/vmware/singleton/pull/823#discussion_r506747972", "createdAt": "2020-10-16T22:29:56Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -108,38 +105,48 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMDYxMg=="}, "originalCommit": {"oid": "c2b1fd9470c31ddac319b39ec4b67a4605685c96"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDg1NzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoxNDoyOFrOHh148Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMjowNToxMVrOHjRA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0Nzk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!locales.contains(zhLocale) && !zhLocale.toLanguageTag().equals(\"zh-Hans\") && !zhLocale.toLanguageTag().equals(\"zh-Hant\")) {\n          \n          \n            \n                            return null;\n          \n          \n            \n                        }\n          \n          \n            \n                   if (preferredLocale.getLanguage().equals(\"zh\")) {\n          \n          \n            \n                        Locale zhLocale = fmtToMappedLocale(preferredLocale);\n          \n          \n            \n                        if (!locales.contains(zhLocale)) {\n          \n          \n            \n                            String langTag = zhLocale.toLanguageTag();\n          \n          \n            \n                            if (langTag.equals(\"zh-Hans\") || langTag.equals(\"zh-Hant\")) {\n          \n          \n            \n                                return null;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/vmware/singleton/pull/823#discussion_r505247985", "createdAt": "2020-10-15T07:14:28Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -146,9 +146,12 @@ public static Locale pickupLocaleFromList(Set<Locale> locales,\n                                               Locale preferredLocale) {\n         Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n \n-        // For any Chinese locale (zh-*) that is not supported, use the fallback locale even if \"zh\" is supported.\n-        if (bestMatch != null && bestMatch.toLanguageTag().equals(\"zh\") && !preferredLocale.toLanguageTag().equals(\"zh\")) {\n-            return null;\n+        // For any Chinese locale (zh-*) that is not supported (except for zh-Hans and zh-Hant), use the fallback locale even if \"zh\" is supported.\n+        if (preferredLocale.getLanguage().equals(\"zh\")) {\n+            Locale zhLocale = fmtToMappedLocale(preferredLocale);\n+            if (!locales.contains(zhLocale) && !zhLocale.toLanguageTag().equals(\"zh-Hans\") && !zhLocale.toLanguageTag().equals(\"zh-Hant\")) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ce5c1dc63a10049ca5f4e144ab8db44853000c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MDk2OA==", "bodyText": "I understand you want it to be more readable. There is incorrect logic in your suggestion though. It should be if (!langTag.equals(\"zh-Hans\") && !langTag.equals(\"zh-Hant\")) in line 160. Please review the new code.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r506740968", "createdAt": "2020-10-16T22:05:11Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -146,9 +146,12 @@ public static Locale pickupLocaleFromList(Set<Locale> locales,\n                                               Locale preferredLocale) {\n         Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n \n-        // For any Chinese locale (zh-*) that is not supported, use the fallback locale even if \"zh\" is supported.\n-        if (bestMatch != null && bestMatch.toLanguageTag().equals(\"zh\") && !preferredLocale.toLanguageTag().equals(\"zh\")) {\n-            return null;\n+        // For any Chinese locale (zh-*) that is not supported (except for zh-Hans and zh-Hant), use the fallback locale even if \"zh\" is supported.\n+        if (preferredLocale.getLanguage().equals(\"zh\")) {\n+            Locale zhLocale = fmtToMappedLocale(preferredLocale);\n+            if (!locales.contains(zhLocale) && !zhLocale.toLanguageTag().equals(\"zh-Hans\") && !zhLocale.toLanguageTag().equals(\"zh-Hant\")) {\n+                return null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0Nzk4NQ=="}, "originalCommit": {"oid": "f8ce5c1dc63a10049ca5f4e144ab8db44853000c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzM4MDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxMDozN1rOHkp7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxMDozN1rOHkp7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5Nzc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n          \n          \n            \n            \t\tLocale localeObject = fmtToMappedLocale(preferredLocale);\n          \n          \n            \n            \t\tLocale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(localeObject.toLanguageTag())),\n          \n          \n            \n            \t\t\t\tlocales);", "url": "https://github.com/vmware/singleton/pull/823#discussion_r508197768", "createdAt": "2020-10-20T04:10:37Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -147,43 +142,21 @@ public static boolean isSameLocale(String locale1, String locale2) {\n     /*\n      * pick up the matched locale from a locale list\n      */\n-    public static Locale pickupLocaleFromList(List<Locale> locales,\n-            Locale preferredLocale) {\n-        Locale langLocale = null;\n-        preferredLocale = fmtToMappedLocale(preferredLocale);\n-\n-        // Use the first locale from the browser's list of preferred languages\n-        // for the matching, so that it can keep the same way of getting locale\n-        // with other VMware products, like vSphere Web Client, etc.\n-        for (Locale configuredLocale : locales) {\n-            // Language is matched\n-            configuredLocale = fmtToMappedLocale(configuredLocale);\n-            if (configuredLocale.getLanguage().equals(\n-                    preferredLocale.getLanguage())) {\n-                String configuredScript = configuredLocale.getScript();\n-                String preferredScript = preferredLocale.getScript();\n-                // Country is matched\n-                if (((preferredScript.equalsIgnoreCase(\"\")) && (configuredScript\n-                        .equalsIgnoreCase(\"\")))\n-                        || ((!preferredScript.equalsIgnoreCase(\"\")) && (preferredScript\n-                                .equalsIgnoreCase(configuredScript)))) {\n-                    return configuredLocale;\n-                }\n-                langLocale = langLocale == null ? configuredLocale : langLocale;\n+    public static Locale pickupLocaleFromList(Set<Locale> locales,\n+                                              Locale preferredLocale) {\n+        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8f943d1676121428d1e243f58ee763ac4d01ae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzM4MTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxMTowM1rOHkp78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowODo1NFrOHlId3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5Nzg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // For any Chinese locale (zh-*) that is not supported (except for zh-Hans and zh-Hant), use the fallback locale even if \"zh\" is supported.\n          \n          \n            \n                    if (preferredLocale.getLanguage().equals(\"zh\")) {\n          \n          \n            \n                        Locale zhLocale = fmtToMappedLocale(preferredLocale);\n          \n          \n            \n                        if (!locales.contains(zhLocale)) {\n          \n          \n            \n                            String langTag = zhLocale.toLanguageTag();\n          \n          \n            \n                            if (!langTag.equals(\"zh-Hans\") && !langTag.equals(\"zh-Hant\"))\n          \n          \n            \n                                return null;\n          \n          \n            \n            \t\t// With Chinese locale which is not configured/supported in web.xml, it\n          \n          \n            \n            \t\t// will return 'en_US' as default to meet the usage custom of Chinese,\n          \n          \n            \n            \t\t// e.g. for 'zh-HK' from client(browser) which is not\n          \n          \n            \n            \t\t// configured/supported yet, it will return 'en_US';\n          \n          \n            \n            \t\t// Other locale, like 'de-DE' 'ja-JP' etc.,\n          \n          \n            \n            \t\t// it will return 'de' 'ja'(main/parent language).\n          \n          \n            \n            \t\tif (bestMatch != null && bestMatch.getLanguage().equals(\"zh\")) {\n          \n          \n            \n            \t\t\tif (!locales.contains(localeObject)) {\n          \n          \n            \n            \t\t\t\treturn null;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "url": "https://github.com/vmware/singleton/pull/823#discussion_r508197873", "createdAt": "2020-10-20T04:11:03Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -147,43 +142,21 @@ public static boolean isSameLocale(String locale1, String locale2) {\n     /*\n      * pick up the matched locale from a locale list\n      */\n-    public static Locale pickupLocaleFromList(List<Locale> locales,\n-            Locale preferredLocale) {\n-        Locale langLocale = null;\n-        preferredLocale = fmtToMappedLocale(preferredLocale);\n-\n-        // Use the first locale from the browser's list of preferred languages\n-        // for the matching, so that it can keep the same way of getting locale\n-        // with other VMware products, like vSphere Web Client, etc.\n-        for (Locale configuredLocale : locales) {\n-            // Language is matched\n-            configuredLocale = fmtToMappedLocale(configuredLocale);\n-            if (configuredLocale.getLanguage().equals(\n-                    preferredLocale.getLanguage())) {\n-                String configuredScript = configuredLocale.getScript();\n-                String preferredScript = preferredLocale.getScript();\n-                // Country is matched\n-                if (((preferredScript.equalsIgnoreCase(\"\")) && (configuredScript\n-                        .equalsIgnoreCase(\"\")))\n-                        || ((!preferredScript.equalsIgnoreCase(\"\")) && (preferredScript\n-                                .equalsIgnoreCase(configuredScript)))) {\n-                    return configuredLocale;\n-                }\n-                langLocale = langLocale == null ? configuredLocale : langLocale;\n+    public static Locale pickupLocaleFromList(Set<Locale> locales,\n+                                              Locale preferredLocale) {\n+        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n+\n+        // For any Chinese locale (zh-*) that is not supported (except for zh-Hans and zh-Hant), use the fallback locale even if \"zh\" is supported.\n+        if (preferredLocale.getLanguage().equals(\"zh\")) {\n+            Locale zhLocale = fmtToMappedLocale(preferredLocale);\n+            if (!locales.contains(zhLocale)) {\n+                String langTag = zhLocale.toLanguageTag();\n+                if (!langTag.equals(\"zh-Hans\") && !langTag.equals(\"zh-Hant\"))\n+                    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d8f943d1676121428d1e243f58ee763ac4d01ae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5ODA3Ng==", "bodyText": "@Xiaochao8 , this most recent suggested change fails for test LocaleTest.testPickupLocaleFromListZh.\nIsn't it supposed to return \"zh\" for any non-supported Chinese locale EXCEPT for zh-Hans/zh-Hant/zh-TW/zh-CN/zh-hans-CN/zh-Hant-TW?\nI am not familiar with custom usage of Chinese, and so I will rely on you. I will make the suggested change and also update the test . Please double-check the expected behavior for me.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r508698076", "createdAt": "2020-10-20T17:08:54Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/util/LocaleUtility.java", "diffHunk": "@@ -147,43 +142,21 @@ public static boolean isSameLocale(String locale1, String locale2) {\n     /*\n      * pick up the matched locale from a locale list\n      */\n-    public static Locale pickupLocaleFromList(List<Locale> locales,\n-            Locale preferredLocale) {\n-        Locale langLocale = null;\n-        preferredLocale = fmtToMappedLocale(preferredLocale);\n-\n-        // Use the first locale from the browser's list of preferred languages\n-        // for the matching, so that it can keep the same way of getting locale\n-        // with other VMware products, like vSphere Web Client, etc.\n-        for (Locale configuredLocale : locales) {\n-            // Language is matched\n-            configuredLocale = fmtToMappedLocale(configuredLocale);\n-            if (configuredLocale.getLanguage().equals(\n-                    preferredLocale.getLanguage())) {\n-                String configuredScript = configuredLocale.getScript();\n-                String preferredScript = preferredLocale.getScript();\n-                // Country is matched\n-                if (((preferredScript.equalsIgnoreCase(\"\")) && (configuredScript\n-                        .equalsIgnoreCase(\"\")))\n-                        || ((!preferredScript.equalsIgnoreCase(\"\")) && (preferredScript\n-                                .equalsIgnoreCase(configuredScript)))) {\n-                    return configuredLocale;\n-                }\n-                langLocale = langLocale == null ? configuredLocale : langLocale;\n+    public static Locale pickupLocaleFromList(Set<Locale> locales,\n+                                              Locale preferredLocale) {\n+        Locale bestMatch = Locale.lookup(Arrays.asList(new Locale.LanguageRange(fmtToMappedLocale(preferredLocale).toLanguageTag())), locales);\n+\n+        // For any Chinese locale (zh-*) that is not supported (except for zh-Hans and zh-Hant), use the fallback locale even if \"zh\" is supported.\n+        if (preferredLocale.getLanguage().equals(\"zh\")) {\n+            Locale zhLocale = fmtToMappedLocale(preferredLocale);\n+            if (!locales.contains(zhLocale)) {\n+                String langTag = zhLocale.toLanguageTag();\n+                if (!langTag.equals(\"zh-Hans\") && !langTag.equals(\"zh-Hant\"))\n+                    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5Nzg3Mw=="}, "originalCommit": {"oid": "7d8f943d1676121428d1e243f58ee763ac4d01ae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDU4NTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDoyMToxN1rOHlvDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjo0MTo0OVrOHm6RRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDE5Nw==", "bodyText": "In this way when dto locale is 'source' and source messages not found, it will fallback to default locale.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r509330197", "createdAt": "2020-10-21T14:21:17Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -113,38 +110,52 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\n+\t\t\tLocale fallbackLocale = fallbackLocalesIter.next();\n+\t\t\tif (fallbackLocale.toLanguageTag().equals(dto.getLocale())) {\n+\t\t\t\treturn getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t}\n+\t\t\t// Use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\treturn new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236ab56b01c52c13d6c03468233bbaf0dfc366bd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTQ0NQ==", "bodyText": "If dto locale is source, it means it has reached the end of the fallback queue. Hence, it won't enter the if in line 136 because  fallbackLocalesIter.hasNext() is false.", "url": "https://github.com/vmware/singleton/pull/823#discussion_r509705445", "createdAt": "2020-10-21T21:17:18Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -113,38 +110,52 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\n+\t\t\tLocale fallbackLocale = fallbackLocalesIter.next();\n+\t\t\tif (fallbackLocale.toLanguageTag().equals(dto.getLocale())) {\n+\t\t\t\treturn getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t}\n+\t\t\t// Use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\treturn new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDE5Nw=="}, "originalCommit": {"oid": "236ab56b01c52c13d6c03468233bbaf0dfc366bd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI3ODI4MA==", "bodyText": "I mean when request locale is 'source', which make dto locale is 'source'", "url": "https://github.com/vmware/singleton/pull/823#discussion_r510278280", "createdAt": "2020-10-22T15:59:27Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -113,38 +110,52 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\n+\t\t\tLocale fallbackLocale = fallbackLocalesIter.next();\n+\t\t\tif (fallbackLocale.toLanguageTag().equals(dto.getLocale())) {\n+\t\t\t\treturn getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t}\n+\t\t\t// Use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\treturn new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDE5Nw=="}, "originalCommit": {"oid": "236ab56b01c52c13d6c03468233bbaf0dfc366bd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxOTQ3Mg==", "bodyText": "Do you mean the preferred locale from the user is \"source\"? What use case do you have in mind where locale will be \"source\"? I suppose \"source\" will only be used as fallback.\nNonetheless, if user actually sends \"source\" as the preferred locale and source messages are not found, then yes, it should go though the usual locale fallback queue. What is your concern with this?", "url": "https://github.com/vmware/singleton/pull/823#discussion_r510319472", "createdAt": "2020-10-22T17:01:09Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -113,38 +110,52 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\n+\t\t\tLocale fallbackLocale = fallbackLocalesIter.next();\n+\t\t\tif (fallbackLocale.toLanguageTag().equals(dto.getLocale())) {\n+\t\t\t\treturn getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t}\n+\t\t\t// Use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\treturn new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDE5Nw=="}, "originalCommit": {"oid": "236ab56b01c52c13d6c03468233bbaf0dfc366bd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MjYyOQ==", "bodyText": "Discussed this offline. Huihui is referring to this issue which is not within the scope of this PR: #839", "url": "https://github.com/vmware/singleton/pull/823#discussion_r510562629", "createdAt": "2020-10-23T02:41:49Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -113,38 +110,52 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \t\t}\n     \t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else { // Requested locale is not supported\n+\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(ps.getSupportedLocales(), locale);\n+\t\t\t\tif (matchedLocale != null) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n \t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n+\t\t\t\t\tcacheItem = new ComponentService(matchedLocaleDTO).getMessages();\n+\t\t\t\t} else  // Requested locale is not supported and does not match any supported locales\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n \t\t\t}\n-\n-\t\t\t//Create and store cacheItem for the requested locale\n-\t\t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n \n+    /**\n+     * Gets the messages in the next fallback locale by passing the next fallback locale DTO to a new instance of ComponentService\n+\t * and then invoking {@link #getMessages(Iterator)}.\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure. If null, no locale fallback will be applied.\n+     */\n+    private MessageCacheItem getFallbackLocaleMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tif (fallbackLocalesIter != null && fallbackLocalesIter.hasNext()) {\n+\t\t\tLocale fallbackLocale = fallbackLocalesIter.next();\n+\t\t\tif (fallbackLocale.toLanguageTag().equals(dto.getLocale())) {\n+\t\t\t\treturn getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t}\n+\t\t\t// Use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\treturn new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMzMDE5Nw=="}, "originalCommit": {"oid": "236ab56b01c52c13d6c03468233bbaf0dfc366bd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTkxNjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzozNzowNFrOHn_-FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzozNzowNFrOHn_-FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDU5Ng==", "bodyText": "Suggest code for this method, then doLocaleMatching can be removed:\n\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new ProductService(dto).getSupportedLocales(),\n\t\t\tLocale.forLanguageTag(dto.getLocale()));\n\tMessageCacheItem cacheItem = null;\n\tif (matchedLocale != null) {\n\t\tdto.setLocale(matchedLocale.toLanguageTag());\n\t\tcacheItem = new CacheService(dto).getCacheOfComponent();\n\t\tif (cacheItem != null) { // Item is in cache\n\t\t\tif (cacheItem.isExpired())\n\t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n\t\t} else { // Item is not in cache.\n\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n\t\t}\n\t}\n\t\n\tif (cacheItem == null || cacheItem.getCachedData().isEmpty()) // Failed to fetch messages for the requested locale\n\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n\n\treturn cacheItem;", "url": "https://github.com/vmware/singleton/pull/823#discussion_r511704596", "createdAt": "2020-10-26T03:37:04Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -103,48 +100,62 @@ public MessageCacheItem getMessages() {\n \t * \t \t<li>The messages in a fallback locale</li>\n \t * </ul>\n \t */\n-    public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n-    \tCacheService cacheService = new CacheService(dto);\n-    \tMessageCacheItem cacheItem = cacheService.getCacheOfComponent();\n-    \tif (cacheItem != null) { // Item is in cache\n-    \t\tif (cacheItem.isExpired()) {\n-    \t\t\t// Refresh the cacheItem in a separate thread\n-    \t\t\trefreshCacheItemTask(cacheItem);\n-    \t\t}\n-    \t} else { // Item is not in cache.\n+\tpublic MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\tthis.doLocaleMatching();\n+\n+\t\tCacheService cacheService = new CacheService(dto);\n+\t\tMessageCacheItem cacheItem = cacheService.getCacheOfComponent();\n+\t\tif (cacheItem != null) { // Item is in cache\n+\t\t\tif (cacheItem.isExpired())\n+\t\t\t\trefreshCacheItemTask(cacheItem); // Refresh the cacheItem in a separate thread\n+\t\t} else { // Item is not in cache.\n \t\t\tProductService ps = new ProductService(dto);\n-\t\t\tif (!ps.isSupportedLocale(Locale.forLanguageTag(dto.getLocale()))) { // Requested locale is not supported\n-\t\t\t\tLocale matchedLocale = LocaleUtility.pickupLocaleFromList(new LinkedList<>(ps.getSupportedLocales()), Locale.forLanguageTag(dto.getLocale()));\n-\t\t\t\tif (ps.isSupportedLocale(matchedLocale)) { // Requested locale matches a supported locale (eg. requested locale \"fr_CA matches supported locale \"fr\")\n-\t\t\t\t\tMessagesDTO matchedLocaleDTO = new MessagesDTO(dto.getComponent(), matchedLocale.toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\t\treturn new ComponentService(matchedLocaleDTO).getMessages();\n-\t\t\t\t}\n-\t\t\t}\n+\t\t\tLocale locale = Locale.forLanguageTag(dto.getLocale());\n+\t\t\tif (ps.isSupportedLocale(locale) || VIPCfg.getInstance().isPseudo()) {\n+\t\t\t\tcacheItem = createCacheItem(); // Fetch for the requested locale from data store, create cacheItem and store in cache\n+\t\t\t\tif (cacheItem.getCachedData().isEmpty())  // Failed to fetch messages for the requested locale\n+\t\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t\t} else   // Requested locale is not supported and does not match any supported locales\n+\t\t\t\tcacheItem = getFallbackLocaleMessages(fallbackLocalesIter);\n+\t\t}\n+\t\treturn cacheItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c2535c3f32cb79595de51f8fe02ddb5344a4ae8"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4349, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}