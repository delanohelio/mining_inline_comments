{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNDYzNzI1", "number": 874, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMTo1Njo1OFrOE7VK_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODozMlrOFMckTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjQ4MzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMTo1Njo1OFrOH26kvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMTo1Njo1OFrOH26kvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM0NDgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private com.vmware.vipclient.i18n.messages.dto.MessagesDTO dto    = null;\n          \n          \n            \n                MessagesDTO dto = null;", "url": "https://github.com/vmware/singleton/pull/874#discussion_r527344828", "createdAt": "2020-11-20T01:56:58Z", "author": {"login": "Xiaochao8"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -23,7 +25,7 @@\n import org.slf4j.LoggerFactory;\n \n public class ComponentService {\n-    private MessagesDTO dto    = null;\n+    private com.vmware.vipclient.i18n.messages.dto.MessagesDTO dto    = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTgwNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODozMzowMlrOIQJriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0MDo1MlrOIS1HEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ==", "bodyText": "The premise for all codes after this line is source is not empty, so it's better use reverse judgment, suggest:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (source!=null && !source.isEmpty()) {\n          \n          \n            \n                    if (source==null || source.isEmpty()) {\n          \n          \n            \n                           return \"\";\n          \n          \n            \n                    }", "url": "https://github.com/vmware/singleton/pull/874#discussion_r553806731", "createdAt": "2021-01-08T08:33:02Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE5NjIyOQ==", "bodyText": "It's the same logic, just different preference, so no need to change this for now. Feel free to update it in another PR.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555196229", "createdAt": "2021-01-11T16:56:46Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2NjQyOQ==", "bodyText": "I mean line 92~98 should be in this if block, too. Since when source is empty there is no need to get translation.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555866429", "createdAt": "2021-01-12T15:36:27Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg2OTY4Ng==", "bodyText": "It's also better surround line 84~98 with try-catch to avoid NullPointerException.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555869686", "createdAt": "2021-01-12T15:40:48Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwNzY3OA==", "bodyText": "What you said is invalid. Even if source is empty/null, it should be able to proceed with getting the translation. An example of this is in microservices that do not carry the source bundle with them. such is the case for VCF and Atlas products. When source is null or empty, it just skips this \"if\" block, and proceeds. There is no reason to fail the entire thing.\nBy the way, this has been like this even before this PR.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555907678", "createdAt": "2021-01-12T16:31:05Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwOTcyMg==", "bodyText": "In TranslationMessage.java, it is most likely that we do not want to hide any NullPointerExceptions because we want the product dev teams to get the exception  and fix it. Which part of the code do you think will throw a NullPointerException and when? If it is something that has to be fixed by product devs, then let the exception be thrown. Do not hide it in a catch block.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555909722", "createdAt": "2021-01-12T16:33:59Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYxMTI2OQ==", "bodyText": "What you said is invalid. Even if source is empty/null, it should be able to proceed with getting the translation. An example of this is in microservices that do not carry the source bundle with them. such is the case for VCF and Atlas products. When source is null or empty, it just skips this \"if\" block, and proceeds. There is no reason to fail the entire thing.\nBy the way, this has been like this even before this PR.\n\nWith such detail case, I can understand the logic.\nBy the way, though some codes exist before this PR, but I may not review them before, so I may have questions and propose them and discuss with you here. Or I don't know when these code need be changed and at then I can have chance to propose my questions.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r556611269", "createdAt": "2021-01-13T15:35:26Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYxNTQ0MQ==", "bodyText": "In TranslationMessage.java, it is most likely that we do not want to hide any NullPointerExceptions because we want the product dev teams to get the exception and fix it. Which part of the code do you think will throw a NullPointerException and when? If it is something that has to be fixed by product devs, then let the exception be thrown. Do not hide it in a catch block.\n\nAt first sight line 84 and 86 mostly will throw NullPointerException, but after double check Service layer code, I know no such case will happen.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r556615441", "createdAt": "2021-01-13T15:40:52Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/base/instances/TranslationMessage.java", "diffHunk": "@@ -68,21 +56,48 @@ public TranslationMessage() {\n      * </ul>\n      */\n     public String getMessage(final Locale locale, final String component, final String key, final Object... args) {\n-    \t// Use source message if the message hasn't been collected/translated\n-    \tString source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).get(key);\n-    \tString collectedSourceMsg = getMessages(LocaleUtility.getSourceLocale(), component, false).get(key);\n-    \tif (source!=null && !source.isEmpty() && !source.equals(collectedSourceMsg)) {\n-\t\t\treturn FormatUtils.format(source, LocaleUtility.getSourceLocale(), args);\n-\t\t}\n-    \t\n-    \tString message = FormatUtils.format(getMessages(locale, component).get(key), locale, args);\n-    \tif (message == null || message.isEmpty()) {\n-    \t\tthrow new VIPJavaClientException(FormatUtils.format(ConstantsMsg.GET_MESSAGE_FAILED, key, component, locale));\n-    \t}\n-    \t\n-    \treturn message;\n+    \treturn getMessageWithArgs(locale, component, key, args);\n     }\n-    \n+\n+    /**\n+     * Retrieves the localized message\n+     *\n+     * @param locale The locale in which the message is requested to be localized\n+     * @param component The Singleton component in which the message belongs\n+     * @param key The key that represents the message\n+     * @param args Named arguments to replace placeholders in the message with\n+     * @return One of the items in the following priority-ordered list:\n+     * @throws VIPJavaClientException If none from the list below is available\n+     * <ul>\n+     * \t\t<li>The source message, if source message hasn't been collected and translated</li>\n+     * \t\t<li>The message in the requested locale</li>\n+     * \t\t<li>The message in the next available fallback locale</li>\n+     * \t\t<li>The source message</li>\n+     * </ul>\n+     */\n+    public String getMessage(final Locale locale, final String component, final String key, final Map<String, Object> args) {\n+        return getMessageWithArgs(locale, component, key, args);\n+    }\n+\n+    private String getMessageWithArgs(final Locale locale, final String component, final String key, final Object args) {\n+        // Use source message if the message hasn't been collected/translated\n+        String source = getMessages(Locale.forLanguageTag(ConstantsKeys.SOURCE), component, false).getMessages().get(key);\n+        if (source!=null && !source.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwNjczMQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTgyMTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODozNzo0NFrOIQJzVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjo1NTozMVrOIRebvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwODcyNA==", "bodyText": "How about adding 'locale' to MessageCacheItem instead of adding a new DTO object, and in that case you can avoid deprecating 'getMessages' methods and adding 'getTranslations' methods.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r553808724", "createdAt": "2021-01-08T08:37:44Z", "author": {"login": "huihuiw01"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -71,36 +73,55 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t}\n \n \t/**\n-\t * Get MessageCacheItem from cache.\n-\t * The cache is refreshed if MessageCacheItem is expired or not found.\n-\t * Pre-configured locale fallback queue is used on failure.\n+\t * @deprecated Use {@link #getTranslations()}.\n+\t */\n+\tpublic MessageCacheItem getMessages() {\n+\t\tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+\t\treturn this.getMessages(fallbackLocalesIter);\n+\t}\n+\n+\t/**\n+\t * @deprecated Use {@link #getTranslations(Iterator)}.\n+\t */\n+\tpublic MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\treturn new MessageCacheItem(this.getMessageCacheItem(fallbackLocalesIter).getMessages());\n+\t}\n+\n+\t/**\n+\t * Calls {@link #getTranslations(Iterator)} using the pre-configured locale fallback queue.\n \t *\n-\t * @return A MessageCacheItem whose message map is one of the items in the following priority-ordered list:\n+\t * @return A TranslationsDTO whose message map is one of the items in the following priority-ordered list:\n \t * <ul>\n \t * \t\t<li>The messages in the requested locale</li>\n-\t * \t\t<li>The messages in a default locale</li>\n+\t * \t\t<li>The messages in a fallback locale</li>\n \t * \t\t<li>The source messages</li>\n \t * \t\t<li>An empty map</li>\n \t * </ul>\n \t */\n-\tpublic MessageCacheItem getMessages() {\n+\tpublic TranslationsDTO getTranslations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE5NTMyNw==", "bodyText": "2 reasons:\n\nIt's actually more appropriate to make MessageCacheItem objects private. Exposing it via public methods allows users of the API to directly change the contents of our cache by simply changing its properties. We do not want this to happen which is why we use a DTO (Data Transfer Object). DTOs are exactly for this purpose: to carry data between methods without allowing any business logic. In other words, even if consumers of the new API change the properties of TranslationDTO, the contents of our cache, and other related business logic should not be affected/changed.\nStoring locale in every MessageCacheItem increases memory consumption (of cache) unnecessarily. Even if it's just small, for some critical apps, it matters.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555195327", "createdAt": "2021-01-11T16:55:31Z", "author": {"login": "jessiejuachon"}, "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -71,36 +73,55 @@ private void refreshCacheItem(final MessageCacheItem cacheItem, Iterator<DataSou\n \t}\n \n \t/**\n-\t * Get MessageCacheItem from cache.\n-\t * The cache is refreshed if MessageCacheItem is expired or not found.\n-\t * Pre-configured locale fallback queue is used on failure.\n+\t * @deprecated Use {@link #getTranslations()}.\n+\t */\n+\tpublic MessageCacheItem getMessages() {\n+\t\tIterator<Locale> fallbackLocalesIter = LocaleUtility.getFallbackLocales().iterator();\n+\t\treturn this.getMessages(fallbackLocalesIter);\n+\t}\n+\n+\t/**\n+\t * @deprecated Use {@link #getTranslations(Iterator)}.\n+\t */\n+\tpublic MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n+\t\treturn new MessageCacheItem(this.getMessageCacheItem(fallbackLocalesIter).getMessages());\n+\t}\n+\n+\t/**\n+\t * Calls {@link #getTranslations(Iterator)} using the pre-configured locale fallback queue.\n \t *\n-\t * @return A MessageCacheItem whose message map is one of the items in the following priority-ordered list:\n+\t * @return A TranslationsDTO whose message map is one of the items in the following priority-ordered list:\n \t * <ul>\n \t * \t\t<li>The messages in the requested locale</li>\n-\t * \t\t<li>The messages in a default locale</li>\n+\t * \t\t<li>The messages in a fallback locale</li>\n \t * \t\t<li>The source messages</li>\n \t * \t\t<li>An empty map</li>\n \t * </ul>\n \t */\n-\tpublic MessageCacheItem getMessages() {\n+\tpublic TranslationsDTO getTranslations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgwODcyNA=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTk1Mjc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOToxODozMlrOIQLA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNzowMzowNFrOIRewPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODU5NQ==", "bodyText": "It's better add message fallback cases.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r553828595", "createdAt": "2021-01-08T09:18:32Z", "author": {"login": "huihuiw01"}, "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "diffHunk": "@@ -553,4 +553,22 @@ public void testGetSourcesOfMCompAndMLoc() {\n         // more cases to test cache\n         // more cases to test the message sending to server\n     }\n+\n+    @Test\n+    public void testNamedArgs() {\n+        String component = \"JAVA\";\n+        String key = \"NamedArgs\";\n+        Locale locale_en = new Locale(\"en\", \"US\");\n+        Locale locale_de = Locale.forLanguageTag(\"de\");\n+        Map<String, Object> msgArgs = new HashMap<>();\n+        msgArgs.put(\"start\", 1);\n+        msgArgs.put(\"to\", 5);\n+        msgArgs.put(\"total\", 10);\n+\n+        String message_en = translation.getMessage(locale_en, component, key, msgArgs);\n+        Assert.assertEquals(\"1 - 5 of 10 customers\", message_en);\n+\n+        String message_de = translation.getMessage(locale_de, component, key, msgArgs);\n+        Assert.assertEquals(\"1 - 5 of 10 kunden\", message_de);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTIwMDU3NQ==", "bodyText": "I agree so I have created #955 and assigned it to Xiaochao. I added you as assignee as well, so please fell free to pick it up if and when you can.", "url": "https://github.com/vmware/singleton/pull/874#discussion_r555200575", "createdAt": "2021-01-11T17:03:04Z", "author": {"login": "jessiejuachon"}, "path": "src/test/java/com/vmware/vip/i18n/TranslationMessageTest.java", "diffHunk": "@@ -553,4 +553,22 @@ public void testGetSourcesOfMCompAndMLoc() {\n         // more cases to test cache\n         // more cases to test the message sending to server\n     }\n+\n+    @Test\n+    public void testNamedArgs() {\n+        String component = \"JAVA\";\n+        String key = \"NamedArgs\";\n+        Locale locale_en = new Locale(\"en\", \"US\");\n+        Locale locale_de = Locale.forLanguageTag(\"de\");\n+        Map<String, Object> msgArgs = new HashMap<>();\n+        msgArgs.put(\"start\", 1);\n+        msgArgs.put(\"to\", 5);\n+        msgArgs.put(\"total\", 10);\n+\n+        String message_en = translation.getMessage(locale_en, component, key, msgArgs);\n+        Assert.assertEquals(\"1 - 5 of 10 customers\", message_en);\n+\n+        String message_de = translation.getMessage(locale_de, component, key, msgArgs);\n+        Assert.assertEquals(\"1 - 5 of 10 kunden\", message_de);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyODU5NQ=="}, "originalCommit": {"oid": "946c59511e73bb0e37178dd25a1f448564d8cd96"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4378, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}