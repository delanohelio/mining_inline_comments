{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjc2MTQ3", "number": 798, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMToyMDo1MFrOEnReAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMToyMDo1MFrOEnReAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjE2MTMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/vmware/vip/i18n/LocaleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMToyMDo1MFrOHXxw9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTo1NDoyNlrOHXyQ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NDY0Nw==", "bodyText": "Can these be removed?", "url": "https://github.com/vmware/singleton/pull/798#discussion_r494694647", "createdAt": "2020-09-25T01:20:50Z", "author": {"login": "chaoq0318"}, "path": "src/test/java/com/vmware/vip/i18n/LocaleTest.java", "diffHunk": "@@ -105,127 +105,127 @@ public void testGetDisplayNamesByLanguage() throws ParseException {\n         Assert.assertNotNull(resp);\n         localeI18n.getDisplayLanguagesList(\"zh_Hans\");// get data from cache\n     }\n-\n-    @Test\n-    public void testThreadLocale() throws InterruptedException {\n-        Locale localeZhCN = new Locale(\"zh\", \"CN\");\n-        Locale localeZhTW = new Locale(\"zh\", \"TW\");\n-        Locale localeKoKR = new Locale(\"ko\", \"KR\");\n-        Locale localeDeDE = new Locale(\"de\", \"DE\");\n-\n-        LocaleUtility.setLocale(LocaleUtility.defaultLocale);\n-        // cp. check the default locale isn't zh-Hans.\n-        Assert.assertNotEquals(\"Error! Default locale is: \" + locale, localeZhCN, LocaleUtility.getLocale());\n-\n-        // Set locale in current thread\n-        LocaleUtility.setLocale(localeZhCN);\n-\n-        // cp1. check the locale is saved successfully.\n-        Assert.assertEquals(\"Error! Locale isn't set successfully.\", localeZhCN, LocaleUtility.getLocale());\n-\n-        // Create a new sub-thread, and read its initial locale\n-        t = 11;\n-        new Thread(subThreadOne).start();\n-\n-        // cp2. check the locale of sub-thread is same as parent thread\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Didn't inherit successfully\", LocaleUtility.getLocale(), locale);\n-\n-            // Change locale in sub-thread,\n-            locale = localeZhTW;\n-            t = 12;\n-            con.signal();\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // cp3. check parent locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Child interfere parent!\", localeZhCN, LocaleUtility.getLocale());\n-\n-            // Change locale in parent thread,\n-            LocaleUtility.setLocale(localeKoKR);\n-            t = 11;\n-            con.signal();\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // cp4. check sub-thread locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Parent interfere child!\", localeZhTW, locale);\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // Launch another sub-thread, change locale in this sub-thread\n-        t = 22;\n-        locale = localeDeDE;\n-        new Thread(subThreadTwo).start();\n-\n-        // cp5. Check first sub-thread locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Child interfere child!\", localeZhTW, locale);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    private Locale    locale       = null;\n-    private Lock      lock         = new ReentrantLock(true);\n-    private Condition con          = lock.newCondition();\n-    private int       t            = 1;\n-\n-    private Runnable  subThreadOne = () -> {\n-                                       while (true) {\n-                                           lock.lock();\n-                                           try {\n-                                               while (!(t >= 10 && t < 20))\n-                                                   con.await();\n-                                               if (t == 11) {\n-                                                   locale = LocaleUtility.getLocale();\n-                                               } else if (t == 12) {\n-                                                   LocaleUtility.setLocale(locale);\n-                                               }\n-                                               t = 0;\n-                                               con.signal();\n-                                           } catch (InterruptedException e) {\n-                                               e.printStackTrace();\n-                                           } finally {\n-                                               lock.unlock();\n-                                           }\n-                                       }\n-\n-                                   };\n-\n-    private Runnable  subThreadTwo = () -> {\n-                                       lock.lock();\n-                                       try {\n-                                           while (!(t >= 20 && t < 30))\n-                                               con.await();\n-                                           if (t == 21) {\n-                                               locale = LocaleUtility.getLocale();\n-                                           } else if (t == 22) {\n-                                               LocaleUtility.setLocale(locale);\n-                                           }\n-                                           t = 11;\n-                                           con.signalAll();\n-                                       } catch (InterruptedException e) {\n-                                           e.printStackTrace();\n-                                       } finally {\n-                                           lock.unlock();\n-                                       }\n-                                   };\n+    \n+//    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7c692b59ef7c5d9ab0efcb1637a087ebee126cb"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcwMjgxOA==", "bodyText": "Removed", "url": "https://github.com/vmware/singleton/pull/798#discussion_r494702818", "createdAt": "2020-09-25T01:54:26Z", "author": {"login": "Xiaochao8"}, "path": "src/test/java/com/vmware/vip/i18n/LocaleTest.java", "diffHunk": "@@ -105,127 +105,127 @@ public void testGetDisplayNamesByLanguage() throws ParseException {\n         Assert.assertNotNull(resp);\n         localeI18n.getDisplayLanguagesList(\"zh_Hans\");// get data from cache\n     }\n-\n-    @Test\n-    public void testThreadLocale() throws InterruptedException {\n-        Locale localeZhCN = new Locale(\"zh\", \"CN\");\n-        Locale localeZhTW = new Locale(\"zh\", \"TW\");\n-        Locale localeKoKR = new Locale(\"ko\", \"KR\");\n-        Locale localeDeDE = new Locale(\"de\", \"DE\");\n-\n-        LocaleUtility.setLocale(LocaleUtility.defaultLocale);\n-        // cp. check the default locale isn't zh-Hans.\n-        Assert.assertNotEquals(\"Error! Default locale is: \" + locale, localeZhCN, LocaleUtility.getLocale());\n-\n-        // Set locale in current thread\n-        LocaleUtility.setLocale(localeZhCN);\n-\n-        // cp1. check the locale is saved successfully.\n-        Assert.assertEquals(\"Error! Locale isn't set successfully.\", localeZhCN, LocaleUtility.getLocale());\n-\n-        // Create a new sub-thread, and read its initial locale\n-        t = 11;\n-        new Thread(subThreadOne).start();\n-\n-        // cp2. check the locale of sub-thread is same as parent thread\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Didn't inherit successfully\", LocaleUtility.getLocale(), locale);\n-\n-            // Change locale in sub-thread,\n-            locale = localeZhTW;\n-            t = 12;\n-            con.signal();\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // cp3. check parent locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Child interfere parent!\", localeZhCN, LocaleUtility.getLocale());\n-\n-            // Change locale in parent thread,\n-            LocaleUtility.setLocale(localeKoKR);\n-            t = 11;\n-            con.signal();\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // cp4. check sub-thread locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Parent interfere child!\", localeZhTW, locale);\n-        } finally {\n-            lock.unlock();\n-        }\n-\n-        // Launch another sub-thread, change locale in this sub-thread\n-        t = 22;\n-        locale = localeDeDE;\n-        new Thread(subThreadTwo).start();\n-\n-        // cp5. Check first sub-thread locale doesn't change\n-        lock.lock();\n-        try {\n-            while (t != 0)\n-                con.await();\n-            Assert.assertEquals(\"Child interfere child!\", localeZhTW, locale);\n-        } finally {\n-            lock.unlock();\n-        }\n-    }\n-\n-    private Locale    locale       = null;\n-    private Lock      lock         = new ReentrantLock(true);\n-    private Condition con          = lock.newCondition();\n-    private int       t            = 1;\n-\n-    private Runnable  subThreadOne = () -> {\n-                                       while (true) {\n-                                           lock.lock();\n-                                           try {\n-                                               while (!(t >= 10 && t < 20))\n-                                                   con.await();\n-                                               if (t == 11) {\n-                                                   locale = LocaleUtility.getLocale();\n-                                               } else if (t == 12) {\n-                                                   LocaleUtility.setLocale(locale);\n-                                               }\n-                                               t = 0;\n-                                               con.signal();\n-                                           } catch (InterruptedException e) {\n-                                               e.printStackTrace();\n-                                           } finally {\n-                                               lock.unlock();\n-                                           }\n-                                       }\n-\n-                                   };\n-\n-    private Runnable  subThreadTwo = () -> {\n-                                       lock.lock();\n-                                       try {\n-                                           while (!(t >= 20 && t < 30))\n-                                               con.await();\n-                                           if (t == 21) {\n-                                               locale = LocaleUtility.getLocale();\n-                                           } else if (t == 22) {\n-                                               LocaleUtility.setLocale(locale);\n-                                           }\n-                                           t = 11;\n-                                           con.signalAll();\n-                                       } catch (InterruptedException e) {\n-                                           e.printStackTrace();\n-                                       } finally {\n-                                           lock.unlock();\n-                                       }\n-                                   };\n+    \n+//    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NDY0Nw=="}, "originalCommit": {"oid": "d7c692b59ef7c5d9ab0efcb1637a087ebee126cb"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4326, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}