{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDE5NDgw", "number": 805, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxMTo1OVrOEk9s0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozMzo1NVrOElCh9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTk1MDg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/remoteapi/RemoteAPIDetailsPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxMTo1OVrOHUMiHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTowMDoyOFrOHUQ2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzODkxMQ==", "bodyText": "Remove commented out code or re-enable if needed please.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490938911", "createdAt": "2020-09-18T13:11:59Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/remoteapi/RemoteAPIDetailsPage.java", "diffHunk": "@@ -56,76 +83,75 @@ public void confirmDelete() {\n \t\tconfirmButton.click();\n \t}\n \n-\tpublic ApiStatus getRemoteApiStatus() {\n-\t\tWebElement connectionStatus = (new WebDriverWait(driver, 10)).until(ExpectedConditions\n-\t\t\t\t.presenceOfElementLocated(By.className(\"status-label\")));\n-\n-\t\tString labelClass = connectionStatus.getAttribute(\"class\");\n-\t\tif (labelClass.contains(\"api-connected\")) {\n-\t\t\treturn ApiStatus.CONNECTED;\n-\t\t} else if (labelClass.contains(\"api-invalid\")) {\n-\t\t\treturn ApiStatus.INVALID;\n-\t\t} else if (labelClass.contains(\"api-error\")) {\n-\t\t\treturn ApiStatus.ERROR;\n+\tpublic boolean isRemoteAPIConnected() {\n+\t\ttry {\n+\t\t\treturn remoteStatusConnected.isDisplayed();\n+\t\t} catch (NoSuchElementException e) {\n+\t\t\treturn false;\n \t\t}\n-\n-\t\tthrow new ElementNotVisibleException(\"Coudldn't get api status\");\n \t}\n \n \tpublic void clickConnect() {\n-\t\tWebElement connectButton = (new WebDriverWait(driver, 10)).until(ExpectedConditions.elementToBeClickable(By\n-\t\t\t\t.className(\"oauth-connect-link\")));\n-\t\tconnectButton.click();\n-\n-\t\twaitForAjax();\n+\t\tremoteStatusConnect.click();\n \n \t}\n \n \tpublic void clickAuthorize() {\n-\t\tdriver.switchTo().frame(\"oauth-connect-frame\");\n+\t\tString parentWindowHandler = driver.getWindowHandle(); // Store your parent window\n+\t\tString subWindowHandler = null;\n+\n+\t\tSet<String> handles = driver.getWindowHandles(); // get all window handles\n+\t\tfor (String handle : handles) {\n+\t\t\tsubWindowHandler = handle;\n+\t\t}\n+\t\tdriver.switchTo().window(subWindowHandler); // switch to popup window\n+\n+\t\t// Now you are in the popup window, perform necessary actions here\n+\n \t\tWebElement authorizeButton = driver.findElement(By.id(\"authorize-btn\"));\n \t\tauthorizeButton.click();\n \n-\t\tdriver.switchTo().defaultContent();\n+\n+\t\tdriver.switchTo().window(parentWindowHandler);  // switch back to parent window\n \n \t\twaitForTime(8000);\n \t}\n \n-\tpublic boolean checkDeleteSuccess() {\n-\t\tboolean deleted = false;\n-\n-\t\tlogger.debug(\"Checking for client existence\");\n-\t\tdo {\n-\t\t\ttry {\n-\t\t\t\tWebElement el = driver.findElement(By.className(\"ant-page-header-heading-title\"));\n-\t\t\t\tif (el.getText().equals(\"Remote IRIDA Connections\")) {\n-\t\t\t\t\tlogger.debug(\"Successfully loaded client list page\");\n-\t\t\t\t\twaitForAjax();\n-\t\t\t\t\tlogger.debug(\"Table loaded\");\n-\t\t\t\t\tList<WebElement> findElements = driver.findElements(By.className(\"remoteApiCol\"));\n-\t\t\t\t\tdeleted = true;\n-\t\t\t\t\t// check if the element is in the table\n-\t\t\t\t\tfor (WebElement ele : findElements) {\n-\t\t\t\t\t\tif (ele.getText().equals(clientId)) {\n-\t\t\t\t\t\t\tdeleted = false;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (StaleElementReferenceException e) {\n-\t\t\t\tlogger.debug(\"Got stale element reference exception when trying to get text on h1, trying again.\");\n-\t\t\t}\n-\t\t} while (!deleted);\n-\n-\n-\t\treturn deleted;\n-\t}\n+//\tpublic boolean checkDeleteSuccess() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwOTY4MA==", "bodyText": "Removed in e965419", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491009680", "createdAt": "2020-09-18T15:00:28Z", "author": {"login": "joshsadam"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/remoteapi/RemoteAPIDetailsPage.java", "diffHunk": "@@ -56,76 +83,75 @@ public void confirmDelete() {\n \t\tconfirmButton.click();\n \t}\n \n-\tpublic ApiStatus getRemoteApiStatus() {\n-\t\tWebElement connectionStatus = (new WebDriverWait(driver, 10)).until(ExpectedConditions\n-\t\t\t\t.presenceOfElementLocated(By.className(\"status-label\")));\n-\n-\t\tString labelClass = connectionStatus.getAttribute(\"class\");\n-\t\tif (labelClass.contains(\"api-connected\")) {\n-\t\t\treturn ApiStatus.CONNECTED;\n-\t\t} else if (labelClass.contains(\"api-invalid\")) {\n-\t\t\treturn ApiStatus.INVALID;\n-\t\t} else if (labelClass.contains(\"api-error\")) {\n-\t\t\treturn ApiStatus.ERROR;\n+\tpublic boolean isRemoteAPIConnected() {\n+\t\ttry {\n+\t\t\treturn remoteStatusConnected.isDisplayed();\n+\t\t} catch (NoSuchElementException e) {\n+\t\t\treturn false;\n \t\t}\n-\n-\t\tthrow new ElementNotVisibleException(\"Coudldn't get api status\");\n \t}\n \n \tpublic void clickConnect() {\n-\t\tWebElement connectButton = (new WebDriverWait(driver, 10)).until(ExpectedConditions.elementToBeClickable(By\n-\t\t\t\t.className(\"oauth-connect-link\")));\n-\t\tconnectButton.click();\n-\n-\t\twaitForAjax();\n+\t\tremoteStatusConnect.click();\n \n \t}\n \n \tpublic void clickAuthorize() {\n-\t\tdriver.switchTo().frame(\"oauth-connect-frame\");\n+\t\tString parentWindowHandler = driver.getWindowHandle(); // Store your parent window\n+\t\tString subWindowHandler = null;\n+\n+\t\tSet<String> handles = driver.getWindowHandles(); // get all window handles\n+\t\tfor (String handle : handles) {\n+\t\t\tsubWindowHandler = handle;\n+\t\t}\n+\t\tdriver.switchTo().window(subWindowHandler); // switch to popup window\n+\n+\t\t// Now you are in the popup window, perform necessary actions here\n+\n \t\tWebElement authorizeButton = driver.findElement(By.id(\"authorize-btn\"));\n \t\tauthorizeButton.click();\n \n-\t\tdriver.switchTo().defaultContent();\n+\n+\t\tdriver.switchTo().window(parentWindowHandler);  // switch back to parent window\n \n \t\twaitForTime(8000);\n \t}\n \n-\tpublic boolean checkDeleteSuccess() {\n-\t\tboolean deleted = false;\n-\n-\t\tlogger.debug(\"Checking for client existence\");\n-\t\tdo {\n-\t\t\ttry {\n-\t\t\t\tWebElement el = driver.findElement(By.className(\"ant-page-header-heading-title\"));\n-\t\t\t\tif (el.getText().equals(\"Remote IRIDA Connections\")) {\n-\t\t\t\t\tlogger.debug(\"Successfully loaded client list page\");\n-\t\t\t\t\twaitForAjax();\n-\t\t\t\t\tlogger.debug(\"Table loaded\");\n-\t\t\t\t\tList<WebElement> findElements = driver.findElements(By.className(\"remoteApiCol\"));\n-\t\t\t\t\tdeleted = true;\n-\t\t\t\t\t// check if the element is in the table\n-\t\t\t\t\tfor (WebElement ele : findElements) {\n-\t\t\t\t\t\tif (ele.getText().equals(clientId)) {\n-\t\t\t\t\t\t\tdeleted = false;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (StaleElementReferenceException e) {\n-\t\t\t\tlogger.debug(\"Got stale element reference exception when trying to get text on h1, trying again.\");\n-\t\t\t}\n-\t\t} while (!deleted);\n-\n-\n-\t\treturn deleted;\n-\t}\n+//\tpublic boolean checkDeleteSuccess() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzODkxMQ=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjAwMjE4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/admin/components/remote-connections/RemoteApiStatus.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyNTowNlrOHUNBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyNTowNlrOHUNBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0Njg5Ng==", "bodyText": "Issue with this new expiration message.  It doesn't actually check if the connection is valid before displaying this message.  There could be a case where the token is revoked but it just displays the expires message instead of validating the token.\nSteps to reproduce:\n\nCreate client, remote api, and connect\nGo to clients and revoke the token\nLook at remote api pages and it just says \"expires whenever\" and doesn't actually check if its valid\n\nIn this case it should display the \"connect\" button again so users can get their new token.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490946896", "createdAt": "2020-09-18T13:25:06Z", "author": {"login": "tom114"}, "path": "src/main/webapp/resources/js/pages/admin/components/remote-connections/RemoteApiStatus.jsx", "diffHunk": "@@ -0,0 +1,94 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Alert, Button } from \"antd\";\n+import { checkConnectionStatus } from \"../../../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../../../utilities/url-utilities\";\n+import { IconLoading, IconLogin } from \"../../../../components/icons/Icons\";\n+import { SPACE_XS } from \"../../../../styles/spacing\";\n+import { formatInternationalizedDateTime } from \"../../../../utilities/date-utilities\";\n+\n+/**\n+ * React component to render the status of a Remote API.\n+ * If the API is not connected it will present the user a button allowing\n+ * them to connect.\n+ * @param {object} api - details about the remote API\n+ * @param {function} onConnect - what do when the connection is made.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function RemoteApiStatus({ api, onConnect = () => {} }) {\n+  const [loading, setLoading] = useState(true);\n+  const [expiration, setExpiration] = useState(undefined);\n+\n+  useEffect(checkApiStatus, []);\n+\n+  useEffect(() => {\n+    // Listen for a remote api connection\n+    window.addEventListener(\"message\", updateRemoteApi, false);\n+    return () => window.removeEventListener(\"message\", updateRemoteApi);\n+  }, []);\n+\n+  useEffect(() => checkApiStatus(), [api.id]);\n+\n+  function checkApiStatus() {\n+    setLoading(true);\n+    checkConnectionStatus({ id: api.id }).then((data) => {\n+      setLoading(false);\n+      setExpiration(data);\n+      data && onConnect();\n+    });\n+  }\n+\n+  function updateRemoteApi(event) {\n+    if (\n+      event.origin === window.location.origin &&\n+      event.data === \"remote_api_connect\"\n+    ) {\n+      checkApiStatus();\n+    }\n+  }\n+\n+  /**\n+   * This will open a popup window with the Oauth for the Remote API\n+   */\n+  function updateConnectionStatus() {\n+    const w = 600;\n+    const h = 400;\n+\n+    const left = screen.width / 2 - w / 2;\n+    const top = screen.height / 2 - h / 2;\n+    window.open(\n+      setBaseUrl(`remote_api/connect/${api.id}`),\n+      \"\",\n+      `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${top}, left=${left}`\n+    );\n+  }\n+\n+  return loading ? (\n+    <span>\n+      <IconLoading style={{ marginRight: SPACE_XS }} />\n+      {i18n(\"RemoteApi.checking\")}\n+    </span>\n+  ) : (\n+    <div>\n+      {expiration ? (\n+        <Alert\n+          className=\"t-remote-status-connected\"\n+          message={i18n(\n+            \"RemoteApi.connected\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjAzMzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CreateRemoteProjectRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozMzowN1rOHUNVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTowMjozNVrOHUQ7hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MTk0Ng==", "bodyText": "Should this go into the dto path instead of just in the base ajax one?", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490951946", "createdAt": "2020-09-18T13:33:07Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CreateRemoteProjectRequest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+\n+/**\n+ * Used to capture details about creating a new remote project through the UI\n+ */\n+public class CreateRemoteProjectRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMDk0OA==", "bodyText": "Uh yeah, it totally should, good catch, don't know how it got there. \u00a0Moved in 0329d5b", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491010948", "createdAt": "2020-09-18T15:02:35Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/CreateRemoteProjectRequest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+\n+/**\n+ * Used to capture details about creating a new remote project through the UI\n+ */\n+public class CreateRemoteProjectRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MTk0Ng=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjAzNjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/RemoteAPIAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozNDowMlrOHUNXOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTowNToxNlrOHURBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MjUwNA==", "bodyText": "This should not need a @RestController mapping.  Just @Controller right?", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490952504", "createdAt": "2020-09-18T13:34:02Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/RemoteAPIAjaxController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaOAuthException;\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.repositories.specification.RemoteAPISpecification;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteAPIModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.rempoteapi.dto.RemoteAPITableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteAPIService;\n+import ca.corefacility.bioinformatics.irida.service.RemoteAPIService;\n+\n+/**\n+ * Controller for asynchronous requests for remote api functionality.\n+ */\n+@RestController", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMjQ4Nw==", "bodyText": "No this is completely intentional. \u00a0\"@RestController is a specialized version of the controller. It includes the @controller and @responsebody annotations and as a result, simplifies the controller implementation\" from https://www.baeldung.com/spring-controller-vs-restcontroller This works since this is a purely AJAX controller.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491012487", "createdAt": "2020-09-18T15:05:16Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/RemoteAPIAjaxController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaOAuthException;\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.repositories.specification.RemoteAPISpecification;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteAPIModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.rempoteapi.dto.RemoteAPITableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteAPIService;\n+import ca.corefacility.bioinformatics.irida.service.RemoteAPIService;\n+\n+/**\n+ * Controller for asynchronous requests for remote api functionality.\n+ */\n+@RestController", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MjUwNA=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA0MzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/RemoteProjectSettingsUpdateRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozNTo0MVrOHUNbWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTowOTo0N1rOHURMQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MzU2MA==", "bodyText": "There's enough of these dto classes to make a sub package for the Remote API stuff.  That package is getting messy.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490953560", "createdAt": "2020-09-18T13:35:41Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/RemoteProjectSettingsUpdateRequest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+\n+/**\n+ * Used to handle requests from the UI to update settings for a remote sync'd project.\n+ * The field is the attribute to be update, and the value is the value to set to that field.\n+ */\n+\n+public class RemoteProjectSettingsUpdateRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTIzMw==", "bodyText": "Sure, that makes sense. Updated in 276dbcf", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491015233", "createdAt": "2020-09-18T15:09:47Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/RemoteProjectSettingsUpdateRequest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+\n+/**\n+ * Used to handle requests from the UI to update settings for a remote sync'd project.\n+ * The field is the attribute to be update, and the value is the value to set to that field.\n+ */\n+\n+public class RemoteProjectSettingsUpdateRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1MzU2MA=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA0NTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozNjoyNVrOHUNdIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToxMDoyMFrOHUROCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDAxOQ==", "bodyText": "Again, this should likely be a @Controller", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490954019", "createdAt": "2020-09-18T13:36:25Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Locale;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteProjectService;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNTY4OA==", "bodyText": "Nope, same comment as above", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491015688", "createdAt": "2020-09-18T15:10:20Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Locale;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteProjectService;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDAxOQ=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA0OTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzozNzoyOVrOHUNfmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTozNToxMlrOHUSI1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDY1MA==", "bodyText": "Do we need 2 separate classes for this?  It's a combined 3 methods between this class and the Ajax controller.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490954650", "createdAt": "2020-09-18T13:37:29Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -29,88 +21,16 @@\n @RequestMapping(\"/projects/{projectId}/settings\")\n public class ProjectSettingsRemoteController {\n \n-\tprivate MessageSource messageSource;\n \tprivate ProjectService projectService;\n-\tprivate ProjectRemoteService projectRemoteService;\n-\tprivate UserService userService;\n \tprivate ProjectControllerUtils projectControllerUtils;\n \n \t@Autowired\n-\tpublic ProjectSettingsRemoteController(MessageSource messageSource, ProjectService projectService,\n-\t\t\tProjectRemoteService projectRemoteService, UserService userService,\n+\tpublic ProjectSettingsRemoteController(ProjectService projectService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMDc0Mw==", "bodyText": "@deepsidhu85 \u00a0and I have been working really hard at keeping all the controllers really lean and only handling what their job is. \u00a0A @controller's job is to return a view and that's it, a @RestController is to handle an ajax request. \u00a0If either of those those actually need some data (which is basically always for the ajax controllers), they can reach out to a specifically designed service. \u00a0That way it is easy to know where to go to find/fix a problem. \u00a0It keeps the controllers nice and lean and easy to read and way easier to test.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491030743", "createdAt": "2020-09-18T15:35:12Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -29,88 +21,16 @@\n @RequestMapping(\"/projects/{projectId}/settings\")\n public class ProjectSettingsRemoteController {\n \n-\tprivate MessageSource messageSource;\n \tprivate ProjectService projectService;\n-\tprivate ProjectRemoteService projectRemoteService;\n-\tprivate UserService userService;\n \tprivate ProjectControllerUtils projectControllerUtils;\n \n \t@Autowired\n-\tpublic ProjectSettingsRemoteController(MessageSource messageSource, ProjectService projectService,\n-\t\t\tProjectRemoteService projectRemoteService, UserService userService,\n+\tpublic ProjectSettingsRemoteController(ProjectService projectService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NDY1MA=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA2MTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteAPIService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0MDoyOFrOHUNm3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0MDoyOFrOHUNm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NjUxMQ==", "bodyText": "What's the point of this class?  It's just re-wrapping other service methods.  Every method is only called from one place.  Why not just have the functionality in those places?", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490956511", "createdAt": "2020-09-18T13:40:28Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteAPIService.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaOAuthException;\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPIToken;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.CreateRemoteProjectRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteAPIModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxCreateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.RemoteAPIService;\n+import ca.corefacility.bioinformatics.irida.service.RemoteAPITokenService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+\n+/**\n+ * UI Service to handle request for Remote APIs\n+ */\n+@Component\n+public class UIRemoteAPIService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA2NDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0MToyMlrOHUNpDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTozNTozM1rOHUSJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NzA3MQ==", "bodyText": "Same deal with this class.  These 2 methods are only used in one place.  Why add an extra class?", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490957071", "createdAt": "2020-09-18T13:41:22Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzMDk1OQ==", "bodyText": "Same deal here, please see above response.", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491030959", "createdAt": "2020-09-18T15:35:33Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk1NzA3MQ=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA5MTc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/projects/ProjectSyncPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0Nzo0MVrOHUN5wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToxMjowOFrOHURSVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MTM0Ng==", "bodyText": "Remove commented code", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490961346", "createdAt": "2020-09-18T13:47:41Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/projects/ProjectSyncPage.java", "diffHunk": "@@ -38,19 +37,25 @@ public static ProjectSyncPage goTo(WebDriver driver) {\n \t}\n \n \tpublic void selectApi(int index) {\n-\t\tnew Select(apiSelection).selectByIndex(index);\n+\t\tWebDriverWait wait = new WebDriverWait(driver, 2);\n+\t\twait.until(ExpectedConditions.elementToBeClickable(apiSelection));\n+\t\tapiSelection.findElement(By.className(\"ant-select-selection-item\")).click();\n+\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.className(\"ant-select-item\")));\n+\t\tdriver.findElements(By.className(\"ant-select-item\")).get(index).click();\n \t}\n \n \tpublic boolean areProjectsAvailable() {\n-\t\treturn projectSelection.isEnabled();\n-\t}\n-\n-\tpublic void selectProjectInListing(int index) {\n-\t\tnew Select(projectSelection).selectByIndex(index);\n+\t\treturn projectSelection.isDisplayed();\n \t}\n \n-\tpublic void openAdvanced() {\n-\t\tadvancedToggle.click();\n+\tpublic void selectProjectInListing(String name) {\n+\t\tWebDriverWait wait = new WebDriverWait(driver, 2);\n+\t\twait.until(ExpectedConditions.elementToBeClickable(projectSelection));\n+\t\tprojectSelection.findElement(By.className(\"ant-select-selection-search\")).click();\n+\t\tdriver.switchTo().activeElement().sendKeys(name);\n+\t\tdriver.switchTo().activeElement().sendKeys(Keys.ENTER);\n+//\t\twait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.className(\"ant-select-item\")));\n+//\t\tdriver.findElements(By.className(\"ant-select-item\")).get(index).click();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNjc4OA==", "bodyText": "Removed in 4d34497", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491016788", "createdAt": "2020-09-18T15:12:08Z", "author": {"login": "joshsadam"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/pages/projects/ProjectSyncPage.java", "diffHunk": "@@ -38,19 +37,25 @@ public static ProjectSyncPage goTo(WebDriver driver) {\n \t}\n \n \tpublic void selectApi(int index) {\n-\t\tnew Select(apiSelection).selectByIndex(index);\n+\t\tWebDriverWait wait = new WebDriverWait(driver, 2);\n+\t\twait.until(ExpectedConditions.elementToBeClickable(apiSelection));\n+\t\tapiSelection.findElement(By.className(\"ant-select-selection-item\")).click();\n+\t\twait.until(ExpectedConditions.visibilityOfElementLocated(By.className(\"ant-select-item\")));\n+\t\tdriver.findElements(By.className(\"ant-select-item\")).get(index).click();\n \t}\n \n \tpublic boolean areProjectsAvailable() {\n-\t\treturn projectSelection.isEnabled();\n-\t}\n-\n-\tpublic void selectProjectInListing(int index) {\n-\t\tnew Select(projectSelection).selectByIndex(index);\n+\t\treturn projectSelection.isDisplayed();\n \t}\n \n-\tpublic void openAdvanced() {\n-\t\tadvancedToggle.click();\n+\tpublic void selectProjectInListing(String name) {\n+\t\tWebDriverWait wait = new WebDriverWait(driver, 2);\n+\t\twait.until(ExpectedConditions.elementToBeClickable(projectSelection));\n+\t\tprojectSelection.findElement(By.className(\"ant-select-selection-search\")).click();\n+\t\tdriver.switchTo().activeElement().sendKeys(name);\n+\t\tdriver.switchTo().activeElement().sendKeys(Keys.ENTER);\n+//\t\twait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.className(\"ant-select-item\")));\n+//\t\tdriver.findElements(By.className(\"ant-select-item\")).get(index).click();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MTM0Ng=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA5MzkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/remoteapi/CreateRemoteAPIPageIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0ODoxNFrOHUN7JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0ODoxNFrOHUN7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MTcwMA==", "bodyText": "Remove commented code if its not needed, or redo method if it is needed", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490961700", "createdAt": "2020-09-18T13:48:14Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/remoteapi/CreateRemoteAPIPageIT.java", "diffHunk": "@@ -76,20 +81,20 @@ public void testCreateClientWithSpacesInFront() {\n \n \t@Test\n \tpublic void testAndConnectToClient() {\n-\t\tString baseUrl = page.getBaseUrl();\n-\t\tString url = baseUrl + \"api\";\n-\n-\t\tpage.createRemoteAPIWithDetails(\"new name\", url, clientId, clientSecret);\n-\t\tassertTrue(\"client should have been created\", page.checkSuccess());\n-\n-\t\tRemoteAPIDetailsPage remoteAPIDetailsPage = new RemoteAPIDetailsPage(driver());\n-\n-\t\tApiStatus remoteApiStatus = remoteAPIDetailsPage.getRemoteApiStatus();\n-\t\tassertEquals(\"api status should be invalid\", ApiStatus.INVALID, remoteApiStatus);\n-\t\tremoteAPIDetailsPage.clickConnect();\n-\t\tremoteAPIDetailsPage.clickAuthorize();\n-\n-\t\tremoteApiStatus = remoteAPIDetailsPage.getRemoteApiStatus();\n-\t\tassertEquals(\"api status should be connected\", ApiStatus.CONNECTED, remoteApiStatus);\n+//\t\tString baseUrl = page.getBaseUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjA5OTQwOnYy", "diffSide": "LEFT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/unit/web/oauth/RemoteAPIAjaxControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0OTozMVrOHUN-og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowNDozNlrOHUW9bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MjU5NA==", "bodyText": "Is this test re-written somewhere else?", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490962594", "createdAt": "2020-09-18T13:49:31Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/unit/web/oauth/RemoteAPIAjaxControllerTest.java", "diffHunk": "@@ -149,18 +142,4 @@ public void getAjaxAPIListTest() {\n \t\tassertEquals(\"Should have 1 Remote API\", 1, response.getDataSource()\n \t\t\t\t.size());\n \t}\n-\n-\t@Test\n-\tpublic void checkAPIStatusTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwOTc0MQ==", "bodyText": "Yes, they are all in the UIRemoteAPIServiceTest", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491109741", "createdAt": "2020-09-18T18:04:36Z", "author": {"login": "joshsadam"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/unit/web/oauth/RemoteAPIAjaxControllerTest.java", "diffHunk": "@@ -149,18 +142,4 @@ public void getAjaxAPIListTest() {\n \t\tassertEquals(\"Should have 1 Remote API\", 1, response.getDataSource()\n \t\t\t\t.size());\n \t}\n-\n-\t@Test\n-\tpublic void checkAPIStatusTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MjU5NA=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjEwMzc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/remoteapi/CreateRemoteAPIPageIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo1MDoyNlrOHUOBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowMjo1NlrOHUW6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MzIzNw==", "bodyText": "All these tests need re-enabled", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r490963237", "createdAt": "2020-09-18T13:50:26Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/remoteapi/CreateRemoteAPIPageIT.java", "diffHunk": "@@ -1,30 +1,33 @@\n package ca.corefacility.bioinformatics.irida.ria.integration.remoteapi;\n \n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n import ca.corefacility.bioinformatics.irida.ria.integration.AbstractIridaUIITChromeDriver;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.LoginPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.clients.ClientDetailsPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.clients.CreateClientPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.CreateRemoteAPIPage;\n-import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.RemoteAPIDetailsPage;\n-import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.RemoteAPIDetailsPage.ApiStatus;\n import ca.corefacility.bioinformatics.irida.ria.integration.utilities.RemoteApiUtilities;\n+\n import com.github.springtestdbunit.annotation.DatabaseSetup;\n-import org.junit.Before;\n-import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  * IT for the client details page\n  *\n  */\n @DatabaseSetup(\"/ca/corefacility/bioinformatics/irida/ria/web/oauth/CreateRemoteApisIT.xml\")\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwOTA1MQ==", "bodyText": "Updated in f1c4406", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491109051", "createdAt": "2020-09-18T18:02:56Z", "author": {"login": "joshsadam"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/remoteapi/CreateRemoteAPIPageIT.java", "diffHunk": "@@ -1,30 +1,33 @@\n package ca.corefacility.bioinformatics.irida.ria.integration.remoteapi;\n \n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n import ca.corefacility.bioinformatics.irida.ria.integration.AbstractIridaUIITChromeDriver;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.LoginPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.clients.ClientDetailsPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.clients.CreateClientPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.CreateRemoteAPIPage;\n-import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.RemoteAPIDetailsPage;\n-import ca.corefacility.bioinformatics.irida.ria.integration.pages.remoteapi.RemoteAPIDetailsPage.ApiStatus;\n import ca.corefacility.bioinformatics.irida.ria.integration.utilities.RemoteApiUtilities;\n+\n import com.github.springtestdbunit.annotation.DatabaseSetup;\n-import org.junit.Before;\n-import org.junit.Test;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  * IT for the client details page\n  *\n  */\n @DatabaseSetup(\"/ca/corefacility/bioinformatics/irida/ria/web/oauth/CreateRemoteApisIT.xml\")\n+@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MzIzNw=="}, "originalCommit": {"oid": "c81a496bb8d8f6ade3c4ca8dac9e242264b8648f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjc0MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/RemoteAPIAjaxController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozMzo1NVrOHUUMNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozMzo1NVrOHUUMNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NDM3NA==", "bodyText": "Looks like this isn't being used and can be removed", "url": "https://github.com/phac-nml/irida/pull/805#discussion_r491064374", "createdAt": "2020-09-18T16:33:55Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/RemoteAPIAjaxController.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaOAuthException;\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.repositories.specification.RemoteAPISpecification;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.remote.CreateRemoteProjectRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.remote.RemoteAPIModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.remote.RemoteProjectModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.rempoteapi.dto.RemoteAPITableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteAPIService;\n+import ca.corefacility.bioinformatics.irida.service.RemoteAPIService;\n+\n+/**\n+ * Controller for asynchronous requests for remote api functionality.\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote_api\")\n+public class RemoteAPIAjaxController {\n+    private final RemoteAPIService remoteAPIService;\n+    private final UIRemoteAPIService service;\n+\n+    public static final String INVALID_OAUTH_TOKEN = \"invalid_token\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75b5591bb56a0e02266cd1afbcaa6aee1bd97a4"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 741, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}