{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMDk0OTAy", "number": 824, "title": "Admin Stats UI", "bodyText": "Description of changes\nWhat did you change in this pull request?  Provide a description of files changed, user interactions changed, etc.  Include how to test your changes.\nSetup the UI for displaying basic as well as advanced stats for analyses, projects, samples, and users.\nRelated issue\nLink to the GitHub issue this pull request addresses using the #issuenum format.  If it completes an issue, use Fixes #issuenum to automatically close the issue.\nChecklist\nThings for the developer to confirm they've done before the PR should be accepted:\n* [ ] CHANGELOG.md (and UPGRADING.md if necessary) updated with information for new change.\n* [ ] Tests added (or description of how to test) for any new features.\n* [ ] User documentation updated for UI or technical changes.", "createdAt": "2020-10-08T18:02:41Z", "url": "https://github.com/phac-nml/irida/pull/824", "merged": true, "mergeCommit": {"oid": "384dd9ed55937daebdebd3f372d37e856a9aaba9"}, "closed": true, "closedAt": "2020-10-16T23:37:21Z", "author": {"login": "deepsidhu85"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMY-4iAH2gAyNTAwMDk0OTAyOmU5NmZhNGUwYjI1NDAyZDNmMTJmNzUwZDAzNjQ2NjAxYWZhNDVmOGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTLZ9_gH2gAyNTAwMDk0OTAyOjY1ZGM3Y2M1ZGQ0OTkxOGFjYWJlYWEyNTVkNzRmODQ5ZWVlYzk5NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e96fa4e0b25402d3f12f750d03646601afa45f8d", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/e96fa4e0b25402d3f12f750d03646601afa45f8d", "committedDate": "2020-09-25T17:10:44Z", "message": "Added statistics page with test data for charts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78c9c24bd4d22c48011c1f6bb384f6aa3eae66b", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/d78c9c24bd4d22c48011c1f6bb384f6aa3eae66b", "committedDate": "2020-09-30T20:55:59Z", "message": "Setup the ui for basic statistics and advanced statistics. Added dtos which will be required to send stats data to the ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33646faa7c998bea5e7b2d59b2353c7b8053eab", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/e33646faa7c998bea5e7b2d59b2353c7b8053eab", "committedDate": "2020-10-01T16:54:58Z", "message": "Refactored code and created constants for statisticTypes and chartTypes. Fixed bug with time period select not defaulting to default time period when a different stat type was viewer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d50fd90cecace4821e13db39ff2e1d2c90e8fda2", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/d50fd90cecace4821e13db39ff2e1d2c90e8fda2", "committedDate": "2020-10-02T15:56:43Z", "message": "Merge branch 'admin-statistics/_base' into admin-panel-statistics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b9a69cc829a5590073d0a84460bf960ef25745", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/48b9a69cc829a5590073d0a84460bf960ef25745", "committedDate": "2020-10-08T14:27:31Z", "message": "Removed commented out code, fake data, and removed services from controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0bb4e7accc672aaef6fd75c75d48b184ac5d379", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/d0bb4e7accc672aaef6fd75c75d48b184ac5d379", "committedDate": "2020-10-08T15:07:45Z", "message": "Merged dev into branch and fixed merge conflicts. Updated BasicStats react component to get basic stats from the adminstatisticscontext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5aad97784a388d339785b45facd822113f38db8", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/e5aad97784a388d339785b45facd822113f38db8", "committedDate": "2020-10-08T17:17:48Z", "message": "Removed Row and Cols and replaced with flex. Added Users Created Statististics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3", "committedDate": "2020-10-08T18:11:49Z", "message": "Removed dtos not used. Added missing function to context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/d013a64c4bbff49f15a22e1b73cd95521b88a51b", "committedDate": "2020-10-08T20:00:28Z", "message": "Merge branch 'development' into admin-statistics/_ui"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MDQ3NjE4", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-505047618", "createdAt": "2020-10-08T18:17:54Z", "commit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxNzo1NFrOHeq4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjoxMDowOVrOHfHBxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMTg2NA==", "bodyText": "Why scoping to the session?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501921864", "createdAt": "2020-10-08T18:17:54Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+/**\n+ * Controller to handle ajax requests for the Admin Panel statistics page.\n+ */\n+\n+@RestController\n+@Scope(\"session\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyMjc1Mw==", "bodyText": "Wouldn't a better URL scheme be top level /ajax/statistics and then every level below would be the specific one (e.g. /projects for /ajax/statistics/projects)?\n``", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501922753", "createdAt": "2020-10-08T18:19:24Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+/**\n+ * Controller to handle ajax requests for the Admin Panel statistics page.\n+ */\n+\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/admin\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNDcxNw==", "bodyText": "This translation will be in the next PR?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501924717", "createdAt": "2020-10-08T18:22:43Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+/**\n+ * Controller to handle ajax requests for the Admin Panel statistics page.\n+ */\n+\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/admin\")\n+public class AdminStatisticsAjaxController {\n+\n+\t@Autowired\n+\tpublic AdminStatisticsAjaxController() {\n+\t}\n+\n+\t/**\n+\t * Get usage statistics for projects, samples, analyses, and users\n+\t * for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve usage stats for\n+\t * @return dto with usage stats\n+\t */\n+\t@RequestMapping(value = \"/statistics\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminStatistics(Long timePeriod) {\n+\t\treturn ResponseEntity.ok(\"Retrieved statistics on load\");\n+\t}\n+\n+\t/**\n+\t * Get updated usage statistics for projects for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve updated project usage stats for\n+\t * @return dto with updated project usage stats\n+\t */\n+\t@RequestMapping(value = \"/project-statistics\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminProjectStatistics(Long timePeriod) {\n+\t\treturn ResponseEntity.ok(\"Retrieved stats for projects created in the last \" + timePeriod);\n+\t}\n+\n+\t/**\n+\t * Get updated usage statistics for users for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve updated user usage stats for\n+\t * @return dto with updated user usage stats\n+\t */\n+\t@RequestMapping(value = \"/user-statistics\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminUserStatistics(Long timePeriod) {\n+\t\treturn ResponseEntity.ok(\"Retrieved stats for users logged in the last \" + timePeriod);\n+\t}\n+\n+\t/**\n+\t * Get updated usage statistics for analyses for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve updated analyses usage stats for\n+\t * @return dto with updated analyses usage stats\n+\t */\n+\t@RequestMapping(value = \"/analyses-statistics\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminAnalysesStatistics(Long timePeriod) {\n+\t\treturn ResponseEntity.ok(\"Retrieved stats for analyses run in the last \" + timePeriod);\n+\t}\n+\n+\t/**\n+\t * Get updated usage statistics for samples for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve updated sample usage stats for\n+\t * @return dto with updated sample usage stats\n+\t */\n+\t@RequestMapping(value = \"/sample-statistics\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminSampleStatistics(Long timePeriod) {\n+\t\treturn ResponseEntity.ok(\"Retrieved stats for samples created in the last \" + timePeriod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNTU5Nw==", "bodyText": "Just pondering. \u00a0Wouldn't it be better to get the message (error.response.data) and then throw that in a new Error so it can be caught by the caller?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501925597", "createdAt": "2020-10-08T18:24:09Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/admin/admin.js", "diffHunk": "@@ -0,0 +1,74 @@\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import axios from \"axios\";\n+\n+const ADMIN_URL = setBaseUrl(`/ajax/admin`);\n+\n+/*\n+ * Get all the statistics for the admin panel\n+ * @return {Promise<*>} `data` contains the OK response and the details map;\n+ *                      `error` contains error information if an error occurred.\n+ */\n+export async function getAdminStatistics() {\n+  try {\n+    const { data } = await axios.get(`${ADMIN_URL}/statistics`);\n+    return data;\n+  }  catch (error) {\n+    return { error };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNzA3Nw==", "bodyText": "I don't think this actually works does it? \u00a0You are returning the error which I think at this point is the response, not the message. \u00a0See my previous comment on throwing a new error.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501927077", "createdAt": "2020-10-08T18:26:38Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNzY4NQ==", "bodyText": "Formatting! \u00a0Why would you do this!!!!", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r501927685", "createdAt": "2020-10-08T18:27:31Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  // Get updated project usage stats for the selected time period\n+  function updateProjectStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminProjectStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated user usage stats for the selected time period\n+  function updateUserStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminUserStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated analyses usage stats for the selected time period\n+  function updateAnalysesStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminAnalysesStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated sample usage stats for the selected time period\n+  function updateSampleStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminSampleStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  /*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   * @param timePeriod - The time period for the statistics\n+   */\n+  function getChartConfig(chartType, statsType, timePeriod)\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4735d7d6d72d1e49f5b658fa0cc996e170f3ebf3"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzODg3Ng==", "bodyText": "Don't leave XML entries with empty bodies in React", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502338876", "createdAt": "2020-10-09T10:35:18Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Donut, Line, Pie } from \"@ant-design/charts\";\n+import { Form } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext,\n+  defaultTimePeriod,\n+  defaultChartType,\n+  chartTypes,\n+  statisticTypes\n+} from \"../../../../contexts/AdminStatisticsContext\";\n+import { SPACE_LG } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+\n+export default function AdvancedStatistics({statType}) {\n+\n+  const {\n+    updateAnalysesStatsTimePeriod,\n+    updateProjectStatsTimePeriod,\n+    updateSampleStatsTimePeriod,\n+    updateUserStatsTimePeriod,\n+    getChartConfig\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod);\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    setTimePeriod(defaultTimePeriod);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {\n+    if(statType === statisticTypes.ANALYSES) {\n+      updateAnalysesStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.PROJECTS) {\n+      updateProjectStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.SAMPLES) {\n+      updateSampleStatsTimePeriod(timePeriod)\n+    } else if (statType === statisticTypes.USERS) {\n+      updateUserStatsTimePeriod(timePeriod);\n+    }\n+    setTimePeriod(currTimePeriod);\n+  }\n+\n+  function displayChart() {\n+    if(chartType === chartTypes.BAR) {\n+      return <Bar {...getChartConfig(chartType, statType, timePeriod)} ></Bar>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2MzAzNQ==", "bodyText": "This whole function could probably be simplified to be:\nconst components = {\n    [chartTypes.BAR]: Bar,\n    [chartTypes.COLUMN]: Column,\n    [chartTypes.LINE]: Line,\n    [chartTypes.PIE]: Pie,\n    [chartTypes.DONUT]: Donut,\n  };\n\n  function displayChart() {\n    const Component = components[chartType];\n    return Component ? (\n      <Component {...getChartConfig(chartType, statType, timePeriod)} />\n    ) : null;\n  }", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502363035", "createdAt": "2020-10-09T11:26:57Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Donut, Line, Pie } from \"@ant-design/charts\";\n+import { Form } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext,\n+  defaultTimePeriod,\n+  defaultChartType,\n+  chartTypes,\n+  statisticTypes\n+} from \"../../../../contexts/AdminStatisticsContext\";\n+import { SPACE_LG } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+\n+export default function AdvancedStatistics({statType}) {\n+\n+  const {\n+    updateAnalysesStatsTimePeriod,\n+    updateProjectStatsTimePeriod,\n+    updateSampleStatsTimePeriod,\n+    updateUserStatsTimePeriod,\n+    getChartConfig\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod);\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    setTimePeriod(defaultTimePeriod);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {\n+    if(statType === statisticTypes.ANALYSES) {\n+      updateAnalysesStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.PROJECTS) {\n+      updateProjectStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.SAMPLES) {\n+      updateSampleStatsTimePeriod(timePeriod)\n+    } else if (statType === statisticTypes.USERS) {\n+      updateUserStatsTimePeriod(timePeriod);\n+    }\n+    setTimePeriod(currTimePeriod);\n+  }\n+\n+  function displayChart() {\n+    if(chartType === chartTypes.BAR) {\n+      return <Bar {...getChartConfig(chartType, statType, timePeriod)} ></Bar>;\n+    } else if (chartType === chartTypes.COLUMN) {\n+      return <Column {...getChartConfig(chartType, statType, timePeriod)} ></Column>;\n+    } else if (chartType === chartTypes.LINE) {\n+      return <Line {...getChartConfig(chartType, statType, timePeriod)} ></Line>;\n+    } else if (chartType === chartTypes.PIE) {\n+      return <Pie {...getChartConfig(chartType, statType, timePeriod)} ></Pie>;\n+    } else if (chartType === chartTypes.DONUT) {\n+      return <Donut {...getChartConfig(chartType, statType, timePeriod)}  />\n+    } else {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODMzNw==", "bodyText": "This is already \"truthy\". \u00a0If you want to force it you could also do `visible: Boolean(data)`", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502368337", "createdAt": "2020-10-09T11:38:52Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  // Get updated project usage stats for the selected time period\n+  function updateProjectStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminProjectStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated user usage stats for the selected time period\n+  function updateUserStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminUserStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated analyses usage stats for the selected time period\n+  function updateAnalysesStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminAnalysesStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated sample usage stats for the selected time period\n+  function updateSampleStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminSampleStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  /*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   * @param timePeriod - The time period for the statistics\n+   */\n+  function getChartConfig(chartType, statsType, timePeriod)\n+  {\n+    let data = null;\n+    const timePeriodText = timePeriodMap[timePeriod];\n+    const isBarChartType = chartType === chartTypes.BAR;\n+    const isPieDonutChartType = chartType === chartTypes.DONUT || chartType === chartTypes.PIE;\n+\n+    let chartTitle = \"\";\n+    let chartAxisAlias = \"\";\n+\n+    if(statsType === statisticTypes.ANALYSES) {\n+      chartTitle = `Number of analyses run in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Analyses';\n+    } else if (statsType === statisticTypes.PROJECTS) {\n+      chartTitle = `Number of projects created in past ${timePeriodText}`;\n+      chartAxisAlias ='# of Projects';\n+    } else if (statsType === statisticTypes.SAMPLES)\n+    {\n+      chartTitle = `Number of samples created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Samples';\n+    } else if (statsType === statisticTypes.USERS) {\n+      chartTitle =`Number of users created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Users';\n+    }\n+\n+\n+    // The configuration required to display a chart\n+    const chartConfig = {\n+      title: { visible: true, text: chartTitle },\n+      forceFit: true,\n+      data: data !== null  ? data : [{key:\"\", value:\"\"}],\n+      padding: 'auto',\n+      xField: isBarChartType ? 'value' : 'key',\n+      yField: isBarChartType ? 'key' : 'value',\n+      meta: { key: { alias: 'Time Period' }, value: { alias: chartAxisAlias } },\n+      angleField:\"value\",\n+      label: {\n+        visible: data !== null ? (isPieDonutChartType ? false : true) : false,\n+        position: isBarChartType ? 'right' : 'middle',\n+        adjustColor: true,\n+        style: { fill: '#0D0E68', fontSize: 12, fontWeight: 600, opacity: 0.3 },\n+      },\n+      colorField: \"key\",\n+      legend: {\n+        visible: data !== null ? true : false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2OTgyNA==", "bodyText": "This could be simplified as: `data: data || [{key:\"\", value:\"\"}],`", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502369824", "createdAt": "2020-10-09T11:42:11Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  // Get updated project usage stats for the selected time period\n+  function updateProjectStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminProjectStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated user usage stats for the selected time period\n+  function updateUserStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminUserStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated analyses usage stats for the selected time period\n+  function updateAnalysesStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminAnalysesStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated sample usage stats for the selected time period\n+  function updateSampleStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminSampleStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  /*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   * @param timePeriod - The time period for the statistics\n+   */\n+  function getChartConfig(chartType, statsType, timePeriod)\n+  {\n+    let data = null;\n+    const timePeriodText = timePeriodMap[timePeriod];\n+    const isBarChartType = chartType === chartTypes.BAR;\n+    const isPieDonutChartType = chartType === chartTypes.DONUT || chartType === chartTypes.PIE;\n+\n+    let chartTitle = \"\";\n+    let chartAxisAlias = \"\";\n+\n+    if(statsType === statisticTypes.ANALYSES) {\n+      chartTitle = `Number of analyses run in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Analyses';\n+    } else if (statsType === statisticTypes.PROJECTS) {\n+      chartTitle = `Number of projects created in past ${timePeriodText}`;\n+      chartAxisAlias ='# of Projects';\n+    } else if (statsType === statisticTypes.SAMPLES)\n+    {\n+      chartTitle = `Number of samples created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Samples';\n+    } else if (statsType === statisticTypes.USERS) {\n+      chartTitle =`Number of users created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Users';\n+    }\n+\n+\n+    // The configuration required to display a chart\n+    const chartConfig = {\n+      title: { visible: true, text: chartTitle },\n+      forceFit: true,\n+      data: data !== null  ? data : [{key:\"\", value:\"\"}],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MTY0Ng==", "bodyText": "I really don't like so many ternary statements, we are starting to see lots of this because we have so many complex objects. \u00a0I think a better way to handle this, and to make it easier to read would be:\nimport merge from \"lodash/merge\";\n\nfunction getChartConfig(chartType, statsType, timePeriod) {\n    let data = null;\n    const timePeriodText = timePeriodMap[timePeriod];\n\n    let title = \"\";\n    let chartAxisAlias = \"\";\n\n    const custom = {\n      [chartTypes.BAR]: {\n        xField: \"value\",\n        yField: \"key\",\n        label: {\n          position: \"right\",\n        },\n      },\n      [chartTypes.DONUT]: {\n        visible: false,\n      },\n      [chartTypes.PIE]: {\n        visible: false,\n      },\n      [chartTypes.COLUMN]: {},\n      [chartTypes.LINE]: {},\n    };\n\n    if (statsType === statisticTypes.ANALYSES) {\n      title = `Number of analyses run in past ${timePeriodText}`;\n      chartAxisAlias = \"# of Analyses\";\n    } else if (statsType === statisticTypes.PROJECTS) {\n      title = `Number of projects created in past ${timePeriodText}`;\n      chartAxisAlias = \"# of Projects\";\n    } else if (statsType === statisticTypes.SAMPLES) {\n      title = `Number of samples created in past ${timePeriodText}`;\n      chartAxisAlias = \"# of Samples\";\n    } else if (statsType === statisticTypes.USERS) {\n      title = `Number of users created in past ${timePeriodText}`;\n      chartAxisAlias = \"# of Users\";\n    }\n\n    const config = {\n      title: { visible: true, title },\n      forceFit: true,\n      data: data || [{ key: \"\", value: \"\" }],\n      padding: \"auto\",\n      xField: \"key\",\n      yField: \"value\",\n      meta: { key: { alias: \"Time Period\" }, value: { alias: chartAxisAlias } },\n      angleField: \"value\",\n      label: {\n        visible: Boolean(data),\n        position: \"middle\",\n        adjustColor: true,\n        style: { fill: \"#0D0E68\", fontSize: 12, fontWeight: 600, opacity: 0.3 },\n      },\n      colorField: \"key\",\n      legend: {\n        visible: Boolean(data),\n        position: \"bottom-center\",\n      },\n      statistic: {\n        visible: Boolean(data),\n        content: {\n          value: \"\",\n          name: \"\",\n        },\n      },\n    };\n\n    return merge(config, [custom[chartType]]);\n}", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502381646", "createdAt": "2020-10-09T12:07:01Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  // Get updated project usage stats for the selected time period\n+  function updateProjectStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminProjectStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated user usage stats for the selected time period\n+  function updateUserStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminUserStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated analyses usage stats for the selected time period\n+  function updateAnalysesStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminAnalysesStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated sample usage stats for the selected time period\n+  function updateSampleStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminSampleStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  /*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   * @param timePeriod - The time period for the statistics\n+   */\n+  function getChartConfig(chartType, statsType, timePeriod)\n+  {\n+    let data = null;\n+    const timePeriodText = timePeriodMap[timePeriod];\n+    const isBarChartType = chartType === chartTypes.BAR;\n+    const isPieDonutChartType = chartType === chartTypes.DONUT || chartType === chartTypes.PIE;\n+\n+    let chartTitle = \"\";\n+    let chartAxisAlias = \"\";\n+\n+    if(statsType === statisticTypes.ANALYSES) {\n+      chartTitle = `Number of analyses run in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Analyses';\n+    } else if (statsType === statisticTypes.PROJECTS) {\n+      chartTitle = `Number of projects created in past ${timePeriodText}`;\n+      chartAxisAlias ='# of Projects';\n+    } else if (statsType === statisticTypes.SAMPLES)\n+    {\n+      chartTitle = `Number of samples created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Samples';\n+    } else if (statsType === statisticTypes.USERS) {\n+      chartTitle =`Number of users created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Users';\n+    }\n+\n+\n+    // The configuration required to display a chart\n+    const chartConfig = {\n+      title: { visible: true, text: chartTitle },\n+      forceFit: true,\n+      data: data !== null  ? data : [{key:\"\", value:\"\"}],\n+      padding: 'auto',\n+      xField: isBarChartType ? 'value' : 'key',\n+      yField: isBarChartType ? 'key' : 'value',\n+      meta: { key: { alias: 'Time Period' }, value: { alias: chartAxisAlias } },\n+      angleField:\"value\",\n+      label: {\n+        visible: data !== null ? (isPieDonutChartType ? false : true) : false,\n+        position: isBarChartType ? 'right' : 'middle',\n+        adjustColor: true,\n+        style: { fill: '#0D0E68', fontSize: 12, fontWeight: 600, opacity: 0.3 },\n+      },\n+      colorField: \"key\",\n+      legend: {\n+        visible: data !== null ? true : false,\n+        position: 'bottom-center',\n+      },\n+      statistic: {\n+        visible: data !== null ? true : false,\n+        content: {\n+          value: \"\",\n+          name: '',\n+        },\n+      },\n+    };\n+\n+    return chartConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MjIwMw==", "bodyText": "I also do not think this needs to be in the context. \u00a0It could be in a separate file and just called. \u00a0I don't think there is anything in here that is directly needed from the context.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502382203", "createdAt": "2020-10-09T12:08:20Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * This file gets the usage statistics and sets the global state\n+ * for the admin statistics page\n+ */\n+\n+import React, { useEffect, useState } from \"react\";\n+import { notification } from \"antd\";\n+import {\n+  getAdminStatistics,\n+  getUpdatedAdminAnalysesStatistics,\n+  getUpdatedAdminProjectStatistics,\n+  getUpdatedAdminSampleStatistics,\n+  getUpdatedAdminUserStatistics\n+} from \"../apis/admin/admin\";\n+\n+export const timePeriodMap = {\n+  1: \"day\",\n+  7: \"week\",\n+  14: \"2 weeks\",\n+  30: \"month\",\n+  90: \"quarter\",\n+  365: \"year\",\n+  730: \"2 years\",\n+  1825: \"5 years\",\n+  3650: \"10 years\"\n+};\n+\n+export const chartTypes = {\n+  BAR: \"bar\",\n+  COLUMN: \"column\",\n+  DONUT: \"donut\",\n+  LINE: \"line\",\n+  PIE: \"pie\"\n+}\n+\n+export const statisticTypes = {\n+  ANALYSES: \"analyses\",\n+  PROJECTS: \"projects\",\n+  SAMPLES: \"samples\",\n+  USERS: \"users\"\n+}\n+\n+// Default is to display statistics for the last week\n+export const defaultTimePeriod = 7;\n+\n+export const defaultChartType = chartTypes.BAR;\n+\n+const initialContext = {\n+  statistics: {\n+    analysesStats: [{}],\n+    projectStats: [{}],\n+    sampleStats: [{}],\n+    userStats: [{}]\n+  },\n+  basicStats : {\n+    analysesRun: 0,\n+    projectsCreated: 0,\n+    samplesCreated: 0,\n+    usersCreated: 0,\n+    usersLoggedIn: 0\n+  }\n+};\n+\n+const AdminStatisticsContext = React.createContext(initialContext);\n+\n+function AdminStatisticsProvider(props) {\n+  const [adminStatisticsContext, setAdminStatisticsContext] = useState(initialContext);\n+\n+  // Get basic usage stats for the time period\n+  useEffect(() => {\n+    getAdminStatistics(defaultTimePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  // Get updated project usage stats for the selected time period\n+  function updateProjectStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminProjectStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated user usage stats for the selected time period\n+  function updateUserStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminUserStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated analyses usage stats for the selected time period\n+  function updateAnalysesStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminAnalysesStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  // Get updated sample usage stats for the selected time period\n+  function updateSampleStatsTimePeriod(timePeriod) {\n+    getUpdatedAdminSampleStatistics(timePeriod).then(res => {\n+      console.log(res);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  /*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   * @param timePeriod - The time period for the statistics\n+   */\n+  function getChartConfig(chartType, statsType, timePeriod)\n+  {\n+    let data = null;\n+    const timePeriodText = timePeriodMap[timePeriod];\n+    const isBarChartType = chartType === chartTypes.BAR;\n+    const isPieDonutChartType = chartType === chartTypes.DONUT || chartType === chartTypes.PIE;\n+\n+    let chartTitle = \"\";\n+    let chartAxisAlias = \"\";\n+\n+    if(statsType === statisticTypes.ANALYSES) {\n+      chartTitle = `Number of analyses run in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Analyses';\n+    } else if (statsType === statisticTypes.PROJECTS) {\n+      chartTitle = `Number of projects created in past ${timePeriodText}`;\n+      chartAxisAlias ='# of Projects';\n+    } else if (statsType === statisticTypes.SAMPLES)\n+    {\n+      chartTitle = `Number of samples created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Samples';\n+    } else if (statsType === statisticTypes.USERS) {\n+      chartTitle =`Number of users created in past ${timePeriodText}`;\n+      chartAxisAlias = '# of Users';\n+    }\n+\n+\n+    // The configuration required to display a chart\n+    const chartConfig = {\n+      title: { visible: true, text: chartTitle },\n+      forceFit: true,\n+      data: data !== null  ? data : [{key:\"\", value:\"\"}],\n+      padding: 'auto',\n+      xField: isBarChartType ? 'value' : 'key',\n+      yField: isBarChartType ? 'key' : 'value',\n+      meta: { key: { alias: 'Time Period' }, value: { alias: chartAxisAlias } },\n+      angleField:\"value\",\n+      label: {\n+        visible: data !== null ? (isPieDonutChartType ? false : true) : false,\n+        position: isBarChartType ? 'right' : 'middle',\n+        adjustColor: true,\n+        style: { fill: '#0D0E68', fontSize: 12, fontWeight: 600, opacity: 0.3 },\n+      },\n+      colorField: \"key\",\n+      legend: {\n+        visible: data !== null ? true : false,\n+        position: 'bottom-center',\n+      },\n+      statistic: {\n+        visible: data !== null ? true : false,\n+        content: {\n+          value: \"\",\n+          name: '',\n+        },\n+      },\n+    };\n+\n+    return chartConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MTY0Ng=="}, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzA0NA==", "bodyText": "Take a look at Row and Col from Ant Design. \u00a0You get a lot of this with proper height separations and media queries. Right now your cards stack on touching each other", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502383044", "createdAt": "2020-10-09T12:10:09Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/BasicStats.jsx", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * This file renders the Basic Statistics component\n+ * with functionality to view advanced statistics\n+ * charts\n+ */\n+\n+import React, { useContext, useState } from \"react\";\n+import { Button, Card, Statistic } from \"antd\";\n+import { SPACE_LG, SPACE_XS } from \"../../../../styles/spacing\";\n+import AdvancedStatistics from \"./AdvancedStatistics\";\n+import {\n+  AdminStatisticsContext,\n+  defaultTimePeriod,\n+  statisticTypes,\n+  timePeriodMap\n+} from \"../../../../contexts/AdminStatisticsContext\";\n+\n+export default function BasicStats() {\n+  const [statsChartView, setStatsChartView] = useState(null);\n+\n+  const { adminStatisticsContext } = useContext(\n+    AdminStatisticsContext\n+  );\n+\n+  return (\n+    <div className=\"t-statistics\">\n+      <div style={{marginBottom: SPACE_LG}} className=\"t-stats-basic\">\n+        <div style={{display: \"flex\",\n+          justifyContent: \"flex-start\", flexWrap: \"wrap\"}}>\n+            <Card style={{width: 240, marginRight: SPACE_XS}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d013a64c4bbff49f15a22e1b73cd95521b88a51b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff7ec157807d1b1bc99e6e65236ed77a1bcee291", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/ff7ec157807d1b1bc99e6e65236ed77a1bcee291", "committedDate": "2020-10-09T14:26:50Z", "message": "Changed api endpoints for statistics. Moved chart config into its own file rather than have it in the context. Refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a232353ca631dee6a88a033d3d350b33fc3d407b", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/a232353ca631dee6a88a033d3d350b33fc3d407b", "committedDate": "2020-10-14T16:12:25Z", "message": "Updated to use ant design charts 1.0.0. Refactored code in BasicStats component."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabc12d61cf03213a284be4781c734393b5c67a4", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/aabc12d61cf03213a284be4781c734393b5c67a4", "committedDate": "2020-10-14T19:16:59Z", "message": "Moved title from chart config into advancestatistics as new version of ant design charts no longer has a title field. Cleaned up chart config. Added a border to statistics card when hovered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82a9fd41e56400f006208d95d64b65927b17b8c", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/a82a9fd41e56400f006208d95d64b65927b17b8c", "committedDate": "2020-10-15T15:38:44Z", "message": "Added direct urls to stats for analyses, projects, samples, and users so a user can visit them via url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ae5019dbec584463139ad561a5eda951e8d3e7", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/f6ae5019dbec584463139ad561a5eda951e8d3e7", "committedDate": "2020-10-15T16:02:57Z", "message": "Fixed logic to check which url the page is on"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55597c169da58c3e48dcdb94c8b5c7e2eff8f08", "author": {"user": {"login": "joshsadam", "name": "Josh Adam"}}, "url": "https://github.com/phac-nml/irida/commit/e55597c169da58c3e48dcdb94c8b5c7e2eff8f08", "committedDate": "2020-10-15T17:42:18Z", "message": ":construction: Cleaned up routing and layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d0ba92aff2b0bf3a50b1337602c938094c59e0", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/72d0ba92aff2b0bf3a50b1337602c938094c59e0", "committedDate": "2020-10-15T20:12:02Z", "message": "Merge pull request #828 from phac-nml/ui-stats-layout-tweaks\n\n Cleaned up routing and layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49131b6dd2cd47bfa40b1db41caff90046339d63", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/49131b6dd2cd47bfa40b1db41caff90046339d63", "committedDate": "2020-10-15T20:24:30Z", "message": "Removed files not required"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODMxOTIz", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-505831923", "createdAt": "2020-10-09T16:38:25Z", "commit": {"oid": "ff7ec157807d1b1bc99e6e65236ed77a1bcee291"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozODoyNVrOHfRKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxNjo0MlrOHijEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0OTE3Mg==", "bodyText": "Maybe move these out into a constants file.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502549172", "createdAt": "2020-10-09T16:38:25Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/chart-config.js", "diffHunk": "@@ -0,0 +1,87 @@\n+import merge from \"lodash/merge\";\n+import {\n+  chartTypes,\n+  statisticTypes,\n+  timePeriodMap\n+} from \"../../contexts/AdminStatisticsContext\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7ec157807d1b1bc99e6e65236ed77a1bcee291"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NzM5Mw==", "bodyText": "Move this logic into the context. \u00a0pass it the type and the time period. \u00a0Keep the logic out of your component", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502567393", "createdAt": "2020-10-09T17:14:12Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Donut, Line, Pie } from \"@ant-design/charts\";\n+import { Form } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext,\n+  defaultTimePeriod,\n+  defaultChartType,\n+  chartTypes,\n+  statisticTypes\n+} from \"../../../../contexts/AdminStatisticsContext\";\n+import { SPACE_LG } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+\n+import { getChartConfiguration } from \"../../chart-config\"\n+\n+export default function AdvancedStatistics({statType}) {\n+\n+  const {\n+    adminStatisticsContext,\n+    updateAnalysesStatsTimePeriod,\n+    updateProjectStatsTimePeriod,\n+    updateSampleStatsTimePeriod,\n+    updateUserStatsTimePeriod\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod);\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+\n+  const components = {\n+    [chartTypes.BAR]: Bar,\n+    [chartTypes.COLUMN]: Column,\n+    [chartTypes.LINE]: Line,\n+    [chartTypes.PIE]: Pie,\n+    [chartTypes.DONUT]: Donut,\n+  };\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    setTimePeriod(defaultTimePeriod);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7ec157807d1b1bc99e6e65236ed77a1bcee291"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2ODUxMQ==", "bodyText": "Just an FYI: this can also be written:\n<TimePeriodSelect onChange={updateTimePeriod} />\n\nSince you are just passing the argument.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r502568511", "createdAt": "2020-10-09T17:16:31Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Donut, Line, Pie } from \"@ant-design/charts\";\n+import { Form } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext,\n+  defaultTimePeriod,\n+  defaultChartType,\n+  chartTypes,\n+  statisticTypes\n+} from \"../../../../contexts/AdminStatisticsContext\";\n+import { SPACE_LG } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+\n+import { getChartConfiguration } from \"../../chart-config\"\n+\n+export default function AdvancedStatistics({statType}) {\n+\n+  const {\n+    adminStatisticsContext,\n+    updateAnalysesStatsTimePeriod,\n+    updateProjectStatsTimePeriod,\n+    updateSampleStatsTimePeriod,\n+    updateUserStatsTimePeriod\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [timePeriod, setTimePeriod] = useState(defaultTimePeriod);\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+\n+  const components = {\n+    [chartTypes.BAR]: Bar,\n+    [chartTypes.COLUMN]: Column,\n+    [chartTypes.LINE]: Line,\n+    [chartTypes.PIE]: Pie,\n+    [chartTypes.DONUT]: Donut,\n+  };\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    setTimePeriod(defaultTimePeriod);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {\n+    if(statType === statisticTypes.ANALYSES) {\n+      updateAnalysesStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.PROJECTS) {\n+      updateProjectStatsTimePeriod(timePeriod);\n+    } else if (statType === statisticTypes.SAMPLES) {\n+      updateSampleStatsTimePeriod(timePeriod)\n+    } else if (statType === statisticTypes.USERS) {\n+      updateUserStatsTimePeriod(timePeriod);\n+    }\n+    setTimePeriod(currTimePeriod);\n+  }\n+\n+  function displayChart() {\n+    const Component = components[chartType];\n+    return Component ? (\n+      <Component {...getChartConfiguration(chartType, statType, timePeriod, adminStatisticsContext.statistics)} />\n+    ) : null;\n+  }\n+\n+  return (\n+    <div style={{marginBottom: SPACE_LG}}>\n+      <Form\n+        form={form}\n+        initialValues={{\n+          \"time-period\": defaultTimePeriod,\n+        }}\n+      >\n+        <TimePeriodSelect onChange={(e) => updateTimePeriod(e)} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7ec157807d1b1bc99e6e65236ed77a1bcee291"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3Mjg0MQ==", "bodyText": "Can you rename this file to statistics-context.js \u00a0you have it named like a jsx component.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505672841", "createdAt": "2020-10-15T16:19:41Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,162 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ae5019dbec584463139ad561a5eda951e8d3e7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NDAzOA==", "bodyText": "Take a look at https://kentcdodds.com/blog/how-to-use-react-context-effectively I find it a highly effective way of setting up contexts.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505674038", "createdAt": "2020-10-15T16:21:34Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/contexts/AdminStatisticsContext.js", "diffHunk": "@@ -0,0 +1,162 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3Mjg0MQ=="}, "originalCommit": {"oid": "f6ae5019dbec584463139ad561a5eda951e8d3e7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4MzQ1Nw==", "bodyText": "Is this just placeholder stuff? Why are you not just passing the data in directly? \u00a0I really thought all you would pass in here is the chartType. \u00a0If there is no data then you would not display any of this anyways.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505683457", "createdAt": "2020-10-15T16:35:11Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/chart-config.js", "diffHunk": "@@ -0,0 +1,88 @@\n+import merge from \"lodash/merge\";\n+import {\n+  chartTypes,\n+  statisticTypes\n+} from \"../../contexts/AdminStatisticsContext\";\n+\n+/*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   */\n+export function getChartConfiguration(chartType, statsType, statistics) {\n+  let data = [{\"key\":\"\", \"value\":\"\"}];\n+\n+  if(statsType === statisticTypes.ANALYSES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ae5019dbec584463139ad561a5eda951e8d3e7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4Mzg5Nw==", "bodyText": "You might want a separate config setup for just tiny charts", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505683897", "createdAt": "2020-10-15T16:35:52Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/chart-config.js", "diffHunk": "@@ -0,0 +1,88 @@\n+import merge from \"lodash/merge\";\n+import {\n+  chartTypes,\n+  statisticTypes\n+} from \"../../contexts/AdminStatisticsContext\";\n+\n+/*\n+   * Gets the config required for the chart\n+   * @param chartType - The type of chart (bar, column, line, or pie)\n+   * @param data - The data for the chart\n+   * @param statsType - The type of statistics (projects, analyses, samples, users)\n+   */\n+export function getChartConfiguration(chartType, statsType, statistics) {\n+  let data = [{\"key\":\"\", \"value\":\"\"}];\n+\n+  if(statsType === statisticTypes.ANALYSES) {\n+    data = statistics.analysesStats;\n+  } else if (statsType === statisticTypes.PROJECTS) {\n+    data = statistics.projectStats;\n+  } else if (statsType === statisticTypes.SAMPLES)\n+  {\n+    data = statistics.sampleStats;\n+  } else if (statsType === statisticTypes.USERS) {\n+    data = statistics.userStats;\n+  }\n+\n+  /*\n+   * Tiny charts only require an array of values rather than\n+   * an array of objects.\n+   */\n+  if(chartType === chartTypes.TINYCOLUMN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ae5019dbec584463139ad561a5eda951e8d3e7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzQ1MA==", "bodyText": "Is this still needed after the way I refactored it?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505987450", "createdAt": "2020-10-16T02:15:34Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/AdminSideMenu.jsx", "diffHunk": "@@ -43,7 +43,23 @@ export default function AdminHeader() {\n                 <img style={{ height: 64, width: 200 }} src={setBaseUrl(\"/resources/img/irida_logo_dark.svg\")}/>\n               </Link>\n               <Menu className={\"t-admin-side-menu\"} style={{ height: '100vh' }} theme={\"dark\"} mode={\"inline\"}\n-                    selectedKeys={[keyname ? parseKey(keyname) : ADMIN.USERS]}>\n+                    selectedKeys={[keyname ?\n+                      ( parseKey(keyname) !== \"admin\" ?\n+                          !statsPages.includes(parseKey(keyname)) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49131b6dd2cd47bfa40b1db41caff90046339d63"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4ODEyNQ==", "bodyText": "I am wondering if this should not also be a radio.group buttons?  Not to many options and easy to click.  Thoughts?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r505988125", "createdAt": "2020-10-16T02:16:42Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/TimePeriodSelect.jsx", "diffHunk": "@@ -0,0 +1,52 @@\n+import React from \"react\";\n+import { Form, Select } from \"antd\";\n+\n+/**\n+ * React component for updating the time period for statistics.\n+ * @param {string} [name] - form name value\n+ * @param {function} [onChange] - called when the component changes value\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function TimePeriodSelect({ onChange = () => {} }) {\n+  return (\n+    <Form.Item\n+        label ={\n+          <span>\n+            Time Period\n+          </span>\n+        }\n+      name=\"time-period\"\n+    >\n+      <Select onChange={onChange} className={\"t-time-period\"} style={{width: 120}}>\n+        <Select.Option value={1}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49131b6dd2cd47bfa40b1db41caff90046339d63"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/567cdb75bcedd68dc9d0811b02db3369cca719e4", "committedDate": "2020-10-16T13:48:01Z", "message": "Refactored code, renamed context file, moved constants into a constant file, changed select to radio group buttons for time period"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTAwNjYw", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-510500660", "createdAt": "2020-10-16T14:02:16Z", "commit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowMjoxNlrOHi_wIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowMjoxNlrOHi_wIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ1ODE0NA==", "bodyText": "Unused import", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506458144", "createdAt": "2020-10-16T14:02:16Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTAxMjgx", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-510501281", "createdAt": "2020-10-16T14:03:00Z", "commit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowMzowMFrOHi_zYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowMzowMFrOHi_zYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ1ODk3Ng==", "bodyText": "Your response entities should have a type associated e.g. ResponseEntity<String>", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506458976", "createdAt": "2020-10-16T14:03:00Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+\n+/**\n+ * Controller to handle ajax requests for the Admin Panel statistics page.\n+ */\n+\n+@RestController\n+@RequestMapping(\"/ajax/statistics\")\n+public class AdminStatisticsAjaxController {\n+\n+\t@Autowired\n+\tpublic AdminStatisticsAjaxController() {\n+\t}\n+\n+\t/**\n+\t * Get usage statistics for projects, samples, analyses, and users\n+\t * for the provided time period\n+\t *\n+\t * @param timePeriod The time period for which to retrieve usage stats for\n+\t * @return dto with usage stats\n+\t */\n+\t@RequestMapping(value = \"/basic\", method = RequestMethod.GET)\n+\tpublic ResponseEntity getAdminStatistics(Long timePeriod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTAxOTI2", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-510501926", "createdAt": "2020-10-16T14:03:45Z", "commit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowMzo0NVrOHi_26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyNDowMFrOHjE0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ1OTg4MA==", "bodyText": "Do you need this logging statement?", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506459880", "createdAt": "2020-10-16T14:03:45Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/admin/admin.js", "diffHunk": "@@ -0,0 +1,60 @@\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import axios from \"axios\";\n+\n+const ADMIN_URL = setBaseUrl(`/ajax/statistics`);\n+\n+/*\n+ * Get all the statistics for the admin panel\n+ * @return {Promise<*>} `data` contains the OK response and the details map;\n+ *                      `error` contains error information if an error occurred.\n+ */\n+export async function getAdminStatistics() {\n+  return await axios.get(`${ADMIN_URL}/basic`).then(({data}) => data).catch(error => {\n+    console.log(error.response.data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MzkzNA==", "bodyText": "Can you add `layout=\"vertical\"` to the \u00a0Form it will line things up better for you.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506493934", "createdAt": "2020-10-16T14:37:22Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Line, Pie } from \"@ant-design/charts\";\n+import { Card, Form, PageHeader } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext\n+} from \"../../../../contexts/statistics-context\";\n+\n+import {\n+  chartTypes,\n+  defaultChartType,\n+  defaultTimePeriod,\n+  statisticTypes\n+} from \"../../statistics-constants\";\n+\n+import { SPACE_LG, SPACE_MD } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+import { getChartConfiguration } from \"../../chart-config\";\n+import { useNavigate } from \"@reach/router\";\n+import { setBaseUrl } from \"../../../../utilities/url-utilities\";\n+\n+export default function AdvancedStatistics({ statType }) {\n+  const {\n+    adminStatisticsContext,\n+    getUpdatedStatsForStatType\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+  const navigate = useNavigate();\n+\n+  const components = {\n+    [chartTypes.BAR]: Bar,\n+    [chartTypes.COLUMN]: Column,\n+    [chartTypes.LINE]: Line,\n+    [chartTypes.PIE]: Pie,\n+  };\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {\n+    getUpdatedStatsForStatType(statType, currTimePeriod);\n+  }\n+\n+  const chartTitle =\n+    statType === statisticTypes.ANALYSES\n+      ? \"Number of Analyses Ran\"\n+      : statType === statisticTypes.PROJECTS\n+      ? \"Number of Projects Created\"\n+      : statType === statisticTypes.SAMPLES\n+      ? \"Number of Samples Created\"\n+      : statType === statisticTypes.USERS\n+      ? \"Number of Users Created\"\n+      : null;\n+\n+  function displayChart() {\n+    const Component = components[chartType];\n+    let data = [{\"key\":\"\", \"value\":\"\"}];\n+\n+    if(statType === statisticTypes.ANALYSES) {\n+      data = adminStatisticsContext.statistics.analysesStats;\n+    } else if (statType === statisticTypes.PROJECTS) {\n+      data = adminStatisticsContext.statistics.projectStats;\n+    } else if (statType === statisticTypes.SAMPLES) {\n+      data = adminStatisticsContext.statistics.sampleStats;\n+    } else if (statType === statisticTypes.USERS) {\n+      data = adminStatisticsContext.statistics.userStats;\n+    }\n+\n+    return Component ? (\n+      <Component\n+        {...getChartConfiguration(\n+          chartType,\n+          data\n+        )}\n+      />\n+    ) : null;\n+  }\n+\n+  return (\n+    <>\n+      <PageHeader\n+        title={chartTitle}\n+        onBack={() => navigate(setBaseUrl(`/admin/statistics`))}\n+      />\n+      <Card style={{ margin: SPACE_LG }}>\n+        <Form", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNDcwNg==", "bodyText": "This should be fixed in the code I just sent you.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506534706", "createdAt": "2020-10-16T15:17:08Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/AdminSideMenu.jsx", "diffHunk": "@@ -43,7 +43,23 @@ export default function AdminHeader() {\n                 <img style={{ height: 64, width: 200 }} src={setBaseUrl(\"/resources/img/irida_logo_dark.svg\")}/>\n               </Link>\n               <Menu className={\"t-admin-side-menu\"} style={{ height: '100vh' }} theme={\"dark\"} mode={\"inline\"}\n-                    selectedKeys={[keyname ? parseKey(keyname) : ADMIN.USERS]}>\n+                    selectedKeys={[keyname ?\n+                      ( parseKey(keyname) !== \"admin\" ?\n+                          !statsPages.includes(parseKey(keyname)) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzQ1MA=="}, "originalCommit": {"oid": "49131b6dd2cd47bfa40b1db41caff90046339d63"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzOTAxMQ==", "bodyText": "This complex ternary statements are overly complicated. \u00a0Why not just create an object:\nconst TITLES = {\n    [statisticTypes.ANALYSES]: \"Number of Analyses Ran\",\n    [statisticTypes.PROJECTS]: \"Number of Projects Created\",\n    [statisticTypes.SAMPLES]: \"Number of Samples Created\",\n    [statisticTypes.USERS]: \"Number of Users Created\",\n  };\nThen in you JSX:\ntitle={TITLES[chartType]}\nI would do the same thing with the large ternary below as well.", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506539011", "createdAt": "2020-10-16T15:21:43Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/statistics/AdvancedStatistics.jsx", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * This file renders the Advanced Statistics component\n+ * which displays statistics in charts\n+ */\n+\n+import React, { useContext, useEffect, useState } from \"react\";\n+import { Bar, Column, Line, Pie } from \"@ant-design/charts\";\n+import { Card, Form, PageHeader } from \"antd\";\n+import { TimePeriodSelect } from \"./TimePeriodSelect\";\n+import {\n+  AdminStatisticsContext\n+} from \"../../../../contexts/statistics-context\";\n+\n+import {\n+  chartTypes,\n+  defaultChartType,\n+  defaultTimePeriod,\n+  statisticTypes\n+} from \"../../statistics-constants\";\n+\n+import { SPACE_LG, SPACE_MD } from \"../../../../styles/spacing\";\n+import { ChartTypeButtons } from \"./ChartTypeButtons\";\n+import { getChartConfiguration } from \"../../chart-config\";\n+import { useNavigate } from \"@reach/router\";\n+import { setBaseUrl } from \"../../../../utilities/url-utilities\";\n+\n+export default function AdvancedStatistics({ statType }) {\n+  const {\n+    adminStatisticsContext,\n+    getUpdatedStatsForStatType\n+  } = useContext(AdminStatisticsContext);\n+\n+  const [chartType, setChartType] = useState(defaultChartType);\n+  const [form] = Form.useForm();\n+  const navigate = useNavigate();\n+\n+  const components = {\n+    [chartTypes.BAR]: Bar,\n+    [chartTypes.COLUMN]: Column,\n+    [chartTypes.LINE]: Line,\n+    [chartTypes.PIE]: Pie,\n+  };\n+\n+  useEffect(() => {\n+    setChartType(defaultChartType);\n+    form.setFieldsValue({\n+      \"time-period\": defaultTimePeriod,\n+    });\n+  }, [statType]);\n+\n+  function updateTimePeriod(currTimePeriod) {\n+    getUpdatedStatsForStatType(statType, currTimePeriod);\n+  }\n+\n+  const chartTitle =\n+    statType === statisticTypes.ANALYSES\n+      ? \"Number of Analyses Ran\"\n+      : statType === statisticTypes.PROJECTS\n+      ? \"Number of Projects Created\"\n+      : statType === statisticTypes.SAMPLES\n+      ? \"Number of Samples Created\"\n+      : statType === statisticTypes.USERS\n+      ? \"Number of Users Created\"\n+      : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MTI0Mw==", "bodyText": "Comments please", "url": "https://github.com/phac-nml/irida/pull/824#discussion_r506541243", "createdAt": "2020-10-16T15:24:00Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/statistics-constants.js", "diffHunk": "@@ -0,0 +1,32 @@\n+export const timePeriodMap = {\n+  1: \"day\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567cdb75bcedd68dc9d0811b02db3369cca719e4"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0aba73217bab99d94702474de6064bf84e81c1", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/6c0aba73217bab99d94702474de6064bf84e81c1", "committedDate": "2020-10-16T16:22:41Z", "message": "Added comments, refactored logic in AdvancedStatistics component to get rid of ternary statements, updated logic for setting select menu item in admin panel, added a vertical layout to form, removed logging statement and unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjQ2NzA3", "url": "https://github.com/phac-nml/irida/pull/824#pullrequestreview-510646707", "createdAt": "2020-10-16T16:59:24Z", "commit": {"oid": "6c0aba73217bab99d94702474de6064bf84e81c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1f8c5a368fc9635af43d8bbbdf5647db09ceec4", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/c1f8c5a368fc9635af43d8bbbdf5647db09ceec4", "committedDate": "2020-10-16T18:04:13Z", "message": "Added null check when returning a match to the regex for the url. Ignored test that is fixed in later branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65dc7cc5dd49918acabeaa255d74f849eeec9970", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/65dc7cc5dd49918acabeaa255d74f849eeec9970", "committedDate": "2020-10-16T19:19:07Z", "message": "Ignored test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 138, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}