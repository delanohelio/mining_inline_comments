{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTM5Njc1", "number": 699, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1OTo0OVrOD_valQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowMDo0N1rOD_vcPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTYzNzMzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1OTo0OVrOGalQIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MToxOFrOGatm2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNjQ5Ng==", "bodyText": "Change the constant d to something more descriptive", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430526496", "createdAt": "2020-05-26T15:59:49Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,\n+  options = {\n     hour: \"numeric\",\n     minute: \"numeric\",\n-    second: \"numeric\",\n     year: \"numeric\",\n     month: \"short\",\n     day: \"numeric\",\n-    ...options\n-  };\n-  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, params).format(\n+  }\n+) {\n+  if (!isDate(d)) return \"\";\n+  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, options).format(\n     new Date(d)\n   );\n }\n \n-/**\n- * Get how much time has passed since a certain date.\n- * @param {Number} now current\n- * @param {Number} date event occurred\n- * @return {string} formatted time since.\n- */\n-export function formatTimeForNow({ now, date }) {\n-  const dNow = new Date(now);\n-  const dDate = new Date(date);\n-  if (moment.isDate(dNow) && moment.isDate(dDate)) {\n-    return moment(dDate).from(moment(dNow));\n-  }\n-}\n-\n /**\n  * Generate the a human readable form from milliseconds.\n  * @param {Number} date to format\n  * @return {string} humanized version of the date\n  */\n export function getHumanizedDuration({ date }) {\n-  if (date !== null) {\n-    return moment.duration(date).humanize();\n-  }\n-  return \"\";\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  return dayjs.duration(-date).humanize(false);\n }\n \n /**\n  * Generate the time from now.  Renders as human readable.s\n- * @param {string} date raw string date from server\n+ * @param {number} date raw string date from server\n  * @return {*}\n  */\n export function fromNow({ date }) {\n-  const start = new Date(date);\n-  if (moment.isDate(start)) {\n-    const t = moment(start).fromNow();\n-    return t;\n-  }\n-  return \"\";\n+  // Using dayjs because Intl.RelativeTimeFormat does not have browser\n+  // support in IE11 or safari yet.\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  const d1 = dayjs();\n+  const d2 = dayjs(date);\n+  return dayjs.duration(d2.diff(d1)).humanize(true);\n }\n \n /**\n  * Format unix timestamp as human readable string.\n- * @param  {Number} date unix timestamp\n+ * @param  {(string | number)} date unix timestamp\n  * @param {String} format defaults to \"lll\" which is mmm dd, YYYY h:mm AM\n  * @return {string} formatted date\n  */\n-export function formatDate({ date, format = \"lll\" }) {\n-  const t = new Date(date);\n-  if (moment.isDate(t)) {\n-    return moment(t).format(format);\n-  }\n-  return \"\";\n+export function formatDate({ date, format }) {\n+  return formatInternationalizedDateTime(date, format);\n }\n \n /**\n  * Utility function to determine if a string is a date.\n- * @param {string} date\n+ * @param {(number | string)} date\n  * @returns {boolean}\n  */\n export function isDate(date) {\n-  return moment.isDate(new Date(date));\n+  const d = new Date(date);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2MzM4NA==", "bodyText": "Removed in 32cc2f1", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430663384", "createdAt": "2020-05-26T19:41:18Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,\n+  options = {\n     hour: \"numeric\",\n     minute: \"numeric\",\n-    second: \"numeric\",\n     year: \"numeric\",\n     month: \"short\",\n     day: \"numeric\",\n-    ...options\n-  };\n-  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, params).format(\n+  }\n+) {\n+  if (!isDate(d)) return \"\";\n+  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, options).format(\n     new Date(d)\n   );\n }\n \n-/**\n- * Get how much time has passed since a certain date.\n- * @param {Number} now current\n- * @param {Number} date event occurred\n- * @return {string} formatted time since.\n- */\n-export function formatTimeForNow({ now, date }) {\n-  const dNow = new Date(now);\n-  const dDate = new Date(date);\n-  if (moment.isDate(dNow) && moment.isDate(dDate)) {\n-    return moment(dDate).from(moment(dNow));\n-  }\n-}\n-\n /**\n  * Generate the a human readable form from milliseconds.\n  * @param {Number} date to format\n  * @return {string} humanized version of the date\n  */\n export function getHumanizedDuration({ date }) {\n-  if (date !== null) {\n-    return moment.duration(date).humanize();\n-  }\n-  return \"\";\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  return dayjs.duration(-date).humanize(false);\n }\n \n /**\n  * Generate the time from now.  Renders as human readable.s\n- * @param {string} date raw string date from server\n+ * @param {number} date raw string date from server\n  * @return {*}\n  */\n export function fromNow({ date }) {\n-  const start = new Date(date);\n-  if (moment.isDate(start)) {\n-    const t = moment(start).fromNow();\n-    return t;\n-  }\n-  return \"\";\n+  // Using dayjs because Intl.RelativeTimeFormat does not have browser\n+  // support in IE11 or safari yet.\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  const d1 = dayjs();\n+  const d2 = dayjs(date);\n+  return dayjs.duration(d2.diff(d1)).humanize(true);\n }\n \n /**\n  * Format unix timestamp as human readable string.\n- * @param  {Number} date unix timestamp\n+ * @param  {(string | number)} date unix timestamp\n  * @param {String} format defaults to \"lll\" which is mmm dd, YYYY h:mm AM\n  * @return {string} formatted date\n  */\n-export function formatDate({ date, format = \"lll\" }) {\n-  const t = new Date(date);\n-  if (moment.isDate(t)) {\n-    return moment(t).format(format);\n-  }\n-  return \"\";\n+export function formatDate({ date, format }) {\n+  return formatInternationalizedDateTime(date, format);\n }\n \n /**\n  * Utility function to determine if a string is a date.\n- * @param {string} date\n+ * @param {(number | string)} date\n  * @returns {boolean}\n  */\n export function isDate(date) {\n-  return moment.isDate(new Date(date));\n+  const d = new Date(date);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNjQ5Ng=="}, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTY0MDAyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowMDoyM1rOGalRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MToyMFrOGatm-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNjg5Ng==", "bodyText": "Change the constant d1 and d2 to something more descriptive", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430526896", "createdAt": "2020-05-26T16:00:23Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,\n+  options = {\n     hour: \"numeric\",\n     minute: \"numeric\",\n-    second: \"numeric\",\n     year: \"numeric\",\n     month: \"short\",\n     day: \"numeric\",\n-    ...options\n-  };\n-  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, params).format(\n+  }\n+) {\n+  if (!isDate(d)) return \"\";\n+  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, options).format(\n     new Date(d)\n   );\n }\n \n-/**\n- * Get how much time has passed since a certain date.\n- * @param {Number} now current\n- * @param {Number} date event occurred\n- * @return {string} formatted time since.\n- */\n-export function formatTimeForNow({ now, date }) {\n-  const dNow = new Date(now);\n-  const dDate = new Date(date);\n-  if (moment.isDate(dNow) && moment.isDate(dDate)) {\n-    return moment(dDate).from(moment(dNow));\n-  }\n-}\n-\n /**\n  * Generate the a human readable form from milliseconds.\n  * @param {Number} date to format\n  * @return {string} humanized version of the date\n  */\n export function getHumanizedDuration({ date }) {\n-  if (date !== null) {\n-    return moment.duration(date).humanize();\n-  }\n-  return \"\";\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  return dayjs.duration(-date).humanize(false);\n }\n \n /**\n  * Generate the time from now.  Renders as human readable.s\n- * @param {string} date raw string date from server\n+ * @param {number} date raw string date from server\n  * @return {*}\n  */\n export function fromNow({ date }) {\n-  const start = new Date(date);\n-  if (moment.isDate(start)) {\n-    const t = moment(start).fromNow();\n-    return t;\n-  }\n-  return \"\";\n+  // Using dayjs because Intl.RelativeTimeFormat does not have browser\n+  // support in IE11 or safari yet.\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  const d1 = dayjs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2MzQxOQ==", "bodyText": "Removed in 32cc2f1", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430663419", "createdAt": "2020-05-26T19:41:20Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,\n+  options = {\n     hour: \"numeric\",\n     minute: \"numeric\",\n-    second: \"numeric\",\n     year: \"numeric\",\n     month: \"short\",\n     day: \"numeric\",\n-    ...options\n-  };\n-  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, params).format(\n+  }\n+) {\n+  if (!isDate(d)) return \"\";\n+  return new Intl.DateTimeFormat(window.TL.LANGUAGE_TAG, options).format(\n     new Date(d)\n   );\n }\n \n-/**\n- * Get how much time has passed since a certain date.\n- * @param {Number} now current\n- * @param {Number} date event occurred\n- * @return {string} formatted time since.\n- */\n-export function formatTimeForNow({ now, date }) {\n-  const dNow = new Date(now);\n-  const dDate = new Date(date);\n-  if (moment.isDate(dNow) && moment.isDate(dDate)) {\n-    return moment(dDate).from(moment(dNow));\n-  }\n-}\n-\n /**\n  * Generate the a human readable form from milliseconds.\n  * @param {Number} date to format\n  * @return {string} humanized version of the date\n  */\n export function getHumanizedDuration({ date }) {\n-  if (date !== null) {\n-    return moment.duration(date).humanize();\n-  }\n-  return \"\";\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  return dayjs.duration(-date).humanize(false);\n }\n \n /**\n  * Generate the time from now.  Renders as human readable.s\n- * @param {string} date raw string date from server\n+ * @param {number} date raw string date from server\n  * @return {*}\n  */\n export function fromNow({ date }) {\n-  const start = new Date(date);\n-  if (moment.isDate(start)) {\n-    const t = moment(start).fromNow();\n-    return t;\n-  }\n-  return \"\";\n+  // Using dayjs because Intl.RelativeTimeFormat does not have browser\n+  // support in IE11 or safari yet.\n+  dayjs.extend(duration);\n+  dayjs.extend(relativeTime);\n+  const d1 = dayjs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNjg5Ng=="}, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTY0MTU3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowMDo0N1rOGalSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MToyNFrOGatnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNzE2Nw==", "bodyText": "Change the constant d to something more descriptive", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430527167", "createdAt": "2020-05-26T16:00:47Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2MzQ3Nw==", "bodyText": "Renamed in b901455", "url": "https://github.com/phac-nml/irida/pull/699#discussion_r430663477", "createdAt": "2020-05-26T19:41:24Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/utilities/date-utilities.js", "diffHunk": "@@ -1,79 +1,72 @@\n-import moment from \"moment\";\n+import dayjs from \"dayjs\";\n+import relativeTime from \"dayjs/plugin/relativeTime\";\n+import duration from \"dayjs/plugin/duration\";\n \n-export function formatInternationalizedDateTime(d, options = {}) {\n-  const params = {\n+export function formatInternationalizedDateTime(\n+  d,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNzE2Nw=="}, "originalCommit": {"oid": "cb6ef17c2fbce0f134be177a383a79262fbf083f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 884, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}