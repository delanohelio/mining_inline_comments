{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzM3ODA0", "number": 855, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxMzozM1rOE4HRrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowMjoyOVrOE4QfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc0OTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxRemoveItemSuccessResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxMzozM1rOHx2A8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxMzo1MVrOHyJ4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzI0OQ==", "bodyText": "Why are you using a custom class for this, it looks pretty much identical to AjaxSuccessResponse", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522027249", "createdAt": "2020-11-12T11:13:33Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxRemoveItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * UI Response for successfully removing an item. Will return the internationalized\n+ * success text.\n+ */\n+public class AjaxRemoveItemSuccessResponse extends AjaxResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzc3OA==", "bodyText": "Which extends to AjaxUpdateItemSuccessResponse, they are all the same.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522027778", "createdAt": "2020-11-12T11:14:20Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxRemoveItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * UI Response for successfully removing an item. Will return the internationalized\n+ * success text.\n+ */\n+public class AjaxRemoveItemSuccessResponse extends AjaxResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzI0OQ=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjgyNQ==", "bodyText": "Updated in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522352825", "createdAt": "2020-11-12T19:13:51Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxRemoveItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * UI Response for successfully removing an item. Will return the internationalized\n+ * success text.\n+ */\n+public class AjaxRemoveItemSuccessResponse extends AjaxResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAyNzI0OQ=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc3MDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxODo1NVrOHx2NjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDowNVrOHyJ5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDQ3Nw==", "bodyText": "I thought this would not work without a leading /, surprised this works.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522030477", "createdAt": "2020-11-12T11:18:55Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjkzMg==", "bodyText": "Yeah I was surprised too. Updated in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522352932", "createdAt": "2020-11-12T19:14:05Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDQ3Nw=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc3NDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMDowMFrOHx2QCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDoxMVrOHyJ5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTExNQ==", "bodyText": "Because this is a post mapping, which means you are creating a new item, can you drop the /new from the end of the mapping?", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522031115", "createdAt": "2020-11-12T11:20:00Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")\n+public class ReferenceFileAjaxController {\n+\n+\tprivate final UIProjectReferenceFileService uiProjectReferenceFileService;\n+\n+\t@Autowired\n+\tpublic ReferenceFileAjaxController(UIProjectReferenceFileService uiProjectReferenceFileService) {\n+\t\tthis.uiProjectReferenceFileService = uiProjectReferenceFileService;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Success message if file was successfully uploaded\n+\t */\n+\t@PostMapping(\"/project/{projectId}/new\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mjk5Ng==", "bodyText": "Updated in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522352996", "createdAt": "2020-11-12T19:14:11Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")\n+public class ReferenceFileAjaxController {\n+\n+\tprivate final UIProjectReferenceFileService uiProjectReferenceFileService;\n+\n+\t@Autowired\n+\tpublic ReferenceFileAjaxController(UIProjectReferenceFileService uiProjectReferenceFileService) {\n+\t\tthis.uiProjectReferenceFileService = uiProjectReferenceFileService;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Success message if file was successfully uploaded\n+\t */\n+\t@PostMapping(\"/project/{projectId}/new\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTExNQ=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc3ODAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMDo1NFrOHx2SMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDoxN1rOHyJ5qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTY2Ng==", "bodyText": "Same here, since this is a delete mapping just map to @DeleteMapping(\"\")", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522031666", "createdAt": "2020-11-12T11:20:54Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")\n+public class ReferenceFileAjaxController {\n+\n+\tprivate final UIProjectReferenceFileService uiProjectReferenceFileService;\n+\n+\t@Autowired\n+\tpublic ReferenceFileAjaxController(UIProjectReferenceFileService uiProjectReferenceFileService) {\n+\t\tthis.uiProjectReferenceFileService = uiProjectReferenceFileService;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Success message if file was successfully uploaded\n+\t */\n+\t@PostMapping(\"/project/{projectId}/new\")\n+\tpublic ResponseEntity<AjaxResponse> addReferenceFileToProject(@PathVariable Long projectId,\n+\t\t\t@RequestParam(value = \"file\") List<MultipartFile> files, final Locale locale) {\n+\t\ttry\n+\t\t{\n+\t\t\treturn ResponseEntity.ok(uiProjectReferenceFileService.addReferenceFileToProject(projectId, files, locale));\n+\t\t} catch (UnsupportedReferenceFileContentError e) {\n+\t\t\treturn ResponseEntity.status(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)\n+\t\t\t\t\t.body(new AjaxErrorResponse(e.getMessage()));\n+\t\t} catch (IOException e) {\n+\t\t\treturn ResponseEntity.status(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)\n+\t\t\t\t\t.body(new AjaxErrorResponse(\n+\t\t\t\t\t\t\te.getMessage()));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Delete a reference file. This will remove it from the project.\n+\t *\n+\t * @param fileId    The id of the file to remove.\n+\t * @param projectId the project to delete the reference file for.\n+\t * @param locale    the locale specified by the browser.\n+\t * @return Success or error based on the result of deleting the file.\n+\t */\n+\t@DeleteMapping(\"/delete\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzA2NQ==", "bodyText": "Updated in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522353065", "createdAt": "2020-11-12T19:14:17Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.HttpStatus;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIProjectReferenceFileService;\n+\n+/**\n+ * Controller for ajax actions for reference files\n+ */\n+\n+@RestController\n+@RequestMapping(\"ajax/referenceFiles\")\n+public class ReferenceFileAjaxController {\n+\n+\tprivate final UIProjectReferenceFileService uiProjectReferenceFileService;\n+\n+\t@Autowired\n+\tpublic ReferenceFileAjaxController(UIProjectReferenceFileService uiProjectReferenceFileService) {\n+\t\tthis.uiProjectReferenceFileService = uiProjectReferenceFileService;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Success message if file was successfully uploaded\n+\t */\n+\t@PostMapping(\"/project/{projectId}/new\")\n+\tpublic ResponseEntity<AjaxResponse> addReferenceFileToProject(@PathVariable Long projectId,\n+\t\t\t@RequestParam(value = \"file\") List<MultipartFile> files, final Locale locale) {\n+\t\ttry\n+\t\t{\n+\t\t\treturn ResponseEntity.ok(uiProjectReferenceFileService.addReferenceFileToProject(projectId, files, locale));\n+\t\t} catch (UnsupportedReferenceFileContentError e) {\n+\t\t\treturn ResponseEntity.status(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)\n+\t\t\t\t\t.body(new AjaxErrorResponse(e.getMessage()));\n+\t\t} catch (IOException e) {\n+\t\t\treturn ResponseEntity.status(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE)\n+\t\t\t\t\t.body(new AjaxErrorResponse(\n+\t\t\t\t\t\t\te.getMessage()));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Delete a reference file. This will remove it from the project.\n+\t *\n+\t * @param fileId    The id of the file to remove.\n+\t * @param projectId the project to delete the reference file for.\n+\t * @param locale    the locale specified by the browser.\n+\t * @return Success or error based on the result of deleting the file.\n+\t */\n+\t@DeleteMapping(\"/delete\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMTY2Ng=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc5NzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNTo1NlrOHx2dnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNDozNlrOHyJ6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDU4OQ==", "bodyText": "This should be moved over to the ajax controller", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522034589", "createdAt": "2020-11-12T11:25:56Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -60,71 +51,19 @@ public ReferenceFileController(ProjectService projectService, ReferenceFileServi\n \t/**\n \t * Download a reference file based on the id passed.\n \t *\n-\t * @param fileId\n-\t *            The id of the file to download\n-\t * @param response\n-\t *            {@link HttpServletResponse} to write to file to\n-\t *\n-\t * @throws IOException\n-\t *             if we fail to read the file from disk.\n+\t * @param fileId   The id of the file to download\n+\t * @param response {@link HttpServletResponse} to write to file to\n+\t * @throws IOException if we fail to read the file from disk.\n \t */\n \t@RequestMapping(value = \"/download/{fileId}\")\n-\tpublic void downloadReferenceFile(@PathVariable Long fileId,\n-\t\t\tHttpServletResponse response) throws IOException {\n+\tpublic void downloadReferenceFile(@PathVariable Long fileId, HttpServletResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzI2MA==", "bodyText": "Moved in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522353260", "createdAt": "2020-11-12T19:14:36Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -60,71 +51,19 @@ public ReferenceFileController(ProjectService projectService, ReferenceFileServi\n \t/**\n \t * Download a reference file based on the id passed.\n \t *\n-\t * @param fileId\n-\t *            The id of the file to download\n-\t * @param response\n-\t *            {@link HttpServletResponse} to write to file to\n-\t *\n-\t * @throws IOException\n-\t *             if we fail to read the file from disk.\n+\t * @param fileId   The id of the file to download\n+\t * @param response {@link HttpServletResponse} to write to file to\n+\t * @throws IOException if we fail to read the file from disk.\n \t */\n \t@RequestMapping(value = \"/download/{fileId}\")\n-\tpublic void downloadReferenceFile(@PathVariable Long fileId,\n-\t\t\tHttpServletResponse response) throws IOException {\n+\tpublic void downloadReferenceFile(@PathVariable Long fileId, HttpServletResponse response) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDU4OQ=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc5OTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNjoyOFrOHx2ezA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1NDo1MlrOHx-j1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDg5Mg==", "bodyText": "Don't you have this in the ajax cntroller?  Or is it here for other old requests?", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522034892", "createdAt": "2020-11-12T11:26:28Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -135,8 +74,8 @@ public void downloadReferenceFile(@PathVariable Long fileId,\n \t * @throws IOException if the new reference file cannot be saved\n \t */\n \t@RequestMapping(\"/new\")\n-\tpublic Map<String, Object> addIndependentReferenceFile(\n-\t\t\tfinal @RequestParam(value = \"file\") MultipartFile file, final HttpServletResponse response, final Locale locale) throws IOException {\n+\tpublic Map<String, Object> addIndependentReferenceFile(final @RequestParam(value = \"file\") MultipartFile file,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTE1MQ==", "bodyText": "This is for other old requests. It's not being used by the stuff I refactored", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522115151", "createdAt": "2020-11-12T13:44:57Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -135,8 +74,8 @@ public void downloadReferenceFile(@PathVariable Long fileId,\n \t * @throws IOException if the new reference file cannot be saved\n \t */\n \t@RequestMapping(\"/new\")\n-\tpublic Map<String, Object> addIndependentReferenceFile(\n-\t\t\tfinal @RequestParam(value = \"file\") MultipartFile file, final HttpServletResponse response, final Locale locale) throws IOException {\n+\tpublic Map<String, Object> addIndependentReferenceFile(final @RequestParam(value = \"file\") MultipartFile file,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDg5Mg=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDY0MA==", "bodyText": "Looks like it was for the generic_pipeline page which you are refactoring. I will leave it in there for now", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522130640", "createdAt": "2020-11-12T14:06:54Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -135,8 +74,8 @@ public void downloadReferenceFile(@PathVariable Long fileId,\n \t * @throws IOException if the new reference file cannot be saved\n \t */\n \t@RequestMapping(\"/new\")\n-\tpublic Map<String, Object> addIndependentReferenceFile(\n-\t\t\tfinal @RequestParam(value = \"file\") MultipartFile file, final HttpServletResponse response, final Locale locale) throws IOException {\n+\tpublic Map<String, Object> addIndependentReferenceFile(final @RequestParam(value = \"file\") MultipartFile file,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDg5Mg=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NzI1Mg==", "bodyText": "Sounds good, I will clean it up.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522167252", "createdAt": "2020-11-12T14:54:52Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileController.java", "diffHunk": "@@ -135,8 +74,8 @@ public void downloadReferenceFile(@PathVariable Long fileId,\n \t * @throws IOException if the new reference file cannot be saved\n \t */\n \t@RequestMapping(\"/new\")\n-\tpublic Map<String, Object> addIndependentReferenceFile(\n-\t\t\tfinal @RequestParam(value = \"file\") MultipartFile file, final HttpServletResponse response, final Locale locale) throws IOException {\n+\tpublic Map<String, Object> addIndependentReferenceFile(final @RequestParam(value = \"file\") MultipartFile file,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDg5Mg=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjgyMDU0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMjoxNVrOHx2ruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNTowMVrOHyJ7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODIwMw==", "bodyText": "Can we set this from an ajax request, trying to get rid of all these global variables.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522038203", "createdAt": "2020-11-12T11:32:15Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzUyOA==", "bodyText": "Updated in 785d350", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522353528", "createdAt": "2020-11-12T19:15:01Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODIwMw=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjgyMzgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMzoxMlrOHx2t2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNTo0M1rOHyJ9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODc0NA==", "bodyText": "Why an empty catch?", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522038744", "createdAt": "2020-11-12T11:33:12Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;\n+\n+  // Object to hold alert messages for if a user can manage the project or not\n+  const alertMessage = {\n+    true: i18n(\"ReferenceFile.ownerUploadFileAlert\"),\n+    false:i18n(\"ReferenceFile.userUploadFileAlert\")\n+  }\n+\n+  // Columns for the reference file table\n+  const referenceFileTableColumns = [\n+    {\n+      title: i18n(\"ReferenceFile.name\"),\n+      dataIndex: \"label\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.size\"),\n+      dataIndex: \"size\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.added\"),\n+      dataIndex: \"createdDate\",\n+      render(text) {\n+        return formatInternationalizedDateTime(text);\n+      },\n+    },\n+    {\n+      align: \"right\",\n+      render(file) {\n+        let actionButtons =\n+          [\n+            <DownloadTableItemButton\n+              key={`download-btn-${file.id}`}\n+              onDownload={() => downloadProjectReferenceFile(file.id)}\n+              onDownloadSuccess={() => {\n+                notification.success({message: i18n(\"ReferenceFile.downloadingFileSuccess\", file.label, projectName)});\n+              }}\n+              tooltipText={i18n(\"ReferenceFile.downloadTooltip\")}\n+            />,\n+            // Only display remove button for reference files if user can manage project\n+            canManage ?\n+              <RemoveTableItemButton\n+                key={`remove-btn-${file.id}`}\n+                onRemove={() => removeProjectReferenceFile(projectId, file.id) }\n+                onRemoveSuccess={() => {\n+                  updateReferenceFileTable();\n+                }}\n+                tooltipText={i18n(\"ReferenceFile.removeTooltip\")}\n+                confirmText={i18n(\"ReferenceFile.confirmText\", file.label, projectName)}\n+              />\n+              :\n+              null\n+          ]\n+        // Return download and remove buttons spaced\n+        return (<Space size=\"small\">{actionButtons}</Space>);\n+      },\n+    },\n+  ];\n+\n+  // On first load of page call method to get the reference files for the project\n+  React.useEffect(() => {\n+    updateReferenceFileTable();\n+  }, []);\n+\n+  // Get the reference files for the project\n+  function updateReferenceFileTable(){\n+    getProjectReferenceFiles(projectId).then(({files}) => {\n+      setProjectReferenceFiles(files);\n+      setLoading(false);\n+    }).catch()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzkyNA==", "bodyText": "Missed putting in the error handler. Added in 785d350", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522353924", "createdAt": "2020-11-12T19:15:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;\n+\n+  // Object to hold alert messages for if a user can manage the project or not\n+  const alertMessage = {\n+    true: i18n(\"ReferenceFile.ownerUploadFileAlert\"),\n+    false:i18n(\"ReferenceFile.userUploadFileAlert\")\n+  }\n+\n+  // Columns for the reference file table\n+  const referenceFileTableColumns = [\n+    {\n+      title: i18n(\"ReferenceFile.name\"),\n+      dataIndex: \"label\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.size\"),\n+      dataIndex: \"size\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.added\"),\n+      dataIndex: \"createdDate\",\n+      render(text) {\n+        return formatInternationalizedDateTime(text);\n+      },\n+    },\n+    {\n+      align: \"right\",\n+      render(file) {\n+        let actionButtons =\n+          [\n+            <DownloadTableItemButton\n+              key={`download-btn-${file.id}`}\n+              onDownload={() => downloadProjectReferenceFile(file.id)}\n+              onDownloadSuccess={() => {\n+                notification.success({message: i18n(\"ReferenceFile.downloadingFileSuccess\", file.label, projectName)});\n+              }}\n+              tooltipText={i18n(\"ReferenceFile.downloadTooltip\")}\n+            />,\n+            // Only display remove button for reference files if user can manage project\n+            canManage ?\n+              <RemoveTableItemButton\n+                key={`remove-btn-${file.id}`}\n+                onRemove={() => removeProjectReferenceFile(projectId, file.id) }\n+                onRemoveSuccess={() => {\n+                  updateReferenceFileTable();\n+                }}\n+                tooltipText={i18n(\"ReferenceFile.removeTooltip\")}\n+                confirmText={i18n(\"ReferenceFile.confirmText\", file.label, projectName)}\n+              />\n+              :\n+              null\n+          ]\n+        // Return download and remove buttons spaced\n+        return (<Space size=\"small\">{actionButtons}</Space>);\n+      },\n+    },\n+  ];\n+\n+  // On first load of page call method to get the reference files for the project\n+  React.useEffect(() => {\n+    updateReferenceFileTable();\n+  }, []);\n+\n+  // Get the reference files for the project\n+  function updateReferenceFileTable(){\n+    getProjectReferenceFiles(projectId).then(({files}) => {\n+      setProjectReferenceFiles(files);\n+      setLoading(false);\n+    }).catch()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODc0NA=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjk5ODI0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjoyMjo0MFrOHx4Ybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNjowOVrOHyJ93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2NjAzMQ==", "bodyText": "Can you make our own component out of this?  I am surprised the ant design does not seem to have one since is has the classes set up for it.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522066031", "createdAt": "2020-11-12T12:22:40Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;\n+\n+  // Object to hold alert messages for if a user can manage the project or not\n+  const alertMessage = {\n+    true: i18n(\"ReferenceFile.ownerUploadFileAlert\"),\n+    false:i18n(\"ReferenceFile.userUploadFileAlert\")\n+  }\n+\n+  // Columns for the reference file table\n+  const referenceFileTableColumns = [\n+    {\n+      title: i18n(\"ReferenceFile.name\"),\n+      dataIndex: \"label\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.size\"),\n+      dataIndex: \"size\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.added\"),\n+      dataIndex: \"createdDate\",\n+      render(text) {\n+        return formatInternationalizedDateTime(text);\n+      },\n+    },\n+    {\n+      align: \"right\",\n+      render(file) {\n+        let actionButtons =\n+          [\n+            <DownloadTableItemButton\n+              key={`download-btn-${file.id}`}\n+              onDownload={() => downloadProjectReferenceFile(file.id)}\n+              onDownloadSuccess={() => {\n+                notification.success({message: i18n(\"ReferenceFile.downloadingFileSuccess\", file.label, projectName)});\n+              }}\n+              tooltipText={i18n(\"ReferenceFile.downloadTooltip\")}\n+            />,\n+            // Only display remove button for reference files if user can manage project\n+            canManage ?\n+              <RemoveTableItemButton\n+                key={`remove-btn-${file.id}`}\n+                onRemove={() => removeProjectReferenceFile(projectId, file.id) }\n+                onRemoveSuccess={() => {\n+                  updateReferenceFileTable();\n+                }}\n+                tooltipText={i18n(\"ReferenceFile.removeTooltip\")}\n+                confirmText={i18n(\"ReferenceFile.confirmText\", file.label, projectName)}\n+              />\n+              :\n+              null\n+          ]\n+        // Return download and remove buttons spaced\n+        return (<Space size=\"small\">{actionButtons}</Space>);\n+      },\n+    },\n+  ];\n+\n+  // On first load of page call method to get the reference files for the project\n+  React.useEffect(() => {\n+    updateReferenceFileTable();\n+  }, []);\n+\n+  // Get the reference files for the project\n+  function updateReferenceFileTable(){\n+    getProjectReferenceFiles(projectId).then(({files}) => {\n+      setProjectReferenceFiles(files);\n+      setLoading(false);\n+    }).catch()\n+  }\n+\n+  // Options for the Ant Design upload component\n+  const referenceFileUploadOptions = {\n+    multiple: true,\n+    showUploadList: false,\n+    action: setBaseUrl(`ajax/referenceFiles/project/${projectId}/new`),\n+    onChange(info) {\n+      const { status } = info.file;\n+      if (status === \"done\") {\n+        notification.success({message: `${i18n(\"ReferenceFile.uploadFileSuccess\", info.file.name, projectName)}`});\n+        updateReferenceFileTable();\n+      } else if (status === \"error\") {\n+        notification.error({message: info.file.response.error});\n+      }\n+    },\n+  };\n+\n+  /*\n+   * Returns the upload section if a user is allowed to manage the project.\n+   * Supports drag and drop as well as click to upload\n+   */\n+  function displayUploadButton() {\n+     if (canManage)\n+      return (\n+        <Dragger {...referenceFileUploadOptions} style={{marginBottom: SPACE_XS}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NDE0Mg==", "bodyText": "Yup created in 4e0f1cd", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522354142", "createdAt": "2020-11-12T19:16:09Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/reference-files/ReferenceFiles.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+import React from \"react\";\n+import { Button, notification, Space, Table, Typography, Upload } from \"antd\";\n+import { InfoAlert } from \"../../../components/alerts\";\n+import {\n+  IconFileUpload\n+} from \"../../../components/icons/Icons\";\n+import { setBaseUrl } from \"../../../utilities/url-utilities\";\n+import { SPACE_XS } from \"../../../styles/spacing\";\n+import {\n+  downloadProjectReferenceFile,\n+  getProjectReferenceFiles,\n+  removeProjectReferenceFile\n+} from \"../../../apis/projects/reference-files\";\n+import { formatInternationalizedDateTime } from \"../../../utilities/date-utilities\";\n+import { ContentLoading } from \"../../../components/loader\";\n+import { DownloadTableItemButton, RemoveTableItemButton } from \"../../../components/Buttons\";\n+\n+const { Dragger } = Upload;\n+const { Title } = Typography;\n+\n+/**\n+ * React component for render the reference files page for the project.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ReferenceFiles() {\n+  const [projectReferenceFiles, setProjectReferenceFiles] = React.useState(0);\n+  const [loading, setLoading] = React.useState(true);\n+  // Destructure and rename id and label to projectId and projectName for clarity\n+  const { id: projectId, label: projectName, canManage } = window.project;\n+\n+  // Object to hold alert messages for if a user can manage the project or not\n+  const alertMessage = {\n+    true: i18n(\"ReferenceFile.ownerUploadFileAlert\"),\n+    false:i18n(\"ReferenceFile.userUploadFileAlert\")\n+  }\n+\n+  // Columns for the reference file table\n+  const referenceFileTableColumns = [\n+    {\n+      title: i18n(\"ReferenceFile.name\"),\n+      dataIndex: \"label\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.size\"),\n+      dataIndex: \"size\",\n+    },\n+    {\n+      title: i18n(\"ReferenceFile.added\"),\n+      dataIndex: \"createdDate\",\n+      render(text) {\n+        return formatInternationalizedDateTime(text);\n+      },\n+    },\n+    {\n+      align: \"right\",\n+      render(file) {\n+        let actionButtons =\n+          [\n+            <DownloadTableItemButton\n+              key={`download-btn-${file.id}`}\n+              onDownload={() => downloadProjectReferenceFile(file.id)}\n+              onDownloadSuccess={() => {\n+                notification.success({message: i18n(\"ReferenceFile.downloadingFileSuccess\", file.label, projectName)});\n+              }}\n+              tooltipText={i18n(\"ReferenceFile.downloadTooltip\")}\n+            />,\n+            // Only display remove button for reference files if user can manage project\n+            canManage ?\n+              <RemoveTableItemButton\n+                key={`remove-btn-${file.id}`}\n+                onRemove={() => removeProjectReferenceFile(projectId, file.id) }\n+                onRemoveSuccess={() => {\n+                  updateReferenceFileTable();\n+                }}\n+                tooltipText={i18n(\"ReferenceFile.removeTooltip\")}\n+                confirmText={i18n(\"ReferenceFile.confirmText\", file.label, projectName)}\n+              />\n+              :\n+              null\n+          ]\n+        // Return download and remove buttons spaced\n+        return (<Space size=\"small\">{actionButtons}</Space>);\n+      },\n+    },\n+  ];\n+\n+  // On first load of page call method to get the reference files for the project\n+  React.useEffect(() => {\n+    updateReferenceFileTable();\n+  }, []);\n+\n+  // Get the reference files for the project\n+  function updateReferenceFileTable(){\n+    getProjectReferenceFiles(projectId).then(({files}) => {\n+      setProjectReferenceFiles(files);\n+      setLoading(false);\n+    }).catch()\n+  }\n+\n+  // Options for the Ant Design upload component\n+  const referenceFileUploadOptions = {\n+    multiple: true,\n+    showUploadList: false,\n+    action: setBaseUrl(`ajax/referenceFiles/project/${projectId}/new`),\n+    onChange(info) {\n+      const { status } = info.file;\n+      if (status === \"done\") {\n+        notification.success({message: `${i18n(\"ReferenceFile.uploadFileSuccess\", info.file.name, projectName)}`});\n+        updateReferenceFileTable();\n+      } else if (status === \"error\") {\n+        notification.error({message: info.file.response.error});\n+      }\n+    },\n+  };\n+\n+  /*\n+   * Returns the upload section if a user is allowed to manage the project.\n+   * Supports drag and drop as well as click to upload\n+   */\n+  function displayUploadButton() {\n+     if (canManage)\n+      return (\n+        <Dragger {...referenceFileUploadOptions} style={{marginBottom: SPACE_XS}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2NjAzMQ=="}, "originalCommit": {"oid": "a0be93d886619460cd23b01ef845f08f831064c7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzcxMjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToxMDowOVrOHx_RtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNzowOVrOHyKAAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODk5Nw==", "bodyText": "This file should be in the ajax package right?", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522178997", "createdAt": "2020-11-12T15:10:09Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0f1cd19cfb95ba3af35a86f7e3a2271d907412"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NDY4OQ==", "bodyText": "Moved in 219a5fb", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522354689", "createdAt": "2020-11-12T19:17:09Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/files/ReferenceFileAjaxController.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.files;\n+\n+import java.io.IOException;\n+import java.util.List;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3ODk5Nw=="}, "originalCommit": {"oid": "4e0f1cd19cfb95ba3af35a86f7e3a2271d907412"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDI1OTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectReferenceFileService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzowMjoyOVrOHyEkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxNjo0M1rOHyJ_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2NTcwMg==", "bodyText": "Your controllers should return the ajax response not your services.", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522265702", "createdAt": "2020-11-12T17:02:29Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectReferenceFileService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.ReferenceFileService;\n+\n+/**\n+ * A utility class for formatting responses for the project reference files page UI.\n+ */\n+\n+@Component\n+public class UIProjectReferenceFileService {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(UIProjectReferenceFileService.class);\n+\n+\tprivate final ProjectService projectService;\n+\tprivate final ReferenceFileService referenceFileService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIProjectReferenceFileService(ProjectService projectService, ReferenceFileService referenceFileService, MessageSource messageSource) {\n+\t\tthis.projectService = projectService;\n+\t\tthis.referenceFileService = referenceFileService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Return success or error message if file was successfully uploaded or not\n+\t * @throws UnsupportedReferenceFileContentError if content is invalid\n+\t * @throws IOException if there is an I/O error\n+\t */\n+\tpublic AjaxResponse addReferenceFileToProject(Long projectId, List<MultipartFile> files, final Locale locale) throws UnsupportedReferenceFileContentError, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "785d3502ec369bf251a95de39b1c8cb166e6327d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NDQ2Nw==", "bodyText": "Updated in 219a5fb", "url": "https://github.com/phac-nml/irida/pull/855#discussion_r522354467", "createdAt": "2020-11-12T19:16:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectReferenceFileService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityNotFoundException;\n+import ca.corefacility.bioinformatics.irida.exceptions.UnsupportedReferenceFileContentError;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.ReferenceFileService;\n+\n+/**\n+ * A utility class for formatting responses for the project reference files page UI.\n+ */\n+\n+@Component\n+public class UIProjectReferenceFileService {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(UIProjectReferenceFileService.class);\n+\n+\tprivate final ProjectService projectService;\n+\tprivate final ReferenceFileService referenceFileService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIProjectReferenceFileService(ProjectService projectService, ReferenceFileService referenceFileService, MessageSource messageSource) {\n+\t\tthis.projectService = projectService;\n+\t\tthis.referenceFileService = referenceFileService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Add a new reference file to a project.\n+\t *\n+\t * @param projectId The id of the project to add the file to.\n+\t * @param files     {@link List} of {@link MultipartFile} file being uploaded.\n+\t * @param locale    locale of the logged in user\n+\t * @return Return success or error message if file was successfully uploaded or not\n+\t * @throws UnsupportedReferenceFileContentError if content is invalid\n+\t * @throws IOException if there is an I/O error\n+\t */\n+\tpublic AjaxResponse addReferenceFileToProject(Long projectId, List<MultipartFile> files, final Locale locale) throws UnsupportedReferenceFileContentError, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2NTcwMg=="}, "originalCommit": {"oid": "785d3502ec369bf251a95de39b1c8cb166e6327d"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 560, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}