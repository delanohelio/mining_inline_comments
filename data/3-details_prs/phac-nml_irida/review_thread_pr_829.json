{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDE3MzE0", "number": 829, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozNzo1OFrOEupNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyOTo1NFrOEvePAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ1MTI3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/pipeline/Pipeline.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozNzo1OFrOHjL5gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToxNzo0M1rOHkeDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NzE1NA==", "bodyText": "This is only temporary so I can compare between the two", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r506657154", "createdAt": "2020-10-16T18:37:58Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/pipeline/Pipeline.jsx", "diffHunk": "@@ -88,7 +88,10 @@ export default class Pipeline extends React.Component {\n                   href={pipelineUrl}\n                 >\n                   {i18n(\"pipelines.cart.select\")}\n-                </Button>\n+                </Button>,\n+              <Button type=\"link\" href={setBaseUrl(`launch?id=${this.props.id}`)}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7685925ea66dc59a90bef51bb1baf1b347b09be5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwMzE0MA==", "bodyText": "Sounds good", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508003140", "createdAt": "2020-10-19T19:17:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/pipeline/Pipeline.jsx", "diffHunk": "@@ -88,7 +88,10 @@ export default class Pipeline extends React.Component {\n                   href={pipelineUrl}\n                 >\n                   {i18n(\"pipelines.cart.select\")}\n-                </Button>\n+                </Button>,\n+              <Button type=\"link\" href={setBaseUrl(`launch?id=${this.props.id}`)}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1NzE1NA=="}, "originalCommit": {"oid": "7685925ea66dc59a90bef51bb1baf1b347b09be5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjExODI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNDowNFrOHkeRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNjozNlrOHkgCkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNjY4NA==", "bodyText": "Ceate a dto which has a project and list of samples rather than returning a map", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508006684", "createdAt": "2020-10-19T19:24:04Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java", "diffHunk": "@@ -110,7 +110,7 @@ public int removeProject(Long id) {\n \t/**\n \t * Get the entire cart flushed out into {@link Project}s with their {@link Sample}s\n \t *\n-\t * @return All proejcts and samples in the part\n+\t * @return All projects and samples in the part\n \t */\n \tpublic Map<Project, List<Sample>> getFullCart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTk1MA==", "bodyText": "This is used for legacy code and not to return to the UI.", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508021950", "createdAt": "2020-10-19T19:51:28Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java", "diffHunk": "@@ -110,7 +110,7 @@ public int removeProject(Long id) {\n \t/**\n \t * Get the entire cart flushed out into {@link Project}s with their {@link Sample}s\n \t *\n-\t * @return All proejcts and samples in the part\n+\t * @return All projects and samples in the part\n \t */\n \tpublic Map<Project, List<Sample>> getFullCart() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNjY4NA=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNTcyOA==", "bodyText": "Oh ok. Disregard then", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508035728", "createdAt": "2020-10-19T20:16:36Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UICartService.java", "diffHunk": "@@ -110,7 +110,7 @@ public int removeProject(Long id) {\n \t/**\n \t * Get the entire cart flushed out into {@link Project}s with their {@link Sample}s\n \t *\n-\t * @return All proejcts and samples in the part\n+\t * @return All projects and samples in the part\n \t */\n \tpublic Map<Project, List<Sample>> getFullCart() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNjY4NA=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjEyMzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNToyMVrOHkeT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoyOToxNFrOHk1kTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNzQwMw==", "bodyText": "Change launch to launched", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508007403", "createdAt": "2020-10-19T19:25:21Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.Locale;\n+import java.util.UUID;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaWorkflowNotFoundException;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.description.IridaWorkflowDescription;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.launch.UIPipelineDetailsResponse;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+\n+/**\n+ * UI Service for all things related to workflow pipelines.\n+ */\n+@Component\n+public class UIPipelineService {\n+    private final IridaWorkflowsService workflowsService;\n+    private final MessageSource messageSource;\n+\n+    @Autowired\n+    public UIPipelineService(IridaWorkflowsService workflowsService, MessageSource messageSource) {\n+        this.workflowsService = workflowsService;\n+        this.messageSource = messageSource;\n+    }\n+\n+    /**\n+     * Get the information about a specific workflow pipeline\n+     *\n+     * @param id     for a {@link IridaWorkflow}\n+     * @param locale current users {@link Locale}\n+     * @return Details contained within a {@link UIPipelineDetailsResponse}\n+     * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n+     */\n+    public UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n+        IridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n+        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n+        UIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n+\n+        /*\n+        Prefix for getting messages from IRIDA message properties file\n+         */\n+        String prefix = \"workflow.\" + description.getAnalysisType().getType() + \".\";\n+\n+        /*\n+        Set up basic information for the pipeline being launch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4ODQzMQ==", "bodyText": "Fixed in e8fd739", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508388431", "createdAt": "2020-10-20T10:29:14Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.Locale;\n+import java.util.UUID;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaWorkflowNotFoundException;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.description.IridaWorkflowDescription;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.launch.UIPipelineDetailsResponse;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+\n+/**\n+ * UI Service for all things related to workflow pipelines.\n+ */\n+@Component\n+public class UIPipelineService {\n+    private final IridaWorkflowsService workflowsService;\n+    private final MessageSource messageSource;\n+\n+    @Autowired\n+    public UIPipelineService(IridaWorkflowsService workflowsService, MessageSource messageSource) {\n+        this.workflowsService = workflowsService;\n+        this.messageSource = messageSource;\n+    }\n+\n+    /**\n+     * Get the information about a specific workflow pipeline\n+     *\n+     * @param id     for a {@link IridaWorkflow}\n+     * @param locale current users {@link Locale}\n+     * @return Details contained within a {@link UIPipelineDetailsResponse}\n+     * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n+     */\n+    public UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n+        IridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n+        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n+        UIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n+\n+        /*\n+        Prefix for getting messages from IRIDA message properties file\n+         */\n+        String prefix = \"workflow.\" + description.getAnalysisType().getType() + \".\";\n+\n+        /*\n+        Set up basic information for the pipeline being launch.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwNzQwMw=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjEzMTc1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/apis/pipelines/pipelines.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyNzo1MlrOHkeZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNjoyMVrOHkgCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwODc3OA==", "bodyText": "Shouldn't we rethrow this error and catch it in the UI rather than logging it?", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508008778", "createdAt": "2020-10-19T19:27:52Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/apis/pipelines/pipelines.js", "diffHunk": "@@ -27,10 +28,21 @@ export async function getIridaWorkflowDescription(workflowUUID) {\n  * Get a listing of all Pipelines in IRIDA.\n  * @returns {Promise<AxiosResponse<any> | never>}\n  */\n-export const fetchIridaAnalysisWorkflows = async function() {\n+export const fetchIridaAnalysisWorkflows = async function () {\n   var ajaxUrl = URL;\n   if (window.PAGE.automatedProject !== null) {\n     ajaxUrl = `${ajaxUrl}?automatedProject=${window.PAGE.automatedProject}`;\n   }\n-  return axios.get(ajaxUrl).then(response => response.data);\n+  return axios.get(ajaxUrl).then((response) => response.data);\n };\n+\n+/**\n+ * Get details about a specific pipeline to be able to launch.\n+ * @param id - UUID identifier for the pipeline\n+ * @returns {*}\n+ */\n+export const getPipelineDetails = ({ id }) =>\n+  axios\n+    .get(`${AJAX_URL}/${id}`)\n+    .then(({ data }) => data)\n+    .catch((error) => console.log(error.response.data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMjMyMg==", "bodyText": "Kind of a place holder right now until I decide how to handle it, but yes.", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508022322", "createdAt": "2020-10-19T19:52:10Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/pipelines/pipelines.js", "diffHunk": "@@ -27,10 +28,21 @@ export async function getIridaWorkflowDescription(workflowUUID) {\n  * Get a listing of all Pipelines in IRIDA.\n  * @returns {Promise<AxiosResponse<any> | never>}\n  */\n-export const fetchIridaAnalysisWorkflows = async function() {\n+export const fetchIridaAnalysisWorkflows = async function () {\n   var ajaxUrl = URL;\n   if (window.PAGE.automatedProject !== null) {\n     ajaxUrl = `${ajaxUrl}?automatedProject=${window.PAGE.automatedProject}`;\n   }\n-  return axios.get(ajaxUrl).then(response => response.data);\n+  return axios.get(ajaxUrl).then((response) => response.data);\n };\n+\n+/**\n+ * Get details about a specific pipeline to be able to launch.\n+ * @param id - UUID identifier for the pipeline\n+ * @returns {*}\n+ */\n+export const getPipelineDetails = ({ id }) =>\n+  axios\n+    .get(`${AJAX_URL}/${id}`)\n+    .then(({ data }) => data)\n+    .catch((error) => console.log(error.response.data));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwODc3OA=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNTU5Mw==", "bodyText": "Sounds good", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508035593", "createdAt": "2020-10-19T20:16:21Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/apis/pipelines/pipelines.js", "diffHunk": "@@ -27,10 +28,21 @@ export async function getIridaWorkflowDescription(workflowUUID) {\n  * Get a listing of all Pipelines in IRIDA.\n  * @returns {Promise<AxiosResponse<any> | never>}\n  */\n-export const fetchIridaAnalysisWorkflows = async function() {\n+export const fetchIridaAnalysisWorkflows = async function () {\n   var ajaxUrl = URL;\n   if (window.PAGE.automatedProject !== null) {\n     ajaxUrl = `${ajaxUrl}?automatedProject=${window.PAGE.automatedProject}`;\n   }\n-  return axios.get(ajaxUrl).then(response => response.data);\n+  return axios.get(ajaxUrl).then((response) => response.data);\n };\n+\n+/**\n+ * Get details about a specific pipeline to be able to launch.\n+ * @param id - UUID identifier for the pipeline\n+ * @returns {*}\n+ */\n+export const getPipelineDetails = ({ id }) =>\n+  axios\n+    .get(`${AJAX_URL}/${id}`)\n+    .then(({ data }) => data)\n+    .catch((error) => console.log(error.response.data));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwODc3OA=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjEzNTgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyOTowMlrOHkebxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo0MzowN1rOHk2FLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTQxMw==", "bodyText": "File comments", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508009413", "createdAt": "2020-10-19T19:29:02Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import React from \"react\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5Njg0NA==", "bodyText": "Updated in 4f1bf2d", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508396844", "createdAt": "2020-10-20T10:43:07Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import React from \"react\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTQxMw=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjEzODkxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOToyOTo1NFrOHkedqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNjoxNFrOHkgBzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTg5OQ==", "bodyText": "Can you add a comment to this function and the one below explaining when they are to be used", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508009899", "createdAt": "2020-10-19T19:29:54Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import React from \"react\";\n+import { getPipelineDetails } from \"../../apis/pipelines/pipelines\";\n+\n+const LaunchStateContext = React.createContext();\n+const LaunchDispatchContext = React.createContext();\n+\n+const TYPES = {\n+  LOADED: \"launch:loaded\",\n+};\n+\n+const reducer = (state, action) => {\n+  switch (action.type) {\n+    case TYPES.LOADED:\n+      return { ...state, loading: false, ...action.details };\n+  }\n+};\n+\n+function LaunchProvider({ children }) {\n+  const [id] = React.useState(() => {\n+    const params = new URLSearchParams(window.location.search);\n+    return params.get(\"id\");\n+  });\n+\n+  const [state, dispatch] = React.useReducer(reducer, { loading: true });\n+\n+  React.useEffect(() => {\n+    getPipelineDetails({ id }).then((data) => {\n+      const { name, description, ...details } = data;\n+      details.pipeline = { name, description };\n+      dispatch({ type: TYPES.LOADED, details });\n+    });\n+  }, [id]);\n+\n+  return (\n+    <LaunchStateContext.Provider value={state}>\n+      <LaunchDispatchContext.Provider value={dispatch}>\n+        {children}\n+      </LaunchDispatchContext.Provider>\n+    </LaunchStateContext.Provider>\n+  );\n+}\n+\n+function useLaunchState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMjY4MA==", "bodyText": "LOL, sure.  But if you read the article I sent you you would know :)", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508022680", "createdAt": "2020-10-19T19:52:51Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import React from \"react\";\n+import { getPipelineDetails } from \"../../apis/pipelines/pipelines\";\n+\n+const LaunchStateContext = React.createContext();\n+const LaunchDispatchContext = React.createContext();\n+\n+const TYPES = {\n+  LOADED: \"launch:loaded\",\n+};\n+\n+const reducer = (state, action) => {\n+  switch (action.type) {\n+    case TYPES.LOADED:\n+      return { ...state, loading: false, ...action.details };\n+  }\n+};\n+\n+function LaunchProvider({ children }) {\n+  const [id] = React.useState(() => {\n+    const params = new URLSearchParams(window.location.search);\n+    return params.get(\"id\");\n+  });\n+\n+  const [state, dispatch] = React.useReducer(reducer, { loading: true });\n+\n+  React.useEffect(() => {\n+    getPipelineDetails({ id }).then((data) => {\n+      const { name, description, ...details } = data;\n+      details.pipeline = { name, description };\n+      dispatch({ type: TYPES.LOADED, details });\n+    });\n+  }, [id]);\n+\n+  return (\n+    <LaunchStateContext.Provider value={state}>\n+      <LaunchDispatchContext.Provider value={dispatch}>\n+        {children}\n+      </LaunchDispatchContext.Provider>\n+    </LaunchStateContext.Provider>\n+  );\n+}\n+\n+function useLaunchState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTg5OQ=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNTUzNQ==", "bodyText": "LOL still need to read it :)", "url": "https://github.com/phac-nml/irida/pull/829#discussion_r508035535", "createdAt": "2020-10-19T20:16:14Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/launch/launch-context.js", "diffHunk": "@@ -0,0 +1,59 @@\n+import React from \"react\";\n+import { getPipelineDetails } from \"../../apis/pipelines/pipelines\";\n+\n+const LaunchStateContext = React.createContext();\n+const LaunchDispatchContext = React.createContext();\n+\n+const TYPES = {\n+  LOADED: \"launch:loaded\",\n+};\n+\n+const reducer = (state, action) => {\n+  switch (action.type) {\n+    case TYPES.LOADED:\n+      return { ...state, loading: false, ...action.details };\n+  }\n+};\n+\n+function LaunchProvider({ children }) {\n+  const [id] = React.useState(() => {\n+    const params = new URLSearchParams(window.location.search);\n+    return params.get(\"id\");\n+  });\n+\n+  const [state, dispatch] = React.useReducer(reducer, { loading: true });\n+\n+  React.useEffect(() => {\n+    getPipelineDetails({ id }).then((data) => {\n+      const { name, description, ...details } = data;\n+      details.pipeline = { name, description };\n+      dispatch({ type: TYPES.LOADED, details });\n+    });\n+  }, [id]);\n+\n+  return (\n+    <LaunchStateContext.Provider value={state}>\n+      <LaunchDispatchContext.Provider value={dispatch}>\n+        {children}\n+      </LaunchDispatchContext.Provider>\n+    </LaunchStateContext.Provider>\n+  );\n+}\n+\n+function useLaunchState() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAwOTg5OQ=="}, "originalCommit": {"oid": "9f0bbb5cfe5d731ef0e43f52ed00f38948317545"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 763, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}