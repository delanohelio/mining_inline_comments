{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzY5Mzky", "number": 643, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1NTowNlrODwKY6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTozOVrODyPDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI4NDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1NTowNlrOGDAnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo1Mzo0NFrOGFyWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTA1OQ==", "bodyText": "Looks like these final variables were added by the editor", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r405809059", "createdAt": "2020-04-08T20:55:06Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsAjaxController.java", "diffHunk": "@@ -32,9 +34,9 @@\n @Controller\n @RequestMapping(\"/ajax/projects/{projectId}/settings\")\n public class ProjectSettingsAjaxController {\n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate ProjectOwnerPermission projectOwnerPermission;\n+\tprivate final ProjectService projectService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f5bccba78719ff9843a7bcfa2b53678bd8b132"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMDk3NA==", "bodyText": "I added those. Services are ok to be final since they are autowired by Spring and will not change during the life cycle.", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r408720974", "createdAt": "2020-04-15T09:53:44Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsAjaxController.java", "diffHunk": "@@ -32,9 +34,9 @@\n @Controller\n @RequestMapping(\"/ajax/projects/{projectId}/settings\")\n public class ProjectSettingsAjaxController {\n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate ProjectOwnerPermission projectOwnerPermission;\n+\tprivate final ProjectService projectService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTA1OQ=="}, "originalCommit": {"oid": "81f5bccba78719ff9843a7bcfa2b53678bd8b132"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI4NjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/dto/NewProjectMemberRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1NTozOFrOGDAopw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo1Mzo1MVrOGFyWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTMxOQ==", "bodyText": "Add a comment to indicate what this is used for", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r405809319", "createdAt": "2020-04-08T20:55:38Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/dto/NewProjectMemberRequest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings.dto;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f5bccba78719ff9843a7bcfa2b53678bd8b132"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMTA2Mw==", "bodyText": "Done", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r408721063", "createdAt": "2020-04-15T09:53:51Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/dto/NewProjectMemberRequest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings.dto;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwOTMxOQ=="}, "originalCommit": {"oid": "81f5bccba78719ff9843a7bcfa2b53678bd8b132"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAwMzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectMembersService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozNDoyMlrOGGKhrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozMzoyOFrOGGrK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNzEwMA==", "bodyText": "Change manage to manager", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409117100", "createdAt": "2020-04-15T20:34:22Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectMembersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.data.domain.Page;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.model.enums.ProjectRole;\n+import ca.corefacility.bioinformatics.irida.model.joins.Join;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectUserJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.exceptions.UIProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.dto.ProjectMemberTableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.settings.dto.NewProjectMemberRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * Service class for the UI for handling project members actions.\n+ */\n+@Component\n+public class UIProjectMembersService {\n+\tprivate final ProjectService projectService;\n+\tprivate final UserService userService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIProjectMembersService(ProjectService projectService, UserService userService, MessageSource messageSource) {\n+\t\tthis.projectService = projectService;\n+\t\tthis.userService = userService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Get a paged listing of project members passed on parameters set in the table request.\n+\t *\n+\t * @param projectId    - identifier for the current project\n+\t * @param tableRequest - details about the current page of the table\n+\t * @return sorted and filtered list of project members\n+\t */\n+\tpublic TableResponse<ProjectMemberTableModel> getProjectMembers(Long projectId, TableRequest tableRequest) {\n+\t\tProject project = projectService.read(projectId);\n+\t\tPage<Join<Project, User>> usersForProject = userService.searchUsersForProject(project, tableRequest.getSearch(),\n+\t\t\t\ttableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort());\n+\t\tList<ProjectMemberTableModel> members = usersForProject.get()\n+\t\t\t\t.map(join -> {\n+\t\t\t\t\tProjectUserJoin projectUserJoin = (ProjectUserJoin) join;\n+\t\t\t\t\treturn new ProjectMemberTableModel(join.getObject(), projectUserJoin.getProjectRole()\n+\t\t\t\t\t\t\t.toString(), projectUserJoin.getCreatedDate());\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn new TableResponse<>(members, usersForProject.getTotalElements());\n+\t}\n+\n+\t/**\n+\t * Remove a user from the project\n+\t *\n+\t * @param projectId - identifier for the current project\n+\t * @param userId    - identifier for the user to remove from the project\n+\t * @param locale    - of the currently logged in user\n+\t * @return Message to display to the user about the outcome of removing a user from the project.\n+\t * @throws UIProjectWithoutOwnerException if removing the user will leave the project without a manage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyMzMzNQ==", "bodyText": "Fixed in 5b4a37e", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409423335", "createdAt": "2020-04-16T09:43:07Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectMembersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.data.domain.Page;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.model.enums.ProjectRole;\n+import ca.corefacility.bioinformatics.irida.model.joins.Join;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectUserJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.exceptions.UIProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.dto.ProjectMemberTableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.settings.dto.NewProjectMemberRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * Service class for the UI for handling project members actions.\n+ */\n+@Component\n+public class UIProjectMembersService {\n+\tprivate final ProjectService projectService;\n+\tprivate final UserService userService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIProjectMembersService(ProjectService projectService, UserService userService, MessageSource messageSource) {\n+\t\tthis.projectService = projectService;\n+\t\tthis.userService = userService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Get a paged listing of project members passed on parameters set in the table request.\n+\t *\n+\t * @param projectId    - identifier for the current project\n+\t * @param tableRequest - details about the current page of the table\n+\t * @return sorted and filtered list of project members\n+\t */\n+\tpublic TableResponse<ProjectMemberTableModel> getProjectMembers(Long projectId, TableRequest tableRequest) {\n+\t\tProject project = projectService.read(projectId);\n+\t\tPage<Join<Project, User>> usersForProject = userService.searchUsersForProject(project, tableRequest.getSearch(),\n+\t\t\t\ttableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort());\n+\t\tList<ProjectMemberTableModel> members = usersForProject.get()\n+\t\t\t\t.map(join -> {\n+\t\t\t\t\tProjectUserJoin projectUserJoin = (ProjectUserJoin) join;\n+\t\t\t\t\treturn new ProjectMemberTableModel(join.getObject(), projectUserJoin.getProjectRole()\n+\t\t\t\t\t\t\t.toString(), projectUserJoin.getCreatedDate());\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn new TableResponse<>(members, usersForProject.getTotalElements());\n+\t}\n+\n+\t/**\n+\t * Remove a user from the project\n+\t *\n+\t * @param projectId - identifier for the current project\n+\t * @param userId    - identifier for the user to remove from the project\n+\t * @param locale    - of the currently logged in user\n+\t * @return Message to display to the user about the outcome of removing a user from the project.\n+\t * @throws UIProjectWithoutOwnerException if removing the user will leave the project without a manage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNzEwMA=="}, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1MTk1NA==", "bodyText": "Thanks", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409651954", "createdAt": "2020-04-16T15:33:28Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIProjectMembersService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.data.domain.Page;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.model.enums.ProjectRole;\n+import ca.corefacility.bioinformatics.irida.model.joins.Join;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectUserJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.exceptions.UIProjectWithoutOwnerException;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.dto.ProjectMemberTableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.projects.settings.dto.NewProjectMemberRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * Service class for the UI for handling project members actions.\n+ */\n+@Component\n+public class UIProjectMembersService {\n+\tprivate final ProjectService projectService;\n+\tprivate final UserService userService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIProjectMembersService(ProjectService projectService, UserService userService, MessageSource messageSource) {\n+\t\tthis.projectService = projectService;\n+\t\tthis.userService = userService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Get a paged listing of project members passed on parameters set in the table request.\n+\t *\n+\t * @param projectId    - identifier for the current project\n+\t * @param tableRequest - details about the current page of the table\n+\t * @return sorted and filtered list of project members\n+\t */\n+\tpublic TableResponse<ProjectMemberTableModel> getProjectMembers(Long projectId, TableRequest tableRequest) {\n+\t\tProject project = projectService.read(projectId);\n+\t\tPage<Join<Project, User>> usersForProject = userService.searchUsersForProject(project, tableRequest.getSearch(),\n+\t\t\t\ttableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort());\n+\t\tList<ProjectMemberTableModel> members = usersForProject.get()\n+\t\t\t\t.map(join -> {\n+\t\t\t\t\tProjectUserJoin projectUserJoin = (ProjectUserJoin) join;\n+\t\t\t\t\treturn new ProjectMemberTableModel(join.getObject(), projectUserJoin.getProjectRole()\n+\t\t\t\t\t\t\t.toString(), projectUserJoin.getCreatedDate());\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn new TableResponse<>(members, usersForProject.getTotalElements());\n+\t}\n+\n+\t/**\n+\t * Remove a user from the project\n+\t *\n+\t * @param projectId - identifier for the current project\n+\t * @param userId    - identifier for the user to remove from the project\n+\t * @param locale    - of the currently logged in user\n+\t * @return Message to display to the user about the outcome of removing a user from the project.\n+\t * @throws UIProjectWithoutOwnerException if removing the user will leave the project without a manage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNzEwMA=="}, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAxOTk5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/project-members/AddMemberButton.jsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTozOVrOGGKr-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTozMzozN1rOGGrLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTczOQ==", "bodyText": "Change but to by", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409119739", "createdAt": "2020-04-15T20:39:39Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/project-members/AddMemberButton.jsx", "diffHunk": "@@ -0,0 +1,176 @@\n+import React, { useContext, useEffect, useRef, useState } from \"react\";\n+import {\n+  Button,\n+  Form,\n+  Modal,\n+  notification,\n+  Radio,\n+  Select,\n+  Typography,\n+} from \"antd\";\n+import {\n+  addMemberToProject,\n+  getAvailableUsersForProject,\n+} from \"../../apis/projects/members\";\n+import { useDebounce, useResetFormOnCloseModal } from \"../../hooks\";\n+import { SPACE_XS } from \"../../styles/spacing\";\n+import { PagedTableContext } from \"../ant.design/PagedTable\";\n+import { ProjectRolesContext } from \"../../contexts/ProjectRolesContext\";\n+\n+const { Option } = Select;\n+const { Text } = Typography;\n+\n+/**\n+ * React component that adds a button to open a modal to add a new member\n+ * to a project.  User can search for a user but first name, last name or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyMzMxMw==", "bodyText": "Fixed in 5b4a37e", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409423313", "createdAt": "2020-04-16T09:43:05Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/project-members/AddMemberButton.jsx", "diffHunk": "@@ -0,0 +1,176 @@\n+import React, { useContext, useEffect, useRef, useState } from \"react\";\n+import {\n+  Button,\n+  Form,\n+  Modal,\n+  notification,\n+  Radio,\n+  Select,\n+  Typography,\n+} from \"antd\";\n+import {\n+  addMemberToProject,\n+  getAvailableUsersForProject,\n+} from \"../../apis/projects/members\";\n+import { useDebounce, useResetFormOnCloseModal } from \"../../hooks\";\n+import { SPACE_XS } from \"../../styles/spacing\";\n+import { PagedTableContext } from \"../ant.design/PagedTable\";\n+import { ProjectRolesContext } from \"../../contexts/ProjectRolesContext\";\n+\n+const { Option } = Select;\n+const { Text } = Typography;\n+\n+/**\n+ * React component that adds a button to open a modal to add a new member\n+ * to a project.  User can search for a user but first name, last name or", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTczOQ=="}, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1MjEwMg==", "bodyText": "Thanks", "url": "https://github.com/phac-nml/irida/pull/643#discussion_r409652102", "createdAt": "2020-04-16T15:33:37Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/project-members/AddMemberButton.jsx", "diffHunk": "@@ -0,0 +1,176 @@\n+import React, { useContext, useEffect, useRef, useState } from \"react\";\n+import {\n+  Button,\n+  Form,\n+  Modal,\n+  notification,\n+  Radio,\n+  Select,\n+  Typography,\n+} from \"antd\";\n+import {\n+  addMemberToProject,\n+  getAvailableUsersForProject,\n+} from \"../../apis/projects/members\";\n+import { useDebounce, useResetFormOnCloseModal } from \"../../hooks\";\n+import { SPACE_XS } from \"../../styles/spacing\";\n+import { PagedTableContext } from \"../ant.design/PagedTable\";\n+import { ProjectRolesContext } from \"../../contexts/ProjectRolesContext\";\n+\n+const { Option } = Select;\n+const { Text } = Typography;\n+\n+/**\n+ * React component that adds a button to open a modal to add a new member\n+ * to a project.  User can search for a user but first name, last name or", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTczOQ=="}, "originalCommit": {"oid": "ed06546807f58652b6cb9a2923abf363a14f9f5e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 843, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}