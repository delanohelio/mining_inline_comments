{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MzI0MDUw", "number": 801, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxODo1NlrOEjq3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo0NjowNVrOEjrgJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODM3ODcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/ProjectsController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxODo1NlrOHSJuRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyMzo0MVrOHSMNGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NTcxOQ==", "bodyText": "I don't think we need these final variables", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488795719", "createdAt": "2020-09-15T16:18:56Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/ProjectsController.java", "diffHunk": "@@ -654,8 +569,8 @@ private DTProject createDataTablesProject(Project project) {\n \t * Response class for a {@link Project} and its {@link RemoteStatus}\n \t */\n \tpublic class ProjectByApiResponse {\n-\t\tprivate RemoteStatus remoteStatus;\n-\t\tprivate Project project;\n+\t\tprivate final RemoteStatus remoteStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNjM3OA==", "bodyText": "That internal class is not used. Removed in cf21801", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488836378", "createdAt": "2020-09-15T17:23:41Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/ProjectsController.java", "diffHunk": "@@ -654,8 +569,8 @@ private DTProject createDataTablesProject(Project project) {\n \t * Response class for a {@link Project} and its {@link RemoteStatus}\n \t */\n \tpublic class ProjectByApiResponse {\n-\t\tprivate RemoteStatus remoteStatus;\n-\t\tprivate Project project;\n+\t\tprivate final RemoteStatus remoteStatus;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NTcxOQ=="}, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODQ1MTgzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/apis/remote-api/remote-api.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjozNzo0M1rOHSKcYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyNToyMFrOHSMTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwNzUyMQ==", "bodyText": "Function comments", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488807521", "createdAt": "2020-09-15T16:37:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/apis/remote-api/remote-api.js", "diffHunk": "@@ -1,13 +1,48 @@\n import axios from \"axios\";\n import { setBaseUrl } from \"../../utilities/url-utilities\";\n \n+const BASE_URL = setBaseUrl(`ajax/remote_api`);\n+\n /**\n  * Check the status of a specific Remote API.\n  * @param {number} id - identifier for the API.\n  * @returns {Promise<boolean>}\n  */\n export function checkConnectionStatus({ id }) {\n   return axios\n-    .get(setBaseUrl(`ajax/remote_api/status/${id}`))\n-    .then(({ data }) => data === \"valid_token\");\n+    .get(`${BASE_URL}/status/${id}`)\n+    .then(({ data }) => data)\n+    .catch(() => false);\n+}\n+\n+/**\n+ * Get the specific details about a remote api connection\n+ * @param id - identifier for a remote api\n+ * @returns {Promise<*>}\n+ */\n+export function getConnectionDetails({ id }) {\n+  return axios.get(`${BASE_URL}/${id}`).then(({ data }) => data);\n+}\n+\n+/**\n+ * Delete a specific remote api\n+ * @param id - identifier for a remote api\n+ * @returns {Promise<AxiosResponse<any>>}\n+ */\n+export function deleteRemoteApi({ id }) {\n+  return axios.delete(`${BASE_URL}/${id}/delete`);\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzODA1MQ==", "bodyText": "Updated in 76197dc", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488838051", "createdAt": "2020-09-15T17:25:20Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/remote-api/remote-api.js", "diffHunk": "@@ -1,13 +1,48 @@\n import axios from \"axios\";\n import { setBaseUrl } from \"../../utilities/url-utilities\";\n \n+const BASE_URL = setBaseUrl(`ajax/remote_api`);\n+\n /**\n  * Check the status of a specific Remote API.\n  * @param {number} id - identifier for the API.\n  * @returns {Promise<boolean>}\n  */\n export function checkConnectionStatus({ id }) {\n   return axios\n-    .get(setBaseUrl(`ajax/remote_api/status/${id}`))\n-    .then(({ data }) => data === \"valid_token\");\n+    .get(`${BASE_URL}/status/${id}`)\n+    .then(({ data }) => data)\n+    .catch(() => false);\n+}\n+\n+/**\n+ * Get the specific details about a remote api connection\n+ * @param id - identifier for a remote api\n+ * @returns {Promise<*>}\n+ */\n+export function getConnectionDetails({ id }) {\n+  return axios.get(`${BASE_URL}/${id}`).then(({ data }) => data);\n+}\n+\n+/**\n+ * Delete a specific remote api\n+ * @param id - identifier for a remote api\n+ * @returns {Promise<AxiosResponse<any>>}\n+ */\n+export function deleteRemoteApi({ id }) {\n+  return axios.delete(`${BASE_URL}/${id}/delete`);\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgwNzUyMQ=="}, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODQ2ODM2OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo0MjowOVrOHSKmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzozMjoxOFrOHSMm1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMDE5MQ==", "bodyText": "Internationalize", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488810191", "createdAt": "2020-09-15T16:42:09Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { Button, Checkbox, Form, Input, Select } from \"antd\";\n+import {\n+  createSynchronizedProject,\n+  getListOfRemoteApis,\n+  getProjectsForAPI,\n+} from \"../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { RemoteApiStatus } from \"../../pages/admin/components/remote-connections/RemoteApiStatus\";\n+import { HelpPopover } from \"../popovers\";\n+\n+/**\n+ * React form for creating a Synchronized Remote Project\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function CreateRemoteProjectSyncForm() {\n+  const [apis, setApis] = useState([]);\n+  const [selectedApi, setSelectedApi] = useState();\n+  const [projects, setProjects] = useState([]);\n+  const [connected, setConnected] = useState();\n+  const [manual, setManual] = useState(false);\n+  const [form] = Form.useForm();\n+  const apiRef = useRef();\n+\n+  useEffect(() => {\n+    // Load all remote api's at mount time\n+    getListOfRemoteApis().then((list) => {\n+      setApis(list);\n+      if (list.length === 1) {\n+        form.setFieldsValue({ api: 0 });\n+        setSelectedApi(list[0]);\n+      }\n+      // Set user focus on the api select after at mount time\n+      apiRef.current.focus();\n+    });\n+  }, [form]);\n+\n+  /**\n+   * Update the status of a specific api.\n+   * @param {number} value - index of the api in the apis list.\n+   */\n+  const updateApiStatus = (value) => setSelectedApi(apis[value]);\n+\n+  const getApiProjects = () => {\n+    if (selectedApi.id) {\n+      getProjectsForAPI({ id: selectedApi.id })\n+        .then(setProjects)\n+        .then(() => setConnected(true));\n+    }\n+  };\n+\n+  const createRemote = () => {\n+    const url = form.getFieldValue(\"project\");\n+    const frequency = form.getFieldValue(\"frequency\");\n+    createSynchronizedProject({\n+      url,\n+      frequency,\n+    }).then(({ id }) => (window.location.href = setBaseUrl(`/projects/${id}`)));\n+  };\n+\n+  return (\n+    <Form\n+      form={form}\n+      layout=\"vertical\"\n+      initialValues={{\n+        frequency: 2,\n+      }}\n+    >\n+      <Form.Item\n+        name=\"api\"\n+        label={i18n(\"NewProjectSync.api\")}\n+        help={i18n(\"NewProjectSync.api.help\")}\n+      >\n+        <Select\n+          ref={apiRef}\n+          showSearch\n+          onChange={updateApiStatus}\n+          placeholder={i18n(\"NewProjectSync.api.placeholder\")}\n+        >\n+          {apis.map((api, index) => (\n+            <Select.Option key={`api-${api.id}`} value={index}>\n+              {api.name}\n+            </Select.Option>\n+          ))}\n+        </Select>\n+      </Form.Item>\n+      {selectedApi ? (\n+        <>\n+          <Form.Item label={i18n(\"NewProjectSync.api-status\")}>\n+            <RemoteApiStatus api={selectedApi} onConnect={getApiProjects} />\n+          </Form.Item>\n+          {connected ? (\n+            <>\n+              <Form.Item label={i18n(\"NewProjectSync.project\")} name=\"project\">\n+                <Select\n+                  onChange={(value) =>\n+                    form.setFieldsValue({ projectUrl: value })\n+                  }\n+                  showSearch\n+                  options={projects}\n+                  placeholder={i18n(\"NewProjectSync.project.placeholder\")}\n+                />\n+              </Form.Item>\n+              <Form.Item\n+                required\n+                label={\n+                  <span>\n+                    REMOTE PROJECT URL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0Mjk2NQ==", "bodyText": "Updated in 822fbe4", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488842965", "createdAt": "2020-09-15T17:32:18Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { Button, Checkbox, Form, Input, Select } from \"antd\";\n+import {\n+  createSynchronizedProject,\n+  getListOfRemoteApis,\n+  getProjectsForAPI,\n+} from \"../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { RemoteApiStatus } from \"../../pages/admin/components/remote-connections/RemoteApiStatus\";\n+import { HelpPopover } from \"../popovers\";\n+\n+/**\n+ * React form for creating a Synchronized Remote Project\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function CreateRemoteProjectSyncForm() {\n+  const [apis, setApis] = useState([]);\n+  const [selectedApi, setSelectedApi] = useState();\n+  const [projects, setProjects] = useState([]);\n+  const [connected, setConnected] = useState();\n+  const [manual, setManual] = useState(false);\n+  const [form] = Form.useForm();\n+  const apiRef = useRef();\n+\n+  useEffect(() => {\n+    // Load all remote api's at mount time\n+    getListOfRemoteApis().then((list) => {\n+      setApis(list);\n+      if (list.length === 1) {\n+        form.setFieldsValue({ api: 0 });\n+        setSelectedApi(list[0]);\n+      }\n+      // Set user focus on the api select after at mount time\n+      apiRef.current.focus();\n+    });\n+  }, [form]);\n+\n+  /**\n+   * Update the status of a specific api.\n+   * @param {number} value - index of the api in the apis list.\n+   */\n+  const updateApiStatus = (value) => setSelectedApi(apis[value]);\n+\n+  const getApiProjects = () => {\n+    if (selectedApi.id) {\n+      getProjectsForAPI({ id: selectedApi.id })\n+        .then(setProjects)\n+        .then(() => setConnected(true));\n+    }\n+  };\n+\n+  const createRemote = () => {\n+    const url = form.getFieldValue(\"project\");\n+    const frequency = form.getFieldValue(\"frequency\");\n+    createSynchronizedProject({\n+      url,\n+      frequency,\n+    }).then(({ id }) => (window.location.href = setBaseUrl(`/projects/${id}`)));\n+  };\n+\n+  return (\n+    <Form\n+      form={form}\n+      layout=\"vertical\"\n+      initialValues={{\n+        frequency: 2,\n+      }}\n+    >\n+      <Form.Item\n+        name=\"api\"\n+        label={i18n(\"NewProjectSync.api\")}\n+        help={i18n(\"NewProjectSync.api.help\")}\n+      >\n+        <Select\n+          ref={apiRef}\n+          showSearch\n+          onChange={updateApiStatus}\n+          placeholder={i18n(\"NewProjectSync.api.placeholder\")}\n+        >\n+          {apis.map((api, index) => (\n+            <Select.Option key={`api-${api.id}`} value={index}>\n+              {api.name}\n+            </Select.Option>\n+          ))}\n+        </Select>\n+      </Form.Item>\n+      {selectedApi ? (\n+        <>\n+          <Form.Item label={i18n(\"NewProjectSync.api-status\")}>\n+            <RemoteApiStatus api={selectedApi} onConnect={getApiProjects} />\n+          </Form.Item>\n+          {connected ? (\n+            <>\n+              <Form.Item label={i18n(\"NewProjectSync.project\")} name=\"project\">\n+                <Select\n+                  onChange={(value) =>\n+                    form.setFieldsValue({ projectUrl: value })\n+                  }\n+                  showSearch\n+                  options={projects}\n+                  placeholder={i18n(\"NewProjectSync.project.placeholder\")}\n+                />\n+              </Form.Item>\n+              <Form.Item\n+                required\n+                label={\n+                  <span>\n+                    REMOTE PROJECT URL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMDE5MQ=="}, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODQ2OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo0MjoxOVrOHSKnOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzozMjoyNVrOHSMnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMDI5OA==", "bodyText": "Internationalize", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488810298", "createdAt": "2020-09-15T16:42:19Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { Button, Checkbox, Form, Input, Select } from \"antd\";\n+import {\n+  createSynchronizedProject,\n+  getListOfRemoteApis,\n+  getProjectsForAPI,\n+} from \"../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { RemoteApiStatus } from \"../../pages/admin/components/remote-connections/RemoteApiStatus\";\n+import { HelpPopover } from \"../popovers\";\n+\n+/**\n+ * React form for creating a Synchronized Remote Project\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function CreateRemoteProjectSyncForm() {\n+  const [apis, setApis] = useState([]);\n+  const [selectedApi, setSelectedApi] = useState();\n+  const [projects, setProjects] = useState([]);\n+  const [connected, setConnected] = useState();\n+  const [manual, setManual] = useState(false);\n+  const [form] = Form.useForm();\n+  const apiRef = useRef();\n+\n+  useEffect(() => {\n+    // Load all remote api's at mount time\n+    getListOfRemoteApis().then((list) => {\n+      setApis(list);\n+      if (list.length === 1) {\n+        form.setFieldsValue({ api: 0 });\n+        setSelectedApi(list[0]);\n+      }\n+      // Set user focus on the api select after at mount time\n+      apiRef.current.focus();\n+    });\n+  }, [form]);\n+\n+  /**\n+   * Update the status of a specific api.\n+   * @param {number} value - index of the api in the apis list.\n+   */\n+  const updateApiStatus = (value) => setSelectedApi(apis[value]);\n+\n+  const getApiProjects = () => {\n+    if (selectedApi.id) {\n+      getProjectsForAPI({ id: selectedApi.id })\n+        .then(setProjects)\n+        .then(() => setConnected(true));\n+    }\n+  };\n+\n+  const createRemote = () => {\n+    const url = form.getFieldValue(\"project\");\n+    const frequency = form.getFieldValue(\"frequency\");\n+    createSynchronizedProject({\n+      url,\n+      frequency,\n+    }).then(({ id }) => (window.location.href = setBaseUrl(`/projects/${id}`)));\n+  };\n+\n+  return (\n+    <Form\n+      form={form}\n+      layout=\"vertical\"\n+      initialValues={{\n+        frequency: 2,\n+      }}\n+    >\n+      <Form.Item\n+        name=\"api\"\n+        label={i18n(\"NewProjectSync.api\")}\n+        help={i18n(\"NewProjectSync.api.help\")}\n+      >\n+        <Select\n+          ref={apiRef}\n+          showSearch\n+          onChange={updateApiStatus}\n+          placeholder={i18n(\"NewProjectSync.api.placeholder\")}\n+        >\n+          {apis.map((api, index) => (\n+            <Select.Option key={`api-${api.id}`} value={index}>\n+              {api.name}\n+            </Select.Option>\n+          ))}\n+        </Select>\n+      </Form.Item>\n+      {selectedApi ? (\n+        <>\n+          <Form.Item label={i18n(\"NewProjectSync.api-status\")}>\n+            <RemoteApiStatus api={selectedApi} onConnect={getApiProjects} />\n+          </Form.Item>\n+          {connected ? (\n+            <>\n+              <Form.Item label={i18n(\"NewProjectSync.project\")} name=\"project\">\n+                <Select\n+                  onChange={(value) =>\n+                    form.setFieldsValue({ projectUrl: value })\n+                  }\n+                  showSearch\n+                  options={projects}\n+                  placeholder={i18n(\"NewProjectSync.project.placeholder\")}\n+                />\n+              </Form.Item>\n+              <Form.Item\n+                required\n+                label={\n+                  <span>\n+                    REMOTE PROJECT URL\n+                    <Checkbox onChange={(e) => setManual(e.target.checked)}>\n+                      Set url manually", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0MzA5Mw==", "bodyText": "Updated in 822fbe4", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488843093", "createdAt": "2020-09-15T17:32:25Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/remote-api/CreateRemoteProjectSyncForm.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { Button, Checkbox, Form, Input, Select } from \"antd\";\n+import {\n+  createSynchronizedProject,\n+  getListOfRemoteApis,\n+  getProjectsForAPI,\n+} from \"../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { RemoteApiStatus } from \"../../pages/admin/components/remote-connections/RemoteApiStatus\";\n+import { HelpPopover } from \"../popovers\";\n+\n+/**\n+ * React form for creating a Synchronized Remote Project\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function CreateRemoteProjectSyncForm() {\n+  const [apis, setApis] = useState([]);\n+  const [selectedApi, setSelectedApi] = useState();\n+  const [projects, setProjects] = useState([]);\n+  const [connected, setConnected] = useState();\n+  const [manual, setManual] = useState(false);\n+  const [form] = Form.useForm();\n+  const apiRef = useRef();\n+\n+  useEffect(() => {\n+    // Load all remote api's at mount time\n+    getListOfRemoteApis().then((list) => {\n+      setApis(list);\n+      if (list.length === 1) {\n+        form.setFieldsValue({ api: 0 });\n+        setSelectedApi(list[0]);\n+      }\n+      // Set user focus on the api select after at mount time\n+      apiRef.current.focus();\n+    });\n+  }, [form]);\n+\n+  /**\n+   * Update the status of a specific api.\n+   * @param {number} value - index of the api in the apis list.\n+   */\n+  const updateApiStatus = (value) => setSelectedApi(apis[value]);\n+\n+  const getApiProjects = () => {\n+    if (selectedApi.id) {\n+      getProjectsForAPI({ id: selectedApi.id })\n+        .then(setProjects)\n+        .then(() => setConnected(true));\n+    }\n+  };\n+\n+  const createRemote = () => {\n+    const url = form.getFieldValue(\"project\");\n+    const frequency = form.getFieldValue(\"frequency\");\n+    createSynchronizedProject({\n+      url,\n+      frequency,\n+    }).then(({ id }) => (window.location.href = setBaseUrl(`/projects/${id}`)));\n+  };\n+\n+  return (\n+    <Form\n+      form={form}\n+      layout=\"vertical\"\n+      initialValues={{\n+        frequency: 2,\n+      }}\n+    >\n+      <Form.Item\n+        name=\"api\"\n+        label={i18n(\"NewProjectSync.api\")}\n+        help={i18n(\"NewProjectSync.api.help\")}\n+      >\n+        <Select\n+          ref={apiRef}\n+          showSearch\n+          onChange={updateApiStatus}\n+          placeholder={i18n(\"NewProjectSync.api.placeholder\")}\n+        >\n+          {apis.map((api, index) => (\n+            <Select.Option key={`api-${api.id}`} value={index}>\n+              {api.name}\n+            </Select.Option>\n+          ))}\n+        </Select>\n+      </Form.Item>\n+      {selectedApi ? (\n+        <>\n+          <Form.Item label={i18n(\"NewProjectSync.api-status\")}>\n+            <RemoteApiStatus api={selectedApi} onConnect={getApiProjects} />\n+          </Form.Item>\n+          {connected ? (\n+            <>\n+              <Form.Item label={i18n(\"NewProjectSync.project\")} name=\"project\">\n+                <Select\n+                  onChange={(value) =>\n+                    form.setFieldsValue({ projectUrl: value })\n+                  }\n+                  showSearch\n+                  options={projects}\n+                  placeholder={i18n(\"NewProjectSync.project.placeholder\")}\n+                />\n+              </Form.Item>\n+              <Form.Item\n+                required\n+                label={\n+                  <span>\n+                    REMOTE PROJECT URL\n+                    <Checkbox onChange={(e) => setManual(e.target.checked)}>\n+                      Set url manually", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMDI5OA=="}, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODQ4MzU4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/admin/components/remote-connections/RemoteApiStatus.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo0NjowNVrOHSKwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzozNDoyMFrOHSMu_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjU4Nw==", "bodyText": "Add comments to this function", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488812587", "createdAt": "2020-09-15T16:46:05Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/admin/components/remote-connections/RemoteApiStatus.jsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Alert, Button } from \"antd\";\n+import { checkConnectionStatus } from \"../../../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../../../utilities/url-utilities\";\n+import { IconLoading, IconLogin } from \"../../../../components/icons/Icons\";\n+import { SPACE_XS } from \"../../../../styles/spacing\";\n+import { formatInternationalizedDateTime } from \"../../../../utilities/date-utilities\";\n+\n+/**\n+ * React component to render the status of a Remote API.\n+ * If the API is not connected it will present the user a button allowing\n+ * them to connect.\n+ * @param {object} api - details about the remote API\n+ * @param {function} onConnect - what do when the connection is made.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function RemoteApiStatus({ api, onConnect = () => {} }) {\n+  const [loading, setLoading] = useState(true);\n+  const [expiration, setExpiration] = useState(undefined);\n+\n+  useEffect(checkApiStatus, []);\n+\n+  useEffect(() => {\n+    // Listen for a remote api connection\n+    window.addEventListener(\"message\", updateRemoteApi, false);\n+    return () => window.removeEventListener(\"message\", updateRemoteApi);\n+  }, []);\n+\n+  useEffect(() => checkApiStatus(), [api.id]);\n+\n+  function checkApiStatus() {\n+    setLoading(true);\n+    checkConnectionStatus({ id: api.id }).then((data) => {\n+      setLoading(false);\n+      setExpiration(data);\n+      data && onConnect();\n+    });\n+  }\n+\n+  function updateRemoteApi(event) {\n+    if (\n+      event.origin === window.location.origin &&\n+      event.data === \"remote_api_connect\"\n+    ) {\n+      checkApiStatus();\n+    }\n+  }\n+\n+  function updateConnectionStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg0NTA1NA==", "bodyText": "Updated in 611706c", "url": "https://github.com/phac-nml/irida/pull/801#discussion_r488845054", "createdAt": "2020-09-15T17:34:20Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/admin/components/remote-connections/RemoteApiStatus.jsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Alert, Button } from \"antd\";\n+import { checkConnectionStatus } from \"../../../../apis/remote-api/remote-api\";\n+import { setBaseUrl } from \"../../../../utilities/url-utilities\";\n+import { IconLoading, IconLogin } from \"../../../../components/icons/Icons\";\n+import { SPACE_XS } from \"../../../../styles/spacing\";\n+import { formatInternationalizedDateTime } from \"../../../../utilities/date-utilities\";\n+\n+/**\n+ * React component to render the status of a Remote API.\n+ * If the API is not connected it will present the user a button allowing\n+ * them to connect.\n+ * @param {object} api - details about the remote API\n+ * @param {function} onConnect - what do when the connection is made.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function RemoteApiStatus({ api, onConnect = () => {} }) {\n+  const [loading, setLoading] = useState(true);\n+  const [expiration, setExpiration] = useState(undefined);\n+\n+  useEffect(checkApiStatus, []);\n+\n+  useEffect(() => {\n+    // Listen for a remote api connection\n+    window.addEventListener(\"message\", updateRemoteApi, false);\n+    return () => window.removeEventListener(\"message\", updateRemoteApi);\n+  }, []);\n+\n+  useEffect(() => checkApiStatus(), [api.id]);\n+\n+  function checkApiStatus() {\n+    setLoading(true);\n+    checkConnectionStatus({ id: api.id }).then((data) => {\n+      setLoading(false);\n+      setExpiration(data);\n+      data && onConnect();\n+    });\n+  }\n+\n+  function updateRemoteApi(event) {\n+    if (\n+      event.origin === window.location.origin &&\n+      event.data === \"remote_api_connect\"\n+    ) {\n+      checkApiStatus();\n+    }\n+  }\n+\n+  function updateConnectionStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxMjU4Nw=="}, "originalCommit": {"oid": "e6279225572747be61cfd7b03fbda8dfb5e6e536"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 732, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}