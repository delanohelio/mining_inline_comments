{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzExNDMw", "number": 884, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxNjoyN1rOFECChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MzoxM1rOFEDILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzcyMDM2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToxNjoyN1rOID9MoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDowNVrOIFhtSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTI5Nw==", "bodyText": "Update this change", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541019297", "createdAt": "2020-12-11T15:16:27Z", "author": {"login": "deepsidhu85"}, "path": "CHANGELOG.md", "diffHunk": "@@ -26,6 +26,7 @@ Changes\n * [UI]: Added functionality for users to synchronize fast5 data from remote APIs.\n * [UI]: Added usage statistics to admin panel.\n * [UI]: Updated analysis results page to show loading indicator when retrieving output file data.\n+* [UI]: Updated sample details sidebar with sample files and simpler API for use on more pages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2NjA1Nw==", "bodyText": "Updated in f46cfbc", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542666057", "createdAt": "2020-12-14T19:14:05Z", "author": {"login": "joshsadam"}, "path": "CHANGELOG.md", "diffHunk": "@@ -26,6 +26,7 @@ Changes\n * [UI]: Added functionality for users to synchronize fast5 data from remote APIs.\n * [UI]: Added usage statistics to admin panel.\n * [UI]: Updated analysis results page to show loading indicator when retrieving output file data.\n+* [UI]: Updated sample details sidebar with sample files and simpler API for use on more pages.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxOTI5Nw=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc3NjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UISampleService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyODoxNFrOID9t8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTo1NDoyNVrOIFkZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNzgyNA==", "bodyText": "Fast5 data also has qc files associated with it. So I think there should be a section here which sets the enhanceQCEntries for it", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541027824", "createdAt": "2020-12-11T15:28:14Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UISampleService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.assembly.GenomeAssembly;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.SampleGenomeAssemblyJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.sample.QCEntry;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.Fast5Object;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleFiles;\n+import ca.corefacility.bioinformatics.irida.security.permissions.sample.UpdateSamplePermission;\n+import ca.corefacility.bioinformatics.irida.service.GenomeAssemblyService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+\n+/**\n+ * UI Service for samples\n+ */\n+@Component\n+public class UISampleService {\n+\tprivate final SampleService sampleService;\n+\tprivate final ProjectService projectService;\n+\tprivate final UpdateSamplePermission updateSamplePermission;\n+\tprivate final SequencingObjectService sequencingObjectService;\n+\tprivate final GenomeAssemblyService genomeAssemblyService;\n+\tprivate final UICartService cartService;\n+\n+\t@Autowired\n+\tpublic UISampleService(SampleService sampleService, ProjectService projectService, UpdateSamplePermission updateSamplePermission,\n+\t\t\tSequencingObjectService sequencingObjectService, GenomeAssemblyService genomeAssemblyService, UICartService cartService) {\n+\t\tthis.sampleService = sampleService;\n+\t\tthis.projectService = projectService;\n+\t\tthis.updateSamplePermission = updateSamplePermission;\n+\t\tthis.sequencingObjectService = sequencingObjectService;\n+\t\tthis.genomeAssemblyService = genomeAssemblyService;\n+\t\tthis.cartService = cartService;\n+\t}\n+\n+\t/**\n+\t * Get full details, including metadata for a {@link Sample}\n+\t *\n+\t * @param id Identifier for a {@link Sample}\n+\t * @return {@link SampleDetails}\n+\t */\n+\tpublic SampleDetails getSampleDetails(Long id) {\n+\t\tSample sample = sampleService.read(id);\n+\t\tAuthentication authentication = SecurityContextHolder.getContext()\n+\t\t\t\t.getAuthentication();\n+\t\tboolean isModifiable = updateSamplePermission.isAllowed(authentication, sample);\n+\t\treturn new SampleDetails(sample, isModifiable, cartService.isSampleInCart(id));\n+\t}\n+\n+\t/**\n+\t * Get the sequence files associated with a sample\n+\t *\n+\t * @param sampleId  Identifier for a sample\n+\t * @param projectId Identifier for the project the sample belong to\n+\t * @return All the sequencing files associated with the sample\n+\t */\n+\tpublic SampleFiles getSampleFiles(Long sampleId, Long projectId) {\n+\t\tSample sample = sampleService.read(sampleId);\n+\t\t// get the project if available\n+\t\tProject project = null;\n+\t\tif (projectId != null) {\n+\t\t\tproject = projectService.read(projectId);\n+\t\t}\n+\n+\t\tCollection<SampleSequencingObjectJoin> filePairJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SequenceFilePair.class);\n+\t\tCollection<SampleSequencingObjectJoin> singleFileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SingleEndSequenceFile.class);\n+\t\tCollection<SampleSequencingObjectJoin> fast5FileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, Fast5Object.class);\n+\t\tList<SequencingObject> fast5 = fast5FileJoins.stream()\n+\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tCollection<SampleGenomeAssemblyJoin> genomeAssemblyJoins = genomeAssemblyService.getAssembliesForSample(sample);\n+\n+\t\tList<GenomeAssembly> genomeAssemblies = genomeAssemblyJoins.stream()\n+\t\t\t\t.map(SampleGenomeAssemblyJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t// add project to qc entries and filter any unavailable entries\n+\t\tList<SequencingObject> filePairs = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : filePairJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tfilePairs.add(obj);\n+\t\t}\n+\n+\t\tList<SequencingObject> singles = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : singleFileJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tsingles.add(obj);\n+\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2NjY3MA==", "bodyText": "It's not in the current version of the files. \u00a0I can to this in a later branch. Not actually doing anything with the QC data yet.", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542666670", "createdAt": "2020-12-14T19:14:40Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UISampleService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.assembly.GenomeAssembly;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.SampleGenomeAssemblyJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.sample.QCEntry;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.Fast5Object;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleFiles;\n+import ca.corefacility.bioinformatics.irida.security.permissions.sample.UpdateSamplePermission;\n+import ca.corefacility.bioinformatics.irida.service.GenomeAssemblyService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+\n+/**\n+ * UI Service for samples\n+ */\n+@Component\n+public class UISampleService {\n+\tprivate final SampleService sampleService;\n+\tprivate final ProjectService projectService;\n+\tprivate final UpdateSamplePermission updateSamplePermission;\n+\tprivate final SequencingObjectService sequencingObjectService;\n+\tprivate final GenomeAssemblyService genomeAssemblyService;\n+\tprivate final UICartService cartService;\n+\n+\t@Autowired\n+\tpublic UISampleService(SampleService sampleService, ProjectService projectService, UpdateSamplePermission updateSamplePermission,\n+\t\t\tSequencingObjectService sequencingObjectService, GenomeAssemblyService genomeAssemblyService, UICartService cartService) {\n+\t\tthis.sampleService = sampleService;\n+\t\tthis.projectService = projectService;\n+\t\tthis.updateSamplePermission = updateSamplePermission;\n+\t\tthis.sequencingObjectService = sequencingObjectService;\n+\t\tthis.genomeAssemblyService = genomeAssemblyService;\n+\t\tthis.cartService = cartService;\n+\t}\n+\n+\t/**\n+\t * Get full details, including metadata for a {@link Sample}\n+\t *\n+\t * @param id Identifier for a {@link Sample}\n+\t * @return {@link SampleDetails}\n+\t */\n+\tpublic SampleDetails getSampleDetails(Long id) {\n+\t\tSample sample = sampleService.read(id);\n+\t\tAuthentication authentication = SecurityContextHolder.getContext()\n+\t\t\t\t.getAuthentication();\n+\t\tboolean isModifiable = updateSamplePermission.isAllowed(authentication, sample);\n+\t\treturn new SampleDetails(sample, isModifiable, cartService.isSampleInCart(id));\n+\t}\n+\n+\t/**\n+\t * Get the sequence files associated with a sample\n+\t *\n+\t * @param sampleId  Identifier for a sample\n+\t * @param projectId Identifier for the project the sample belong to\n+\t * @return All the sequencing files associated with the sample\n+\t */\n+\tpublic SampleFiles getSampleFiles(Long sampleId, Long projectId) {\n+\t\tSample sample = sampleService.read(sampleId);\n+\t\t// get the project if available\n+\t\tProject project = null;\n+\t\tif (projectId != null) {\n+\t\t\tproject = projectService.read(projectId);\n+\t\t}\n+\n+\t\tCollection<SampleSequencingObjectJoin> filePairJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SequenceFilePair.class);\n+\t\tCollection<SampleSequencingObjectJoin> singleFileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SingleEndSequenceFile.class);\n+\t\tCollection<SampleSequencingObjectJoin> fast5FileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, Fast5Object.class);\n+\t\tList<SequencingObject> fast5 = fast5FileJoins.stream()\n+\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tCollection<SampleGenomeAssemblyJoin> genomeAssemblyJoins = genomeAssemblyService.getAssembliesForSample(sample);\n+\n+\t\tList<GenomeAssembly> genomeAssemblies = genomeAssemblyJoins.stream()\n+\t\t\t\t.map(SampleGenomeAssemblyJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t// add project to qc entries and filter any unavailable entries\n+\t\tList<SequencingObject> filePairs = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : filePairJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tfilePairs.add(obj);\n+\t\t}\n+\n+\t\tList<SequencingObject> singles = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : singleFileJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tsingles.add(obj);\n+\t\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNzgyNA=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxMDE2Mw==", "bodyText": "Sounds good!", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542710163", "createdAt": "2020-12-14T19:54:25Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UISampleService.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.assembly.GenomeAssembly;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.SampleGenomeAssemblyJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.sample.QCEntry;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.Fast5Object;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.samples.dto.SampleFiles;\n+import ca.corefacility.bioinformatics.irida.security.permissions.sample.UpdateSamplePermission;\n+import ca.corefacility.bioinformatics.irida.service.GenomeAssemblyService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+\n+/**\n+ * UI Service for samples\n+ */\n+@Component\n+public class UISampleService {\n+\tprivate final SampleService sampleService;\n+\tprivate final ProjectService projectService;\n+\tprivate final UpdateSamplePermission updateSamplePermission;\n+\tprivate final SequencingObjectService sequencingObjectService;\n+\tprivate final GenomeAssemblyService genomeAssemblyService;\n+\tprivate final UICartService cartService;\n+\n+\t@Autowired\n+\tpublic UISampleService(SampleService sampleService, ProjectService projectService, UpdateSamplePermission updateSamplePermission,\n+\t\t\tSequencingObjectService sequencingObjectService, GenomeAssemblyService genomeAssemblyService, UICartService cartService) {\n+\t\tthis.sampleService = sampleService;\n+\t\tthis.projectService = projectService;\n+\t\tthis.updateSamplePermission = updateSamplePermission;\n+\t\tthis.sequencingObjectService = sequencingObjectService;\n+\t\tthis.genomeAssemblyService = genomeAssemblyService;\n+\t\tthis.cartService = cartService;\n+\t}\n+\n+\t/**\n+\t * Get full details, including metadata for a {@link Sample}\n+\t *\n+\t * @param id Identifier for a {@link Sample}\n+\t * @return {@link SampleDetails}\n+\t */\n+\tpublic SampleDetails getSampleDetails(Long id) {\n+\t\tSample sample = sampleService.read(id);\n+\t\tAuthentication authentication = SecurityContextHolder.getContext()\n+\t\t\t\t.getAuthentication();\n+\t\tboolean isModifiable = updateSamplePermission.isAllowed(authentication, sample);\n+\t\treturn new SampleDetails(sample, isModifiable, cartService.isSampleInCart(id));\n+\t}\n+\n+\t/**\n+\t * Get the sequence files associated with a sample\n+\t *\n+\t * @param sampleId  Identifier for a sample\n+\t * @param projectId Identifier for the project the sample belong to\n+\t * @return All the sequencing files associated with the sample\n+\t */\n+\tpublic SampleFiles getSampleFiles(Long sampleId, Long projectId) {\n+\t\tSample sample = sampleService.read(sampleId);\n+\t\t// get the project if available\n+\t\tProject project = null;\n+\t\tif (projectId != null) {\n+\t\t\tproject = projectService.read(projectId);\n+\t\t}\n+\n+\t\tCollection<SampleSequencingObjectJoin> filePairJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SequenceFilePair.class);\n+\t\tCollection<SampleSequencingObjectJoin> singleFileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, SingleEndSequenceFile.class);\n+\t\tCollection<SampleSequencingObjectJoin> fast5FileJoins = sequencingObjectService.getSequencesForSampleOfType(\n+\t\t\t\tsample, Fast5Object.class);\n+\t\tList<SequencingObject> fast5 = fast5FileJoins.stream()\n+\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tCollection<SampleGenomeAssemblyJoin> genomeAssemblyJoins = genomeAssemblyService.getAssembliesForSample(sample);\n+\n+\t\tList<GenomeAssembly> genomeAssemblies = genomeAssemblyJoins.stream()\n+\t\t\t\t.map(SampleGenomeAssemblyJoin::getObject)\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t// add project to qc entries and filter any unavailable entries\n+\t\tList<SequencingObject> filePairs = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : filePairJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tfilePairs.add(obj);\n+\t\t}\n+\n+\t\tList<SequencingObject> singles = new ArrayList<>();\n+\t\tfor (SampleSequencingObjectJoin join : singleFileJoins) {\n+\t\t\tSequencingObject obj = join.getObject();\n+\t\t\tenhanceQcEntries(obj, project);\n+\t\t\tsingles.add(obj);\n+\t\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyNzgyNA=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzc4NDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNToyOTo1NlrOID9ypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNTo1NVrOIFh1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTAyOA==", "bodyText": "Extra sample in @param text", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541029028", "createdAt": "2020-12-11T15:29:56Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java", "diffHunk": "@@ -88,4 +88,13 @@ public int removeProject(Long projectId) {\n \t\treturn Sets.newHashSet(this.values());\n \t}\n \n+\t/**\n+\t * Find if a sample is currently in the cart.  If it is get the project that it belongs to.\n+\t *\n+\t * @param sampleId identifier for a sample sample to check the cart for.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2ODE1OA==", "bodyText": "Updated in 25828a1", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542668158", "createdAt": "2020-12-14T19:15:55Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/sessionAttrs/Cart.java", "diffHunk": "@@ -88,4 +88,13 @@ public int removeProject(Long projectId) {\n \t\treturn Sets.newHashSet(this.values());\n \t}\n \n+\t/**\n+\t * Find if a sample is currently in the cart.  If it is get the project that it belongs to.\n+\t *\n+\t * @param sampleId identifier for a sample sample to check the cart for.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyOTAyOA=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzgwMTg4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/apis/samples/samples.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMzozM1rOID98xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNzo1OVrOIFh-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTYyMQ==", "bodyText": "File comments", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541031621", "createdAt": "2020-12-11T15:33:33Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/apis/samples/samples.js", "diffHunk": "@@ -1,7 +1,25 @@\n import axios from \"axios\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3MDQ4NQ==", "bodyText": "Updated in 874db0bac778d4cde15a8cdc94c1af7bed39019c874db0bac778d4cde15a8cdc94c1af7bed39019c", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542670485", "createdAt": "2020-12-14T19:17:59Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/samples/samples.js", "diffHunk": "@@ -1,7 +1,25 @@\n import axios from \"axios\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTYyMQ=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzgxMDcxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/apis/samples/samples.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozNToxNlrOID-Bww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyMDozNFrOIFiJMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjg5OQ==", "bodyText": "Why are we displaying a notification.error here? I think it would be better to be in the UI file where this is called. We should leave this to just make the api call and return the data or error", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541032899", "createdAt": "2020-12-11T15:35:16Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/apis/samples/samples.js", "diffHunk": "@@ -1,7 +1,25 @@\n import axios from \"axios\";\n import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { notification } from \"antd\";\n \n-const URL = setBaseUrl(`samples`);\n+const URL = setBaseUrl(`ajax/samples`);\n \n-export const getSampleDetails = id =>\n-  axios.get(`${URL}?id=${id}`).then(response => response.data);\n+export const fetchSampleDetails = async (id) => {\n+  try {\n+    const { data } = await axios.get(`${URL}/${id}/details`);\n+    return data;\n+  } catch (e) {\n+    return Promise.reject(e.response.data.error);\n+  }\n+};\n+\n+export async function fetchSampleFiles({ sampleId, projectId }) {\n+  try {\n+    const response = await axios(\n+      `${URL}/${sampleId}/files${projectId ? `?projectId=${projectId}` : null}`\n+    );\n+    return response.data;\n+  } catch (e) {\n+    notification.error({ message: e.response.data.message });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3MTAxOQ==", "bodyText": "I have no clue, let me fix that.", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542671019", "createdAt": "2020-12-14T19:18:30Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/samples/samples.js", "diffHunk": "@@ -1,7 +1,25 @@\n import axios from \"axios\";\n import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { notification } from \"antd\";\n \n-const URL = setBaseUrl(`samples`);\n+const URL = setBaseUrl(`ajax/samples`);\n \n-export const getSampleDetails = id =>\n-  axios.get(`${URL}?id=${id}`).then(response => response.data);\n+export const fetchSampleDetails = async (id) => {\n+  try {\n+    const { data } = await axios.get(`${URL}/${id}/details`);\n+    return data;\n+  } catch (e) {\n+    return Promise.reject(e.response.data.error);\n+  }\n+};\n+\n+export async function fetchSampleFiles({ sampleId, projectId }) {\n+  try {\n+    const response = await axios(\n+      `${URL}/${sampleId}/files${projectId ? `?projectId=${projectId}` : null}`\n+    );\n+    return response.data;\n+  } catch (e) {\n+    notification.error({ message: e.response.data.message });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjg5OQ=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3MzIwMw==", "bodyText": "Updated in 94bab47", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542673203", "createdAt": "2020-12-14T19:20:34Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/apis/samples/samples.js", "diffHunk": "@@ -1,7 +1,25 @@\n import axios from \"axios\";\n import { setBaseUrl } from \"../../utilities/url-utilities\";\n+import { notification } from \"antd\";\n \n-const URL = setBaseUrl(`samples`);\n+const URL = setBaseUrl(`ajax/samples`);\n \n-export const getSampleDetails = id =>\n-  axios.get(`${URL}?id=${id}`).then(response => response.data);\n+export const fetchSampleDetails = async (id) => {\n+  try {\n+    const { data } = await axios.get(`${URL}/${id}/details`);\n+    return data;\n+  } catch (e) {\n+    return Promise.reject(e.response.data.error);\n+  }\n+};\n+\n+export async function fetchSampleFiles({ sampleId, projectId }) {\n+  try {\n+    const response = await axios(\n+      `${URL}/${sampleId}/files${projectId ? `?projectId=${projectId}` : null}`\n+    );\n+    return response.data;\n+  } catch (e) {\n+    notification.error({ message: e.response.data.message });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMjg5OQ=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzgyMDYwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/CalendarDate.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozNzowNVrOID-HNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyMjoyNlrOIFiRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNDI5Mw==", "bodyText": "File comments", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541034293", "createdAt": "2020-12-11T15:37:05Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/CalendarDate.jsx", "diffHunk": "@@ -0,0 +1,15 @@\n+import React from \"react\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NTMxNA==", "bodyText": "Added in 238a09c", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542675314", "createdAt": "2020-12-14T19:22:26Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/CalendarDate.jsx", "diffHunk": "@@ -0,0 +1,15 @@\n+import React from \"react\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzNDI5Mw=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzg4OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/components/samples/SampleDetailSidebar.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MTowNFrOID-u0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyNDoxOVrOIFiZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDQzNQ==", "bodyText": "More of just a comment. We should probably create styles for this as we use display: flex and justifyContent: \"space-between\" in multiple other places. Something for us to do in the future", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541044435", "createdAt": "2020-12-11T15:51:04Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/components/samples/SampleDetailSidebar.jsx", "diffHunk": "@@ -0,0 +1,86 @@\n+import React from \"react\";\n+import { Button, Modal, Skeleton, Typography } from \"antd\";\n+import { fetchSampleDetails } from \"../../apis/samples/samples\";\n+import { SampleDetails } from \"./components/SampleDetails\";\n+\n+const { Text } = Typography;\n+\n+/**\n+ * React component to render details (metadata and files) for a sample.\n+ * @param sampleId - identifier for a sample\n+ * @param removeSample - function to remove the sample from the cart.\n+ * @param children\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function SampleDetailSidebar({\n+  sampleId,\n+  removeSample = Function.prototype,\n+  children,\n+}) {\n+  const [loading, setLoading] = React.useState(true);\n+  const [details, setDetails] = React.useState({});\n+  const [visible, setVisible] = React.useState(false);\n+\n+  React.useEffect(() => {\n+    if (visible) {\n+      fetchSampleDetails(sampleId)\n+        .then(setDetails)\n+        .then(() => setLoading(false));\n+    }\n+  }, [visible]);\n+\n+  const removeSampleFromCart = () => {\n+    removeSample({ projectId: details.projectId, sampleId });\n+  };\n+\n+  return (\n+    <>\n+      {React.cloneElement(children, {\n+        onClick: () => setVisible(true),\n+      })}\n+      {visible ? (\n+        <Modal\n+          bodyStyle={{\n+            padding: 0,\n+            maxHeight: window.innerHeight - 400,\n+            overflowY: \"auto\",\n+          }}\n+          title={\n+            loading ? null : (\n+              <div\n+                style={{\n+                  display: \"flex\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NzM5Mg==", "bodyText": "I think I did this...", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542677392", "createdAt": "2020-12-14T19:24:19Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/components/samples/SampleDetailSidebar.jsx", "diffHunk": "@@ -0,0 +1,86 @@\n+import React from \"react\";\n+import { Button, Modal, Skeleton, Typography } from \"antd\";\n+import { fetchSampleDetails } from \"../../apis/samples/samples\";\n+import { SampleDetails } from \"./components/SampleDetails\";\n+\n+const { Text } = Typography;\n+\n+/**\n+ * React component to render details (metadata and files) for a sample.\n+ * @param sampleId - identifier for a sample\n+ * @param removeSample - function to remove the sample from the cart.\n+ * @param children\n+ * @returns {JSX.Element}\n+ * @constructor\n+ */\n+export function SampleDetailSidebar({\n+  sampleId,\n+  removeSample = Function.prototype,\n+  children,\n+}) {\n+  const [loading, setLoading] = React.useState(true);\n+  const [details, setDetails] = React.useState({});\n+  const [visible, setVisible] = React.useState(false);\n+\n+  React.useEffect(() => {\n+    if (visible) {\n+      fetchSampleDetails(sampleId)\n+        .then(setDetails)\n+        .then(() => setLoading(false));\n+    }\n+  }, [visible]);\n+\n+  const removeSampleFromCart = () => {\n+    removeSample({ projectId: details.projectId, sampleId });\n+  };\n+\n+  return (\n+    <>\n+      {React.cloneElement(children, {\n+        onClick: () => setVisible(true),\n+      })}\n+      {visible ? (\n+        <Modal\n+          bodyStyle={{\n+            padding: 0,\n+            maxHeight: window.innerHeight - 400,\n+            overflowY: \"auto\",\n+          }}\n+          title={\n+            loading ? null : (\n+              <div\n+                style={{\n+                  display: \"flex\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NDQzNQ=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzg5ODcxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/cart/components/Cart.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1MzoxM1rOID-0jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToyNDowOFrOIFiY9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NTkwMA==", "bodyText": "What's this empty useeffect for?", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r541045900", "createdAt": "2020-12-11T15:53:13Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/cart/components/Cart.jsx", "diffHunk": "@@ -20,6 +19,8 @@ function CartComponent({ count = 0, loadCart }) {\n     }\n   }, [count]);\n \n+  useEffect(() => {}, []);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NzIzOA==", "bodyText": "Because I am an idiot who is donig too much. \u00a0Removed in 51e9c13", "url": "https://github.com/phac-nml/irida/pull/884#discussion_r542677238", "createdAt": "2020-12-14T19:24:08Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/cart/components/Cart.jsx", "diffHunk": "@@ -20,6 +19,8 @@ function CartComponent({ count = 0, loadCart }) {\n     }\n   }, [count]);\n \n+  useEffect(() => {}, []);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NTkwMA=="}, "originalCommit": {"oid": "972ac84be46b54d0e84705fb5fcaca5a5c629eac"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 601, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}