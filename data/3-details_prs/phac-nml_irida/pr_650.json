{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTczMzMw", "number": 650, "title": "Object store/ base", "bodyText": "Description of changes\nWhat did you change in this pull request?  Provide a description of files changed, user interactions changed, etc.  Include how to test your changes.\n\n File repositories writing to cloud storage\n File processors work with cloud storage\n GUI handling cloud files (sizes, downloads, fastqc images)\n Command line linker working with cloud storage\n Galaxy linker working with cloud storage\n Sync jobs properly pulling and saving files to cloud storage\n REST API representing files stored in cloud storage\n Analysis Submissions sending cloud stored files to Galaxy\n\nRelated issue\nLink to the GitHub issue this pull request addresses using the #issuenum format.  If it completes an issue, use Fixes #issuenum to automatically close the issue.\n#228\nChecklist\nThings for the developer to confirm they've done before the PR should be accepted:\n\n CHANGELOG.md (and UPGRADING.md if necessary) updated with information for new change.\n Tests added (or description of how to test) for any new features.\n User documentation updated for UI or technical changes.", "createdAt": "2020-04-08T17:10:43Z", "url": "https://github.com/phac-nml/irida/pull/650", "merged": true, "mergeCommit": {"oid": "80a8c1d13d613dab3c9a6b62c6424cd8804f1b67"}, "closed": true, "closedAt": "2020-07-16T20:45:00Z", "author": {"login": "deepsidhu85"}, "timelineItems": {"totalCount": 99, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQlBUgAH2gAyNDAwOTczMzMwOjhjMmM2ZmFiMjRlYjA2MzhhMjc3YWQwODhmMGM3Y2UzY2QwNjc0NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1kkWIgH2gAyNDAwOTczMzMwOjljYzhiOGRjMTUyNjM2NjNmZGE1OGU1ZmVlZDlhY2Y4MGNiYzYwMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c2c6fab24eb0638a277ad088f0c7ce3cd067459", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/8c2c6fab24eb0638a277ad088f0c7ce3cd067459", "committedDate": "2020-03-23T21:16:48Z", "message": "Added base object store support (upload file to cloud, get file from cloud, display file size)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff216e9d5718e7b47a510eee24944a337884a410", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/ff216e9d5718e7b47a510eee24944a337884a410", "committedDate": "2020-03-24T19:05:22Z", "message": "Changed to service. Added comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "517ba57e4ee39f3783000716aa4bb5af30e9abbe", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/517ba57e4ee39f3783000716aa4bb5af30e9abbe", "committedDate": "2020-03-26T16:58:54Z", "message": "fixed merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c80a6c5bb054066f6252564ced100da538162c0c", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/c80a6c5bb054066f6252564ced100da538162c0c", "committedDate": "2020-03-28T00:18:10Z", "message": "Created subclasses of sequence file to support local and cloud based storage. Updated creating of sequence files. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b419bc0c339f90efdd11a239c256df21f2aa15", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/28b419bc0c339f90efdd11a239c256df21f2aa15", "committedDate": "2020-03-28T20:24:27Z", "message": "Refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbaa2cf5c39a286ec372b3538bff1d85211c342a", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/fbaa2cf5c39a286ec372b3538bff1d85211c342a", "committedDate": "2020-04-01T03:23:02Z", "message": "Created separate services for azure, aws, and local storage which the bean instantiates depending on storage type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "756694199b672acfee293001730141bb72a34488", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/756694199b672acfee293001730141bb72a34488", "committedDate": "2020-04-01T17:00:38Z", "message": "Updated file processors and tests to use iridafilestorageservice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "081b1d1c39992f54d6d163612d397712a20be83f", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/081b1d1c39992f54d6d163612d397712a20be83f", "committedDate": "2020-04-01T17:40:58Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d567a128c68e9a474e4e6850a6f64aa21b704831", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/d567a128c68e9a474e4e6850a6f64aa21b704831", "committedDate": "2020-04-07T15:28:58Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaa48be3feb1f9c3e0d0cf3348e439e61ba62dcc", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/aaa48be3feb1f9c3e0d0cf3348e439e61ba62dcc", "committedDate": "2020-04-07T17:40:09Z", "message": "Merged dev and fixed merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f7fb763df88f29a4fe6ffcd6e2aa18b28fdd605", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/2f7fb763df88f29a4fe6ffcd6e2aa18b28fdd605", "committedDate": "2020-04-08T17:09:47Z", "message": "Updated tests. Updated logic for sequencefile concatenation to work with the iridafilestoragefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457d4f90bf21d9492941f00c6a6c3d49c8d08aca", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/457d4f90bf21d9492941f00c6a6c3d49c8d08aca", "committedDate": "2020-04-08T18:31:17Z", "message": "Set default value to local for storage type if not set in irida.conf or argument is not found. Removed controller methods which are now in the samplesajaxcontroller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d9c84400b1fe6c66e785ceb7ccdf1ffed3150dc", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/4d9c84400b1fe6c66e785ceb7ccdf1ffed3150dc", "committedDate": "2020-04-08T18:39:47Z", "message": "Moved default setting of irida.storage.type to filesystem.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55650284aa1fd06b1be2707159236feaa0a1eea5", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/55650284aa1fd06b1be2707159236feaa0a1eea5", "committedDate": "2020-04-08T19:03:43Z", "message": "Removed unused imports and added missing javadoc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c712e4f2ee26b51a23afa3617fea986d1791822", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/8c712e4f2ee26b51a23afa3617fea986d1791822", "committedDate": "2020-04-08T19:10:18Z", "message": "Set default values for azure container and connection string if not found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e990a2d6e2d3322ca67dc763c809e0532f83ec", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/e9e990a2d6e2d3322ca67dc763c809e0532f83ec", "committedDate": "2020-04-08T19:39:24Z", "message": "Added missing javadoc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a5f7308fa16c27f4cd9bc0a4ca57099b0e65078", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/3a5f7308fa16c27f4cd9bc0a4ca57099b0e65078", "committedDate": "2020-04-08T20:11:59Z", "message": "Added missing @param and @throws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0dc9cae2051bb71b000f87e60060e6ff5dd0f6", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/3d0dc9cae2051bb71b000f87e60060e6ff5dd0f6", "committedDate": "2020-04-08T20:30:43Z", "message": "Fixed @throws text"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/ba008ae0e244fc7c938a58e9c9988c16e95e1060", "committedDate": "2020-04-08T20:44:56Z", "message": "Removed iridafilestoragefactory from samplescontroller and samplescontrollertest as the code for which it was used has been moved to samplesajaxcontroller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2805d1a0a0daa01fbb96ea533fdf8b88c78f2d5c", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/2805d1a0a0daa01fbb96ea533fdf8b88c78f2d5c", "committedDate": "2020-04-09T15:42:41Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTA1ODA3", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-390905807", "createdAt": "2020-04-09T15:36:17Z", "commit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTozNjoxN1rOGDeM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo0OTowOFrOGDevHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5Mzc1Mw==", "bodyText": "Avoid getSuperClass if you can.  That gets us into dodgy places.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r406293753", "createdAt": "2020-04-09T15:36:17Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/FilesystemSupplementedRepositoryImpl.java", "diffHunk": "@@ -215,9 +220,14 @@ private Type writeFilesToDisk(Path baseDirectory, Type objectToWrite) {\n \n \t\tPredicate<Field> pathFilter = f -> f.getType().equals(Path.class);\n \t\t// now find any members that are of type Path and shuffle them around:\n-\t\tSet<Field> pathFields = Arrays.stream(objectToWrite.getClass().getDeclaredFields()).filter(pathFilter)\n+\t\tSet<Field> pathFields = Arrays.stream(objectToWrite.getClass().getSuperclass().getDeclaredFields()).filter(pathFilter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NDY1MA==", "bodyText": "As much as we can avoid this if the better.  If the repo level can just call the filestorageservice to do its directory creation and such that would be better.  Keep the responsibility of managing files to that level if we can.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r406294650", "createdAt": "2020-04-09T15:37:39Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/FilesystemSupplementedRepositoryImpl.java", "diffHunk": "@@ -238,28 +248,28 @@ private Type writeFilesToDisk(Path baseDirectory, Type objectToWrite) {\n \t\t\t\tPath source = (Path) ReflectionUtils.getField(field, objectToWrite);\n \t\t\t\tPath target = sequenceFileDirWithRevision.resolve(source.getFileName());\n \t\t\t\tlogger.debug(\"Target is [\" + target.toString() + \"]\");\n-\t\t\t\ttry {\n-\t\t\t\t\tif (!Files.exists(sequenceFileDir)) {\n-\t\t\t\t\t\tFiles.createDirectory(sequenceFileDir);\n-\t\t\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDir.toString() + \"]\");\n-\t\t\t\t\t}\n \n-\t\t\t\t\tif (!Files.exists(sequenceFileDirWithRevision)) {\n-\t\t\t\t\t\tFiles.createDirectory(sequenceFileDirWithRevision);\n-\t\t\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDirWithRevision.toString() + \"]\");\n-\t\t\t\t\t}\n+\t\t\t\tif(iridaFileStorageService.storageTypeIsLocal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NTQ4Mg==", "bodyText": "Really like what's happening with this class.  That's exactly what I'd hope to see with the interface and multiple implementations.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r406295482", "createdAt": "2020-04-09T15:38:52Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAzureServiceImpl.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.util.Date;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.azure.storage.blob.BlobClient;\n+import com.azure.storage.blob.BlobContainerClient;\n+import com.azure.storage.blob.BlobServiceClient;\n+import com.azure.storage.blob.BlobServiceClientBuilder;\n+import com.azure.storage.blob.models.BlobStorageException;\n+\n+/**\n+ * Component implementation of file utitlities for azure storage\n+ */\n+@Component\n+public class IridaFileStorageAzureServiceImpl implements IridaFileStorageService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI5NzczNw==", "bodyText": "You can check to see but this might not be necessary if you could do all the stuff from this file in the IridaFileStorageService instead.  You could maybe use that as the factory.  Play with it to see though.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r406297737", "createdAt": "2020-04-09T15:42:06Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/IridaFileStorageFactoryImpl.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package ca.corefacility.bioinformatics.irida.service.impl;\n+\n+import java.nio.file.Path;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.CloudSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.LocalSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageService;\n+\n+/**\n+ * Service implementation for creating SequenceFiles {@link LocalSequenceFile} and {@link CloudSequenceFile}\n+ */\n+@Service\n+public class IridaFileStorageFactoryImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjQ5NA==", "bodyText": "We haven't been using the @DiscriminatorColumn in our other inheritance strategies.  If you just leave it off, it automatically creates a DTYPE column with the class name`.\nI'll leave it to you whether to use the SINGLE_TABLE or JOINED approach.  In general we've preferred the JOINED approach because it means less unnecessary blank columns.  If it's just 1 or 2 empty columns it's not a big deal though.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r406302494", "createdAt": "2020-04-09T15:49:08Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/sequenceFile/SequenceFile.java", "diffHunk": "@@ -56,10 +37,15 @@\n  * particular {@link Sample}.\n  */\n @Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba008ae0e244fc7c938a58e9c9988c16e95e1060"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b976252df1a3db51917b62a2b751464d70f9231", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/4b976252df1a3db51917b62a2b751464d70f9231", "committedDate": "2020-04-09T22:02:14Z", "message": "Merged dev and fixed merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dcfd9491da7f6605d7e5b284573e3a583776de9", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/8dcfd9491da7f6605d7e5b284573e3a583776de9", "committedDate": "2020-04-10T02:59:43Z", "message": "IridaFileStorageService is now wired into the sequencefile entity using @postload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d5d85b90d82ec70a6779780f6b0d0fd138cd82", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/e9d5d85b90d82ec70a6779780f6b0d0fd138cd82", "committedDate": "2020-04-11T21:31:05Z", "message": "Removed discriminator column and discriminator values for sequencefile, localsequencefile, and cloud sequencefile and added a DTYPE to th the sequencefile table. Added iridafilestorageservice entity listener with provides the SequenceFile model with access to the iridiaFileStorageService after it has been loaded. Moved directory creation when using local storage into the iridafilestorage implementation for the local storage. Updated ProjectReferenceFileController to get the size of the reference file from the iridaFileStorageService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8672d656aba541db4571a30762c2c670de2ab59", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/c8672d656aba541db4571a30762c2c670de2ab59", "committedDate": "2020-04-11T22:24:22Z", "message": "Removed iridafilestoragefactory and moved sequencefile creation code into iridafilestorageservice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa814cbe476213a6f6faa61dc43a61b5da9cbcd", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/8fa814cbe476213a6f6faa61dc43a61b5da9cbcd", "committedDate": "2020-04-13T18:58:50Z", "message": "Moved appendToFile and getFileExtension for the sequencefileconcatenator to the implementations for the iridafilestorageservice. Refactored code in azure iridafilestorage service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b5c5b0bae0b5fdf7413803d2c2fc93218c0cba4", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/8b5c5b0bae0b5fdf7413803d2c2fc93218c0cba4", "committedDate": "2020-04-13T21:03:27Z", "message": "Added a listener for GenomeAssembly to give the model access to iridaFileStorageService after loading the model."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3569c6bffc239051ba0b600141464aff94fcdd6e", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/3569c6bffc239051ba0b600141464aff94fcdd6e", "committedDate": "2020-04-13T23:19:28Z", "message": "Changed 'private Path' to 'protected Path' so we don't need to use .getSuperClass in the writeFilesToDisk method. Changed debug statements in iridafilestorage azure service to trace."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781c7b57d31768b153f1b57f8ef7502d6f401f93", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/781c7b57d31768b153f1b57f8ef7502d6f401f93", "committedDate": "2020-04-13T23:22:22Z", "message": "Updated jackson version to 2.10.3 as azure blob requires >= 2.10.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32521d0bb632e916a1edac0434f30e74702dd5bc", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/32521d0bb632e916a1edac0434f30e74702dd5bc", "committedDate": "2020-04-16T15:36:04Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e121004fdeeb6cbb9070faf5f3d454bd1d4495eb", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/e121004fdeeb6cbb9070faf5f3d454bd1d4495eb", "committedDate": "2020-04-20T20:54:05Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96988c29c7620a30dd059156a23aed3c79c213ce", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/96988c29c7620a30dd059156a23aed3c79c213ce", "committedDate": "2020-04-20T21:18:14Z", "message": "Removed aws and azure implementations from the base and will be put into individual implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba77462890a28e8eeb17db2571fd7b8ccdfc8816", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/ba77462890a28e8eeb17db2571fd7b8ccdfc8816", "committedDate": "2020-04-20T21:29:18Z", "message": "Removed aws and azure dependencies from pom as they are in separate branches"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "163cafa7a846102905b39d5bf4f6bcf45af36015", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/163cafa7a846102905b39d5bf4f6bcf45af36015", "committedDate": "2020-04-20T21:36:13Z", "message": "Added newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ebd4a0881382a834b289c009e166d9b4fb4160d", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/4ebd4a0881382a834b289c009e166d9b4fb4160d", "committedDate": "2020-04-20T22:20:29Z", "message": "Reverted tests as they are in another branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776546d8ba439f413b89f2f9b9679a1f2f9859bc", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/776546d8ba439f413b89f2f9b9679a1f2f9859bc", "committedDate": "2020-04-20T22:26:46Z", "message": "Removed newlines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb554ab4139a3c322d7e6c0c362a2276c8958658", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/fb554ab4139a3c322d7e6c0c362a2276c8958658", "committedDate": "2020-04-20T23:29:22Z", "message": "Updated changeset for sequence-file dtype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b13db5862b22ca2e286103b78c67bb7dd76d8f1d", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/b13db5862b22ca2e286103b78c67bb7dd76d8f1d", "committedDate": "2020-04-21T00:47:13Z", "message": "Added default value for DTYPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc8cfb005541a735b06c86670e7ff2d6f6aebac", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/efc8cfb005541a735b06c86670e7ff2d6f6aebac", "committedDate": "2020-04-21T17:36:37Z", "message": "Updated changeset to set a default value for dtype if one isn't provided"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f86e81e46cf9e77434f4acf04a4173e6c11ed28", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/4f86e81e46cf9e77434f4acf04a4173e6c11ed28", "committedDate": "2020-04-22T00:19:59Z", "message": "Removed local and cloud sequence files as we can access the necessary data using the iridafilestorageservice in sequence file using @postload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3307619fcb57db8f0e775614101e9bef09cb76", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/0b3307619fcb57db8f0e775614101e9bef09cb76", "committedDate": "2020-04-22T03:33:16Z", "message": "Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4c1e16b076ff948285138ad56d7435c5953dba", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/4e4c1e16b076ff948285138ad56d7435c5953dba", "committedDate": "2020-04-22T03:34:59Z", "message": "Merge pull request #4 from deepsidhu85/object_store/_remove-sequence-file-extensions\n\nRemoved local and cloud sequence files as we can access the necessary\u2026"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b53cbd4edd8cfda9c4a6ab89dd41893dbee3d5e7", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/b53cbd4edd8cfda9c4a6ab89dd41893dbee3d5e7", "committedDate": "2020-04-22T14:42:27Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac612b8e3c1695f82a346cadae65df756e19c840", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/ac612b8e3c1695f82a346cadae65df756e19c840", "committedDate": "2020-04-22T14:49:52Z", "message": "Reverted changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fd1c40da2e2c12b48c3c5ff80c93c0ad093ba8", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/e9fd1c40da2e2c12b48c3c5ff80c93c0ad093ba8", "committedDate": "2020-04-22T14:53:41Z", "message": "Removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e3137d412125192c62b9090fdd9a1ccb3a483e", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/69e3137d412125192c62b9090fdd9a1ccb3a483e", "committedDate": "2020-04-22T14:57:53Z", "message": "Removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d54618ee31989fe484c4e4d5c9d1b6cc30f5a239", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/d54618ee31989fe484c4e4d5c9d1b6cc30f5a239", "committedDate": "2020-04-22T15:59:45Z", "message": "Mocked iridafilestorageservice instead of autowiring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed5fd3d68ed5cbbe16a18c53300cd501b022c29", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/fed5fd3d68ed5cbbe16a18c53300cd501b022c29", "committedDate": "2020-04-22T16:59:52Z", "message": "Removed mocks for iridafilestoragelocalserviceimpl and instantiated instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61de952cd33ca845f0677268ab66e9cd6c7c8995", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/61de952cd33ca845f0677268ab66e9cd6c7c8995", "committedDate": "2020-04-22T18:49:57Z", "message": "Fixed doc testing (removed imports not needed and added missing comments). Moved sequencefilelistener and genomeassemblylistener to a common file as both were providing access to the iridafilestorageservice in an entity on @postload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7a9e26522c85bd89358029f453440cf4024e94", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/3a7a9e26522c85bd89358029f453440cf4024e94", "committedDate": "2020-04-22T19:37:40Z", "message": "Removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58be9671b4901b359166ebf93dbf5029b25e82f9", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/58be9671b4901b359166ebf93dbf5029b25e82f9", "committedDate": "2020-04-29T15:56:59Z", "message": "Merged object-store and fixed merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521d4adb0b9a47bffc5089506c5123007e2d5684", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/521d4adb0b9a47bffc5089506c5123007e2d5684", "committedDate": "2020-04-30T18:54:39Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47847bb0134a55bc0daa6725dba9c24984990c73", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/47847bb0134a55bc0daa6725dba9c24984990c73", "committedDate": "2020-05-06T13:57:03Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60666f588f3ca80cf05d13a56a58e697f9ae490", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/d60666f588f3ca80cf05d13a56a58e697f9ae490", "committedDate": "2020-05-20T19:40:07Z", "message": "Merge branch 'development' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d43e744795d99792e40f41f7d8c2954a6c5313c", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/1d43e744795d99792e40f41f7d8c2954a6c5313c", "committedDate": "2020-05-22T23:32:55Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa610cb3b388fe5bab99bf2efee7ec38224ca95", "author": {"user": null}, "url": "https://github.com/phac-nml/irida/commit/1fa610cb3b388fe5bab99bf2efee7ec38224ca95", "committedDate": "2020-05-26T19:23:30Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/c572ba62bd15b3b97c6b300722a2efc7affdc6a5", "committedDate": "2020-06-16T20:06:49Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODY2NTI5", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-431866529", "createdAt": "2020-06-16T20:28:39Z", "commit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoyODo0MFrOGkr-Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTowMTowM1rOGktArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMjMzNA==", "bodyText": "Is this here because VersionedFileFields doesn't have the setIridaFileStorageService method?  If so we can avoid the reflection by adding that method to the interface, or creating a different interface that has that method.  It would be much cleaner than having this reflection stuff.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441122334", "createdAt": "2020-06-16T20:28:40Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/entity/listeners/IridaFileStorageListener.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package ca.corefacility.bioinformatics.irida.repositories.entity.listeners;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import javax.persistence.PostLoad;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.support.SpringBeanAutowiringSupport;\n+\n+import ca.corefacility.bioinformatics.irida.model.VersionedFileFields;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageService;\n+\n+/**\n+ * Component implementation to run on an entity after it is has been accessed from the db.\n+ */\n+@Component\n+public class IridaFileStorageListener {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageListener.class);\n+\n+\t@Autowired\n+\tprivate IridaFileStorageService iridaFileStorageService;\n+\n+\t/**\n+\t * After the entity is loaded this method will provide\n+\t * the entity access to the iridaFileStorageService\n+\t *\n+\t * @param fileSystemEntity The entity to provide the iridaFileStorageService to\n+\t */\n+\t@PostLoad\n+\tpublic void afterEntityLoad(final VersionedFileFields<Long> fileSystemEntity) {\n+\t\ttry {\n+\t\t\tSpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);\n+\t\t\t// Use reflection to get the setIridaFileStorageService method, make it accessible, and invoke it\n+\t\t\tMethod iridaFileStorageServiceSetter = fileSystemEntity.getClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMzQ2OA==", "bodyText": "Can we name this something other than a Service?  The way it functions is nice, but the name Service imples it's in the service layer of our tiers.  Since we use it all over the place it feels like it has a dependency cycle.  Even just something like IridaFileStorageUtility.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441123468", "createdAt": "2020-06-16T20:30:47Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Interface describing methods for performing storage actions\n+ */\n+\n+public interface IridaFileStorageService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNDYyNg==", "bodyText": "Will we ever want a getter for this?  I feel like it should just be an internal thing of the class.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441124626", "createdAt": "2020-06-16T20:32:53Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/sequenceFile/SequenceFile.java", "diffHunk": "@@ -307,4 +297,13 @@ public String getUploadSha256() {\n \tpublic void setUploadSha256(String uploadSha256) {\n \t\tthis.uploadSha256 = uploadSha256;\n \t}\n+\n+\tpublic IridaFileStorageService getIridaFileStorageService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNTA1OQ==", "bodyText": "Why the blank methods?  If they're not to be used I think they should be removed from the interface and these implemetations until we need them.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441135059", "createdAt": "2020-06-16T20:52:46Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalServiceImpl.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.exceptions.StorageException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.processing.FileProcessorException;\n+\n+/**\n+ * Component implementation of file utitlities for local storage\n+ */\n+@Component\n+public class IridaFileStorageLocalServiceImpl implements IridaFileStorageService{\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageLocalServiceImpl.class);\n+\n+\t@Autowired\n+\tpublic IridaFileStorageLocalServiceImpl(){\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic File getTemporaryFile(Path file) {\n+\t\tFile fileToProcess = null;\n+\t\tfileToProcess = file.toFile();\n+\t\treturn fileToProcess;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSize(Path file) {\n+\t\tLong fileSize = 0L;\n+\t\ttry {\n+\t\t\tfileSize = Files.size(file);\n+\t\t} catch (NoSuchFileException e) {\n+\t\t\tlogger.error(\"Could not find file \" + file);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Could not calculate file size: \", e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision) {\n+\t\ttry {\n+\t\t\tif (!Files.exists(sequenceFileDir)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDir);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDir.toString() + \"]\");\n+\t\t\t}\n+\n+\t\t\tif (!Files.exists(sequenceFileDirWithRevision)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDirWithRevision);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDirWithRevision.toString() + \"]\");\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to create new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to create new directory.\", e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tFiles.move(source, target);\n+\t\t\tlogger.trace(\"Moved file \" + source + \" to \" + target);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to move file into new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to move file into new directory.\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic void deleteFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNTk1NQ==", "bodyText": "I love how the concern was moved here from the FilesystemSupplementedRepositoryImpl.  I think this was a good way to go with things.  When this all gets done we'll likely need to rename that file to something less \"filesystem\".", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441135955", "createdAt": "2020-06-16T20:54:32Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalServiceImpl.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.exceptions.StorageException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.processing.FileProcessorException;\n+\n+/**\n+ * Component implementation of file utitlities for local storage\n+ */\n+@Component\n+public class IridaFileStorageLocalServiceImpl implements IridaFileStorageService{\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageLocalServiceImpl.class);\n+\n+\t@Autowired\n+\tpublic IridaFileStorageLocalServiceImpl(){\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic File getTemporaryFile(Path file) {\n+\t\tFile fileToProcess = null;\n+\t\tfileToProcess = file.toFile();\n+\t\treturn fileToProcess;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSize(Path file) {\n+\t\tLong fileSize = 0L;\n+\t\ttry {\n+\t\t\tfileSize = Files.size(file);\n+\t\t} catch (NoSuchFileException e) {\n+\t\t\tlogger.error(\"Could not find file \" + file);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Could not calculate file size: \", e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision) {\n+\t\ttry {\n+\t\t\tif (!Files.exists(sequenceFileDir)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzOTM3NA==", "bodyText": "Should we maybe add some of these file methods into the model classes?  That way we don't need to wire the IridaFileStorageService into some places it maybe doesn't belong (like this class).\nSome examples I can see: getFileSize, getFileInputStream, maybe some of the other things that are like \"read\" operations on the file.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441139374", "createdAt": "2020-06-16T21:01:03Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectReferenceFileController.java", "diffHunk": "@@ -93,12 +94,7 @@ public String getProjectReferenceFilesPage(final Model model, final Principal pr\n \t\t\tmap.put(\"label\", file.getLabel());\n \t\t\tmap.put(\"createdDate\", file.getCreatedDate());\n \t\t\tPath path = file.getFile();\n-\t\t\ttry {\n-\t\t\t\tmap.put(\"size\", Files.size(path));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Cannot find the size of file \" + file.getLabel());\n-\t\t\t\tmap.put(\"size\", messageSource.getMessage(\"projects.reference-file.not-found\", new Object[] {}, locale));\n-\t\t\t}\n+\t\t\tmap.put(\"size\", iridaFileStorageService.getFileSize(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c572ba62bd15b3b97c6b300722a2efc7affdc6a5"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/8477bb95ad7d2dd6a2e12591e61c4870bba42f7f", "committedDate": "2020-06-17T17:48:35Z", "message": "Renamed IridaFileStorageService to IridaFileStorageUtility. Moved setIridaFileStorageUtility method into VersionedFields to remove unnecessary reflection. Removed methods not used. Added file methods to sequencefile so we can call them directly rather than autowiring in the iridafilestorageutility into files where it doesn't need to be"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzE3NDYx", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-432717461", "createdAt": "2020-06-17T19:40:18Z", "commit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo0MDoxOVrOGlUrDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo0NTo0NFrOGlU1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4OTE5OA==", "bodyText": "This is likely one that should stay with the iridaFileStorageUtility.  It's not really an action on the SequenceFile, it's a filesystem option.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441789198", "createdAt": "2020-06-17T19:40:19Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/sequenceFile/SequenceFile.java", "diffHunk": "@@ -307,4 +300,25 @@ public String getUploadSha256() {\n \tpublic void setUploadSha256(String uploadSha256) {\n \t\tthis.uploadSha256 = uploadSha256;\n \t}\n+\n+\t@Override\n+\tpublic void setIridaFileStorageUtility(IridaFileStorageUtility iridaFileStorageUtility) {\n+\t\tthis.iridaFileStorageUtility = iridaFileStorageUtility;\n+\t}\n+\n+\tpublic InputStream getFileInputStream() {\n+\t\treturn iridaFileStorageUtility.getFileInputStream(getFile());\n+\t}\n+\n+\tpublic boolean isGzipped() throws Exception {\n+\t\treturn iridaFileStorageUtility.isGzipped(getFile());\n+\t}\n+\n+\tpublic File getTemporaryFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4OTQxNw==", "bodyText": "Is this the right logic here?  Now fileToProcess isn't getting used.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441789417", "createdAt": "2020-06-17T19:40:44Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/FastqcFileProcessor.java", "diffHunk": "@@ -92,7 +97,7 @@ private void processSingleFile(SequenceFile sequenceFile) throws FileProcessorEx\n \t\t\t\t\t\tLocaleContextHolder.getLocale()));\n \t\ttry {\n \t\t\tuk.ac.babraham.FastQC.Sequence.SequenceFile fastQCSequenceFile = SequenceFactory.getSequenceFile(\n-\t\t\t\t\tfileToProcess.toFile());\n+\t\t\t\t\tsequenceFile.getTemporaryFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4OTQ2Mw==", "bodyText": "This isn't being used anymore.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441789463", "createdAt": "2020-06-17T19:40:50Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/FastqcFileProcessor.java", "diffHunk": "@@ -52,6 +54,7 @@\n \tprivate final SequenceFileRepository sequenceFileRepository;\n \tprivate final AnalysisOutputFileRepository outputFileRepository;\n \tprivate final MessageSource messageSource;\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4OTgzNA==", "bodyText": "I like this now.  Less cyclic dependencies.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441789834", "createdAt": "2020-06-17T19:41:30Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/GzipFileProcessor.java", "diffHunk": "@@ -111,10 +110,10 @@ public void processSingleFile(SequenceFile sequenceFile) throws FileProcessorExc\n \n \t\ttry {\n \t\t\tlogger.trace(\"About to try handling a gzip file.\");\n-\t\t\tif (FileUtils.isGzipped(file)) {\n+\t\t\tif (sequenceFile.isGzipped()) {\n \t\t\t\tfile = addExtensionToFilename(file, GZIP_EXTENSION);\n \n-\t\t\t\ttry (GZIPInputStream zippedInputStream = new GZIPInputStream(Files.newInputStream(file))) {\n+\t\t\t\ttry (GZIPInputStream zippedInputStream = new GZIPInputStream(sequenceFile.getFileInputStream())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MDEzMw==", "bodyText": "Is this line necessary?  If so can you add a comment why it's there?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441790133", "createdAt": "2020-06-17T19:42:03Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/entity/listeners/IridaFileStorageListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package ca.corefacility.bioinformatics.irida.repositories.entity.listeners;\n+\n+import javax.persistence.PostLoad;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.support.SpringBeanAutowiringSupport;\n+\n+import ca.corefacility.bioinformatics.irida.model.VersionedFileFields;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageUtility;\n+\n+/**\n+ * Component implementation to run on a versioned entity after it is has been accessed from the db.\n+ */\n+@Component\n+public class IridaFileStorageListener {\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageListener.class);\n+\n+\t@Autowired\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n+\n+\t/**\n+\t * After the versioned entity is loaded this method will provide\n+\t * the entity access to the iridaFileStorageUtility\n+\t *\n+\t * @param fileSystemEntity The versioned entity to provide the iridaFileStorageUtility to\n+\t */\n+\t@PostLoad\n+\tpublic void afterEntityLoad(final VersionedFileFields<Long> fileSystemEntity) {\n+\t\t\tSpringBeanAutowiringSupport.processInjectionBasedOnCurrentContext(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MDc3Nw==", "bodyText": "This isn't used.  Is it used in later branches?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441790777", "createdAt": "2020-06-17T19:43:20Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageUtility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Interface describing methods for performing storage actions\n+ */\n+\n+public interface IridaFileStorageUtility {\n+\t//Valid extensions to try to concatenate with this tool\n+\tpublic static final List<String> VALID_EXTENSIONS = Lists.newArrayList(\"fastq\", \"fastq.gz\");\n+\t/**\n+\t * Get a temporarry file from storage\n+\t *\n+\t * @param file The {@link Path} to the file\n+\t * @return {@link File} which was retrieved from path\n+\t */\n+\tpublic File getTemporaryFile(Path file);\n+\n+\t/**\n+\t * Get file size in bytes\n+\t *\n+\t * @param file The {@link Path} to the file\n+\t * @return {@link Long} size of file retrieved from path\n+\t */\n+\tpublic Long getFileSize(Path file);\n+\n+\t/**\n+\t * Write file to storage (azure, aws, or local)\n+\t *\n+\t * @param source The {@link Path} to the file\n+\t * @param target The {@link Path} to where file should be moved\n+\t * @param sequenceFileDir The {@link Path} to sequence file directory\n+\t * @param sequenceFileDirWithRevision The {@link Path} to sequence file revision directory\n+\t */\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision);\n+\n+\t/**\n+\t * Returns if the storage type is local or not\n+\t *\n+\t * @return {@link Boolean#TRUE} if local, {@link Boolean#FALSE} if not.\n+\t */\n+\tpublic boolean storageTypeIsLocal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MTQ0OQ==", "bodyText": "Want to add this method onto the ReferenceFile class the same as you added it to SequenceFile so it can get rid of the IridaFileStorageUtility dependency?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441791449", "createdAt": "2020-06-17T19:44:46Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectReferenceFileController.java", "diffHunk": "@@ -93,12 +94,7 @@ public String getProjectReferenceFilesPage(final Model model, final Principal pr\n \t\t\tmap.put(\"label\", file.getLabel());\n \t\t\tmap.put(\"createdDate\", file.getCreatedDate());\n \t\t\tPath path = file.getFile();\n-\t\t\ttry {\n-\t\t\t\tmap.put(\"size\", Files.size(path));\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Cannot find the size of file \" + file.getLabel());\n-\t\t\t\tmap.put(\"size\", messageSource.getMessage(\"projects.reference-file.not-found\", new Object[] {}, locale));\n-\t\t\t}\n+\t\t\tmap.put(\"size\", iridaFileStorageUtility.getFileSize(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MTkxOA==", "bodyText": "Not used.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r441791918", "createdAt": "2020-06-17T19:45:44Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/processing/impl/unit/ChecksumFileProcessorTest.java", "diffHunk": "@@ -17,17 +17,21 @@\n import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n import ca.corefacility.bioinformatics.irida.processing.FileProcessorException;\n import ca.corefacility.bioinformatics.irida.processing.impl.ChecksumFileProcessor;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageLocalUtilityImpl;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageUtility;\n import ca.corefacility.bioinformatics.irida.repositories.sequencefile.SequenceFileRepository;\n \n public class ChecksumFileProcessorTest {\n \tprivate ChecksumFileProcessor fileProcessor;\n \tprivate SequenceFileRepository sequenceFileRepository;\n \tprivate static final String FILE_CONTENTS = \">test read\\nACGTACTCATG\";\n \tprivate static final String CHECKSUM = \"aeaa0755dc44b393ffe12f02e9bd42b0169b12ca9c15708085db6a4ac9110ee0\";\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n \n \t@Before\n \tpublic void setUp() {\n \t\tsequenceFileRepository = mock(SequenceFileRepository.class);\n+\t\tiridaFileStorageUtility = new IridaFileStorageLocalUtilityImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8477bb95ad7d2dd6a2e12591e61c4870bba42f7f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f3e957f7a3a515362d5c8c107008236a1146e4d", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/2f3e957f7a3a515362d5c8c107008236a1146e4d", "committedDate": "2020-06-18T20:34:48Z", "message": "Removed getTemporaryFile() from SequenceFile. Updated tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26c6867728ab9a3f95978ee45058e3710d0f5984", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/26c6867728ab9a3f95978ee45058e3710d0f5984", "committedDate": "2020-06-19T16:02:14Z", "message": "Fixed failing test (gzipped file without an extension) by setting file for sequence file after adding an extension to the file name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716e4677e843155efa1dfd736ebc263f42c949cf", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/716e4677e843155efa1dfd736ebc263f42c949cf", "committedDate": "2020-06-19T16:44:59Z", "message": "Removed unused imports and added javadoc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410d81be16b34c7bf54227182a20086e78f2ffc9", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/410d81be16b34c7bf54227182a20086e78f2ffc9", "committedDate": "2020-06-19T18:18:13Z", "message": "Removed fileExists from SequenceFile as it's not really a read operation and more of a filesystem operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7d0cf7048afec0807d5a840225ce44467aef7f", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/0d7d0cf7048afec0807d5a840225ce44467aef7f", "committedDate": "2020-06-23T17:44:25Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83cd0382f10cdd36f6cdd2270e63d2e4c6cb5f17", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/83cd0382f10cdd36f6cdd2270e63d2e4c6cb5f17", "committedDate": "2020-06-23T19:04:08Z", "message": "Fixed failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526bd1dc4fa7200ea0f138a8688237c9bb5c0c1e", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/526bd1dc4fa7200ea0f138a8688237c9bb5c0c1e", "committedDate": "2020-06-23T19:19:13Z", "message": "Reverted change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzkwOTUx", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-435790951", "createdAt": "2020-06-23T13:38:27Z", "commit": {"oid": "410d81be16b34c7bf54227182a20086e78f2ffc9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzozODoyN1rOGnprMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0NDo1MVrOGnp9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMDQ0OA==", "bodyText": "Something off with this comment.  Does this methond belong in here?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r444230448", "createdAt": "2020-06-23T13:38:27Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageUtility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Interface describing methods for performing storage actions\n+ */\n+\n+public interface IridaFileStorageUtility {\n+\t//Valid extensions to try to concatenate with this tool\n+\tpublic static final List<String> VALID_EXTENSIONS = Lists.newArrayList(\"fastq\", \"fastq.gz\");\n+\t/**\n+\t * Get a temporarry file from storage\n+\t *\n+\t * @param file The {@link Path} to the file\n+\t * @return {@link File} which was retrieved from path\n+\t */\n+\tpublic File getTemporaryFile(Path file);\n+\n+\t/**\n+\t * Get file size in bytes\n+\t *\n+\t * @param file The {@link Path} to the file\n+\t * @return {@link Long} size of file retrieved from path\n+\t */\n+\tpublic Long getFileSize(Path file);\n+\n+\t/**\n+\t * Write file to storage (azure, aws, or local)\n+\t *\n+\t * @param source The {@link Path} to the file\n+\t * @param target The {@link Path} to where file should be moved\n+\t * @param sequenceFileDir The {@link Path} to sequence file directory\n+\t * @param sequenceFileDirWithRevision The {@link Path} to sequence file revision directory\n+\t */\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision);\n+\n+\t/**\n+\t * Returns if the storage type is local or not\n+\t *\n+\t * @return {@link Boolean#TRUE} if local, {@link Boolean#FALSE} if not.\n+\t */\n+\tpublic boolean storageTypeIsLocal();\n+\n+\t/**\n+\t * Gets the file name from the storage type that the file\n+\t * is saved to (azure, aws, or local disk)\n+\t *\n+\t * @param file The path to the file for which to get name for\n+\t * @return {@link String} The file name for the file\n+\t */\n+\tpublic String getFileName(Path file);\n+\n+\n+\t/**\n+\t * Checks if file exists\n+\t *\n+\t * @param file The path to the file\n+\t * @return true if file exists otherwise false\n+\t *\n+\t */\n+\tpublic boolean fileExists(Path file);\n+\n+\t/**\n+\t * Gets the file inputstream\n+\t *\n+\t * @param file The path to the file\n+\t * @return file inputstream\n+\t *\n+\t */\n+\tpublic InputStream getFileInputStream(Path file);\n+\n+\t/**\n+\t * Checks if file is gzipped\n+\t *\n+\t * @param file The path to the file\n+\t * @return true if file is gzipped otherwise false\n+\t * @throws IOException if file can't be read\n+\t *\n+\t */\n+\tpublic boolean isGzipped(Path file) throws IOException;\n+\n+\t/**\n+\t * Append a {@link SequenceFile} to a {@link Path} on the filesystem\n+\t *\n+\t * @param target the {@link Path} to append to\n+\t * @param file   the {@link SequenceFile} to append to the path\n+\t * @throws ConcatenateException if there is an error appending the file\n+\t */\n+\tpublic void appendToFile(Path target, SequenceFile file) throws ConcatenateException;\n+\n+\t/**\n+\t * Get the extension of the files to concatenate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410d81be16b34c7bf54227182a20086e78f2ffc9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMzIxOQ==", "bodyText": "The Concatenator classes should likely be the ones throwing a ConcatenateException.  The IOException (or another exception) should maybe ride up to those classes before ConcatenateException gets thrown.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r444233219", "createdAt": "2020-06-23T13:42:23Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.exceptions.StorageException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.processing.FileProcessorException;\n+\n+/**\n+ * Component implementation of file utitlities for local storage\n+ */\n+@Component\n+public class IridaFileStorageLocalUtilityImpl implements IridaFileStorageUtility{\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageLocalUtilityImpl.class);\n+\n+\t@Autowired\n+\tpublic IridaFileStorageLocalUtilityImpl(){\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic File getTemporaryFile(Path file) {\n+\t\tFile fileToProcess = null;\n+\t\tfileToProcess = file.toFile();\n+\t\treturn fileToProcess;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSize(Path file) {\n+\t\tLong fileSize = 0L;\n+\t\ttry {\n+\t\t\tfileSize = Files.size(file);\n+\t\t} catch (NoSuchFileException e) {\n+\t\t\tlogger.error(\"Could not find file \" + file);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Could not calculate file size: \", e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision) {\n+\t\ttry {\n+\t\t\tif (!Files.exists(sequenceFileDir)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDir);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDir.toString() + \"]\");\n+\t\t\t}\n+\n+\t\t\tif (!Files.exists(sequenceFileDirWithRevision)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDirWithRevision);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDirWithRevision.toString() + \"]\");\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to create new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to create new directory.\", e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tFiles.move(source, target);\n+\t\t\tlogger.trace(\"Moved file \" + source + \" to \" + target);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to move file into new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to move file into new directory.\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic boolean storageTypeIsLocal(){\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic String getFileName(Path file) {\n+\t\tString fileName = \"\";\n+\t\tfileName = file.getFileName().toString();\n+\t\treturn fileName;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean fileExists(Path file) {\n+\t\treturn Files.exists(file);\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic InputStream getFileInputStream(Path file) {\n+\t\ttry {\n+\t\t\treturn Files.newInputStream(file, StandardOpenOption.READ);\n+\t\t} catch(IOException e) {\n+\t\t\tthrow new FileProcessorException(\"could not read file\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean isGzipped(Path file) throws IOException {\n+\t\ttry (InputStream is = getFileInputStream(file)) {\n+\t\t\tbyte[] bytes = new byte[2];\n+\t\t\tis.read(bytes);\n+\t\t\treturn ((bytes[0] == (byte) (GZIPInputStream.GZIP_MAGIC))\n+\t\t\t\t\t&& (bytes[1] == (byte) (GZIPInputStream.GZIP_MAGIC >> 8)));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void appendToFile(Path target, SequenceFile file) throws ConcatenateException {\n+\n+\t\ttry (FileChannel out = FileChannel.open(target, StandardOpenOption.CREATE, StandardOpenOption.APPEND,\n+\t\t\t\tStandardOpenOption.WRITE)) {\n+\t\t\ttry (FileChannel in = FileChannel.open(file.getFile(), StandardOpenOption.READ)) {\n+\t\t\t\tfor (long p = 0, l = in.size(); p < l; ) {\n+\t\t\t\t\tp += in.transferTo(p, l - p, out);\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tthrow new ConcatenateException(\"Could not open input file for reading\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410d81be16b34c7bf54227182a20086e78f2ffc9"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNTA1Ng==", "bodyText": "Should this also stay in the concatenator classes?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r444235056", "createdAt": "2020-06-23T13:44:51Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package ca.corefacility.bioinformatics.irida.repositories.filesystem;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.zip.GZIPInputStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.exceptions.ConcatenateException;\n+import ca.corefacility.bioinformatics.irida.exceptions.StorageException;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.processing.FileProcessorException;\n+\n+/**\n+ * Component implementation of file utitlities for local storage\n+ */\n+@Component\n+public class IridaFileStorageLocalUtilityImpl implements IridaFileStorageUtility{\n+\tprivate static final Logger logger = LoggerFactory.getLogger(IridaFileStorageLocalUtilityImpl.class);\n+\n+\t@Autowired\n+\tpublic IridaFileStorageLocalUtilityImpl(){\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic File getTemporaryFile(Path file) {\n+\t\tFile fileToProcess = null;\n+\t\tfileToProcess = file.toFile();\n+\t\treturn fileToProcess;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSize(Path file) {\n+\t\tLong fileSize = 0L;\n+\t\ttry {\n+\t\t\tfileSize = Files.size(file);\n+\t\t} catch (NoSuchFileException e) {\n+\t\t\tlogger.error(\"Could not find file \" + file);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Could not calculate file size: \", e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic void writeFile(Path source, Path target, Path sequenceFileDir, Path sequenceFileDirWithRevision) {\n+\t\ttry {\n+\t\t\tif (!Files.exists(sequenceFileDir)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDir);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDir.toString() + \"]\");\n+\t\t\t}\n+\n+\t\t\tif (!Files.exists(sequenceFileDirWithRevision)) {\n+\t\t\t\tFiles.createDirectory(sequenceFileDirWithRevision);\n+\t\t\t\tlogger.trace(\"Created directory: [\" + sequenceFileDirWithRevision.toString() + \"]\");\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to create new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to create new directory.\", e);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tFiles.move(source, target);\n+\t\t\tlogger.trace(\"Moved file \" + source + \" to \" + target);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to move file into new directory\", e);\n+\t\t\tthrow new StorageException(\"Failed to move file into new directory.\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic boolean storageTypeIsLocal(){\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic String getFileName(Path file) {\n+\t\tString fileName = \"\";\n+\t\tfileName = file.getFileName().toString();\n+\t\treturn fileName;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean fileExists(Path file) {\n+\t\treturn Files.exists(file);\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic InputStream getFileInputStream(Path file) {\n+\t\ttry {\n+\t\t\treturn Files.newInputStream(file, StandardOpenOption.READ);\n+\t\t} catch(IOException e) {\n+\t\t\tthrow new FileProcessorException(\"could not read file\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean isGzipped(Path file) throws IOException {\n+\t\ttry (InputStream is = getFileInputStream(file)) {\n+\t\t\tbyte[] bytes = new byte[2];\n+\t\t\tis.read(bytes);\n+\t\t\treturn ((bytes[0] == (byte) (GZIPInputStream.GZIP_MAGIC))\n+\t\t\t\t\t&& (bytes[1] == (byte) (GZIPInputStream.GZIP_MAGIC >> 8)));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void appendToFile(Path target, SequenceFile file) throws ConcatenateException {\n+\n+\t\ttry (FileChannel out = FileChannel.open(target, StandardOpenOption.CREATE, StandardOpenOption.APPEND,\n+\t\t\t\tStandardOpenOption.WRITE)) {\n+\t\t\ttry (FileChannel in = FileChannel.open(file.getFile(), StandardOpenOption.READ)) {\n+\t\t\t\tfor (long p = 0, l = in.size(); p < l; ) {\n+\t\t\t\t\tp += in.transferTo(p, l - p, out);\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tthrow new ConcatenateException(\"Could not open input file for reading\", e);\n+\t\t\t}\n+\n+\t\t} catch (IOException e) {\n+\t\t\tthrow new ConcatenateException(\"Could not open target file for writing\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic String getFileExtension(List<? extends SequencingObject> toConcatenate) throws ConcatenateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410d81be16b34c7bf54227182a20086e78f2ffc9"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f4aac137e7250b86bf891ff709f19eb128d697", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/60f4aac137e7250b86bf891ff709f19eb128d697", "committedDate": "2020-06-24T22:04:28Z", "message": "Removed isgzipped and getfileinputstream from sequencefile as they broke a lot of the tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa9df951a8ca908154f048bcc41033f8c9c41de", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/4fa9df951a8ca908154f048bcc41033f8c9c41de", "committedDate": "2020-06-24T22:16:33Z", "message": "Added getiridafilestorageutility method to sequencefile which is called by the Fast5Object when setting the type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c06e3a0ad1ce747408d1d63193129f555fd17c4", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/6c06e3a0ad1ce747408d1d63193129f555fd17c4", "committedDate": "2020-06-25T12:55:58Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725b73cfebc7da35d2f3b54ba0e9366c1396e854", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/725b73cfebc7da35d2f3b54ba0e9366c1396e854", "committedDate": "2020-06-25T13:07:33Z", "message": "Merged object-store branch and removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dcf4f3235e7e62530f13147e1d0321600de0065", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/3dcf4f3235e7e62530f13147e1d0321600de0065", "committedDate": "2020-06-26T16:26:25Z", "message": "Moved getFileSize out of SequenceFile model and updated Fast5Object model to no longer rely on iridaFileStorageUtility set in SequenceFile. Updated tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc0f800320b8908f93591eb059e07ab75b774341", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/bc0f800320b8908f93591eb059e07ab75b774341", "committedDate": "2020-06-26T18:13:06Z", "message": "Fixed tests. Removed unused imports. Added javadoc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d57f0adbe638b532bfc4f53b415582077e4a4d55", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/d57f0adbe638b532bfc4f53b415582077e4a4d55", "committedDate": "2020-06-26T18:28:05Z", "message": "Fixed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f05f1f4f2024b859a0de913931cf7be63d769d", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/94f05f1f4f2024b859a0de913931cf7be63d769d", "committedDate": "2020-06-26T20:48:05Z", "message": "Fixed issue with single end file not being deleted. Reverted change to test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4cc7a84226f25c9b0f6681e9b112f60cd62141", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/aa4cc7a84226f25c9b0f6681e9b112f60cd62141", "committedDate": "2020-06-29T16:17:26Z", "message": "Updated sequencing runs details page (run_files) to work with getting file sizes from the iridaFileStorageUtility implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a1f32d23852993b105c2f79e5d26f4885bd426", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/39a1f32d23852993b105c2f79e5d26f4885bd426", "committedDate": "2020-06-29T17:12:43Z", "message": "Fixed typo in template. Fixed logic for creating a new sequenceFileList for each sequencing object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "660b10c024aff6e9ee61bcf60eb6f05820f8fa01", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/660b10c024aff6e9ee61bcf60eb6f05820f8fa01", "committedDate": "2020-06-29T19:24:47Z", "message": "Updated which exceptions are thrown when getting file extensions and appending files. Updated method comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295deea2ff19f2a7196243e135ac84c9bccde830", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/295deea2ff19f2a7196243e135ac84c9bccde830", "committedDate": "2020-06-29T21:31:21Z", "message": "Updated throws exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb473520319daca580837dbc4ed1ca61cb2eab8f", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/bb473520319daca580837dbc4ed1ca61cb2eab8f", "committedDate": "2020-06-30T14:21:56Z", "message": "Added IOException to @throws and added catch block for IOException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d4822cd63d9292b42167d83f42d0f85f2171ac", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/b2d4822cd63d9292b42167d83f42d0f85f2171ac", "committedDate": "2020-06-30T14:44:02Z", "message": "Updated tests to except IOException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/ab225e6d847c88ed6b2ecadc1c167d5e6d634b36", "committedDate": "2020-06-30T14:51:44Z", "message": "Updated doc testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTM2ODUx", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-442536851", "createdAt": "2020-07-03T18:58:43Z", "commit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxODo1ODo0M1rOGs2fXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMDowMzoyM1rOGs3J4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MzI5NA==", "bodyText": "Why protected?  Is there subclassing of this anywhere?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449683294", "createdAt": "2020-07-03T18:58:43Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/project/ReferenceFile.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n \t@Column(name = \"filePath\", unique = true)\n \t@NotNull(message = \"{reference.file.file.notnull}\")\n-\tprivate Path file;\n+\tprotected Path file;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MzM2MQ==", "bodyText": "Same deal in UploadedAssembly", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449683361", "createdAt": "2020-07-03T18:59:09Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/project/ReferenceFile.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n \t@Column(name = \"filePath\", unique = true)\n \t@NotNull(message = \"{reference.file.file.notnull}\")\n-\tprivate Path file;\n+\tprotected Path file;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MzI5NA=="}, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NDQ5OA==", "bodyText": "Hrm.  Ok now pulling out that utility causes a problem now with creating these files.  The 2 stage creation here of the constructor with the file and setType is a problem because the object isn't valid until both of those are called.\n2 solutions I can think of:\n\nAdd isGzipped to the constructor.\nJust get the type based on the file extension in the constructor.  if ends in .gz, it's Fast5Type.ZIPPED.  if ends in .fast5 its a Fast5Type.SINGLE, etc.\n\nI would lean towards option 2.  We're already pulling the extension to check.  Reading the file to confirm it's a zip file is nice, but probably not really necessary in this case because we can usually rely on the fact that a zipped file will be called .gz.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449684498", "createdAt": "2020-07-03T19:05:19Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/samples/SamplesAjaxController.java", "diffHunk": "@@ -189,6 +192,8 @@ private void createSequenceFileInSample(MultipartFile file, Sample sample) throw\n \t */\n \tprivate void createFast5FileInSample(MultipartFile file, Sample sample) throws IOException {\n \t\tSequenceFile sequenceFile = createSequenceFile(file);\n+\t\tFast5Object fast5Object = new Fast5Object(sequenceFile);\n+\t\tfast5Object.setType(iridaFileStorageUtility.isGzipped(sequenceFile.getFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NDU5NA==", "bodyText": "and AnalysisOutputFile.java", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449684594", "createdAt": "2020-07-03T19:05:56Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/project/ReferenceFile.java", "diffHunk": "@@ -44,7 +44,7 @@\n \n \t@Column(name = \"filePath\", unique = true)\n \t@NotNull(message = \"{reference.file.file.notnull}\")\n-\tprivate Path file;\n+\tprotected Path file;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MzI5NA=="}, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTAzNQ==", "bodyText": "If you wrap this line in a 2nd try/catch that re-throws the ConcatenateException, you don't have to worry about this method throwing IOException.  That way everything calling this method doesn't need to also handle IOException", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449685035", "createdAt": "2020-07-03T19:08:29Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/concatenate/impl/SequenceFilePairConcatenator.java", "diffHunk": "@@ -5,28 +5,37 @@\n import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n import ca.corefacility.bioinformatics.irida.processing.concatenate.SequencingObjectConcatenator;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageUtility;\n \n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.List;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n /**\n  * {@link SequencingObjectConcatenator} for {@link SequenceFilePair}s\n  */\n+@Component\n public class SequenceFilePairConcatenator extends SequencingObjectConcatenator<SequenceFilePair> {\n-\t\n-\tpublic SequenceFilePairConcatenator() {\n+\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n+\n+\t@Autowired\n+\tpublic SequenceFilePairConcatenator(IridaFileStorageUtility iridaFileStorageUtility) {\n+\t\tthis.iridaFileStorageUtility = iridaFileStorageUtility;\n \t}\n \n \t/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic SequenceFilePair concatenateFiles(List<? extends SequencingObject> toConcatenate, String filename)\n-\t\t\tthrows ConcatenateException {\n+\t\t\tthrows ConcatenateException, IOException {\n \n-\t\tString extension = getFileExtension(toConcatenate);\n+\t\tString extension = iridaFileStorageUtility.getFileExtension(toConcatenate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTI2NA==", "bodyText": "Same deal with SingleEndSequenceFileConcatenator.java.  Then you can remove it from the method signature in SequencingObjectConcatenator.java and it'll remove all your exception testing changes down below.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449685264", "createdAt": "2020-07-03T19:09:47Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/concatenate/impl/SequenceFilePairConcatenator.java", "diffHunk": "@@ -5,28 +5,37 @@\n import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n import ca.corefacility.bioinformatics.irida.processing.concatenate.SequencingObjectConcatenator;\n+import ca.corefacility.bioinformatics.irida.repositories.filesystem.IridaFileStorageUtility;\n \n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.List;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n /**\n  * {@link SequencingObjectConcatenator} for {@link SequenceFilePair}s\n  */\n+@Component\n public class SequenceFilePairConcatenator extends SequencingObjectConcatenator<SequenceFilePair> {\n-\t\n-\tpublic SequenceFilePairConcatenator() {\n+\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n+\n+\t@Autowired\n+\tpublic SequenceFilePairConcatenator(IridaFileStorageUtility iridaFileStorageUtility) {\n+\t\tthis.iridaFileStorageUtility = iridaFileStorageUtility;\n \t}\n \n \t/**\n \t * {@inheritDoc}\n \t */\n \t@Override\n \tpublic SequenceFilePair concatenateFiles(List<? extends SequencingObject> toConcatenate, String filename)\n-\t\t\tthrows ConcatenateException {\n+\t\t\tthrows ConcatenateException, IOException {\n \n-\t\tString extension = getFileExtension(toConcatenate);\n+\t\tString extension = iridaFileStorageUtility.getFileExtension(toConcatenate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTAzNQ=="}, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTQ1Ng==", "bodyText": "It's too bad we've had to go back and forth on this, but when you look at the change this way I think it makes sense.  It's a direct change to iridaFileStorageUtility.getFileInputStream from Files.newInputStream.  I think that abstraction works.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449685456", "createdAt": "2020-07-03T19:10:53Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/GzipFileProcessor.java", "diffHunk": "@@ -111,10 +114,12 @@ public void processSingleFile(SequenceFile sequenceFile) throws FileProcessorExc\n \n \t\ttry {\n \t\t\tlogger.trace(\"About to try handling a gzip file.\");\n-\t\t\tif (FileUtils.isGzipped(file)) {\n+\n+\t\t\tif (iridaFileStorageUtility.isGzipped(file)) {\n \t\t\t\tfile = addExtensionToFilename(file, GZIP_EXTENSION);\n+\t\t\t\tsequenceFile.setFile(file);\n \n-\t\t\t\ttry (GZIPInputStream zippedInputStream = new GZIPInputStream(Files.newInputStream(file))) {\n+\t\t\t\ttry (GZIPInputStream zippedInputStream = new GZIPInputStream(iridaFileStorageUtility.getFileInputStream(file))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTcyNg==", "bodyText": "This sort of stuff is one of the biggest pains with adding the filestorageutility, but I guess it's just something we'll have to deal with.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449685726", "createdAt": "2020-07-03T19:12:28Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/pipelines/PipelineController.java", "diffHunk": "@@ -225,18 +230,31 @@ public String getSpecifiedPipelinePage(final Model model, Principal principal, L\n \t\t\t\t\t\tif (description.acceptsPairedSequenceFiles()) {\n \t\t\t\t\t\t\tCollection<SampleSequencingObjectJoin> pairs = sequencingObjectService.getSequencesForSampleOfType(\n \t\t\t\t\t\t\t\t\tsample, SequenceFilePair.class);\n-\t\t\t\t\t\t\tfiles.put(\"paired_end\", pairs.stream()\n-\t\t\t\t\t\t\t\t\t.map(SampleSequencingObjectJoin::getObject)\n-\t\t\t\t\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\t\t\t\t\t\tList<PairedEndFiles> pairedEndFilesList = new ArrayList<>();\n+\t\t\t\t\t\t\tfor(SampleSequencingObjectJoin p : pairs) {\n+\t\t\t\t\t\t\t\tSequenceFilePair pair = (SequenceFilePair) p.getObject();\n+\t\t\t\t\t\t\t\tString forwardFileSize = iridaFileStorageUtility.getFileSize(pair.getForwardSequenceFile().getFile());\n+\t\t\t\t\t\t\t\tString reverseFileSize = iridaFileStorageUtility.getFileSize(pair.getReverseSequenceFile().getFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NjI3OQ==", "bodyText": "Yeah.  Seeing the file creation with 2 steps here just feels like we're begging to miss calling this method.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449686279", "createdAt": "2020-07-03T19:15:32Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/web/controller/api/samples/RESTSampleSequenceFilesController.java", "diffHunk": "@@ -529,6 +532,8 @@ public ModelMap addNewFast5FileToSample(@PathVariable Long sampleId, @RequestPar\n \t\t\tsf.setFile(target);\n \n \t\t\tFast5Object fast5Object = new Fast5Object(sf);\n+\t\t\tfast5Object.setType(iridaFileStorageUtility.isGzipped(sf.getFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDE3OA==", "bodyText": "These DTO classes are a pain, but I guess no way around them if we need to group some of this stuff together.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r449694178", "createdAt": "2020-07-03T20:03:23Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/samples/dto/SingleEndFiles.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.samples.dto;\n+\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+\n+/**\n+ * Used as a response for encapsulating a single end file and its size\n+ */\n+\n+\n+public class SingleEndFiles {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab225e6d847c88ed6b2ecadc1c167d5e6d634b36"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165d0c43e10722b416655fbe62e2155040f811fb", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/165d0c43e10722b416655fbe62e2155040f811fb", "committedDate": "2020-07-08T20:51:49Z", "message": "Moved getFileSize, isGzipped, and getFileInputStream into a static class IridaFiles. Updated tests and templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfd5fbcd23cce7a9f7a2abf0c5429b0da2e6b9d", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/ccfd5fbcd23cce7a9f7a2abf0c5429b0da2e6b9d", "committedDate": "2020-07-09T18:20:19Z", "message": "Added jsonignore annotation so that the methods would not be serialized by jackson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69343634fe14ff86c31763c0dca8cd1bf3083350", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/69343634fe14ff86c31763c0dca8cd1bf3083350", "committedDate": "2020-07-09T19:25:45Z", "message": "Removed iridaFileStorageUtility from SequencingObjectConcatenator and added appendFile and getFileExtension to IridaFiles static class. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bac91e773dae1a253a0b3570628d4933b8133a4", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/8bac91e773dae1a253a0b3570628d4933b8133a4", "committedDate": "2020-07-09T19:51:57Z", "message": "Added missing @throws and removed unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ee4c8b2ec5bf5570d5b24bf5bb06de7e4a8fb9f", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/0ee4c8b2ec5bf5570d5b24bf5bb06de7e4a8fb9f", "committedDate": "2020-07-09T21:26:42Z", "message": "Removed dtos no longer required. Updated exception handling so only the concatenator classes throw a ConcatenateException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1675e3a782e0f16ec957be2e7132f345dcc47039", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/1675e3a782e0f16ec957be2e7132f345dcc47039", "committedDate": "2020-07-09T21:43:23Z", "message": "Removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e0014e1c5aa5584ad4b4f07bf67f3d54fbaf70", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/97e0014e1c5aa5584ad4b4f07bf67f3d54fbaf70", "committedDate": "2020-07-10T17:01:50Z", "message": "Removed staticcontextinitalizer and instead set the IridaFiles iridaFileStorageUtility when creating the bean. Removed appendFile from IridaFiles as its an actual file operation and instead the iridaFileStorageUtility append file method is called. Updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eab223352b5b57285bcc7f724b38b24d4e6e897", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/1eab223352b5b57285bcc7f724b38b24d4e6e897", "committedDate": "2020-07-10T17:33:17Z", "message": "Updated to set iridafilestorageutility before each test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "987e491117e9ca0bced011205e6e3d7e201914a3", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/987e491117e9ca0bced011205e6e3d7e201914a3", "committedDate": "2020-07-10T22:00:10Z", "message": "Added comment to iridaFileStorageUtility bean config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b1781018da1b9485e0508473d21bb2a463cb11", "author": {"user": {"login": "tom114", "name": "Tom Matthews"}}, "url": "https://github.com/phac-nml/irida/commit/f4b1781018da1b9485e0508473d21bb2a463cb11", "committedDate": "2020-07-15T14:27:15Z", "message": "Merge pull request #5 from deepsidhu85/object_store/_static-irida-files-class\n\nObject store/ static irida files class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a499c11a312a0ac26121da0c6f916113c1099d", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/e6a499c11a312a0ac26121da0c6f916113c1099d", "committedDate": "2020-07-15T15:43:14Z", "message": "Merge branch 'object-store' into object_store/_base"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTc4MzU3", "url": "https://github.com/phac-nml/irida/pull/650#pullrequestreview-449978357", "createdAt": "2020-07-16T15:45:14Z", "commit": {"oid": "e6a499c11a312a0ac26121da0c6f916113c1099d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NToxNVrOGyxF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NzoyNlrOGyxL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4NjMzMQ==", "bodyText": "This line isn't used.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r455886331", "createdAt": "2020-07-16T15:45:15Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/samples/SamplesAjaxController.java", "diffHunk": "@@ -189,6 +189,7 @@ private void createSequenceFileInSample(MultipartFile file, Sample sample) throw\n \t */\n \tprivate void createFast5FileInSample(MultipartFile file, Sample sample) throws IOException {\n \t\tSequenceFile sequenceFile = createSequenceFile(file);\n+\t\tFast5Object fast5Object = new Fast5Object(sequenceFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a499c11a312a0ac26121da0c6f916113c1099d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4NzI2OQ==", "bodyText": "This is just swallowing the exception, should it give the concatenation error and redirect like the catch below?", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r455887269", "createdAt": "2020-07-16T15:46:36Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/samples/SamplesController.java", "diffHunk": "@@ -581,7 +581,10 @@ public String concatenateSequenceFiles(@PathVariable Long sampleId, @RequestPara\n \t\ttry {\n \t\t\tsequencingObjectService.concatenateSequences(Lists.newArrayList(readMultiple), filename, sample,\n \t\t\t\t\tremoveOriginals);\n-\t\t} catch (ConcatenateException ex) {\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Error reading files: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a499c11a312a0ac26121da0c6f916113c1099d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4Nzg1Mg==", "bodyText": "This doesn't actually throw IOException anymore.", "url": "https://github.com/phac-nml/irida/pull/650#discussion_r455887852", "createdAt": "2020-07-16T15:47:26Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/SequencingObjectService.java", "diffHunk": "@@ -140,7 +141,8 @@\n \t *                        the sample\n \t * @return the new {@link SampleSequencingObjectJoin}\n \t * @throws ConcatenateException if there was an error concatenating the sequences\n+\t * @throws IOException if there was an error reading the sequences to concatenate\n \t */\n \tpublic SampleSequencingObjectJoin concatenateSequences(List<SequencingObject> toJoin, String filename,\n-\t\t\tSample targetSample, boolean removeOriginals) throws ConcatenateException;\n+\t\t\tSample targetSample, boolean removeOriginals) throws ConcatenateException, IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6a499c11a312a0ac26121da0c6f916113c1099d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ac519f9ce8049dfaf894978357291373d24e8a", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/56ac519f9ce8049dfaf894978357291373d24e8a", "committedDate": "2020-07-16T17:45:02Z", "message": "Removed unused line of code, removed IOException from method header, removed IOException never being thrown in a try/catch block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820770ee39759cbc2fba404d83a4390f4bc88fbf", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/820770ee39759cbc2fba404d83a4390f4bc88fbf", "committedDate": "2020-07-16T19:28:21Z", "message": "Removed @throws from method comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc8b8dc15263663fda58e5feed9acf80cbc6029", "author": {"user": {"login": "deepsidhu85", "name": null}}, "url": "https://github.com/phac-nml/irida/commit/9cc8b8dc15263663fda58e5feed9acf80cbc6029", "committedDate": "2020-07-16T19:40:21Z", "message": "Removed unused import"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 225, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}