{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Njk3NzU4", "number": 762, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDoyMzozMVrOFcDjKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOToxMToxMFrOGVALSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTYyNjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/pipeline/results/updater/impl/BioHanselSampleUpdater.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDoyMzozMVrOIn6Y6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxODoxNToxMFrOIoim8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyMjAyNQ==", "bodyText": "Changes to the updater here makes it occur to me that we'll need to push this out to our plugin developers too.  At least it's not immediately necessary unless they're running on a cloud system.  Until then they can just keep the FileReader.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578722025", "createdAt": "2021-02-18T20:23:31Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/pipeline/results/updater/impl/BioHanselSampleUpdater.java", "diffHunk": "@@ -78,9 +80,9 @@ public void update(Collection<Sample> samples, AnalysisSubmission analysis) thro\n \t\tPath filePath = aof.getFile();\n \n \t\tMap<String, MetadataEntry> stringEntries = new HashMap<>();\n-\t\ttry {\n-\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(\n-\t\t\t\t\tnew BufferedReader(new FileReader(filePath.toFile()))).useDelimiter(\"\\\\Z\")\n+\n+\t\ttry(InputStream inputStream = iridaFileStorageUtility.getFileInputStream(filePath)) {\n+\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(inputStream).useDelimiter(\"\\\\Z\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTIyNzIyOQ==", "bodyText": "Actually thinking about this a bit more, I think this can be done IridaFiles instead of the iridaFileStorageUtility?  That way we don't need to wire a new dependency into every updater class.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579227229", "createdAt": "2021-02-19T14:32:05Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/pipeline/results/updater/impl/BioHanselSampleUpdater.java", "diffHunk": "@@ -78,9 +80,9 @@ public void update(Collection<Sample> samples, AnalysisSubmission analysis) thro\n \t\tPath filePath = aof.getFile();\n \n \t\tMap<String, MetadataEntry> stringEntries = new HashMap<>();\n-\t\ttry {\n-\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(\n-\t\t\t\t\tnew BufferedReader(new FileReader(filePath.toFile()))).useDelimiter(\"\\\\Z\")\n+\n+\t\ttry(InputStream inputStream = iridaFileStorageUtility.getFileInputStream(filePath)) {\n+\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(inputStream).useDelimiter(\"\\\\Z\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyMjAyNQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM4MDk3OA==", "bodyText": "Updated the built in sample updaters to use IridaFiles in eb2d3b4", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579380978", "createdAt": "2021-02-19T18:15:10Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/pipeline/results/updater/impl/BioHanselSampleUpdater.java", "diffHunk": "@@ -78,9 +80,9 @@ public void update(Collection<Sample> samples, AnalysisSubmission analysis) thro\n \t\tPath filePath = aof.getFile();\n \n \t\tMap<String, MetadataEntry> stringEntries = new HashMap<>();\n-\t\ttry {\n-\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(\n-\t\t\t\t\tnew BufferedReader(new FileReader(filePath.toFile()))).useDelimiter(\"\\\\Z\")\n+\n+\t\ttry(InputStream inputStream = iridaFileStorageUtility.getFileInputStream(filePath)) {\n+\t\t\t@SuppressWarnings(\"resource\") String jsonText = new Scanner(inputStream).useDelimiter(\"\\\\Z\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyMjAyNQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTYzNzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDoyNjo1M1rOIn6gIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xOVQxNDo1NToyNlrOJLY4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyMzg3NA==", "bodyText": "This seems weird that we need to manage the permissions here and in the Azure utility.  What's up with this?", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578723874", "createdAt": "2021-02-18T20:26:53Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "diffHunk": "@@ -55,11 +60,46 @@ public IridaFileStorageAwsUtilityImpl(String bucketName, String bucketRegion, St\n \t */\n \t@Override\n \tpublic IridaTemporaryFile getTemporaryFile(Path file) {\n+\t\tString perm = \"rwxrwxr-x\";\n \t\ttry {\n \t\t\tlogger.trace(\"Getting file from aws s3 [\" + file.toString() + \"]\");\n \t\t\tPath tempDirectory = Files.createTempDirectory(\"aws-tmp-\");\n \t\t\tPath tempFile = tempDirectory.resolve(file.getFileName()\n \t\t\t\t\t.toString());\n+\t\t\tSet<PosixFilePermission> permissions = PosixFilePermissions.fromString(perm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTkyMTY2OQ==", "bodyText": "This has been removed. It was used for galaxy to be able to read/execute the file but we now upload the file to galaxy instead of linking to the files when using an object store", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r615921669", "createdAt": "2021-04-19T14:55:26Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "diffHunk": "@@ -55,11 +60,46 @@ public IridaFileStorageAwsUtilityImpl(String bucketName, String bucketRegion, St\n \t */\n \t@Override\n \tpublic IridaTemporaryFile getTemporaryFile(Path file) {\n+\t\tString perm = \"rwxrwxr-x\";\n \t\ttry {\n \t\t\tlogger.trace(\"Getting file from aws s3 [\" + file.toString() + \"]\");\n \t\t\tPath tempDirectory = Files.createTempDirectory(\"aws-tmp-\");\n \t\t\tPath tempFile = tempDirectory.resolve(file.getFileName()\n \t\t\t\t\t.toString());\n+\t\t\tSet<PosixFilePermission> permissions = PosixFilePermissions.fromString(perm);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyMzg3NA=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTY1NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/FastqcFileProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDozMjowOFrOIn6rlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxNzozOTo0MFrOIohS3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyNjgwNA==", "bodyText": "Should the file processor be deleting directories here or is is the iridaFileStorageUtility?", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578726804", "createdAt": "2021-02-18T20:32:08Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/FastqcFileProcessor.java", "diffHunk": "@@ -160,7 +160,7 @@ private void processSingleFile(SequenceFile sequenceFile) throws FileProcessorEx\n \t\t\ttry {\n \t\t\t\tlogger.trace(\"Removing directory: \" + outputDirectory.toString());\n \t\t\t\t// Delete the analysis-output* temp directory\n-\t\t\t\tFileUtils.deleteDirectory(outputDirectory.toFile());\n+\t\t\t\torg.apache.commons.io.FileUtils.deleteDirectory(outputDirectory.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM1OTQ1NA==", "bodyText": "This directory is created by IRIDA and not created by one of the file storage utility classes. So we just let the file processor delete it", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579359454", "createdAt": "2021-02-19T17:39:40Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/processing/impl/FastqcFileProcessor.java", "diffHunk": "@@ -160,7 +160,7 @@ private void processSingleFile(SequenceFile sequenceFile) throws FileProcessorEx\n \t\t\ttry {\n \t\t\t\tlogger.trace(\"Removing directory: \" + outputDirectory.toString());\n \t\t\t\t// Delete the analysis-output* temp directory\n-\t\t\t\tFileUtils.deleteDirectory(outputDirectory.toFile());\n+\t\t\t\torg.apache.commons.io.FileUtils.deleteDirectory(outputDirectory.toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyNjgwNA=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTY2MTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionTempFileRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDozMzozOFrOIn6uuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxODoxNDozNFrOIoilRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyNzYwOQ==", "bodyText": "Living dangerously going by the JPA docs naming convention \ud83d\ude04 .  Can you add the @Query annotation here even though it'll function exactly the same?  We've just used the @Query in every other JPA repo so I want to stay consistent.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578727609", "createdAt": "2021-02-18T20:33:38Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionTempFileRepository.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.repositories.analysis.submission;\n+\n+import java.util.List;\n+\n+\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTempFile;\n+import ca.corefacility.bioinformatics.irida.repositories.IridaJpaRepository;\n+\n+/**\n+ * A repository for managing {@link AnalysisSubmissionTempFile} objects.\n+ */\n+\n+public interface AnalysisSubmissionTempFileRepository extends IridaJpaRepository<AnalysisSubmissionTempFile, Long> {\n+\n+\t/**\n+\t * Get all {@link AnalysisSubmissionTempFile} objects by submission id.\n+\t *\n+\t * @param analysisSubmissionId The analysis submission id\n+\t * @return a list of {@link AnalysisSubmissionTempFile}\n+\t */\n+\tList<AnalysisSubmissionTempFile> findAllByAnalysisSubmissionId(Long analysisSubmissionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM1OTc1OQ==", "bodyText": "Haha I love living dangerously \ud83d\ude06 Sure thing :)", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579359759", "createdAt": "2021-02-19T17:40:11Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionTempFileRepository.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.repositories.analysis.submission;\n+\n+import java.util.List;\n+\n+\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTempFile;\n+import ca.corefacility.bioinformatics.irida.repositories.IridaJpaRepository;\n+\n+/**\n+ * A repository for managing {@link AnalysisSubmissionTempFile} objects.\n+ */\n+\n+public interface AnalysisSubmissionTempFileRepository extends IridaJpaRepository<AnalysisSubmissionTempFile, Long> {\n+\n+\t/**\n+\t * Get all {@link AnalysisSubmissionTempFile} objects by submission id.\n+\t *\n+\t * @param analysisSubmissionId The analysis submission id\n+\t * @return a list of {@link AnalysisSubmissionTempFile}\n+\t */\n+\tList<AnalysisSubmissionTempFile> findAllByAnalysisSubmissionId(Long analysisSubmissionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyNzYwOQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM4MDU0OA==", "bodyText": "Added @query annotation in eb2d3b4", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579380548", "createdAt": "2021-02-19T18:14:34Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionTempFileRepository.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package ca.corefacility.bioinformatics.irida.repositories.analysis.submission;\n+\n+import java.util.List;\n+\n+\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmissionTempFile;\n+import ca.corefacility.bioinformatics.irida.repositories.IridaJpaRepository;\n+\n+/**\n+ * A repository for managing {@link AnalysisSubmissionTempFile} objects.\n+ */\n+\n+public interface AnalysisSubmissionTempFileRepository extends IridaJpaRepository<AnalysisSubmissionTempFile, Long> {\n+\n+\t/**\n+\t * Get all {@link AnalysisSubmissionTempFile} objects by submission id.\n+\t *\n+\t * @param analysisSubmissionId The analysis submission id\n+\t * @return a list of {@link AnalysisSubmissionTempFile}\n+\t */\n+\tList<AnalysisSubmissionTempFile> findAllByAnalysisSubmissionId(Long analysisSubmissionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODcyNzYwOQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTY3OTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMDozODo0NVrOIn65kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxOTozODo0OFrOIolqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODczMDM4NQ==", "bodyText": "We already have the getFileSize function in here.  Can we refactor down to one of those methods in here?  I see that both implementations in IridaFiles just call down to the methods in the FileStorageUtility.  Can you just do the FileUtils.humanReadableByteCount conversion within IridaFiles instead of having both methods in the FileStorageUtility implmentations?", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578730385", "createdAt": "2021-02-18T20:38:45Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "diffHunk": "@@ -310,6 +342,46 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\treturn bytes;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSizeBytes(Path file) {\n+\t\tLong fileSize = 0L;\n+\n+\t\ttry(S3Object s3Object = s3.getObject(bucketName, getAwsFileAbsolutePath(file))) {\n+\t\t\tfileSize = s3Object.getObjectMetadata().getContentLength();\n+\t\t} catch (AmazonServiceException e) {\n+\t\t\tlogger.error(\"Unable to get file size from s3 bucket: \" + e);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to close connection to s3object: \" + e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQzMTA0Ng==", "bodyText": "Refactored to use just the one method in the storage utility classes in c1fb8af", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579431046", "createdAt": "2021-02-19T19:38:48Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageAwsUtilityImpl.java", "diffHunk": "@@ -310,6 +342,46 @@ public String getFileExtension(List<? extends SequencingObject> sequencingObject\n \t\treturn bytes;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic Long getFileSizeBytes(Path file) {\n+\t\tLong fileSize = 0L;\n+\n+\t\ttry(S3Object s3Object = s3.getObject(bucketName, getAwsFileAbsolutePath(file))) {\n+\t\t\tfileSize = s3Object.getObjectMetadata().getContentLength();\n+\t\t} catch (AmazonServiceException e) {\n+\t\t\tlogger.error(\"Unable to get file size from s3 bucket: \" + e);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.error(\"Unable to close connection to s3object: \" + e);\n+\t\t}\n+\n+\t\treturn fileSize;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODczMDM4NQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTc3MzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/workflow/submission/AnalysisSubmissionTempFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMTowNzowOFrOIn7zqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMTo1MzoxOFrOIops9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0NTI1Ng==", "bodyText": "Rather than storing the analysisSubmissionId can you link directly to the AnalysisSubmission?  That way we can keep some integrity between the objects and it's not just a loose ID being passed around.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578745256", "createdAt": "2021-02-18T21:07:08Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/workflow/submission/AnalysisSubmissionTempFile.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package ca.corefacility.bioinformatics.irida.model.workflow.submission;\n+\n+import java.nio.file.Path;\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.NotNull;\n+\n+import ca.corefacility.bioinformatics.irida.model.IridaThing;\n+\n+/**\n+ * A temporary file which required by an {@link AnalysisSubmission} when\n+ * the storage type is an object store.\n+ */\n+@Entity\n+@Table(name = \"analysis_submission_temp_files\")\n+public class AnalysisSubmissionTempFile implements IridaThing {\n+\t@Id\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n+\tprivate final Long id;\n+\n+\t@NotNull\n+\t@Column(name = \"analysis_submission_id\")\n+\tprivate final Long analysisSubmissionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ5NzIwNg==", "bodyText": "Linked directly to the AnalysisSubmission in 28c6030", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579497206", "createdAt": "2021-02-19T21:53:18Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/workflow/submission/AnalysisSubmissionTempFile.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package ca.corefacility.bioinformatics.irida.model.workflow.submission;\n+\n+import java.nio.file.Path;\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+import javax.validation.constraints.NotNull;\n+\n+import ca.corefacility.bioinformatics.irida.model.IridaThing;\n+\n+/**\n+ * A temporary file which required by an {@link AnalysisSubmission} when\n+ * the storage type is an object store.\n+ */\n+@Entity\n+@Table(name = \"analysis_submission_temp_files\")\n+public class AnalysisSubmissionTempFile implements IridaThing {\n+\t@Id\n+\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n+\tprivate final Long id;\n+\n+\t@NotNull\n+\t@Column(name = \"analysis_submission_id\")\n+\tprivate final Long analysisSubmissionId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0NTI1Ng=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTc4NTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMToxMDozMlrOIn77Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxODoxNDowOVrOIoikSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0NzE1NQ==", "bodyText": "I see we're passing the StorageType around a lot.  Since we're already passing the iridaFileStorageUtility, can we just make that a property of that object?  That'll remove a dependency and save wiring StorageType around all over the place.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578747155", "createdAt": "2021-02-18T21:10:32Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "diffHunk": "@@ -52,35 +58,42 @@\n \tprivate GalaxyJobErrorsService galaxyJobErrorsService;\n \tprivate JobErrorRepository jobErrorRepository;\n \tprivate final EmailController emailController;\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n \tprivate AnalysisWorkspaceService analysisWorkspaceService;\n-\n+\tprivate AnalysisSubmissionTempFileRepository analysisSubmissionTempFileRepository;\n+\tprivate StorageType storageType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM4MDI5OQ==", "bodyText": "Updated storage utilities to have storageType as a property in eb2d3b4", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579380299", "createdAt": "2021-02-19T18:14:09Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "diffHunk": "@@ -52,35 +58,42 @@\n \tprivate GalaxyJobErrorsService galaxyJobErrorsService;\n \tprivate JobErrorRepository jobErrorRepository;\n \tprivate final EmailController emailController;\n+\tprivate IridaFileStorageUtility iridaFileStorageUtility;\n \tprivate AnalysisWorkspaceService analysisWorkspaceService;\n-\n+\tprivate AnalysisSubmissionTempFileRepository analysisSubmissionTempFileRepository;\n+\tprivate StorageType storageType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0NzE1NQ=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0OTc5MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMToxMjo0NVrOIn7_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQxODoxMzozN1rOIoijGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0ODMwMw==", "bodyText": "We likely don't need the check here for StorageType.LOCAL since they won't have been created if it wasn't local.  Also if we remove this check, we can add a test for the cleanup function.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r578748303", "createdAt": "2021-02-18T21:12:45Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "diffHunk": "@@ -348,4 +374,28 @@ private void handleJobErrors(AnalysisSubmission analysisSubmission) {\n \t\t\treturn cleanedSubmissions;\n \t\t}\n \t}\n+\n+\t/**\n+\t * Cleanup any temporary downloaded files and cleanup associated {@link AnalysisSubmissionTempFile} objects\n+\t *\n+\t * @param submission The analysis submission to clean up temporary downloaded files for\n+\t */\n+\tprivate void cleanupTemporaryDownloadedFiles(AnalysisSubmission submission) {\n+\t\t/*\n+\t\t Cleanup any files that were downloaded from an object store to run an analysis and\n+\t\t remove the analysis submission temp file record from the database.\n+\t\t */\n+\t\tif (!storageType.equals(StorageType.LOCAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTM3OTk5NQ==", "bodyText": "Removed check in eb2d3b4", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r579379995", "createdAt": "2021-02-19T18:13:37Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/AnalysisExecutionScheduledTaskImpl.java", "diffHunk": "@@ -348,4 +374,28 @@ private void handleJobErrors(AnalysisSubmission analysisSubmission) {\n \t\t\treturn cleanedSubmissions;\n \t\t}\n \t}\n+\n+\t/**\n+\t * Cleanup any temporary downloaded files and cleanup associated {@link AnalysisSubmissionTempFile} objects\n+\t *\n+\t * @param submission The analysis submission to clean up temporary downloaded files for\n+\t */\n+\tprivate void cleanupTemporaryDownloadedFiles(AnalysisSubmission submission) {\n+\t\t/*\n+\t\t Cleanup any files that were downloaded from an object store to run an analysis and\n+\t\t remove the analysis submission temp file record from the database.\n+\t\t */\n+\t\tif (!storageType.equals(StorageType.LOCAL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc0ODMwMw=="}, "originalCommit": {"oid": "1e584140a8b34277397357648c16511bb4bac582"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0NTg0NDY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/pipeline/upload/galaxy/integration/GalaxyHistoriesServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxNTo0Mjo1MlrOJ9GOVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTo0MDoxOVrOJ9P9zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA0NDg4NQ==", "bodyText": "This is no longer used.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668044885", "createdAt": "2021-07-12T15:42:52Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/pipeline/upload/galaxy/integration/GalaxyHistoriesServiceIT.java", "diffHunk": "@@ -103,6 +103,8 @@\n \t */\n \tprivate static final int LIBRARY_POLLING_TIME = 5;\n \n+\tprivate static final Long ANALYSIS_SUBMISSION_ID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDQ5NQ==", "bodyText": "Removed in 50d4f4f", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204495", "createdAt": "2021-07-12T19:40:19Z", "author": {"login": "deepsidhu85"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/pipeline/upload/galaxy/integration/GalaxyHistoriesServiceIT.java", "diffHunk": "@@ -103,6 +103,8 @@\n \t */\n \tprivate static final int LIBRARY_POLLING_TIME = 5;\n \n+\tprivate static final Long ANALYSIS_SUBMISSION_ID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA0NDg4NQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0NjczNTU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/impl/integration/AnalysisCollectionServiceGalaxyIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTowNDoyOFrOJ9Op9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTo0MDoxM1rOJ9P9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4MzAzMQ==", "bodyText": "Much of these new variables are unused now.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668183031", "createdAt": "2021-07-12T19:04:28Z", "author": {"login": "tom114"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/impl/integration/AnalysisCollectionServiceGalaxyIT.java", "diffHunk": "@@ -121,6 +136,17 @@\n \tprivate static final String FORWARD_NAME = \"forward\";\n \tprivate static final String REVERSE_NAME = \"reverse\";\n \n+\tprivate SingleEndSequenceFile singleEndFile;\n+\tprivate SequenceFile sequenceFile;\n+\tprivate UUID workflowId = UUID.randomUUID();\n+\tprivate ReferenceFile referenceFile;\n+\n+\tprivate static final String analysisId = \"1\";\n+\n+\tprivate final String analysisName = \"analysis 1\";\n+\n+\tprivate User submitter1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDQ0Ng==", "bodyText": "Removed in 50d4f4f", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204446", "createdAt": "2021-07-12T19:40:13Z", "author": {"login": "deepsidhu85"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/impl/integration/AnalysisCollectionServiceGalaxyIT.java", "diffHunk": "@@ -121,6 +136,17 @@\n \tprivate static final String FORWARD_NAME = \"forward\";\n \tprivate static final String REVERSE_NAME = \"reverse\";\n \n+\tprivate SingleEndSequenceFile singleEndFile;\n+\tprivate SequenceFile sequenceFile;\n+\tprivate UUID workflowId = UUID.randomUUID();\n+\tprivate ReferenceFile referenceFile;\n+\n+\tprivate static final String analysisId = \"1\";\n+\n+\tprivate final String analysisName = \"analysis 1\";\n+\n+\tprivate User submitter1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4MzAzMQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0NjczODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/util/IridaFiles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTowNToyMFrOJ9Orww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTo0MDowNlrOJ9P9bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4MzQ5MQ==", "bodyText": "Format this to expand out the one-liner please.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668183491", "createdAt": "2021-07-12T19:05:20Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/util/IridaFiles.java", "diffHunk": "@@ -79,14 +86,21 @@ public static String getFileExtension(List<? extends SequencingObject> files) th\n \t}\n \n \t/**\n-\t * Check if file exists\n-\t * Checks if the file exists\n+\t * Gets the file size in bytes of the file from the iridaFileStorageUtility\n \t *\n \t * @param file The path to the file\n-\t * @return if file exists or not\n+\t * @return file size in bytes\n \t */\n-\tpublic static boolean fileExists(Path file) {\n-\t\treturn iridaFileStorageUtility.fileExists(file);\n+\tpublic static Long getFileSizeBytes(Path file) {\n+\t\treturn iridaFileStorageUtility.getFileSizeBytes(file);\n \t}\n \n+\t/**\n+\t * Checks if the file exists in iridaFileStorageUtility\n+\t *\n+\t * @param file The path to the file\n+\t * @return if file exists or not\n+\t */\n+\tpublic static boolean fileExists(Path file) { return iridaFileStorageUtility.fileExists(file);}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDM5Nw==", "bodyText": "Formatted in 50d4f4f", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204397", "createdAt": "2021-07-12T19:40:06Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/util/IridaFiles.java", "diffHunk": "@@ -79,14 +86,21 @@ public static String getFileExtension(List<? extends SequencingObject> files) th\n \t}\n \n \t/**\n-\t * Check if file exists\n-\t * Checks if the file exists\n+\t * Gets the file size in bytes of the file from the iridaFileStorageUtility\n \t *\n \t * @param file The path to the file\n-\t * @return if file exists or not\n+\t * @return file size in bytes\n \t */\n-\tpublic static boolean fileExists(Path file) {\n-\t\treturn iridaFileStorageUtility.fileExists(file);\n+\tpublic static Long getFileSizeBytes(Path file) {\n+\t\treturn iridaFileStorageUtility.getFileSizeBytes(file);\n \t}\n \n+\t/**\n+\t * Checks if the file exists in iridaFileStorageUtility\n+\t *\n+\t * @param file The path to the file\n+\t * @return if file exists or not\n+\t */\n+\tpublic static boolean fileExists(Path file) { return iridaFileStorageUtility.fileExists(file);}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4MzQ5MQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0Njc0MjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisWorkspaceServiceGalaxy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTowNjozNFrOJ9OubA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQyMDozNzoyMFrOJ_trsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NDE3Mg==", "bodyText": "Should this be in a try/catch or finally block?  That way if something fails, the temp file isn't left there.", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668184172", "createdAt": "2021-07-12T19:06:34Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisWorkspaceServiceGalaxy.java", "diffHunk": "@@ -295,14 +301,18 @@ private void prepareReferenceFile(ReferenceFile referenceFile, History workflowH\n \t\t\tWorkflowDetails workflowDetails, WorkflowInvocationInputs inputs)\n \t\t\tthrows UploadException, GalaxyDatasetException, WorkflowException {\n \n-\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(referenceFile.getFile(), InputFileType.FASTA,\n+\t\tIridaTemporaryFile iridaTemporaryFile = iridaFileStorageUtility.getTemporaryFile(referenceFile.getFile());\n+\n+\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(iridaTemporaryFile.getFile(), InputFileType.FASTA,\n \t\t\t\tworkflowHistory);\n \n \t\tString workflowReferenceFileInputId = galaxyWorkflowService.getWorkflowInputId(workflowDetails,\n \t\t\t\treferenceFileLabel);\n \n \t\tinputs.setInput(workflowReferenceFileInputId,\n \t\t\t\tnew WorkflowInvocationInputs.WorkflowInvocationInput(referenceDataset.getId(), WorkflowInvocationInputs.InputSourceType.HDA));\n+\n+\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDY2Mg==", "bodyText": "Yeah that might be a good idea. I will take a look :)", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204662", "createdAt": "2021-07-12T19:40:33Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisWorkspaceServiceGalaxy.java", "diffHunk": "@@ -295,14 +301,18 @@ private void prepareReferenceFile(ReferenceFile referenceFile, History workflowH\n \t\t\tWorkflowDetails workflowDetails, WorkflowInvocationInputs inputs)\n \t\t\tthrows UploadException, GalaxyDatasetException, WorkflowException {\n \n-\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(referenceFile.getFile(), InputFileType.FASTA,\n+\t\tIridaTemporaryFile iridaTemporaryFile = iridaFileStorageUtility.getTemporaryFile(referenceFile.getFile());\n+\n+\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(iridaTemporaryFile.getFile(), InputFileType.FASTA,\n \t\t\t\tworkflowHistory);\n \n \t\tString workflowReferenceFileInputId = galaxyWorkflowService.getWorkflowInputId(workflowDetails,\n \t\t\t\treferenceFileLabel);\n \n \t\tinputs.setInput(workflowReferenceFileInputId,\n \t\t\t\tnew WorkflowInvocationInputs.WorkflowInvocationInput(referenceDataset.getId(), WorkflowInvocationInputs.InputSourceType.HDA));\n+\n+\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NDE3Mg=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg3NzkzNg==", "bodyText": "Added try/catch to try to delete the file again if an exception is thrown so that the temp file is not left sitting behind in 5579950", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r669877936", "createdAt": "2021-07-14T19:04:17Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisWorkspaceServiceGalaxy.java", "diffHunk": "@@ -295,14 +301,18 @@ private void prepareReferenceFile(ReferenceFile referenceFile, History workflowH\n \t\t\tWorkflowDetails workflowDetails, WorkflowInvocationInputs inputs)\n \t\t\tthrows UploadException, GalaxyDatasetException, WorkflowException {\n \n-\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(referenceFile.getFile(), InputFileType.FASTA,\n+\t\tIridaTemporaryFile iridaTemporaryFile = iridaFileStorageUtility.getTemporaryFile(referenceFile.getFile());\n+\n+\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(iridaTemporaryFile.getFile(), InputFileType.FASTA,\n \t\t\t\tworkflowHistory);\n \n \t\tString workflowReferenceFileInputId = galaxyWorkflowService.getWorkflowInputId(workflowDetails,\n \t\t\t\treferenceFileLabel);\n \n \t\tinputs.setInput(workflowReferenceFileInputId,\n \t\t\t\tnew WorkflowInvocationInputs.WorkflowInvocationInput(referenceDataset.getId(), WorkflowInvocationInputs.InputSourceType.HDA));\n+\n+\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NDE3Mg=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc4ODUyOQ==", "bodyText": "Updated as discussed in ed32951", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r670788529", "createdAt": "2021-07-15T20:37:20Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisWorkspaceServiceGalaxy.java", "diffHunk": "@@ -295,14 +301,18 @@ private void prepareReferenceFile(ReferenceFile referenceFile, History workflowH\n \t\t\tWorkflowDetails workflowDetails, WorkflowInvocationInputs inputs)\n \t\t\tthrows UploadException, GalaxyDatasetException, WorkflowException {\n \n-\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(referenceFile.getFile(), InputFileType.FASTA,\n+\t\tIridaTemporaryFile iridaTemporaryFile = iridaFileStorageUtility.getTemporaryFile(referenceFile.getFile());\n+\n+\t\tDataset referenceDataset = galaxyHistoriesService.fileToHistory(iridaTemporaryFile.getFile(), InputFileType.FASTA,\n \t\t\t\tworkflowHistory);\n \n \t\tString workflowReferenceFileInputId = galaxyWorkflowService.getWorkflowInputId(workflowDetails,\n \t\t\t\treferenceFileLabel);\n \n \t\tinputs.setInput(workflowReferenceFileInputId,\n \t\t\t\tnew WorkflowInvocationInputs.WorkflowInvocationInput(referenceDataset.getId(), WorkflowInvocationInputs.InputSourceType.HDA));\n+\n+\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NDE3Mg=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0Njc1NDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisCollectionServiceGalaxy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTowOTozMVrOJ9O1tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xNVQyMDozNzowOFrOJ_trOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NjAzOQ==", "bodyText": "Something feels wrong with the logic here.  We've got a for loop above making the iridaTemporaryFile*, but only 1 call cleaning them up.  Should that be dealt with differently?", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668186039", "createdAt": "2021-07-12T19:09:31Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisCollectionServiceGalaxy.java", "diffHunk": "@@ -167,6 +186,13 @@ public CollectionResponse uploadSequenceFilesPaired(\n \t\t\t\tdescription.addDatasetElement(pairedElement);\n \t\t\t}\n \t\t}\n+\t\tif(iridaTemporaryFileForward != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileForward);\n+\t\t}\n+\n+\t\tif(iridaTemporaryFileReverse != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileReverse);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDk2OA==", "bodyText": "Looking at it now it does seem incorrect. Looks like I had a brain cramp. Will get it fixed up", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204968", "createdAt": "2021-07-12T19:41:01Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisCollectionServiceGalaxy.java", "diffHunk": "@@ -167,6 +186,13 @@ public CollectionResponse uploadSequenceFilesPaired(\n \t\t\t\tdescription.addDatasetElement(pairedElement);\n \t\t\t}\n \t\t}\n+\t\tif(iridaTemporaryFileForward != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileForward);\n+\t\t}\n+\n+\t\tif(iridaTemporaryFileReverse != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileReverse);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NjAzOQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTg3NzMwMg==", "bodyText": "Updated to cleanup a list of irida temporary files created by the for loops for uploadSequenceFilesSingleEnd and uploadSequenceFilesPaired in 5579950", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r669877302", "createdAt": "2021-07-14T19:03:10Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisCollectionServiceGalaxy.java", "diffHunk": "@@ -167,6 +186,13 @@ public CollectionResponse uploadSequenceFilesPaired(\n \t\t\t\tdescription.addDatasetElement(pairedElement);\n \t\t\t}\n \t\t}\n+\t\tif(iridaTemporaryFileForward != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileForward);\n+\t\t}\n+\n+\t\tif(iridaTemporaryFileReverse != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileReverse);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NjAzOQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDc4ODQxMQ==", "bodyText": "Updated as discussed in ed32951", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r670788411", "createdAt": "2021-07-15T20:37:08Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/analysis/workspace/galaxy/AnalysisCollectionServiceGalaxy.java", "diffHunk": "@@ -167,6 +186,13 @@ public CollectionResponse uploadSequenceFilesPaired(\n \t\t\t\tdescription.addDatasetElement(pairedElement);\n \t\t\t}\n \t\t}\n+\t\tif(iridaTemporaryFileForward != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileForward);\n+\t\t}\n+\n+\t\tif(iridaTemporaryFileReverse != null) {\n+\t\t\tiridaFileStorageUtility.cleanupDownloadedLocalTemporaryFiles(iridaTemporaryFileReverse);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NjAzOQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDI0Njc2MTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOToxMToxMFrOJ9O5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0xMlQxOTozOTo1NFrOJ9P9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NzA1OQ==", "bodyText": "These implementations seem odd in all the filestorageutility classes.  Can they just return true or false as needed?", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668187059", "createdAt": "2021-07-12T19:11:10Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -260,4 +285,11 @@ public boolean checkWriteAccess(Path baseDirectory) {\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean isStorageTypeLocal() {\n+\t\treturn storageType.equals(StorageType.LOCAL);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNDI5MA==", "bodyText": "Yup that works! Updated in 50d4f4f", "url": "https://github.com/phac-nml/irida/pull/762#discussion_r668204290", "createdAt": "2021-07-12T19:39:54Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/filesystem/IridaFileStorageLocalUtilityImpl.java", "diffHunk": "@@ -260,4 +285,11 @@ public boolean checkWriteAccess(Path baseDirectory) {\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\tpublic boolean isStorageTypeLocal() {\n+\t\treturn storageType.equals(StorageType.LOCAL);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODE4NzA1OQ=="}, "originalCommit": {"oid": "da59fd20ef17810e207e2cee7805c7c0b452eac3"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 688, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}