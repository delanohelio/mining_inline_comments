{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzA1NDUy", "number": 559, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowMToxMVrODl9IUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMzo0MFrODqeDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI1NDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowMToxMVrOFzIw-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNTozMlrOFzJR8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTMwNQ==", "bodyText": "Was this intended? It looks like it is undoing #564", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389165305", "createdAt": "2020-03-06T22:01:11Z", "author": {"login": "JeffreyThiessen"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadService.java", "diffHunk": "@@ -300,12 +300,8 @@ public NcbiExportSubmission uploadSubmission(NcbiExportSubmission submission, St\n \t\t\t\tfor (SingleEndSequenceFile file : bsFile.getFiles()) {\n \t\t\t\t\t// Just using file IDs as the basename for uploaded files to\n \t\t\t\t\t// avoid accidentally sending sensitive sample names to NCBI\n-\t\t\t\t\tString filename;\n-\t\t\t\t\tif (file.getSequenceFile().getFile().toString().endsWith(\".gz\")) {\n-\t\t\t\t\t\tfilename = file.getSequenceFile().getId() + \".fastq.gz\";\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tfilename = file.getSequenceFile().getId() + \".fastq\";\n-\t\t\t\t\t}\n+\t\t\t\t\tString filename = file.getSequenceFile().getId() + \".fastq\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3Mzc0Nw==", "bodyText": "Fixed thanks", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389173747", "createdAt": "2020-03-06T22:25:32Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadService.java", "diffHunk": "@@ -300,12 +300,8 @@ public NcbiExportSubmission uploadSubmission(NcbiExportSubmission submission, St\n \t\t\t\tfor (SingleEndSequenceFile file : bsFile.getFiles()) {\n \t\t\t\t\t// Just using file IDs as the basename for uploaded files to\n \t\t\t\t\t// avoid accidentally sending sensitive sample names to NCBI\n-\t\t\t\t\tString filename;\n-\t\t\t\t\tif (file.getSequenceFile().getFile().toString().endsWith(\".gz\")) {\n-\t\t\t\t\t\tfilename = file.getSequenceFile().getId() + \".fastq.gz\";\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tfilename = file.getSequenceFile().getId() + \".fastq\";\n-\t\t\t\t\t}\n+\t\t\t\t\tString filename = file.getSequenceFile().getId() + \".fastq\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTMwNQ=="}, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI1ODkwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/ca/corefacility/bioinformatics/irida/export/ncbi.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowMzoxM1rOFzIzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODo1MDoyMlrOFzRNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjAwOQ==", "bodyText": "Also appears to be undoing #564", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389166009", "createdAt": "2020-03-06T22:03:13Z", "author": {"login": "JeffreyThiessen"}, "path": "src/main/resources/ca/corefacility/bioinformatics/irida/export/ncbi.xml", "diffHunk": "@@ -17,23 +17,10 @@\n \t</Description>\n \n \t<Action th:each=\"sample : ${submission.bioSampleFiles}\">\n-\t\t<!--/*-->\n-\t\tIRIDA sequence files may either be plaintext (.fastq) or gzip compressed (.fastq.gz)\n-\t\tNCBI requires that uploaded files should have the appropriate file extension.\n-\t\tDetermine if the IRIDA sequence file is compressed by looking for .gz extension\n-\t\tand add the appropriate extension to the uploaded files.\n-\t\t<!--*/-->\n \t\t<AddFiles target_db=\"SRA\" th:each=\"file : ${sample.files}\">\n-\t\t\t<th:block th:if=\"${file.getFiles().toString().endsWith(&quot;.gz&quot;)}\">\n-\t\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq.gz'}\">\n-\t\t\t\t\t<DataType>generic-data</DataType>\n-\t\t\t\t</File>\n-\t\t\t</th:block>\n-\t\t\t<th:block th:if=\"${!file.getFiles().toString().endsWith(&quot;.gz&quot;)}\">\n-\t\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq'}\">\n-\t\t\t\t\t<DataType>generic-data</DataType>\n-\t\t\t\t</File>\n-\t\t\t</th:block>\n+\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq'}\">\n+\t\t\t\t<DataType>generic-data</DataType>\n+\t\t\t</File>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzU5NQ==", "bodyText": "Fixed thanks", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389303595", "createdAt": "2020-03-07T18:50:22Z", "author": {"login": "deepsidhu85"}, "path": "src/main/resources/ca/corefacility/bioinformatics/irida/export/ncbi.xml", "diffHunk": "@@ -17,23 +17,10 @@\n \t</Description>\n \n \t<Action th:each=\"sample : ${submission.bioSampleFiles}\">\n-\t\t<!--/*-->\n-\t\tIRIDA sequence files may either be plaintext (.fastq) or gzip compressed (.fastq.gz)\n-\t\tNCBI requires that uploaded files should have the appropriate file extension.\n-\t\tDetermine if the IRIDA sequence file is compressed by looking for .gz extension\n-\t\tand add the appropriate extension to the uploaded files.\n-\t\t<!--*/-->\n \t\t<AddFiles target_db=\"SRA\" th:each=\"file : ${sample.files}\">\n-\t\t\t<th:block th:if=\"${file.getFiles().toString().endsWith(&quot;.gz&quot;)}\">\n-\t\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq.gz'}\">\n-\t\t\t\t\t<DataType>generic-data</DataType>\n-\t\t\t\t</File>\n-\t\t\t</th:block>\n-\t\t\t<th:block th:if=\"${!file.getFiles().toString().endsWith(&quot;.gz&quot;)}\">\n-\t\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq'}\">\n-\t\t\t\t\t<DataType>generic-data</DataType>\n-\t\t\t\t</File>\n-\t\t\t</th:block>\n+\t\t\t<File th:attr=\"file_path=${file.getId() + '.fastq'}\">\n+\t\t\t\t<DataType>generic-data</DataType>\n+\t\t\t</File>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjAwOQ=="}, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI2MTYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowNDozMVrOFzI1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNTozNlrOFzJSBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjQ1NA==", "bodyText": "This file too (#564)", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389166454", "createdAt": "2020-03-06T22:04:31Z", "author": {"login": "JeffreyThiessen"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadServiceTest.java", "diffHunk": "@@ -41,7 +41,7 @@\n \n \t@Test\n \tpublic void testUploadSubmission() throws UploadException, IOException {\n-\t\tNcbiExportSubmission submission = createFakeSubmission(\".fastq\");\n+\t\tNcbiExportSubmission submission = createFakeSubmission();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3Mzc2NA==", "bodyText": "Fixed thanks", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r389173764", "createdAt": "2020-03-06T22:25:36Z", "author": {"login": "deepsidhu85"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/service/export/ExportUploadServiceTest.java", "diffHunk": "@@ -41,7 +41,7 @@\n \n \t@Test\n \tpublic void testUploadSubmission() throws UploadException, IOException {\n-\t\tNcbiExportSubmission submission = createFakeSubmission(\".fastq\");\n+\t\tNcbiExportSubmission submission = createFakeSubmission();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NjQ1NA=="}, "originalCommit": {"oid": "2615b7ba980a4db0032fac13326aa58742a9eb68"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQyMzA1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjozNjo0MFrOF6DcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyMToyNVrOF61bsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxODA5MQ==", "bodyText": "All the new changelog stuff should be pushed up into the current version.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396418091", "createdAt": "2020-03-23T12:36:40Z", "author": {"login": "tom114"}, "path": "CHANGELOG.md", "diffHunk": "@@ -43,6 +44,7 @@ Changes\n * [UI/Developer]: Removed `marked`, `angular-marked`, `select2`, `angular-bootstrap` and `ng-file-upload` as bower dependencies.\n * [REST/Developer]: added the `/api/version` route to the REST API that returns the full version string.\n * [UI]: Fixed issue where issue where cart is not rendering to the full height of the page. (19.09.2)\n+* [Developer]: `bower` completely removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMDk5NQ==", "bodyText": "Updated in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396800995", "createdAt": "2020-03-23T22:44:13Z", "author": {"login": "deepsidhu85"}, "path": "CHANGELOG.md", "diffHunk": "@@ -43,6 +44,7 @@ Changes\n * [UI/Developer]: Removed `marked`, `angular-marked`, `select2`, `angular-bootstrap` and `ng-file-upload` as bower dependencies.\n * [REST/Developer]: added the `/api/version` route to the REST API that returns the full version string.\n * [UI]: Fixed issue where issue where cart is not rendering to the full height of the page. (19.09.2)\n+* [Developer]: `bower` completely removed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxODA5MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzMzU5NQ==", "bodyText": "should this line have been moved up to the most recent version?  It was just removed in this push.\n* [Developer]: `bower` completely removed.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397133595", "createdAt": "2020-03-24T13:01:35Z", "author": {"login": "tom114"}, "path": "CHANGELOG.md", "diffHunk": "@@ -43,6 +44,7 @@ Changes\n * [UI/Developer]: Removed `marked`, `angular-marked`, `select2`, `angular-bootstrap` and `ng-file-upload` as bower dependencies.\n * [REST/Developer]: added the `/api/version` route to the REST API that returns the full version string.\n * [UI]: Fixed issue where issue where cart is not rendering to the full height of the page. (19.09.2)\n+* [Developer]: `bower` completely removed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxODA5MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzE3MQ==", "bodyText": "Whoops. Fixed in 736e177", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397237171", "createdAt": "2020-03-24T15:21:25Z", "author": {"login": "deepsidhu85"}, "path": "CHANGELOG.md", "diffHunk": "@@ -43,6 +44,7 @@ Changes\n * [UI/Developer]: Removed `marked`, `angular-marked`, `select2`, `angular-bootstrap` and `ng-file-upload` as bower dependencies.\n * [REST/Developer]: added the `/api/version` route to the REST API that returns the full version string.\n * [UI]: Fixed issue where issue where cart is not rendering to the full height of the page. (19.09.2)\n+* [Developer]: `bower` completely removed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxODA5MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQ0MjA2OnYy", "diffSide": "RIGHT", "path": "doc/developer/index.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0MTo1MFrOF6Dn3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyMTozNVrOF61cNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMTA4Ng==", "bodyText": "What's up with these changes showing here?  This is a change that happened months ago.  It actually appears to undo the change in 567010f", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396421086", "createdAt": "2020-03-23T12:41:50Z", "author": {"login": "tom114"}, "path": "doc/developer/index.md", "diffHunk": "@@ -20,7 +20,7 @@ Tool Development\n * [IRIDA pipeline development](tools/pipelines)\n * [IRIDA workflow description](tools/pipelines/workflow-description)\n * [IRIDA REST API docs](rest/)\n-* [REST API OAuth2 notes](authorization)\n+* [REST API OAuth2 notes](authorization/oauth2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzczOA==", "bodyText": "Fixed in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396793738", "createdAt": "2020-03-23T22:25:48Z", "author": {"login": "deepsidhu85"}, "path": "doc/developer/index.md", "diffHunk": "@@ -20,7 +20,7 @@ Tool Development\n * [IRIDA pipeline development](tools/pipelines)\n * [IRIDA workflow description](tools/pipelines/workflow-description)\n * [IRIDA REST API docs](rest/)\n-* [REST API OAuth2 notes](authorization)\n+* [REST API OAuth2 notes](authorization/oauth2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMTA4Ng=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTEyMA==", "bodyText": "Another one from a merge gone wrong at some point but fixed now", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396795120", "createdAt": "2020-03-23T22:29:01Z", "author": {"login": "deepsidhu85"}, "path": "doc/developer/index.md", "diffHunk": "@@ -20,7 +20,7 @@ Tool Development\n * [IRIDA pipeline development](tools/pipelines)\n * [IRIDA workflow description](tools/pipelines/workflow-description)\n * [IRIDA REST API docs](rest/)\n-* [REST API OAuth2 notes](authorization)\n+* [REST API OAuth2 notes](authorization/oauth2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMTA4Ng=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzNTQyOQ==", "bodyText": "The file doc/developer/authorization/oauth2.md also needs to be renamed to  doc/developer/authorization/index.md to fix this merge.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397135429", "createdAt": "2020-03-24T13:04:41Z", "author": {"login": "tom114"}, "path": "doc/developer/index.md", "diffHunk": "@@ -20,7 +20,7 @@ Tool Development\n * [IRIDA pipeline development](tools/pipelines)\n * [IRIDA workflow description](tools/pipelines/workflow-description)\n * [IRIDA REST API docs](rest/)\n-* [REST API OAuth2 notes](authorization)\n+* [REST API OAuth2 notes](authorization/oauth2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMTA4Ng=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzMwMg==", "bodyText": "Renamed in 736e177", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397237302", "createdAt": "2020-03-24T15:21:35Z", "author": {"login": "deepsidhu85"}, "path": "doc/developer/index.md", "diffHunk": "@@ -20,7 +20,7 @@ Tool Development\n * [IRIDA pipeline development](tools/pipelines)\n * [IRIDA workflow description](tools/pipelines/workflow-description)\n * [IRIDA REST API docs](rest/)\n-* [REST API OAuth2 notes](authorization)\n+* [REST API OAuth2 notes](authorization/oauth2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyMTA4Ng=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQ2NTczOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo0ODoxN1rOF6D2qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNTo1N1rOF6aXyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyNDg3NA==", "bodyText": "If this is needed, the version should be in the properties section down below.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396424874", "createdAt": "2020-03-23T12:48:17Z", "author": {"login": "tom114"}, "path": "pom.xml", "diffHunk": "@@ -667,6 +667,11 @@\n \t\t\t<artifactId>jvm-breakglass</artifactId>\n \t\t\t<version>${jvm-breakglass.version}</version>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.code.gson</groupId>\n+\t\t\t<artifactId>gson</artifactId>\n+\t\t\t<version>2.8.6</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzgwMA==", "bodyText": "Updated in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396793800", "createdAt": "2020-03-23T22:25:57Z", "author": {"login": "deepsidhu85"}, "path": "pom.xml", "diffHunk": "@@ -667,6 +667,11 @@\n \t\t\t<artifactId>jvm-breakglass</artifactId>\n \t\t\t<version>${jvm-breakglass.version}</version>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.code.gson</groupId>\n+\t\t\t<artifactId>gson</artifactId>\n+\t\t\t<version>2.8.6</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyNDg3NA=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzQ4Njc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjo1NDoyMVrOF6ED3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyMTo0MVrOF61cdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyODI1Mg==", "bodyText": "Can we do something about the names between AnalysIsAjaxController and AnalysEsAjaxController?  The names are too close, the comments don't really differentiate them.  I'm assuming one has to do with loading from the analysis table, and the other with the analysis details page?  If so, please rename them to be clear of that and update the comments to say so.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396428252", "createdAt": "2020-03-23T12:54:21Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -0,0 +1,1187 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.analysis;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.config.analysis.ExecutionManagerConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.*;\n+import ca.corefacility.bioinformatics.irida.model.enums.AnalysisState;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectMetadataTemplateJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplate;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplateField;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sample.metadata.MetadataEntry;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.*;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.AnalysisType;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.BuiltInAnalysisTypes;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmission;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.ProjectAnalysisSubmissionJoin;\n+import ca.corefacility.bioinformatics.irida.pipeline.results.AnalysisSubmissionSampleProcessor;\n+import ca.corefacility.bioinformatics.irida.ria.utilities.FileUtilities;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.auditing.AnalysisAudit;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.dto.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.components.AnalysisOutputFileDownloadManager;\n+import ca.corefacility.bioinformatics.irida.ria.web.dto.ResponseDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.utilities.DateUtilities;\n+import ca.corefacility.bioinformatics.irida.security.permissions.analysis.UpdateAnalysisSubmissionPermission;\n+import ca.corefacility.bioinformatics.irida.service.AnalysisSubmissionService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.MetadataTemplateService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.shaded.com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Controller for Analysis ajax requests.\n+ */\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/analysis\")\n+public class AnalysisAjaxController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjA2NQ==", "bodyText": "The AnalysesAjaxController file is used exclusively by the analyses table page. The AnalysisAjaxController is used by the refactored analysis page, as well as, by some of the tabs in the project page. We can rename the AnalysesAjaxController to something like AnalysesTableAjaxController. That way we can easily distinguish between them. What are your thoughts?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396796065", "createdAt": "2020-03-23T22:31:22Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -0,0 +1,1187 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.analysis;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.config.analysis.ExecutionManagerConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.*;\n+import ca.corefacility.bioinformatics.irida.model.enums.AnalysisState;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectMetadataTemplateJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplate;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplateField;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sample.metadata.MetadataEntry;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.*;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.AnalysisType;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.BuiltInAnalysisTypes;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmission;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.ProjectAnalysisSubmissionJoin;\n+import ca.corefacility.bioinformatics.irida.pipeline.results.AnalysisSubmissionSampleProcessor;\n+import ca.corefacility.bioinformatics.irida.ria.utilities.FileUtilities;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.auditing.AnalysisAudit;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.dto.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.components.AnalysisOutputFileDownloadManager;\n+import ca.corefacility.bioinformatics.irida.ria.web.dto.ResponseDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.utilities.DateUtilities;\n+import ca.corefacility.bioinformatics.irida.security.permissions.analysis.UpdateAnalysisSubmissionPermission;\n+import ca.corefacility.bioinformatics.irida.service.AnalysisSubmissionService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.MetadataTemplateService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.shaded.com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Controller for Analysis ajax requests.\n+ */\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/analysis\")\n+public class AnalysisAjaxController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyODI1Mg=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzMDUxMQ==", "bodyText": "Yes please.  Renaming that would help.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397130511", "createdAt": "2020-03-24T12:56:28Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -0,0 +1,1187 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.analysis;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.config.analysis.ExecutionManagerConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.*;\n+import ca.corefacility.bioinformatics.irida.model.enums.AnalysisState;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectMetadataTemplateJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplate;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplateField;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sample.metadata.MetadataEntry;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.*;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.AnalysisType;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.BuiltInAnalysisTypes;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmission;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.ProjectAnalysisSubmissionJoin;\n+import ca.corefacility.bioinformatics.irida.pipeline.results.AnalysisSubmissionSampleProcessor;\n+import ca.corefacility.bioinformatics.irida.ria.utilities.FileUtilities;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.auditing.AnalysisAudit;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.dto.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.components.AnalysisOutputFileDownloadManager;\n+import ca.corefacility.bioinformatics.irida.ria.web.dto.ResponseDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.utilities.DateUtilities;\n+import ca.corefacility.bioinformatics.irida.security.permissions.analysis.UpdateAnalysisSubmissionPermission;\n+import ca.corefacility.bioinformatics.irida.service.AnalysisSubmissionService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.MetadataTemplateService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.shaded.com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Controller for Analysis ajax requests.\n+ */\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/analysis\")\n+public class AnalysisAjaxController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyODI1Mg=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzM2Nw==", "bodyText": "Renamed in 736e177", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397237367", "createdAt": "2020-03-24T15:21:41Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -0,0 +1,1187 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.analysis;\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.security.Principal;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.config.analysis.ExecutionManagerConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.*;\n+import ca.corefacility.bioinformatics.irida.model.enums.AnalysisState;\n+import ca.corefacility.bioinformatics.irida.model.joins.impl.ProjectMetadataTemplateJoin;\n+import ca.corefacility.bioinformatics.irida.model.project.ReferenceFile;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplate;\n+import ca.corefacility.bioinformatics.irida.model.sample.MetadataTemplateField;\n+import ca.corefacility.bioinformatics.irida.model.sample.Sample;\n+import ca.corefacility.bioinformatics.irida.model.sample.SampleSequencingObjectJoin;\n+import ca.corefacility.bioinformatics.irida.model.sample.metadata.MetadataEntry;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequenceFilePair;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SequencingObject;\n+import ca.corefacility.bioinformatics.irida.model.sequenceFile.SingleEndSequenceFile;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.*;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.AnalysisType;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.BuiltInAnalysisTypes;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.AnalysisSubmission;\n+import ca.corefacility.bioinformatics.irida.model.workflow.submission.ProjectAnalysisSubmissionJoin;\n+import ca.corefacility.bioinformatics.irida.pipeline.results.AnalysisSubmissionSampleProcessor;\n+import ca.corefacility.bioinformatics.irida.ria.utilities.FileUtilities;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.auditing.AnalysisAudit;\n+import ca.corefacility.bioinformatics.irida.ria.web.analysis.dto.*;\n+import ca.corefacility.bioinformatics.irida.ria.web.components.AnalysisOutputFileDownloadManager;\n+import ca.corefacility.bioinformatics.irida.ria.web.dto.ResponseDetails;\n+import ca.corefacility.bioinformatics.irida.ria.web.utilities.DateUtilities;\n+import ca.corefacility.bioinformatics.irida.security.permissions.analysis.UpdateAnalysisSubmissionPermission;\n+import ca.corefacility.bioinformatics.irida.service.AnalysisSubmissionService;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.SequencingObjectService;\n+import ca.corefacility.bioinformatics.irida.service.sample.MetadataTemplateService;\n+import ca.corefacility.bioinformatics.irida.service.sample.SampleService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.shaded.com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * Controller for Analysis ajax requests.\n+ */\n+@RestController\n+@Scope(\"session\")\n+@RequestMapping(\"/ajax/analysis\")\n+public class AnalysisAjaxController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyODI1Mg=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzU5NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyMjo0NlrOF6FH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNjoxMFrOF6aYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NTY5NQ==", "bodyText": "We could update the name before, which method did we use then?  Can we not just use the regular update method?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396445695", "createdAt": "2020-03-23T13:22:46Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "diffHunk": "@@ -306,6 +306,26 @@ public ProjectAnalysisSubmissionJoin shareAnalysisSubmissionWithProject(Analysis\n \t */\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority);\n \n+\t/**\n+\t * Update the emailPipelineResult of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param emailPipelineResult  the new emailPipelineResult\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateEmailPipelineResult(AnalysisSubmission submission, boolean emailPipelineResult);\n+\n+\n+\t/**\n+\t * Update the name of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param analysisName   the new name of the analysis\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateAnalysisName(AnalysisSubmission submission, String analysisName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzkxOQ==", "bodyText": "Yup I updated it in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396793919", "createdAt": "2020-03-23T22:26:10Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "diffHunk": "@@ -306,6 +306,26 @@ public ProjectAnalysisSubmissionJoin shareAnalysisSubmissionWithProject(Analysis\n \t */\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority);\n \n+\t/**\n+\t * Update the emailPipelineResult of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param emailPipelineResult  the new emailPipelineResult\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateEmailPipelineResult(AnalysisSubmission submission, boolean emailPipelineResult);\n+\n+\n+\t/**\n+\t * Update the name of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param analysisName   the new name of the analysis\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateAnalysisName(AnalysisSubmission submission, String analysisName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NTY5NQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzYxMzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyNzozNFrOF6FT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNjoyMVrOF6aYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODc1OA==", "bodyText": "Same with this method.  Would just update work?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396448758", "createdAt": "2020-03-23T13:27:34Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "diffHunk": "@@ -306,6 +306,26 @@ public ProjectAnalysisSubmissionJoin shareAnalysisSubmissionWithProject(Analysis\n \t */\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority);\n \n+\t/**\n+\t * Update the emailPipelineResult of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param emailPipelineResult  the new emailPipelineResult\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateEmailPipelineResult(AnalysisSubmission submission, boolean emailPipelineResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5Mzk5MA==", "bodyText": "Updated in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396793990", "createdAt": "2020-03-23T22:26:21Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/AnalysisSubmissionService.java", "diffHunk": "@@ -306,6 +306,26 @@ public ProjectAnalysisSubmissionJoin shareAnalysisSubmissionWithProject(Analysis\n \t */\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority);\n \n+\t/**\n+\t * Update the emailPipelineResult of an {@link AnalysisSubmission}\n+\t *\n+\t * @param submission the submission to update\n+\t * @param emailPipelineResult  the new emailPipelineResult\n+\t * @return the updated submission\n+\t */\n+\tpublic AnalysisSubmission updateEmailPipelineResult(AnalysisSubmission submission, boolean emailPipelineResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0ODc1OA=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzYxNjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/analysis/submission/AnalysisSubmissionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyODowN1rOF6FVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNjo0OFrOF6aZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0OTE0Ng==", "bodyText": "These 2 new methods are set as @PreAuthorize(\"hasRole('ROLE_ADMIN')\") meaning the submitter could not update these.  Should they be able to?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396449146", "createdAt": "2020-03-23T13:28:07Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/analysis/submission/AnalysisSubmissionServiceImpl.java", "diffHunk": "@@ -338,11 +338,36 @@ public AnalysisSubmission update(AnalysisSubmission object) {\n \t@Override\n \t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority) {\n+\t\tcheckNotNull(priority);\n \t\tsubmission.setPriority(priority);\n \n \t\treturn super.update(submission);\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDE4OQ==", "bodyText": "Removed these methods in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396794189", "createdAt": "2020-03-23T22:26:48Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/analysis/submission/AnalysisSubmissionServiceImpl.java", "diffHunk": "@@ -338,11 +338,36 @@ public AnalysisSubmission update(AnalysisSubmission object) {\n \t@Override\n \t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n \tpublic AnalysisSubmission updatePriority(AnalysisSubmission submission, AnalysisSubmission.Priority priority) {\n+\t\tcheckNotNull(priority);\n \t\tsubmission.setPriority(priority);\n \n \t\treturn super.update(submission);\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\t@Override\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0OTE0Ng=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzYyNDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/sample/SampleServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzoyOTo1MlrOF6FaJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyMTo1NlrOF61dKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MDM0MQ==", "bodyText": "If we get a NullPointerException here is it reasonable to add a null to this collection?  Will that not just push the problem further down the line?  Should this fail here instead or where is this being handled down the line?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396450341", "createdAt": "2020-03-23T13:29:52Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/sample/SampleServiceImpl.java", "diffHunk": "@@ -456,9 +456,15 @@ private SampleSequencingObjectJoin addSequencingObjectToSample(Sample sample, Se\n \tpublic Collection<Sample> getSamplesForAnalysisSubmission(AnalysisSubmission submission) {\n \t\tSet<SequencingObject> objectsForAnalysisSubmission = sequencingObjectRepository\n \t\t\t\t.findSequencingObjectsForAnalysisSubmission(submission);\n-\n-\t\tSet<Sample> samples = objectsForAnalysisSubmission.stream()\n-\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s).getSubject()).collect(Collectors.toSet());\n+\t\tSet<Sample> samples = null;\n+\t\ttry {\n+\t\t\tsamples = objectsForAnalysisSubmission.stream()\n+\t\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s)\n+\t\t\t\t\t\t\t.getSubject())\n+\t\t\t\t\t.collect(Collectors.toSet());\n+\t\t} catch (NullPointerException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMDc4MQ==", "bodyText": "Line 769 in AnalysisAjaxController return new AnalysisSistrResults(null, true, null); The first null is the sampleName and it will be set to null if there are no samples for the analysis. The view handles this so that other details for the sistr results can still be filled out even if the samples are not found. I've changed it to log a message rather than returning null if there is a NullPointerException. Updated in 6b29dcd", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396820781", "createdAt": "2020-03-23T23:31:15Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/sample/SampleServiceImpl.java", "diffHunk": "@@ -456,9 +456,15 @@ private SampleSequencingObjectJoin addSequencingObjectToSample(Sample sample, Se\n \tpublic Collection<Sample> getSamplesForAnalysisSubmission(AnalysisSubmission submission) {\n \t\tSet<SequencingObject> objectsForAnalysisSubmission = sequencingObjectRepository\n \t\t\t\t.findSequencingObjectsForAnalysisSubmission(submission);\n-\n-\t\tSet<Sample> samples = objectsForAnalysisSubmission.stream()\n-\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s).getSubject()).collect(Collectors.toSet());\n+\t\tSet<Sample> samples = null;\n+\t\ttry {\n+\t\t\tsamples = objectsForAnalysisSubmission.stream()\n+\t\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s)\n+\t\t\t\t\t\t\t.getSubject())\n+\t\t\t\t\t.collect(Collectors.toSet());\n+\t\t} catch (NullPointerException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MDM0MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzNzExNw==", "bodyText": "Good thanks for the explanation.  Can that log statement be bumped up to a warn?  That sounds like a problem but since it's handled later down in the chain that's ok.", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397137117", "createdAt": "2020-03-24T13:07:30Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/sample/SampleServiceImpl.java", "diffHunk": "@@ -456,9 +456,15 @@ private SampleSequencingObjectJoin addSequencingObjectToSample(Sample sample, Se\n \tpublic Collection<Sample> getSamplesForAnalysisSubmission(AnalysisSubmission submission) {\n \t\tSet<SequencingObject> objectsForAnalysisSubmission = sequencingObjectRepository\n \t\t\t\t.findSequencingObjectsForAnalysisSubmission(submission);\n-\n-\t\tSet<Sample> samples = objectsForAnalysisSubmission.stream()\n-\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s).getSubject()).collect(Collectors.toSet());\n+\t\tSet<Sample> samples = null;\n+\t\ttry {\n+\t\t\tsamples = objectsForAnalysisSubmission.stream()\n+\t\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s)\n+\t\t\t\t\t\t\t.getSubject())\n+\t\t\t\t\t.collect(Collectors.toSet());\n+\t\t} catch (NullPointerException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MDM0MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzU0Ng==", "bodyText": "Bumped up to a warn in 736e177", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r397237546", "createdAt": "2020-03-24T15:21:56Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/impl/sample/SampleServiceImpl.java", "diffHunk": "@@ -456,9 +456,15 @@ private SampleSequencingObjectJoin addSequencingObjectToSample(Sample sample, Se\n \tpublic Collection<Sample> getSamplesForAnalysisSubmission(AnalysisSubmission submission) {\n \t\tSet<SequencingObject> objectsForAnalysisSubmission = sequencingObjectRepository\n \t\t\t\t.findSequencingObjectsForAnalysisSubmission(submission);\n-\n-\t\tSet<Sample> samples = objectsForAnalysisSubmission.stream()\n-\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s).getSubject()).collect(Collectors.toSet());\n+\t\tSet<Sample> samples = null;\n+\t\ttry {\n+\t\t\tsamples = objectsForAnalysisSubmission.stream()\n+\t\t\t\t\t.map(s -> ssoRepository.getSampleForSequencingObject(s)\n+\t\t\t\t\t\t\t.getSubject())\n+\t\t\t\t\t.collect(Collectors.toSet());\n+\t\t} catch (NullPointerException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MDM0MQ=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzYzMjcyOnYy", "diffSide": "LEFT", "path": "src/main/webapp/pages/templates/i18n/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozMTo1NFrOF6Ffkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNzo1MVrOF6abLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MTczMA==", "bodyText": "Why is this file removed?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396451730", "createdAt": "2020-03-23T13:31:54Z", "author": {"login": "tom114"}, "path": "src/main/webapp/pages/templates/i18n/README.md", "diffHunk": "@@ -1 +0,0 @@\n-Files in this directory are generated by the webpack plugin `i18nThymeleafWebpackPlugin.js` for the purpose of internationalization of JavaScript files.  Manual changes to these files **will not** be saved. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDY2OA==", "bodyText": "Looks like this was accidentally removed as there was a merge issue. Caught most of them but missed this. Readded in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396794668", "createdAt": "2020-03-23T22:27:51Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/templates/i18n/README.md", "diffHunk": "@@ -1 +0,0 @@\n-Files in this directory are generated by the webpack plugin `i18nThymeleafWebpackPlugin.js` for the purpose of internationalization of JavaScript files.  Manual changes to these files **will not** be saved. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1MTczMA=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc1NjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/analysis/components/Analysis.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMDoxNFrOF6GtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyODowMVrOF6abew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MTU5Mw==", "bodyText": "Comment this please", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396471593", "createdAt": "2020-03-23T14:00:14Z", "author": {"login": "tom114"}, "path": "src/main/webapp/resources/js/pages/analysis/components/Analysis.jsx", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * This file is responsible for displaying the\n+ * tabs required depending on the analysis state\n+ * and analysis type.\n+ */\n+\n+/*\n+ * The following import statements makes available all the elements\n+ *required by the components encompassed within\n+ */\n+\n+import React, { lazy, Suspense, useContext, useEffect, useState } from \"react\";\n+import { Menu } from \"antd\";\n+import { AnalysisContext } from \"../../../contexts/AnalysisContext\";\n+import { AnalysisOutputsProvider } from \"../../../contexts/AnalysisOutputsContext\";\n+import { AnalysisSteps } from \"./AnalysisSteps\";\n+import { PageWrapper } from \"../../../components/page/PageWrapper\";\n+\n+import { Link, Location, Router } from \"@reach/router\";\n+\n+import { Error } from \"../../../components/icons/Error\";\n+import { Running } from \"../../../components/icons/Running\";\n+import { Success } from \"../../../components/icons/Success\";\n+import { SPACE_MD } from \"../../../styles/spacing\";\n+import AnalysisError from \"./AnalysisError\";\n+import { ContentLoading } from \"../../../components/loader/ContentLoading\";\n+import { ANALYSIS } from \"../routes\";\n+import { getNewickTree } from \"../../../apis/analysis/analysis\";\n+\n+const AnalysisBioHansel = React.lazy(() => import(\"./AnalysisBioHansel\"));\n+const AnalysisPhylogeneticTree = React.lazy(() =>\n+  import(\"./AnalysisPhylogeneticTree\")\n+);\n+\n+const AnalysisSistr = React.lazy(() => import(\"./AnalysisSistr\"));\n+const AnalysisSettingsContainer = lazy(() =>\n+  import(\"./settings/AnalysisSettingsContainer\")\n+);\n+const AnalysisOutputFiles = lazy(() => import(\"./AnalysisOutputFiles\"));\n+const AnalysisProvenance = lazy(() => import(\"./AnalysisProvenance\"));\n+\n+export default function Analysis() {\n+  const { analysisContext } = useContext(AnalysisContext);\n+  const DEFAULT_URL = `/analysis/${analysisContext.analysis.identifier}`;\n+  const [treeDefault, setTreeDefault] = useState(null);\n+\n+  useEffect(() => {\n+    if((analysisType === \"PHYLOGENOMICS\" || analysisType === \"MLST_MENTALIST\") && analysisContext.isCompleted) {\n+      getNewickTree(analysisContext.analysis.identifier).then(data => {\n+        if (data.newick !== null) {\n+          setTreeDefault(true);\n+        } else {\n+          setTreeDefault(false);\n+        }\n+      });\n+    }\n+  }, []);\n+\n+  const title = (\n+    <>\n+      {analysisContext.analysisState === \"COMPLETED\" ? (\n+        <Success />\n+      ) : analysisContext.analysisState === \"ERROR\" ? (\n+        <Error />\n+      ) : (\n+        <Running />\n+      )}\n+      {analysisContext.analysisName}\n+    </>\n+  );\n+\n+  const analysisType = analysisContext.analysisType;\n+\n+  const pathRegx = new RegExp(/\\/analysis\\/[0-9]+\\/+([a-zA-Z_0-9]+)/);\n+\n+  const defaultKey = analysisContext.isCompleted\n+    ? analysisType === \"SISTR_TYPING\"\n+      ? ANALYSIS.SISTR\n+      : analysisType === \"BIO_HANSEL\"\n+      ? ANALYSIS.BIOHANSEL\n+      : ((analysisType === \"PHYLOGENOMICS\" || analysisType === \"MLST_MENTALIST\") && treeDefault)\n+      ? ANALYSIS.TREE\n+      : ANALYSIS.OUTPUT\n+    : analysisContext.isError\n+    ? ANALYSIS.ERROR\n+    : ANALYSIS.SETTINGS;\n+\n+  function getTabLinks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDc0Nw==", "bodyText": "Updated in 5fab46a", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396794747", "createdAt": "2020-03-23T22:28:01Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/analysis/components/Analysis.jsx", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * This file is responsible for displaying the\n+ * tabs required depending on the analysis state\n+ * and analysis type.\n+ */\n+\n+/*\n+ * The following import statements makes available all the elements\n+ *required by the components encompassed within\n+ */\n+\n+import React, { lazy, Suspense, useContext, useEffect, useState } from \"react\";\n+import { Menu } from \"antd\";\n+import { AnalysisContext } from \"../../../contexts/AnalysisContext\";\n+import { AnalysisOutputsProvider } from \"../../../contexts/AnalysisOutputsContext\";\n+import { AnalysisSteps } from \"./AnalysisSteps\";\n+import { PageWrapper } from \"../../../components/page/PageWrapper\";\n+\n+import { Link, Location, Router } from \"@reach/router\";\n+\n+import { Error } from \"../../../components/icons/Error\";\n+import { Running } from \"../../../components/icons/Running\";\n+import { Success } from \"../../../components/icons/Success\";\n+import { SPACE_MD } from \"../../../styles/spacing\";\n+import AnalysisError from \"./AnalysisError\";\n+import { ContentLoading } from \"../../../components/loader/ContentLoading\";\n+import { ANALYSIS } from \"../routes\";\n+import { getNewickTree } from \"../../../apis/analysis/analysis\";\n+\n+const AnalysisBioHansel = React.lazy(() => import(\"./AnalysisBioHansel\"));\n+const AnalysisPhylogeneticTree = React.lazy(() =>\n+  import(\"./AnalysisPhylogeneticTree\")\n+);\n+\n+const AnalysisSistr = React.lazy(() => import(\"./AnalysisSistr\"));\n+const AnalysisSettingsContainer = lazy(() =>\n+  import(\"./settings/AnalysisSettingsContainer\")\n+);\n+const AnalysisOutputFiles = lazy(() => import(\"./AnalysisOutputFiles\"));\n+const AnalysisProvenance = lazy(() => import(\"./AnalysisProvenance\"));\n+\n+export default function Analysis() {\n+  const { analysisContext } = useContext(AnalysisContext);\n+  const DEFAULT_URL = `/analysis/${analysisContext.analysis.identifier}`;\n+  const [treeDefault, setTreeDefault] = useState(null);\n+\n+  useEffect(() => {\n+    if((analysisType === \"PHYLOGENOMICS\" || analysisType === \"MLST_MENTALIST\") && analysisContext.isCompleted) {\n+      getNewickTree(analysisContext.analysis.identifier).then(data => {\n+        if (data.newick !== null) {\n+          setTreeDefault(true);\n+        } else {\n+          setTreeDefault(false);\n+        }\n+      });\n+    }\n+  }, []);\n+\n+  const title = (\n+    <>\n+      {analysisContext.analysisState === \"COMPLETED\" ? (\n+        <Success />\n+      ) : analysisContext.analysisState === \"ERROR\" ? (\n+        <Error />\n+      ) : (\n+        <Running />\n+      )}\n+      {analysisContext.analysisName}\n+    </>\n+  );\n+\n+  const analysisType = analysisContext.analysisType;\n+\n+  const pathRegx = new RegExp(/\\/analysis\\/[0-9]+\\/+([a-zA-Z_0-9]+)/);\n+\n+  const defaultKey = analysisContext.isCompleted\n+    ? analysisType === \"SISTR_TYPING\"\n+      ? ANALYSIS.SISTR\n+      : analysisType === \"BIO_HANSEL\"\n+      ? ANALYSIS.BIOHANSEL\n+      : ((analysisType === \"PHYLOGENOMICS\" || analysisType === \"MLST_MENTALIST\") && treeDefault)\n+      ? ANALYSIS.TREE\n+      : ANALYSIS.OUTPUT\n+    : analysisContext.isError\n+    ? ANALYSIS.ERROR\n+    : ANALYSIS.SETTINGS;\n+\n+  function getTabLinks() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MTU5Mw=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU5MTc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/analysis/AnalysisDetailsPageIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMzo0MFrOF6PJMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozMToyNlrOF6cBXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTg0Mg==", "bodyText": "Is there way to test this better? It looks like we just see that there are 10 analyses (when there are more on another page), delete one, and then see that there are still 10. Could we be looking at page 2 instead and then assert 4 and 3?", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396609842", "createdAt": "2020-03-23T17:03:40Z", "author": {"login": "JeffreyThiessen"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/analysis/AnalysisDetailsPageIT.java", "diffHunk": "@@ -3,64 +3,427 @@\n import java.io.IOException;\n import java.net.URISyntaxException;\n \n-import org.junit.Ignore;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.support.AnnotationConfigContextLoader;\n \n+import ca.corefacility.bioinformatics.irida.config.services.IridaApiServicesConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaWorkflowException;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.TestAnalysis;\n+import ca.corefacility.bioinformatics.irida.model.workflow.config.IridaWorkflowIdSet;\n+import ca.corefacility.bioinformatics.irida.model.workflow.config.IridaWorkflowSet;\n import ca.corefacility.bioinformatics.irida.ria.integration.AbstractIridaUIITChromeDriver;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.LoginPage;\n+import ca.corefacility.bioinformatics.irida.ria.integration.pages.analysis.AnalysesUserPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.analysis.AnalysisDetailsPage;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowLoaderService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n \n import com.github.springtestdbunit.annotation.DatabaseSetup;\n+import com.google.common.collect.Sets;\n \n import static junit.framework.TestCase.assertFalse;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n import static org.junit.Assert.assertTrue;\n \n+import ca.corefacility.bioinformatics.irida.ria.integration.utilities.FileUtilities;\n+\n+@ContextConfiguration(loader = AnnotationConfigContextLoader.class, classes = { IridaApiServicesConfig.class })\n+@ActiveProfiles(\"it\")\n @DatabaseSetup(\"/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAdminView.xml\")\n-@Ignore\n public class AnalysisDetailsPageIT extends AbstractIridaUIITChromeDriver {\n \tprivate static final Logger logger = LoggerFactory.getLogger(AnalysisDetailsPageIT.class);\n+\tprivate FileUtilities fileUtilities = new FileUtilities();\n+\n+\t@Autowired\n+\t@Qualifier(\"outputFileBaseDirectory\")\n+\tprivate Path outputFileBaseDirectory;\n+\n+\t@Autowired\n+\tprivate IridaWorkflowLoaderService iridaWorkflowLoaderService;\n+\n+\t@Before\n+\t// Tree file used by multiple tests\n+\tpublic void setFile() throws IOException {\n+\t\tfileUtilities.copyFileToDirectory(outputFileBaseDirectory, \"src/test/resources/files/snp_tree.tree\");\n+\t}\n+\n+\t@Test\n+\tpublic void testAnalysisDetails() {\n+\t\tLoginPage.loginAsManager(driver());\n+\t\tAnalysisDetailsPage page = AnalysisDetailsPage.initPage(driver(), 4L, \"settings/details\");\n+\t\tassertTrue(\"Page title should equal\", page.compareTabTitle(\"Details\"));\n+\t\tassertEquals(\"There should be 7 labels for analysis details\", 7, page.getNumberOfListItems());\n+\t\t// Analysis Description doesn't have a value\n+\t\tassertEquals(\"There should be only 6 values for these labels\", 6, page.getNumberOfListItemValues());\n+\n+\t\tString expectedAnalysisDetails[] = new String[] { \"My Completed Submission\", \"4\",\n+\t\t\t\t\"SNVPhyl Phylogenomics Pipeline (1.0.1)\", \"MEDIUM\", \"Oct 6, 2013 10:01 AM\", \"a few seconds\" };\n+\t\tassertTrue(\"The correct details are displayed for the analysis\",\n+\t\t\t\tpage.analysisDetailsEqual(expectedAnalysisDetails));\n+\t}\n+\n+\t@Test\n+\tpublic void testBioHanselOutput() throws IOException {\n+\t\tfileUtilities.copyFileToDirectory(outputFileBaseDirectory, \"src/test/resources/files/bio_hansel-results.json\");\n+\n+\t\tLoginPage.loginAsManager(driver());\n+\n+\t\tAnalysisDetailsPage page = AnalysisDetailsPage.initPage(driver(), 12L, \"\");\n+\t\tassertTrue(\"Page title should equal\", page.comparePageTitle(\"Bio Hansel Information\"));\n+\n+\t\tassertTrue(\"Has 5 list items for Bio Hansel Information\", page.expectedNumberOfListItemsEqualsActual(5));\n+\n+\t\tpage = AnalysisDetailsPage.initPage(driver(), 12L, \"output\");\n+\t\tassertTrue(\"Page title should equal\", page.comparePageTitle(\"Output File Preview\"));\n+\t\tassertEquals(\"There should be one output file\", 1, page.getNumberOfFilesDisplayed());\n+\t\tassertTrue(\"There should be exactly one download all files button\", page.downloadAllFilesButtonVisible());\n+\t\tassertTrue(\"There should be a download button for the file that is displayed\",\n+\t\t\t\tpage.downloadOutputFileButtonVisible());\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteAnalysis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMDgzMA==", "bodyText": "Updated in 6b29dcd", "url": "https://github.com/phac-nml/irida/pull/559#discussion_r396820830", "createdAt": "2020-03-23T23:31:26Z", "author": {"login": "deepsidhu85"}, "path": "src/test/java/ca/corefacility/bioinformatics/irida/ria/integration/analysis/AnalysisDetailsPageIT.java", "diffHunk": "@@ -3,64 +3,427 @@\n import java.io.IOException;\n import java.net.URISyntaxException;\n \n-import org.junit.Ignore;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.support.AnnotationConfigContextLoader;\n \n+import ca.corefacility.bioinformatics.irida.config.services.IridaApiServicesConfig;\n+import ca.corefacility.bioinformatics.irida.exceptions.IridaWorkflowException;\n+import ca.corefacility.bioinformatics.irida.model.workflow.IridaWorkflow;\n+import ca.corefacility.bioinformatics.irida.model.workflow.analysis.TestAnalysis;\n+import ca.corefacility.bioinformatics.irida.model.workflow.config.IridaWorkflowIdSet;\n+import ca.corefacility.bioinformatics.irida.model.workflow.config.IridaWorkflowSet;\n import ca.corefacility.bioinformatics.irida.ria.integration.AbstractIridaUIITChromeDriver;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.LoginPage;\n+import ca.corefacility.bioinformatics.irida.ria.integration.pages.analysis.AnalysesUserPage;\n import ca.corefacility.bioinformatics.irida.ria.integration.pages.analysis.AnalysisDetailsPage;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowLoaderService;\n+import ca.corefacility.bioinformatics.irida.service.workflow.IridaWorkflowsService;\n \n import com.github.springtestdbunit.annotation.DatabaseSetup;\n+import com.google.common.collect.Sets;\n \n import static junit.framework.TestCase.assertFalse;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n import static org.junit.Assert.assertTrue;\n \n+import ca.corefacility.bioinformatics.irida.ria.integration.utilities.FileUtilities;\n+\n+@ContextConfiguration(loader = AnnotationConfigContextLoader.class, classes = { IridaApiServicesConfig.class })\n+@ActiveProfiles(\"it\")\n @DatabaseSetup(\"/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAdminView.xml\")\n-@Ignore\n public class AnalysisDetailsPageIT extends AbstractIridaUIITChromeDriver {\n \tprivate static final Logger logger = LoggerFactory.getLogger(AnalysisDetailsPageIT.class);\n+\tprivate FileUtilities fileUtilities = new FileUtilities();\n+\n+\t@Autowired\n+\t@Qualifier(\"outputFileBaseDirectory\")\n+\tprivate Path outputFileBaseDirectory;\n+\n+\t@Autowired\n+\tprivate IridaWorkflowLoaderService iridaWorkflowLoaderService;\n+\n+\t@Before\n+\t// Tree file used by multiple tests\n+\tpublic void setFile() throws IOException {\n+\t\tfileUtilities.copyFileToDirectory(outputFileBaseDirectory, \"src/test/resources/files/snp_tree.tree\");\n+\t}\n+\n+\t@Test\n+\tpublic void testAnalysisDetails() {\n+\t\tLoginPage.loginAsManager(driver());\n+\t\tAnalysisDetailsPage page = AnalysisDetailsPage.initPage(driver(), 4L, \"settings/details\");\n+\t\tassertTrue(\"Page title should equal\", page.compareTabTitle(\"Details\"));\n+\t\tassertEquals(\"There should be 7 labels for analysis details\", 7, page.getNumberOfListItems());\n+\t\t// Analysis Description doesn't have a value\n+\t\tassertEquals(\"There should be only 6 values for these labels\", 6, page.getNumberOfListItemValues());\n+\n+\t\tString expectedAnalysisDetails[] = new String[] { \"My Completed Submission\", \"4\",\n+\t\t\t\t\"SNVPhyl Phylogenomics Pipeline (1.0.1)\", \"MEDIUM\", \"Oct 6, 2013 10:01 AM\", \"a few seconds\" };\n+\t\tassertTrue(\"The correct details are displayed for the analysis\",\n+\t\t\t\tpage.analysisDetailsEqual(expectedAnalysisDetails));\n+\t}\n+\n+\t@Test\n+\tpublic void testBioHanselOutput() throws IOException {\n+\t\tfileUtilities.copyFileToDirectory(outputFileBaseDirectory, \"src/test/resources/files/bio_hansel-results.json\");\n+\n+\t\tLoginPage.loginAsManager(driver());\n+\n+\t\tAnalysisDetailsPage page = AnalysisDetailsPage.initPage(driver(), 12L, \"\");\n+\t\tassertTrue(\"Page title should equal\", page.comparePageTitle(\"Bio Hansel Information\"));\n+\n+\t\tassertTrue(\"Has 5 list items for Bio Hansel Information\", page.expectedNumberOfListItemsEqualsActual(5));\n+\n+\t\tpage = AnalysisDetailsPage.initPage(driver(), 12L, \"output\");\n+\t\tassertTrue(\"Page title should equal\", page.comparePageTitle(\"Output File Preview\"));\n+\t\tassertEquals(\"There should be one output file\", 1, page.getNumberOfFilesDisplayed());\n+\t\tassertTrue(\"There should be exactly one download all files button\", page.downloadAllFilesButtonVisible());\n+\t\tassertTrue(\"There should be a download button for the file that is displayed\",\n+\t\t\t\tpage.downloadOutputFileButtonVisible());\n+\t}\n+\n+\t@Test\n+\tpublic void testDeleteAnalysis() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTg0Mg=="}, "originalCommit": {"oid": "56f6c54efc9df64e83b4f4ae1272cc9306840576"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 897, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}