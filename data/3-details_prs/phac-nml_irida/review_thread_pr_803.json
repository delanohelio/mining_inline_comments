{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDUyMDI5", "number": 803, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MDozOVrOEjs3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMDozM1rOEkmLuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcwNzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MDozOVrOHSNC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoxNVrOHSOI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDE1NQ==", "bodyText": "Comment", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850155", "createdAt": "2020-09-15T17:40:39Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODA1MQ==", "bodyText": "Added in bb34052", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488868051", "createdAt": "2020-09-15T18:12:15Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDE1NQ=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcxMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MToyMFrOHSNEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo0MTowN1rOHSxbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw==", "bodyText": "We should come up with a naming scheme for these, we have models, details, etc...", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850573", "createdAt": "2020-09-15T17:41:20Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+\n+public class RemoteProjectInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NTkyOA==", "bodyText": "Agreed", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488855928", "createdAt": "2020-09-15T17:50:31Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+\n+public class RemoteProjectInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NjMzMw==", "bodyText": "Let's go with *Settings as that's what this dto is and we can use this naming scheme going forward", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488876333", "createdAt": "2020-09-15T18:27:31Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+\n+public class RemoteProjectInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ0NjIzOA==", "bodyText": "Updated in d6e05c3", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489446238", "createdAt": "2020-09-16T13:41:07Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/projects/RemoteProjectInfo.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.projects;\n+\n+import java.util.Date;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+\n+public class RemoteProjectInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDU3Mw=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcxMTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MTozNFrOHSNFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjowM1rOHSOIXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDY5Mw==", "bodyText": "Comments", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850693", "createdAt": "2020-09-15T17:41:34Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +137,20 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\n+\t@RequestMapping(\"/remote-settings\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NzkzMg==", "bodyText": "Added in 68d3aca", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488867932", "createdAt": "2020-09-15T18:12:03Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +137,20 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\n+\t@RequestMapping(\"/remote-settings\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDY5Mw=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcxMjU0OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/entries.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MTo1OFrOHSNGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjoyM1rOHSOJEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDk0Nw==", "bodyText": "I don't think you even need to add the /index.js", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488850947", "createdAt": "2020-09-15T17:41:58Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/entries.js", "diffHunk": "@@ -42,8 +42,8 @@ module.exports = {\n   \"project-new\": \"./resources/js/pages/projects/projects-new.js\",\n   \"project-settings-basic\":\n     \"./resources/js/pages/projects/settings/project-settings-basic.js\",\n-  \"project-settings-remote\":\n-    \"./resources/js/pages/projects/settings/project-settings-remote.js\",\n+  \"project-remote\":\n+    \"./resources/js/pages/projects/remote/index.js\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODExNA==", "bodyText": "Removed in bb34052", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488868114", "createdAt": "2020-09-15T18:12:23Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/entries.js", "diffHunk": "@@ -42,8 +42,8 @@ module.exports = {\n   \"project-new\": \"./resources/js/pages/projects/projects-new.js\",\n   \"project-settings-basic\":\n     \"./resources/js/pages/projects/settings/project-settings-basic.js\",\n-  \"project-settings-remote\":\n-    \"./resources/js/pages/projects/settings/project-settings-remote.js\",\n+  \"project-remote\":\n+    \"./resources/js/pages/projects/remote/index.js\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MDk0Nw=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcxNDE5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MjoyNVrOHSNHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxMjozMVrOHSOJXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTIyOA==", "bodyText": "Do you need this, I think there is a global variable for this. \u00a0Check window.TL on the page.html template", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488851228", "createdAt": "2020-09-15T17:42:25Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjQwMQ==", "bodyText": "I will take a look", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488856401", "createdAt": "2020-09-15T17:51:19Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTIyOA=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODE4OA==", "bodyText": "Updated in bb34052", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488868188", "createdAt": "2020-09-15T18:12:31Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTIyOA=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODcxNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MzoxNlrOHSNJCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzowMTowN1rOHSvslA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTcyMQ==", "bodyText": "I have translation for these in my branch. \u00a0Why are you adding them to the page?", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488851721", "createdAt": "2020-09-15T17:43:16Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}\n+            };\n \n-            <button type=\"button\" class=\"oauth-connect-link btn btn-default hidden js-connect-btn\" id=\"connect-button\"\n-                    data-toggle=\"modal\" data-target=\"#remote-connect-wrapper\"\n-                    th:text=\"#{remoteapi.status.connect.button}\" data:api-id=\"${status.getApi().getId()}\">\n-                _Connect_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.frequency}\">_Sync\n-            Frequency_</label>\n-        <select id=\"frequency\" class=\"form-control input-full sync-setting\">\n-            <option th:each=\"freq : ${frequencies}\" th:value=\"${freq}\"\n-                    th:text=\"#{'project.settings.frequency.' + ${freq}}\"\n-                    th:selected=\"${project.getSyncFrequency() == freq}\"></option>\n-        </select>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.user}\">_Sync User_</label>\n-        <div>\n-            <a href=\"#\" th:text=\"${status.getReadBy().getLabel()}\"\n-               th:href=\"@{/users/{id}(id=${status.getReadBy().getId()})}\">_User</a>\n-            <span class=\"api-connected-action\" hidden=\"hidden\">\n-              <button id=\"becomeSyncUser\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                      th:text=\"#{project.settings.sync.becomeSyncUser}\">_Become owner_</button>\n-            </span>\n-        </div>\n+            window.translations = [{\n+                \"ProjectRemoteSettings.frequency.NEVER\": /*[[#{ProjectRemoteSettings.frequency.NEVER}]]*/ \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjYzMg==", "bodyText": "I had this part done before I saw that you had them in your branch :)", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488856632", "createdAt": "2020-09-15T17:51:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}\n+            };\n \n-            <button type=\"button\" class=\"oauth-connect-link btn btn-default hidden js-connect-btn\" id=\"connect-button\"\n-                    data-toggle=\"modal\" data-target=\"#remote-connect-wrapper\"\n-                    th:text=\"#{remoteapi.status.connect.button}\" data:api-id=\"${status.getApi().getId()}\">\n-                _Connect_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.frequency}\">_Sync\n-            Frequency_</label>\n-        <select id=\"frequency\" class=\"form-control input-full sync-setting\">\n-            <option th:each=\"freq : ${frequencies}\" th:value=\"${freq}\"\n-                    th:text=\"#{'project.settings.frequency.' + ${freq}}\"\n-                    th:selected=\"${project.getSyncFrequency() == freq}\"></option>\n-        </select>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.user}\">_Sync User_</label>\n-        <div>\n-            <a href=\"#\" th:text=\"${status.getReadBy().getLabel()}\"\n-               th:href=\"@{/users/{id}(id=${status.getReadBy().getId()})}\">_User</a>\n-            <span class=\"api-connected-action\" hidden=\"hidden\">\n-              <button id=\"becomeSyncUser\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                      th:text=\"#{project.settings.sync.becomeSyncUser}\">_Become owner_</button>\n-            </span>\n-        </div>\n+            window.translations = [{\n+                \"ProjectRemoteSettings.frequency.NEVER\": /*[[#{ProjectRemoteSettings.frequency.NEVER}]]*/ \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTcyMQ=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxNzg3Ng==", "bodyText": "Removed in de55c62", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489417876", "createdAt": "2020-09-16T13:01:07Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,35 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n         <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group connection-wrapper\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.api}\">_API_</label>\n-        <div>\n-            <a href=\"#\" th:href=\"@{/remote_api/{id}(id=${status.getApi().getId()})}\"\n-               th:text=\"${status.getApi().getLabel()}\">_api_</a>\n-            <span id=\"api-status\" class=\"api-status js-status-wrapper\">\n-                <i class=\"fa fa-spinner fa-spin\"></i>\n-            </span>\n+            window.PAGE = {\n+                _USER: /*[[${session.CURRENT_USER_DETAILS}]]*/ {}\n+            };\n \n-            <button type=\"button\" class=\"oauth-connect-link btn btn-default hidden js-connect-btn\" id=\"connect-button\"\n-                    data-toggle=\"modal\" data-target=\"#remote-connect-wrapper\"\n-                    th:text=\"#{remoteapi.status.connect.button}\" data:api-id=\"${status.getApi().getId()}\">\n-                _Connect_\n-            </button>\n-        </div>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.frequency}\">_Sync\n-            Frequency_</label>\n-        <select id=\"frequency\" class=\"form-control input-full sync-setting\">\n-            <option th:each=\"freq : ${frequencies}\" th:value=\"${freq}\"\n-                    th:text=\"#{'project.settings.frequency.' + ${freq}}\"\n-                    th:selected=\"${project.getSyncFrequency() == freq}\"></option>\n-        </select>\n-    </div>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" for=\"frequency\" th:text=\"#{project.settings.sync.user}\">_Sync User_</label>\n-        <div>\n-            <a href=\"#\" th:text=\"${status.getReadBy().getLabel()}\"\n-               th:href=\"@{/users/{id}(id=${status.getReadBy().getId()})}\">_User</a>\n-            <span class=\"api-connected-action\" hidden=\"hidden\">\n-              <button id=\"becomeSyncUser\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                      th:text=\"#{project.settings.sync.becomeSyncUser}\">_Become owner_</button>\n-            </span>\n-        </div>\n+            window.translations = [{\n+                \"ProjectRemoteSettings.frequency.NEVER\": /*[[#{ProjectRemoteSettings.frequency.NEVER}]]*/ \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTcyMQ=="}, "originalCommit": {"oid": "ce1fd0fb310580677d61cf5181f797dc265e52e1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgwNDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODowODoxMVrOHSOAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowMzo0OVrOHTCS9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NTg4Mg==", "bodyText": "Stop using redundant object attributes. \u00a0You only need { message } since message is defined", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488865882", "createdAt": "2020-09-15T18:08:11Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(res => {\n+      setRemoteProjectData(res.remoteProjectInfo);\n+    }).catch((message) => {\n+      notification.error({ message: message });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjYxNQ==", "bodyText": "Updated in 5bc543e", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722615", "createdAt": "2020-09-16T20:03:49Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(res => {\n+      setRemoteProjectData(res.remoteProjectInfo);\n+    }).catch((message) => {\n+      notification.error({ message: message });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NTg4Mg=="}, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgwNjcwOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODowODo1OFrOHSOB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowMzo0MVrOHTCSwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjI4NA==", "bodyText": "Destructure .then(( {remoteProjectInfo }) => ) ...", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488866284", "createdAt": "2020-09-15T18:08:58Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(res => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjU2Mg==", "bodyText": "Updated in 5bc543e", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722562", "createdAt": "2020-09-16T20:03:41Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(res => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjI4NA=="}, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgwODM1OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODowOToyN1rOHSOC-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowMzozM1rOHTCSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjU1Mw==", "bodyText": "Get the id from window.location.href", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r488866553", "createdAt": "2020-09-15T18:09:27Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjQ5NA==", "bodyText": "Updated in 5bc543e", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722494", "createdAt": "2020-09-16T20:03:33Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,116 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, notification, Select } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.project.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjU1Mw=="}, "originalCommit": {"oid": "68d3acaeba753d0395ebb82cf7b475f5af7d89c4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzAzMTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozNjozM1rOHS2zkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowMzoxN1rOHTCR9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA==", "bodyText": "I would update this to take an object instead of all these individual parameters.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489534354", "createdAt": "2020-09-16T15:36:33Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -64,23 +68,23 @@ public ProjectSettingsRemoteController(MessageSource messageSource, ProjectServi\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean forceSync,\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean changeUser, Principal principal,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDg1Ng==", "bodyText": "This is also an asynchronous response to you should create an ajax controller for this.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489534856", "createdAt": "2020-09-16T15:37:17Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -64,23 +68,23 @@ public ProjectSettingsRemoteController(MessageSource messageSource, ProjectServi\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean forceSync,\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean changeUser, Principal principal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA=="}, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjM1OA==", "bodyText": "Updated both in 5bc543e", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722358", "createdAt": "2020-09-16T20:03:17Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -64,23 +68,23 @@ public ProjectSettingsRemoteController(MessageSource messageSource, ProjectServi\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean forceSync,\n \t\t\t@RequestParam(required = false, defaultValue = \"false\") boolean changeUser, Principal principal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNDM1NA=="}, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzAzODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozODowOVrOHS23-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowMzoxMFrOHTCRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNTQ4MQ==", "bodyText": "Same here, this should be in an ajax controller", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489535481", "createdAt": "2020-09-16T15:38:09Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +136,27 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\t/**\n+\t * Gets the remote synchronization {@link Project} settings\n+\t *\n+\t * @param projectId the ID of the {@link Project} to read\n+\t * @return {@link RemoteProjectSettings} object which has the\n+\t * remote project synchronization settings\n+\t */\n+\t@RequestMapping(\"/remote-settings\")\n+\t@PreAuthorize(\"hasPermission(#projectId, 'canManageLocalProjectSettings')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjMxMA==", "bodyText": "Updated in 5bc543e", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722310", "createdAt": "2020-09-16T20:03:10Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteController.java", "diffHunk": "@@ -132,4 +136,27 @@ public String getProjectSettingsRemotePage(@PathVariable Long projectId, final M\n \t\tprojectControllerUtils.getProjectTemplateDetails(model, principal, project);\n \t\treturn \"projects/settings/pages/remote\";\n \t}\n+\n+\t/**\n+\t * Gets the remote synchronization {@link Project} settings\n+\t *\n+\t * @param projectId the ID of the {@link Project} to read\n+\t * @return {@link RemoteProjectSettings} object which has the\n+\t * remote project synchronization settings\n+\t */\n+\t@RequestMapping(\"/remote-settings\")\n+\t@PreAuthorize(\"hasPermission(#projectId, 'canManageLocalProjectSettings')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNTQ4MQ=="}, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzA0MjkzOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTozOTowOFrOHS260Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDowNDoxMlrOHTCTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjIwOQ==", "bodyText": "We should create a thymeleaf fragement that displays an internationalizaed loading component, before react takes over. \u00a0You don't need to do this here.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489536209", "createdAt": "2020-09-16T15:39:08Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,21 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n-        <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n+  </head>\n+  <body>\n+    <div id=\"project-remote-root\" layout:fragment=\"settings-content\" >\n+      <div th:text=\"#{ProjectRemote.loading}\">LOADING ...</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMjc5Nw==", "bodyText": "Good idea!", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489722797", "createdAt": "2020-09-16T20:04:12Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/pages/projects/settings/pages/remote.html", "diffHunk": "@@ -1,69 +1,21 @@\n <!DOCTYPE html>\n-<html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n-      data-layout-decorate=\"~{projects/settings/_base}\">\n-<head>\n-    <title th:text=\"#{project.settings.page.title.remote}\">Title</title>\n-        <script th:inline=\"javascript\">\n-        var PAGE = {\n-            urls: {\n-            'sync': /*[[@{/projects/{id}/settings/sync(id=${project.getId()})}]]*/ '/projects/1/settings/sync',\n-            }\n-        };\n-        </script>\n-</head>\n-<body>\n-<div layout:fragment=\"settings-content\" th:with=\"status = ${project.getRemoteStatus()}\">\n-    <h2 class=\"h2-muted\" th:text=\"#{project.settings.sync.heading}\"></h2>\n-    <div class=\"form-group\">\n-        <label class=\"control-label\" th:text=\"#{project.settings.sync.lastSync}\">_Last Sync_</label>\n-        <div>\n-            <span th:text=\"${#calendars.format(project.getRemoteStatus().getLastUpdate(), 'dd MMM yyyy hh:mma')}\"></span>\n-            <button id=\"forceSync\" role=\"button\" class=\"btn btn-default btn-sm\"\n-                    th:text=\"#{project.settings.sync.forceSync}\">_Force Sync_\n-            </button>\n-        </div>\n+<html\n+  lang=\"en\"\n+  xmlns:th=\"http://www.thymeleaf.org\"\n+  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n+  data-layout-decorate=\"~{projects/settings/_base}\"\n+>\n+  <head>\n+    <meta charset=\"UTF-8\" />\n+    <link rel=\"stylesheet\" href=\"/dist/css/project-remote.bundle.css\">\n+    <title th:text=\"#{ProjectRemoteSettings.title}\">Title</title>\n+  </head>\n+  <body>\n+    <div id=\"project-remote-root\" layout:fragment=\"settings-content\" >\n+      <div th:text=\"#{ProjectRemote.loading}\">LOADING ...</div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzNjIwOQ=="}, "originalCommit": {"oid": "12402016c95c022c3045f77f3884ff9f5a2844de"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDk2Mjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToxNjoxNFrOHTJ68A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1ODozN1rOHTjmBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzUzNg==", "bodyText": "Where's the UI service?  You are making this controller so messy.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489847536", "createdAt": "2020-09-17T01:16:14Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODE2Nw==", "bodyText": "Added in 3bd9372", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268167", "createdAt": "2020-09-17T13:58:37Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0NzUzNg=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDk2NDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToxNjo0MVrOHTJ8Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1ODo0NVrOHTjmfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0Nzg0Ng==", "bodyText": "You should return an object not a Map, This is where those AjaxSuccessResponse and AjaxErrorResponse come into play", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489847846", "createdAt": "2020-09-17T01:16:41Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODI4NQ==", "bodyText": "Updated in 3bd9372", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268285", "createdAt": "2020-09-17T13:58:45Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0Nzg0Ng=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDk3NTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToxOTozOVrOHTKDYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1ODo1MVrOHTjm2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0OTY5Ng==", "bodyText": "Preface message keys returned from the server with server. that way we can keep track of where they are being used.  I also usually add the name of the component it is being used in: server.MyComponent.userchange.error for example.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489849696", "createdAt": "2020-09-17T01:19:39Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODM3OA==", "bodyText": "Updated in 3bd9372", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268378", "createdAt": "2020-09-17T13:58:51Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg0OTY5Ng=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDk4MjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToyMTo0MVrOHTKINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzo1ODo1OFrOHTjnJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDkzNA==", "bodyText": "Also it would be better to return an ResponseEntitiy so you can return a bad status so your ui can handle it properly", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489850934", "createdAt": "2020-09-17T01:21:41Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",\n+\t\t\t\t\t\tnew Object[] {}, locale);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprojectService.updateProjectSettings(read, updates);\n+\n+\t\tMap<String, String> response;\n+\t\tif (error == null) {\n+\t\t\tresponse = ImmutableMap.of(\"result\", message);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2ODQ1Mg==", "bodyText": "Updated in 3bd9372", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490268452", "createdAt": "2020-09-17T13:58:58Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return result message if successful\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic Map<String, String> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest,\n+\t\t\tPrincipal principal,\n+\t\t\tLocale locale) {\n+\n+\t\tProject read = projectService.read(projectId);\n+\t\tRemoteStatus remoteStatus = read.getRemoteStatus();\n+\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\tString message = null;\n+\t\tString error = null;\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.frequencychange\", new Object[] {remoteProjectSettingsUpdateRequest.getProjectSyncFrequency()}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.marked.for.sync\", new Object[] {}, locale);\n+\t\t}\n+\n+\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t// ensure the user can read the project\n+\t\t\ttry {\n+\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\tmessage = messageSource.getMessage(\"project.settings.notifications.sync.userchange\", new Object[] {},\n+\t\t\t\t\t\tlocale);\n+\t\t\t} catch (Exception ex) {\n+\t\t\t\terror = messageSource.getMessage(\"project.settings.notifications.sync.userchange.error\",\n+\t\t\t\t\t\tnew Object[] {}, locale);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprojectService.updateProjectSettings(read, updates);\n+\n+\t\tMap<String, String> response;\n+\t\tif (error == null) {\n+\t\t\tresponse = ImmutableMap.of(\"result\", message);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1MDkzNA=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTAwMzYxOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToyNzoxNlrOHTKWVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMzozOFrOHThB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NDU1MQ==", "bodyText": "You only need the br tag here because you used a span above which is an inline element.  Make it a block element div is the most basic, but you could you semantically appropriate one like a heading or paragraph.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489854551", "createdAt": "2020-09-17T01:27:16Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNjE0Nw==", "bodyText": "Updated in 910177c", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490226147", "createdAt": "2020-09-17T13:03:38Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NDU1MQ=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTAwOTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToyODo1MlrOHTKahA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMzozMlrOHThBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NTYyMA==", "bodyText": "Redundant if forceSync is true than the if statement is truth.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489855620", "createdAt": "2020-09-17T01:28:52Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />\n+          { window.TL._USER.identifier !== remoteProjectData.syncUser.identifier ?\n+              <Button\n+                onClick={() => updateSyncSettings({ changeUser: true })}\n+                className=\"t-become-sync-user-btn\"\n+              >\n+                {i18n(\"ProjectRemoteSettings.becomeSyncUser\")}\n+              </Button>\n+            : null\n+          }\n+        </div>)\n+      }\n+    ];\n+\n+  // Used to update sync user, sync frequency, and force to sync now\n+  function updateSyncSettings({forceSync, changeUser, projectSyncFrequency}) {\n+    updateRemoteProjectSyncSettings(projectId, {forceSync, changeUser, projectSyncFrequency}).then(res => {\n+      notification.success({ message: res.result });\n+      if(forceSync === true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNjA4Mw==", "bodyText": "Updated in 910177c", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490226083", "createdAt": "2020-09-17T13:03:32Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />\n+          { window.TL._USER.identifier !== remoteProjectData.syncUser.identifier ?\n+              <Button\n+                onClick={() => updateSyncSettings({ changeUser: true })}\n+                className=\"t-become-sync-user-btn\"\n+              >\n+                {i18n(\"ProjectRemoteSettings.becomeSyncUser\")}\n+              </Button>\n+            : null\n+          }\n+        </div>)\n+      }\n+    ];\n+\n+  // Used to update sync user, sync frequency, and force to sync now\n+  function updateSyncSettings({forceSync, changeUser, projectSyncFrequency}) {\n+    updateRemoteProjectSyncSettings(projectId, {forceSync, changeUser, projectSyncFrequency}).then(res => {\n+      notification.success({ message: res.result });\n+      if(forceSync === true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NTYyMA=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTAxMTcyOnYy", "diffSide": "RIGHT", "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMToyOToyOFrOHTKcKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMzoyN1rOHThBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NjA0MQ==", "bodyText": "Can you use the ant design heading", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r489856041", "createdAt": "2020-09-17T01:29:28Z", "author": {"login": "joshsadam"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />\n+          { window.TL._USER.identifier !== remoteProjectData.syncUser.identifier ?\n+              <Button\n+                onClick={() => updateSyncSettings({ changeUser: true })}\n+                className=\"t-become-sync-user-btn\"\n+              >\n+                {i18n(\"ProjectRemoteSettings.becomeSyncUser\")}\n+              </Button>\n+            : null\n+          }\n+        </div>)\n+      }\n+    ];\n+\n+  // Used to update sync user, sync frequency, and force to sync now\n+  function updateSyncSettings({forceSync, changeUser, projectSyncFrequency}) {\n+    updateRemoteProjectSyncSettings(projectId, {forceSync, changeUser, projectSyncFrequency}).then(res => {\n+      notification.success({ message: res.result });\n+      if(forceSync === true) {\n+        setDisableSyncNow(true);\n+      }\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  return (\n+    <>\n+      <h1 className=\"t-main-heading\">{i18n(\"ProjectRemoteSettings.heading\")}</h1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNjAxNg==", "bodyText": "Updated in 910177c", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490226016", "createdAt": "2020-09-17T13:03:27Z", "author": {"login": "deepsidhu85"}, "path": "src/main/webapp/resources/js/pages/projects/remote/ProjectSynchronizationSettings.jsx", "diffHunk": "@@ -0,0 +1,113 @@\n+import React, { useEffect, useState } from \"react\";\n+import { Button, Form, notification } from \"antd\";\n+import { BasicList } from \"../../../components/lists\";\n+import { RemoteApiStatus } from \"../../admin/components/remote-connections/RemoteApiStatus\";\n+import {\n+  updateRemoteProjectSyncSettings,\n+  getRemoteProjectSyncSettings }\n+from \"../../../apis/projects/remote-projects\";\n+import { formatDate } from \"../../../utilities/date-utilities\";\n+import { SyncFrequencySelect } from \"../../../components/remote-api/SyncFrequencySelect\";\n+import { HelpPopover } from \"../../../components/popovers\";\n+\n+/**\n+ * React component for render the remote project sync settings.\n+ * @returns {*}\n+ * @constructor\n+ */\n+export function ProjectSynchronizationSettings() {\n+  const projectId = window.location.pathname.match(/projects\\/(\\d+)/)[1];\n+  const syncNowEnabledStates = [\"SYNCHRONIZED\", \"ERROR\"];\n+  const [remoteProjectData, setRemoteProjectData] = useState(null);\n+  const [disableSyncNow, setDisableSyncNow] = useState(false);\n+\n+  /*\n+  When this component is rendered, query the api for the specific settings\n+  for this remote project.\n+   */\n+  useEffect(() => {\n+    getRemoteProjectSyncSettings(projectId).then(remoteProjectSettings => {\n+      setRemoteProjectData(remoteProjectSettings);\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }, []);\n+\n+  const syncSettings = remoteProjectData === null ? [] : [\n+      {\n+        title: i18n(\"ProjectRemoteSettings.lastSync\"),\n+        desc: (<div>\n+          <span>{formatDate({ date: remoteProjectData.lastUpdate })}</span>\n+          <br />\n+          <Button type=\"primary\"\n+                  onClick={() => updateSyncSettings({ forceSync: true })}\n+                  disabled={(disableSyncNow ? true : false) ||\n+                            (syncNowEnabledStates.includes(remoteProjectData.remoteStatus.syncStatus) ? false : true)}\n+                  className=\"t-sync-now-btn\"\n+          >\n+            {i18n(\"ProjectRemoteSettings.syncNow\")}\n+          </Button>\n+        </div>)\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.remoteConnection\"),\n+        desc: (<span>{remoteProjectData.remoteAPI.label}<RemoteApiStatus\n+          key=\"status\"\n+          api={{ id: remoteProjectData.remoteAPI.identifier }}\n+        /></span>)\n+      },\n+      {\n+        title: <span>\n+                <span>{i18n(\"ProjectRemoteSettings.syncFrequency\")}</span>\n+                <HelpPopover\n+                  content={<div>{i18n(\"SyncFrequencySelect.frequency.help\")}</div>}\n+                />\n+               </span>,\n+        desc: (\n+          <Form initialValues={{\n+            frequency: remoteProjectData.projectSyncFrequencies.indexOf(remoteProjectData.projectSyncFrequency),\n+          }}>\n+            <SyncFrequencySelect\n+              onChange={(e) => updateSyncSettings({ projectSyncFrequency: remoteProjectData.projectSyncFrequencies[e] })}\n+              labelRequired={false}\n+            />\n+          </Form>\n+        )\n+      },\n+      {\n+        title: i18n(\"ProjectRemoteSettings.syncUser\"),\n+        desc: (<div>\n+          <span>{remoteProjectData.syncUser.label}</span>\n+          <br />\n+          { window.TL._USER.identifier !== remoteProjectData.syncUser.identifier ?\n+              <Button\n+                onClick={() => updateSyncSettings({ changeUser: true })}\n+                className=\"t-become-sync-user-btn\"\n+              >\n+                {i18n(\"ProjectRemoteSettings.becomeSyncUser\")}\n+              </Button>\n+            : null\n+          }\n+        </div>)\n+      }\n+    ];\n+\n+  // Used to update sync user, sync frequency, and force to sync now\n+  function updateSyncSettings({forceSync, changeUser, projectSyncFrequency}) {\n+    updateRemoteProjectSyncSettings(projectId, {forceSync, changeUser, projectSyncFrequency}).then(res => {\n+      notification.success({ message: res.result });\n+      if(forceSync === true) {\n+        setDisableSyncNow(true);\n+      }\n+    }).catch((message) => {\n+      notification.error({ message });\n+    });\n+  }\n+\n+  return (\n+    <>\n+      <h1 className=\"t-main-heading\">{i18n(\"ProjectRemoteSettings.heading\")}</h1>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg1NjA0MQ=="}, "originalCommit": {"oid": "cb49da0eb457ff518d28cbb65a89cbef087821f5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzcxMzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxUpdateItemSuccessResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjo1NVrOHTkgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxOTozOVrOHTkovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzEzNA==", "bodyText": "JavaDoc", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490283134", "createdAt": "2020-09-17T14:16:55Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxUpdateItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+public class AjaxUpdateItemSuccessResponse extends AjaxResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTI0NA==", "bodyText": "Updated in a7b64f1", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490285244", "createdAt": "2020-09-17T14:19:39Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxUpdateItemSuccessResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+public class AjaxUpdateItemSuccessResponse extends AjaxResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MzEzNA=="}, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzczMDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyMDozOFrOHTkrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowOTo1MVrOHTnWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTk2NQ==", "bodyText": "You should handle this a little differently. \u00a0Have your service throw an error catch it here and then create your responses. \u00a0The reason is that if it fails you can return an HttpStatus. error code.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490285965", "createdAt": "2020-09-17T14:20:38Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Locale;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteProjectService;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate UIRemoteProjectService uiRemoteProjectService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(UIRemoteProjectService uiRemoteProjectService) {\n+\t\tthis.uiRemoteProjectService = uiRemoteProjectService;\n+\t}\n+\n+\t/**\n+\t * Update the remote project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return AjaxResponse if error return AjaxErrorResponse otherwise return AjaxUpdateItemSuccessResponse\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic ResponseEntity<AjaxResponse> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyOTc0OA==", "bodyText": "Updated in dc6a734", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490329748", "createdAt": "2020-09-17T15:09:51Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/projects/settings/ProjectSettingsRemoteAjaxController.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.projects.settings;\n+\n+import java.security.Principal;\n+import java.util.Locale;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.*;\n+\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.services.UIRemoteProjectService;\n+\n+/**\n+ * Controller for managing settings for a remotely sync'd project\n+ * asynchronously\n+ */\n+@RestController\n+@RequestMapping(\"/ajax/remote-projects/{projectId}/settings\")\n+public class ProjectSettingsRemoteAjaxController {\n+\tprivate UIRemoteProjectService uiRemoteProjectService;\n+\n+\t@Autowired\n+\tpublic ProjectSettingsRemoteAjaxController(UIRemoteProjectService uiRemoteProjectService) {\n+\t\tthis.uiRemoteProjectService = uiRemoteProjectService;\n+\t}\n+\n+\t/**\n+\t * Update the remote project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return AjaxResponse if error return AjaxErrorResponse otherwise return AjaxUpdateItemSuccessResponse\n+\t */\n+\t@PostMapping(value = \"/sync\")\n+\tpublic ResponseEntity<AjaxResponse> updateProjectSyncSettings(@PathVariable Long projectId,\n+\t\t\t@RequestBody RemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NTk2NQ=="}, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc2MjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNjo1N1rOHTk_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTowOTo0M1rOHTnWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDk2Mg==", "bodyText": "Use !Strings.isNullOrEmpty(error) for these checks", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490290962", "createdAt": "2020-09-17T14:26:57Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprojectService.updateProjectSettings(project, updates);\n+\n+\t\t\tif (error != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyOTY2OA==", "bodyText": "Removed in dc6a734 as we are catching the exception in the controller and throws the exception and returns the message", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490329668", "createdAt": "2020-09-17T15:09:43Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprojectService.updateProjectSettings(project, updates);\n+\n+\t\t\tif (error != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDk2Mg=="}, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc2NzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyODoxNFrOHTlCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDoxN1rOHTnX6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTkxMA==", "bodyText": "This is what you could catch on your controller and return a bad http status", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490291910", "createdAt": "2020-09-17T14:28:14Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDA5MA==", "bodyText": "Updated in dc6a734", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490330090", "createdAt": "2020-09-17T15:10:17Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+\n+\t\tif (project != null) {\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\n+\t\t\tString message = null;\n+\t\t\tString error = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\terror = messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTkxMA=="}, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc3NDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyOTo0M1rOHTlHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyOTo0M1rOHTlHNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MzA0Ng==", "bodyText": "Does searching for an invalid project not though an EntityNotFounException?", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490293046", "createdAt": "2020-09-17T14:29:43Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxErrorResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxResponse;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax.AjaxUpdateItemSuccessResponse;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link AjaxResponse}\n+\t */\n+\tpublic AjaxResponse updateProjectSyncSettings(Long projectId,\n+\t\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) {\n+\t\tProject project = projectService.read(projectId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd93720a5eb17ec1c86cc4c22cfa47f30d13312"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA5Nzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMDozM1rOHToSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMDozM1rOHToSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NTEwOQ==", "bodyText": "That's a pretty generic catch, but I guess it works.", "url": "https://github.com/phac-nml/irida/pull/803#discussion_r490345109", "createdAt": "2020-09-17T15:30:33Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIRemoteProjectService.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.services;\n+\n+import java.security.Principal;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Component;\n+\n+import ca.corefacility.bioinformatics.irida.model.RemoteAPI;\n+import ca.corefacility.bioinformatics.irida.model.project.Project;\n+import ca.corefacility.bioinformatics.irida.model.project.ProjectSyncFrequency;\n+import ca.corefacility.bioinformatics.irida.model.remote.RemoteStatus;\n+import ca.corefacility.bioinformatics.irida.model.user.User;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettings;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.RemoteProjectSettingsUpdateRequest;\n+import ca.corefacility.bioinformatics.irida.service.ProjectService;\n+import ca.corefacility.bioinformatics.irida.service.remote.ProjectRemoteService;\n+import ca.corefacility.bioinformatics.irida.service.user.UserService;\n+\n+\n+/**\n+ * A utility class for doing operations on remote project sync settings.\n+ */\n+\n+@Component\n+public class UIRemoteProjectService {\n+\tprivate MessageSource messageSource;\n+\tprivate ProjectService projectService;\n+\tprivate ProjectRemoteService projectRemoteService;\n+\tprivate UserService userService;\n+\n+\t@Autowired\n+\tpublic UIRemoteProjectService(MessageSource messageSource, ProjectService projectService,\n+\t\t\tProjectRemoteService projectRemoteService, UserService userService) {\n+\t\tthis.messageSource = messageSource;\n+\t\tthis.projectService = projectService;\n+\t\tthis.projectRemoteService = projectRemoteService;\n+\t\tthis.userService = userService;\n+\t}\n+\n+\t/**\n+\t * Update the project sync settings\n+\t *\n+\t * @param projectId                          the project id to update\n+\t * @param remoteProjectSettingsUpdateRequest object which\n+\t *                                           is used to update frequency, and sync user, as well as\n+\t *                                           force sync for a project\n+\t * @param principal                          The current logged in user\n+\t * @param locale                             user's locale\n+\t * @return {@link String}\n+\t * @throws {@link Exception}\n+\t */\n+\tpublic String updateProjectSyncSettings(Long projectId,\n+\t\tRemoteProjectSettingsUpdateRequest remoteProjectSettingsUpdateRequest, Principal principal, Locale locale) throws Exception {\n+\n+\t\ttry {\n+\t\t\tProject project = projectService.read(projectId);\n+\t\t\tRemoteStatus remoteStatus = project.getRemoteStatus();\n+\t\t\tMap<String, Object> updates = new HashMap<>();\n+\t\t\tString message = null;\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() != null) {\n+\t\t\t\tupdates.put(\"syncFrequency\", remoteProjectSettingsUpdateRequest.getProjectSyncFrequency());\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.frequency.change\",\n+\t\t\t\t\t\tnew Object[] { remoteProjectSettingsUpdateRequest.getProjectSyncFrequency() }, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getForceSync()) {\n+\t\t\t\tremoteStatus.setSyncStatus(RemoteStatus.SyncStatus.MARKED);\n+\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.marked.for.sync\", new Object[] {}, locale);\n+\t\t\t}\n+\n+\t\t\tif (remoteProjectSettingsUpdateRequest.getChangeUser()) {\n+\t\t\t\t// ensure the user can read the project\n+\t\t\t\ttry {\n+\t\t\t\t\tprojectRemoteService.read(remoteStatus.getURL());\n+\n+\t\t\t\t\tUser user = userService.getUserByUsername(principal.getName());\n+\t\t\t\t\tremoteStatus.setReadBy(user);\n+\t\t\t\t\tupdates.put(\"remoteStatus\", remoteStatus);\n+\n+\t\t\t\t\tmessage = messageSource.getMessage(\"server.ProjectRemote.userchange\", new Object[] {}, locale);\n+\t\t\t\t} catch (Exception ex) {\n+\t\t\t\t\tthrow new Exception(messageSource.getMessage(\"server.ProjectRemote.userchange.error\", new Object[] {}, locale));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprojectService.updateProjectSettings(project, updates);\n+\n+\t\t\treturn message;\n+\n+\t\t} catch(Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc6a7340bb060bcf798d856d3e29b7da3fff9389"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 737, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}