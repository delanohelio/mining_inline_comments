{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODM2MjM2", "number": 784, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyMzo1MVrOEcoJHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDowNzowMFrOEdPR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDUzMjc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/ClientsAjaxController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyMzo1MVrOHHRY4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMTozNVrOHHT1DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4Njk3Nw==", "bodyText": "I think this should be catching a different type of exception. I think a NoSuchClientException would be more appropriate as that is what us actually thrown in the IridaClientDetailsServiceImpl.java > loadClientByClientId method. This method signature will also need to be updated to include throws NoSuchClientException. What do you think?", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477386977", "createdAt": "2020-08-26T15:23:51Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/ClientsAjaxController.java", "diffHunk": "@@ -37,4 +46,52 @@ public ClientsAjaxController(UIClientService service) {\n \t\treturn ResponseEntity.ok(service.getClientList(request));\n \t}\n \n+\t/**\n+\t * Revoke all tokens for a client given its identifier\n+\t *\n+\t * @param id Identifier for a specific client\n+\t */\n+\t@DeleteMapping(\"/revoke\")\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+\tpublic void deleteClientTokens(@RequestParam Long id) {\n+\t\tservice.deleteClientTokens(id);\n+\t}\n+\n+\t/**\n+\t * Check to see if the client identifier that a user wants to use for a new client is not already used\n+\t *\n+\t * @param clientId Name to check if exists\n+\t * @param locale   Users current locale\n+\t * @return Http response indicating if the client id is valid.\n+\t */\n+\t@RequestMapping(\"/validate\")\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+\tpublic ResponseEntity<String> validateClientName(@RequestParam String clientId, Locale locale) {\n+\t\ttry {\n+\t\t\tservice.validateClientId(clientId);\n+\t\t\treturn ResponseEntity.status(HttpStatus.CONFLICT)\n+\t\t\t\t\t.body(messageSource.getMessage(\"server.AddClientForm.error\", new Object[] { clientId }, locale));\n+\t\t} catch (ClientRegistrationException e) {\n+\t\t\treturn ResponseEntity.ok(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNjk1Nw==", "bodyText": "Makes sense to me, updated in d643207", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477426957", "createdAt": "2020-08-26T16:21:35Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/ClientsAjaxController.java", "diffHunk": "@@ -37,4 +46,52 @@ public ClientsAjaxController(UIClientService service) {\n \t\treturn ResponseEntity.ok(service.getClientList(request));\n \t}\n \n+\t/**\n+\t * Revoke all tokens for a client given its identifier\n+\t *\n+\t * @param id Identifier for a specific client\n+\t */\n+\t@DeleteMapping(\"/revoke\")\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+\tpublic void deleteClientTokens(@RequestParam Long id) {\n+\t\tservice.deleteClientTokens(id);\n+\t}\n+\n+\t/**\n+\t * Check to see if the client identifier that a user wants to use for a new client is not already used\n+\t *\n+\t * @param clientId Name to check if exists\n+\t * @param locale   Users current locale\n+\t * @return Http response indicating if the client id is valid.\n+\t */\n+\t@RequestMapping(\"/validate\")\n+\t@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+\tpublic ResponseEntity<String> validateClientName(@RequestParam String clientId, Locale locale) {\n+\t\ttry {\n+\t\t\tservice.validateClientId(clientId);\n+\t\t\treturn ResponseEntity.status(HttpStatus.CONFLICT)\n+\t\t\t\t\t.body(messageSource.getMessage(\"server.AddClientForm.error\", new Object[] { clientId }, locale));\n+\t\t} catch (ClientRegistrationException e) {\n+\t\t\treturn ResponseEntity.ok(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4Njk3Nw=="}, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDU5Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxCreateItemResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozNzo0NVrOHHSAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMjoyOFrOHHT3Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzExOQ==", "bodyText": "Typo and should be an", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477397119", "createdAt": "2020-08-26T15:37:45Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxCreateItemResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * UI Response for successfully creating an item.  Since all items in IRIDA require and id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzQ5OA==", "bodyText": "Fixed in 14a6fee", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477427498", "createdAt": "2020-08-26T16:22:28Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxCreateItemResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * UI Response for successfully creating an item.  Since all items in IRIDA require and id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzExOQ=="}, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDYwMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxErrorResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozODozMFrOHHSCpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMjo1OVrOHHT4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzY2OQ==", "bodyText": "there instead of their", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477397669", "createdAt": "2020-08-26T15:38:30Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxErrorResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * Response returned if their is an error creating a new item in IRIDA.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzgxOA==", "bodyText": "Fixed in 4085773", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477427818", "createdAt": "2020-08-26T16:22:59Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/ajax/AjaxErrorResponse.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ajax;\n+\n+/**\n+ * Response returned if their is an error creating a new item in IRIDA.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5NzY2OQ=="}, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDYwMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/clients/CreateClientRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTozOToxMVrOHHSEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMzozM1rOHHT5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5ODE1MA==", "bodyText": "be should be by", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477398150", "createdAt": "2020-08-26T15:39:11Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/clients/CreateClientRequest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients;\n+\n+/**\n+ * Used be the UI to send details for a new client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyODE2OA==", "bodyText": "Fixed in 369293f", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477428168", "createdAt": "2020-08-26T16:23:33Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/clients/CreateClientRequest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients;\n+\n+/**\n+ * Used be the UI to send details for a new client.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5ODE1MA=="}, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDYxMzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNTo0MToxNFrOHHSKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyODozOVrOHHUFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5OTY5OQ==", "bodyText": "As noted above. If it is updated to throw a NoSuchClientException then this method signature will also need to be updated", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477399699", "createdAt": "2020-08-26T15:41:14Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIClientService.java", "diffHunk": "@@ -1,48 +1,136 @@\n package ca.corefacility.bioinformatics.irida.ria.web.services;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityExistsException;\n+import ca.corefacility.bioinformatics.irida.model.IridaClientDetails;\n+import ca.corefacility.bioinformatics.irida.repositories.specification.IridaClientDetailsSpecification;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.ClientTableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.ClientTableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.CreateClientRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.service.IridaClientDetailsService;\n+import com.google.common.collect.Sets;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.security.oauth2.provider.ClientRegistrationException;\n import org.springframework.stereotype.Component;\n \n-import ca.corefacility.bioinformatics.irida.model.IridaClientDetails;\n-import ca.corefacility.bioinformatics.irida.repositories.specification.IridaClientDetailsSpecification;\n-import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ClientTableModel;\n-import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ClientTableRequest;\n-import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n-import ca.corefacility.bioinformatics.irida.service.IridaClientDetailsService;\n+import javax.validation.ConstraintViolationException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * UI Service to handle IRIDA Clients\n  */\n @Component\n public class UIClientService {\n-\tprivate final IridaClientDetailsService clientDetailsService;\n-\n-\tpublic UIClientService(IridaClientDetailsService clientDetailsService) {\n-\t\tthis.clientDetailsService = clientDetailsService;\n-\t}\n-\n-\t/**\n-\t * Get a listing of clients based on the table request.\n-\t *\n-\t * @param tableRequest Information about the sort and page of the table.\n-\t * @return Current status of the table\n-\t */\n-\tpublic TableResponse<ClientTableModel> getClientList(ClientTableRequest tableRequest) {\n-\t\tSpecification<IridaClientDetails> specification = IridaClientDetailsSpecification.searchClient(\n-\t\t\t\ttableRequest.getSearch());\n-\n-\t\tPage<IridaClientDetails> page = clientDetailsService.search(specification,\n-\t\t\t\tPageRequest.of(tableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort()));\n-\t\tList<ClientTableModel> models = page.getContent()\n-\t\t\t\t.stream()\n-\t\t\t\t.map(client -> new ClientTableModel(client, clientDetailsService.countActiveTokensForClient(client)))\n-\t\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn new TableResponse<>(models, page.getTotalElements());\n-\t}\n+    private final IridaClientDetailsService clientDetailsService;\n+\n+    public UIClientService(IridaClientDetailsService clientDetailsService) {\n+        this.clientDetailsService = clientDetailsService;\n+    }\n+\n+    /**\n+     * Get a listing of clients based on the table request.\n+     *\n+     * @param tableRequest Information about the sort and page of the table.\n+     * @return Current status of the table\n+     */\n+    public TableResponse<ClientTableModel> getClientList(ClientTableRequest tableRequest) {\n+        Specification<IridaClientDetails> specification = IridaClientDetailsSpecification.searchClient(\n+                tableRequest.getSearch());\n+\n+        Page<IridaClientDetails> page = clientDetailsService.search(specification,\n+                PageRequest.of(tableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort()));\n+        List<ClientTableModel> models = page.getContent()\n+                .stream()\n+                .map(client -> new ClientTableModel(client, clientDetailsService.countActiveTokensForClient(client)))\n+                .collect(Collectors.toList());\n+\n+        return new TableResponse<>(models, page.getTotalElements());\n+    }\n+\n+    /**\n+     * Revoke all tokens for a specific client\n+     *\n+     * @param id Identifier for a client\n+     */\n+    public void deleteClientTokens(Long id) {\n+        IridaClientDetails details = clientDetailsService.read(id);\n+        clientDetailsService.revokeTokensForClient(details);\n+    }\n+\n+    /**\n+     * Validate a client identifier for a new client\n+     *\n+     * @param clientId Identifier to check to see if it exists\n+     * @throws ClientRegistrationException thrown if a client does not exist with the given client id.\n+     */\n+    public void validateClientId(String clientId) throws ClientRegistrationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMTIyOQ==", "bodyText": "Updated in ecc4624", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r477431229", "createdAt": "2020-08-26T16:28:39Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIClientService.java", "diffHunk": "@@ -1,48 +1,136 @@\n package ca.corefacility.bioinformatics.irida.ria.web.services;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n+import ca.corefacility.bioinformatics.irida.exceptions.EntityExistsException;\n+import ca.corefacility.bioinformatics.irida.model.IridaClientDetails;\n+import ca.corefacility.bioinformatics.irida.repositories.specification.IridaClientDetailsSpecification;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.ClientTableModel;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.ClientTableRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.clients.CreateClientRequest;\n+import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n+import ca.corefacility.bioinformatics.irida.service.IridaClientDetailsService;\n+import com.google.common.collect.Sets;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.security.oauth2.provider.ClientRegistrationException;\n import org.springframework.stereotype.Component;\n \n-import ca.corefacility.bioinformatics.irida.model.IridaClientDetails;\n-import ca.corefacility.bioinformatics.irida.repositories.specification.IridaClientDetailsSpecification;\n-import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ClientTableModel;\n-import ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.ClientTableRequest;\n-import ca.corefacility.bioinformatics.irida.ria.web.models.tables.TableResponse;\n-import ca.corefacility.bioinformatics.irida.service.IridaClientDetailsService;\n+import javax.validation.ConstraintViolationException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * UI Service to handle IRIDA Clients\n  */\n @Component\n public class UIClientService {\n-\tprivate final IridaClientDetailsService clientDetailsService;\n-\n-\tpublic UIClientService(IridaClientDetailsService clientDetailsService) {\n-\t\tthis.clientDetailsService = clientDetailsService;\n-\t}\n-\n-\t/**\n-\t * Get a listing of clients based on the table request.\n-\t *\n-\t * @param tableRequest Information about the sort and page of the table.\n-\t * @return Current status of the table\n-\t */\n-\tpublic TableResponse<ClientTableModel> getClientList(ClientTableRequest tableRequest) {\n-\t\tSpecification<IridaClientDetails> specification = IridaClientDetailsSpecification.searchClient(\n-\t\t\t\ttableRequest.getSearch());\n-\n-\t\tPage<IridaClientDetails> page = clientDetailsService.search(specification,\n-\t\t\t\tPageRequest.of(tableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort()));\n-\t\tList<ClientTableModel> models = page.getContent()\n-\t\t\t\t.stream()\n-\t\t\t\t.map(client -> new ClientTableModel(client, clientDetailsService.countActiveTokensForClient(client)))\n-\t\t\t\t.collect(Collectors.toList());\n-\n-\t\treturn new TableResponse<>(models, page.getTotalElements());\n-\t}\n+    private final IridaClientDetailsService clientDetailsService;\n+\n+    public UIClientService(IridaClientDetailsService clientDetailsService) {\n+        this.clientDetailsService = clientDetailsService;\n+    }\n+\n+    /**\n+     * Get a listing of clients based on the table request.\n+     *\n+     * @param tableRequest Information about the sort and page of the table.\n+     * @return Current status of the table\n+     */\n+    public TableResponse<ClientTableModel> getClientList(ClientTableRequest tableRequest) {\n+        Specification<IridaClientDetails> specification = IridaClientDetailsSpecification.searchClient(\n+                tableRequest.getSearch());\n+\n+        Page<IridaClientDetails> page = clientDetailsService.search(specification,\n+                PageRequest.of(tableRequest.getCurrent(), tableRequest.getPageSize(), tableRequest.getSort()));\n+        List<ClientTableModel> models = page.getContent()\n+                .stream()\n+                .map(client -> new ClientTableModel(client, clientDetailsService.countActiveTokensForClient(client)))\n+                .collect(Collectors.toList());\n+\n+        return new TableResponse<>(models, page.getTotalElements());\n+    }\n+\n+    /**\n+     * Revoke all tokens for a specific client\n+     *\n+     * @param id Identifier for a client\n+     */\n+    public void deleteClientTokens(Long id) {\n+        IridaClientDetails details = clientDetailsService.read(id);\n+        clientDetailsService.revokeTokensForClient(details);\n+    }\n+\n+    /**\n+     * Validate a client identifier for a new client\n+     *\n+     * @param clientId Identifier to check to see if it exists\n+     * @throws ClientRegistrationException thrown if a client does not exist with the given client id.\n+     */\n+    public void validateClientId(String clientId) throws ClientRegistrationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM5OTY5OQ=="}, "originalCommit": {"oid": "e7c09fcd06f28605b5ffbf41f0172c47948f8d46"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDkzODA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIClientService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDowNTozMVrOHIR-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDowNTozMVrOHIR-lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NTIwNg==", "bodyText": "Typo in client", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r478445206", "createdAt": "2020-08-27T14:05:31Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIClientService.java", "diffHunk": "@@ -96,7 +95,7 @@ public Long createClient(CreateClientRequest request) throws EntityExistsExcepti\n         client.setClientId(request.getClientId());\n         client.setAccessTokenValiditySeconds(request.getTokenValidity());\n \n-        // Let's set up the scopes for this client\n+        // Let's set up the scopes for this cliente", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4eb651a455987b5537f67024952c7909706903"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDk0NDk5OnYy", "diffSide": "LEFT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/IridaClientDetailsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDowNzowMFrOHISC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoxNzowNlrOHISf1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NjMyNA==", "bodyText": "Why was \"public\" removed from the method signatures?", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r478446324", "createdAt": "2020-08-27T14:07:00Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/IridaClientDetailsService.java", "diffHunk": "@@ -16,7 +16,7 @@\n \t/**\n \t * {@inheritDoc}\n \t */\n-\tpublic ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e4eb651a455987b5537f67024952c7909706903"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1MTE5Ng==", "bodyText": "Because Intellij on my Mac does crazy things.", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r478451196", "createdAt": "2020-08-27T14:13:38Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/IridaClientDetailsService.java", "diffHunk": "@@ -16,7 +16,7 @@\n \t/**\n \t * {@inheritDoc}\n \t */\n-\tpublic ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NjMyNA=="}, "originalCommit": {"oid": "2e4eb651a455987b5537f67024952c7909706903"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1MzcxNw==", "bodyText": "Fixed", "url": "https://github.com/phac-nml/irida/pull/784#discussion_r478453717", "createdAt": "2020-08-27T14:17:06Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/service/IridaClientDetailsService.java", "diffHunk": "@@ -16,7 +16,7 @@\n \t/**\n \t * {@inheritDoc}\n \t */\n-\tpublic ClientDetails loadClientByClientId(String clientId) throws ClientRegistrationException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NjMyNA=="}, "originalCommit": {"oid": "2e4eb651a455987b5537f67024952c7909706903"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 708, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}