{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODg0OTU2", "number": 849, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozOTo1NFrOFLCrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyMToyMFrOFMmmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIyNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozOTo1NFrOIOAUxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOToxMTozMFrOIPS_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjI5Mg==", "bodyText": "An issue I can see with this is if the HTML file is really big.  I've seen some tools which may (for example) dump a pile of data in a javascript object for displaying a result on a page.  In a case like this loading everything into a string in memory could cause a problem.\nAlternative: can we stream this output directly as a response?  I think you can do something like that but I can't find an example in our existing codebase.  I know you can get a handle on the request & response objects in the controllers and write to them similar to what we do in FastqView.  Can you check if that's possible for these purposes as well?", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r551556292", "createdAt": "2021-01-04T20:39:54Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +162,47 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param model        {@link Model}\n+\t * @param locale       User's locale\n+\t * @return {@link String} path to the page template.\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic String getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tModel model, Locale locale) {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\t\tString htmlOutput = \"\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\thtmlOutput = FileUtils.readFileToString(outputFile.getFile()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b33f973411760eb43ead9ad69b6fe10e0eb6a6bf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2NDY3NQ==", "bodyText": "I can for sure take a look into if we can do that! Thanks :)", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r551564675", "createdAt": "2021-01-04T20:57:38Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +162,47 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param model        {@link Model}\n+\t * @param locale       User's locale\n+\t * @return {@link String} path to the page template.\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic String getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tModel model, Locale locale) {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\t\tString htmlOutput = \"\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\thtmlOutput = FileUtils.readFileToString(outputFile.getFile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjI5Mg=="}, "originalCommit": {"oid": "b33f973411760eb43ead9ad69b6fe10e0eb6a6bf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDY2Mw==", "bodyText": "Updated in f9123a1", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r552910663", "createdAt": "2021-01-06T19:11:30Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +162,47 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param model        {@link Model}\n+\t * @param locale       User's locale\n+\t * @return {@link String} path to the page template.\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic String getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tModel model, Locale locale) {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\t\tString htmlOutput = \"\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\thtmlOutput = FileUtils.readFileToString(outputFile.getFile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjI5Mg=="}, "originalCommit": {"oid": "b33f973411760eb43ead9ad69b6fe10e0eb6a6bf"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzU4OTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoxOToyOFrOIQageQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjowNToyN1rOIQi5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MjQyNQ==", "bodyText": "I think the browser will handle things without this response header.  It looks like it should just stream the response.  That way if there's some filesystem size hiccup here it won't make the browser freak out that the content is different than the size it recieved.", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554082425", "createdAt": "2021-01-08T17:19:28Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEyNDE1NQ==", "bodyText": "Sounds good I will remove that response header", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554124155", "createdAt": "2021-01-08T18:41:00Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MjQyNQ=="}, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIxOTc4OQ==", "bodyText": "Updated in 1c116df", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554219789", "createdAt": "2021-01-08T22:05:27Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MjQyNQ=="}, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzU5NjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyMToyMFrOIQak6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMTo1NTowNVrOIQilNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MzU2MA==", "bodyText": "The output stream will get closed anyway with the try-with-resources block right?  Is this needed?", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554083560", "createdAt": "2021-01-08T17:21:20Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));\n+\t\t\t// Copy the file contents to the response outputstream\n+\t\t\tIOUtils.copy(inputStream, outputStream);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.debug(\"Html output not found.\");\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, \"0\");\n+\t\t\tString htmlOutputNotFound = messageSource.getMessage(\"analysis.html.file.not.found\",\n+\t\t\t\t\tnew Object[] { filename }, locale);\n+\t\t\tOutputStream outputStream = response.getOutputStream();\n+\t\t\t/*\n+\t\t\tWrite the htmlNotFound message to the outputstream. We do this\n+\t\t\tso that the page doesn't error and will instead display the\n+\t\t\tmessage.\n+\t\t\t */\n+\t\t\toutputStream.write(htmlOutputNotFound.getBytes(StandardCharsets.UTF_8));\n+\t\t\toutputStream.flush();\n+\t\t\toutputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEyNDU3OQ==", "bodyText": "Since we reaccess it in the catch block would it still close? Or will it just close the original access stream?", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554124579", "createdAt": "2021-01-08T18:41:53Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));\n+\t\t\t// Copy the file contents to the response outputstream\n+\t\t\tIOUtils.copy(inputStream, outputStream);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.debug(\"Html output not found.\");\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, \"0\");\n+\t\t\tString htmlOutputNotFound = messageSource.getMessage(\"analysis.html.file.not.found\",\n+\t\t\t\t\tnew Object[] { filename }, locale);\n+\t\t\tOutputStream outputStream = response.getOutputStream();\n+\t\t\t/*\n+\t\t\tWrite the htmlNotFound message to the outputstream. We do this\n+\t\t\tso that the page doesn't error and will instead display the\n+\t\t\tmessage.\n+\t\t\t */\n+\t\t\toutputStream.write(htmlOutputNotFound.getBytes(StandardCharsets.UTF_8));\n+\t\t\toutputStream.flush();\n+\t\t\toutputStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MzU2MA=="}, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIxNDcwOA==", "bodyText": "Ah I'm sorry, I misread the code.  I think you have it correct.  Since you got a handle on a new stream a couple lines up you'll have to close it.  I thought for some reason that this was the same stream you opened in the try-resources block.  This is good and can stay as-is.", "url": "https://github.com/phac-nml/irida/pull/849#discussion_r554214708", "createdAt": "2021-01-08T21:55:05Z", "author": {"login": "tom114"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisController.java", "diffHunk": "@@ -151,4 +167,59 @@ public String getAdvancedPhylogeneticVisualizationPage(@PathVariable Long submis\n \t\tmodel.addAttribute(\"submission\", submission);\n \t\treturn BASE + \"visualizations/phylocanvas-metadata\";\n \t}\n+\n+\t/**\n+\t * Get the html page from the file name provided.\n+\t *\n+\t * @param submissionId {@link Long} identifier for an {@link AnalysisSubmission}\n+\t * @param filename     The html file name\n+\t * @param locale       User's locale\n+\t * @param response     {@link HttpServletResponse}\n+\t * @throws IOException if we can't write the file to the response\n+\t */\n+\t@RequestMapping(\"/{submissionId}/html-output\")\n+\tpublic void getHtmlOutputForSubmission(@PathVariable Long submissionId, @RequestParam String filename,\n+\t\t\tLocale locale, HttpServletResponse response) throws IOException {\n+\t\tAnalysisSubmission submission = analysisSubmissionService.read(submissionId);\n+\t\tSet<AnalysisOutputFile> files = submission.getAnalysis()\n+\t\t\t\t.getAnalysisOutputFiles();\n+\t\tAnalysisOutputFile outputFile = null;\n+\t\tString htmlExt = \"html\";\n+\n+\t\tfor (AnalysisOutputFile file : files) {\n+\t\t\tif (file.getFile()\n+\t\t\t\t\t.toFile()\n+\t\t\t\t\t.getName()\n+\t\t\t\t\t.contains(filename) && FilenameUtils.getExtension(filename)\n+\t\t\t\t\t.equals(htmlExt)) {\n+\t\t\t\toutputFile = file;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Set the common Http headers\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_DISPOSITION, \"inline\");\n+\t\tresponse.setHeader(HttpHeaders.CONTENT_TYPE, \"text/html\");\n+\n+\t\ttry (InputStream inputStream = new FileInputStream(outputFile.getFile()\n+\t\t\t\t.toString()); OutputStream outputStream = response.getOutputStream()) {\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(Files.size(outputFile.getFile())));\n+\t\t\t// Copy the file contents to the response outputstream\n+\t\t\tIOUtils.copy(inputStream, outputStream);\n+\t\t} catch (IOException e) {\n+\t\t\tlogger.debug(\"Html output not found.\");\n+\t\t\tresponse.setHeader(HttpHeaders.CONTENT_LENGTH, \"0\");\n+\t\t\tString htmlOutputNotFound = messageSource.getMessage(\"analysis.html.file.not.found\",\n+\t\t\t\t\tnew Object[] { filename }, locale);\n+\t\t\tOutputStream outputStream = response.getOutputStream();\n+\t\t\t/*\n+\t\t\tWrite the htmlNotFound message to the outputstream. We do this\n+\t\t\tso that the page doesn't error and will instead display the\n+\t\t\tmessage.\n+\t\t\t */\n+\t\t\toutputStream.write(htmlOutputNotFound.getBytes(StandardCharsets.UTF_8));\n+\t\t\toutputStream.flush();\n+\t\t\toutputStream.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4MzU2MA=="}, "originalCommit": {"oid": "7da7cf08c865e829a8358783db91f52628c4caed"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}