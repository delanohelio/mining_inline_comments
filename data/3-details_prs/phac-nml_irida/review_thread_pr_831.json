{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTA3NjI2", "number": 831, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1Njo0MFrOEvaTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyOToxMVrOEvusOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQ5NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/enums/StatisticTimePeriod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1Njo0MFrOHkYMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODowODoyNlrOHkbhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNzE5OQ==", "bodyText": "Comments", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r507907199", "createdAt": "2020-10-19T16:56:40Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/enums/StatisticTimePeriod.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package ca.corefacility.bioinformatics.irida.model.enums;\n+\n+public enum StatisticTimePeriod {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e54a1982e00da005c46a3555c439a0cd0bd6d6a8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2MTYxNg==", "bodyText": "Added in 06bf685", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r507961616", "createdAt": "2020-10-19T18:08:26Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/model/enums/StatisticTimePeriod.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package ca.corefacility.bioinformatics.irida.model.enums;\n+\n+public enum StatisticTimePeriod {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNzE5OQ=="}, "originalCommit": {"oid": "e54a1982e00da005c46a3555c439a0cd0bd6d6a8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgxNDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyMzoyMVrOHk3g6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo0MToxMlrOHk6VPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMDMzMA==", "bodyText": "Why do you need fully qualified class names?", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508420330", "createdAt": "2020-10-20T11:23:21Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionRepository.java", "diffHunk": "@@ -136,28 +125,72 @@\n \t/**\n \t * Get all {@link ProjectSampleAnalysisOutputInfo} shared with a {@link Project}.\n \t *\n-\t * @param projectId {@link Project} id\n+\t * @param projectId   {@link Project} id\n \t * @param workflowIds Workflow UUIDs of workflow pipelines to get output files for\n \t * @return a list of {@link ProjectSampleAnalysisOutputInfo}\n \t */\n-\tList<ProjectSampleAnalysisOutputInfo> getAllAnalysisOutputInfoSharedWithProject(Long projectId, Set<UUID> workflowIds);\n+\tList<ProjectSampleAnalysisOutputInfo> getAllAnalysisOutputInfoSharedWithProject(Long projectId,\n+\t\t\tSet<UUID> workflowIds);\n \n \t/**\n \t * Get all automated {@link ProjectSampleAnalysisOutputInfo} for a {@link Project}.\n \t *\n-\t * @param projectId {@link Project} id\n+\t * @param projectId   {@link Project} id\n \t * @param workflowIds Workflow UUIDs of workflow pipelines to get output files for\n \t * @return a list of {@link ProjectSampleAnalysisOutputInfo}\n \t */\n \tList<ProjectSampleAnalysisOutputInfo> getAllAutomatedAnalysisOutputInfoForAProject(Long projectId,\n \t\t\tSet<UUID> workflowIds);\n \n \t/**\n-\t * Get a count of all {@link AnalysisSubmission}s ran within time period\n+\t * Get the count of {@link AnalysisSubmission}s run in time period\n \t *\n-\t * @param createdDate the minimum created date for submissions\n-\t * @return a count of {@link User}s\n+\t * @param createdDate The minimum created date for the analysis submission\n+\t * @return A count of {@link AnalysisSubmission}s run in time period.\n \t */\n \t@Query(\"select count(s.id) from AnalysisSubmission s where s.createdDate >= ?1\")\n \tpublic Long countAnalysesRanInTimePeriod(Date createdDate);\n+\n+\t/**\n+\t * Get a list of {@link GenericStatModel}s for analyses run in the last day and grouped by hour\n+\t *\n+\t * @param createdDate The minimum created date for the analysis submission\n+\t * @return A list of {@link GenericStatModel}s\n+\t */\n+\t@Query(\"select new ca.corefacility.bioinformatics.irida.ria.web.admin.dto.statistics.GenericStatModel(function('date_format', s.createdDate, '%H:00'), count(s.id))\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjQ5Mg==", "bodyText": "Using @query to project the results directly into a dto requires the use of the fully classified class name", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508466492", "createdAt": "2020-10-20T12:41:12Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/repositories/analysis/submission/AnalysisSubmissionRepository.java", "diffHunk": "@@ -136,28 +125,72 @@\n \t/**\n \t * Get all {@link ProjectSampleAnalysisOutputInfo} shared with a {@link Project}.\n \t *\n-\t * @param projectId {@link Project} id\n+\t * @param projectId   {@link Project} id\n \t * @param workflowIds Workflow UUIDs of workflow pipelines to get output files for\n \t * @return a list of {@link ProjectSampleAnalysisOutputInfo}\n \t */\n-\tList<ProjectSampleAnalysisOutputInfo> getAllAnalysisOutputInfoSharedWithProject(Long projectId, Set<UUID> workflowIds);\n+\tList<ProjectSampleAnalysisOutputInfo> getAllAnalysisOutputInfoSharedWithProject(Long projectId,\n+\t\t\tSet<UUID> workflowIds);\n \n \t/**\n \t * Get all automated {@link ProjectSampleAnalysisOutputInfo} for a {@link Project}.\n \t *\n-\t * @param projectId {@link Project} id\n+\t * @param projectId   {@link Project} id\n \t * @param workflowIds Workflow UUIDs of workflow pipelines to get output files for\n \t * @return a list of {@link ProjectSampleAnalysisOutputInfo}\n \t */\n \tList<ProjectSampleAnalysisOutputInfo> getAllAutomatedAnalysisOutputInfoForAProject(Long projectId,\n \t\t\tSet<UUID> workflowIds);\n \n \t/**\n-\t * Get a count of all {@link AnalysisSubmission}s ran within time period\n+\t * Get the count of {@link AnalysisSubmission}s run in time period\n \t *\n-\t * @param createdDate the minimum created date for submissions\n-\t * @return a count of {@link User}s\n+\t * @param createdDate The minimum created date for the analysis submission\n+\t * @return A count of {@link AnalysisSubmission}s run in time period.\n \t */\n \t@Query(\"select count(s.id) from AnalysisSubmission s where s.createdDate >= ?1\")\n \tpublic Long countAnalysesRanInTimePeriod(Date createdDate);\n+\n+\t/**\n+\t * Get a list of {@link GenericStatModel}s for analyses run in the last day and grouped by hour\n+\t *\n+\t * @param createdDate The minimum created date for the analysis submission\n+\t * @return A list of {@link GenericStatModel}s\n+\t */\n+\t@Query(\"select new ca.corefacility.bioinformatics.irida.ria.web.admin.dto.statistics.GenericStatModel(function('date_format', s.createdDate, '%H:00'), count(s.id))\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMDMzMA=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgxNzAwOnYy", "diffSide": "LEFT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNDowOFrOHk3ihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1Mjo0MFrOHlBJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMDc0Mg==", "bodyText": "Much cleaner, thank you.", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508420742", "createdAt": "2020-10-20T11:24:08Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -22,18 +15,11 @@\n @RequestMapping(\"/ajax/statistics\")\n public class AdminStatisticsAjaxController {\n \n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate SampleService sampleService;\n-\tprivate AnalysisSubmissionService analysisSubmissionService;\n+\tprivate UIAdminStatisticsService uiAdminStatisticsService;\n \n \t@Autowired\n-\tpublic AdminStatisticsAjaxController(ProjectService projectService, UserService userService,\n-\t\t\tSampleService sampleService, AnalysisSubmissionService analysisSubmissionService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3ODIyOQ==", "bodyText": "Thanks :)", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508578229", "createdAt": "2020-10-20T14:52:40Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -22,18 +15,11 @@\n @RequestMapping(\"/ajax/statistics\")\n public class AdminStatisticsAjaxController {\n \n-\tprivate ProjectService projectService;\n-\tprivate UserService userService;\n-\tprivate SampleService sampleService;\n-\tprivate AnalysisSubmissionService analysisSubmissionService;\n+\tprivate UIAdminStatisticsService uiAdminStatisticsService;\n \n \t@Autowired\n-\tpublic AdminStatisticsAjaxController(ProjectService projectService, UserService userService,\n-\t\t\tSampleService sampleService, AnalysisSubmissionService analysisSubmissionService) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMDc0Mg=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgyNjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/dto/statistics/SampleStatsResponse.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNjo0M1rOHk3oGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1MjozNFrOHlBJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjE2OA==", "bodyText": "These classes seem very similar, is there a way to make one class that can handle all?", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508422168", "createdAt": "2020-10-20T11:26:43Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/dto/statistics/SampleStatsResponse.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin.dto.statistics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjY5NQ==", "bodyText": "I will take a look and see what I can do", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508466695", "createdAt": "2020-10-20T12:41:31Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/dto/statistics/SampleStatsResponse.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin.dto.statistics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjE2OA=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3ODE0OA==", "bodyText": "Updated in 0d7b38c", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508578148", "createdAt": "2020-10-20T14:52:34Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/dto/statistics/SampleStatsResponse.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.admin.dto.statistics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjE2OA=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgzNTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyOToxMVrOHk3trA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1MjoyOFrOHlBI_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMzU5Ng==", "bodyText": "Try extending your return objects with AjaxResponse that way you can generically return and AjaxErrorResponse if you need to.", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508423596", "createdAt": "2020-10-20T11:29:11Z", "author": {"login": "joshsadam"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -44,18 +30,8 @@ public AdminStatisticsAjaxController(ProjectService projectService, UserService\n \t * @return dto with basic usage stats\n \t */\n \t@GetMapping(\"/basic\")\n-\tpublic ResponseEntity<BasicStats> getAdminStatistics(Integer timePeriod) {\n-\t\tDate currDate = new Date();\n-\t\tDate minimumCreatedDate = new DateTime(currDate).minusDays(timePeriod)\n-\t\t\t\t.toDate();\n-\n-\t\tLong analysesRan = analysisSubmissionService.getAnalysesRan(minimumCreatedDate);\n-\t\tLong projectsCreated = projectService.getProjectsCreated(minimumCreatedDate);\n-\t\tLong samplesCreated = sampleService.getSamplesCreated(minimumCreatedDate);\n-\t\tLong usersCreated = userService.getUsersCreatedInTimePeriod(minimumCreatedDate);\n-\t\tLong usersLoggedIn = userService.getUsersLoggedIn(minimumCreatedDate);\n-\n-\t\treturn ResponseEntity.ok(new BasicStats(analysesRan, projectsCreated, samplesCreated, usersCreated, usersLoggedIn));\n+\tpublic ResponseEntity<BasicStats> getAdminStatistics(@RequestParam int timePeriod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2Njc2Mg==", "bodyText": "Sure!", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508466762", "createdAt": "2020-10-20T12:41:38Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -44,18 +30,8 @@ public AdminStatisticsAjaxController(ProjectService projectService, UserService\n \t * @return dto with basic usage stats\n \t */\n \t@GetMapping(\"/basic\")\n-\tpublic ResponseEntity<BasicStats> getAdminStatistics(Integer timePeriod) {\n-\t\tDate currDate = new Date();\n-\t\tDate minimumCreatedDate = new DateTime(currDate).minusDays(timePeriod)\n-\t\t\t\t.toDate();\n-\n-\t\tLong analysesRan = analysisSubmissionService.getAnalysesRan(minimumCreatedDate);\n-\t\tLong projectsCreated = projectService.getProjectsCreated(minimumCreatedDate);\n-\t\tLong samplesCreated = sampleService.getSamplesCreated(minimumCreatedDate);\n-\t\tLong usersCreated = userService.getUsersCreatedInTimePeriod(minimumCreatedDate);\n-\t\tLong usersLoggedIn = userService.getUsersLoggedIn(minimumCreatedDate);\n-\n-\t\treturn ResponseEntity.ok(new BasicStats(analysesRan, projectsCreated, samplesCreated, usersCreated, usersLoggedIn));\n+\tpublic ResponseEntity<BasicStats> getAdminStatistics(@RequestParam int timePeriod) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMzU5Ng=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3ODA0NA==", "bodyText": "As per our discussion we are going to leave this", "url": "https://github.com/phac-nml/irida/pull/831#discussion_r508578044", "createdAt": "2020-10-20T14:52:28Z", "author": {"login": "deepsidhu85"}, "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/admin/AdminStatisticsAjaxController.java", "diffHunk": "@@ -44,18 +30,8 @@ public AdminStatisticsAjaxController(ProjectService projectService, UserService\n \t * @return dto with basic usage stats\n \t */\n \t@GetMapping(\"/basic\")\n-\tpublic ResponseEntity<BasicStats> getAdminStatistics(Integer timePeriod) {\n-\t\tDate currDate = new Date();\n-\t\tDate minimumCreatedDate = new DateTime(currDate).minusDays(timePeriod)\n-\t\t\t\t.toDate();\n-\n-\t\tLong analysesRan = analysisSubmissionService.getAnalysesRan(minimumCreatedDate);\n-\t\tLong projectsCreated = projectService.getProjectsCreated(minimumCreatedDate);\n-\t\tLong samplesCreated = sampleService.getSamplesCreated(minimumCreatedDate);\n-\t\tLong usersCreated = userService.getUsersCreatedInTimePeriod(minimumCreatedDate);\n-\t\tLong usersLoggedIn = userService.getUsersLoggedIn(minimumCreatedDate);\n-\n-\t\treturn ResponseEntity.ok(new BasicStats(analysesRan, projectsCreated, samplesCreated, usersCreated, usersLoggedIn));\n+\tpublic ResponseEntity<BasicStats> getAdminStatistics(@RequestParam int timePeriod) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMzU5Ng=="}, "originalCommit": {"oid": "06bf685f3158a23f35de733bead1341113532cd5"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 770, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}