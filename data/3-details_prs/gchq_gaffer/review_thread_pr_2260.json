{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjAxMDIw", "number": 2260, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo1NDowNlrODoUgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozOTozNVrODsAo1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjA1NjQyOnYy", "diffSide": "LEFT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo1NDowNlrOF2y8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTozNjo0OVrOF254Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMjExMQ==", "bodyText": "Is there any value in keeping this signature as an overload, and perhaps adding one for getGraphs(user)?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r393002111", "createdAt": "2020-03-16T12:54:06Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -334,10 +350,23 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4096ed0cdf453b0201c88a874aa783ca9c82d012"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNTY2Ng==", "bodyText": "I don't think it would or should be used anywhere.\nThe graphIdsCsv is optional value from operations during federation, ignoring this will ignore the users request to scope the operation.\nRemoving the the Operation parameter will remove the attempt to mitigate infinite loops, making this ticket change potentially useless.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r393115666", "createdAt": "2020-03-16T15:36:49Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -334,10 +350,23 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMjExMQ=="}, "originalCommit": {"oid": "4096ed0cdf453b0201c88a874aa783ca9c82d012"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTMzMDQyOnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODo0NDoxMVrOF7Q3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOToxNzoxMVrOF_icnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjY3MQ==", "bodyText": "Re-add old method to maintain public api. Old tests should be reverted and should pass.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r397686671", "createdAt": "2020-03-25T08:44:11Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NTk4MQ==", "bodyText": "If that is done, then all infinate loop mitigation can be completely bypassed.\nYou will be completely reliant on at least 1 FederatedStore in the loop being standard with standard handlers.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399155981", "createdAt": "2020-03-27T10:06:18Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjY3MQ=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDMyMg==", "bodyText": "Ah okay. Fair enough. To be safe though, it would be a good idea to re-add it and deprecate it with a comment on why it shouldn't be used.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399224322", "createdAt": "2020-03-27T12:19:27Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjY3MQ=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzMjQ3Mg==", "bodyText": "Any handers already written will continue to use the deprecated by passed method.\nAnd will not be changed until the deprecation is removed.\nI prefer to force the change to make them update. Are you happy with mitigation reliant on 1 FederatedStore?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r400532472", "createdAt": "2020-03-30T22:28:21Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjY3MQ=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2ODk4OA==", "bodyText": "I guess as the Federated Store is labeled experimental and this mitigates a serious bug, as you say, it's probably better to force the change.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r402168988", "createdAt": "2020-04-02T09:17:11Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjY3MQ=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ0MDIzOnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxNDozMVrOF7R7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDowMzowOVrOF8qckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNDAwMA==", "bodyText": "Does this mean that two FederatedStores in seperate JVMs could have the same id?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r397704000", "createdAt": "2020-03-25T09:14:31Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();\n+        }\n+        ALL_IDS.add(id = i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NDMyMQ==", "bodyText": "Yes, but collision is chance is very low. This is to mitigate against infinite loops not guarantee it doesn't ever happen. Next time one of the JVM is turned on and off again it should be okay.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399154321", "createdAt": "2020-03-27T10:03:09Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();\n+        }\n+        ALL_IDS.add(id = i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNDAwMA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ1OTMzOnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToxOTozMlrOF7SHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxMzo1MlrOF9-MMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzA0NA==", "bodyText": "Does operation.getOpertions() need wrapping here?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r397707044", "createdAt": "2020-03-25T09:19:32Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {\n+        Collection<Graph> rtn = new ArrayList<>();\n+        if (nonNull(operation)) {\n+            String optionKey = FEDERATED_STORE_PROCESSED + id;\n+            boolean isIdFound = !operation.getOption(optionKey, \"\").isEmpty();\n+            if (!isIdFound) {\n+                HashMap<String, String> updatedOptions = isNull(operation.getOptions()) ? new HashMap<>() : new HashMap<>(operation.getOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTk5Mg==", "bodyText": "Sorry my question wasn't very clear. I was more referring to the final part of the ternary where you wrap the options in a hashmap. I don't think it needs the extra wrap as you've already don a null check.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399221992", "createdAt": "2020-03-27T12:14:39Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {\n+        Collection<Graph> rtn = new ArrayList<>();\n+        if (nonNull(operation)) {\n+            String optionKey = FEDERATED_STORE_PROCESSED + id;\n+            boolean isIdFound = !operation.getOption(optionKey, \"\").isEmpty();\n+            if (!isIdFound) {\n+                HashMap<String, String> updatedOptions = isNull(operation.getOptions()) ? new HashMap<>() : new HashMap<>(operation.getOptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzA0NA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNjM4Nw==", "bodyText": "regarding new HashMap<>(operation.getOptions())?\nThis is because the operations interface makes each operation responsible for creating and returning the options map. It might be immutable.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r400526387", "createdAt": "2020-03-30T22:13:52Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {\n+        Collection<Graph> rtn = new ArrayList<>();\n+        if (nonNull(operation)) {\n+            String optionKey = FEDERATED_STORE_PROCESSED + id;\n+            boolean isIdFound = !operation.getOption(optionKey, \"\").isEmpty();\n+            if (!isIdFound) {\n+                HashMap<String, String> updatedOptions = isNull(operation.getOptions()) ? new HashMap<>() : new HashMap<>(operation.getOptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzA0NA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTQ2NTA0OnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOToyMTowMlrOF7SKqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDoxNDozMFrOF8q06A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzk0NA==", "bodyText": "Why not just use operation.addOption()?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r397707944", "createdAt": "2020-03-25T09:21:02Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {\n+        Collection<Graph> rtn = new ArrayList<>();\n+        if (nonNull(operation)) {\n+            String optionKey = FEDERATED_STORE_PROCESSED + id;\n+            boolean isIdFound = !operation.getOption(optionKey, \"\").isEmpty();\n+            if (!isIdFound) {\n+                HashMap<String, String> updatedOptions = isNull(operation.getOptions()) ? new HashMap<>() : new HashMap<>(operation.getOptions());\n+                updatedOptions.put(optionKey, getGraphId());\n+                operation.setOptions(updatedOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MDU1Mg==", "bodyText": "Coz I was looking for a put() method which wasn't there since I was dealing with properties map.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399160552", "createdAt": "2020-03-27T10:14:30Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -328,16 +349,45 @@ public Schema getSchema(final Map<String, String> config, final User user) {\n      * given csv of graphIds, with visibility of the given user.\n      * </p>\n      * <p>\n+     * Graphs are returned once per operation, this does not allow an infinite loop of FederatedStores to occur.\n+     * </p>\n+     * <p>\n      * if graphIdsCsv is null then all graph objects within FederatedStore\n      * scope are returned.\n      * </p>\n      *\n      * @param user        the users scope to get graphs for.\n      * @param graphIdsCsv the csv of graphIds to get, null returns all graphs.\n+     * @param operation   the requesting operation, graphs are returned only once per operation.\n      * @return the graph collection.\n      */\n-    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv) {\n-        return graphStorage.get(user, getCleanStrings(graphIdsCsv));\n+    public Collection<Graph> getGraphs(final User user, final String graphIdsCsv, final Operation operation) {\n+        Collection<Graph> rtn = new ArrayList<>();\n+        if (nonNull(operation)) {\n+            String optionKey = FEDERATED_STORE_PROCESSED + id;\n+            boolean isIdFound = !operation.getOption(optionKey, \"\").isEmpty();\n+            if (!isIdFound) {\n+                HashMap<String, String> updatedOptions = isNull(operation.getOptions()) ? new HashMap<>() : new HashMap<>(operation.getOptions());\n+                updatedOptions.put(optionKey, getGraphId());\n+                operation.setOptions(updatedOptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNzk0NA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjA0NDA2OnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1Nzo1NFrOF7XwYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo0NTowOFrOF9--7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg==", "bodyText": "Is it worth hoisting the Random object to stop it being created every loop, and instantiating i to a random int off the bat to prevent the need for a null check?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r397799522", "createdAt": "2020-03-25T11:57:54Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1MzU3MA==", "bodyText": "99% of the time the loop will happen once.\nIt will require storing an additional variable for a simple loop.\nDo you wish me to make the change?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399153570", "createdAt": "2020-03-27T10:01:42Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NTI0OQ==", "bodyText": "Is there a reason you're not assigning the value right away rather than assigning null and then checking for null?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399175249", "createdAt": "2020-03-27T10:41:14Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4MTgxMg==", "bodyText": "Because if there is collision I will need to rewrite the logic to assign the value again. which means duplicate line of code.\nvariable = assign value logic\ncheck(variable)\nvariable = re-assign logic again // duplicate code.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399181812", "createdAt": "2020-03-27T10:53:53Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NjI1NA==", "bodyText": "If you're worried about code duplication, consider using a private method. Is there a reason you're not assigning to the field directly from the get go?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399186254", "createdAt": "2020-03-27T11:02:15Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUzOTM3Mg==", "bodyText": "variable = methodAssingment()\ncheck(variable) {\n    variable = methodAssingment() // still a duplicate line\n}\nmethodAssingment(){ \n    //now an extra method with a one liner sitting in the class used only once 99.99% of instantiation.\n}", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r400539372", "createdAt": "2020-03-30T22:45:08Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();\n+    private final int id;\n+\n+    public FederatedStore() {\n+        Integer i = null;\n+        while (isNull(i) || ALL_IDS.contains(i)) {\n+            i = new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5OTUyMg=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDc0Mzg4OnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDozOTozNVrOF8rq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxOToyN1rOF_306A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NDM5MA==", "bodyText": "Consider not using constant case for mutable lists.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r399174390", "createdAt": "2020-03-27T10:39:35Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MDQyNw==", "bodyText": "This is global list held and modified by all classes, to understand and know which ID number have been used by other classes.\nWhat would you consider using?", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r400540427", "createdAt": "2020-03-30T22:47:54Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NDM5MA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NjQwOA==", "bodyText": "Camel case for mutable class members.", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r402146408", "createdAt": "2020-04-02T08:41:26Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NDM5MA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxOTI3Mg==", "bodyText": "OOooooooh completely misunderstood  you.\nI don't think you've selected the correct naming convention.\n-> \"error: Name 'allIds' must match pattern '^[A-Z][A-Z0-9\"", "url": "https://github.com/gchq/Gaffer/pull/2260#discussion_r402519272", "createdAt": "2020-04-02T18:19:27Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/FederatedStore.java", "diffHunk": "@@ -102,9 +111,21 @@\n  * @see Graph\n  */\n public class FederatedStore extends Store {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Store.class);\n+    private static final String FEDERATED_STORE_PROCESSED = \"FederatedStore.processed.\";\n     private FederatedGraphStorage graphStorage = new FederatedGraphStorage();\n     private Set<String> customPropertiesAuths;\n     private Boolean isPublicAccessAllowed = Boolean.valueOf(IS_PUBLIC_ACCESS_ALLOWED_DEFAULT);\n+    private static final List<Integer> ALL_IDS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3NDM5MA=="}, "originalCommit": {"oid": "9965c0644a99b3a77a829a64da37fb8d486cc445"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4350, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}