{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNTEwNDM4", "number": 2322, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozMDozNlrOEsuCuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MDozNVrOEsuOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzI3MTYzOnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/test/java/uk/gov/gchq/gaffer/federatedstore/integration/FederatedStoreRecursionIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozMDozNlrOHgHYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToxNzo1NlrOHgNcWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNzMxOA==", "bodyText": "Can this be removed?", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503437318", "createdAt": "2020-10-12T17:30:36Z", "author": {"login": "t11947"}, "path": "store-implementation/federated-store/src/test/java/uk/gov/gchq/gaffer/federatedstore/integration/FederatedStoreRecursionIT.java", "diffHunk": "@@ -75,7 +75,7 @@ public void setUp() throws Exception {\n     }\n \n \n-    @Test(timeout = 60000)\n+    @Test//(timeout = 60000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjczMQ==", "bodyText": "Good spot. I added that for debugging. My bad.", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503536731", "createdAt": "2020-10-12T21:17:56Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/test/java/uk/gov/gchq/gaffer/federatedstore/integration/FederatedStoreRecursionIT.java", "diffHunk": "@@ -75,7 +75,7 @@ public void setUp() throws Exception {\n     }\n \n \n-    @Test(timeout = 60000)\n+    @Test//(timeout = 60000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzNzMxOA=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzI4MDYyOnYy", "diffSide": "RIGHT", "path": "example/basic/basic-rest/src/main/resources/accumulo/store.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozMzozMlrOHgHdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NjoxMFrOHhLZ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzODY1Mw==", "bodyText": "Does the Mock store need to be used here?", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503438653", "createdAt": "2020-10-12T17:33:32Z", "author": {"login": "t11947"}, "path": "example/basic/basic-rest/src/main/resources/accumulo/store.properties", "diffHunk": "@@ -14,13 +14,11 @@\n # limitations under the License.\n #\n # Accumulo store config\n-gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.DemoMiniAccumuloStore\n+gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.MockAccumuloStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNTgxNg==", "bodyText": "The reason I put it there was to maintain an Accumulo store demo. The only other option would be to have a full on Accumulo store.", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503535816", "createdAt": "2020-10-12T21:15:30Z", "author": {"login": "d47853"}, "path": "example/basic/basic-rest/src/main/resources/accumulo/store.properties", "diffHunk": "@@ -14,13 +14,11 @@\n # limitations under the License.\n #\n # Accumulo store config\n-gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.DemoMiniAccumuloStore\n+gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.MockAccumuloStore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzODY1Mw=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyODg0NQ==", "bodyText": "Does the MiniAccumulo store not work here?", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r504528845", "createdAt": "2020-10-14T09:19:26Z", "author": {"login": "t11947"}, "path": "example/basic/basic-rest/src/main/resources/accumulo/store.properties", "diffHunk": "@@ -14,13 +14,11 @@\n # limitations under the License.\n #\n # Accumulo store config\n-gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.DemoMiniAccumuloStore\n+gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.MockAccumuloStore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzODY1Mw=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MTg4OQ==", "bodyText": "No. I've put it in the test jar to keep out the issues with dependencies (so that the accumulo-rest still works with an AccumuloStore) so it can be used for testing but not as a deployment.", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r504551889", "createdAt": "2020-10-14T09:56:10Z", "author": {"login": "d47853"}, "path": "example/basic/basic-rest/src/main/resources/accumulo/store.properties", "diffHunk": "@@ -14,13 +14,11 @@\n # limitations under the License.\n #\n # Accumulo store config\n-gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.DemoMiniAccumuloStore\n+gaffer.store.class=uk.gov.gchq.gaffer.accumulostore.MockAccumuloStore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzODY1Mw=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzI4Njk1OnYy", "diffSide": "RIGHT", "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozNTozMFrOHgHg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozODo1MlrOHgeMEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTYwMg==", "bodyText": "Typically mutable collections don't use constant casing", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503439602", "createdAt": "2020-10-12T17:35:30Z", "author": {"login": "t11947"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjQ3Nw==", "bodyText": "Yeah I agree it isn't really a constant. Only reason it was like this is because checkstyle enforces it. I can remove the rule?", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503536477", "createdAt": "2020-10-12T21:17:16Z", "author": {"login": "d47853"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTYwMg=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMTA4OA==", "bodyText": "Had a dig around and there's no easy fix for this. There's been an issue for most nuance to this rule on the Checkstyle project since 2013, so I don't think it's going to be resolved any time soon. Given the scope of the variables, it's probably better to keep with the checkstyle as generally it's a useful check.", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503811088", "createdAt": "2020-10-13T09:38:52Z", "author": {"login": "t11947"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTYwMg=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzMwMTcwOnYy", "diffSide": "RIGHT", "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MDozNVrOHgHp8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNjo1NVrOHiCjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTkwNw==", "bodyText": "Consider extracting to private method over commenting", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503441907", "createdAt": "2020-10-12T17:40:35Z", "author": {"login": "t11947"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();\n+\n+    private static final String ROOT_PASSWORD_DEFAULT = \"password\";\n+    private static final int DEFAULT_ZOOKEEPER_PORT = 2181;\n+\n+    private static final String ROOT_USER = \"root\";\n+    private static final String VISIBILITIES_PROPERTY = \"accumulo.mini.visibilities\";\n+    private static final String ROOT_PASSWORD_PROPERTY = \"accumulo.mini.root.password\";\n+    private static final String ACCUMULO_DIRECTORY_PROPERTY = \"accumulo.mini.directory\";\n+\n+\n+    @Override\n+    public void preInitialise(final String graphId, final Schema schema, final StoreProperties properties) throws StoreException {\n+        super.preInitialise(graphId, schema, properties);\n+\n+        synchronized (this) {\n+            if (getCluster() == null) {\n+                try {\n+                    createCluster();\n+                } catch (final InterruptedException | IOException e) {\n+                    throw new StoreException(\"Failed to start accumulo cluster\", e);\n+                }\n+            }\n+        }\n+\n+\n+        try {\n+            ensureUserExists(getCluster());\n+        } catch (final AccumuloException | AccumuloSecurityException e) {\n+            throw new StoreException(\"Failed to ensure user was added\", e);\n+        }\n+\n+    }\n+\n+    private MiniAccumuloCluster getCluster() {\n+        return CLUSTER_INSTANCES.get(getProperties().getInstance());\n+    }\n+\n+    private File getAccumuloDirectory() {\n+        return ACCUMULO_DIRECTORIES.get(getProperties().getInstance());\n+    }\n+\n+    private void ensureUserExists(final MiniAccumuloCluster mac) throws AccumuloSecurityException, AccumuloException {\n+        String userName = getProperties().getUser();\n+        String rootPassword = getProperties().get(ROOT_PASSWORD_PROPERTY, ROOT_PASSWORD_DEFAULT);\n+\n+        // Ensure user exists\n+        synchronized (this) {\n+            Set<String> currentUsers = mac.getConnector(ROOT_USER, rootPassword).securityOperations().listLocalUsers();\n+            if (!currentUsers.contains(userName)) {\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations().createLocalUser(\n+                        userName, new PasswordToken(getProperties().getPassword())\n+                );\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_NAMESPACE);\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_TABLE);\n+            }\n+        }\n+\n+\n+        // Add Auths", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzNjg0MA==", "bodyText": "Will do", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r503536840", "createdAt": "2020-10-12T21:18:14Z", "author": {"login": "d47853"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();\n+\n+    private static final String ROOT_PASSWORD_DEFAULT = \"password\";\n+    private static final int DEFAULT_ZOOKEEPER_PORT = 2181;\n+\n+    private static final String ROOT_USER = \"root\";\n+    private static final String VISIBILITIES_PROPERTY = \"accumulo.mini.visibilities\";\n+    private static final String ROOT_PASSWORD_PROPERTY = \"accumulo.mini.root.password\";\n+    private static final String ACCUMULO_DIRECTORY_PROPERTY = \"accumulo.mini.directory\";\n+\n+\n+    @Override\n+    public void preInitialise(final String graphId, final Schema schema, final StoreProperties properties) throws StoreException {\n+        super.preInitialise(graphId, schema, properties);\n+\n+        synchronized (this) {\n+            if (getCluster() == null) {\n+                try {\n+                    createCluster();\n+                } catch (final InterruptedException | IOException e) {\n+                    throw new StoreException(\"Failed to start accumulo cluster\", e);\n+                }\n+            }\n+        }\n+\n+\n+        try {\n+            ensureUserExists(getCluster());\n+        } catch (final AccumuloException | AccumuloSecurityException e) {\n+            throw new StoreException(\"Failed to ensure user was added\", e);\n+        }\n+\n+    }\n+\n+    private MiniAccumuloCluster getCluster() {\n+        return CLUSTER_INSTANCES.get(getProperties().getInstance());\n+    }\n+\n+    private File getAccumuloDirectory() {\n+        return ACCUMULO_DIRECTORIES.get(getProperties().getInstance());\n+    }\n+\n+    private void ensureUserExists(final MiniAccumuloCluster mac) throws AccumuloSecurityException, AccumuloException {\n+        String userName = getProperties().getUser();\n+        String rootPassword = getProperties().get(ROOT_PASSWORD_PROPERTY, ROOT_PASSWORD_DEFAULT);\n+\n+        // Ensure user exists\n+        synchronized (this) {\n+            Set<String> currentUsers = mac.getConnector(ROOT_USER, rootPassword).securityOperations().listLocalUsers();\n+            if (!currentUsers.contains(userName)) {\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations().createLocalUser(\n+                        userName, new PasswordToken(getProperties().getPassword())\n+                );\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_NAMESPACE);\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_TABLE);\n+            }\n+        }\n+\n+\n+        // Add Auths", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTkwNw=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NTUwMw==", "bodyText": "Actually when I tried it, it looked messy given I had to pass the MiniAccumulo cluster, root password and username to a short private method.", "url": "https://github.com/gchq/Gaffer/pull/2322#discussion_r505455503", "createdAt": "2020-10-15T11:06:55Z", "author": {"login": "d47853"}, "path": "store-implementation/accumulo-store/src/test/java/uk/gov/gchq/gaffer/accumulostore/MiniAccumuloStore.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package uk.gov.gchq.gaffer.accumulostore;\n+\n+import com.google.common.io.Files;\n+import org.apache.accumulo.core.client.AccumuloException;\n+import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.Connector;\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.core.security.Authorizations;\n+import org.apache.accumulo.core.security.SystemPermission;\n+import org.apache.accumulo.minicluster.MiniAccumuloCluster;\n+import org.apache.accumulo.minicluster.MiniAccumuloConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import uk.gov.gchq.gaffer.store.StoreException;\n+import uk.gov.gchq.gaffer.store.StoreProperties;\n+import uk.gov.gchq.gaffer.store.schema.Schema;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Set;\n+\n+/**\n+ * A {@code MiniAccumuloStore} is an {@link AccumuloStore} which sets up an {@link MiniAccumuloCluster}\n+ * for each unique instance name. If you create two Accumulo stores with the same instance name,\n+ * the same cluster will be used for both. It's advisable to re-use an instance so that you don't\n+ * spend unnecessary time spinning up mini-clusters.\n+ *\n+ * It's dependencies mean it cannot be run in a REST API.\n+ *\n+ * If a user hasn't been created on the accumulo instance, it will be created for you with the\n+ * CREATE_NAMESPACE and CREATE_TABLE permissions.\n+ *\n+ * If you specify the authorisations in the store properties, the current authorisations for any\n+ * existing user will be overwritten.\n+ */\n+public class MiniAccumuloStore extends AccumuloStore {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MiniAccumuloStore.class);\n+\n+    private static final HashMap<String, MiniAccumuloCluster> CLUSTER_INSTANCES = new HashMap<>();\n+    private static final HashMap<String, File> ACCUMULO_DIRECTORIES = new HashMap<>();\n+\n+    private static final String ROOT_PASSWORD_DEFAULT = \"password\";\n+    private static final int DEFAULT_ZOOKEEPER_PORT = 2181;\n+\n+    private static final String ROOT_USER = \"root\";\n+    private static final String VISIBILITIES_PROPERTY = \"accumulo.mini.visibilities\";\n+    private static final String ROOT_PASSWORD_PROPERTY = \"accumulo.mini.root.password\";\n+    private static final String ACCUMULO_DIRECTORY_PROPERTY = \"accumulo.mini.directory\";\n+\n+\n+    @Override\n+    public void preInitialise(final String graphId, final Schema schema, final StoreProperties properties) throws StoreException {\n+        super.preInitialise(graphId, schema, properties);\n+\n+        synchronized (this) {\n+            if (getCluster() == null) {\n+                try {\n+                    createCluster();\n+                } catch (final InterruptedException | IOException e) {\n+                    throw new StoreException(\"Failed to start accumulo cluster\", e);\n+                }\n+            }\n+        }\n+\n+\n+        try {\n+            ensureUserExists(getCluster());\n+        } catch (final AccumuloException | AccumuloSecurityException e) {\n+            throw new StoreException(\"Failed to ensure user was added\", e);\n+        }\n+\n+    }\n+\n+    private MiniAccumuloCluster getCluster() {\n+        return CLUSTER_INSTANCES.get(getProperties().getInstance());\n+    }\n+\n+    private File getAccumuloDirectory() {\n+        return ACCUMULO_DIRECTORIES.get(getProperties().getInstance());\n+    }\n+\n+    private void ensureUserExists(final MiniAccumuloCluster mac) throws AccumuloSecurityException, AccumuloException {\n+        String userName = getProperties().getUser();\n+        String rootPassword = getProperties().get(ROOT_PASSWORD_PROPERTY, ROOT_PASSWORD_DEFAULT);\n+\n+        // Ensure user exists\n+        synchronized (this) {\n+            Set<String> currentUsers = mac.getConnector(ROOT_USER, rootPassword).securityOperations().listLocalUsers();\n+            if (!currentUsers.contains(userName)) {\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations().createLocalUser(\n+                        userName, new PasswordToken(getProperties().getPassword())\n+                );\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_NAMESPACE);\n+                mac.getConnector(ROOT_USER, rootPassword).securityOperations()\n+                        .grantSystemPermission(userName, SystemPermission.CREATE_TABLE);\n+            }\n+        }\n+\n+\n+        // Add Auths", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MTkwNw=="}, "originalCommit": {"oid": "f64d17ae6e9b55609c00b377a987d9e0c023c31f"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4304, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}