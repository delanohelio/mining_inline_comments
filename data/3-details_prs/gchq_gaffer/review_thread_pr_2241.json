{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODY2MTQw", "number": 2241, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyMTo0OVrODfPkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyMjoxNFrODfPlMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDg3NTY5OnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/schema/FederatedViewValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyMTo0OVrOFo1S0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo0NzozMVrOFpZATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDUzMA==", "bodyText": "Couldn't you just add it to the validation result here?", "url": "https://github.com/gchq/Gaffer/pull/2241#discussion_r378360530", "createdAt": "2020-02-12T16:21:49Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/schema/FederatedViewValidator.java", "diffHunk": "@@ -56,14 +61,38 @@ public ValidationResult validate(final View view, final Schema schema, final Set\n     }\n \n     protected ValidationResult getEdgeResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult edgeResult = new ValidationResult();\n-        validateEdge(view, schema, storeTraits, isStoreOrdered, edgeResult);\n-        return edgeResult;\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEdge(new View.Builder().edge(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+\n+        return getElementResult(validationResultFunction, view.getEdges());\n     }\n \n     protected ValidationResult getEntityResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult entitiesResult = new ValidationResult();\n-        validateEntities(view, schema, storeTraits, isStoreOrdered, entitiesResult);\n-        return entitiesResult;\n+\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEntities(new View.Builder().entity(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+        return getElementResult(validationResultFunction, view.getEntities());\n+    }\n+\n+    private ValidationResult getElementResult(final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction, final Map<String, ViewElementDefinition> elements) {\n+        final ValidationResult rtn = new ValidationResult();\n+\n+        final List<ValidationResult> viewResults = elements.entrySet().stream()\n+                .map(validationResultFunction)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e7d114bbc36108d2c0baa4721d320afdc18dcb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0NTYxMg==", "bodyText": "No I don't want the errors if one is successful. So I got to check first, if all fail, then I add them to the return", "url": "https://github.com/gchq/Gaffer/pull/2241#discussion_r378945612", "createdAt": "2020-02-13T15:47:31Z", "author": {"login": "GCHQDev404"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/schema/FederatedViewValidator.java", "diffHunk": "@@ -56,14 +61,38 @@ public ValidationResult validate(final View view, final Schema schema, final Set\n     }\n \n     protected ValidationResult getEdgeResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult edgeResult = new ValidationResult();\n-        validateEdge(view, schema, storeTraits, isStoreOrdered, edgeResult);\n-        return edgeResult;\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEdge(new View.Builder().edge(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+\n+        return getElementResult(validationResultFunction, view.getEdges());\n     }\n \n     protected ValidationResult getEntityResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult entitiesResult = new ValidationResult();\n-        validateEntities(view, schema, storeTraits, isStoreOrdered, entitiesResult);\n-        return entitiesResult;\n+\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEntities(new View.Builder().entity(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+        return getElementResult(validationResultFunction, view.getEntities());\n+    }\n+\n+    private ValidationResult getElementResult(final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction, final Map<String, ViewElementDefinition> elements) {\n+        final ValidationResult rtn = new ValidationResult();\n+\n+        final List<ValidationResult> viewResults = elements.entrySet().stream()\n+                .map(validationResultFunction)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDUzMA=="}, "originalCommit": {"oid": "77e7d114bbc36108d2c0baa4721d320afdc18dcb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDg3NzI4OnYy", "diffSide": "RIGHT", "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/schema/FederatedViewValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyMjoxNFrOFo1T2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyMjoxNFrOFo1T2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDc5NA==", "bodyText": "elements is a little misleading - elementDefinitions may be more appropriate", "url": "https://github.com/gchq/Gaffer/pull/2241#discussion_r378360794", "createdAt": "2020-02-12T16:22:14Z", "author": {"login": "d47853"}, "path": "store-implementation/federated-store/src/main/java/uk/gov/gchq/gaffer/federatedstore/schema/FederatedViewValidator.java", "diffHunk": "@@ -56,14 +61,38 @@ public ValidationResult validate(final View view, final Schema schema, final Set\n     }\n \n     protected ValidationResult getEdgeResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult edgeResult = new ValidationResult();\n-        validateEdge(view, schema, storeTraits, isStoreOrdered, edgeResult);\n-        return edgeResult;\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEdge(new View.Builder().edge(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+\n+        return getElementResult(validationResultFunction, view.getEdges());\n     }\n \n     protected ValidationResult getEntityResult(final View view, final Schema schema, final Set<StoreTrait> storeTraits, final boolean isStoreOrdered) {\n-        final ValidationResult entitiesResult = new ValidationResult();\n-        validateEntities(view, schema, storeTraits, isStoreOrdered, entitiesResult);\n-        return entitiesResult;\n+\n+        final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction = e -> {\n+            final ValidationResult singleResult = new ValidationResult();\n+            validateEntities(new View.Builder().entity(e.getKey(), e.getValue()).build(), schema, storeTraits, isStoreOrdered, singleResult);\n+            return singleResult;\n+        };\n+        return getElementResult(validationResultFunction, view.getEntities());\n+    }\n+\n+    private ValidationResult getElementResult(final Function<Map.Entry<String, ViewElementDefinition>, ValidationResult> validationResultFunction, final Map<String, ViewElementDefinition> elements) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e7d114bbc36108d2c0baa4721d320afdc18dcb"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4343, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}