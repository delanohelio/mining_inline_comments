{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTQzMjgy", "number": 2239, "title": "Gh 2211 functions", "bodyText": "", "createdAt": "2020-01-28T10:45:43Z", "url": "https://github.com/gchq/Gaffer/pull/2239", "merged": true, "mergeCommit": {"oid": "1ea1d6c0a72816b33c0ae9cd5565fd34bf32b7b0"}, "closed": true, "closedAt": "2021-09-17T09:38:14Z", "author": {"login": "p013570"}, "timelineItems": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbn90OtAH2gAyMzY3OTQzMjgyOjcxMTNmYjM2ZDJhZjU1ZDhjMjcyOTBhZGZjZWJiZTViNWFlZTMyYjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABe_Md9UAFqTc1NzI2NTQ1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7113fb36d2af55d8c27290adfcebbe5b5aee32b7", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/7113fb36d2af55d8c27290adfcebbe5b5aee32b7", "committedDate": "2019-11-18T16:59:14Z", "message": "Added ReduceRelatedElementsFunction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa51bc497aa9fb4af938eec65182fb0b963b65f", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/4aa51bc497aa9fb4af938eec65182fb0b963b65f", "committedDate": "2020-01-20T13:58:29Z", "message": "Implemented additional functions and added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391c97d57b250f772abe8d0bf091bc964aaf4270", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/391c97d57b250f772abe8d0bf091bc964aaf4270", "committedDate": "2020-01-28T10:44:01Z", "message": "Merge remote-tracking branch 'origin/develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df72146afe7237eb55e9af08118053756217930", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/8df72146afe7237eb55e9af08118053756217930", "committedDate": "2020-01-28T10:45:11Z", "message": "Updated the version of the new functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MzMwOTgy", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-355330982", "createdAt": "2020-02-07T17:54:55Z", "commit": {"oid": "8df72146afe7237eb55e9af08118053756217930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NDo1NVrOFnFPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NDo1NVrOFnFPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDY3MA==", "bodyText": "2020", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r376524670", "createdAt": "2020-02-07T17:54:55Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElements.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2017-2019 Crown Copyright", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df72146afe7237eb55e9af08118053756217930"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b53f122ee490fde07e56fa7c00d72f2058320982", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/b53f122ee490fde07e56fa7c00d72f2058320982", "committedDate": "2020-05-28T10:20:52Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d9487d3dafcd70427d887903c75ba5835b46826", "author": {"user": {"login": "p013570", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/9d9487d3dafcd70427d887903c75ba5835b46826", "committedDate": "2020-05-28T10:21:24Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM0Njc1NTc3", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-634675577", "createdAt": "2021-04-13T14:39:51Z", "commit": {"oid": "9d9487d3dafcd70427d887903c75ba5835b46826"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xM1QxNDozOTo1MlrOJIIpeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xM1QxNDo0MDoyMVrOJIIrTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjUxMDA3Mw==", "bodyText": "is 2017 correct ?", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r612510073", "createdAt": "2021-04-13T14:39:52Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElements.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2017-2020 Crown Copyright", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9487d3dafcd70427d887903c75ba5835b46826"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMjUxMDU0MQ==", "bodyText": "If these are all new please examine all the copyright dates.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r612510541", "createdAt": "2021-04-13T14:40:21Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueToTuple.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2019 Crown Copyright", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9487d3dafcd70427d887903c75ba5835b46826"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca95bff42a90cfe35368750cdc41ea2160148723", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/ca95bff42a90cfe35368750cdc41ea2160148723", "committedDate": "2021-04-21T08:41:09Z", "message": "updated copyright dates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4441561d960d58524e34194e07547c1a03def558", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/4441561d960d58524e34194e07547c1a03def558", "committedDate": "2021-04-21T08:42:31Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2caffa128851f0e60fc5abf09d75ad3a68ddbf6", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/f2caffa128851f0e60fc5abf09d75ad3a68ddbf6", "committedDate": "2021-04-21T08:44:44Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76999bc6ea8d131efcea0610cb2cab5ec6c0f2a3", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/76999bc6ea8d131efcea0610cb2cab5ec6c0f2a3", "committedDate": "2021-04-21T08:45:43Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd7a6943a4d5cae1764186155ebde3601dbe1daf", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/cd7a6943a4d5cae1764186155ebde3601dbe1daf", "committedDate": "2021-04-21T08:46:11Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de38d5bf507d4abe67a0fd2ea4bd946e00ff9826", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/de38d5bf507d4abe67a0fd2ea4bd946e00ff9826", "committedDate": "2021-04-21T08:47:25Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a17ef1aa12c32e2b3ebde4167e951a25c7c2514", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/8a17ef1aa12c32e2b3ebde4167e951a25c7c2514", "committedDate": "2021-04-21T08:47:40Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5357b58239a965828786eea72c638db5dea0c08", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/d5357b58239a965828786eea72c638db5dea0c08", "committedDate": "2021-04-21T08:47:58Z", "message": "Update TypeValueToTupleTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eda007018f75ab3f516db926520e8a351e656c2", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/0eda007018f75ab3f516db926520e8a351e656c2", "committedDate": "2021-04-21T08:48:16Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24f9e4de7d7d18b86f62064259b5bbe956d3ddd4", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/24f9e4de7d7d18b86f62064259b5bbe956d3ddd4", "committedDate": "2021-04-21T08:49:03Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "278a35bf179a854334bac1969bb66ef80b9a7f73", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/278a35bf179a854334bac1969bb66ef80b9a7f73", "committedDate": "2021-04-21T08:49:24Z", "message": "Updated copyright date"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwNzg5NzE1", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-640789715", "createdAt": "2021-04-21T08:52:18Z", "commit": {"oid": "278a35bf179a854334bac1969bb66ef80b9a7f73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b9103cd1fee2a96d77e7b5c683fd3f98e1dfa2", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/30b9103cd1fee2a96d77e7b5c683fd3f98e1dfa2", "committedDate": "2021-04-21T11:42:29Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ2ODE0NDEy", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-646814412", "createdAt": "2021-04-28T09:10:02Z", "commit": {"oid": "30b9103cd1fee2a96d77e7b5c683fd3f98e1dfa2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQwOToxMDowMlrOJRKTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQwOToxNTowOFrOJRKp3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTk3NDM2Mw==", "bodyText": "new Class with copyright starting from 2017? This occurs many times.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r621974363", "createdAt": "2021-04-28T09:10:02Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElements.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2017-2021 Crown Copyright", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b9103cd1fee2a96d77e7b5c683fd3f98e1dfa2"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMTk4MDEyNg==", "bodyText": "I'm seeing warning about incomplete tests with abstract methods that have not been implemented.\nPlease review, and amend. I'm seeing this many test locations.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r621980126", "createdAt": "2021-04-28T09:15:08Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElementsTest.java", "diffHunk": "@@ -0,0 +1,437 @@\n+/*\n+ * Copyright 2017-2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.TestGroups;\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.binaryoperator.KorypheBinaryOperator;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static uk.gov.gchq.gaffer.data.util.ElementUtil.assertElementEquals;\n+\n+public class ReduceRelatedElementsTest extends FunctionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b9103cd1fee2a96d77e7b5c683fd3f98e1dfa2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2189edd4a32ce179aac7938ba35e9ba6357eb711", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/2189edd4a32ce179aac7938ba35e9ba6357eb711", "committedDate": "2021-04-28T11:14:06Z", "message": "Removed 2017 date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e789eb0f291fcd2ebc1e79b6e757cb88ca1b1d1d", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/e789eb0f291fcd2ebc1e79b6e757cb88ca1b1d1d", "committedDate": "2021-04-28T11:18:10Z", "message": "Removed 2017 date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7141c811356f6d34e2dc51f54757e1b9f17a220", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/e7141c811356f6d34e2dc51f54757e1b9f17a220", "committedDate": "2021-05-05T08:40:18Z", "message": "Merge branch 'gh-2211-functions' of https://github.com/gchq/Gaffer into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6f899a50ddf0bf773602cb1bdbdf02592a92c87", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/c6f899a50ddf0bf773602cb1bdbdf02592a92c87", "committedDate": "2021-05-13T10:36:15Z", "message": "gh-2211 implemented abstract methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c3d15b0ca3943b616bd25af6d9dd92d8f8e11f", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/74c3d15b0ca3943b616bd25af6d9dd92d8f8e11f", "committedDate": "2021-05-13T10:37:23Z", "message": "gh-2211 Function Test to include Generics."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f3c1dce595c515b48b0a209049f9fb1b5738416", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/5f3c1dce595c515b48b0a209049f9fb1b5738416", "committedDate": "2021-05-10T19:25:40Z", "message": "Merge branch 'develop' into gh-2211-functions"}, "afterCommit": {"oid": "74c3d15b0ca3943b616bd25af6d9dd92d8f8e11f", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/74c3d15b0ca3943b616bd25af6d9dd92d8f8e11f", "committedDate": "2021-05-13T10:37:23Z", "message": "gh-2211 Function Test to include Generics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb00cde68e2fae79f20f7156e32c6d556ad3db46", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/bb00cde68e2fae79f20f7156e32c6d556ad3db46", "committedDate": "2021-05-13T10:38:16Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0211a2658a244f9e6ac07a5150f3688ed7e7cb9", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/b0211a2658a244f9e6ac07a5150f3688ed7e7cb9", "committedDate": "2021-05-20T08:50:37Z", "message": "gh-2211-functions shouldGenerateExpectedInputSignature() & shouldGenerateExpectedOutputSignature() both  now pass"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcyOTcxOTg2", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-672971986", "createdAt": "2021-06-01T11:46:43Z", "commit": {"oid": "b0211a2658a244f9e6ac07a5150f3688ed7e7cb9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6211f1d7885172b096d863bcd13b8b3bc2e2464", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/a6211f1d7885172b096d863bcd13b8b3bc2e2464", "committedDate": "2021-06-02T10:31:04Z", "message": "gh-2211 checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1MTIxNTYz", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-675121563", "createdAt": "2021-06-03T10:23:42Z", "commit": {"oid": "a6211f1d7885172b096d863bcd13b8b3bc2e2464"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wM1QxMDoyMzo0MlrOJmz1Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0wM1QxMDoyMzo0MlrOJmz1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDY3NDg3MA==", "bodyText": "This is out of date due to how old this PR is.\nNew classes need this value to be updated for the version it will be added to.\n1.16.2 I think will be the next version.\nThis is a number that needs to be chased until it gets merged in.\nplease review for all other New classes.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r644674870", "createdAt": "2021-06-03T10:23:42Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElements.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.function.KorypheFunction;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.First;\n+import uk.gov.gchq.koryphe.util.IterableUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BinaryOperator;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+import static org.apache.commons.collections.CollectionUtils.isEmpty;\n+\n+/**\n+ * A {@code ReduceRelatedElements} is a {@link KorypheFunction} which takes an {@link Iterable} or {@link Element}s and\n+ * combines all related elements using the provided aggregator functions.\n+ */\n+@Since(\"1.10.6\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6211f1d7885172b096d863bcd13b8b3bc2e2464"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2b7ec10c86c4b6cdb231dfb899f9535290555f", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/4a2b7ec10c86c4b6cdb231dfb899f9535290555f", "committedDate": "2021-06-09T09:43:17Z", "message": "gh-2211-functions bump version on updated classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/762eb19c8015f21cb1b8a4a65285b4b9a6518b35", "committedDate": "2021-06-10T11:03:17Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgxNjUwMjAy", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-681650202", "createdAt": "2021-06-11T09:45:30Z", "commit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMVQwOTo0NTozMFrOJrvVQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMVQwOTo1NzowNVrOJrvyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0NDAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Class[]{String.class};\n          \n          \n            \n                    return new Class[]{Tuple.class};", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649844033", "createdAt": "2021-06-11T09:45:30Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueToTupleTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.types.TypeSubTypeValue;\n+import uk.gov.gchq.koryphe.function.FunctionComposite;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.function.Length;\n+import uk.gov.gchq.koryphe.impl.function.ToString;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+import uk.gov.gchq.koryphe.tuple.function.TupleAdaptedFunctionComposite;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class TypeSubTypeValueToTupleTest extends FunctionTest<TypeSubTypeValueToTuple> {\n+\n+    @Test\n+    public void shouldHandleNullInput() {\n+        // Given\n+        final TypeSubTypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldConvertTypeSubTypeValueToTuple() {\n+        // Given\n+        final TypeSubTypeValue typeSubTypeValue = new TypeSubTypeValue(\"type\", \"subType\", \"value\");\n+        final TypeSubTypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(typeSubTypeValue);\n+\n+        // Then\n+        assertEquals(\"type\", result.get(\"type\"));\n+        assertEquals(\"value\", result.get(\"value\"));\n+    }\n+\n+    @Test\n+    public void shouldGetAndSetUsingCompositeFunction() {\n+        // Given\n+        final TypeSubTypeValue typeSubTypeValue = new TypeSubTypeValue(\"type\", \"subType\", \"value\");\n+        final Function<Object, Object> compositeFunction = new FunctionComposite(Lists.newArrayList(\n+                new TypeSubTypeValueToTuple(),\n+                new TupleAdaptedFunctionComposite.Builder()\n+                        .select(new String[]{\"value\"})\n+                        .execute(new FunctionComposite(Arrays.asList(\n+                                new Length(),\n+                                new ToString()\n+                        )))\n+                        .project(new String[]{\"type\"})\n+                        .build()\n+        ));\n+\n+        // When\n+        compositeFunction.apply(typeSubTypeValue);\n+\n+        // Then\n+        assertEquals(new TypeSubTypeValue(\"5\", \"subType\", \"value\"), typeSubTypeValue);\n+    }\n+\n+    @Override\n+    protected TypeSubTypeValueToTuple getInstance() {\n+        return new TypeSubTypeValueToTuple();\n+    }\n+\n+    @Override\n+    protected Iterable getDifferentInstancesOrNull() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Class<? extends TypeSubTypeValueToTuple> getFunctionClass() {\n+        return TypeSubTypeValueToTuple.class;\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureInputClasses() {\n+        return new Class[]{TypeSubTypeValue.class};\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureOutputClasses() {\n+        return new Class[]{String.class};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0NDYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Class[]{TypeValue.class};\n          \n          \n            \n                    return new Class[]{Tuple.class};", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649844622", "createdAt": "2021-06-11T09:46:29Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/TypeValueToTupleTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.types.TypeValue;\n+import uk.gov.gchq.koryphe.function.FunctionComposite;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.function.Length;\n+import uk.gov.gchq.koryphe.impl.function.ToString;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+import uk.gov.gchq.koryphe.tuple.function.TupleAdaptedFunctionComposite;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class TypeValueToTupleTest extends FunctionTest {\n+\n+    @Test\n+    public void shouldHandleNullInput() {\n+        // Given\n+        final TypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldConvertTypeValueToTuple() {\n+        // Given\n+        final TypeValue typeValue = new TypeValue(\"type\", \"value\");\n+        final TypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(typeValue);\n+\n+        // Then\n+        assertEquals(\"type\", result.get(\"type\"));\n+        assertEquals(\"value\", result.get(\"value\"));\n+    }\n+\n+    @Test\n+    public void shouldGetAndSetUsingCompositeFunction() {\n+        // Given\n+        final TypeValue typeValue = new TypeValue(\"type\", \"value\");\n+        final Function<Object, Object> compositeFunction = new FunctionComposite(Lists.newArrayList(\n+                new TypeValueToTuple(),\n+                new TupleAdaptedFunctionComposite.Builder()\n+                        .select(new String[]{\"value\"})\n+                        .execute(new FunctionComposite(Arrays.asList(\n+                                new Length(),\n+                                new ToString()\n+                        )))\n+                        .project(new String[]{\"type\"})\n+                        .build()\n+        ));\n+\n+        // When\n+        compositeFunction.apply(typeValue);\n+\n+        // Then\n+        assertEquals(new TypeValue(\"5\", \"value\"), typeValue);\n+    }\n+\n+    @Override\n+    protected TypeValueToTuple getInstance() {\n+        return new TypeValueToTuple();\n+    }\n+\n+    @Override\n+    protected Iterable getDifferentInstancesOrNull() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Class<? extends TypeValueToTuple> getFunctionClass() {\n+        return TypeValueToTuple.class;\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureInputClasses() {\n+        return new Class[]{TypeValue.class};\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureOutputClasses() {\n+        return new Class[]{TypeValue.class};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0NTE2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Class[0];\n          \n          \n            \n                    return new Class[]{String.class};", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649845166", "createdAt": "2021-06-11T09:47:18Z", "author": {"login": "GCHQDev404"}, "path": "core/operation/src/test/java/uk/gov/gchq/gaffer/operation/function/ToTrailingWildcardPairTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.operation.function;\n+\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.pair.Pair;\n+import uk.gov.gchq.gaffer.data.element.id.EntityId;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class ToTrailingWildcardPairTest extends FunctionTest {\n+\n+    @Test\n+    public void shouldHandleNullInput() {\n+        // Given\n+        final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n+\n+        // When\n+        final Pair<EntityId, EntityId> result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldCreateEntityIdPair() {\n+        // Given\n+        final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n+\n+        // When\n+        final Pair<EntityId, EntityId> result = function.apply(\"value1\");\n+\n+        // Then\n+        assertEquals(\"value1\", result.getFirst().getVertex());\n+        assertEquals(\"value1~\", result.getSecond().getVertex());\n+    }\n+\n+    @Override\n+    protected ToTrailingWildcardPair getInstance() {\n+        return new ToTrailingWildcardPair();\n+    }\n+\n+    @Override\n+    protected Iterable getDifferentInstancesOrNull() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Class<? extends ToTrailingWildcardPair> getFunctionClass() {\n+        return ToTrailingWildcardPair.class;\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureInputClasses() {\n+        return new Class[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg0NTMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Class[0];\n          \n          \n            \n                    return new Class[]{Pair.class};", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649845331", "createdAt": "2021-06-11T09:47:34Z", "author": {"login": "GCHQDev404"}, "path": "core/operation/src/test/java/uk/gov/gchq/gaffer/operation/function/ToTrailingWildcardPairTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.operation.function;\n+\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.pair.Pair;\n+import uk.gov.gchq.gaffer.data.element.id.EntityId;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class ToTrailingWildcardPairTest extends FunctionTest {\n+\n+    @Test\n+    public void shouldHandleNullInput() {\n+        // Given\n+        final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n+\n+        // When\n+        final Pair<EntityId, EntityId> result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldCreateEntityIdPair() {\n+        // Given\n+        final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n+\n+        // When\n+        final Pair<EntityId, EntityId> result = function.apply(\"value1\");\n+\n+        // Then\n+        assertEquals(\"value1\", result.getFirst().getVertex());\n+        assertEquals(\"value1~\", result.getSecond().getVertex());\n+    }\n+\n+    @Override\n+    protected ToTrailingWildcardPair getInstance() {\n+        return new ToTrailingWildcardPair();\n+    }\n+\n+    @Override\n+    protected Iterable getDifferentInstancesOrNull() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Class<? extends ToTrailingWildcardPair> getFunctionClass() {\n+        return ToTrailingWildcardPair.class;\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureInputClasses() {\n+        return new Class[0];\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureOutputClasses() {\n+        return new Class[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg1MDc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ToTrailingWildcardPairTest extends FunctionTest {\n          \n          \n            \n            public class ToTrailingWildcardPairTest extends FunctionTest<ToTrailingWildcardPair> {", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649850777", "createdAt": "2021-06-11T09:56:06Z", "author": {"login": "GCHQDev404"}, "path": "core/operation/src/test/java/uk/gov/gchq/gaffer/operation/function/ToTrailingWildcardPairTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.operation.function;\n+\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.pair.Pair;\n+import uk.gov.gchq.gaffer.data.element.id.EntityId;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class ToTrailingWildcardPairTest extends FunctionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTg1MTQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TypeValueToTupleTest extends FunctionTest {\n          \n          \n            \n            public class TypeValueToTupleTest extends FunctionTest<TypeValueToTuple> {", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r649851400", "createdAt": "2021-06-11T09:57:05Z", "author": {"login": "GCHQDev404"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/TypeValueToTupleTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.types.TypeValue;\n+import uk.gov.gchq.koryphe.function.FunctionComposite;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.function.Length;\n+import uk.gov.gchq.koryphe.impl.function.ToString;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+import uk.gov.gchq.koryphe.tuple.function.TupleAdaptedFunctionComposite;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class TypeValueToTupleTest extends FunctionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "762eb19c8015f21cb1b8a4a65285b4b9a6518b35"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47bb3df4b3580b4713e9dd70c2547fea6676b87", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/e47bb3df4b3580b4713e9dd70c2547fea6676b87", "committedDate": "2021-06-11T10:48:06Z", "message": "gh-2211 corrections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdcf9045f110435462fbb2cbb7a0b1c813fabfff", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/cdcf9045f110435462fbb2cbb7a0b1c813fabfff", "committedDate": "2021-06-14T08:59:40Z", "message": "gh-2435 persistent table on github"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1756f995b22b22a8a32be4403f163fa9d4186360", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/1756f995b22b22a8a32be4403f163fa9d4186360", "committedDate": "2021-06-15T08:53:21Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2fbe59e8518483344fc9a0226b3a875548f8c8", "author": {"user": {"login": "GCHQDev404", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/2e2fbe59e8518483344fc9a0226b3a875548f8c8", "committedDate": "2021-07-28T10:01:52Z", "message": "gh-2443 TypeValueToTupleTest @Test override bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3971fc50f8232c34cebcb24966bc36abd879ec58", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/3971fc50f8232c34cebcb24966bc36abd879ec58", "committedDate": "2021-07-29T16:08:29Z", "message": "Added @Test where needed and removed unneeded methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce58f484de859d1a271ced1cb5c31735cf2a05e0", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/ce58f484de859d1a271ced1cb5c31735cf2a05e0", "committedDate": "2021-07-29T16:09:25Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba93825e37402e7d52f02f3baa937e70add02ce", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/8ba93825e37402e7d52f02f3baa937e70add02ce", "committedDate": "2021-07-29T16:33:42Z", "message": "Amended tests to use Koryphe types not Tuple<String>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c70be942c053f784eaf9cbdd96083bb5b8c2795", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/7c70be942c053f784eaf9cbdd96083bb5b8c2795", "committedDate": "2021-07-29T16:33:51Z", "message": "Merge branch 'gh-2211-functions' of https://github.com/gchq/Gaffer into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da65010290281acb1cfaa8b2ccbd419ffe2b62c8", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/da65010290281acb1cfaa8b2ccbd419ffe2b62c8", "committedDate": "2021-07-29T16:39:01Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11d96d583ad4635515e6eb35fe87e35267430479", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/11d96d583ad4635515e6eb35fe87e35267430479", "committedDate": "2021-07-29T16:46:31Z", "message": "Further checkstyle fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c76eb042624e478d233b8c06ffd9141d0018ad", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/b7c76eb042624e478d233b8c06ffd9141d0018ad", "committedDate": "2021-07-29T16:47:41Z", "message": "Corrected Javadoc string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24", "committedDate": "2021-07-29T17:30:36Z", "message": "Updated @Since to next version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIyNTY5Nzc3", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-722569777", "createdAt": "2021-08-04T17:48:25Z", "commit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNzo0ODoyNVrOKLMzsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNzo1MDo1OVrOKLM7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjgzMjgxNw==", "bodyText": "Formatting tidy up here.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r682832817", "createdAt": "2021-08-04T17:48:25Z", "author": {"login": "t511203"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueTuple.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeSubTypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Objects.isNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjgzMzAwMw==", "bodyText": "Missing Javadoc.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r682833003", "createdAt": "2021-08-04T17:48:40Z", "author": {"login": "t511203"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueTuple.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeSubTypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Objects.isNull;\n+@Since(\"1.17.0\")\n+@Summary(\"Tuple object for TypeSubTypeValue\")\n+public class TypeSubTypeValueTuple implements Tuple<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjgzNDAwMw==", "bodyText": "Might be safer to remove this telescoping constructor behaviour.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r682834003", "createdAt": "2021-08-04T17:49:58Z", "author": {"login": "t511203"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueTuple.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeSubTypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Objects.isNull;\n+@Since(\"1.17.0\")\n+@Summary(\"Tuple object for TypeSubTypeValue\")\n+public class TypeSubTypeValueTuple implements Tuple<String> {\n+    private TypeSubTypeValue tsv;\n+\n+    public TypeSubTypeValueTuple() {\n+        this(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjgzNDcxNQ==", "bodyText": "Same comment here regarding telescoping constructors.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r682834715", "createdAt": "2021-08-04T17:50:59Z", "author": {"login": "t511203"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeValueTuple.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Objects.isNull;\n+@Since(\"1.17.0\")\n+@Summary(\"Converts an TypeSubTypeValue into a Tuple\")\n+public class TypeValueTuple implements Tuple<String> {\n+    private TypeValue tv;\n+\n+    public TypeValueTuple() {\n+        this(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a27a3e415ec8e1da76f0b52bfd8ea1c8aeb24"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54489a80f761e24de86c6780c567a3e8faf835b4", "author": {"user": {"login": "t511203", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/54489a80f761e24de86c6780c567a3e8faf835b4", "committedDate": "2021-08-04T18:11:47Z", "message": "gh-2211: Added Javadoc, removed usages of telescoping constructors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356dcd15afc72df9350c12d489de93e9a6a697cf", "author": {"user": {"login": "t511203", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/356dcd15afc72df9350c12d489de93e9a6a697cf", "committedDate": "2021-08-04T18:13:31Z", "message": "gh-2211: Update release version for TSV and TV tuples."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7916bf160269cdecc941c12d683a9e264057607a", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/7916bf160269cdecc941c12d683a9e264057607a", "committedDate": "2021-08-06T09:06:09Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07f416fbf544155759fcbfec4db6b41bf486fba", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/e07f416fbf544155759fcbfec4db6b41bf486fba", "committedDate": "2021-08-06T11:49:06Z", "message": "gh-2211: Update release version for new functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2NDk0NDYy", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-726494462", "createdAt": "2021-08-10T14:14:25Z", "commit": {"oid": "e07f416fbf544155759fcbfec4db6b41bf486fba"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMFQxNDoxNDoyNVrOKOR3qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0xMFQxNDoxNDo0MVrOKOR4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjA2MTQ4Mg==", "bodyText": "Perhaps this should be changed back to Class[]{String.class}. Despite the slightly confusing layout, checking that the Tuple contains the correct type is potentially more useful, as explained in gchq/koryphe#225 (comment).", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r686061482", "createdAt": "2021-08-10T14:14:25Z", "author": {"login": "t92549"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/TypeValueToTupleTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Lists;\n+import org.junit.jupiter.api.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.gaffer.types.TypeValue;\n+import uk.gov.gchq.koryphe.function.FunctionComposite;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.function.Length;\n+import uk.gov.gchq.koryphe.impl.function.ToString;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+import uk.gov.gchq.koryphe.tuple.function.TupleAdaptedFunctionComposite;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class TypeValueToTupleTest extends FunctionTest<TypeValueToTuple> {\n+\n+    @Test\n+    public void shouldHandleNullInput() {\n+        // Given\n+        final TypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldConvertTypeValueToTuple() {\n+        // Given\n+        final TypeValue typeValue = new TypeValue(\"type\", \"value\");\n+        final TypeValueToTuple function = getInstance();\n+\n+        // When\n+        final Tuple<String> result = function.apply(typeValue);\n+\n+        // Then\n+        assertEquals(\"type\", result.get(\"type\"));\n+        assertEquals(\"value\", result.get(\"value\"));\n+    }\n+\n+    @Test\n+    public void shouldGetAndSetUsingCompositeFunction() {\n+        // Given\n+        final TypeValue typeValue = new TypeValue(\"type\", \"value\");\n+        final Function<Object, Object> compositeFunction = new FunctionComposite(Lists.newArrayList(\n+                new TypeValueToTuple(),\n+                new TupleAdaptedFunctionComposite.Builder()\n+                        .select(new String[]{\"value\"})\n+                        .execute(new FunctionComposite(Arrays.asList(\n+                                new Length(),\n+                                new ToString()\n+                        )))\n+                        .project(new String[]{\"type\"})\n+                        .build()\n+        ));\n+\n+        // When\n+        compositeFunction.apply(typeValue);\n+\n+        // Then\n+        assertEquals(new TypeValue(\"5\", \"value\"), typeValue);\n+    }\n+\n+    @Override\n+    protected TypeValueToTuple getInstance() {\n+        return new TypeValueToTuple();\n+    }\n+\n+    @Override\n+    protected Iterable getDifferentInstancesOrNull() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected Class<? extends TypeValueToTuple> getFunctionClass() {\n+        return TypeValueToTuple.class;\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureInputClasses() {\n+        return new Class[]{TypeValue.class};\n+    }\n+\n+    @Override\n+    protected Class[] getExpectedSignatureOutputClasses() {\n+        return new Class[]{TypeValueTuple.class};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f416fbf544155759fcbfec4db6b41bf486fba"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjA2MTc0NA==", "bodyText": "Perhaps this should be changed back to Tuple<String>. This ensures that the output signature can be properly tested, as explained below. As well as this, it is more obvious what should go inside the Tuple. If this is the case, then perhaps this should also be changed in TypeSubTypeValueToTuple as well as some other places in the code base too?", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r686061744", "createdAt": "2021-08-10T14:14:41Z", "author": {"login": "t92549"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeValueToTuple.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.function.KorypheFunction;\n+\n+/**\n+ * A {@code TypeValueToTuple} is a {@link KorypheFunction} that converts an {@link TypeValue} into a {@link TypeValueTuple}.\n+ */\n+@Since(\"1.19.0\")\n+@Summary(\"Converts an TypeValue into a Tuple\")\n+public class TypeValueToTuple extends KorypheFunction<TypeValue, TypeValueTuple> {\n+    @Override\n+    public TypeValueTuple apply(final TypeValue input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07f416fbf544155759fcbfec4db6b41bf486fba"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI3NTMyMDEy", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-727532012", "createdAt": "2021-08-11T14:06:23Z", "commit": {"oid": "e07f416fbf544155759fcbfec4db6b41bf486fba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ec71830776c917b3c0fdc8f6ad9f6cec393c91", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/44ec71830776c917b3c0fdc8f6ad9f6cec393c91", "committedDate": "2021-08-12T10:14:35Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMyODk3NDU2", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-732897456", "createdAt": "2021-08-18T13:55:00Z", "commit": {"oid": "44ec71830776c917b3c0fdc8f6ad9f6cec393c91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbd6a3a59f17a9df601c3ab0698b4c38fb929988", "author": {"user": {"login": "t511203", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/cbd6a3a59f17a9df601c3ab0698b4c38fb929988", "committedDate": "2021-08-31T08:38:49Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/fa1ad553d5762291517f26cf0aaa1e2c5888f9bb", "committedDate": "2021-09-06T09:55:43Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ5Mjc1NDI2", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-749275426", "createdAt": "2021-09-08T15:08:22Z", "commit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wOFQxNTowODoyMlrOKf4ISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOS0wOFQxNTo1MDoxNlrOKf6d8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUxNDEyMA==", "bodyText": "Might be worth sticking these literals in constants considering they're reused a bit", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704514120", "createdAt": "2021-09-08T15:08:22Z", "author": {"login": "t11947"}, "path": "core/data/src/main/java/uk/gov/gchq/gaffer/data/element/function/TypeSubTypeValueTuple.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import uk.gov.gchq.gaffer.types.TypeSubTypeValue;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.tuple.Tuple;\n+\n+import java.util.Arrays;\n+\n+import static java.util.Objects.isNull;\n+\n+/**\n+ * A {@link TypeSubTypeValueTuple} class represents a {@link TypeSubTypeValue} object as a Koryphe n-valued {@link Tuple}.\n+ */\n+@Since(\"1.19.0\")\n+@Summary(\"Tuple object for TypeSubTypeValue\")\n+public class TypeSubTypeValueTuple implements Tuple<String> {\n+    private final TypeSubTypeValue tsv;\n+\n+    public TypeSubTypeValueTuple() {\n+        this.tsv = new TypeSubTypeValue();\n+    }\n+\n+    public TypeSubTypeValueTuple(final TypeSubTypeValue tsv) {\n+        if (isNull(tsv)) {\n+            this.tsv = new TypeSubTypeValue();\n+        } else {\n+            this.tsv = tsv;\n+        }\n+    }\n+\n+    @Override\n+    public void put(final String key, final Object value) {\n+        final String stringValue = isNull(value) ? null : value.toString();\n+        if (\"type\".equalsIgnoreCase(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUxNzM5Ng==", "bodyText": "I'd probably find another way to get the test to pass", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704517396", "createdAt": "2021-09-08T15:11:43Z", "author": {"login": "t11947"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElementsTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.TestGroups;\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.binaryoperator.KorypheBinaryOperator;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static uk.gov.gchq.gaffer.data.util.ElementUtil.assertElementEquals;\n+\n+public class ReduceRelatedElementsTest extends FunctionTest<ReduceRelatedElements> {\n+    public static final String RELATES_TO = \"relatesTo\";\n+    public static final String VISIBILITY = \"visibility\";\n+\n+    @Test\n+    public void shouldReturnNullForNullValue() {\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+\n+        // When\n+        final Object result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElements() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElementsWithManyRelationships() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+        Object vertex4a = \"vertex4a\";\n+        Object vertex4b = \"vertex4b longest\";\n+        Object vertex5a = \"vertex5a\";\n+        Object vertex5b = \"vertex5b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex4b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex5b)\n+                        .dest(vertex4a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+//        assertElementEquals(expectedElements, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUxODcxNA==", "bodyText": "Consider using assertThrows", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704518714", "createdAt": "2021-09-08T15:13:07Z", "author": {"login": "t11947"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElementsTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.TestGroups;\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.binaryoperator.KorypheBinaryOperator;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static uk.gov.gchq.gaffer.data.util.ElementUtil.assertElementEquals;\n+\n+public class ReduceRelatedElementsTest extends FunctionTest<ReduceRelatedElements> {\n+    public static final String RELATES_TO = \"relatesTo\";\n+    public static final String VISIBILITY = \"visibility\";\n+\n+    @Test\n+    public void shouldReturnNullForNullValue() {\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+\n+        // When\n+        final Object result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElements() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElementsWithManyRelationships() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+        Object vertex4a = \"vertex4a\";\n+        Object vertex4b = \"vertex4b longest\";\n+        Object vertex5a = \"vertex5a\";\n+        Object vertex5b = \"vertex5b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex4b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex5b)\n+                        .dest(vertex4a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+//        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReturnInputIfNoRelatedVertexGroups() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = new ReduceRelatedElements();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        assertElementEquals(elements, result);\n+    }\n+\n+    @Test\n+    public void shouldFailIfNoVisibilityAggregatorProvided() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = new ReduceRelatedElements();\n+        function.setVisibilityProperty(VISIBILITY);\n+        function.setVisibilityAggregator(null);\n+        function.setVertexAggregator(new Longest());\n+        function.setRelatedVertexGroups(Collections.singleton(RELATES_TO));\n+\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUyMTgwNA==", "bodyText": "Might be worth making these constants at the class level if they're reused in multiple tests", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704521804", "createdAt": "2021-09-08T15:16:26Z", "author": {"login": "t11947"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElementsTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.TestGroups;\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.binaryoperator.KorypheBinaryOperator;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static uk.gov.gchq.gaffer.data.util.ElementUtil.assertElementEquals;\n+\n+public class ReduceRelatedElementsTest extends FunctionTest<ReduceRelatedElements> {\n+    public static final String RELATES_TO = \"relatesTo\";\n+    public static final String VISIBILITY = \"visibility\";\n+\n+    @Test\n+    public void shouldReturnNullForNullValue() {\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+\n+        // When\n+        final Object result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElements() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElementsWithManyRelationships() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+        Object vertex4a = \"vertex4a\";\n+        Object vertex4b = \"vertex4b longest\";\n+        Object vertex5a = \"vertex5a\";\n+        Object vertex5b = \"vertex5b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex4b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex5b)\n+                        .dest(vertex4a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+//        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReturnInputIfNoRelatedVertexGroups() {\n+        Object vertex1a = \"vertex1a longest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUyOTI5NA==", "bodyText": "It might be worth including some more granular testing of the (currently private) logic found in some of the helper methods.", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704529294", "createdAt": "2021-09-08T15:24:18Z", "author": {"login": "t11947"}, "path": "core/data/src/test/java/uk/gov/gchq/gaffer/data/element/function/ReduceRelatedElementsTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.data.element.function;\n+\n+import com.google.common.collect.Sets;\n+import org.junit.jupiter.api.Test;\n+\n+import uk.gov.gchq.gaffer.commonutil.JsonAssert;\n+import uk.gov.gchq.gaffer.commonutil.TestGroups;\n+import uk.gov.gchq.gaffer.data.element.Edge;\n+import uk.gov.gchq.gaffer.data.element.Element;\n+import uk.gov.gchq.gaffer.data.element.Entity;\n+import uk.gov.gchq.gaffer.exception.SerialisationException;\n+import uk.gov.gchq.gaffer.jsonserialisation.JSONSerialiser;\n+import uk.gov.gchq.koryphe.binaryoperator.KorypheBinaryOperator;\n+import uk.gov.gchq.koryphe.function.FunctionTest;\n+import uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static uk.gov.gchq.gaffer.data.util.ElementUtil.assertElementEquals;\n+\n+public class ReduceRelatedElementsTest extends FunctionTest<ReduceRelatedElements> {\n+    public static final String RELATES_TO = \"relatesTo\";\n+    public static final String VISIBILITY = \"visibility\";\n+\n+    @Test\n+    public void shouldReturnNullForNullValue() {\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+\n+        // When\n+        final Object result = function.apply(null);\n+\n+        // Then\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElements() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReduceRelatedElementsWithManyRelationships() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+        Object vertex4a = \"vertex4a\";\n+        Object vertex4b = \"vertex4b longest\";\n+        Object vertex5a = \"vertex5a\";\n+        Object vertex5b = \"vertex5b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = getInstance();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex4b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex5b)\n+                        .dest(vertex4a)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        final List<Element> expectedElements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\", \"private\"))\n+                        .property(\"sourceRelatedVertices\", Sets.newHashSet(vertex1b))\n+                        .property(\"destinationRelatedVertices\", Sets.newHashSet(vertex3a))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2b)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .property(\"relatedVertices\", Sets.newHashSet(vertex2a))\n+                        .build()\n+        );\n+//        assertElementEquals(expectedElements, result);\n+    }\n+\n+    @Test\n+    public void shouldReturnInputIfNoRelatedVertexGroups() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = new ReduceRelatedElements();\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        final Iterable<Element> result = function.apply(elements);\n+\n+        // Then\n+        assertElementEquals(elements, result);\n+    }\n+\n+    @Test\n+    public void shouldFailIfNoVisibilityAggregatorProvided() {\n+        Object vertex1a = \"vertex1a longest\";\n+        Object vertex1b = \"vertex1b\";\n+        Object vertex2a = \"vertex2a\";\n+        Object vertex2b = \"vertex2b longest\";\n+        Object vertex3a = \"vertex3a\";\n+        Object vertex3b = \"vertex3b longest\";\n+\n+        // Given\n+        final ReduceRelatedElements function = new ReduceRelatedElements();\n+        function.setVisibilityProperty(VISIBILITY);\n+        function.setVisibilityAggregator(null);\n+        function.setVertexAggregator(new Longest());\n+        function.setRelatedVertexGroups(Collections.singleton(RELATES_TO));\n+\n+        final List<Element> elements = Arrays.asList(\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex2a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1b)\n+                        .dest(vertex3a)\n+                        .directed(true)\n+                        .group(TestGroups.EDGE)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Entity.Builder()\n+                        .vertex(vertex2a)\n+                        .group(TestGroups.ENTITY)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex1a)\n+                        .dest(vertex1b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex2a)\n+                        .dest(vertex2b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"public\"))\n+                        .build(),\n+                new Edge.Builder()\n+                        .source(vertex3a)\n+                        .dest(vertex3b)\n+                        .directed(true)\n+                        .group(RELATES_TO)\n+                        .property(VISIBILITY, Sets.newHashSet(\"private\"))\n+                        .build()\n+        );\n+\n+        // When\n+        try {\n+            function.apply(elements);\n+\n+            fail();\n+        } catch (final IllegalArgumentException e) {\n+            // Then\n+            assertTrue(e.getMessage().contains(\"No visibility aggregator provided, so visibilities cannot be combined.\"));\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDU1MjQzNA==", "bodyText": "Is it worth adding null checking/defaulting for if endOfRange is null?", "url": "https://github.com/gchq/Gaffer/pull/2239#discussion_r704552434", "createdAt": "2021-09-08T15:50:16Z", "author": {"login": "t11947"}, "path": "core/operation/src/main/java/uk/gov/gchq/gaffer/operation/function/ToTrailingWildcardPair.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2021 Crown Copyright\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package uk.gov.gchq.gaffer.operation.function;\n+\n+import uk.gov.gchq.gaffer.commonutil.pair.Pair;\n+import uk.gov.gchq.gaffer.data.element.id.EntityId;\n+import uk.gov.gchq.gaffer.operation.data.EntitySeed;\n+import uk.gov.gchq.koryphe.Since;\n+import uk.gov.gchq.koryphe.Summary;\n+import uk.gov.gchq.koryphe.function.KorypheFunction;\n+\n+/**\n+ * A {@code ToTrailingWildcardPair} is a {@link KorypheFunction} that takes an input value to use as the starting value\n+ * for a range and creates a value to use as the end point. Note that the both of the vertex values must first be converted\n+ * to {@link String}s. These values are then wrapped up as {@link EntitySeed}s.\n+ */\n+@Since(\"1.19.0\")\n+@Summary(\"Converts an input value into a pair of EntityIds representing a range.\")\n+public class ToTrailingWildcardPair extends KorypheFunction<String, Pair<EntityId, EntityId>> {\n+\n+    private String endOfRange = \"~\";\n+\n+    @Override\n+    public Pair<EntityId, EntityId> apply(final String input) {\n+        if (null == input) {\n+            return null;\n+        }\n+\n+        return createPair(input);\n+    }\n+\n+    public String getEndOfRange() {\n+        return endOfRange;\n+    }\n+\n+    public void setEndOfRange(final String endOfRange) {\n+        this.endOfRange = endOfRange;\n+    }\n+\n+    private Pair<EntityId, EntityId> createPair(final String vertex) {\n+        return new Pair<>(new EntitySeed(vertex), new EntitySeed(vertex + getEndOfRange()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1ad553d5762291517f26cf0aaa1e2c5888f9bb"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5767c32369e4e267cc792f4d8c38b612d6e71e4", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/c5767c32369e4e267cc792f4d8c38b612d6e71e4", "committedDate": "2021-09-14T11:55:56Z", "message": "Merge branch 'develop' into gh-2211-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "134a15f1298c4d99f09a15bb8ed1983177125d36", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/134a15f1298c4d99f09a15bb8ed1983177125d36", "committedDate": "2021-09-14T12:40:48Z", "message": "gh-2211:clean up from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c38ac742217297737e3c682699befeab349a7b", "author": {"user": {"login": "t92549", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/f4c38ac742217297737e3c682699befeab349a7b", "committedDate": "2021-09-15T10:45:53Z", "message": "gh-2211: Cleaned up tests from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b7371e218b5c0cdd532e3fcf60ba2f93e51085", "author": {"user": {"login": "p3430233", "name": null}}, "url": "https://github.com/gchq/Gaffer/commit/23b7371e218b5c0cdd532e3fcf60ba2f93e51085", "committedDate": "2021-09-16T11:38:20Z", "message": "gh-2211 added null check and test"}}, {"__typename": "PullRequestReview", "id": "PRR_kwDOAtwC4M4tIvQx", "url": "https://github.com/gchq/Gaffer/pull/2239#pullrequestreview-757265457", "createdAt": "2021-09-17T09:37:12Z", "commit": {"oid": "23b7371e218b5c0cdd532e3fcf60ba2f93e51085"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1842, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}