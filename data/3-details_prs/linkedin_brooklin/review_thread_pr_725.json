{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NjMzODAz", "number": 725, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyMjowOFrOEJxuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODozMzo0NFrOEJx_nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njg3MjYwOnYy", "diffSide": "RIGHT", "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyMjowOFrOGqcy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyOToyNVrOGqfFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NTE2MA==", "bodyText": "Since you did the refactoring, can you please take of this as well ? May be move down after all private static final.", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447165160", "createdAt": "2020-06-29T18:22:08Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -60,15 +60,30 @@\n   @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjc0OQ==", "bodyText": "done", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447202749", "createdAt": "2020-06-29T19:29:25Z", "author": {"login": "somandal"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -60,15 +60,30 @@\n   @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NTE2MA=="}, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njg4MTI3OnYy", "diffSide": "RIGHT", "path": "datastream-kafka/src/test/java/com/linkedin/datastream/kafka/TestKafkaProducerWrapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyNDoyNFrOGqc4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyOToxM1rOGqfFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjQ3Nw==", "bodyText": "Do you see a value in adding a test to ensure that flush timeout is honored?", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447166477", "createdAt": "2020-06-29T18:24:24Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka/src/test/java/com/linkedin/datastream/kafka/TestKafkaProducerWrapper.java", "diffHunk": "@@ -150,7 +151,7 @@ void verifySend(int numExpected) {\n     }\n \n     void verifyFlush(int numExpected) {\n-      verify(_mockProducer, times(numExpected)).flush();\n+      verify(_mockProducer, times(numExpected)).flush(anyInt(), any(TimeUnit.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2OTkyNg==", "bodyText": "One example is here https://github.com/linkedin/brooklin/pull/676/files where it can throw timeoutException. See if this is useful.", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447169926", "createdAt": "2020-06-29T18:30:00Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka/src/test/java/com/linkedin/datastream/kafka/TestKafkaProducerWrapper.java", "diffHunk": "@@ -150,7 +151,7 @@ void verifySend(int numExpected) {\n     }\n \n     void verifyFlush(int numExpected) {\n-      verify(_mockProducer, times(numExpected)).flush();\n+      verify(_mockProducer, times(numExpected)).flush(anyInt(), any(TimeUnit.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjQ3Nw=="}, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjY1OA==", "bodyText": "As discussed, adding a test similar to what you had in that PR is hard because we are relying on Kafka's internal timeout  mechanism, unlike in your earlier PR where the KafkaProducerWrapper itself was responsible for timing out the  flush. Instead, added a test to  validate that we handle TimeoutException as expected.", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447202658", "createdAt": "2020-06-29T19:29:13Z", "author": {"login": "somandal"}, "path": "datastream-kafka/src/test/java/com/linkedin/datastream/kafka/TestKafkaProducerWrapper.java", "diffHunk": "@@ -150,7 +151,7 @@ void verifySend(int numExpected) {\n     }\n \n     void verifyFlush(int numExpected) {\n-      verify(_mockProducer, times(numExpected)).flush();\n+      verify(_mockProducer, times(numExpected)).flush(anyInt(), any(TimeUnit.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjQ3Nw=="}, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjkxNzQzOnYy", "diffSide": "RIGHT", "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODozMzo0NFrOGqdNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOToyOTozMlrOGqfF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MjAzNw==", "bodyText": "Not your fault nit: TIMEOUT", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447172037", "createdAt": "2020-06-29T18:33:44Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -60,15 +60,30 @@\n   @VisibleForTesting\n   static final String PRODUCER_COUNT = \"producerCount\";\n \n+  // Default producer configuration for no data loss pipeline.\n+  private static final String DEFAULT_PRODUCER_ACKS_CONFIG_VALUE = \"all\";\n+  private static final String DEFAULT_MAX_BLOCK_MS_CONFIG_VALUE = String.valueOf(Integer.MAX_VALUE);\n+  private static final String DEFAULT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_VALUE = \"1\";\n+\n+  private static final long DEFAULT_SEND_FAILURE_RETRY_WAIT_MS = Duration.ofSeconds(5).toMillis();\n+  private static final int DEFAULT_PRODUCER_FLUSH_TIMEOUT_MS = Integer.MAX_VALUE;\n+  private static final Double DEFAULT_RATE_LIMITER = 0.1;\n+\n+  private static final String CFG_SEND_FAILURE_RETRY_WAIT_MS = \"send.failure.retry.wait.time.ms\";\n+  private static final String CFG_KAFKA_PRODUCER_FACTORY = \"kafkaProducerFactory\";\n+  private static final String CFG_RATE_LIMITER_CFG = \"producerRateLimiter\";\n+  private static final String CFG_PRODUCER_FLUSH_TIMEOUT_MS = \"producerFlushTimeoutMs\";\n+\n   private static final AtomicInteger NUM_PRODUCERS = new AtomicInteger();\n   private static final Supplier<Integer> PRODUCER_GAUGE = NUM_PRODUCERS::get;\n \n-  private static final int TIME_OUT = 2000;\n+  private static final int CLOSE_TIME_OUT_MS = 2000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjgwNQ==", "bodyText": "done", "url": "https://github.com/linkedin/brooklin/pull/725#discussion_r447202805", "createdAt": "2020-06-29T19:29:32Z", "author": {"login": "somandal"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -60,15 +60,30 @@\n   @VisibleForTesting\n   static final String PRODUCER_COUNT = \"producerCount\";\n \n+  // Default producer configuration for no data loss pipeline.\n+  private static final String DEFAULT_PRODUCER_ACKS_CONFIG_VALUE = \"all\";\n+  private static final String DEFAULT_MAX_BLOCK_MS_CONFIG_VALUE = String.valueOf(Integer.MAX_VALUE);\n+  private static final String DEFAULT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_VALUE = \"1\";\n+\n+  private static final long DEFAULT_SEND_FAILURE_RETRY_WAIT_MS = Duration.ofSeconds(5).toMillis();\n+  private static final int DEFAULT_PRODUCER_FLUSH_TIMEOUT_MS = Integer.MAX_VALUE;\n+  private static final Double DEFAULT_RATE_LIMITER = 0.1;\n+\n+  private static final String CFG_SEND_FAILURE_RETRY_WAIT_MS = \"send.failure.retry.wait.time.ms\";\n+  private static final String CFG_KAFKA_PRODUCER_FACTORY = \"kafkaProducerFactory\";\n+  private static final String CFG_RATE_LIMITER_CFG = \"producerRateLimiter\";\n+  private static final String CFG_PRODUCER_FLUSH_TIMEOUT_MS = \"producerFlushTimeoutMs\";\n+\n   private static final AtomicInteger NUM_PRODUCERS = new AtomicInteger();\n   private static final Supplier<Integer> PRODUCER_GAUGE = NUM_PRODUCERS::get;\n \n-  private static final int TIME_OUT = 2000;\n+  private static final int CLOSE_TIME_OUT_MS = 2000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MjAzNw=="}, "originalCommit": {"oid": "4eeb40a05edb60202a836d4f180db91ad8119635"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1023, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}