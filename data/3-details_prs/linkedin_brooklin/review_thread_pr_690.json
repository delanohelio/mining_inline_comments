{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTE2NTk3", "number": 690, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyNTo0NlrODmiMKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyNTo0NlrODmiMKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzMyNjQ5OnYy", "diffSide": "RIGHT", "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoyNTo0NlrOF0AW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowODoxMlrOF0YlTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA==", "bodyText": "Is there no way to do this using testng instead of adding a junit dependency?", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390076144", "createdAt": "2020-03-10T03:25:46Z", "author": {"login": "somandal"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NzE5Mw==", "bodyText": "Updated the comment. Mockito uses junit underneath and is compiled using V4.X. We are getting junit transitively and is pointing to 3.8.1. So, it hits ClassNotFoundError.", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390077193", "createdAt": "2020-03-10T03:30:42Z", "author": {"login": "vmaheshw"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA=="}, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NzMyMw==", "bodyText": "got it.", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390077323", "createdAt": "2020-03-10T03:31:22Z", "author": {"login": "somandal"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA=="}, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2NTMyNA==", "bodyText": "Quick question. How do we make sure its called within 30 seconds? Also how did we come up with the number 30s? Will this not fail in the future due to timeout?", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390465324", "createdAt": "2020-03-10T16:56:59Z", "author": {"login": "vishwajith-s"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA=="}, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2NzA1Mw==", "bodyText": "After becoming leader, coordinator does assignment and then cleanup. Unit-tests are not heavy. So, the operations should finish within 30 sec. 30 sec is used for other operations in the tests as well. For reference, in intellij and gradlew this test finishes within 1 sec.", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390467053", "createdAt": "2020-03-10T16:59:20Z", "author": {"login": "vmaheshw"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA=="}, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MzAzOQ==", "bodyText": "Cool! Interesting. I would prefer if we avoided depending on timeouts in unit tests.  It's fine for now. LGTM.", "url": "https://github.com/linkedin/brooklin/pull/690#discussion_r390473039", "createdAt": "2020-03-10T17:08:12Z", "author": {"login": "vishwajith-s"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2555,7 +2556,7 @@ public void testCoordinatorLeaderCleanupTasksPostElection() throws Exception {\n     instance1.stop();\n     Assert.assertTrue(PollUtils.poll(() -> instance2.getIsLeader().getAsBoolean(), 100, 30000));\n     verify(spyZkAdapter1, times(0)).cleanUpOrphanConnectorTasks(anyBoolean());\n-    verify(spyZkAdapter2, times(1)).cleanUpOrphanConnectorTasks(anyBoolean());\n+    verify(spyZkAdapter2, timeout(30000).times(1)).cleanUpOrphanConnectorTasks(anyBoolean());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NjE0NA=="}, "originalCommit": {"oid": "91fa76621367c08b749f6418371a7081f4906eb9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 965, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}