{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjM2NzQw", "number": 681, "title": "Deleting connector task nodes shouldn't do an ls", "bodyText": "Task node deletion does not require reading all connector task nodes. If\ntop level directories get too heavy an ls on the node will start failing\ndue to jute.maxbuffer limits on zookeeper and we will not successfully\ndelete nodes because of that causing a huge set of stale tasks to get\nbuilt up further adding to the issue of growing tasks nodes under one top\nlevel node. Change also adds a couple of constructors in zkclient and\nzkadaper to override operation retry ms which I was planning to use in\nunit-test, however the UT did not pan out and I thought it might come of\nuse later, so leaving those constructors in place.", "createdAt": "2020-02-07T22:59:31Z", "url": "https://github.com/linkedin/brooklin/pull/681", "merged": true, "mergeCommit": {"oid": "860d493ef30fda0bd8487eed44ed171f620e722f"}, "closed": true, "closedAt": "2020-02-11T23:10:01Z", "author": {"login": "DEEPTHIKORAT"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCHY22gH2gAyMzcyNjM2NzQwOjNlZGE5NGMyZDkzZmQ4ZjI2M2UyNzk4ODUzZWM4YzdkZjk4YjQzZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDZ76FgFqTM1NzA2MDE0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc", "author": {"user": {"login": "DEEPTHIKORAT", "name": "Deepthi Sridharan"}}, "url": "https://github.com/linkedin/brooklin/commit/3eda94c2d93fd8f263e2798853ec8c7df98b43dc", "committedDate": "2020-02-07T22:50:25Z", "message": "Deleting connector task nodes shouldn't do an ls\n\nTask node deletion does not require reading all connector task nodes. If\ntop level directories get too heavy an ls on the node will start failing\ndue to jute.maxbuffer limits on zookeeper and we will not successfully\ndelete nodes because of that causing a huge set of stale tasks to get\nbuilt up further adding to the issue of growing tasks nodes under one top\nlevel node. Change also adds a couple of constructors in zkclient and\nzkadaper to override operation retry ms which I was planning to use in\nunit-test, however the UT did not pan out and I thought it might come of\nuse later, so leaving those constructors in place."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTcyNzMw", "url": "https://github.com/linkedin/brooklin/pull/681#pullrequestreview-355572730", "createdAt": "2020-02-08T22:38:40Z", "commit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "state": "DISMISSED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQyMjozODo0MFrOFnSUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQwMDozMzoyNlrOFnSsxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczODk5Nw==", "bodyText": "Not your fault nit: replace deprecated w/ stale or expired?", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376738997", "createdAt": "2020-02-08T22:38:40Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -364,32 +384,26 @@ public boolean updateDatastream(Datastream datastream) {\n \n   /**\n    * Delete ZooKeeper znodes for all datastream tasks belonging to a group with a specified task prefix\n-   * @param connectors Connectors to look under for datastream tasks to delete\n+   * @param connector Connector to which the datastream tasks with the task prefix belong\n    * @param taskPrefix Task prefix of the datastream tasks to be deleted\n    */\n-  public void deleteTasksWithPrefix(Set<String> connectors, String taskPrefix) {\n+  public void deleteTasksWithPrefix(String connector, String taskPrefix) {\n     Set<String> tasksToDelete = _liveTaskMap.values()\n         .stream()\n         .flatMap(Collection::stream)\n-        .filter(x -> x.getTaskPrefix().equals(taskPrefix))\n+        .filter(x -> x.getTaskPrefix().equals(taskPrefix) && x.getConnectorType().equals(connector))\n         .map(DatastreamTask::getDatastreamTaskName)\n         .collect(Collectors.toSet());\n \n-    for (String connector : connectors) {\n-      Set<String> allTasks = new HashSet<>(_zkclient.getChildren(KeyBuilder.connector(_cluster, connector)));\n-      List<String> deadTasks = allTasks.stream().filter(tasksToDelete::contains).collect(Collectors.toList());\n-\n-      if (deadTasks.size() > 0) {\n-        LOG.info(\"Cleaning up deprecated connector tasks: {} for connector: {}\", deadTasks, connector);\n-        for (String task : deadTasks) {\n-          deleteConnectorTask(connector, task);\n-        }\n-      }\n+    LOG.info(\"Cleaning up deprecated connector tasks: {} for connector: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0MDc4MA==", "bodyText": "Thank you for cleaning this up. There are more extraneous throws in this file if you're feeling generous \ud83d\ude05", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376740780", "createdAt": "2020-02-08T23:20:08Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -167,7 +169,7 @@ public void testLeaderElection() throws Exception {\n   }\n \n   @Test\n-  public void testStressLeaderElection() throws Exception {\n+  public void testStressLeaderElection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0MTYxMA==", "bodyText": "It would be really neat if we ordered the ctors of this class least-permissive-first and had each one call the one right below it, i.e.\n  /**\n   * Constructor for ZkClient\n   * @param zkServers the ZooKeeper connection String\n   */\n  public ZkClient(String zkServers) {\n    this(zkServers, DEFAULT_SESSION_TIMEOUT);\n  }\n  \n  /**\n   * Constructor for ZkClient\n   * @param zkServers the ZooKeeper connection String\n   * @param sessionTimeout the session timeout in milliseconds\n   */\n  public ZkClient(String zkServers, int sessionTimeout) {\n    this(zkServers, sessionTimeout, DEFAULT_CONNECTION_TIMEOUT);\n  }\n\n  /**\n   * Constructor for ZkClient\n   * @param zkServers the ZooKeeper connection String\n   * @param sessionTimeout the session timeout in milliseconds\n   * @param connectionTimeout the connection timeout in milliseconds\n   */\n  public ZkClient(String zkServers, int sessionTimeout, int connectionTimeout) {\n    this(zkServers, sessionTimeout, connectionTimeout, DEFAULT_OPERATION_RETRY_TIMEOUT);\n  }\n\n  /**\n   * Constructor for ZkClient\n   * @param zkServers the ZooKeeper connection String\n   * @param sessionTimeout the session timeout in milliseconds\n   * @param connectionTimeout the connection timeout in milliseconds\n   * @param operationRetryTimeoutMs The maximum amount of time, in milli seconds, each failed\n   *                                operation is retried. A value lesser than 0 is considered as\n   *                                retry forever until a connection has been reestablished.\n   */\n  public ZkClient(String zkServers, int sessionTimeout, int connectionTimeout, int operationRetryTimeoutMs) {\n    super(zkServers, sessionTimeout, connectionTimeout, new ZKStringSerializer(), operationRetryTimeoutMs);\n    _zkSessionTimeoutMs = sessionTimeout;\n  }", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376741610", "createdAt": "2020-02-08T23:37:27Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/zk/ZkClient.java", "diffHunk": "@@ -47,20 +47,34 @@\n    * @param zkServers the ZooKeeper connection String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0MTY5MA==", "bodyText": "Please, append the Ms suffix to all parameters (and their defaults) or remove it from operationRetryTimeoutMs for consistency's sake", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376741690", "createdAt": "2020-02-08T23:39:19Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/zk/ZkClient.java", "diffHunk": "@@ -47,20 +47,34 @@\n    * @param zkServers the ZooKeeper connection String\n    * @param sessionTimeout the session timeout in milliseconds\n    * @param connectionTimeout the connection timeout in milliseconds\n+   * @param operationRetryTimeoutMs The maximum amount of time, in milli seconds, each failed\n+   *                                operation is retried. A value lesser than 0 is considered as\n+   *                                retry forever until a connection has been reestablished.\n    */\n-  public ZkClient(String zkServers, int sessionTimeout, int connectionTimeout) {\n-    super(zkServers, sessionTimeout, connectionTimeout, new ZKStringSerializer());\n \n+  public ZkClient(String zkServers, int sessionTimeout, int connectionTimeout, int operationRetryTimeoutMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0MzU0Nw==", "bodyText": "Just thinking out loud (I'm not sure this is a great suggestion): I often feel a little nervous about such getters. Even though they're only intended for testing, there's not much preventing anyone (in the same package) from using it. Of course it can also be easily made accessible everywhere by just marking it public.\nWould it be better if we introduce a visible-for-testing package private createZkClient() that tests can override to get access to the ZkClient? This would make _zkClient itself inaccessible through the API of ZkAdapter, but it also means we'd have to introduce a sub-type in tests (slightly tedious but that's exactly the point; make it more work to get access to ZkClient).\n/***************** ZkAdapter.java *****************/\n\npublic void connect() {\n    ...\n    _zkclient = createZkClient();\n    ...\n}\n\n@VisibleForTesting\nZkClient createZkClient() {\n    return new ZkClient(_zkServers, _sessionTimeout, _connectionTimeout, _operationRetryMs);\n}\n\n/***************** TestZkAdapter.java *****************/\n\nprivate SpyingZkAdapter createZkAdapter(String testCluster) {\n    return new SpyingZkAdapter(_zkConnectionString, testCluster, defaultTransportProviderName,  ZkClient.DEFAULT_SESSION_TIMEOUT,\n        ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n}\n\nprivate static class SpyingZkAdapter extends ZkAdapter {\n    private ZkClient _zkClient;\n\n    public SpyingZkAdapter(String zkConnectionString, String testCluster, String defaultTransportProviderName,\n        int defaultSessionTimeout, int defaultConnectionTimeout, ZkAdapterListener listener) {\n        super(zkConnectionString, testCluster, defaultTransportProviderName, defaultSessionTimeout,\n            defaultConnectionTimeout, listener);\n    }\n\n    @Override\n    ZkClient createZkClient() {\n        _zkClient = spy(super.createZkClient());\n        return _zkClient;\n    }\n\n    public ZkClient getZkClient() {\n        return _zkClient;\n    }\n}\n\n@Test\npublic void testDeleteTasksWithPrefix() throws IOException {\n    ...\n    // Set operation timeout of 5secs so ZK doesn't end up retrying for the longer default\n    SpyingZkAdapter adapter =  createZkAdapter(testCluster);\n    ...\n}", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376743547", "createdAt": "2020-02-09T00:11:38Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1306,6 +1320,11 @@ public void handleDataDeleted(String dataPath) throws Exception {\n     }\n   }\n \n+  @VisibleForTesting\n+  ZkClient getZkClient() {\n+    return _zkclient;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NDgyMg==", "bodyText": "please add Timeout in the name", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376744822", "createdAt": "2020-02-09T00:23:56Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -110,6 +111,7 @@\n   private final String _cluster;\n   private final int _sessionTimeout;\n   private final int _connectionTimeout;\n+  private final int _operationRetryMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc0NTE1OQ==", "bodyText": "\ud83e\udd28\nI have no idea why the code was going through every connector here. This would only make sense if it were possible for datastreams under different connectors to be deduped. In fact, the caller of this function \u2014 i.e. Coordinator.hardDeleteDatastream() \u2014 seems to be interested in deleting the tasks associated with a specific datastream/group/task-prefix (which would naturally be associated with a single connector). However, the (old) code below seems to be deleting tasks underneath all connectors. Wouldn't this cause us to delete innocent tasks that have not necessarily expired under other connectors just because the names of those tasks happened to collide with expired task names? What am I missing?", "url": "https://github.com/linkedin/brooklin/pull/681#discussion_r376745159", "createdAt": "2020-02-09T00:33:26Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -364,32 +384,26 @@ public boolean updateDatastream(Datastream datastream) {\n \n   /**\n    * Delete ZooKeeper znodes for all datastream tasks belonging to a group with a specified task prefix\n-   * @param connectors Connectors to look under for datastream tasks to delete\n+   * @param connector Connector to which the datastream tasks with the task prefix belong\n    * @param taskPrefix Task prefix of the datastream tasks to be deleted\n    */\n-  public void deleteTasksWithPrefix(Set<String> connectors, String taskPrefix) {\n+  public void deleteTasksWithPrefix(String connector, String taskPrefix) {\n     Set<String> tasksToDelete = _liveTaskMap.values()\n         .stream()\n         .flatMap(Collection::stream)\n-        .filter(x -> x.getTaskPrefix().equals(taskPrefix))\n+        .filter(x -> x.getTaskPrefix().equals(taskPrefix) && x.getConnectorType().equals(connector))\n         .map(DatastreamTask::getDatastreamTaskName)\n         .collect(Collectors.toSet());\n \n-    for (String connector : connectors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTg5MDAw", "url": "https://github.com/linkedin/brooklin/pull/681#pullrequestreview-356189000", "createdAt": "2020-02-10T19:08:21Z", "commit": {"oid": "3eda94c2d93fd8f263e2798853ec8c7df98b43dc"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e236183632445f0cc1bef95f747e6e452d84051a", "author": {"user": {"login": "DEEPTHIKORAT", "name": "Deepthi Sridharan"}}, "url": "https://github.com/linkedin/brooklin/commit/e236183632445f0cc1bef95f747e6e452d84051a", "committedDate": "2020-02-11T20:38:35Z", "message": "Fixes from code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaaa60321f73a43512b58abfbbc0de2c525e5ebf", "author": {"user": {"login": "DEEPTHIKORAT", "name": "Deepthi Sridharan"}}, "url": "https://github.com/linkedin/brooklin/commit/eaaa60321f73a43512b58abfbbc0de2c525e5ebf", "committedDate": "2020-02-11T21:42:04Z", "message": "Few more fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDIzODgy", "url": "https://github.com/linkedin/brooklin/pull/681#pullrequestreview-357023882", "createdAt": "2020-02-11T21:52:36Z", "commit": {"oid": "eaaa60321f73a43512b58abfbbc0de2c525e5ebf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDYwMTQ0", "url": "https://github.com/linkedin/brooklin/pull/681#pullrequestreview-357060144", "createdAt": "2020-02-11T23:00:55Z", "commit": {"oid": "eaaa60321f73a43512b58abfbbc0de2c525e5ebf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 367, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}