{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NDEwNjEz", "number": 748, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1OTowNlrOEebbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNDowNFrOEebhjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQyMDg2OnYy", "diffSide": "RIGHT", "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1OTowNlrOHKEzmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDozNzoyNFrOHKIYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjU1NA==", "bodyText": "nit: 2020 instead of 2019", "url": "https://github.com/linkedin/brooklin/pull/748#discussion_r480326554", "createdAt": "2020-08-31T18:59:06Z", "author": {"login": "vmaheshw"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd35ef7e3212e27687722616ab0591893ea258be"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NTE3OQ==", "bodyText": "same nit for the test file", "url": "https://github.com/linkedin/brooklin/pull/748#discussion_r480385179", "createdAt": "2020-08-31T20:37:24Z", "author": {"login": "somandal"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNjU1NA=="}, "originalCommit": {"oid": "dd35ef7e3212e27687722616ab0591893ea258be"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQzNjk1OnYy", "diffSide": "RIGHT", "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNDowNFrOHKE9Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTozNjozNVrOHKTIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTA1OQ==", "bodyText": "Can you please document the benefit of converting thread to future instead of directly checking the thread status?", "url": "https://github.com/linkedin/brooklin/pull/748#discussion_r480329059", "createdAt": "2020-08-31T19:04:04Z", "author": {"login": "vmaheshw"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang3.Validate;\n+\n+\n+/**\n+ * A {@link Future} impl that wraps a {@link Thread}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd35ef7e3212e27687722616ab0591893ea258be"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NDYwOA==", "bodyText": "+1", "url": "https://github.com/linkedin/brooklin/pull/748#discussion_r480384608", "createdAt": "2020-08-31T20:36:18Z", "author": {"login": "somandal"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang3.Validate;\n+\n+\n+/**\n+ * A {@link Future} impl that wraps a {@link Thread}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTA1OQ=="}, "originalCommit": {"oid": "dd35ef7e3212e27687722616ab0591893ea258be"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU2MTMyNw==", "bodyText": "There's no inherent benefit. We're just adapting one API to another, i.e. we have a utility (FutureUtils) that checks if a Future is done after a timeout and we're using that to verify if connector tasks stop within a specific duration. We need that same logic for situations when we're working with threads not futures (e.g. MySQLBinaryLogConnector). There's no benefit to using this wrapper as opposed to using an executor service to check if a thread is still alive after a specific duration (other than code reuse).\nMy initial intent was to keep ThreadFuture private within the MySQL connector module but you suggested it may be useful as a general purpose utility.", "url": "https://github.com/linkedin/brooklin/pull/748#discussion_r480561327", "createdAt": "2020-09-01T01:36:35Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/ThreadFuture.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang3.Validate;\n+\n+\n+/**\n+ * A {@link Future} impl that wraps a {@link Thread}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTA1OQ=="}, "originalCommit": {"oid": "dd35ef7e3212e27687722616ab0591893ea258be"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 876, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}