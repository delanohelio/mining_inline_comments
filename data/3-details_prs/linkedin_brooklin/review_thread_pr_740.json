{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MTE2Mzky", "number": 740, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxNToxNVrOEXSKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNTo1MFrOEZRmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODUwMjkzOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxNToxNVrOG-_QXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODowNDo0M1rOG_DRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwMTI3Ng==", "bodyText": "Since this is an abstract class which needs to be extended by actual Connectors, can we take a metrics prefix as input and use that to construct the metrics instead? This way, the metrics will be more meaningful, and it'll be easier to differentiate between different connectors that use this as their base.\nYou can look at AbstractKafkaBasedConnectorTask to see how connector tasks that extend it construct and pass their metrics prefix. We do want both the extending class name and the connector name to be part of the metrics prefix. This is because we have many connectors which use the same class.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468701276", "createdAt": "2020-08-11T16:15:15Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -73,6 +77,11 @@\n   private static final Duration SHUTDOWN_EXECUTOR_SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n   static final Duration MIN_DAEMON_THREAD_STARTUP_DELAY = Duration.ofMinutes(2);\n \n+  private static final String MODULE = AbstractKafkaConnector.class.getSimpleName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2NzA2NA==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468767064", "createdAt": "2020-08-11T18:04:43Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -73,6 +77,11 @@\n   private static final Duration SHUTDOWN_EXECUTOR_SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n   static final Duration MIN_DAEMON_THREAD_STARTUP_DELAY = Duration.ofMinutes(2);\n \n+  private static final String MODULE = AbstractKafkaConnector.class.getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwMTI3Ng=="}, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODUxNTM1OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxODoyNFrOG-_YPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODoxMjo1NVrOG_DjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwMzI5Mg==", "bodyText": "Since this is an abstract class, you need to fix all the extenders of this class to call super.getMetricsInfos() in their override of getMetricsInfos(), along with their existing code to return all metrics, otherwise this metric won't be picked up by them. Any in-house Connectors need to be fixed too.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468703292", "createdAt": "2020-08-11T16:18:24Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +564,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MTU4NQ==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468771585", "createdAt": "2020-08-11T18:12:55Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +564,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwMzI5Mg=="}, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU2MDQwOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyOToxMFrOG-_z9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyOToxMFrOG-_z9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMDM4OA==", "bodyText": "Connector already implements MetricsAware, so you don't need to here", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468710388", "createdAt": "2020-08-11T16:29:10Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -64,7 +68,7 @@\n  *  <li>Restarting stalled {@link DatastreamTask}s</li>\n  * </ul>\n  */\n-public abstract class AbstractKafkaConnector implements Connector, DiagnosticsAware {\n+public abstract class AbstractKafkaConnector implements Connector, DiagnosticsAware, MetricsAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU4NzI5OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNTo1OFrOG_AEkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNTowMVrOHBB4Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY0Mg==", "bodyText": "@ahmedahamid is there a recommendation on when to use a gauge vs. a counter?", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468714642", "createdAt": "2020-08-11T16:35:58Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +239,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(MODULE, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MTQyMg==", "bodyText": "Here's what I found: #740 (comment). GitHub started allowing me to leave responses on comments after I posted my own review.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r470841422", "createdAt": "2020-08-14T20:05:01Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +239,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(MODULE, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY0Mg=="}, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYyMDgzOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NDo1NlrOG_AZsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NDo1NlrOG_AZsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDA0OQ==", "bodyText": "Once you move to using the metrics prefix, you'll need to modify this. Plus you should use a regex for matching:\n<metrics prefix> + MetricsAware.KEY_REGEX + <metrics name>", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468720049", "createdAt": "2020-08-11T16:44:56Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +564,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {\n+    List<BrooklinMetricInfo> metrics = new ArrayList<>();\n+    metrics.add(new BrooklinMeterInfo(buildMetricName(NUM_TASK_RESTARTS)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYzNzkxOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0OToyOFrOG_AkpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0OToyOFrOG_AkpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjg1Mg==", "bodyText": "MetricsAware is redundant here; Connector is MetricsAware", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468722852", "createdAt": "2020-08-11T16:49:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -64,7 +68,7 @@\n  *  <li>Restarting stalled {@link DatastreamTask}s</li>\n  * </ul>\n  */\n-public abstract class AbstractKafkaConnector implements Connector, DiagnosticsAware {\n+public abstract class AbstractKafkaConnector implements Connector, DiagnosticsAware, MetricsAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODg4NTExOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1NzowMVrOG_DAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzozMzo0N1rOHA8-0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2MjY0Nw==", "bodyText": "Not strictly related to your PR but would be nice to do: you can change the visibility of this field to protected so subtypes can utilize it. I know of one extender that currently needs it, i.e. KafkaMirrorMakerConnector, and it's maintaining a similar private field. It would be nice to have extenders use this field instead.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468762647", "createdAt": "2020-08-11T17:57:01Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -73,6 +77,11 @@\n   private static final Duration SHUTDOWN_EXECUTOR_SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n   static final Duration MIN_DAEMON_THREAD_STARTUP_DELAY = Duration.ofMinutes(2);\n \n+  private static final String MODULE = AbstractKafkaConnector.class.getSimpleName();\n+  private static final String NUM_TASK_RESTARTS = \"numTaskRestarts\";\n+\n+  private final DynamicMetricsManager _dynamicMetricsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2MTE2OQ==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r470761169", "createdAt": "2020-08-14T17:33:47Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -73,6 +77,11 @@\n   private static final Duration SHUTDOWN_EXECUTOR_SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n   static final Duration MIN_DAEMON_THREAD_STARTUP_DELAY = Duration.ofMinutes(2);\n \n+  private static final String MODULE = AbstractKafkaConnector.class.getSimpleName();\n+  private static final String NUM_TASK_RESTARTS = \"numTaskRestarts\";\n+\n+  private final DynamicMetricsManager _dynamicMetricsManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc2MjY0Nw=="}, "originalCommit": {"oid": "d339fe5024579db9dbcb9c64b476a4b5c39a2395"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTA0MTc5OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODo0MjowMVrOG_Eiow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTowMTowMlrOHB6tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4Nzg3NQ==", "bodyText": "Do we need to add regex here? Is this right? @somandal @ahmedahamid", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468787875", "createdAt": "2020-08-11T18:42:01Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +245,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(_metricsPrefix, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4MzU2MA==", "bodyText": "It's almost correct.\n\n\nThe metric's MBean name will be <_metricsPrefix>.<NUM_TASK_RESTARTS>\n\n\nThe corresponding BrooklinMetricInfo object we return from getMetricInfos() will have a nameOrRegex of: <concreteClassName>.<_metricsPrefix>([-.\\w\\d]+)\\.<NUM_TASK_RESTARTS>\nThis is the value returned by:\nbuildMetricName(_metricsPrefix + MetricsAware.KEY_REGEX + NUM_TASK_RESTARTS)\nIn case you're wondering, the <concreteClassName> prefix above is prepended by buildMetricName() itself (that's what this overload does).\n\n\nThe way it works is that the regex in (2) has to match the metric's MBean in (1), which won't happen right now because the regex (a) has an extra <concreteClassName> prefix and (b) expects a string (i.e. ([-.\\w\\d]+)\\.) between <_metricsPrefix> and <NUM_TASK_RESTARTS>\n\n\nIn fact, they do not match in TestAbstractKafkaConnector.testConnectorRestartCalled() when I step into it with a debugger. The metric's MBean is test.TestKafkaConnector.numTaskRestarts but the BrooklinMetricInfo's nameOrRegex is TestKafkaConnector.test.TestKafkaConnector([-.\\w\\d]+)\\.numTaskRestarts\n\n\nThere's a few different ways to resolve this but let me suggest this: how about we let AbstractKafkaConnector itself decide the metrics prefix?\n\nThis class has all the necessary ingredients; it knows the connector name and it can get the concrete class name by calling this.getClass().getSimpleName()\nDoing that would eliminate the redundancy entailed by having every subtype call generateMetricsPrefix() to pass its return value to super.\n\nIf you like the idea, here are some more details:\n\nIt won't be straightforward/ideal to use regexes with the metric you're adding because its name has no variable parts (like a datastream or topic name), it's just <metricsPrefix>.<NUM_TASK_RESTARTS>\nConsequently, you can use _dynamicMetricsManager.registerMetric() to create the metric's MBean (e.g. in the ctor or when start() is called), use _dynamicMetricsManager.createOrUpdate() when you need to update the metric, and return a BrooklinMetricInfo object from getMetricInfos() whose nameOrRegex is decided by buildMetricName(_metricsPrefix, NUM_TASK_RESTARTS)\nThis way, the metric's MBean and the corresponding BrooklinMetricInfo will both have the name <metricsPrefix>.<NUM_TASK_RESTARTS>\nOne last thing to note is that the specific BrooklinMetricInfo subtype you use in getMetricInfos() must match the metric type (e.g. BrooklinMeterInfo for meters, BrooklinCounterInfo for counters ... etc).", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r468983560", "createdAt": "2020-08-12T03:28:01Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +245,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(_metricsPrefix, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4Nzg3NQ=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3MjYxMQ==", "bodyText": "Thanks for the detailed explanation. I appreciate it.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471772611", "createdAt": "2020-08-17T21:01:02Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +245,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(_metricsPrefix, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc4Nzg3NQ=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzA0NTY0OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzowMjozNlrOG_qZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyODoyNlrOHB5w8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwODE1Nw==", "bodyText": "Sonam left me a question about counters vs. gauges but GitHub won't allow me to comment on it for some reason \u2014 they're roughly comparable but this ingraphs wiki page seems to suggest we should be using gauges for values that would increase and decrease over time (which seems to be the case for the metric this PR is adding). A similar comment has been made in response to the same question on the repo of the metrics library we're using.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469408157", "createdAt": "2020-08-12T17:02:36Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +245,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(_metricsPrefix, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NzA0Mw==", "bodyText": "As discussed made this a Gauge.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471757043", "createdAt": "2020-08-17T20:28:26Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -229,6 +245,7 @@ protected void restartDeadTasks() {\n         _logger.warn(\"Creating a new connector task for the datastream task {}\", datastreamTask);\n         _runningTasks.put(datastreamTask, createKafkaConnectorTask(datastreamTask));\n       });\n+      _dynamicMetricsManager.createOrUpdateCounter(_metricsPrefix, NUM_TASK_RESTARTS, deadDatastreamTasks.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwODE1Nw=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzA3NTY0OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxMTowOVrOG_qs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDozMTowMVrOHB510A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMzA5OQ==", "bodyText": "This should be BrooklinCounterInfo if the metric is a counter.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469413099", "createdAt": "2020-08-12T17:11:09Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {\n+    List<BrooklinMetricInfo> metrics = new ArrayList<>();\n+    metrics.add(new BrooklinMeterInfo(buildMetricName(_metricsPrefix + MetricsAware.KEY_REGEX + NUM_TASK_RESTARTS)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNzgzMw==", "bodyText": "@ahmedahamid instead of using buildMetricName() here, which prepends the class, can we instead do what other  similar metrics do? One example from KafkaMirrorMakerConnectorTask:\n    metrics.add(new BrooklinMeterInfo(generateMetricsPrefix(connectorName, CLASS_NAME) + MetricsAware.KEY_REGEX + TASK_LOCK_ACQUIRE_ERROR_RATE));", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469417833", "createdAt": "2020-08-12T17:18:51Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {\n+    List<BrooklinMetricInfo> metrics = new ArrayList<>();\n+    metrics.add(new BrooklinMeterInfo(buildMetricName(_metricsPrefix + MetricsAware.KEY_REGEX + NUM_TASK_RESTARTS)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMzA5OQ=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4MzcyNA==", "bodyText": "Discussed with @ahmedahamid offline, and we don't need a MetricsAware.KEY_REGEX here, since we don't have any dynamic element in the metric name. For the connector task metrics on the other hand, we do have the datastream or topic name as a dynamic part.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469483724", "createdAt": "2020-08-12T19:15:48Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {\n+    List<BrooklinMetricInfo> metrics = new ArrayList<>();\n+    metrics.add(new BrooklinMeterInfo(buildMetricName(_metricsPrefix + MetricsAware.KEY_REGEX + NUM_TASK_RESTARTS)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMzA5OQ=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1ODI4OA==", "bodyText": "@somandal discussed this with @ahmedahamid . We do not need Regex here as we do not have any variable parts here. But I made this a Gauge.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471758288", "createdAt": "2020-08-17T20:31:01Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {\n+    List<BrooklinMetricInfo> metrics = new ArrayList<>();\n+    metrics.add(new BrooklinMeterInfo(buildMetricName(_metricsPrefix + MetricsAware.KEY_REGEX + NUM_TASK_RESTARTS)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMzA5OQ=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzExMTQyOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoyMDoyN1rOG_rDUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTowNjowMlrOHB63Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxODgzMg==", "bodyText": "@ahmedahamid and @vishwajith-s I just noticed that callers of this pass the \"connectorName\" when fetching metrics from the connectorTask. Should we also only return metrics for a given \"connectorName\" here?", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469418832", "createdAt": "2020-08-12T17:20:27Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4MzExMQ==", "bodyText": "@vishwajith-s had a chat with @ahmedahamid about this offline. We do not need to pass the \"connectorName\" here, as the only metric available is the one we added as part of this PR and it is keyed based on the \"connectorName\". For the tasks, it looks like the method needed to be static for some reason, or it was an oversight, which is why the \"connectorName\" is passed.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r469483111", "createdAt": "2020-08-12T19:14:42Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxODgzMg=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3MzM4MA==", "bodyText": "@somandal with the recent changes, this may not be required.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471773380", "createdAt": "2020-08-17T21:02:37Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxODgzMg=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NTAzOA==", "bodyText": "connector name is being passed as part of metrics prefix", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471775038", "createdAt": "2020-08-17T21:06:02Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -553,4 +570,12 @@ public AbstractKafkaBasedConnectorTask getConnectorTask() {\n       return _task;\n     }\n   }\n+\n+  @Override\n+  public List<BrooklinMetricInfo> getMetricInfos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxODgzMg=="}, "originalCommit": {"oid": "d4e1c7ad61bca05abf4d58a8fc07f05b323d26f9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTM1MDA1OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1ODoxNlrOHB_qHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1ODoxNlrOHB_qHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MzU5OQ==", "bodyText": "nit: prefer using Apache commons lang3 (just change the import to lang3)\nThis would entail adding the following dependency in build.gradle under\nproject(':datastream-kafka-connector') {\n    ....\n    compile \"org.apache.commons:commons-lang3:$commonslang3Version\"", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471853599", "createdAt": "2020-08-18T00:58:16Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -28,6 +28,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88358a12e0d66fd2a321ddd485b6650806740e6c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTM1MzA0OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1OTo1M1rOHB_r4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1OTo1M1rOHB_r4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NDA0OQ==", "bodyText": "Could you please have KafkaMirrorMakerConnector use this field instead of the private one it's maintaining against the same object (KafkaMirrorMakerConnector.java line 77)?", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471854049", "createdAt": "2020-08-18T00:59:53Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -73,6 +77,11 @@\n   private static final Duration SHUTDOWN_EXECUTOR_SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n   static final Duration MIN_DAEMON_THREAD_STARTUP_DELAY = Duration.ofMinutes(2);\n \n+  private static final String NUM_TASK_RESTARTS = \"numTaskRestarts\";\n+  private long _numTaskRestarts = 0;\n+  private final String _metricsPrefix;\n+\n+  protected final DynamicMetricsManager _dynamicMetricsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88358a12e0d66fd2a321ddd485b6650806740e6c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTM2MjA1OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTowNDo0MlrOHB_w_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTowNDo0MlrOHB_w_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1NTM1Nw==", "bodyText": "_numTaskRestarts will be accessed by different threads (for reading and writing). I suggest marking it volatile.", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471855357", "createdAt": "2020-08-18T01:04:42Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaConnector.java", "diffHunk": "@@ -118,6 +127,10 @@ public AbstractKafkaConnector(String connectorName, Properties config, GroupIdCo\n     _clusterName = clusterName;\n     _config = new KafkaBasedConnectorConfig(config);\n     _groupIdConstructor = groupIdConstructor;\n+    _dynamicMetricsManager = DynamicMetricsManager.getInstance();\n+    _metricsPrefix = StringUtils.isBlank(connectorName) ? this.getClass().getSimpleName()\n+        : connectorName + \".\" + this.getClass().getSimpleName();\n+    _dynamicMetricsManager.registerGauge(_metricsPrefix, NUM_TASK_RESTARTS, () -> _numTaskRestarts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88358a12e0d66fd2a321ddd485b6650806740e6c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTM4Mjk2OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/TestAbstractKafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNTo1MFrOHB_82g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNTo1MFrOHB_82g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODM5NA==", "bodyText": "By default, this verification won't include metrics that do not start with the class name of the metricsAware object in question, i.e. it won't consider the metric test.TestKafkaConnector.numTaskRestarts because it doesn't start with TestKafkaConnector. To have it include that metric, you'll need to pass in a predicate that explicitly includes such metrics, e.g. s -> s.startsWith(\"test\")", "url": "https://github.com/linkedin/brooklin/pull/740#discussion_r471858394", "createdAt": "2020-08-18T01:15:50Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/TestAbstractKafkaConnector.java", "diffHunk": "@@ -50,6 +62,16 @@ public void testConnectorRestartCalled() {\n         Duration.ofSeconds(10).toMillis());\n     Assert.assertTrue(connector.getCreateTaskCalled() >= 3);\n \n+    // Verify metric for nanny task restarts get incremented\n+    Gauge<Long> metric = DynamicMetricsManager.getInstance()\n+        .getMetric(\"test\" + \".\" + TestKafkaConnector.class.getSimpleName() + \".\" + \"numTaskRestarts\");\n+    Assert.assertNotNull(metric);\n+    Assert.assertEquals(metric.getValue(), Long.valueOf(1));\n+\n+    // Verify that metrics created through DynamicMetricsManager match those returned by getMetricInfos() given the\n+    // connector name of interest.\n+    MetricsTestUtils.verifyMetrics(connector, DynamicMetricsManager.getInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88358a12e0d66fd2a321ddd485b6650806740e6c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1049, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}