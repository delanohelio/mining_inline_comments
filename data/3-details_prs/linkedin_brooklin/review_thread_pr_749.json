{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTQyMTY2", "number": 749, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyOTo0MlrOEh4W_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjozMDowMVrOEh4XUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTYxODUzOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyMulticastStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyOTo0MlrOHPcdlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjoyOTo0MlrOHPcdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NzAxMw==", "bodyText": "nit: ToMoreThanOneInstance", "url": "https://github.com/linkedin/brooklin/pull/749#discussion_r485957013", "createdAt": "2020-09-09T22:29:42Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyMulticastStrategy.java", "diffHunk": "@@ -282,6 +282,23 @@ public void testDontCreateNewTasksWhenInstanceChanged() {\n     Assert.assertTrue(oldAssignmentTasks.containsAll(newAssignmentTasks));\n   }\n \n+  @Test\n+  public void testSameTaskIsNotAssignedToAnyTwoInstances() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20615997279acbc5238ab5720484cdc58017f5fa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTYxOTM5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyMulticastStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjozMDowMVrOHPceAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjozMDowMVrOHPceAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk1NzEyMg==", "bodyText": "Please add a comment explaining why the test is doing this step.", "url": "https://github.com/linkedin/brooklin/pull/749#discussion_r485957122", "createdAt": "2020-09-09T22:30:01Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyMulticastStrategy.java", "diffHunk": "@@ -282,6 +282,23 @@ public void testDontCreateNewTasksWhenInstanceChanged() {\n     Assert.assertTrue(oldAssignmentTasks.containsAll(newAssignmentTasks));\n   }\n \n+  @Test\n+  public void testSameTaskIsNotAssignedToAnyTwoInstances() {\n+    String[] instances = new String[]{\"instance1\", \"instance2\", \"instance3\"};\n+    int numDatastreams = 5;\n+    List<DatastreamGroup> datastreams = generateDatastreams(\"ds\", numDatastreams);\n+    StickyMulticastStrategy strategy = new StickyMulticastStrategy(Optional.empty(), Optional.empty());\n+    Map<String, Set<DatastreamTask>> assignment =\n+        strategy.assign(datastreams, Arrays.asList(instances), new HashMap<>());\n+    assignment.get(\"instance1\").addAll(assignment.get(\"instance2\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20615997279acbc5238ab5720484cdc58017f5fa"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 878, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}