{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTA0NjU1", "number": 734, "title": "Add Future Utils Library", "bodyText": "We need a utility to abort the future after a specified duration. This is a general purpose library to add time bound to any Future. This will help in cancelling the connector task Future within specified duration.", "createdAt": "2020-07-22T06:13:31Z", "url": "https://github.com/linkedin/brooklin/pull/734", "merged": true, "mergeCommit": {"oid": "36392b5c5565432ac299f19494e14aa0f7334b82"}, "closed": true, "closedAt": "2020-07-27T21:51:45Z", "author": {"login": "vmaheshw"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABboAf5CAH2gAyNDU0OTA0NjU1OmMzMWNkNGExNWNjOGRkNjliMGE2NTNkYmU0MjAxZGU5MzRlYTZkNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5I_PggFqTQ1NjE1OTQ0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "author": {"user": {"login": "vmaheshw", "name": "Vaibhav Maheshwari"}}, "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "committedDate": "2019-11-18T20:06:44Z", "message": "Merge pull request #1 from linkedin/master\n\nPull latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221646fde4fbf6d4d5301a2b4dc6aa0dc7194906", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/221646fde4fbf6d4d5301a2b4dc6aa0dc7194906", "committedDate": "2020-07-21T18:00:40Z", "message": "Merge branch 'master' of github.com:vmaheshw/Brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/5c47b4d03f1f1b4063531a0390d1a8be8d302274", "committedDate": "2020-07-22T06:10:51Z", "message": "Add FutureUtils library"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNDA4Nzcy", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-453408772", "createdAt": "2020-07-22T15:03:56Z", "commit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowMzo1N1rOG1mtMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0NzowMVrOG1rRiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MTg3Mw==", "bodyText": "Please add a private ctor", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458861873", "createdAt": "2020-07-22T15:03:57Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2Mzg3NQ==", "bodyText": "Pool size is too generous, especially if we consider what these threads are used for; they're only meant for fairly rapid checks. The thread pool queues work if no thread is idle. I'd say give it a modest value (e.g. 4).", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458863875", "createdAt": "2020-07-22T15:06:31Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTQ4NQ==", "bodyText": "I know our discussions have been mostly focused on the specific use-case that motivated the introduction of this API. However, we need to consider how such a fundamental utility will be used in general.\nFor instance:\n\n\nIf I'm calling this API, wouldn't I naturally find it useful if it offered me a way to access the result of futureToAwait in case it completed successfully? This should be fairly straightforward for this API to accomplish because all it takes in this case is calling futureToAwait.get(), sparing the caller this effort.\n\n\nWouldn't it be useful if the returned CompletableFuture communicated the success/failure/cancellation of futureToAwait instead? One of the annoying things about Future in Java is the lack of composability; there's no straightforward way to chain other futures to it. However, this isn't the case with CompletableFuture. So, as a caller, I would imagine composing the returned future to react to success and cancellation/failure of the future I passed. This would allow me to do:\n\n\n    CompletableFuture<?> result = awaitFutureOrCancel(future, timeout);\n    result\n        .exceptionally()   // future didn't complete successfully (threw or got cancelled)\n        .thenRun();        // future completed successfully\nHere's a proposed impl that addresses these two issues:\n  public static <T> CompletableFuture<T> awaitFutureOrCancel(Future<T> future, Duration timeout) {\n    CompletableFuture<T> result = new CompletableFuture<>();\n\n    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n      if (future.isDone()) {\n        try {\n          T t = future.get();\n          result.complete(t);\n        } catch (InterruptedException e) {\n          result.completeExceptionally(e);\n        } catch (ExecutionException e) {\n          result.completeExceptionally(e.getCause());\n        } catch (CancellationException e) {\n          result.cancel(false);\n        }\n      } else {\n        future.cancel(true);\n        result.cancel(false);\n      }\n    }, timeout.toMillis(), TimeUnit.MILLISECONDS);\n    return result;\n  }", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458921485", "createdAt": "2020-07-22T16:25:46Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzA0Nw==", "bodyText": "I'd rather disallow null futureToAwait", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458923047", "createdAt": "2020-07-22T16:27:40Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n+      if ((futureToAwait == null) || futureToAwait.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMDMyMw==", "bodyText": "This comment is purely about naming.\n\nI think it'd be better to rename futureToAwait to just future\nIf you decide to go with an implementation that propagates back the future's result, I'd consider giving the method a different name, one that reflects that it is meant to get the future's result (if possible) after a specific duration (e.g. getIfDoneOrCancel?)\ntimeout is a misleading name for that param cause it implies we may check/finish sooner. We need a name that conveys that this is how much we'll wait (should we call it after?)", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458930323", "createdAt": "2020-07-22T16:36:47Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNTE1Ng==", "bodyText": "The javadocs can be improved for greater accuracy so users don't have to grok the code themselves.\n\nThe description can be something like:\n\n/**\n * Check if {@code future} is done after {@code timeout} ... (and the rest of the story)\n\nFuture to complete/stop - check/cancel?\nbefore aborting future - before checking actually\nWe'd need to document when and how the returned future is completed successfully, completed w/ an exception, or cancelled.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458935156", "createdAt": "2020-07-22T16:44:36Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNTc2OA==", "bodyText": "Change to false; true makes little sense for CompletableFuture", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458935768", "createdAt": "2020-07-22T16:45:27Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n+      if ((futureToAwait == null) || futureToAwait.isDone()) {\n+        result.complete(null);\n+      } else {\n+        boolean cancel = futureToAwait.cancel(true);\n+        if (!cancel) {\n+          result.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNjM4MQ==", "bodyText": "nit: inline", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458936381", "createdAt": "2020-07-22T16:46:29Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n+      if ((futureToAwait == null) || futureToAwait.isDone()) {\n+        result.complete(null);\n+      } else {\n+        boolean cancel = futureToAwait.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNjcxMw==", "bodyText": "nit: invert if/else for simplicity", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458936713", "createdAt": "2020-07-22T16:47:01Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n+      if ((futureToAwait == null) || futureToAwait.isDone()) {\n+        result.complete(null);\n+      } else {\n+        boolean cancel = futureToAwait.cancel(true);\n+        if (!cancel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTQ5MDgz", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-453549083", "createdAt": "2020-07-22T17:49:14Z", "commit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo0OToxNFrOG1tkIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1OTo1MlrOG1t9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NDI0Mg==", "bodyText": "Does completing a null future immediately make sense semantically?", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458974242", "createdAt": "2020-07-22T17:49:14Z", "author": {"login": "jzakaryan"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {\n+      if ((futureToAwait == null) || futureToAwait.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4MDgwNw==", "bodyText": "One drawback of this is that the user of this API will have to wait for the duration of timeout even if the future completes quickly. I think the version I had in the other PR was taking care of that by creating a separate timeout future and composing it with the provided one. I don't know whether this optimization is important for your use case but we may want to have that if it's a general purpose util.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r458980807", "createdAt": "2020-07-22T17:59:52Z", "author": {"login": "jzakaryan"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);\n+\n+  /**\n+   * This function waits till timeout for Future to complete, otherwise, it cancels it.\n+   * @param futureToAwait Future to complete/stop\n+   * @param timeout time to wait before aborting future\n+   * @return CompletableFuture for this operation\n+   */\n+  public static CompletableFuture<?> awaitFutureOrCancel(Future<?> futureToAwait, Duration timeout) {\n+    CompletableFuture<?> result = new CompletableFuture<>();\n+\n+    SCHEDULED_EXECUTOR_SERVICE.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjUyMDEw", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-453652010", "createdAt": "2020-07-22T20:16:37Z", "commit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNjozOFrOG1yoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxNjozOFrOG1yoAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NzE1NA==", "bodyText": "It would be useful to give this executor a thread factory so we can give its threads meaningful names.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459057154", "createdAt": "2020-07-22T20:16:38Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/5fe498771871e09e32261cd02887179b5b14f42a", "committedDate": "2020-07-23T23:03:03Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTY3MDkw", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-454567090", "createdAt": "2020-07-23T23:49:32Z", "commit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "state": "DISMISSED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzo0OTozM1rOG2fSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1OToxM1rOG2gVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4ODkwMw==", "bodyText": "You don't have to declare throws for runtime exceptions", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459788903", "createdAt": "2020-07-23T23:49:33Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+\n+/**\n+ * Utilities to work with {@link Future}\n+ */\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(4,\n+      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"FutureUtils-%d\").build());\n+\n+  private FutureUtils() {\n+\n+  }\n+  /**\n+   * Check if {@code future} is done after {@code after}. Otherwise, cancels {@code future}.\n+   * It returns {@link CompletableFuture} which should be used directly for light-weight operations to avoid blocking the\n+   * executor thread, or call {@link CompletableFuture#supplyAsync(Supplier)} or {@link CompletableFuture#supplyAsync(Supplier, Executor)}\n+   * which uses another thread to execute and does not block the main executor thread.\n+   * @param future {@code future} to check/cancel\n+   * @param after time to wait before aborting {@code future}\n+   * @return {@link CompletableFuture} completed with computed result of {@code future}, if {@code future} was done before {@code after}.\n+   *         {@link CompletableFuture} completed exceptionally with {@link InterruptedException}, if {@code future} was interrupted.\n+   *         {@link CompletableFuture} completed exceptionally with cause of Exception, if {@code future} hit {@link ExecutionException}.\n+   *         {@link CompletableFuture} cancelled, if {@code future} thread was cancelled.\n+   * @throws NullArgumentException {@link NullArgumentException} is Thrown if future is Null\n+   */\n+  public static <T> CompletableFuture<T> getIfDoneOrCancel(Future<T> future, Duration after) throws\n+                                                                                             NullArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4OTI2OQ==", "bodyText": "Instead of creating/throwing an exception yourself, you can use Objects.requireNonNull() or org.apache.commons.lang3.Validate.notNull().\nYou need to null-check after as well", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459789269", "createdAt": "2020-07-23T23:50:44Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+\n+/**\n+ * Utilities to work with {@link Future}\n+ */\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(4,\n+      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"FutureUtils-%d\").build());\n+\n+  private FutureUtils() {\n+\n+  }\n+  /**\n+   * Check if {@code future} is done after {@code after}. Otherwise, cancels {@code future}.\n+   * It returns {@link CompletableFuture} which should be used directly for light-weight operations to avoid blocking the\n+   * executor thread, or call {@link CompletableFuture#supplyAsync(Supplier)} or {@link CompletableFuture#supplyAsync(Supplier, Executor)}\n+   * which uses another thread to execute and does not block the main executor thread.\n+   * @param future {@code future} to check/cancel\n+   * @param after time to wait before aborting {@code future}\n+   * @return {@link CompletableFuture} completed with computed result of {@code future}, if {@code future} was done before {@code after}.\n+   *         {@link CompletableFuture} completed exceptionally with {@link InterruptedException}, if {@code future} was interrupted.\n+   *         {@link CompletableFuture} completed exceptionally with cause of Exception, if {@code future} hit {@link ExecutionException}.\n+   *         {@link CompletableFuture} cancelled, if {@code future} thread was cancelled.\n+   * @throws NullArgumentException {@link NullArgumentException} is Thrown if future is Null\n+   */\n+  public static <T> CompletableFuture<T> getIfDoneOrCancel(Future<T> future, Duration after) throws\n+                                                                                             NullArgumentException {\n+    if (future == null) {\n+      throw new NullArgumentException(\"future\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MDQzNg==", "bodyText": "Not needed. We typically throw NullPointerException for null args.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459790436", "createdAt": "2020-07-23T23:55:00Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MDc3MQ==", "bodyText": "Best practice nit: this would entail adding a dependency on Guava under project(':datastream-utils') { in build.gradle.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459790771", "createdAt": "2020-07-23T23:56:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzQwMw==", "bodyText": "nit: rename expectedException to expectException, isExceptionExpected, shouldThrow ... etc.\ntimeout can be of type Duration", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459797403", "createdAt": "2020-07-24T00:21:33Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/test/java/com/linkedin/datastream/common/TestFutureUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link FutureUtils}\n+ */\n+public class TestFutureUtils {\n+\n+  @Test\n+  public void withinFutureTimesOutAfterDuration() throws ExecutionException, InterruptedException {\n+    runAndVerifyTimeoutFuture(10000, 10, true);\n+    runAndVerifyTimeoutFuture(5, 10, false);\n+  }\n+\n+  private void runAndVerifyTimeoutFuture(long futureRunTime, long timeout, boolean expectedException)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzcwOQ==", "bodyText": "We need to assert the state and value of the returned future as well.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459797709", "createdAt": "2020-07-24T00:22:54Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/test/java/com/linkedin/datastream/common/TestFutureUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link FutureUtils}\n+ */\n+public class TestFutureUtils {\n+\n+  @Test\n+  public void withinFutureTimesOutAfterDuration() throws ExecutionException, InterruptedException {\n+    runAndVerifyTimeoutFuture(10000, 10, true);\n+    runAndVerifyTimeoutFuture(5, 10, false);\n+  }\n+\n+  private void runAndVerifyTimeoutFuture(long futureRunTime, long timeout, boolean expectedException)\n+      throws ExecutionException, InterruptedException {\n+    CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {\n+      try {\n+        Thread.sleep(futureRunTime);\n+        return 10;\n+      } catch (Exception ex) {\n+        throw new RuntimeException();\n+      }\n+    });\n+\n+    boolean exception = false;\n+    FutureUtils.getIfDoneOrCancel(future, Duration.ofMillis(timeout));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5OTIzMw==", "bodyText": "nit: exceptionThrown?", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459799233", "createdAt": "2020-07-24T00:29:32Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/test/java/com/linkedin/datastream/common/TestFutureUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link FutureUtils}\n+ */\n+public class TestFutureUtils {\n+\n+  @Test\n+  public void withinFutureTimesOutAfterDuration() throws ExecutionException, InterruptedException {\n+    runAndVerifyTimeoutFuture(10000, 10, true);\n+    runAndVerifyTimeoutFuture(5, 10, false);\n+  }\n+\n+  private void runAndVerifyTimeoutFuture(long futureRunTime, long timeout, boolean expectedException)\n+      throws ExecutionException, InterruptedException {\n+    CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {\n+      try {\n+        Thread.sleep(futureRunTime);\n+        return 10;\n+      } catch (Exception ex) {\n+        throw new RuntimeException();\n+      }\n+    });\n+\n+    boolean exception = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5OTk1Mw==", "bodyText": "@Test", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459799953", "createdAt": "2020-07-24T00:32:37Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/test/java/com/linkedin/datastream/common/TestFutureUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link FutureUtils}\n+ */\n+public class TestFutureUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNTk3OQ==", "bodyText": "lightweight\n\"if future was done before after the specified {@code after} elapsed\"\n\"if +the thread retrieving the result of+ the future was interrupted \"\n\"completed exceptionally with the exception thrown by future's computation if it threw one\"\n\"if future's computation was cancelled before it completed normally\"", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r459805979", "createdAt": "2020-07-24T00:59:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+\n+/**\n+ * Utilities to work with {@link Future}\n+ */\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(4,\n+      new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"FutureUtils-%d\").build());\n+\n+  private FutureUtils() {\n+\n+  }\n+  /**\n+   * Check if {@code future} is done after {@code after}. Otherwise, cancels {@code future}.\n+   * It returns {@link CompletableFuture} which should be used directly for light-weight operations to avoid blocking the\n+   * executor thread, or call {@link CompletableFuture#supplyAsync(Supplier)} or {@link CompletableFuture#supplyAsync(Supplier, Executor)}\n+   * which uses another thread to execute and does not block the main executor thread.\n+   * @param future {@code future} to check/cancel\n+   * @param after time to wait before aborting {@code future}\n+   * @return {@link CompletableFuture} completed with computed result of {@code future}, if {@code future} was done before {@code after}.\n+   *         {@link CompletableFuture} completed exceptionally with {@link InterruptedException}, if {@code future} was interrupted.\n+   *         {@link CompletableFuture} completed exceptionally with cause of Exception, if {@code future} hit {@link ExecutionException}.\n+   *         {@link CompletableFuture} cancelled, if {@code future} thread was cancelled.\n+   * @throws NullArgumentException {@link NullArgumentException} is Thrown if future is Null\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDE0MjUy", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-455014252", "createdAt": "2020-07-24T16:13:24Z", "commit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMzoyNFrOG21b6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoxMzoyNFrOG21b6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1MTc4Ng==", "bodyText": "Copyright need to be updated.", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r460151786", "createdAt": "2020-07-24T16:13:24Z", "author": {"login": "vishwajith-s"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c47b4d03f1f1b4063531a0390d1a8be8d302274"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDE5MDQ1", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-455019045", "createdAt": "2020-07-24T16:20:38Z", "commit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyMDozOFrOG21rGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyMDozOFrOG21rGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTY3Mw==", "bodyText": "Can we have this number 4 as a static int?", "url": "https://github.com/linkedin/brooklin/pull/734#discussion_r460155673", "createdAt": "2020-07-24T16:20:38Z", "author": {"login": "vishwajith-s"}, "path": "datastream-utils/src/main/java/com/linkedin/datastream/common/FutureUtils.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.common;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.commons.lang.NullArgumentException;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+\n+/**\n+ * Utilities to work with {@link Future}\n+ */\n+public class FutureUtils {\n+\n+  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newScheduledThreadPool(4,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fe498771871e09e32261cd02887179b5b14f42a"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c00000184faef37c8d18791c2c74d12be52ee84", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/3c00000184faef37c8d18791c2c74d12be52ee84", "committedDate": "2020-07-24T18:58:21Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "021020fb453376d28f504b264b30f752ff1666db", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/021020fb453376d28f504b264b30f752ff1666db", "committedDate": "2020-07-24T21:38:14Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjMzMzE3", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-455233317", "createdAt": "2020-07-24T23:31:44Z", "commit": {"oid": "021020fb453376d28f504b264b30f752ff1666db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTU5NDQ4", "url": "https://github.com/linkedin/brooklin/pull/734#pullrequestreview-456159448", "createdAt": "2020-07-27T21:48:05Z", "commit": {"oid": "021020fb453376d28f504b264b30f752ff1666db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 894, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}