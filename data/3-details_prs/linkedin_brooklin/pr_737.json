{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MjE3MjYy", "number": 737, "title": "Added kafka headers in BrooklinEnvelope", "bodyText": "Right now we're dropping headers that come with Kafka events when consuming from source topic and producing to destination. This poses a problem if downstream systems rely on those headers. Essentially headers are extra metadata that come with events. This pull requests adds a field in BrooklinEnvelope to store those headers with the purpose of setting them in ProducerRecord for transit.", "createdAt": "2020-08-06T19:19:08Z", "url": "https://github.com/linkedin/brooklin/pull/737", "merged": true, "mergeCommit": {"oid": "795c01efe29f28a323b09876ab8bf58f23764cb3"}, "closed": true, "closedAt": "2020-08-06T22:08:33Z", "author": {"login": "jzakaryan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8UvSAgH2gAyNDY0MjE3MjYyOmU5MjBlN2RiMzkxZTZhMTYyODkyNGZjZGU5OTI2YzNhOTE0MDM1M2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8XHMqgFqTQ2MjkwNDA4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d", "author": {"user": {"login": "jzakaryan", "name": "Jhora Zakaryan"}}, "url": "https://github.com/linkedin/brooklin/commit/e920e7db391e6a1628924fcde9926c3a9140353d", "committedDate": "2020-08-06T19:11:17Z", "message": "Added kafka headers in Brooklin Envelope in order to avoid dropping them in transit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODM4ODI0", "url": "https://github.com/linkedin/brooklin/pull/737#pullrequestreview-462838824", "createdAt": "2020-08-06T20:06:28Z", "commit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNjoyOFrOG9CebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODoyMlrOG9Ch3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Njg3Ng==", "bodyText": "can we instead use Headers which is an Iterable of Header? This is what the ConsumerRecord's getHeaders() returns:\n    /** * The headers */ public Headers headers() { return headers; }\nAnd headers looks like this:\npublic interface Headers extends Iterable<Header>", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466656876", "createdAt": "2020-08-06T20:06:28Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -29,14 +30,16 @@\n \n   private Map<String, String> _metadata;\n \n+  private Iterable<Header> _headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzI4NA==", "bodyText": "nit: can we keep order of function parameters the same as order of setting them? so here move this before setMetadata(metadata)?", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466657284", "createdAt": "2020-08-06T20:07:20Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -48,11 +51,25 @@ public BrooklinEnvelope(Object key, Object value, Map<String, String> metadata)\n    */\n   public BrooklinEnvelope(@Nullable Object key, @Nullable Object value, @Nullable Object previousValue,\n       Map<String, String> metadata) {\n+    this(key, value, previousValue, null, metadata);\n+  }\n+\n+  /**\n+   * Construct a {@link BrooklinEnvelope} using record key, value, headers and metadata\n+   * @param key The record key (e.g. primary key)\n+   * @param value The new record value\n+   * @param previousValue The old record value\n+   * @param headers Kafka headers to associate with the change event\n+   * @param metadata Additional metadata to associate with the change event\n+   */\n+  public BrooklinEnvelope(@Nullable Object key, @Nullable Object value, @Nullable Object previousValue,\n+      @Nullable Iterable<Header> headers, Map<String, String> metadata) {\n     Validate.notNull(metadata, \"metadata cannot be null\");\n     setKey(key);\n     setValue(value);\n     setPreviousValue(previousValue);\n     setMetadata(metadata);\n+    setHeaders(headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzQ4MQ==", "bodyText": "if we do change this to store Headers directly, we can return Headers here too.", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466657481", "createdAt": "2020-08-06T20:07:48Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -75,6 +92,20 @@ public void setPreviousValue(Object previousValue) {\n     _previousValue = previousValue instanceof Optional ? ((Optional<?>) previousValue).orElse(null) : previousValue;\n   }\n \n+  /**\n+   * Get the Kafka headers\n+   */\n+  public Iterable<Header> getHeaders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzc1Ng==", "bodyText": "if we do change this to store Headers directly, we can pass Headers here as the argument.", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466657756", "createdAt": "2020-08-06T20:08:22Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -75,6 +92,20 @@ public void setPreviousValue(Object previousValue) {\n     _previousValue = previousValue instanceof Optional ? ((Optional<?>) previousValue).orElse(null) : previousValue;\n   }\n \n+  /**\n+   * Get the Kafka headers\n+   */\n+  public Iterable<Header> getHeaders() {\n+    return _headers;\n+  }\n+\n+  /**\n+   * Set the Kafka headers\n+   */\n+  public void setHeaders(Iterable<Header> headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODI5NzE0", "url": "https://github.com/linkedin/brooklin/pull/737#pullrequestreview-462829714", "createdAt": "2020-08-06T19:52:12Z", "commit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTo1MjoxMlrOG9CDgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDozMTo1OFrOG9DPdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0OTk4NQ==", "bodyText": "I admire the generality Iterable<T> allows us but I think it may be a little inconvenient for headers, especially for a type as general as BrooklinEnvelope. For instance, to find out the header count, we'd have to enumerate the iterable. For this reason, I'd prefer Collection<T>; it would allow us to find the count and enumerate, while giving callers the freedom to pass in any collection they'd like.", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466649985", "createdAt": "2020-08-06T19:52:12Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -29,14 +30,16 @@\n \n   private Map<String, String> _metadata;\n \n+  private Iterable<Header> _headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2OTQzMA==", "bodyText": "Just out of curiosity, how are we planning to fit headers within DatastreamEvent and LiDatastreamEvent?", "url": "https://github.com/linkedin/brooklin/pull/737#discussion_r466669430", "createdAt": "2020-08-06T20:31:58Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/common/BrooklinEnvelope.java", "diffHunk": "@@ -48,11 +51,25 @@ public BrooklinEnvelope(Object key, Object value, Map<String, String> metadata)\n    */\n   public BrooklinEnvelope(@Nullable Object key, @Nullable Object value, @Nullable Object previousValue,\n       Map<String, String> metadata) {\n+    this(key, value, previousValue, null, metadata);\n+  }\n+\n+  /**\n+   * Construct a {@link BrooklinEnvelope} using record key, value, headers and metadata\n+   * @param key The record key (e.g. primary key)\n+   * @param value The new record value\n+   * @param previousValue The old record value\n+   * @param headers Kafka headers to associate with the change event\n+   * @param metadata Additional metadata to associate with the change event\n+   */\n+  public BrooklinEnvelope(@Nullable Object key, @Nullable Object value, @Nullable Object previousValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e920e7db391e6a1628924fcde9926c3a9140353d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e13a95d79d478103b7abe7125d703634af557e7", "author": {"user": {"login": "jzakaryan", "name": "Jhora Zakaryan"}}, "url": "https://github.com/linkedin/brooklin/commit/5e13a95d79d478103b7abe7125d703634af557e7", "committedDate": "2020-08-06T21:33:28Z", "message": "Minor improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODk0MDQ5", "url": "https://github.com/linkedin/brooklin/pull/737#pullrequestreview-462894049", "createdAt": "2020-08-06T21:37:33Z", "commit": {"oid": "5e13a95d79d478103b7abe7125d703634af557e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTA0MDg5", "url": "https://github.com/linkedin/brooklin/pull/737#pullrequestreview-462904089", "createdAt": "2020-08-06T21:57:13Z", "commit": {"oid": "5e13a95d79d478103b7abe7125d703634af557e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 903, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}