{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODg3MDUw", "number": 732, "title": "Support for Kafka broker message format bump for passthrough BMM", "bodyText": "This PR adds support for the Kafka broker message format bump for passthrough by extracting the magic from the PassthroughConsumerRecord. This magic is stored in the metadata of the BrooklinEnvelope after consumption. A utility class is added for abstracting out conversion of byte to String and back to byte. The transport layer is responsible for extracting this metadata field and constructing the right ProducerRecord with headers if the metadata is present. This is done in the KafkaTransportProvider class.\nImportant: DO NOT REPORT SECURITY ISSUES DIRECTLY ON GITHUB.\nFor reporting security issues and contributing security fixes,\nplease, email security@linkedin.com instead, as described in\nthe contribution guidelines.\nPlease, take a minute to review the contribution guidelines at:\nhttps://github.com/linkedin/Brooklin/blob/master/CONTRIBUTING.md", "createdAt": "2020-07-20T22:14:06Z", "url": "https://github.com/linkedin/brooklin/pull/732", "merged": true, "mergeCommit": {"oid": "079d80d4fe9726d37110cb4eb8e4de1680969228"}, "closed": true, "closedAt": "2020-07-27T19:33:32Z", "author": {"login": "somandal"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc24UMaAH2gAyNDUzODg3MDUwOjY4YTVhODk2NTFhZTIwZDY0NmEwMWNjYzM0NDNjMzllOTAzYmQ4NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5HAt2gFqTQ1NjA3MjU2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "68a5a89651ae20d646a01ccc3443c39e903bd843", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/68a5a89651ae20d646a01ccc3443c39e903bd843", "committedDate": "2020-07-20T21:14:44Z", "message": "Add support to extract magic byte from PassthroughConsumerRecord and store it in the BrooklinEnvelope metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/a08e43369d894ac0b2fc1414761e464a5c286c72", "committedDate": "2020-07-20T22:11:18Z", "message": "Add producer side integration and add javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODAxMTUz", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-452801153", "createdAt": "2020-07-21T20:23:55Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzQ5OTM4", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-453749938", "createdAt": "2020-07-22T23:22:36Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyMjozNlrOG13jnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzoyMjozNlrOG13jnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNzk0OA==", "bodyText": "This patch LGTM. Any reason, you want to convert this to a String and not use it as it is?", "url": "https://github.com/linkedin/brooklin/pull/732#discussion_r459137948", "createdAt": "2020-07-22T23:22:36Z", "author": {"login": "MayureshGharat"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -241,6 +244,16 @@ protected DatastreamProducerRecord translate(ConsumerRecord<?, ?> fromKafka, Ins\n     String offsetStr = String.valueOf(offset);\n     metadata.put(KAFKA_ORIGIN_OFFSET, offsetStr);\n     metadata.put(BrooklinEnvelopeMetadataConstants.EVENT_TIMESTAMP, String.valueOf(eventsSourceTimestamp));\n+    if (Boolean.TRUE.toString()\n+        .equals(_datastream.getMetadata().get(KafkaDatastreamMetadataConstants.USE_PASSTHROUGH_COMPRESSION))) {\n+      // If passthrough mode is enabled, we need to create a Kafka header on the transport side for supporting\n+      // Kafka broker message format bump. The magic byte contains details about the message format for the passthrough\n+      // record and it needs to be preserved and set via the Kafka headers to ensure that the correct message format\n+      // can be negotiated.\n+      PassThroughConsumerRecord<?, ?> passThroughConsumerRecord = (PassThroughConsumerRecord<?, ?>) fromKafka;\n+      metadata.put(KafkaPassthroughRecordMagicConverter.PASS_THROUGH_MAGIC_VALUE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzUwNTkw", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-453750590", "createdAt": "2020-07-22T23:24:25Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzU5Njgy", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-454359682", "createdAt": "2020-07-23T17:44:11Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzA2Mjcw", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-454706270", "createdAt": "2020-07-24T08:13:37Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxMzozN1rOG2mz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxMzozN1rOG2mz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMjE3MA==", "bodyText": "nit: would it make sense to have a member field for isPassThrough to avoid checking this for each translate?", "url": "https://github.com/linkedin/brooklin/pull/732#discussion_r459912170", "createdAt": "2020-07-24T08:13:37Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -241,6 +244,16 @@ protected DatastreamProducerRecord translate(ConsumerRecord<?, ?> fromKafka, Ins\n     String offsetStr = String.valueOf(offset);\n     metadata.put(KAFKA_ORIGIN_OFFSET, offsetStr);\n     metadata.put(BrooklinEnvelopeMetadataConstants.EVENT_TIMESTAMP, String.valueOf(eventsSourceTimestamp));\n+    if (Boolean.TRUE.toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTg1NTM2", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-454985536", "createdAt": "2020-07-24T15:33:41Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMzo0MVrOG20Bqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMzo0MVrOG20Bqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyODY4Mg==", "bodyText": "Can it return a single byte instead? since we are using ISO-8 we can be sure not to get multiple bytes. Makes the APIs look consistent in the encode and decode with taking 1 byte and returning 1 byte.", "url": "https://github.com/linkedin/brooklin/pull/732#discussion_r460128682", "createdAt": "2020-07-24T15:33:41Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaPassthroughRecordMagicConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.kafka;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+import org.apache.kafka.common.header.internals.RecordHeader;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+\n+import com.linkedin.datastream.common.DatastreamRuntimeException;\n+\n+\n+/**\n+ * This class is a utility class to convert the PassthroughConsumerRecord's magic() to a String, and back into byte.\n+ * It also adds a utility to create the RecordHeaders which can be used to pass headers with the magic set to the\n+ * ProducerRecord for passthrough message format bump support.\n+ */\n+public class KafkaPassthroughRecordMagicConverter {\n+  private static final String CHARSET = \"ISO-8859-1\";\n+\n+  public static final String PASS_THROUGH_MAGIC_VALUE = \"__passThroughMagicValue\";\n+\n+  /**\n+   * Convert the magic byte of the PassthroughConsumerRecord to a String\n+   */\n+  public static String convertMagicToString(byte magic) {\n+    try {\n+      return new String(new byte[] { magic }, CHARSET);\n+    } catch (UnsupportedEncodingException e) {\n+      throw new DatastreamRuntimeException(String.format(\"Cannot convert magic byte %02X to String\", magic), e);\n+    }\n+  }\n+\n+  /**\n+   * Convert the converted magic String back into a byte array\n+   */\n+  public static byte[] convertMagicStringToByteArray(String magic) {\n+    try {\n+      return magic.getBytes(CHARSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDA5Mzgz", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-455009383", "createdAt": "2020-07-24T16:06:25Z", "commit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNjoyNVrOG21MzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNjoyNVrOG21MzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzkxNw==", "bodyText": "nit and feel free to ignore, but the test might read better as a for loop iterating over all possibly magic byte values.", "url": "https://github.com/linkedin/brooklin/pull/732#discussion_r460147917", "createdAt": "2020-07-24T16:06:25Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-kafka/src/test/java/com/linkedin/datastream/kafka/TestKafkaPassthroughRecordMagicConverter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.kafka;\n+\n+import org.apache.kafka.common.record.RecordBatch;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link KafkaPassthroughRecordMagicConverter}.\n+ */\n+@Test\n+public class TestKafkaPassthroughRecordMagicConverter {\n+\n+  @Test\n+  public void testMagicConversion() {\n+    String magicValue0 = KafkaPassthroughRecordMagicConverter.convertMagicToString(RecordBatch.MAGIC_VALUE_V0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a08e43369d894ac0b2fc1414761e464a5c286c72"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31c73759c5efac3ecb65a6983a2246637ab5e6e5", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/31c73759c5efac3ecb65a6983a2246637ab5e6e5", "committedDate": "2020-07-24T16:39:20Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDczNzcx", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-455073771", "createdAt": "2020-07-24T17:45:31Z", "commit": {"oid": "31c73759c5efac3ecb65a6983a2246637ab5e6e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDcyNTY0", "url": "https://github.com/linkedin/brooklin/pull/732#pullrequestreview-456072564", "createdAt": "2020-07-27T19:29:53Z", "commit": {"oid": "31c73759c5efac3ecb65a6983a2246637ab5e6e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 889, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}