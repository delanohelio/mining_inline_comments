{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzM3MjY3", "number": 719, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoyODoxOFrOEB88XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDozMDo0NFrOEB9m2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDgyNTI0OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoyODoxOFrOGeHPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjo0NDowMVrOGewDWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTA0NQ==", "bodyText": "nit: Lock node", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434229045", "createdAt": "2020-06-02T23:28:18Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5Nzc1Mw==", "bodyText": "done", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434897753", "createdAt": "2020-06-03T22:44:01Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTA0NQ=="}, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDgzMTE3OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozMTozOFrOGeHS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjo0NDo1OVrOGewE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTk5MA==", "bodyText": "I'm a bit confused, when we call releaseTask it should delete the lock node. Is that not happening? Or is this because the ZkAdapter used here is not real? Or is this validating the connector/lock is still existing, without looking at what's in it? If the last one, then we may want to verify that we have a node such as connector/lock/<task>?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434229990", "createdAt": "2020-06-02T23:31:38Z", "author": {"login": "somandal"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5ODE0Mg==", "bodyText": "the releaseTask deletes the connector/lock/. The node connector/lock will not get deleted.", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434898142", "createdAt": "2020-06-03T22:44:59Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTk5MA=="}, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkwMTU2OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoxMToyOFrOGeH9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjo0NTowOVrOGewFGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MDk3NQ==", "bodyText": "Did you mean to make it package private? That's less accessible than protected and would still allow you to access it in ZkAdapter.", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434240975", "createdAt": "2020-06-03T00:11:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node\n+   */\n+  protected static final String DATASTREAM_TASK_LOCK_ROOT_NAME = \"lock\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5ODIwMA==", "bodyText": "done", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434898200", "createdAt": "2020-06-03T22:45:09Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node\n+   */\n+  protected static final String DATASTREAM_TASK_LOCK_ROOT_NAME = \"lock\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MDk3NQ=="}, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkyNzgyOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoyNzoxM1rOGeINkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjo0MzozN1rOGewC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTAxMA==", "bodyText": "Should we also assert that one znode left is actually lock?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434245010", "createdAt": "2020-06-03T00:27:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NzYyOQ==", "bodyText": "done.", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434897629", "createdAt": "2020-06-03T22:43:37Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTAxMA=="}, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDkzNDAwOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDozMDo0NFrOGeIRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1MzoyNVrOGeInZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTk1NA==", "bodyText": "This part seems a little extraneous.\nShould this test really assert that lock remains after releaseTask()? All it cares about is that lock survives cleanUpOrphanConnectorTasks(). On the other hand, if we change ZkAdapter in the future to have it delete lock if it's no longer needed, why should this test start failing then?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434245954", "createdAt": "2020-06-03T00:30:44Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTYyMw==", "bodyText": "I feel this part is okay to have. If the behavior changes in the future, whoever is making the change will get alerted and get aware of this existing behavior ( which is not very obvious) and help in either fixing the test or their new behavior.", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434251623", "createdAt": "2020-06-03T00:53:25Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTk1NA=="}, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1011, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}