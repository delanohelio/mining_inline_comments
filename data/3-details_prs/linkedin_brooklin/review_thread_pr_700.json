{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTM2MTQw", "number": 700, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo0MjoxM1rODxdTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NDowNVrODxhjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTg2ODYzOnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo0MjoxM1rOGE8HHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo0MjoxM1rOGE8HHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzMjM0OQ==", "bodyText": "@Test on class\nRename to TestBrooklinMetricInfo", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407832349", "createdAt": "2020-04-14T02:42:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTg4NzgyOnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1Mjo0N1rOGE8SZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1Mjo0N1rOGE8SZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTIzNg==", "bodyText": "nit: shouldn't this be 2020 license?", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407835236", "createdAt": "2020-04-14T02:52:47Z", "author": {"login": "somandal"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTg5MTY4OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1NDoyOFrOGE8UhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1NDoyOFrOGE8UhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTc4MA==", "bodyText": "If you think it's a nicer choice, some JDK methods (e.g. Objects.equals()) use a and b in situations like this.", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407835780", "createdAt": "2020-04-14T02:54:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,38 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> attributes1, Optional<List<String>> attributes2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTg5OTY2OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1OTowMlrOGE8ZJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1OTowMlrOGE8ZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNjk2Ng==", "bodyText": "Can be simplified to:\nif (!attributes1.isPresent() || !attributes2.isPresent()) {\n   return attributes1.isPresent() == attributes2.isPresent();\n}\n\n// Both are present\nreturn Objects.equals(new HashSet<>(attributes1.get()), new HashSet<>(attributes2.get()));\n\nTo secure the whole class against accidental null Optionals, please add a Validate.notNull() for attributes in the ctor on line 25.", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407836966", "createdAt": "2020-04-14T02:59:02Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,38 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> attributes1, Optional<List<String>> attributes2) {\n+    if (!(attributes1.isPresent() == attributes2.isPresent())) {\n+      return false;\n+    }\n+    if (!attributes1.isPresent()) {\n+      return true;\n+    }\n+\n+    Set<String> attributeSet1 = new HashSet<>();\n+    attributes1.ifPresent(attributeSet1::addAll);\n+\n+    Set<String> attributeSet2 = new HashSet<>();\n+    attributes2.ifPresent(attributeSet2::addAll);\n+\n+    return attributeSet1.equals(attributeSet2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTkxMTQyOnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzowNToxM1rOGE8f3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzowNToxM1rOGE8f3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzODY4NA==", "bodyText": "Link should be BrooklinMetricInfo", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407838684", "createdAt": "2020-04-14T03:05:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTk0MjY2OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyMzoxMVrOGE8yRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyMzoxMVrOGE8yRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzM5Nw==", "bodyText": "You can reduce the duplication between the identical tests in this file by using generics:\n  private static <T extends BrooklinMetricInfo> void testBrooklinMetricInfoHelper(\n      Function<String, T> singleArgCtor, BiFunction<String, Optional<List<String>>, T> twoArgCtor) {\n\n    T brooklinMeterInfo1 = singleArgCtor.apply (\"meter1\");\n    T brooklinMeterInfo2 = singleArgCtor.apply(\"meter2\");\n    T brooklinMeterInfo3 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"hello\", \"world\")));\n    T brooklinMeterInfo4 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"world\", \"hello\")));\n    T brooklinMeterInfo5 = singleArgCtor.apply(\"meter1\");\n\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n  }\nwhich can then be used as:\n  @Test\n  public void testBrooklinMetricInfo() {\n    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\n    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\n  }", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843397", "createdAt": "2020-04-14T03:23:11Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTk0NDA2OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyMzo1NVrOGE8zDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyMzo1NVrOGE8zDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzU5Nw==", "bodyText": "nit: new line before asserts", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843597", "createdAt": "2020-04-14T03:23:55Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinMeterInfo brooklinMeterInfo2 = new BrooklinMeterInfo(\"meter2\");\n+    BrooklinMeterInfo brooklinMeterInfo3 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinMeterInfo brooklinMeterInfo4 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinMeterInfo brooklinMeterInfo5 = new BrooklinMeterInfo(\"meter1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinCounterInfoMetricsComparison() {\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinCounterInfo brooklinCounterInfo2 = new BrooklinCounterInfo(\"counter2\");\n+    BrooklinCounterInfo brooklinCounterInfo3 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinCounterInfo brooklinCounterInfo4 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinCounterInfo brooklinCounterInfo5 = new BrooklinCounterInfo(\"counter1\");\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo2);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo3);\n+    Assert.assertEquals(brooklinCounterInfo3, brooklinCounterInfo4);\n+    Assert.assertEquals(brooklinCounterInfo1, brooklinCounterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinGaugeInfoComparison() {\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo2 = new BrooklinGaugeInfo(\"gauge2\");\n+    BrooklinGaugeInfo brooklinGaugeInfo3 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo4 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo5 = new BrooklinGaugeInfo(\"gauge1\");\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo2);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo3);\n+    Assert.assertEquals(brooklinGaugeInfo3, brooklinGaugeInfo4);\n+    Assert.assertEquals(brooklinGaugeInfo1, brooklinGaugeInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinHistogramInfoComparison() {\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo2 = new BrooklinHistogramInfo(\"histogram2\");\n+    BrooklinHistogramInfo brooklinHistogramInfo3 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo4 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo5 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo2);\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo3);\n+    Assert.assertEquals(brooklinHistogramInfo3, brooklinHistogramInfo4);\n+    Assert.assertEquals(brooklinHistogramInfo1, brooklinHistogramInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTk0NDcyOnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyNDoxMlrOGE8zYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzoyNDoxMlrOGE8zYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MzY4Mw==", "bodyText": "extraneous empty line", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407843683", "createdAt": "2020-04-14T03:24:12Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinMeterInfo brooklinMeterInfo2 = new BrooklinMeterInfo(\"meter2\");\n+    BrooklinMeterInfo brooklinMeterInfo3 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinMeterInfo brooklinMeterInfo4 = new BrooklinMeterInfo(\"meter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinMeterInfo brooklinMeterInfo5 = new BrooklinMeterInfo(\"meter1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinCounterInfoMetricsComparison() {\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinCounterInfo brooklinCounterInfo2 = new BrooklinCounterInfo(\"counter2\");\n+    BrooklinCounterInfo brooklinCounterInfo3 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinCounterInfo brooklinCounterInfo4 = new BrooklinCounterInfo(\"counter1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinCounterInfo brooklinCounterInfo5 = new BrooklinCounterInfo(\"counter1\");\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo2);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinCounterInfo3);\n+    Assert.assertEquals(brooklinCounterInfo3, brooklinCounterInfo4);\n+    Assert.assertEquals(brooklinCounterInfo1, brooklinCounterInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinGaugeInfoComparison() {\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo2 = new BrooklinGaugeInfo(\"gauge2\");\n+    BrooklinGaugeInfo brooklinGaugeInfo3 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo4 = new BrooklinGaugeInfo(\"gauge1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinGaugeInfo brooklinGaugeInfo5 = new BrooklinGaugeInfo(\"gauge1\");\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo2);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinGaugeInfo3);\n+    Assert.assertEquals(brooklinGaugeInfo3, brooklinGaugeInfo4);\n+    Assert.assertEquals(brooklinGaugeInfo1, brooklinGaugeInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinHistogramInfoComparison() {\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo2 = new BrooklinHistogramInfo(\"histogram2\");\n+    BrooklinHistogramInfo brooklinHistogramInfo3 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo4 = new BrooklinHistogramInfo(\"histogram1\",\n+        Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    BrooklinHistogramInfo brooklinHistogramInfo5 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo2);\n+    Assert.assertNotEquals(brooklinHistogramInfo1, brooklinHistogramInfo3);\n+    Assert.assertEquals(brooklinHistogramInfo3, brooklinHistogramInfo4);\n+    Assert.assertEquals(brooklinHistogramInfo1, brooklinHistogramInfo5);\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinGaugeInfo1);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinHistogramInfo1);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinGaugeInfo1);\n+    Assert.assertNotEquals(brooklinCounterInfo1, brooklinHistogramInfo1);\n+    Assert.assertNotEquals(brooklinGaugeInfo1, brooklinHistogramInfo1);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTk1OTE1OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzozMjo1NFrOGE88Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyNjoyNFrOGE-tMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTkwMw==", "bodyText": "It would be great to assert for identical hashCode() values whenever we assertEquals(); this ensures we honor this part of the hashCode() contract:\nIf two objects are equal according to the equals(Object) method, then calling \nthe hashCode method on each of the two objects must produce the same integer result.", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407845903", "createdAt": "2020-04-14T03:32:54Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3NDg2NQ==", "bodyText": "Good catch. There was a bug in hash code. Adding this helped in fixing it.", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407874865", "createdAt": "2020-04-14T05:26:24Z", "author": {"login": "vmaheshw"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestMetrics.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ *  Copyright 2019 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests for {@link BrooklinMetrics}.\n+ */\n+public class TestMetrics {\n+  @Test\n+  public void testBrooklinMeterInfoComparison() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NTkwMw=="}, "originalCommit": {"oid": "c7b6ddbcdce06639642c51b200812a0e85fd30c5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU2MzM0OnYy", "diffSide": "RIGHT", "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestBrooklinMetricInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MzozMFrOGFCccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MzozMFrOGFCccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjExMw==", "bodyText": "nit: empty line before asserts", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407936113", "createdAt": "2020-04-14T07:53:30Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/test/java/com/linkedin/datastream/metrics/TestBrooklinMetricInfo.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ *  Copyright 2020 LinkedIn Corporation. All rights reserved.\n+ *  Licensed under the BSD 2-Clause License. See the LICENSE file in the project root for license information.\n+ *  See the NOTICE file in the project root for additional information regarding copyright ownership.\n+ */\n+package com.linkedin.datastream.metrics;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+/**\n+ * Tests for {@link BrooklinMetricInfo}.\n+ */\n+@Test\n+public class TestBrooklinMetricInfo {\n+\n+  @Test\n+  public void testBrooklinMetricInfo() {\n+    testBrooklinMetricInfoHelper(BrooklinMeterInfo::new, BrooklinMeterInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinCounterInfo::new, BrooklinCounterInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinGaugeInfo::new, BrooklinGaugeInfo::new);\n+    testBrooklinMetricInfoHelper(BrooklinHistogramInfo::new, BrooklinHistogramInfo::new);\n+  }\n+\n+  private static <T extends BrooklinMetricInfo> void testBrooklinMetricInfoHelper(\n+      Function<String, T> singleArgCtor, BiFunction<String, Optional<List<String>>, T> twoArgCtor) {\n+\n+    T brooklinMeterInfo1 = singleArgCtor.apply(\"meter1\");\n+    T brooklinMeterInfo2 = singleArgCtor.apply(\"meter2\");\n+    T brooklinMeterInfo3 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"hello\", \"world\")));\n+    T brooklinMeterInfo4 = twoArgCtor.apply(\"meter1\", Optional.of(Arrays.asList(\"world\", \"hello\")));\n+    T brooklinMeterInfo5 = singleArgCtor.apply(\"meter1\");\n+\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo2);\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinMeterInfo3);\n+    Assert.assertEquals(brooklinMeterInfo3, brooklinMeterInfo4);\n+    Assert.assertEquals(brooklinMeterInfo3.hashCode(), brooklinMeterInfo4.hashCode());\n+    Assert.assertEquals(brooklinMeterInfo1, brooklinMeterInfo5);\n+    Assert.assertEquals(brooklinMeterInfo1.hashCode(), brooklinMeterInfo5.hashCode());\n+  }\n+\n+  @Test\n+  public void testBrooklinDifferentMetricsComparison() {\n+    BrooklinMeterInfo brooklinMeterInfo1 = new BrooklinMeterInfo(\"meter1\");\n+    BrooklinCounterInfo brooklinCounterInfo1 = new BrooklinCounterInfo(\"counter1\");\n+    BrooklinGaugeInfo brooklinGaugeInfo1 = new BrooklinGaugeInfo(\"gauge1\");\n+    BrooklinHistogramInfo brooklinHistogramInfo1 = new BrooklinHistogramInfo(\"histogram1\");\n+    Assert.assertNotEquals(brooklinMeterInfo1, brooklinCounterInfo1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01500033a6597dc0e1ddc8ed114a203c20533"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU2NTkxOnYy", "diffSide": "RIGHT", "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NDowNVrOGFCd4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1NDowNVrOGFCd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjQ4Mw==", "bodyText": "Both branches can be combined and simplified to:\nObjects.hash(_nameOrRegex, attributes.map(HashSet::new).orElse(null));\n\nSince this class is immutable, I suggest we precompute and cache the value this function returns in a private final field upon construction.", "url": "https://github.com/linkedin/brooklin/pull/700#discussion_r407936483", "createdAt": "2020-04-14T07:54:05Z", "author": {"login": "ahmedahamid"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetricInfo.java", "diffHunk": "@@ -32,4 +35,34 @@ protected BrooklinMetricInfo(String nameOrRegex, Optional<List<String>> attribut\n   public String getNameOrRegex() {\n     return _nameOrRegex;\n   }\n+\n+  private boolean equalAttributes(Optional<List<String>> a, Optional<List<String>> b) {\n+    if (!a.isPresent() || !b.isPresent()) {\n+      return a.isPresent() == b.isPresent();\n+    }\n+\n+    // Both are present\n+    return Objects.equals(new HashSet<>(a.get()), new HashSet<>(b.get()));\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    BrooklinMetricInfo that = (BrooklinMetricInfo) o;\n+    return _nameOrRegex.equals(that._nameOrRegex) && equalAttributes(_attributes, that._attributes);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    if (_attributes.isPresent()) {\n+      return Objects.hash(_nameOrRegex, new HashSet<>(_attributes.get()));\n+    } else {\n+      return Objects.hash(_nameOrRegex);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d01500033a6597dc0e1ddc8ed114a203c20533"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}