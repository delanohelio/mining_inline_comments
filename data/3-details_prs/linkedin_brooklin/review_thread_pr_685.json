{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NjAwOTY2", "number": 685, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo0MjoxMVrODgCabw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyMjoyNVrODif8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTIwNTU5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo0MjoxMVrOFqFqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyMDowOVrOFsmkxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NzI5NQ==", "bodyText": "Just a clarifying question: Any reason this shouldn't be done as part of cleaning up dead tasks in the original LEADER_DO_ASSIGNMENT event? Might be a good idea to add clear documentation around why this should only be performed afterwards.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r379677295", "createdAt": "2020-02-14T22:42:11Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).\n+   *\n+   * NOTE: this should only be called after the valid tasks have been\n+   * reassigned or become safe to discard per strategy requirement.\n+   * This can be a costly operation. So, it should be call once the leader get elected and has finished\n+   * the assignment and cleaned up dead Tasks. Ideally, we should not find anything in this check to clean up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzY2OQ==", "bodyText": "Updated the comment as well. get all children of /cluster/connector is a very costly operation. So, it should not be done very frequently.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r382313669", "createdAt": "2020-02-20T23:20:09Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).\n+   *\n+   * NOTE: this should only be called after the valid tasks have been\n+   * reassigned or become safe to discard per strategy requirement.\n+   * This can be a costly operation. So, it should be call once the leader get elected and has finished\n+   * the assignment and cleaned up dead Tasks. Ideally, we should not find anything in this check to clean up.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NzI5NQ=="}, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY2Mzk2OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyOTozM1rOFruNcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyOTozM1rOFruNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDE5NQ==", "bodyText": "I remember reading this at some point and thinking I am going to see this in this the logs somewhere and assume something bad happened, and that exactly happened yesterday. Awesome that you fixed it.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r381390195", "createdAt": "2020-02-19T16:29:33Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -1222,9 +1275,10 @@ public ZkBackedLiveInstanceListProvider() {\n       List<String> liveInstances = new ArrayList<>();\n       for (String n : nodes) {\n         String hostname = _zkclient.ensureReadData(KeyBuilder.liveInstance(_cluster, n));\n-        if (hostname != null) {\n+        if (hostname == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY2NjgxOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoyMFrOFruPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMDoyMFrOFruPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MDY3Nw==", "bodyText": "typo: live or paused", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r381390677", "createdAt": "2020-02-19T16:30:20Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY3MDA5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMTowOVrOFruRYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMTowOVrOFruRYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MTIwMQ==", "bodyText": "nit: Can you format the comment lines to be of approximately the same length?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r381391201", "createdAt": "2020-02-19T16:31:09Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).\n+   *\n+   * NOTE: this should only be called after the valid tasks have been", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY3OTA2OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMzoxMlrOFruW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjozMzoxMlrOFruW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MjYwNw==", "bodyText": "nit: typos:\n\nshould be called; 2. leader gets elected", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r381392607", "createdAt": "2020-02-19T16:33:12Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).\n+   *\n+   * NOTE: this should only be called after the valid tasks have been\n+   * reassigned or become safe to discard per strategy requirement.\n+   * This can be a costly operation. So, it should be call once the leader get elected and has finished", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTA0MTk4OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODowNzo1MVrOFrx5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxODowNzo1MVrOFrx5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MDY3MQ==", "bodyText": "Can we add a metric for this so we can monitor it?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r381450671", "createdAt": "2020-02-19T18:07:51Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/ZkAdapter.java", "diffHunk": "@@ -875,6 +890,44 @@ public void cleanupOldUnusedTasks(Map<String, Set<DatastreamTask>> previousAssig\n     unusedTasks.forEach(t -> deleteConnectorTask(t.getConnectorType(), t.getDatastreamTaskName()));\n   }\n \n+  /**\n+   * Remove orphan connector task nodes which are not assigned to any instance (live or pause).\n+   *\n+   * NOTE: this should only be called after the valid tasks have been\n+   * reassigned or become safe to discard per strategy requirement.\n+   * This can be a costly operation. So, it should be call once the leader get elected and has finished\n+   * the assignment and cleaned up dead Tasks. Ideally, we should not find anything in this check to clean up.\n+   * @param cleanUpOrphanTasksInConnector Boolean whether orphan tasks should be removed from zookeeper or just print\n+   *                                      warning logs.\n+   */\n+  public void cleanUpOrphanConnectorTasks(boolean cleanUpOrphanTasksInConnector) {\n+    if (!_isLeader) {\n+      return;\n+    }\n+\n+    Map<String, Set<DatastreamTask>> assignmentsByInstance = getAllAssignedDatastreamTasks();\n+\n+    Set<DatastreamTask> validTasks =\n+        assignmentsByInstance.values().stream().flatMap(Collection::stream).collect(Collectors.toSet());\n+\n+    List<String> allConnectors = getAllConnectors();\n+    for (String connector : allConnectors) {\n+      Set<String> connectorTaskList = getConnectorTasks(connector);\n+\n+      connectorTaskList.removeAll(validTasks.stream()\n+          .filter(x -> x.getConnectorType().equals(connector))\n+          .map(DatastreamTask::getDatastreamTaskName)\n+          .collect(Collectors.toSet()));\n+\n+      if (connectorTaskList.size() > 0) {\n+        LOG.warn(\"Found orphan tasks: {} in connector: {}\", connectorTaskList, connector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTA3MzIzOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoxMzo0NFrOFs8W_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1ODo0OFrOFtBRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MDU4OQ==", "bodyText": "should we test with false first after updateInstanceAssignments and see 2 left as well?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r382670589", "createdAt": "2020-02-21T16:13:44Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -759,6 +759,26 @@ public void testDeleteTasksWithPrefix() {\n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n     Assert.assertEquals(leftOverTasks.size(), 2);\n \n+    adapter.cleanUpOrphanConnectorTasks(false);\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    adapter.cleanUpOrphanConnectorTasks(true);\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), new ArrayList<DatastreamTask>());\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    adapter.cleanUpOrphanConnectorTasks(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MDk4MA==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r382750980", "createdAt": "2020-02-21T18:58:48Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -759,6 +759,26 @@ public void testDeleteTasksWithPrefix() {\n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n     Assert.assertEquals(leftOverTasks.size(), 2);\n \n+    adapter.cleanUpOrphanConnectorTasks(false);\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    adapter.cleanUpOrphanConnectorTasks(true);\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    updateInstanceAssignment(adapter, adapter.getInstanceName(), new ArrayList<DatastreamTask>());\n+\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 2);\n+\n+    adapter.cleanUpOrphanConnectorTasks(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MDU4OQ=="}, "originalCommit": {"oid": "3588deb6266ebdcedb8cc8c890589de184abb967"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTExNjQ1OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoyNjoxNlrOFs8yuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODowOTo0MlrOFuPnww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ==", "bodyText": "It's really hard to come up with a name for this.. not happy with this because it suggests action with DO but doesnt specify the action. I am unable to come up with any better though. Will post if I do.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r382677691", "createdAt": "2020-02-21T16:26:16Z", "author": {"login": "DEEPTHIKORAT"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NjkzNw==", "bodyText": "Shall we call this something like: POST_BECOME_LEADER instead? I don't like the existing name at all. And update all functions/comments to reflect the same.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r383546937", "createdAt": "2020-02-24T22:15:26Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxODI5MA==", "bodyText": "I completely agree with both of you. @somandal POST_BECOME_LEADER looks incomplete and is not aligning with the other 3 leader specific event names. How about LEADER_DO_POST_ELECTION ?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384018290", "createdAt": "2020-02-25T17:26:05Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNjgzMw==", "bodyText": "Just an FYI, the event to handle datastream add/drop is also a leader specific event, so I wouldn't read too much into the \"LEADER\" naming scheme. I also noticed that the names of events talk about the operation performed. Maybe we should name it along those lines as well? LEADER_DO_POST_ELECTION_CLEANUP or something.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384026833", "createdAt": "2020-02-25T17:40:47Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODQ1NA==", "bodyText": "Just an FYI, the event to handle datastream add/drop is also a leader specific event, so I wouldn't read too much into the \"LEADER\" naming scheme. I also noticed that the names of events talk about the operation performed. Maybe we should name it along those lines as well? LEADER_DO_POST_ELECTION_CLEANUP or something.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384028454", "createdAt": "2020-02-25T17:43:36Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNDE3NQ==", "bodyText": "How about LEADER_DO_CLEANUP_POST_ELECTION?  It sounds more readable.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384034175", "createdAt": "2020-02-25T18:07:16Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNDc1NQ==", "bodyText": "Sounds great!", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384034755", "createdAt": "2020-02-25T18:09:42Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -722,6 +732,10 @@ protected synchronized void handleEvent(CoordinatorEvent event) {\n           performPartitionMovement((Long) event.getEventMetadata());\n           break;\n \n+        case LEADER_DO_POST_BECOMING_LEADER:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzY5MQ=="}, "originalCommit": {"oid": "80b37469f0b0f91fb94fb54cadbfa578b857e5f3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAwMDY5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxNzoyN1rOFtx5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzo0MzoxOFrOFuPOfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NzgzNg==", "bodyText": "If you plan to rename \"performTaskPostBecomingLeader\", can you also add a static constant for this string literal?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r383547836", "createdAt": "2020-02-24T22:17:27Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1243,6 +1257,13 @@ private void performPartitionMovement(Long notifyTimestamp) {\n     return newAssignmentsByInstance;\n   }\n \n+  void performTaskPostBecomingLeader() {\n+    _log.info(\"performTaskPostBecomingLeader called\");\n+    int orphanCount = _adapter.cleanUpOrphanConnectorTasks(_config.getZkCleanUpOrphanConnectorTask());\n+    _dynamicMetricsManager.createOrUpdateMeter(MODULE, \"performTaskPostBecomingLeader\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyMjE0Ng==", "bodyText": "Please correct me if I understand something wrong. This pattern is followed in the entire file for  createOrUpdateMeter.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384022146", "createdAt": "2020-02-25T17:32:19Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1243,6 +1257,13 @@ private void performPartitionMovement(Long notifyTimestamp) {\n     return newAssignmentsByInstance;\n   }\n \n+  void performTaskPostBecomingLeader() {\n+    _log.info(\"performTaskPostBecomingLeader called\");\n+    int orphanCount = _adapter.cleanUpOrphanConnectorTasks(_config.getZkCleanUpOrphanConnectorTask());\n+    _dynamicMetricsManager.createOrUpdateMeter(MODULE, \"performTaskPostBecomingLeader\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NzgzNg=="}, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODI4Nw==", "bodyText": "Just thought it'll be cleaner to have this as a const separately, but sure if you've done it this way for consistency it's your call. I would generally prefer making all string literals constants, but that is just me.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384028287", "createdAt": "2020-02-25T17:43:18Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1243,6 +1257,13 @@ private void performPartitionMovement(Long notifyTimestamp) {\n     return newAssignmentsByInstance;\n   }\n \n+  void performTaskPostBecomingLeader() {\n+    _log.info(\"performTaskPostBecomingLeader called\");\n+    int orphanCount = _adapter.cleanUpOrphanConnectorTasks(_config.getZkCleanUpOrphanConnectorTask());\n+    _dynamicMetricsManager.createOrUpdateMeter(MODULE, \"performTaskPostBecomingLeader\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NzgzNg=="}, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAxNDU4OnYy", "diffSide": "RIGHT", "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyMjoyNVrOFtyCUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzo0Mzo0MVrOFuPPaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MDAzNA==", "bodyText": "nit: can we make the comment style consistent in this function? some comments have an extra // before and after, other's don't. And it is not exactly clear if this is only because of differentiating steps? If so, maybe number the steps instead to make it clear that those are step related comments?", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r383550034", "createdAt": "2020-02-24T22:22:25Z", "author": {"login": "somandal"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2443,6 +2450,115 @@ public void testDatastreamDedupeMetadataCopy() throws Exception {\n     Assert.assertEquals(datastreams[1].getMetadata().get(destMetaKey), destMetaVal);\n   }\n \n+  private class TestCoordinatorWithSpyZkAdapter extends Coordinator {\n+\n+    TestCoordinatorWithSpyZkAdapter(CachedDatastreamReader testDatastreamCache, Properties testConfig) throws DatastreamException {\n+      super(testDatastreamCache, testConfig);\n+    }\n+\n+    @Override\n+    ZkAdapter createZkAdapter() {\n+      return spy(new ZkAdapter(getConfig().getZkAddress(), getConfig().getCluster(),\n+          getConfig().getDefaultTransportProviderName(), getConfig().getZkSessionTimeout(),\n+          getConfig().getZkConnectionTimeout(), this));\n+    }\n+  }\n+\n+  @Test\n+  public void testCoordinatorPerformPostBecomingLeaderTasks() throws Exception {\n+    String testCluster = \"testCoordinationSmoke3\";\n+    String testConnectorType = \"testConnectorType\";\n+    String datastreamName1 = \"datastream1\";\n+\n+    Properties props = new Properties();\n+    props.put(CoordinatorConfig.CONFIG_CLUSTER, testCluster);\n+    props.put(CoordinatorConfig.CONFIG_ZK_ADDRESS, _zkConnectionString);\n+    props.put(CoordinatorConfig.CONFIG_ZK_SESSION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_SESSION_TIMEOUT));\n+    props.put(CoordinatorConfig.CONFIG_ZK_CONNECTION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_CONNECTION_TIMEOUT));\n+\n+    ZkClient zkClient = new ZkClient(_zkConnectionString);\n+    _cachedDatastreamReader = new CachedDatastreamReader(zkClient, testCluster);\n+    Coordinator instance1 = new TestCoordinatorWithSpyZkAdapter(_cachedDatastreamReader, props);\n+    ZkAdapter spyZkAdapter1 = instance1.getZkAdapter();\n+    instance1.addTransportProvider(DummyTransportProviderAdminFactory.PROVIDER_NAME,\n+        new DummyTransportProviderAdminFactory().createTransportProviderAdmin(\n+            DummyTransportProviderAdminFactory.PROVIDER_NAME, new Properties()));\n+\n+    TestHookConnector connector1 = new TestHookConnector(\"connector1\", testConnectorType);\n+    instance1.addConnector(testConnectorType, connector1, new BroadcastStrategy(Optional.empty()), false,\n+        new SourceBasedDeduper(), null);\n+    instance1.start();\n+\n+    String isLeaderMetricName = \"Coordinator.isLeader\";\n+    Gauge<Integer> isLeader = DynamicMetricsManager.getInstance().getMetric(isLeaderMetricName);\n+\n+    Assert.assertEquals(isLeader.getValue().intValue(), 1);\n+\n+    //\n+    // create datastream definitions under /testAssignmentBasic/datastream/datastream1\n+    //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyMDIxNA==", "bodyText": "I have followed the comment style used in TestCoordinator file.", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384020214", "createdAt": "2020-02-25T17:29:13Z", "author": {"login": "vmaheshw"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2443,6 +2450,115 @@ public void testDatastreamDedupeMetadataCopy() throws Exception {\n     Assert.assertEquals(datastreams[1].getMetadata().get(destMetaKey), destMetaVal);\n   }\n \n+  private class TestCoordinatorWithSpyZkAdapter extends Coordinator {\n+\n+    TestCoordinatorWithSpyZkAdapter(CachedDatastreamReader testDatastreamCache, Properties testConfig) throws DatastreamException {\n+      super(testDatastreamCache, testConfig);\n+    }\n+\n+    @Override\n+    ZkAdapter createZkAdapter() {\n+      return spy(new ZkAdapter(getConfig().getZkAddress(), getConfig().getCluster(),\n+          getConfig().getDefaultTransportProviderName(), getConfig().getZkSessionTimeout(),\n+          getConfig().getZkConnectionTimeout(), this));\n+    }\n+  }\n+\n+  @Test\n+  public void testCoordinatorPerformPostBecomingLeaderTasks() throws Exception {\n+    String testCluster = \"testCoordinationSmoke3\";\n+    String testConnectorType = \"testConnectorType\";\n+    String datastreamName1 = \"datastream1\";\n+\n+    Properties props = new Properties();\n+    props.put(CoordinatorConfig.CONFIG_CLUSTER, testCluster);\n+    props.put(CoordinatorConfig.CONFIG_ZK_ADDRESS, _zkConnectionString);\n+    props.put(CoordinatorConfig.CONFIG_ZK_SESSION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_SESSION_TIMEOUT));\n+    props.put(CoordinatorConfig.CONFIG_ZK_CONNECTION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_CONNECTION_TIMEOUT));\n+\n+    ZkClient zkClient = new ZkClient(_zkConnectionString);\n+    _cachedDatastreamReader = new CachedDatastreamReader(zkClient, testCluster);\n+    Coordinator instance1 = new TestCoordinatorWithSpyZkAdapter(_cachedDatastreamReader, props);\n+    ZkAdapter spyZkAdapter1 = instance1.getZkAdapter();\n+    instance1.addTransportProvider(DummyTransportProviderAdminFactory.PROVIDER_NAME,\n+        new DummyTransportProviderAdminFactory().createTransportProviderAdmin(\n+            DummyTransportProviderAdminFactory.PROVIDER_NAME, new Properties()));\n+\n+    TestHookConnector connector1 = new TestHookConnector(\"connector1\", testConnectorType);\n+    instance1.addConnector(testConnectorType, connector1, new BroadcastStrategy(Optional.empty()), false,\n+        new SourceBasedDeduper(), null);\n+    instance1.start();\n+\n+    String isLeaderMetricName = \"Coordinator.isLeader\";\n+    Gauge<Integer> isLeader = DynamicMetricsManager.getInstance().getMetric(isLeaderMetricName);\n+\n+    Assert.assertEquals(isLeader.getValue().intValue(), 1);\n+\n+    //\n+    // create datastream definitions under /testAssignmentBasic/datastream/datastream1\n+    //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MDAzNA=="}, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODUyMA==", "bodyText": "Sure, if you think consistency is more important then leave it as is. In general though, this style of commenting is out of the ordinary from the rest of the code base", "url": "https://github.com/linkedin/brooklin/pull/685#discussion_r384028520", "createdAt": "2020-02-25T17:43:41Z", "author": {"login": "somandal"}, "path": "datastream-server-restli/src/test/java/com/linkedin/datastream/server/TestCoordinator.java", "diffHunk": "@@ -2443,6 +2450,115 @@ public void testDatastreamDedupeMetadataCopy() throws Exception {\n     Assert.assertEquals(datastreams[1].getMetadata().get(destMetaKey), destMetaVal);\n   }\n \n+  private class TestCoordinatorWithSpyZkAdapter extends Coordinator {\n+\n+    TestCoordinatorWithSpyZkAdapter(CachedDatastreamReader testDatastreamCache, Properties testConfig) throws DatastreamException {\n+      super(testDatastreamCache, testConfig);\n+    }\n+\n+    @Override\n+    ZkAdapter createZkAdapter() {\n+      return spy(new ZkAdapter(getConfig().getZkAddress(), getConfig().getCluster(),\n+          getConfig().getDefaultTransportProviderName(), getConfig().getZkSessionTimeout(),\n+          getConfig().getZkConnectionTimeout(), this));\n+    }\n+  }\n+\n+  @Test\n+  public void testCoordinatorPerformPostBecomingLeaderTasks() throws Exception {\n+    String testCluster = \"testCoordinationSmoke3\";\n+    String testConnectorType = \"testConnectorType\";\n+    String datastreamName1 = \"datastream1\";\n+\n+    Properties props = new Properties();\n+    props.put(CoordinatorConfig.CONFIG_CLUSTER, testCluster);\n+    props.put(CoordinatorConfig.CONFIG_ZK_ADDRESS, _zkConnectionString);\n+    props.put(CoordinatorConfig.CONFIG_ZK_SESSION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_SESSION_TIMEOUT));\n+    props.put(CoordinatorConfig.CONFIG_ZK_CONNECTION_TIMEOUT, String.valueOf(ZkClient.DEFAULT_CONNECTION_TIMEOUT));\n+\n+    ZkClient zkClient = new ZkClient(_zkConnectionString);\n+    _cachedDatastreamReader = new CachedDatastreamReader(zkClient, testCluster);\n+    Coordinator instance1 = new TestCoordinatorWithSpyZkAdapter(_cachedDatastreamReader, props);\n+    ZkAdapter spyZkAdapter1 = instance1.getZkAdapter();\n+    instance1.addTransportProvider(DummyTransportProviderAdminFactory.PROVIDER_NAME,\n+        new DummyTransportProviderAdminFactory().createTransportProviderAdmin(\n+            DummyTransportProviderAdminFactory.PROVIDER_NAME, new Properties()));\n+\n+    TestHookConnector connector1 = new TestHookConnector(\"connector1\", testConnectorType);\n+    instance1.addConnector(testConnectorType, connector1, new BroadcastStrategy(Optional.empty()), false,\n+        new SourceBasedDeduper(), null);\n+    instance1.start();\n+\n+    String isLeaderMetricName = \"Coordinator.isLeader\";\n+    Gauge<Integer> isLeader = DynamicMetricsManager.getInstance().getMetric(isLeaderMetricName);\n+\n+    Assert.assertEquals(isLeader.getValue().intValue(), 1);\n+\n+    //\n+    // create datastream definitions under /testAssignmentBasic/datastream/datastream1\n+    //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MDAzNA=="}, "originalCommit": {"oid": "c983e969c54e65157200cfd4bd9f377cce1746d8"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 957, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}