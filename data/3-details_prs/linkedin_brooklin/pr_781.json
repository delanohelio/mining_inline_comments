{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMzE2MTgy", "number": 781, "title": "Pull in some Kafka consumer metrics for the AbstractKafkaBasedConnectorTask", "bodyText": "This PR pulls in the following Kafka consumer metrics:\n\nconsumer-offset-watermark-span\nconsumer-liclosest-data-loss-estimation\n\nThese metrics are not present in JMX, so they need to be manually pulled in via the consumer.metrics() API.\nThis PR also bumps up the LiKafkaVersion to ensure that the above metrics are present.", "createdAt": "2020-11-13T04:14:11Z", "url": "https://github.com/linkedin/brooklin/pull/781", "merged": true, "mergeCommit": {"oid": "ba07e6fb4662e763559f87d161674fab4265ca26"}, "closed": true, "closedAt": "2020-11-18T00:30:06Z", "author": {"login": "somandal"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb-_hKgH2gAyNTIwMzE2MTgyOmUzY2FmODJmYWZhMmVmNDdlMmNiYmEwOWNhOTEzMWM0OTg3NjdlYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddi8vCgFqTUzMjkyMDY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/e3caf82fafa2ef47e2cbba09ca9131c498767eab", "committedDate": "2020-11-13T03:56:41Z", "message": "Pull in some Kafka consumer metrics for the AbstractKafkaBasedConnectorTask"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTQ1NDUy", "url": "https://github.com/linkedin/brooklin/pull/781#pullrequestreview-531545452", "createdAt": "2020-11-16T17:27:36Z", "commit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyNzozNlrOH0JljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0ODo0OFrOH0KcGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0NTA2OA==", "bodyText": "I don't have a strong opinion on the matter but unregisterMetric no-ops if the metric hasn't been registered. This may spare you having to maintain and check _kafkaConsumerMetricsRegistered.", "url": "https://github.com/linkedin/brooklin/pull/781#discussion_r524445068", "createdAt": "2020-11-16T17:27:36Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -151,6 +201,11 @@ public void deregisterMetrics() {\n       DYNAMIC_METRICS_MANAGER.unregisterMetric(_className, _key, TIME_SPENT_BETWEEN_POLLS_MS);\n       DYNAMIC_METRICS_MANAGER.unregisterMetric(_className, _key, PER_EVENT_PROCESSING_TIME_NANOS);\n     }\n+\n+    if (_kafkaConsumerMetricsRegistered) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0OTg0MA==", "bodyText": "nit: remove empty line", "url": "https://github.com/linkedin/brooklin/pull/781#discussion_r524449840", "createdAt": "2020-11-16T17:34:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -130,6 +143,43 @@\n     DYNAMIC_METRICS_MANAGER.registerGauge(_className, AGGREGATE, NUM_TOPICS, aggNumTopics::get);\n   }\n \n+  /**\n+   * Register some of the Kafka consumer metrics of interest. This cannot be done as part of the constructor\n+   * as the Kafka consumer may be created at a later time than this object.\n+   * @param consumer the Kafka consumer for which to register the metrics\n+   * @param clientId the Kafka consumer's client.id\n+   */\n+  public void registerKafkaConsumerMetrics(Consumer<?, ?> consumer, String clientId) {\n+    if (consumer == null || StringUtils.isBlank(clientId)) {\n+      _errorLogger.warn(\"Cannot register the Kafka consumer metrics, either the consumer is null or the client.id is blank\");\n+      return;\n+    }\n+\n+    Supplier<Double> watermarkSpanSupplier = () -> getConsumerOffsetWatermarkSpanMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_OFFSET_WATERMARK_SPAN, watermarkSpanSupplier);\n+\n+    Supplier<Double> offsetResetSupplier = () -> getConsumerLiclosestDataLossEstimationMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_LICLOSEST_DATA_LOSS_ESTIMATION, offsetResetSupplier);\n+\n+    _kafkaConsumerMetricsRegistered = true;\n+  }\n+\n+  private double getConsumerOffsetWatermarkSpanMetric(Consumer<?, ?> consumer, String clientId) {\n+    return getConsumerMetricValue(consumer, clientId, \"consumer-offset-watermark-span\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1MjU3NQ==", "bodyText": "Why not throw on null consumer (and possibly clientId as well)?", "url": "https://github.com/linkedin/brooklin/pull/781#discussion_r524452575", "createdAt": "2020-11-16T17:38:47Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -130,6 +143,43 @@\n     DYNAMIC_METRICS_MANAGER.registerGauge(_className, AGGREGATE, NUM_TOPICS, aggNumTopics::get);\n   }\n \n+  /**\n+   * Register some of the Kafka consumer metrics of interest. This cannot be done as part of the constructor\n+   * as the Kafka consumer may be created at a later time than this object.\n+   * @param consumer the Kafka consumer for which to register the metrics\n+   * @param clientId the Kafka consumer's client.id\n+   */\n+  public void registerKafkaConsumerMetrics(Consumer<?, ?> consumer, String clientId) {\n+    if (consumer == null || StringUtils.isBlank(clientId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NjQyOQ==", "bodyText": "I don't think consumer can be null since you already guard against that prior to calling getConsumerMetricValue(). The suppliers/lambdas are bound to the consumer param.", "url": "https://github.com/linkedin/brooklin/pull/781#discussion_r524456429", "createdAt": "2020-11-16T17:44:33Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -130,6 +143,43 @@\n     DYNAMIC_METRICS_MANAGER.registerGauge(_className, AGGREGATE, NUM_TOPICS, aggNumTopics::get);\n   }\n \n+  /**\n+   * Register some of the Kafka consumer metrics of interest. This cannot be done as part of the constructor\n+   * as the Kafka consumer may be created at a later time than this object.\n+   * @param consumer the Kafka consumer for which to register the metrics\n+   * @param clientId the Kafka consumer's client.id\n+   */\n+  public void registerKafkaConsumerMetrics(Consumer<?, ?> consumer, String clientId) {\n+    if (consumer == null || StringUtils.isBlank(clientId)) {\n+      _errorLogger.warn(\"Cannot register the Kafka consumer metrics, either the consumer is null or the client.id is blank\");\n+      return;\n+    }\n+\n+    Supplier<Double> watermarkSpanSupplier = () -> getConsumerOffsetWatermarkSpanMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_OFFSET_WATERMARK_SPAN, watermarkSpanSupplier);\n+\n+    Supplier<Double> offsetResetSupplier = () -> getConsumerLiclosestDataLossEstimationMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_LICLOSEST_DATA_LOSS_ESTIMATION, offsetResetSupplier);\n+\n+    _kafkaConsumerMetricsRegistered = true;\n+  }\n+\n+  private double getConsumerOffsetWatermarkSpanMetric(Consumer<?, ?> consumer, String clientId) {\n+    return getConsumerMetricValue(consumer, clientId, \"consumer-offset-watermark-span\");\n+\n+  }\n+\n+  private double getConsumerLiclosestDataLossEstimationMetric(Consumer<?, ?> consumer, String clientId) {\n+    return getConsumerMetricValue(consumer, clientId, \"consumer-liclosest-data-loss-estimation\");\n+  }\n+\n+  private double getConsumerMetricValue(Consumer<?, ?> consumer, String clientId, String metricName) {\n+    Map<String, String> tags = new HashMap<>(2);\n+    tags.put(\"client-id\", clientId);\n+    MetricName name = new MetricName(metricName, \"lnkd\", \"\", tags);\n+    return Optional.ofNullable(consumer).map(c -> c.metrics().get(name)).map(Metric::value).orElse(0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1OTAzMw==", "bodyText": "Are you deliberately using the deprecated Metric::value instead of Metric.metricValue() + casting?", "url": "https://github.com/linkedin/brooklin/pull/781#discussion_r524459033", "createdAt": "2020-11-16T17:48:48Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/KafkaBasedConnectorTaskMetrics.java", "diffHunk": "@@ -130,6 +143,43 @@\n     DYNAMIC_METRICS_MANAGER.registerGauge(_className, AGGREGATE, NUM_TOPICS, aggNumTopics::get);\n   }\n \n+  /**\n+   * Register some of the Kafka consumer metrics of interest. This cannot be done as part of the constructor\n+   * as the Kafka consumer may be created at a later time than this object.\n+   * @param consumer the Kafka consumer for which to register the metrics\n+   * @param clientId the Kafka consumer's client.id\n+   */\n+  public void registerKafkaConsumerMetrics(Consumer<?, ?> consumer, String clientId) {\n+    if (consumer == null || StringUtils.isBlank(clientId)) {\n+      _errorLogger.warn(\"Cannot register the Kafka consumer metrics, either the consumer is null or the client.id is blank\");\n+      return;\n+    }\n+\n+    Supplier<Double> watermarkSpanSupplier = () -> getConsumerOffsetWatermarkSpanMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_OFFSET_WATERMARK_SPAN, watermarkSpanSupplier);\n+\n+    Supplier<Double> offsetResetSupplier = () -> getConsumerLiclosestDataLossEstimationMetric(consumer, clientId);\n+    DYNAMIC_METRICS_MANAGER.registerGauge(_className, _key, CONSUMER_LICLOSEST_DATA_LOSS_ESTIMATION, offsetResetSupplier);\n+\n+    _kafkaConsumerMetricsRegistered = true;\n+  }\n+\n+  private double getConsumerOffsetWatermarkSpanMetric(Consumer<?, ?> consumer, String clientId) {\n+    return getConsumerMetricValue(consumer, clientId, \"consumer-offset-watermark-span\");\n+\n+  }\n+\n+  private double getConsumerLiclosestDataLossEstimationMetric(Consumer<?, ?> consumer, String clientId) {\n+    return getConsumerMetricValue(consumer, clientId, \"consumer-liclosest-data-loss-estimation\");\n+  }\n+\n+  private double getConsumerMetricValue(Consumer<?, ?> consumer, String clientId, String metricName) {\n+    Map<String, String> tags = new HashMap<>(2);\n+    tags.put(\"client-id\", clientId);\n+    MetricName name = new MetricName(metricName, \"lnkd\", \"\", tags);\n+    return Optional.ofNullable(consumer).map(c -> c.metrics().get(name)).map(Metric::value).orElse(0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3caf82fafa2ef47e2cbba09ca9131c498767eab"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "438959a931e69c38c47a26bee179b56d3c5b8a1c", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/438959a931e69c38c47a26bee179b56d3c5b8a1c", "committedDate": "2020-11-17T02:21:11Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDM1MTAz", "url": "https://github.com/linkedin/brooklin/pull/781#pullrequestreview-532035103", "createdAt": "2020-11-17T05:39:25Z", "commit": {"oid": "438959a931e69c38c47a26bee179b56d3c5b8a1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTIwNjg2", "url": "https://github.com/linkedin/brooklin/pull/781#pullrequestreview-532920686", "createdAt": "2020-11-18T00:24:09Z", "commit": {"oid": "438959a931e69c38c47a26bee179b56d3c5b8a1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 342, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}