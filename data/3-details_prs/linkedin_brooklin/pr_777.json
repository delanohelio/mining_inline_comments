{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjU2Nzk5", "number": 777, "title": "Handle Exception in seekToLastCheckpoint in AbstractKafkaMirrorMakerConnectorTask", "bodyText": "In the case when the connector task is stopped and connector thread is not blocked on the poll call, the next consumer call gets WakeUpException, which in our fail case is \"seekToLastCheckpoint\" call. This results in not attempting to commitCheckpoint before the task dies. In case of FlushlessEventProducer, it is still safe to commitSafeOffsets, to minimize the duplication of records.", "createdAt": "2020-11-05T18:27:23Z", "url": "https://github.com/linkedin/brooklin/pull/777", "merged": true, "mergeCommit": {"oid": "de637eed65c03ee87b881636bc160e38785b2795"}, "closed": true, "closedAt": "2020-11-09T17:54:59Z", "author": {"login": "vmaheshw"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABboAf5CAH2gAyNTE2MjU2Nzk5OmMzMWNkNGExNWNjOGRkNjliMGE2NTNkYmU0MjAxZGU5MzRlYTZkNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdaAH1_AFqTUyNTU2NDI3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "author": {"user": {"login": "vmaheshw", "name": "Vaibhav Maheshwari"}}, "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "committedDate": "2019-11-18T20:06:44Z", "message": "Merge pull request #1 from linkedin/master\n\nPull latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79ffa91188aa16ebcb2e9c1e55d4b9a8911b9c36", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/79ffa91188aa16ebcb2e9c1e55d4b9a8911b9c36", "committedDate": "2020-11-02T20:44:50Z", "message": "Merge branch 'master' of github.com:linkedin/brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2244a93bc0c319c099301feec5d3f0f79297e3c1", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/2244a93bc0c319c099301feec5d3f0f79297e3c1", "committedDate": "2020-11-05T07:16:21Z", "message": "Handle WakupException in seekToLastCheckpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/5b3ca1a8e9e0b71463d2becd6113502888f36387", "committedDate": "2020-11-05T18:25:16Z", "message": "Handle exception for flushless producer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTU5MjUy", "url": "https://github.com/linkedin/brooklin/pull/777#pullrequestreview-524559252", "createdAt": "2020-11-05T18:42:39Z", "commit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0Mjo0MFrOHuRSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo1OToxNFrOHuR35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3OTcwOQ==", "bodyText": "Please catch only the WakeupException here to commit safe offsets to ensure we only commit here on the shutdown path. I want to make sure that we understand any other exceptions thrown before we add code to catch those and commit safe offsets.", "url": "https://github.com/linkedin/brooklin/pull/777#discussion_r518279709", "createdAt": "2020-11-05T18:42:40Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -485,6 +483,30 @@ public KafkaDatastreamStatesResponse getKafkaDatastreamStatesResponse() {\n         _isFlushlessModeEnabled ? _flushlessProducer.getInFlightMessagesCounts() : Collections.emptyMap());\n   }\n \n+  @VisibleForTesting\n+  protected void seekToLastCheckpoint(Set<TopicPartition> topicPartitions) {\n+    try {\n+      super.seekToLastCheckpoint(topicPartitions);\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3OTkzOA==", "bodyText": "nit: add a space after \"//\"\nreword: Flushless mode tracks the successfully received acks, so it is safe to commit offsets even if flush throws an exception. Commit the safe offsets to reduce send duplication.", "url": "https://github.com/linkedin/brooklin/pull/777#discussion_r518279938", "createdAt": "2020-11-05T18:43:04Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -376,14 +376,12 @@ protected void maybeCommitOffsets(Consumer<?, ?> consumer, boolean hardCommit) {\n     if (_isFlushlessModeEnabled) {\n       if (hardCommit) { // hard commit (flush and commit checkpoints)\n         LOG.info(\"Calling flush on the producer.\");\n-        _datastreamTask.getEventProducer().flush();\n-        // Flush may succeed even though some of the records received send failures. Flush only guarantees that all\n-        // outstanding send() calls have completed, without providing any guarantees about their successful completion.\n-        // Thus it is possible that some send callbacks returned an exception and such TopicPartitions must be rewound\n-        // to their last committed offset to avoid data loss.\n-        rewindAndPausePartitionsOnSendException();\n-        commitSafeOffsets(consumer);\n-\n+        try {\n+          _datastreamTask.getEventProducer().flush();\n+        } finally {\n+          //committing the safe offsets will reduce the send duplication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MTc4NA==", "bodyText": "Can you add a comment explaining why you aren't just calling super.getLastCheckpointToSeekTo(lastCheckpoint, tpWithNoCommits, tp);", "url": "https://github.com/linkedin/brooklin/pull/777#discussion_r518281784", "createdAt": "2020-11-05T18:46:18Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -485,6 +483,30 @@ public KafkaDatastreamStatesResponse getKafkaDatastreamStatesResponse() {\n         _isFlushlessModeEnabled ? _flushlessProducer.getInFlightMessagesCounts() : Collections.emptyMap());\n   }\n \n+  @VisibleForTesting\n+  protected void seekToLastCheckpoint(Set<TopicPartition> topicPartitions) {\n+    try {\n+      super.seekToLastCheckpoint(topicPartitions);\n+    } catch (Exception e) {\n+      commitSafeOffsets(_consumer);\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  protected void getLastCheckpointToSeekTo(Map<TopicPartition, OffsetAndMetadata> lastCheckpoint,\n+      Set<TopicPartition> tpWithNoCommits, TopicPartition tp) {\n+    if (_isFlushlessModeEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4OTM4MQ==", "bodyText": "was removing this error log intended? if so, why?", "url": "https://github.com/linkedin/brooklin/pull/777#discussion_r518289381", "createdAt": "2020-11-05T18:59:14Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/AbstractKafkaBasedConnectorTask.java", "diffHunk": "@@ -274,7 +274,6 @@ protected void rewindAndPausePartitionOnException(TopicPartition srcTopicPartiti\n       // Seek to last checkpoint failed. Throw an exception to avoid any data loss scenarios where the consumed\n       // offset can be committed even though the send for that offset has failed.\n       String errorMessage = String.format(\"Partition rewind for %s failed due to \", srcTopicPartition);\n-      _logger.error(errorMessage, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTk2NTc5", "url": "https://github.com/linkedin/brooklin/pull/777#pullrequestreview-524596579", "createdAt": "2020-11-05T19:25:29Z", "commit": {"oid": "5b3ca1a8e9e0b71463d2becd6113502888f36387"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f46a88a97951f917809616bae8ca0450f6cc1533", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/f46a88a97951f917809616bae8ca0450f6cc1533", "committedDate": "2020-11-05T22:53:25Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzQyOTMy", "url": "https://github.com/linkedin/brooklin/pull/777#pullrequestreview-524742932", "createdAt": "2020-11-05T23:07:59Z", "commit": {"oid": "f46a88a97951f917809616bae8ca0450f6cc1533"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NTY0Mjc4", "url": "https://github.com/linkedin/brooklin/pull/777#pullrequestreview-525564278", "createdAt": "2020-11-07T00:07:50Z", "commit": {"oid": "f46a88a97951f917809616bae8ca0450f6cc1533"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 333, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}