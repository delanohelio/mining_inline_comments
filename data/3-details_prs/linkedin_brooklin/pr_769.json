{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzM3MzUy", "number": 769, "title": "Shutdown the producer on IllegalStateException as Kafka's bounded flush method wraps flush exceptions into this type", "bodyText": "Noticed that just catching InterruptException and TimeoutException are not sufficient. The full stacktrace returned by Kafka when using bounded flush wraps the actual exception into an IllegalStateException. Thus we are not actually able to close the producer without catching an IllegalStateException.\nImportant: DO NOT REPORT SECURITY ISSUES DIRECTLY ON GITHUB.\nFor reporting security issues and contributing security fixes,\nplease, email security@linkedin.com instead, as described in\nthe contribution guidelines.\nPlease, take a minute to review the contribution guidelines at:\nhttps://github.com/linkedin/Brooklin/blob/master/CONTRIBUTING.md", "createdAt": "2020-10-19T23:18:44Z", "url": "https://github.com/linkedin/brooklin/pull/769", "merged": true, "mergeCommit": {"oid": "73021e6b496870ce332f4c60019f17c76dc2a920"}, "closed": true, "closedAt": "2020-10-20T19:39:03Z", "author": {"login": "somandal"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUMlIGAH2gAyNTA2MzM3MzUyOjA0MmZkOTE2YTdjZjg5YTM3MDY4YWY2OTBlZDI2YzljY2FlZmMwNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUeAqoAFqTUxMzA2NzQ3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "042fd916a7cf89a37068af690ed26c9ccaefc044", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/042fd916a7cf89a37068af690ed26c9ccaefc044", "committedDate": "2020-10-19T23:15:08Z", "message": "Shutdown the producer on IllegalStateException as Kafka's bounded flush method wraps flush exceptions into this type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjM3OTY3", "url": "https://github.com/linkedin/brooklin/pull/769#pullrequestreview-512237967", "createdAt": "2020-10-19T23:54:44Z", "commit": {"oid": "042fd916a7cf89a37068af690ed26c9ccaefc044"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMjcyMjQw", "url": "https://github.com/linkedin/brooklin/pull/769#pullrequestreview-512272240", "createdAt": "2020-10-20T01:43:56Z", "commit": {"oid": "042fd916a7cf89a37068af690ed26c9ccaefc044"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTo0Mzo1N1rOHkniSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMTo0Mzo1N1rOHkniSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1ODUzOA==", "bodyText": "* This method waits up to <code>timeout</code> for the producer to send out all the buffered records.\n     * @param timeout The maximum time to wait for producer to complete. The value should be non-negative.\n     * @param unit The time unit for the <code>timeout</code>\n     * @throws TimeoutException If producer fail to finish in time\n     * @throws InterruptException If the thread is interrupted while blocked\n     * @throws IllegalArgumentException If the <code>timeout</code> is negative.\n     */\n    @Override\n    public void flush(long timeout, TimeUnit unit) {`\n\nAccording to the Javadocs, IllegalArgumentException should only come for negative timeout value. Is this Javadoc comment stale?", "url": "https://github.com/linkedin/brooklin/pull/769#discussion_r508158538", "createdAt": "2020-10-20T01:43:57Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -372,15 +372,16 @@ void flush() {\n     if (producer != null) {\n       try {\n         producer.flush(_producerFlushTimeoutMs, TimeUnit.MILLISECONDS);\n-      } catch (InterruptException | TimeoutException e) {\n-        // The KafkaProducer object should not be reused on an interrupted flush\n+      } catch (InterruptException | TimeoutException | IllegalStateException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042fd916a7cf89a37068af690ed26c9ccaefc044"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c", "committedDate": "2020-10-20T19:12:52Z", "message": "Close the producer on any exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDU1Njc0", "url": "https://github.com/linkedin/brooklin/pull/769#pullrequestreview-513055674", "createdAt": "2020-10-20T19:16:35Z", "commit": {"oid": "40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDY3Mzk1", "url": "https://github.com/linkedin/brooklin/pull/769#pullrequestreview-513067395", "createdAt": "2020-10-20T19:33:29Z", "commit": {"oid": "40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMzozMFrOHlN5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMzozMFrOHlN5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzA5Mw==", "bodyText": "Nitpick. Only concern I have here is we are masking all exceptions to a generic exception. There could be exceptions which are unexpected and we do not want to handle them? https://www.infoworld.com/article/2073800/beware-the-dangers-of-generic-exceptions.html", "url": "https://github.com/linkedin/brooklin/pull/769#discussion_r508787093", "createdAt": "2020-10-20T19:33:30Z", "author": {"login": "vishwajith-s"}, "path": "datastream-kafka/src/main/java/com/linkedin/datastream/kafka/KafkaProducerWrapper.java", "diffHunk": "@@ -372,15 +371,16 @@ void flush() {\n     if (producer != null) {\n       try {\n         producer.flush(_producerFlushTimeoutMs, TimeUnit.MILLISECONDS);\n-      } catch (InterruptException | TimeoutException e) {\n-        // The KafkaProducer object should not be reused on an interrupted flush\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDY3NDcw", "url": "https://github.com/linkedin/brooklin/pull/769#pullrequestreview-513067470", "createdAt": "2020-10-20T19:33:36Z", "commit": {"oid": "40467ef2cf1150bc26cef0d24e7c5bcf179b4a6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 313, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}