{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDI0NjEy", "number": 691, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToyMzoyN1rODm6Opg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNjo0MlrODn7uAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTI2NTAyOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToyMzoyN1rOF0mXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToyMzoyN1rOF0mXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5ODc4MA==", "bodyText": "_eventMetadata could be null for some events. I suggest comparing them with Objects.equals().", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r390698780", "createdAt": "2020-03-11T01:23:27Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "diffHunk": "@@ -134,6 +124,23 @@ public String toString() {\n     return \"type:\" + _eventType;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    CoordinatorEvent that = (CoordinatorEvent) o;\n+    return _eventType == that._eventType && _eventMetadata.equals(that._eventMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQxNjg1OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTozNzo1N1rOF2IZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjo0NFrOF2Pfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTAwMQ==", "bodyText": "Would it be a good idea to document the purpose of cleanUpOrphanConnectorTasks?\ne.g.\n   * @param cleanUpOrphanConnectorTasks indicates whether the leader should clean up stale/orphan connector\n   *                                    task entries in ZooKeeper", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392305001", "createdAt": "2020-03-13T15:37:57Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "diffHunk": "@@ -63,9 +59,10 @@ private CoordinatorEvent(EventType eventType, Object eventMetadata) {\n \n   /**\n    * Returns an event that indicates a new assignment needs to be done (this is a leader-specific event).\n+   * cleanUpOrphanConnectorTasks should be set to true once when the coordinator becomes leader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMTI4Mw==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392421283", "createdAt": "2020-03-13T19:12:44Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "diffHunk": "@@ -63,9 +59,10 @@ private CoordinatorEvent(EventType eventType, Object eventMetadata) {\n \n   /**\n    * Returns an event that indicates a new assignment needs to be done (this is a leader-specific event).\n+   * cleanUpOrphanConnectorTasks should be set to true once when the coordinator becomes leader.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNTAwMQ=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQ4NTkyOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1NTo1MFrOF2JF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1NTo1MFrOF2JF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxNjQwMA==", "bodyText": "Objects.equals()? It's not clear to me if _errorMessage can never be null.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392316400", "createdAt": "2020-03-13T15:55:50Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEvent.java", "diffHunk": "@@ -149,6 +156,26 @@ public String getEventData() {\n       return _errorMessage;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      if (!super.equals(o)) {\n+        return false;\n+      }\n+      HandleInstanceError that = (HandleInstanceError) o;\n+      return _errorMessage.equals(that._errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTY0MTc4OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozODoxM1rOF2Kpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjo1MFrOF2Pf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0MTg5MA==", "bodyText": "stale comment? javadoc on function seems stale, too", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392341890", "createdAt": "2020-03-13T16:38:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -38,19 +38,14 @@ public CoordinatorEventBlockingQueue() {\n    */\n   public synchronized void put(CoordinatorEvent event) {\n     LOG.info(\"Queuing event {} to event queue\", event.getType());\n-    if (!_eventMap.containsKey(event.getType())) {\n+    if (!_eventSet.contains(event)) {\n       // only insert if there isn't an event present in the queue with the same name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMTMzMQ==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392421331", "createdAt": "2020-03-13T19:12:50Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -38,19 +38,14 @@ public CoordinatorEventBlockingQueue() {\n    */\n   public synchronized void put(CoordinatorEvent event) {\n     LOG.info(\"Queuing event {} to event queue\", event.getType());\n-    if (!_eventMap.containsKey(event.getType())) {\n+    if (!_eventSet.contains(event)) {\n       // only insert if there isn't an event present in the queue with the same name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0MTg5MA=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTY5ODY3OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo1MjoyOFrOF2LM_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyOTozNlrOF2OR3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MDk3Mw==", "bodyText": "Since put() permits null to be inserted into _eventSet, shouldn't we move this outside of the if block?\nA quick look didn't show me any places where we explicitly put(null) but I see this method returning null on line 70 and I am not 100% sure some piece of code won't put that back.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392350973", "createdAt": "2020-03-13T16:52:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -78,7 +73,7 @@ public synchronized CoordinatorEvent take() throws InterruptedException {\n     if (queuedEvent != null) {\n       LOG.info(\"De-queuing event \" + queuedEvent.getType());\n       LOG.debug(\"Event queue size: {}\", _eventQueue.size());\n-      _eventMap.remove(queuedEvent.getType());\n+      _eventSet.remove(queuedEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMTM3Mw==", "bodyText": "poll returns null if queue is empty.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392401373", "createdAt": "2020-03-13T18:29:36Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -78,7 +73,7 @@ public synchronized CoordinatorEvent take() throws InterruptedException {\n     if (queuedEvent != null) {\n       LOG.info(\"De-queuing event \" + queuedEvent.getType());\n       LOG.debug(\"Event queue size: {}\", _eventQueue.size());\n-      _eventMap.remove(queuedEvent.getType());\n+      _eventSet.remove(queuedEvent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MDk3Mw=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk0Mjc2OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/TestCoordinatorEventBlockingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxMDowMlrOF2Nriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMjo1OVrOF2PgBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MTU2Mw==", "bodyText": "Thinking out loud: should we assert on the total number of events actually in the queue after these puts, or whether our takes exhaust them?", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392391563", "createdAt": "2020-03-13T18:10:02Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/TestCoordinatorEventBlockingQueue.java", "diffHunk": "@@ -16,38 +16,20 @@\n   @Test\n   public void testHappyPath() throws Exception {\n     CoordinatorEventBlockingQueue eventBlockingQueue = new CoordinatorEventBlockingQueue();\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-  }\n-\n-\n-  @Test\n-  public void testEventWithMetadata() throws Exception {\n-    CoordinatorEventBlockingQueue eventBlockingQueue = new CoordinatorEventBlockingQueue();\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(false));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(true));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(false));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(true));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test1\"));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test1\"));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test2\"));\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMTM4Mw==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392421383", "createdAt": "2020-03-13T19:12:59Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/TestCoordinatorEventBlockingQueue.java", "diffHunk": "@@ -16,38 +16,20 @@\n   @Test\n   public void testHappyPath() throws Exception {\n     CoordinatorEventBlockingQueue eventBlockingQueue = new CoordinatorEventBlockingQueue();\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n-    Assert.assertEquals(eventBlockingQueue.take(), CoordinatorEvent.LEADER_DO_CLEANUP_POST_ELECTION_EVENT);\n-  }\n-\n-\n-  @Test\n-  public void testEventWithMetadata() throws Exception {\n-    CoordinatorEventBlockingQueue eventBlockingQueue = new CoordinatorEventBlockingQueue();\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n-    eventBlockingQueue.put(CoordinatorEvent.LEADER_DO_ASSIGNMENT_EVENT);\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(false));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(true));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(false));\n+    eventBlockingQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent(true));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test1\"));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test1\"));\n     eventBlockingQueue.put(CoordinatorEvent.createLeaderPartitionAssignmentEvent(\"test2\"));\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);\n     eventBlockingQueue.put(CoordinatorEvent.HANDLE_ASSIGNMENT_CHANGE_EVENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5MTU2Mw=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk2MDE5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoxNjowOFrOF2N2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODozMjoyOVrOF2OXUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NDQxNQ==", "bodyText": "I almost reached out to you then thought this would prolly be a lot more useful to ask over here for knowledge sharing and wider visibility (think of future maintainers):\n\nWhy could put() be invoked with duplicate events?\nWhy are we rejecting duplicates?", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392394415", "createdAt": "2020-03-13T18:16:08Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -38,19 +38,14 @@ public CoordinatorEventBlockingQueue() {\n    */\n   public synchronized void put(CoordinatorEvent event) {\n     LOG.info(\"Queuing event {} to event queue\", event.getType());\n-    if (!_eventMap.containsKey(event.getType())) {\n+    if (!_eventSet.contains(event)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwMjc2OQ==", "bodyText": "Heartbeat is added periodically. If the Coordinator Event thread is stuck or slow at processing, we might add another heartbeat event.\nReason to reject is if the event is already present in the queue, it will do the exact operation twice (which is unnecessary) and delay the pipeline.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392402769", "createdAt": "2020-03-13T18:32:29Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorEventBlockingQueue.java", "diffHunk": "@@ -38,19 +38,14 @@ public CoordinatorEventBlockingQueue() {\n    */\n   public synchronized void put(CoordinatorEvent event) {\n     LOG.info(\"Queuing event {} to event queue\", event.getType());\n-    if (!_eventMap.containsKey(event.getType())) {\n+    if (!_eventSet.contains(event)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5NDQxNQ=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk4ODM5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNDo1OVrOF2OIAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNDo1OVrOF2OIAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5ODg0OQ==", "bodyText": "May just be a good idea to call out why this should only be called once -> that it's an expensive operation.\nSomeone reading this code later may not realize why without making it explicit.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392398849", "createdAt": "2020-03-13T18:24:59Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -375,10 +375,9 @@ public void onBecomeLeader() {\n     // when an instance becomes a leader, make sure we don't miss new datastreams and\n     // new assignment tasks that was not finished by the previous leader\n     _eventQueue.put(CoordinatorEvent.createHandleDatastreamAddOrDeleteEvent());\n-    _eventQueue.put(CoordinatorEvent.createLeaderDoAssignmentEvent());\n-    // This should be only called after createLeaderDoAssignmentEvent as it will verify/cleanup the orphan task nodes\n-    // under connector.\n-    _eventQueue.put(CoordinatorEvent.createLeaderDoCleanupPostElectionEvent());\n+    // verify/cleanup the orphan task nodes under connector should be called only once after becoming leader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk5MzMyOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNjoyMVrOF2OK5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToxMzoxN1rOF2Pgkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5OTU5MQ==", "bodyText": "can we rename this function now, since there is no longer a \"CLEANUP_TASK_POST_ELECTION\" event?", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392399591", "createdAt": "2020-03-13T18:26:21Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1001,6 +996,9 @@ private void handleLeaderDoAssignment() {\n       instances.add(PAUSED_INSTANCE);\n       _adapter.cleanupDeadInstanceAssignments(instances);\n       _adapter.cleanupOldUnusedTasks(previousAssignmentByInstance, newAssignmentsByInstance);\n+      if (cleanUpOrphanConnectorTasks) {\n+        performCleanupTaskPostElection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyMTUyMw==", "bodyText": "Done.", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392421523", "createdAt": "2020-03-13T19:13:17Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -1001,6 +996,9 @@ private void handleLeaderDoAssignment() {\n       instances.add(PAUSED_INSTANCE);\n       _adapter.cleanupDeadInstanceAssignments(instances);\n       _adapter.cleanupOldUnusedTasks(previousAssignmentByInstance, newAssignmentsByInstance);\n+      if (cleanUpOrphanConnectorTasks) {\n+        performCleanupTaskPostElection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5OTU5MQ=="}, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk5NDg4OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNjo0MlrOF2OLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNjo0MlrOF2OLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5OTgyMA==", "bodyText": "It'll be good to explain what this parameter does", "url": "https://github.com/linkedin/brooklin/pull/691#discussion_r392399820", "createdAt": "2020-03-13T18:26:42Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/Coordinator.java", "diffHunk": "@@ -960,7 +955,7 @@ private void deleteTopic(Datastream datastream) {\n         .collect(Collectors.toList());\n   }\n \n-  private void handleLeaderDoAssignment() {\n+  private void handleLeaderDoAssignment(boolean cleanUpOrphanConnectorTasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21f67c29b745604186693289b4b358e51cfb7a4"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 968, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}