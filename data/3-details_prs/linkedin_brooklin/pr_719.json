{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzM3MjY3", "number": 719, "title": " Ignore lock node during orphan connector node cleanup", "bodyText": "Lock node will not be assigned to any instance and the orphan node cleanup code should ignore deleting this node by considering it as orphan node.", "createdAt": "2020-06-02T17:48:04Z", "url": "https://github.com/linkedin/brooklin/pull/719", "merged": true, "mergeCommit": {"oid": "0c76faf6e5e6eac62f72d37462c7d60df5b1d2db"}, "closed": true, "closedAt": "2020-06-04T01:13:26Z", "author": {"login": "vmaheshw"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABboAf5CAH2gAyNDI2NzM3MjY3OmMzMWNkNGExNWNjOGRkNjliMGE2NTNkYmU0MjAxZGU5MzRlYTZkNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnyyfiAFqTQyNDAyMDU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "author": {"user": {"login": "vmaheshw", "name": "Vaibhav Maheshwari"}}, "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "committedDate": "2019-11-18T20:06:44Z", "message": "Merge pull request #1 from linkedin/master\n\nPull latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b164832772507699fefa026c1864fc39667673da", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/b164832772507699fefa026c1864fc39667673da", "committedDate": "2020-05-22T20:12:24Z", "message": "Merge branch 'master' of github.com:vmaheshw/Brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/2457aa467453eacf7114ff2eaa4d01459009d927", "committedDate": "2020-06-02T17:45:41Z", "message": "Ignore lock node during orphan connector node cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTM3NDA4", "url": "https://github.com/linkedin/brooklin/pull/719#pullrequestreview-423137408", "createdAt": "2020-06-03T00:11:28Z", "commit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDoxMToyOFrOGeH9zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDozMDo0NFrOGeIRQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MDk3NQ==", "bodyText": "Did you mean to make it package private? That's less accessible than protected and would still allow you to access it in ZkAdapter.", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434240975", "createdAt": "2020-06-03T00:11:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node\n+   */\n+  protected static final String DATASTREAM_TASK_LOCK_ROOT_NAME = \"lock\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTAxMA==", "bodyText": "Should we also assert that one znode left is actually lock?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434245010", "createdAt": "2020-06-03T00:27:13Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0NTk1NA==", "bodyText": "This part seems a little extraneous.\nShould this test really assert that lock remains after releaseTask()? All it cares about is that lock survives cleanUpOrphanConnectorTasks(). On the other hand, if we change ZkAdapter in the future to have it delete lock if it's no longer needed, why should this test start failing then?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434245954", "createdAt": "2020-06-03T00:30:44Z", "author": {"login": "ahmedahamid"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);\n+    leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n+    Assert.assertEquals(leftOverTasks.size(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTIzMTU2", "url": "https://github.com/linkedin/brooklin/pull/719#pullrequestreview-423123156", "createdAt": "2020-06-02T23:28:17Z", "commit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoyODoxOFrOGeHPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozMTozOFrOGeHS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTA0NQ==", "bodyText": "nit: Lock node", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434229045", "createdAt": "2020-06-02T23:28:18Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/zk/KeyBuilder.java", "diffHunk": "@@ -60,11 +60,15 @@ private KeyBuilder() {\n    */\n   private static final String DATASTREAM_TASK_CONFIG = CONNECTOR + \"/%s/config\";\n \n+  /**\n+   * lock node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyOTk5MA==", "bodyText": "I'm a bit confused, when we call releaseTask it should delete the lock node. Is that not happening? Or is this because the ZkAdapter used here is not real? Or is this validating the connector/lock is still existing, without looking at what's in it? If the last one, then we may want to verify that we have a node such as connector/lock/<task>?", "url": "https://github.com/linkedin/brooklin/pull/719#discussion_r434229990", "createdAt": "2020-06-02T23:31:38Z", "author": {"login": "somandal"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/zk/TestZkAdapter.java", "diffHunk": "@@ -758,32 +765,37 @@ public void testDeleteTasksWithPrefix() {\n     Mockito.verify(zkClient, Mockito.never()).getChildren(any(), anyBoolean());\n \n     List<String> leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     updateInstanceAssignment(adapter, adapter.getInstanceName(), Collections.emptyList());\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(false);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 2);\n+    Assert.assertEquals(leftOverTasks.size(), 3);\n \n     adapter.cleanUpOrphanConnectorTasks(true);\n \n     leftOverTasks = zkClient.getChildren(KeyBuilder.connector(testCluster, connectorType));\n-    Assert.assertEquals(leftOverTasks.size(), 0);\n+    Assert.assertEquals(leftOverTasks.size(), 1);\n+\n+    // lock root node does not get deleted, once created.\n+    adapter.releaseTask(lockTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2457aa467453eacf7114ff2eaa4d01459009d927"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be975c2dc6f638365a38a46888a5dab6f3683a33", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/be975c2dc6f638365a38a46888a5dab6f3683a33", "committedDate": "2020-06-03T01:11:34Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTg5MjM2", "url": "https://github.com/linkedin/brooklin/pull/719#pullrequestreview-423989236", "createdAt": "2020-06-03T22:47:49Z", "commit": {"oid": "be975c2dc6f638365a38a46888a5dab6f3683a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDIwNTUx", "url": "https://github.com/linkedin/brooklin/pull/719#pullrequestreview-424020551", "createdAt": "2020-06-04T00:19:32Z", "commit": {"oid": "be975c2dc6f638365a38a46888a5dab6f3683a33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 870, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}