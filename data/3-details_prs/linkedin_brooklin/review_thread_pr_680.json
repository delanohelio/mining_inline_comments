{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTMzNzk0", "number": 680, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozMTowOVrODd2k2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MjozN1rODfpEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI5NDY3OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozMTowOVrOFmsehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozNzoxNVrOFohjlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg==", "bodyText": "Shouldn't this be a stream level config?", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r376118916", "createdAt": "2020-02-06T22:31:09Z", "author": {"login": "gauravrkulkarni"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "diffHunk": "@@ -61,15 +62,20 @@\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n+  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n+  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n+  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b7fafa00bec51bb9c4f31d3fd91769902397c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MzUyOQ==", "bodyText": "done - made it a cluster level + stream level metadata. The stream level metadata overrides the cluster config.", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r376143529", "createdAt": "2020-02-06T23:39:58Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "diffHunk": "@@ -61,15 +62,20 @@\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n+  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n+  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n+  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}, "originalCommit": {"oid": "49b7fafa00bec51bb9c4f31d3fd91769902397c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDI1OQ==", "bodyText": "I guess people can forget about cluster level config and create a stream without realizing about the config? I will let you decide about cluster level config though, I am OK either ways.", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r377910259", "createdAt": "2020-02-11T21:29:37Z", "author": {"login": "gauravrkulkarni"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "diffHunk": "@@ -61,15 +62,20 @@\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n+  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n+  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n+  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}, "originalCommit": {"oid": "49b7fafa00bec51bb9c4f31d3fd91769902397c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNzE0Mg==", "bodyText": "I see how a config can be forgotten and then bad things happen. I've removed the cluster level config.", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r378037142", "createdAt": "2020-02-12T04:37:15Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnector.java", "diffHunk": "@@ -61,15 +62,20 @@\n   // This config controls how frequent the connector fetches the partition information from Kafka in order to perform\n   // partition assignment\n   protected static final String PARTITION_FETCH_INTERVAL = \"PartitionFetchIntervalMs\";\n+  // This config, if set to a non-blank value, prepends a prefix to the destination topic name for all topics\n+  // being mirrored by this cluster. E.g. source topic: foo, destination prefix: bar, destination topic: barfoo\n+  protected static final String DESTINATION_TOPIC_PREFIX = \"destinationTopicPrefix\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODkxNg=="}, "originalCommit": {"oid": "49b7fafa00bec51bb9c4f31d3fd91769902397c7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAwMjM4OnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMzoyMFrOFoZ7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozNzozNFrOFohj5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjEyMQ==", "bodyText": "nit: might want to log the prefix anyway in case we need to debug this?", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r377912121", "createdAt": "2020-02-11T21:33:20Z", "author": {"login": "gauravrkulkarni"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -139,12 +142,19 @@ public KafkaMirrorMakerConnectorTask(KafkaBasedConnectorConfig config, Datastrea\n     _isIdentityMirroringEnabled = KafkaMirrorMakerDatastreamMetadata.isIdentityPartitioningEnabled(_datastream);\n     _groupIdConstructor = groupIdConstructor;\n     _enablePartitionAssignment = config.getEnablePartitionAssignment();\n+    _destinationTopicPrefix = task.getDatastreams().get(0).getMetadata()\n+        .getOrDefault(DatastreamMetadataConstants.DESTINATION_TOPIC_PREFIX, destinationTopicPrefix);\n     _dynamicMetricsManager = DynamicMetricsManager.getInstance();\n \n     if (_enablePartitionAssignment) {\n       LOG.info(\"Enable Brooklin partition assignment\");\n     }\n \n+    if (!StringUtils.isBlank(_destinationTopicPrefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a78544e53b1649786be531cabf9bfa737237846"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNzIyMw==", "bodyText": "done", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r378037223", "createdAt": "2020-02-12T04:37:34Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -139,12 +142,19 @@ public KafkaMirrorMakerConnectorTask(KafkaBasedConnectorConfig config, Datastrea\n     _isIdentityMirroringEnabled = KafkaMirrorMakerDatastreamMetadata.isIdentityPartitioningEnabled(_datastream);\n     _groupIdConstructor = groupIdConstructor;\n     _enablePartitionAssignment = config.getEnablePartitionAssignment();\n+    _destinationTopicPrefix = task.getDatastreams().get(0).getMetadata()\n+        .getOrDefault(DatastreamMetadataConstants.DESTINATION_TOPIC_PREFIX, destinationTopicPrefix);\n     _dynamicMetricsManager = DynamicMetricsManager.getInstance();\n \n     if (_enablePartitionAssignment) {\n       LOG.info(\"Enable Brooklin partition assignment\");\n     }\n \n+    if (!StringUtils.isBlank(_destinationTopicPrefix)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjEyMQ=="}, "originalCommit": {"oid": "0a78544e53b1649786be531cabf9bfa737237846"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTA1MzMxOnYy", "diffSide": "RIGHT", "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzo1MjozN1rOFpdqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MTozOFrOFpmG5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTkwNA==", "bodyText": "Suggest to wrap in Optional so that you also don't need to add empty string \"\" to topicManager properties if doesn't exist.", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r379021904", "createdAt": "2020-02-13T17:52:37Z", "author": {"login": "celiakung"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -112,6 +116,7 @@\n   private final boolean _isFlushlessModeEnabled;\n   private final boolean _isIdentityMirroringEnabled;\n   private final boolean _enablePartitionAssignment;\n+  private final String _destinationTopicPrefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c33ca090ba696d18bfdff12050ee26c47a53df3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDI5Mw==", "bodyText": "Intellij seems to warn about using optionals as class members:\nReports any uses of java.util.Optional, java.util.OptionalDouble, java.util.OptionalInt, java.util.OptionalLong or com.google.common.base.Optional as the type for a field or a parameter. Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent \"no result\". Using a field with type java.util.Optional is also problematic if the class needs to be Serializable, which java.util.Optional is not.\nSo I'll leave this part as is for now.", "url": "https://github.com/linkedin/brooklin/pull/680#discussion_r379160293", "createdAt": "2020-02-13T22:41:38Z", "author": {"login": "somandal"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -112,6 +116,7 @@\n   private final boolean _isFlushlessModeEnabled;\n   private final boolean _isIdentityMirroringEnabled;\n   private final boolean _enablePartitionAssignment;\n+  private final String _destinationTopicPrefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyMTkwNA=="}, "originalCommit": {"oid": "2c33ca090ba696d18bfdff12050ee26c47a53df3"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 946, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}