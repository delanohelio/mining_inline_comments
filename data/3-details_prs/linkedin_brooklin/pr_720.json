{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDYwNTQ1", "number": 720, "title": "Fix metric to track task lock acquire failures in partition-managed BMM", "bodyText": "", "createdAt": "2020-06-09T00:10:19Z", "url": "https://github.com/linkedin/brooklin/pull/720", "merged": true, "mergeCommit": {"oid": "54cdb0239f635eaef90ae00f1a233c9b97dc5373"}, "closed": true, "closedAt": "2020-06-11T18:44:29Z", "author": {"login": "somandal"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpZodoAH2gAyNDMxNDYwNTQ1OjJiOTIyYzIwNWI1ZmFhOGMwMjkxNWNiNjFkYTg5ODVjYWM4MTQ3MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqSOZVgFqTQyOTE2NDAyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/2b922c205b5faa8c02915cb61da8985cac814715", "committedDate": "2020-06-09T00:08:48Z", "message": "Fix metric to track task lock acquire failures in partition-managed BMM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjQyNDM0", "url": "https://github.com/linkedin/brooklin/pull/720#pullrequestreview-427642434", "createdAt": "2020-06-10T00:59:26Z", "commit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTozOToyOFrOGhh8bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyNjozNFrOGhiriA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxMjMzMw==", "bodyText": "Please feel free to ignore this comment.\nTo avoid repeating this code, you can introduce a new overload of\nstatic Thread runKafkaMirrorMakerConnectorTask(\n  KafkaMirrorMakerConnectorTask connectorTask, \n  Thread.UncaughtExceptionHandler exceptionHandler)\none that accepts a boolean that indicates whether it should awaitStart() or not. Then you can move all the logic into that new method and have the existing one call it setting that boolean to true.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437812333", "createdAt": "2020-06-10T01:39:28Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));\n+    t.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTAzNA==", "bodyText": "This comment doesn't pertain to this PR in particular.\nOne thing I noticed is that failing assertions in threads other than the main test thread have no effect. So, if you were to do:\nt.setUncaughtExceptionHandler((t1, e) -> Assert.assertTrue(false));\nthe test would still pass.\nSo, don't count on that handler for assertions. You'd need to get a reference to the exception object and assert on it after the thread is joined instead.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437815034", "createdAt": "2020-06-10T01:50:16Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTgzNw==", "bodyText": "Do you need to use PollUtils if you're doing t.join()? I think it's safe to assert without it since the metric is incremented synchronously in the run loop.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437815837", "createdAt": "2020-06-10T01:53:31Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    Thread t = new Thread(connectorTask, \"connector thread\");\n+    t.setDaemon(true);\n+    t.setUncaughtExceptionHandler((t1, e) -> Assert.assertEquals(DatastreamRuntimeException.class, e.getClass()));\n+    t.start();\n+    t.join();\n+\n+    // verify that the metric to indicate task lock acquire errors is incremented\n+    Assert.assertTrue(PollUtils.poll(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNzg3NA==", "bodyText": "I believe this is your intent but I'm just confirming: the use of a BrooklinMeterInfo with a regex + _dynamicMetricsManager.createOrUpdateMeter() means you only want this metric to be created and emitted lazily, i.e.\n\nNo InGraph will appear for it until the first time it's emitted\nIts InGraph won't show any data when it's not being emitted", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437817874", "createdAt": "2020-06-10T02:01:25Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -423,6 +428,8 @@ protected void postShutdownHook() {\n     List<BrooklinMetricInfo> metrics = new ArrayList<>();\n     metrics.addAll(AbstractKafkaBasedConnectorTask.getMetricInfos(\n         generateMetricsPrefix(connectorName, CLASS_NAME) + MetricsAware.KEY_REGEX));\n+    metrics.add(new BrooklinMeterInfo(generateMetricsPrefix(connectorName, CLASS_NAME) + MetricsAware.KEY_REGEX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMzg0OQ==", "bodyText": "Please feel free to ignore this comment (and excuse its length).\nOne thing I personally found unnerving about adding/fixing metrics in the past is that one needs to make sure the metrics created/registered through DynamicMetricsManager match the BrooklinMetricInfo list returned by getMetricInfos().\nFor instance:\n\n\nI had to make sure I returned the correct sub-type of BrooklinMetricInfo from getMetricInfos() (e.g. BrooklinMeterInfo for Meters, BrooklinCounterInfo for Counters ... etc). Otherwise, I'd be creating the wrong InGraph (or maybe it won't work at all, who knows)\n\n\nI had to make sure every metric I created through DynamicMetricsManager matched one \u2014 and only one \u2014 of the BrooklinMetricInfo objects returned by getMetricInfos() by name (or regex). If a metric were to match more than one BrooklinMetricInfo, multiple InGraphs would be created for it. If I were to get the regex wrong, no BrooklinMetricInfo would match my metric and no InGraph would be created for it.\n\n\nTo address these concerns, I wrote MetricsTestUtils which exposes the API below for asserting the above:\n  public static void verifyMetrics(MetricsAware metricsAware, DynamicMetricsManager metricsManager)\nIf you're interested in using this utility, you can do so by adding the following snippet to your test:\n    MetricsTestUtils.verifyMetrics(new MetricsAware() {\n      @Override\n      public List<BrooklinMetricInfo> getMetricInfos() {\n        return KafkaMirrorMakerConnectorTaskTest.getMetricInfos(\"\");\n      }\n    }, DynamicMetricsManager.getInstance());\nI tried it myself and the test is passing but I'm just sharing some past thoughts I had about testing metrics in general.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437823849", "createdAt": "2020-06-10T02:24:34Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyNDM5Mg==", "bodyText": "nit: would it be better to supply a non-empty connector name as a closer representation of affairs in production?", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437824392", "createdAt": "2020-06-10T02:26:34Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +367,44 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjczNDY2", "url": "https://github.com/linkedin/brooklin/pull/720#pullrequestreview-427673466", "createdAt": "2020-06-10T02:44:10Z", "commit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjo0NDoxMFrOGhi9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjo0NDoxMFrOGhi9dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyODk4MQ==", "bodyText": "Please, disregard my earlier comment about this field.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r437828981", "createdAt": "2020-06-10T02:44:10Z", "author": {"login": "ahmedahamid"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -103,9 +104,11 @@\n   public static final String DOMAIN_TOPIC_MANAGER = \"topicManager\";\n   public static final String TOPIC_MANAGER_METRICS_PREFIX = \"TopicManager\";\n \n+  protected final DynamicMetricsManager _dynamicMetricsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b922c205b5faa8c02915cb61da8985cac814715"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "author": {"user": {"login": "somandal", "name": "Sonam Mandal"}}, "url": "https://github.com/linkedin/brooklin/commit/1c28bf36d0bc62b811675f2dcb173d8fe51526d6", "committedDate": "2020-06-10T04:50:45Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzEwNzE3", "url": "https://github.com/linkedin/brooklin/pull/720#pullrequestreview-427710717", "createdAt": "2020-06-10T04:57:48Z", "commit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTIzNDA0", "url": "https://github.com/linkedin/brooklin/pull/720#pullrequestreview-429123404", "createdAt": "2020-06-11T17:19:46Z", "commit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxOTo0NlrOGinIfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozMjowNlrOGinjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTkxOQ==", "bodyText": "Do you need the new variables to be protected? I dont see their usage outside this class.", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438945919", "createdAt": "2020-06-11T17:19:46Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -103,9 +104,11 @@\n   public static final String DOMAIN_TOPIC_MANAGER = \"topicManager\";\n   public static final String TOPIC_MANAGER_METRICS_PREFIX = \"TopicManager\";\n \n+  protected final DynamicMetricsManager _dynamicMetricsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0ODYyMw==", "bodyText": "Do we really need this metrics under connector level?", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438948623", "createdAt": "2020-06-11T17:24:35Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka-connector/src/main/java/com/linkedin/datastream/connectors/kafka/mirrormaker/KafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -321,7 +325,8 @@ public void run() {\n         _datastreamTask.acquire(LOCK_ACQUIRE_TIMEOUT);\n       } catch (DatastreamRuntimeException ex) {\n         LOG.error(String.format(\"Failed to acquire lock for datastreamTask %s\", _datastreamTask), ex);\n-        _dynamicMetricsManager.createOrUpdateMeter(CLASS_NAME, NUM_LOCK_FAILS, 1);\n+        _dynamicMetricsManager.createOrUpdateMeter(generateMetricsPrefix(_connectorName, CLASS_NAME), _datastreamName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1Mjg3MA==", "bodyText": "nit: Feel free to ignore it. Can you please simplify this?", "url": "https://github.com/linkedin/brooklin/pull/720#discussion_r438952870", "createdAt": "2020-06-11T17:32:06Z", "author": {"login": "vmaheshw"}, "path": "datastream-kafka-connector/src/test/java/com/linkedin/datastream/connectors/kafka/mirrormaker/TestKafkaMirrorMakerConnectorTask.java", "diffHunk": "@@ -366,6 +371,55 @@ boolean isPostShutdownHookExceptionCaught() {\n     }\n   }\n \n+  @Test\n+  public void testPartitionManagedLockAcquireFailMetric() throws InterruptedException {\n+    String datastreamName = \"pizzaStream\";\n+    Datastream datastream = KafkaMirrorMakerConnectorTestUtils.createDatastream(datastreamName, _broker, \"\\\\w+Pizza\");\n+    DatastreamTaskImpl task = spy(new DatastreamTaskImpl(Collections.singletonList(datastream)));\n+    doThrow(DatastreamRuntimeException.class).when(task).acquire(any(Duration.class));\n+    MockDatastreamEventProducer datastreamProducer = new MockDatastreamEventProducer();\n+    task.setEventProducer(datastreamProducer);\n+\n+    KafkaBasedConnectorConfig connectorConfig = new KafkaBasedConnectorConfigBuilder()\n+        .setConsumerFactory(new LiKafkaConsumerFactory())\n+        .setCommitIntervalMillis(10000)\n+        .setEnablePartitionManaged(true)\n+        .build();\n+\n+    ZkAdapter zkAdapter = new ZkAdapter(_kafkaCluster.getZkConnection(), \"testCluster\", null,\n+        ZkClient.DEFAULT_SESSION_TIMEOUT, ZkClient.DEFAULT_CONNECTION_TIMEOUT, null);\n+    task.setZkAdapter(zkAdapter);\n+    zkAdapter.connect();\n+\n+    String connectorName = \"KafkaMirrorMaker\";\n+    KafkaMirrorMakerConnectorTaskTest connectorTask = new KafkaMirrorMakerConnectorTaskTest(connectorConfig, task, connectorName,\n+        false, new KafkaMirrorMakerGroupIdConstructor(false, \"testCluster\"));\n+    // We don't want to wait for the task to start, since it will throw before the start countdown latch can be downed.\n+    AtomicReference<Throwable> throwable = new AtomicReference<>();\n+    Thread connectorThread =\n+        KafkaMirrorMakerConnectorTestUtils.runKafkaMirrorMakerConnectorTask(connectorTask, (t1, e) -> throwable.set(e),\n+            false);\n+    connectorThread.join();\n+\n+    Assert.assertEquals(DatastreamRuntimeException.class, throwable.get().getClass());\n+\n+    // verify that the metric to indicate task lock acquire errors is incremented\n+    Meter metric = DynamicMetricsManager.getInstance()\n+        .getMetric(connectorName + \".\" + KafkaMirrorMakerConnectorTask.class.getSimpleName() + \".\" + datastreamName\n+            + \".\" + \"taskLockAcquireErrorRate\");\n+    Assert.assertNotNull(metric);\n+    Assert.assertEquals(metric.getCount(), 1);\n+\n+    // Verify that metrics created through DynamicMetricsManager match those returned by getMetricInfos() given the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTY0MDI4", "url": "https://github.com/linkedin/brooklin/pull/720#pullrequestreview-429164028", "createdAt": "2020-06-11T18:04:55Z", "commit": {"oid": "1c28bf36d0bc62b811675f2dcb173d8fe51526d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 873, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}