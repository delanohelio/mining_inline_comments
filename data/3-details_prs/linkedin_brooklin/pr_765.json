{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzMzMTEx", "number": 765, "title": "Add ref count in metrics registeration/deregistration.", "bodyText": "DynamicMetricManager currently returns the existing metrics if exists or new metrics when trying to register metrics based on the full key name. So, if the same metrics is registered by 2 class/threads, DynamicMetricsManager is not aware of the ref count. So, when anyone of the class/thread de-register the shared metrics, the metrics is de-registered and no longer emitted.\nCurrently BrooklinMetrics has a ref-count check for aggregate metrics to make sure the de-registration happens when all the registration references have de-registered. This is how aggregate metrics was working. The assumption may be that we will not see this conflict in any other case.\nFor KafkaMirrorMakerConnectorTask, the metrics are registered using datastream name and not the task name, so there is a possibility of the conflict. So, in the PR, I'm adding the ref count logic in DynamicMetricsManager itself. I'm also cleaning up BrooklinMetrics which has the logic for aggregate metrics, as we don't need to special case it. I'm keeping the existing interfaces for backward compatibility and can be cleaned up in future if required.", "createdAt": "2020-10-13T19:24:32Z", "url": "https://github.com/linkedin/brooklin/pull/765", "merged": true, "mergeCommit": {"oid": "d552f4ba991059ba667fc9fbfe927f2dd5f85263"}, "closed": true, "closedAt": "2020-10-14T21:23:55Z", "author": {"login": "vmaheshw"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABboAf5CAH2gAyNTAyNzMzMTExOmMzMWNkNGExNWNjOGRkNjliMGE2NTNkYmU0MjAxZGU5MzRlYTZkNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSj-aLgFqTUwODc1MDM3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "author": {"user": {"login": "vmaheshw", "name": "Vaibhav Maheshwari"}}, "url": "https://github.com/linkedin/brooklin/commit/c31cd4a15cc8dd69b0a653dbe4201de934ea6d65", "committedDate": "2019-11-18T20:06:44Z", "message": "Merge pull request #1 from linkedin/master\n\nPull latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28d2d11372814b122c6e62c2a3309f275b1f7f84", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/28d2d11372814b122c6e62c2a3309f275b1f7f84", "committedDate": "2020-09-21T19:21:30Z", "message": "Merge branch 'master' of github.com:linkedin/brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0653c15d870615a5d6619f0dc745c66abd8bd43e", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/0653c15d870615a5d6619f0dc745c66abd8bd43e", "committedDate": "2020-09-30T06:26:06Z", "message": "Merge branch 'master' of github.com:linkedin/brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc935e720fea2d9d50233afe9c6392fe03bb856", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/2cc935e720fea2d9d50233afe9c6392fe03bb856", "committedDate": "2020-10-06T02:48:03Z", "message": "Merge branch 'master' of github.com:linkedin/brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd92a90974ad2bf46cbe31a92cb4d5545d48d4f", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/7dd92a90974ad2bf46cbe31a92cb4d5545d48d4f", "committedDate": "2020-10-12T22:00:28Z", "message": "Merge branch 'master' of github.com:linkedin/brooklin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "768be8b1bc4d9467e9d6ce49079702ea49b1d883", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/768be8b1bc4d9467e9d6ce49079702ea49b1d883", "committedDate": "2020-10-13T19:17:53Z", "message": "Add Ref-count while registering/deregistering the metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e854c8de0f09b41b655fbb12b799eed06f7fee", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/22e854c8de0f09b41b655fbb12b799eed06f7fee", "committedDate": "2020-10-13T19:27:14Z", "message": "Fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODM1NDI1", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-507835425", "createdAt": "2020-10-13T21:17:13Z", "commit": {"oid": "22e854c8de0f09b41b655fbb12b799eed06f7fee"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMToxNzoxM1rOHg50Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTozMzo1OVrOHg6TVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI2Mzc2Mg==", "bodyText": "nit: zero or not the key is not present, -> zero or if the key is not present,", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504263762", "createdAt": "2020-10-13T21:17:13Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -44,11 +44,16 @@\n   // This is created solely for the createOrUpdate APIs, not by registerMetric because the former can be called\n   // repeatedly to update the metric whereas the latter is typically only called once per metric during initialization.\n   private final ConcurrentHashMap<String, ConcurrentHashMap<String, ConcurrentHashMap<String, Metric>>> _indexedMetrics;\n+\n+  // Map to maintain the ref count for the registered metric. When the ref count becomes zero or not the key is not present,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e854c8de0f09b41b655fbb12b799eed06f7fee"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3MTcwMw==", "bodyText": "nit:  reword: Underlying DynamicMetricsManager will take care of maintaining ref-counts.", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504271703", "createdAt": "2020-10-13T21:33:59Z", "author": {"login": "somandal"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java", "diffHunk": "@@ -5,19 +5,11 @@\n  */\n package com.linkedin.datastream.metrics;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-\n /**\n  * Base class for metric categories with support for metric deregistration.\n- * It uses reference counting for deregistering aggregate metrics which can\n- * only happen when all keyed metrics of the same name have been deregistered.\n+ * Underlying DynamicMetricsManager will take care of ref-count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22e854c8de0f09b41b655fbb12b799eed06f7fee"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "author": {"user": null}, "url": "https://github.com/linkedin/brooklin/commit/5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9", "committedDate": "2020-10-13T23:40:22Z", "message": "Add test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTAzNzY5", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-507903769", "createdAt": "2020-10-13T23:48:20Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzI4MjA1", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-508728205", "createdAt": "2020-10-14T21:06:16Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTowNjoxNlrOHhlDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTowNjoxNlrOHhlDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3MjA1OA==", "bodyText": "Nitpick: Can we move this to line 167?", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504972058", "createdAt": "2020-10-14T21:06:16Z", "author": {"login": "vishwajith-s"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -161,7 +166,7 @@ private void updateCache(String simpleClassName, String key, String metricName,\n     String fullMetricName = MetricRegistry.name(simpleName, key, metricName);\n \n     Metric metric = getMetric(fullMetricName, metricClass);\n-\n+    _registeredMetricRefCount.compute(fullMetricName, (localKey, val) -> (val == null) ? 1 : val + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzMxMjEy", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-508731212", "createdAt": "2020-10-14T21:11:07Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToxMTowN1rOHhlMUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToxMTowN1rOHhlMUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3NDQxNg==", "bodyText": "Nitpick: Why do we need computeIfPresent here? Shouldn't we be using compute instead, unless someone is calling unregister without registering a metric?", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504974416", "createdAt": "2020-10-14T21:11:07Z", "author": {"login": "vishwajith-s"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/DynamicMetricsManager.java", "diffHunk": "@@ -241,11 +246,13 @@ private void updateCache(String simpleClassName, String key, String metricName,\n   public void unregisterMetric(String simpleName, String key, String metricName) {\n     validateArguments(simpleName, metricName);\n     String fullMetricName = MetricRegistry.name(simpleName, key, metricName);\n-\n+    _registeredMetricRefCount.computeIfPresent(fullMetricName, (localKey, val) -> (val == 1) ? null : val - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzQ0MDM5", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-508744039", "createdAt": "2020-10-14T21:19:26Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToxOToyNlrOHhlbYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToxOToyNlrOHhlbYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3ODI3Mg==", "bodyText": "We have an empty class just to deregister aggregate metrics now. Is it possible to explicitly call  deregister Aggregates in a backward compatible way?", "url": "https://github.com/linkedin/brooklin/pull/765#discussion_r504978272", "createdAt": "2020-10-14T21:19:26Z", "author": {"login": "vishwajith-s"}, "path": "datastream-common/src/main/java/com/linkedin/datastream/metrics/BrooklinMetrics.java", "diffHunk": "@@ -5,19 +5,11 @@\n  */\n package com.linkedin.datastream.metrics;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-\n /**\n  * Base class for metric categories with support for metric deregistration.\n- * It uses reference counting for deregistering aggregate metrics which can\n- * only happen when all keyed metrics of the same name have been deregistered.\n+ * Underlying DynamicMetricsManager will take care of maintaining ref-counts.\n  */\n public abstract class BrooklinMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzQ0OTc5", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-508744979", "createdAt": "2020-10-14T21:19:55Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzUwMzc2", "url": "https://github.com/linkedin/brooklin/pull/765#pullrequestreview-508750376", "createdAt": "2020-10-14T21:22:43Z", "commit": {"oid": "5e7d5868434a89ba3802d5c4d95c6a4f241ef2b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 303, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}