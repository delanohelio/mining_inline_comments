{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTQzNTMw", "number": 774, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNzoxOVrOE08_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMTo0MlrOE1dBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTYwNjAxOnYy", "diffSide": "RIGHT", "path": "datastream-server-api/src/main/java/com/linkedin/datastream/server/api/strategy/AssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNzoxOVrOHs9tAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTozNzoxOVrOHs9tAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMDMzNw==", "bodyText": "Maybe \"need to be validated\"?", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r516910337", "createdAt": "2020-11-03T19:37:19Z", "author": {"login": "jzakaryan"}, "path": "datastream-server-api/src/main/java/com/linkedin/datastream/server/api/strategy/AssignmentStrategy.java", "diffHunk": "@@ -89,4 +90,16 @@\n       Map<String, Set<String>> targetAssignment, DatastreamGroupPartitionsMetadata partitionsMetadata) {\n     throw new NotImplementedException(\"movePartitions are not implemented\");\n   }\n+\n+  /**\n+   * Validate the current assignment and return the list of DatastreamTask per instance to be cleaned up.\n+   *\n+   * @param datastreams all the datastreams for which the associated tasks to be validated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTYyOTA0OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0Mzo1MlrOHs961g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo0MToyMFrOHua4ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzg3OA==", "bodyText": "Do you think we should turn on this feature by default without testing it in production?", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r516913878", "createdAt": "2020-11-03T19:43:52Z", "author": {"login": "jzakaryan"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "diffHunk": "@@ -59,6 +61,7 @@ public CoordinatorConfig(Properties config) {\n     _defaultTransportProviderName = _properties.getString(CONFIG_DEFAULT_TRANSPORT_PROVIDER, \"\");\n     _zkCleanUpOrphanConnectorTask = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK, false);\n     _zkCleanUpOrphanConnectorTaskLock = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK_LOCK, false);\n+    _performPreAssignmentCleanup = _properties.getBoolean(CONFIG_PERFORM_PRE_ASSIGNMENT_CLEANUP, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNDM1MQ==", "bodyText": "+1 we should definitely test this first", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517714351", "createdAt": "2020-11-05T00:40:27Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "diffHunk": "@@ -59,6 +61,7 @@ public CoordinatorConfig(Properties config) {\n     _defaultTransportProviderName = _properties.getString(CONFIG_DEFAULT_TRANSPORT_PROVIDER, \"\");\n     _zkCleanUpOrphanConnectorTask = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK, false);\n     _zkCleanUpOrphanConnectorTaskLock = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK_LOCK, false);\n+    _performPreAssignmentCleanup = _properties.getBoolean(CONFIG_PERFORM_PRE_ASSIGNMENT_CLEANUP, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzg3OA=="}, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMDg3NA==", "bodyText": "From testing, you mean we should just identify and print them?", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r518430874", "createdAt": "2020-11-05T23:23:50Z", "author": {"login": "vmaheshw"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "diffHunk": "@@ -59,6 +61,7 @@ public CoordinatorConfig(Properties config) {\n     _defaultTransportProviderName = _properties.getString(CONFIG_DEFAULT_TRANSPORT_PROVIDER, \"\");\n     _zkCleanUpOrphanConnectorTask = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK, false);\n     _zkCleanUpOrphanConnectorTaskLock = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK_LOCK, false);\n+    _performPreAssignmentCleanup = _properties.getBoolean(CONFIG_PERFORM_PRE_ASSIGNMENT_CLEANUP, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzg3OA=="}, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNzAwMg==", "bodyText": "No, at least I meant, let's disable this by default, enable it through config when testing in cert, and once it looks good, add the config to enable it everywhere.", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r518437002", "createdAt": "2020-11-05T23:41:20Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/CoordinatorConfig.java", "diffHunk": "@@ -59,6 +61,7 @@ public CoordinatorConfig(Properties config) {\n     _defaultTransportProviderName = _properties.getString(CONFIG_DEFAULT_TRANSPORT_PROVIDER, \"\");\n     _zkCleanUpOrphanConnectorTask = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK, false);\n     _zkCleanUpOrphanConnectorTaskLock = _properties.getBoolean(CONFIG_ZK_CLEANUP_ORPHAN_CONNECTOR_TASK_LOCK, false);\n+    _performPreAssignmentCleanup = _properties.getBoolean(CONFIG_PERFORM_PRE_ASSIGNMENT_CLEANUP, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMzg3OA=="}, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTY0MDIzOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NzowOVrOHs-Blg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NzowOVrOHs-Blg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNTYwNg==", "bodyText": "Nit: list of tasks\nAlso could be reworded to:\nIf a task is both in the dependency list as well as the current assignment list, it's possible that the previous leader went down before getting a chance to clean it up and update the zookeeper. This method identifies such tasks.", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r516915606", "createdAt": "2020-11-03T19:47:09Z", "author": {"login": "jzakaryan"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "diffHunk": "@@ -268,6 +271,46 @@ public StickyPartitionAssignmentStrategy(Optional<Integer> maxTasks, Optional<In\n     return newAssignment;\n   }\n \n+  /**\n+   * This method checks the current assignment and returns the list of the task which are in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgyMzgwOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo0Njo1MlrOHtu41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo0Njo1MlrOHtu41A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNjE4MA==", "bodyText": "nit: Reword: list of datastream tasks mapped by instance that need to be cleaned up.", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517716180", "createdAt": "2020-11-05T00:46:52Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "diffHunk": "@@ -268,6 +271,46 @@ public StickyPartitionAssignmentStrategy(Optional<Integer> maxTasks, Optional<In\n     return newAssignment;\n   }\n \n+  /**\n+   * This method checks the current assignment and returns the list of the task which are in the\n+   * dependency list as well as in current assignment. The logic is the task in the dependency list\n+   * cannot be present in the current assignment list. It is possible if the previous leader was\n+   * not able to complete the update on the zookeeper and the new leader gets the intermediate state\n+   * from the zookeeper.\n+   *\n+   * @param datastreamGroups datastream groups to associate the tasks with\n+   * @param currentAssignment existing assignment\n+   * @return List of datastreamTask per instance that needs to be cleaned up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgzNDEwOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MTo1NlrOHtu-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1MTo1NlrOHtu-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNzcyMA==", "bodyText": "nit: rename tasksPerInstance to dependencyTasksPerInstance (since this is doing the actual filtering logic, and the final list consists of dependency tasks left behind in the assignment)", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517717720", "createdAt": "2020-11-05T00:51:56Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "diffHunk": "@@ -268,6 +271,46 @@ public StickyPartitionAssignmentStrategy(Optional<Integer> maxTasks, Optional<In\n     return newAssignment;\n   }\n \n+  /**\n+   * This method checks the current assignment and returns the list of the task which are in the\n+   * dependency list as well as in current assignment. The logic is the task in the dependency list\n+   * cannot be present in the current assignment list. It is possible if the previous leader was\n+   * not able to complete the update on the zookeeper and the new leader gets the intermediate state\n+   * from the zookeeper.\n+   *\n+   * @param datastreamGroups datastream groups to associate the tasks with\n+   * @param currentAssignment existing assignment\n+   * @return List of datastreamTask per instance that needs to be cleaned up.\n+   */\n+  public Map<String, List<DatastreamTask>> getTasksToCleanUp(List<DatastreamGroup> datastreamGroups,\n+      Map<String, Set<DatastreamTask>> currentAssignment) {\n+\n+    Set<String> datastreamGroupsSet = datastreamGroups.stream().map(DatastreamGroup::getTaskPrefix).collect(Collectors.toSet());\n+    Map<String, List<DatastreamTask>> tasksToCleanUp = new HashMap<>();\n+    // map of task name to DatastreamTask for future reference\n+    Map<String, DatastreamTask> assignmentsMap = currentAssignment.values()\n+        .stream()\n+        .flatMap(Collection::stream)\n+        .collect(Collectors.toMap(DatastreamTask::getDatastreamTaskName, Function.identity()));\n+\n+    for (String instance : currentAssignment.keySet()) {\n+      // find the dependency task which exists in the assignmentsMap as well.\n+      List<DatastreamTask> tasksPerInstance = currentAssignment.get(instance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgzNTQ5OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1Mjo0MlrOHtu_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1Mjo0MlrOHtu_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxNzkzNw==", "bodyText": "nit: Reword: find the dependency tasks which also exist in the current assignment list.", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517717937", "createdAt": "2020-11-05T00:52:42Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "diffHunk": "@@ -268,6 +271,46 @@ public StickyPartitionAssignmentStrategy(Optional<Integer> maxTasks, Optional<In\n     return newAssignment;\n   }\n \n+  /**\n+   * This method checks the current assignment and returns the list of the task which are in the\n+   * dependency list as well as in current assignment. The logic is the task in the dependency list\n+   * cannot be present in the current assignment list. It is possible if the previous leader was\n+   * not able to complete the update on the zookeeper and the new leader gets the intermediate state\n+   * from the zookeeper.\n+   *\n+   * @param datastreamGroups datastream groups to associate the tasks with\n+   * @param currentAssignment existing assignment\n+   * @return List of datastreamTask per instance that needs to be cleaned up.\n+   */\n+  public Map<String, List<DatastreamTask>> getTasksToCleanUp(List<DatastreamGroup> datastreamGroups,\n+      Map<String, Set<DatastreamTask>> currentAssignment) {\n+\n+    Set<String> datastreamGroupsSet = datastreamGroups.stream().map(DatastreamGroup::getTaskPrefix).collect(Collectors.toSet());\n+    Map<String, List<DatastreamTask>> tasksToCleanUp = new HashMap<>();\n+    // map of task name to DatastreamTask for future reference\n+    Map<String, DatastreamTask> assignmentsMap = currentAssignment.values()\n+        .stream()\n+        .flatMap(Collection::stream)\n+        .collect(Collectors.toMap(DatastreamTask::getDatastreamTaskName, Function.identity()));\n+\n+    for (String instance : currentAssignment.keySet()) {\n+      // find the dependency task which exists in the assignmentsMap as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg0NzcyOnYy", "diffSide": "RIGHT", "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1ODozM1rOHtvG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1ODozM1rOHtvG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTc2Nw==", "bodyText": "Can we add a log to print the tasksToCleanUp and also the count? To keep the log readable, let's print only task names?\nFor debugging purposes it may be helpful to print the task names on which these tasks exist as dependencies. I'll leave it to you to assess if this can be useful though.", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517719767", "createdAt": "2020-11-05T00:58:33Z", "author": {"login": "somandal"}, "path": "datastream-server/src/main/java/com/linkedin/datastream/server/assignment/StickyPartitionAssignmentStrategy.java", "diffHunk": "@@ -268,6 +271,46 @@ public StickyPartitionAssignmentStrategy(Optional<Integer> maxTasks, Optional<In\n     return newAssignment;\n   }\n \n+  /**\n+   * This method checks the current assignment and returns the list of the task which are in the\n+   * dependency list as well as in current assignment. The logic is the task in the dependency list\n+   * cannot be present in the current assignment list. It is possible if the previous leader was\n+   * not able to complete the update on the zookeeper and the new leader gets the intermediate state\n+   * from the zookeeper.\n+   *\n+   * @param datastreamGroups datastream groups to associate the tasks with\n+   * @param currentAssignment existing assignment\n+   * @return List of datastreamTask per instance that needs to be cleaned up.\n+   */\n+  public Map<String, List<DatastreamTask>> getTasksToCleanUp(List<DatastreamGroup> datastreamGroups,\n+      Map<String, Set<DatastreamTask>> currentAssignment) {\n+\n+    Set<String> datastreamGroupsSet = datastreamGroups.stream().map(DatastreamGroup::getTaskPrefix).collect(Collectors.toSet());\n+    Map<String, List<DatastreamTask>> tasksToCleanUp = new HashMap<>();\n+    // map of task name to DatastreamTask for future reference\n+    Map<String, DatastreamTask> assignmentsMap = currentAssignment.values()\n+        .stream()\n+        .flatMap(Collection::stream)\n+        .collect(Collectors.toMap(DatastreamTask::getDatastreamTaskName, Function.identity()));\n+\n+    for (String instance : currentAssignment.keySet()) {\n+      // find the dependency task which exists in the assignmentsMap as well.\n+      List<DatastreamTask> tasksPerInstance = currentAssignment.get(instance)\n+          .stream()\n+          .filter(t -> datastreamGroupsSet.contains(t.getTaskPrefix()))\n+          .map(task -> ((DatastreamTaskImpl) task).getDependencies())\n+          .flatMap(Collection::stream)\n+          .map(assignmentsMap::get)\n+          .filter(Objects::nonNull)\n+          .collect(Collectors.toList());\n+\n+      if (!tasksPerInstance.isEmpty()) {\n+        tasksToCleanUp.put(instance, tasksPerInstance);\n+      }\n+    }\n+    return tasksToCleanUp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg1NDA0OnYy", "diffSide": "RIGHT", "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyPartitionAssignment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMTo0MlrOHtvKhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMTo0MlrOHtvKhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMDcwOA==", "bodyText": "Should we also validate that the tasksToCleanup only contains the tasks we expect it to by matching task names?", "url": "https://github.com/linkedin/brooklin/pull/774#discussion_r517720708", "createdAt": "2020-11-05T01:01:42Z", "author": {"login": "somandal"}, "path": "datastream-server/src/test/java/com/linkedin/datastream/server/assignment/TestStickyPartitionAssignment.java", "diffHunk": "@@ -87,11 +86,24 @@ public void testAddPartitions() {\n     DatastreamGroupPartitionsMetadata newPartitionsMetadata =\n         new DatastreamGroupPartitionsMetadata(datastreams.get(0), newPartitions);\n \n-    assignment = strategy.assignPartitions(assignment, newPartitionsMetadata);\n+    Map<String, Set<DatastreamTask>> newAssignment = strategy.assignPartitions(assignment, newPartitionsMetadata);\n \n-    for (DatastreamTask task : assignment.get(\"instance1\")) {\n+    for (DatastreamTask task : newAssignment.get(\"instance0\")) {\n       Assert.assertEquals(task.getPartitionsV2().size(), 2);\n     }\n+\n+    Map<String, List<DatastreamTask>> taskToCleanup = strategy.getTasksToCleanUp(datastreams, newAssignment);\n+    Assert.assertEquals(taskToCleanup.size(), 0);\n+\n+    // Adding the dependency task as well in the assignment list to simulate the scenario where\n+    // the dependency task nodes are not deleted and the leader gets interrupted, OOM or hit session expiry.\n+    // The next leader should be able to identify and cleanup.\n+    Map<String, Set<DatastreamTask>> finalAssignment = assignment;\n+    newAssignment.forEach((instance, taskSet1) -> taskSet1.addAll(finalAssignment.get(instance)));\n+\n+    taskToCleanup = strategy.getTasksToCleanUp(datastreams, newAssignment);\n+    Assert.assertEquals(taskToCleanup.size(), 1);\n+    taskToCleanup.forEach((instance, taskList1) -> Assert.assertEquals(taskList1.size(), 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f33e4e600ce5ef837f603269fba4118e581b6b7"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 912, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}