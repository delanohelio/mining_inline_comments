{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDg0MTQ1", "number": 1039, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NjozMlrOFDKGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozOToyOFrOFF1ynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU1NDUzOnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1NjozMlrOICrVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzowMzo0MVrOICtgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODA0MQ==", "bodyText": "Should we just update the text of the exception with this new message? Then it could bubble up and be rendered only once.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539678041", "createdAt": "2020-12-09T21:56:32Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -375,6 +375,7 @@ void awaitSubscriptionCompleted() {\n                     ));\n                 }\n             } catch (InterruptedException interruptedException) {\n+                LOG.warn(\"Thread interrupted awaiting subscription completion.\", interruptedException);\n                 dispatchError(new ApiException(\n                     \"Failure awaiting acknowledgement of subscription completion.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcxMzY0OA==", "bodyText": "Updated!", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539713648", "createdAt": "2020-12-09T23:03:41Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -375,6 +375,7 @@ void awaitSubscriptionCompleted() {\n                     ));\n                 }\n             } catch (InterruptedException interruptedException) {\n+                LOG.warn(\"Thread interrupted awaiting subscription completion.\", interruptedException);\n                 dispatchError(new ApiException(\n                     \"Failure awaiting acknowledgement of subscription completion.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3ODA0MQ=="}, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU2MjE1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1ODoyM1rOICrZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1MjozM1rOICtL-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3OTE3Nw==", "bodyText": "Should we pull this out of the switch, and just have it always show what's happening? Also, should it be info? Or debug, verbose? (I guess, the way you have it currently, it is more tenable to keep as info, certainly.)\nSame general questions for the various state change logging that has been added. Incidentally: I don't have a strong opinion here.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539679177", "createdAt": "2020-12-09T21:58:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -185,50 +183,56 @@ private Completable performSynchronized(Completable completable) {\n                     \"Retry your request.\"));\n         }\n         LOG.info(\"Orchestrator lock acquired.\");\n-        return completable.doFinally(() -> {\n-            startStopSemaphore.release();\n-            LOG.info(\"Orchestrator lock released.\");\n-        });\n+        return Completable.fromAction(action)\n+            .doFinally(() -> {\n+                startStopSemaphore.release();\n+                LOG.info(\"Orchestrator lock released.\");\n+            }\n+        );\n     }\n \n-    private DataStoreException unknownStateError(State state) {\n-        return new DataStoreException(\n+    private void unknownState(State state) throws DataStoreException {\n+        throw new DataStoreException(\n                 \"Orchestrator state machine made reference to unknown state = \" + state.name(),\n                 AmplifyException.REPORT_BUG_TO_AWS_SUGGESTION\n         );\n     }\n \n-    private Completable transitionToStopped() {\n-        LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentState.get().name());\n-        disposables.clear();\n+    private void transitionToStopped() throws DataStoreException {\n         switch (currentState.get()) {\n             case SYNC_VIA_API:\n-                return stopApiSync().doFinally(this::stopObservingStorageChanges);\n+                LOG.info(\"Orchestrator transitioning from SYNC_VIA_API to STOPPED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwODQwOA==", "bodyText": "I had the logs outside the switch initially, but was seeing a ton of \"Orchestrator transitioning from SYNC_VIA_API to SYNC_VIA_API\" logs.  I moved them into the switch, so it would only log the 6 transitions that actually matter :)\nI've been thinking about log levels and feel like the following makes sense:\n\nVerbose should be used when logging something for every instance of a model\nDebug should be used when logging something for every model type\nInfo should be used for general state changes in the orchestrator or any of the processors, that only result in ~1 instance of the log message", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539708408", "createdAt": "2020-12-09T22:52:33Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -185,50 +183,56 @@ private Completable performSynchronized(Completable completable) {\n                     \"Retry your request.\"));\n         }\n         LOG.info(\"Orchestrator lock acquired.\");\n-        return completable.doFinally(() -> {\n-            startStopSemaphore.release();\n-            LOG.info(\"Orchestrator lock released.\");\n-        });\n+        return Completable.fromAction(action)\n+            .doFinally(() -> {\n+                startStopSemaphore.release();\n+                LOG.info(\"Orchestrator lock released.\");\n+            }\n+        );\n     }\n \n-    private DataStoreException unknownStateError(State state) {\n-        return new DataStoreException(\n+    private void unknownState(State state) throws DataStoreException {\n+        throw new DataStoreException(\n                 \"Orchestrator state machine made reference to unknown state = \" + state.name(),\n                 AmplifyException.REPORT_BUG_TO_AWS_SUGGESTION\n         );\n     }\n \n-    private Completable transitionToStopped() {\n-        LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentState.get().name());\n-        disposables.clear();\n+    private void transitionToStopped() throws DataStoreException {\n         switch (currentState.get()) {\n             case SYNC_VIA_API:\n-                return stopApiSync().doFinally(this::stopObservingStorageChanges);\n+                LOG.info(\"Orchestrator transitioning from SYNC_VIA_API to STOPPED\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3OTE3Nw=="}, "originalCommit": null, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODU3MTIxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjowMDo1MVrOICrfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo1NDozM1rOICtPWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MDUxMw==", "bodyText": "\ud83d\ude3a", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539680513", "createdAt": "2020-12-09T22:00:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -288,91 +294,77 @@ private void stopObservingStorageChanges() {\n     private void startApiSync() {\n         LOG.info(\"Setting currentState to SYNC_VIA_API\");\n         currentState.set(State.SYNC_VIA_API);\n-        disposables.add(startApiSyncCompletable()\n-            .doOnComplete(() -> {\n-                LOG.info(\"Started the orchestrator in API sync mode.\");\n-                publishReadyEvent();\n+        disposables.add(\n+            Completable.create(emitter -> {\n+                LOG.info(\"Starting API synchronization mode.\");\n+\n+                // Resolve any client provided DataStoreSyncExpressions, before starting sync and subscriptions, once\n+                // each time DataStore starts.  The QueryPredicateProvider caches the resolved QueryPredicates, which\n+                // are then used to filter data received from AppSync.\n+                queryPredicateProvider.resolvePredicates();\n+\n+                subscriptionProcessor.startSubscriptions(this::transitionToLocalOnlyBlocking);\n+\n+                LOG.debug(\"About to hydrate...\");\n+                try {\n+                    boolean subscribed = syncProcessor.hydrate()\n+                            .blockingAwait(adjustedTimeoutSeconds, TimeUnit.SECONDS);\n+                    if (!subscribed) {\n+                        throw new TimeoutException(\"Timed out while performing initial model sync.\");\n+                    }\n+                } catch (Throwable failure) {\n+                    if (!emitter.isDisposed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwOTI3Mw==", "bodyText": "This was already there, I just moved it a bit :). I believe the root cause though is that we didn't have a similar check for the ReplaySubject buffer before.  We did check hasThrowable, but I don't think that's quite the same.  So, the solution I've implemented is to just simplify and get rid of the buffer entirely.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539709273", "createdAt": "2020-12-09T22:54:33Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -288,91 +294,77 @@ private void stopObservingStorageChanges() {\n     private void startApiSync() {\n         LOG.info(\"Setting currentState to SYNC_VIA_API\");\n         currentState.set(State.SYNC_VIA_API);\n-        disposables.add(startApiSyncCompletable()\n-            .doOnComplete(() -> {\n-                LOG.info(\"Started the orchestrator in API sync mode.\");\n-                publishReadyEvent();\n+        disposables.add(\n+            Completable.create(emitter -> {\n+                LOG.info(\"Starting API synchronization mode.\");\n+\n+                // Resolve any client provided DataStoreSyncExpressions, before starting sync and subscriptions, once\n+                // each time DataStore starts.  The QueryPredicateProvider caches the resolved QueryPredicates, which\n+                // are then used to filter data received from AppSync.\n+                queryPredicateProvider.resolvePredicates();\n+\n+                subscriptionProcessor.startSubscriptions(this::transitionToLocalOnlyBlocking);\n+\n+                LOG.debug(\"About to hydrate...\");\n+                try {\n+                    boolean subscribed = syncProcessor.hydrate()\n+                            .blockingAwait(adjustedTimeoutSeconds, TimeUnit.SECONDS);\n+                    if (!subscribed) {\n+                        throw new TimeoutException(\"Timed out while performing initial model sync.\");\n+                    }\n+                } catch (Throwable failure) {\n+                    if (!emitter.isDisposed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MDUxMw=="}, "originalCommit": null, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODc0MDY3OnYy", "diffSide": "LEFT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0NjoyOVrOICtALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo0MzoxM1rOIHOuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNTM4OA==", "bodyText": "Before making any of the changes in this PR, I was not able to reproduce this crash if only one subscription is active (just ON_CREATE, for 1 model).  The basic issue causing the crash is due to the following sequence of events:\n\nGoing offline closes the socket, which calls AmplifyWebSocketListener::onFailure\nonSubscriptionFailure is called for the first subscription\nThe error is passed to the buffer (buffer.onError())\nonPipelineBroken::call (the Action that the Orchestrator calls on error)\nOrchestrator::stopApiBlocking is called\nSubscriptionProcessor::stopAllSubscriptionActivity is called, which disposes of the TWO disposables in SubscriptionProcessor: the buffer, and the subscriptionObservables.\nonSubscriptionFailure is called for the second subscription\nAt this point, the buffer is already disposed, and the app crashes with: io.reactivex.exceptions.UndeliverableException: The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with\n\nThis PR solves the problem by removing the buffer entirely, and just streaming SubscriptionEvent objects from the subscriptionObservables directly to the Merger.  The SubscriptionProcessor is now only managing  one Disposable (the subscriptionObservable stream) instead of two.   The same crash doesn't occur with the subscriptionObservable stream, because there is an explicit check to see if the stream is disposed before emitting errors on it.  I don't think a similar check was possible with the buffer though, since it was a ReplaySubject, which I don't believe has a way to check if it has been disposed or not.\nThe one side effect of this change is that SubscriptionEvent are sent to the Merger as they arrive, instead of waiting for all subscriptions to be started.  I don't believe there is any problem with this, but just calling it out.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r539705388", "createdAt": "2020-12-09T22:46:29Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -105,14 +104,11 @@ public static AppSyncStep builder() {\n     /**\n      * Start subscribing to model mutations.\n      */\n-    synchronized void startSubscriptions() {\n+    synchronized void startSubscriptions(Action onPipelineBroken) {\n         int subscriptionCount = modelProvider.modelNames().size() * SubscriptionType.values().length;\n         // Create a latch with the number of subscriptions are requesting. Each of these will be\n         // counted down when each subscription's onStarted event is called.\n         CountDownLatch latch = new CountDownLatch(subscriptionCount);\n-        // Need to create a new buffer so we can properly handle retries and stop/start scenarios.\n-        // Re-using the same buffer has some unexpected results due to the replay aspect of the subject.\n-        buffer = ReplaySubject.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzcyMA==", "bodyText": "This comment is out of date, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543737720", "createdAt": "2020-12-15T22:36:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -105,14 +104,11 @@ public static AppSyncStep builder() {\n     /**\n      * Start subscribing to model mutations.\n      */\n-    synchronized void startSubscriptions() {\n+    synchronized void startSubscriptions(Action onPipelineBroken) {\n         int subscriptionCount = modelProvider.modelNames().size() * SubscriptionType.values().length;\n         // Create a latch with the number of subscriptions are requesting. Each of these will be\n         // counted down when each subscription's onStarted event is called.\n         CountDownLatch latch = new CountDownLatch(subscriptionCount);\n-        // Need to create a new buffer so we can properly handle retries and stop/start scenarios.\n-        // Re-using the same buffer has some unexpected results due to the replay aspect of the subject.\n-        buffer = ReplaySubject.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNTM4OA=="}, "originalCommit": null, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MjEzMw==", "bodyText": "Yes, it is out of date.  I put the buffer back, because I believe it is needed to prevent a data inconsistency scenario.      Instead, this PR solves the crash by only using the buffer for SubscriptionEvents, not errors.  Errors are kept out of any RX stream since it may be disposed, and instead sent to a error callback provided by the Orchestrator.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r544452133", "createdAt": "2020-12-16T16:43:13Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -105,14 +104,11 @@ public static AppSyncStep builder() {\n     /**\n      * Start subscribing to model mutations.\n      */\n-    synchronized void startSubscriptions() {\n+    synchronized void startSubscriptions(Action onPipelineBroken) {\n         int subscriptionCount = modelProvider.modelNames().size() * SubscriptionType.values().length;\n         // Create a latch with the number of subscriptions are requesting. Each of these will be\n         // counted down when each subscription's onStarted event is called.\n         CountDownLatch latch = new CountDownLatch(subscriptionCount);\n-        // Need to create a new buffer so we can properly handle retries and stop/start scenarios.\n-        // Re-using the same buffer has some unexpected results due to the replay aspect of the subject.\n-        buffer = ReplaySubject.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNTM4OA=="}, "originalCommit": null, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjQ2NTQ1OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0MTo0MVrOIGhOGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0MTo0MVrOIGhOGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwNjY1MQ==", "bodyText": "Don't try to send a \"stop\" message if the web socket is disconnected.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543706651", "createdAt": "2020-12-15T21:41:41Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -241,7 +241,8 @@ synchronized void releaseSubscription(String subscriptionId) throws ApiException\n \n         // Only do this if the subscription was NOT pending.\n         // Otherwise it would probably fail since it was never established in the first place.\n-        if (!wasSubscriptionPending) {\n+\n+        if (!wasSubscriptionPending && !webSocketListener.isDisconnectedState()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjQ3Mjc2OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0MzoyOVrOIGhSIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0MzoyOVrOIGhSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwNzY4MQ==", "bodyText": "Previously there was no logic for cleaning up the subscriptions array.  Adding this here ensures that:\n\nthe subscription objects are properly removed from subscriptions\nthe websocket is closed when subscriptions.size() == 0.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543707681", "createdAt": "2020-12-15T21:43:29Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -257,8 +258,11 @@ synchronized void releaseSubscription(String subscriptionId) throws ApiException\n             subscription.awaitSubscriptionCompleted();\n         }\n \n+        subscriptions.remove(subscriptionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjQ4MjU4OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NTo1NFrOIGhXsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0NTo1NFrOIGhXsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwOTEwNA==", "bodyText": "For the following use case:\n\nThere is no internet connection.\nClient attempts to save a mutation.\n\nThis change ensures that we fail immediately, instead of waiting 10 seconds for the start_ack.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543709104", "createdAt": "2020-12-15T21:45:54Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -512,6 +516,9 @@ public Connection waitForConnectionReady() {\n                 return new Connection(\"Thread interrupted waiting for connection acknowledgement\");\n             }\n             LOG.debug(\"Current endpoint status: \" + endpointStatus.get());\n+            if(EndpointStatus.CONNECTION_FAILED.equals(endpointStatus.get())) {\n+                return new Connection(\"Connection failed.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjQ5ODIzOnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0OTo1OFrOIGhgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0OTo1OFrOIGhgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMTM5NA==", "bodyText": "This was a bug.  We can't just set canceled to true.  We have to actually do the cancellation too.\nI've also removed the !canceled.get() guard, because the cancel method itself is already idempotent, and once a subscription is cancelled, it won't throw any additional errors.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543711394", "createdAt": "2020-12-15T21:49:58Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionOperation.java", "diffHunk": "@@ -88,11 +88,8 @@ public synchronized void start() {\n                 },\n                 onNextItem,\n                 apiException -> {\n-                    // Guard against calling something that's been cancelled already.\n-                    if (!canceled.get()) {\n-                        canceled.set(true);\n-                        onSubscriptionError.accept(apiException);\n-                    }\n+                    cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjUzMDE5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo1NzozMFrOIGhyuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo1NzozMFrOIGhyuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNjAyNA==", "bodyText": "This is the most important change in this whole PR.  Instead of passing errors to the emitter, and then to the buffer, all errors are sent directly to an onFailure callback which the Orchestrator passes in to the SubscriptionProcessor on initialization.\nBasically, we are no longer sending errors to any stream, since those streams end up getting disposed after receiving an error, which was causing the crash.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543716024", "createdAt": "2020-12-15T21:57:30Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -185,15 +186,12 @@ private boolean isUnauthorizedException(DataStoreException exception) {\n                 },\n                 emitter::onNext,\n                 dataStoreException -> {\n-                    // Only call onError if the Observable hasn't been disposed and it's not an Unauthorized error.\n-                    // Unauthorized errors are ignored, so that DataStore can still be used even if the user is only\n+                    // Ignore Unauthorized errors, so that DataStore can still be used even if the user is only\n                     // authorized to read a subset of the models.\n-                    if (!emitter.isDisposed()) {\n-                        if (isUnauthorizedException(dataStoreException)) {\n-                            LOG.warn(\"Unauthorized failure for \" + subscriptionType + \" \" + modelSchema.getName());\n-                        } else {\n-                            emitter.onError(dataStoreException);\n-                        }\n+                    if (isUnauthorizedException(dataStoreException)) {\n+                        LOG.warn(\"Unauthorized failure for \" + subscriptionType.name() + \" \" + modelSchema.getName());\n+                    } else {\n+                        onFailure.accept(dataStoreException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY1Njg0OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMToyMVrOIGi8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMToyMVrOIGi8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNDg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (EndpointStatus.CONNECTION_FAILED.equals(endpointStatus.get())) {\n          \n          \n            \n                        if (EndpointStatus.CONNECTION_FAILED.equals(endpointStatus.get())) {", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543734853", "createdAt": "2020-12-15T22:31:21Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -512,6 +516,9 @@ public Connection waitForConnectionReady() {\n                 return new Connection(\"Thread interrupted waiting for connection acknowledgement\");\n             }\n             LOG.debug(\"Current endpoint status: \" + endpointStatus.get());\n+            if (EndpointStatus.CONNECTION_FAILED.equals(endpointStatus.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY2NDIzOnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMzoyM1rOIGjAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozMzoyM1rOIGjAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNTk1MQ==", "bodyText": "This change ensures that if there is the device has no network connection, the subscription will fail immediately, instead of failing due to timeout awaiting the start_ack after 10 seconds.", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543735951", "createdAt": "2020-12-15T22:33:23Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionEndpoint.java", "diffHunk": "@@ -512,6 +516,9 @@ public Connection waitForConnectionReady() {\n                 return new Connection(\"Thread interrupted waiting for connection acknowledgement\");\n             }\n             LOG.debug(\"Current endpoint status: \" + endpointStatus.get());\n+            if (EndpointStatus.CONNECTION_FAILED.equals(endpointStatus.get())) {\n+                return new Connection(\"Connection failed.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjY4NTA4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozOToyOFrOIGjMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozOToyOFrOIGjMlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczOTAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "url": "https://github.com/aws-amplify/amplify-android/pull/1039#discussion_r543739030", "createdAt": "2020-12-15T22:39:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -388,7 +393,12 @@ public SubscriptionProcessor build() {\n \n     interface QueryPredicateProviderStep {\n         @NonNull\n-        BuildStep queryPredicateProvider(QueryPredicateProvider queryPredicateProvider);\n+        OnFailureStep queryPredicateProvider(QueryPredicateProvider queryPredicateProvider);\n+    }\n+\n+    interface OnFailureStep {\n+        @NonNull\n+        BuildStep onFailure(Consumer<Throwable> onFailure);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 196}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 842, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}