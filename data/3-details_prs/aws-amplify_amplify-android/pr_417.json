{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODMwNzc2", "number": 417, "title": "Auth Sign In/Sign Up Options Updates", "bodyText": "Ignore the messy commit message history - this is due to this being forked off another work in progress branch while that was pending code review. The three changes made here are:\n\n\nModifying user attributes to be a hard type vs. a generic Map<String, String> with predefined values\n\n\nUpdating signIn/signUp options to match the design review\n\n\nMoving Cognito specific signIn/signUp options down to the plugin level\n\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-30T20:55:40Z", "url": "https://github.com/aws-amplify/amplify-android/pull/417", "merged": true, "mergeCommit": {"oid": "20c7b172b850f5597bf307ace9568d86e4f62e3f"}, "closed": true, "closedAt": "2020-05-01T20:07:45Z", "author": {"login": "TrekSoft"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZlgO6gH2gAyNDExODMwNzc2OmViNzkwYzNhNTA4Yzk1M2JmNTRhYmE0OThlMWY3NjRlM2MxOWE5MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdHSUlAFqTQwNDM2OTMwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eb790c3a508c953bf54aba498e1f764e3c19a930", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/eb790c3a508c953bf54aba498e1f764e3c19a930", "committedDate": "2020-04-20T20:55:53Z", "message": "Adds social sign in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b72bd853beea221bba65a1104381e45b033cfe", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c1b72bd853beea221bba65a1104381e45b033cfe", "committedDate": "2020-04-22T19:39:08Z", "message": "Adds getCurrentUser and changePassword"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223ab75339254a2f5437f360b64b8f22bef5327c", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/223ab75339254a2f5437f360b64b8f22bef5327c", "committedDate": "2020-04-22T19:43:08Z", "message": "Merge branch 'AuthCategory' into ddaudeli/GetAuthUser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dca3ac8777e2661fe0bf042679052029fa4f357", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7dca3ac8777e2661fe0bf042679052029fa4f357", "committedDate": "2020-04-24T16:33:55Z", "message": "Initial addressing of PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "993c1afb729fbfeadbd4460250f69147de6966ce", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/993c1afb729fbfeadbd4460250f69147de6966ce", "committedDate": "2020-04-28T18:23:38Z", "message": "Still working on extended sign up options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae90434893264bca49da2b8911589ba48dfac3e2", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ae90434893264bca49da2b8911589ba48dfac3e2", "committedDate": "2020-04-30T20:40:10Z", "message": "Update options objects to meet design review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9860cb625f8700edabb18cdfa44e92d33a119c14", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9860cb625f8700edabb18cdfa44e92d33a119c14", "committedDate": "2020-04-30T20:45:34Z", "message": "Merge branch 'AuthCategory' into ddaudeli/AuthChores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7645477b5675c70d3dea757281908a16b591b145", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7645477b5675c70d3dea757281908a16b591b145", "committedDate": "2020-04-30T20:51:00Z", "message": "Minor fix to builder constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTA2MzIz", "url": "https://github.com/aws-amplify/amplify-android/pull/417#pullrequestreview-403906323", "createdAt": "2020-04-30T21:58:16Z", "commit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1ODoxNlrOGO7xoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMDo1N1rOGO8VdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMjYwOQ==", "bodyText": "Ah, hm @raphkim I think this is an alternate strategy to your B template type in your Builder base classes? Looks potentially like a clever workaround for the typing, @TrekSoft?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418312609", "createdAt": "2020-04-30T21:58:16Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -80,47 +75,73 @@ public boolean equals(Object obj) {\n             return false;\n         } else {\n             AuthSignUpOptions authSignUpOptions = (AuthSignUpOptions) obj;\n-            return ObjectsCompat.equals(getValidationData(), authSignUpOptions.getValidationData()) &&\n-                    ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n+            return ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n         }\n     }\n \n+    /**\n+     * When overriding, be sure to include the parent properties in the output string.\n+     * @return A string representation of the object\n+     */\n     @Override\n     public String toString() {\n         return \"AuthSignUpOptions{\" +\n                 \"userAttributes=\" + userAttributes +\n-                \", validationData=\" + validationData +\n                 '}';\n     }\n \n-    public static final class Builder {\n-        private Map<String, String> userAttributes;\n-        private Map<String, String> validationData;\n+    public abstract static class Builder<T extends Builder<T>> {\n+        private List<AuthUserAttribute> userAttributes;\n \n+        /**\n+         * Initialize the builder object with an empty array list for userAttributes.\n+         */\n         public Builder() {\n-            this.userAttributes = new HashMap<>();\n-            this.validationData = new HashMap<>();\n+            this.userAttributes = new ArrayList<>();\n         }\n \n+        /**\n+         * Return the type of builder this is so that chaining can work correctly without implicit casting.\n+         * @return the type of builder this is\n+         */\n+        public abstract T getThis();\n+\n+        /**\n+         * Returns the list of user attributes so extending classes can include this value in their constructor.\n+         * @return the list of user attributes\n+         */\n+        protected List<AuthUserAttribute> getUserAttributes() {\n+            return userAttributes;\n+        }\n+\n+        /**\n+         * List of user attribute keys and values to populate on sign up.\n+         * @param userAttributes List of objects containing user attribute keys and values\n+         * @return The type of Builder object being used.\n+         */\n         @NonNull\n-        public Builder userAttributes(@NonNull Map<String, String> userAttributes) {\n+        public T userAttributes(@NonNull List<AuthUserAttribute> userAttributes) {\n             Objects.requireNonNull(userAttributes);\n             this.userAttributes.clear();\n-            this.userAttributes.putAll(userAttributes);\n-            return this;\n+            this.userAttributes.addAll(userAttributes);\n+            return getThis();\n         }\n \n+        /**\n+         * Build an instance of AuthSignUpOptions (or one of its subclasses).\n+         * @return an instance of AuthSignUpOptions (or one of its subclasses)\n+         */\n         @NonNull\n-        public Builder validationData(@NonNull Map<String, String> validationData) {\n-            Objects.requireNonNull(validationData);\n-            this.validationData.clear();\n-            this.validationData.putAll(validationData);\n-            return this;\n+        public AuthSignUpOptions build() {\n+            return new AuthSignUpOptions(Immutable.of(userAttributes));\n         }\n+    }\n \n-        @NonNull\n-        public AuthSignUpOptions build() {\n-            return new AuthSignUpOptions(Immutable.of(userAttributes), Immutable.of(validationData));\n+    public static final class CoreBuilder extends Builder<CoreBuilder> {\n+\n+        @Override\n+        public CoreBuilder getThis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNDI0Nw==", "bodyText": "the list reference can be final, since you only do addAll on it, not re-assign the reference, beyond the constrcutor.", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418314247", "createdAt": "2020-04-30T22:02:00Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -80,47 +75,73 @@ public boolean equals(Object obj) {\n             return false;\n         } else {\n             AuthSignUpOptions authSignUpOptions = (AuthSignUpOptions) obj;\n-            return ObjectsCompat.equals(getValidationData(), authSignUpOptions.getValidationData()) &&\n-                    ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n+            return ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n         }\n     }\n \n+    /**\n+     * When overriding, be sure to include the parent properties in the output string.\n+     * @return A string representation of the object\n+     */\n     @Override\n     public String toString() {\n         return \"AuthSignUpOptions{\" +\n                 \"userAttributes=\" + userAttributes +\n-                \", validationData=\" + validationData +\n                 '}';\n     }\n \n-    public static final class Builder {\n-        private Map<String, String> userAttributes;\n-        private Map<String, String> validationData;\n+    public abstract static class Builder<T extends Builder<T>> {\n+        private List<AuthUserAttribute> userAttributes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNDc2Ng==", "bodyText": "Builder<? extends AuthSignUpOptions> would be an easy improvement, if you can't achieve like a Builder<T>, or B (is a Builder<SubClassType>, etc.)\nSync up with @raphkim he has known these struggles in his predictions builders as well", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418314766", "createdAt": "2020-04-30T22:03:18Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -18,60 +18,55 @@\n import androidx.annotation.NonNull;\n import androidx.core.util.ObjectsCompat;\n \n+import com.amplifyframework.auth.AuthUserAttribute;\n import com.amplifyframework.util.Immutable;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n \n-public final class AuthSignUpOptions {\n-    private final Map<String, String> userAttributes;\n-    private final Map<String, String> validationData;\n+public class AuthSignUpOptions {\n+    private final List<AuthUserAttribute> userAttributes;\n \n     /**\n      * Advanced options for signing in.\n      * @param userAttributes Additional user attributes which should be associated with this user on registration\n-     * @param validationData A map of custom key/values to be sent as part of the sign up process\n      */\n-    private AuthSignUpOptions(\n-            Map<String, String> userAttributes,\n-            Map<String, String> validationData\n+    protected AuthSignUpOptions(\n+            List<AuthUserAttribute> userAttributes\n     ) {\n         this.userAttributes = userAttributes;\n-        this.validationData = validationData;\n     }\n \n     /**\n      * Get additional user attributes which should be associated with this user on registration.\n      * @return additional user attributes which should be associated with this user on registration\n      */\n     @NonNull\n-    public Map<String, String> getUserAttributes() {\n+    public List<AuthUserAttribute> getUserAttributes() {\n         return userAttributes;\n     }\n \n-    /**\n-     * Get a map of custom key/values to be sent as part of the sign up process.\n-     * @return a map of custom key/values to be sent as part of the sign up process\n-     */\n-    @NonNull\n-    public Map<String, String> getValidationData() {\n-        return validationData;\n-    }\n-\n     @NonNull\n-    public static Builder builder() {\n-        return new Builder();\n+    public static Builder<?> builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNTQ0OA==", "bodyText": "An abstract class that has no implementation and no policy is really just like an interface. Can this, and its inner-Builder be interfaces, instead?\nInterfaces are always better than abstract classes, since Java doesn't support multiple inheritence of classes, but you can implement as many interfaces as you want.\nThe only exception is when you have to use a class, because you want to enforce policy. And in that category:\n\nUse a final class with composition. Don't need to worry about multiple inheritence - much less any inheritence, if the class is closed.\nUse an abstract class that acts like an interface, but constrains what the extensible methods are able to achieve, through hard-coded policy.", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418315448", "createdAt": "2020-04-30T22:04:55Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignInOptions.java", "diffHunk": "@@ -16,83 +16,21 @@\n package com.amplifyframework.auth.options;\n \n import androidx.annotation.NonNull;\n-import androidx.core.util.ObjectsCompat;\n-\n-import com.amplifyframework.util.Immutable;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n-public final class AuthSignInOptions {\n-    private final Map<String, String> validationData;\n-\n-    /**\n-     * Advanced options for signing in.\n-     * @param validationData A map of custom key/values to be sent as part of the sign in process\n-     */\n-    private AuthSignInOptions(Map<String, String> validationData) {\n-        this.validationData = validationData;\n-    }\n-\n-    /**\n-     * Get a map of custom key/values to be sent as part of the sign in process.\n-     * @return a map of custom key/values to be sent as part of the sign in process\n-     */\n-    @NonNull\n-    public Map<String, String> getValidationData() {\n-        return validationData;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return ObjectsCompat.hash(\n-                getValidationData()\n-        );\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        } else if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        } else {\n-            AuthSignInOptions authSignInOptions = (AuthSignInOptions) obj;\n-            return ObjectsCompat.equals(getValidationData(), authSignInOptions.getValidationData());\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"AuthSignInOptions{\" +\n-                \"validationData=\" + validationData +\n-                '}';\n-    }\n-\n-    @NonNull\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static final class Builder {\n-        private Map<String, String> validationData;\n-\n-        public Builder() {\n-            this.validationData = new HashMap<>();\n-        }\n-\n-        @NonNull\n-        public Builder validationData(@NonNull Map<String, String> validationData) {\n-            Objects.requireNonNull(validationData);\n-            this.validationData.clear();\n-            this.validationData.putAll(validationData);\n-            return this;\n-        }\n \n+// Note: This is currently empty but exists here to support common sign in options in the future.\n+public abstract class AuthSignInOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNjU0Mg==", "bodyText": "getAttributeKey() , to match the field? Or, change the field name to match the method name?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418316542", "createdAt": "2020-04-30T22:07:36Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthUserAttributeKey.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+public final class AuthUserAttributeKey {\n+    private static final String ADDRESS = \"address\";\n+    private static final String BIRTHDATE = \"birthdate\";\n+    private static final String EMAIL = \"email\";\n+    private static final String FAMILY_NAME = \"family_name\";\n+    private static final String GENDER = \"gender\";\n+    private static final String GIVEN_NAME = \"given_name\";\n+    private static final String LOCALE = \"locale\";\n+    private static final String MIDDLE_NAME = \"middle_name\";\n+    private static final String NICKNAME = \"nickname\";\n+    private static final String PHONE_NUMBER = \"phone_number\";\n+    private static final String PICTURE = \"picture\";\n+    private static final String PREFERRED_USERNAME = \"preferred_username\";\n+    private static final String PROFILE = \"profile\";\n+    private static final String UPDATED_AT = \"updated_at\";\n+    private static final String WEBSITE = \"website\";\n+    private static final String ZONE_INFO = \"zoneinfo\";\n+    private static final String NAME = \"name\";\n+\n+    private final String attributeKey;\n+\n+    protected AuthUserAttributeKey(String attributeKey) {\n+        this.attributeKey = attributeKey;\n+    }\n+\n+    /**\n+     * Factory method for getting address attribute.\n+     * @return a pre-configured address attribute\n+     */\n+    public static AuthUserAttributeKey address() {\n+        return new AuthUserAttributeKey(ADDRESS);\n+    }\n+\n+    /**\n+     * Factory method for getting birthdate attribute.\n+     * @return a pre-configured birthdate attribute\n+     */\n+    public static AuthUserAttributeKey birthdate() {\n+        return new AuthUserAttributeKey(BIRTHDATE);\n+    }\n+\n+    /**\n+     * Factory method for getting email attribute.\n+     * @return a pre-configured email attribute\n+     */\n+    public static AuthUserAttributeKey email() {\n+        return new AuthUserAttributeKey(EMAIL);\n+    }\n+\n+    /**\n+     * Factory method for getting family name attribute.\n+     * @return a pre-configured family name attribute\n+     */\n+    public static AuthUserAttributeKey familyName() {\n+        return new AuthUserAttributeKey(FAMILY_NAME);\n+    }\n+\n+    /**\n+     * Factory method for getting gender attribute.\n+     * @return a pre-configured gender attribute\n+     */\n+    public static AuthUserAttributeKey gender() {\n+        return new AuthUserAttributeKey(GENDER);\n+    }\n+\n+    /**\n+     * Factory method for getting given name attribute.\n+     * @return a pre-configured given name attribute\n+     */\n+    public static AuthUserAttributeKey givenName() {\n+        return new AuthUserAttributeKey(GIVEN_NAME);\n+    }\n+\n+    /**\n+     * Factory method for getting locale attribute.\n+     * @return a pre-configured locale attribute\n+     */\n+    public static AuthUserAttributeKey locale() {\n+        return new AuthUserAttributeKey(LOCALE);\n+    }\n+\n+    /**\n+     * Factory method for getting middle name attribute.\n+     * @return a pre-configured middle name attribute\n+     */\n+    public static AuthUserAttributeKey middleName() {\n+        return new AuthUserAttributeKey(MIDDLE_NAME);\n+    }\n+\n+    /**\n+     * Factory method for getting name attribute.\n+     * @return a pre-configured name attribute\n+     */\n+    public static AuthUserAttributeKey name() {\n+        return new AuthUserAttributeKey(NAME);\n+    }\n+\n+    /**\n+     * Factory method for getting nickname attribute.\n+     * @return a pre-configured nickname attribute\n+     */\n+    public static AuthUserAttributeKey nickname() {\n+        return new AuthUserAttributeKey(NICKNAME);\n+    }\n+\n+    /**\n+     * Factory method for getting phone number attribute.\n+     * @return a pre-configured phone number attribute\n+     */\n+    public static AuthUserAttributeKey phoneNumber() {\n+        return new AuthUserAttributeKey(PHONE_NUMBER);\n+    }\n+\n+    /**\n+     * Factory method for getting picture attribute.\n+     * @return a pre-configured picture attribute\n+     */\n+    public static AuthUserAttributeKey picture() {\n+        return new AuthUserAttributeKey(PICTURE);\n+    }\n+\n+    /**\n+     * Factory method for getting preferred username attribute.\n+     * @return a pre-configured preferred username attribute\n+     */\n+    public static AuthUserAttributeKey preferredUsername() {\n+        return new AuthUserAttributeKey(PREFERRED_USERNAME);\n+    }\n+\n+    /**\n+     * Factory method for getting profile attribute.\n+     * @return a pre-configured profile attribute\n+     */\n+    public static AuthUserAttributeKey profile() {\n+        return new AuthUserAttributeKey(PROFILE);\n+    }\n+\n+    /**\n+     * Factory method for getting updated at attribute.\n+     * @return a pre-configured updated at attribute\n+     */\n+    public static AuthUserAttributeKey updatedAt() {\n+        return new AuthUserAttributeKey(UPDATED_AT);\n+    }\n+\n+    /**\n+     * Factory method for getting website attribute.\n+     * @return a pre-configured website attribute\n+     */\n+    public static AuthUserAttributeKey website() {\n+        return new AuthUserAttributeKey(WEBSITE);\n+    }\n+\n+    /**\n+     * Factory method for getting zone info attribute.\n+     * @return a pre-configured zone info attribute\n+     */\n+    public static AuthUserAttributeKey zoneInfo() {\n+        return new AuthUserAttributeKey(ZONE_INFO);\n+    }\n+\n+    /**\n+     * Factory method for creating your own custom user attribute.\n+     * @param attributeKey The key for the custom user attribute\n+     * @return a custom provider\n+     */\n+    public static AuthUserAttributeKey custom(String attributeKey) {\n+        return new AuthUserAttributeKey(attributeKey);\n+    }\n+\n+    /**\n+     * Returns the String key for the attribute.\n+     * @return the String key for the attribute\n+     */\n+    @NonNull\n+    public String getKeyString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzAxNw==", "bodyText": "Hm. There is a lot of \"opinion\" in this class, in core. How many of these attributes come from Cognito?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418317017", "createdAt": "2020-04-30T22:08:48Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthUserAttributeKey.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+public final class AuthUserAttributeKey {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxODAwMg==", "bodyText": "Yea, maybe. But, it looks a lot like an androidx.core.util.Pair.\nThat might be so, but I do agree it is nice to own the entire surface of our own API, without relying on third-party types (AndroidX.)\nYou could, though, make AuthUserAttribute basically just a wrapper around a Pair delegate from androidx.core.util.Pair.\nIt's also so lightweight of a class that basically nothing I've said here matters lol :-D haha", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418318002", "createdAt": "2020-04-30T22:11:13Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthUserAttribute.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import androidx.core.util.ObjectsCompat;\n+\n+public final class AuthUserAttribute {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxOTU2Mg==", "bodyText": "Instead of doing this, It would be better to provide an overloaded method that does not require any options.\nIf your options as a user are to call:\nvoid signIn(@Nullable first, @Nullable last, @Nullable options)\n\nas:\nsignIn(null, null, null, ok -> {}, notOk -> {})\n\nWouldn't you rather have just done:\nsignIn(ok -> {}, notOk -> {})\n\nThe null params end up snaking down through the code base and creating a lot of branch complexity once everything has a if (thing == null)  around it.\nSo, the way I would handle this is to have two copies of sign-in, one that requires some non-null params, and one that does not take in those params, at all.\nInternal to the implementation of the second method, choose \"sane defaults.\" AuthSignInOptions.defaults() or something, that you can proxy into the other method, which does need the anon-null param.", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418319562", "createdAt": "2020-04-30T22:15:16Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -86,7 +86,7 @@ void resendSignUpCode(\n     void signIn(\n             @Nullable String username,\n             @Nullable String password,\n-            @NonNull AuthSignInOptions options,\n+            @Nullable AuthSignInOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMDE2MQ==", "bodyText": "If I have empty Cognito sign-up options, and empty Third party sign-up options, are the options the same?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418320161", "createdAt": "2020-04-30T22:16:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/options/AWSCognitoAuthSignUpOptions.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AWSCognitoAuthSignUpOptions extends AuthSignUpOptions {\n+    private final Map<String, String> validationData;\n+\n+    /**\n+     * Advanced options for signing in.\n+     * @param userAttributes Additional user attributes which should be associated with this user on registration\n+     * @param validationData A map of custom key/values to be sent as part of the sign up process\n+     */\n+    protected AWSCognitoAuthSignUpOptions(\n+            List<AuthUserAttribute> userAttributes,\n+            Map<String, String> validationData\n+    ) {\n+        super(userAttributes);\n+        this.validationData = validationData;\n+    }\n+\n+    /**\n+     * Get a map of custom key/values to be sent as part of the sign up process.\n+     * @return a map of custom key/values to be sent as part of the sign up process\n+     */\n+    @NonNull\n+    public Map<String, String> getValidationData() {\n+        return validationData;\n+    }\n+\n+    @NonNull\n+    public static CognitoBuilder builder() {\n+        return new CognitoBuilder();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getUserAttributes(),\n+                getValidationData()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || getClass() != obj.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMDY2Mg==", "bodyText": ".putAll()?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418320662", "createdAt": "2020-04-30T22:18:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -148,11 +152,24 @@ public void signUp(\n             @NonNull final Consumer<AuthSignUpResult> onSuccess,\n             @NonNull final Consumer<AuthException> onException\n     ) {\n+        Map<String, String> userAttributes = new HashMap<>();\n+        Map<String, String> validationData = new HashMap<>();\n+\n+        if (options.getUserAttributes() != null) {\n+            for (AuthUserAttribute attribute : options.getUserAttributes()) {\n+                userAttributes.put(attribute.getKey().getKeyString(), attribute.getValue());\n+            }\n+        }\n+\n+        if (options instanceof AWSCognitoAuthSignUpOptions) {\n+            validationData = ((AWSCognitoAuthSignUpOptions) options).getValidationData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMDgwNQ==", "bodyText": "putAll(), into a non-null collection?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418320805", "createdAt": "2020-04-30T22:18:36Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -253,11 +270,17 @@ public void onError(Exception error) {\n     public void signIn(\n         @Nullable String username,\n         @Nullable String password,\n-        @NonNull AuthSignInOptions options,\n+        @Nullable AuthSignInOptions options,\n         @NonNull final Consumer<AuthSignInResult> onSuccess,\n         @NonNull final Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().signIn(username, password, null, new Callback<SignInResult>() {\n+        Map<String, String> metadata = null;\n+\n+        if (options != null && options instanceof AWSCognitoAuthSignInOptions) {\n+            metadata = ((AWSCognitoAuthSignInOptions) options).getMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMTA3Ng==", "bodyText": "--> be sure to include userAttributes in the ...", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418321076", "createdAt": "2020-04-30T22:19:15Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -80,47 +75,73 @@ public boolean equals(Object obj) {\n             return false;\n         } else {\n             AuthSignUpOptions authSignUpOptions = (AuthSignUpOptions) obj;\n-            return ObjectsCompat.equals(getValidationData(), authSignUpOptions.getValidationData()) &&\n-                    ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n+            return ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n         }\n     }\n \n+    /**\n+     * When overriding, be sure to include the parent properties in the output string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMTc4MA==", "bodyText": "In your base classes, you could probably do like:\nif (!super.equals(obj))\n\nBut, you'll have to remove the class-type checks. You probably want to relax them to (obj instanceof BaseType) instead of \"obj is basetype\"?", "url": "https://github.com/aws-amplify/amplify-android/pull/417#discussion_r418321780", "createdAt": "2020-04-30T22:20:57Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -18,60 +18,55 @@\n import androidx.annotation.NonNull;\n import androidx.core.util.ObjectsCompat;\n \n+import com.amplifyframework.auth.AuthUserAttribute;\n import com.amplifyframework.util.Immutable;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Objects;\n \n-public final class AuthSignUpOptions {\n-    private final Map<String, String> userAttributes;\n-    private final Map<String, String> validationData;\n+public class AuthSignUpOptions {\n+    private final List<AuthUserAttribute> userAttributes;\n \n     /**\n      * Advanced options for signing in.\n      * @param userAttributes Additional user attributes which should be associated with this user on registration\n-     * @param validationData A map of custom key/values to be sent as part of the sign up process\n      */\n-    private AuthSignUpOptions(\n-            Map<String, String> userAttributes,\n-            Map<String, String> validationData\n+    protected AuthSignUpOptions(\n+            List<AuthUserAttribute> userAttributes\n     ) {\n         this.userAttributes = userAttributes;\n-        this.validationData = validationData;\n     }\n \n     /**\n      * Get additional user attributes which should be associated with this user on registration.\n      * @return additional user attributes which should be associated with this user on registration\n      */\n     @NonNull\n-    public Map<String, String> getUserAttributes() {\n+    public List<AuthUserAttribute> getUserAttributes() {\n         return userAttributes;\n     }\n \n-    /**\n-     * Get a map of custom key/values to be sent as part of the sign up process.\n-     * @return a map of custom key/values to be sent as part of the sign up process\n-     */\n-    @NonNull\n-    public Map<String, String> getValidationData() {\n-        return validationData;\n-    }\n-\n     @NonNull\n-    public static Builder builder() {\n-        return new Builder();\n+    public static Builder<?> builder() {\n+        return new CoreBuilder();\n     }\n \n+    /**\n+     * When overriding, be sure to include the parent properties in the hash.\n+     * @return Hash code of this object\n+     */\n     @Override\n     public int hashCode() {\n         return ObjectsCompat.hash(\n-                getUserAttributes(),\n-                getValidationData()\n+                getUserAttributes()\n         );\n     }\n \n+    /**\n+     * When overriding, be sure to include the parent properties in the comparison.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7645477b5675c70d3dea757281908a16b591b145"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac92c3a2190bd4a9fb0eaa5265e0bc590b9daba5", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ac92c3a2190bd4a9fb0eaa5265e0bc590b9daba5", "committedDate": "2020-05-01T19:18:37Z", "message": "Addresses PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MzY5MzA4", "url": "https://github.com/aws-amplify/amplify-android/pull/417#pullrequestreview-404369308", "createdAt": "2020-05-01T19:59:14Z", "commit": {"oid": "ac92c3a2190bd4a9fb0eaa5265e0bc590b9daba5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2768, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}