{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTg5OTEz", "number": 507, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozMjo0OVrOD-wjdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozODowNVrOD-wq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTMzODEzOnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozMjo0OVrOGZDrEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo0MzozNlrOGZD_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNzc2Mg==", "bodyText": "Thought this looked familiar: #446. From that pull:\n\nI'm assuming the sort with a random integer was not guaranteeing an even distribution. Any reason not to use Collections.shuffle() whose docs claims it does?", "url": "https://github.com/aws-amplify/amplify-android/pull/507#discussion_r428927762", "createdAt": "2020-05-21T21:32:49Z", "author": {"login": "jpignata"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A utility to create scattered copies of ordered collections.\n+ */\n+public final class Scattered {\n+    private Scattered() {}\n+\n+    /**\n+     * Create a copy of the provided list, but scatter its contents into a random ordering.\n+     * This has a few nuances:\n+     *\n+     *   1. A null, empty, or singleton list cannot be scattered; just return an immutable\n+     *      copy, immediately.\n+     *\n+     *   2. For lists that have more than 1 element, we can sort the list using a comparator\n+     *      that decides at random whether one element is larger than another. A SecureRandom\n+     *      is used for this, to reduce the likelihood that the same ordering will be generated\n+     *      across multiple runs.\n+     *\n+     *   3. For lists with small amounts of elements, the likelihood of attaining a unique\n+     *      list from a single, random sorting, is quite low. For a list of two, its 50%.\n+     *      To guarantee that the output is also _unique_, the sort operation is performed infinitely,\n+     *      until the output is guaranteed to be different than the input.\n+     * @param original A possibly-null, possibly-empty, list of items, in no particular order\n+     * @param <T> Type of item in list\n+     * @return A scattered copy of the list of the provided items, abiding the rules mentioned above\n+     */\n+    @Nullable\n+    public static <T> List<T> list(@Nullable List<T> original) {\n+        if (original == null || original.size() <= 1) {\n+            return Immutable.of(original);\n+        }\n+        SecureRandom random = new SecureRandom();\n+        List<T> scattered = new ArrayList<>(original);\n+        while (scattered.equals(original)) {\n+            //noinspection ComparatorMethodParameterNotUsed Intentional; result is random\n+            Collections.sort(scattered, (one, two) -> random.nextInt());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1abf39d6d662416511e43c0c6299a87eb1b300d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjkyMA==", "bodyText": "Oh lol!!!! I didn't know about that one. Thanks.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#shuffle(java.util.List)", "url": "https://github.com/aws-amplify/amplify-android/pull/507#discussion_r428932920", "createdAt": "2020-05-21T21:43:36Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A utility to create scattered copies of ordered collections.\n+ */\n+public final class Scattered {\n+    private Scattered() {}\n+\n+    /**\n+     * Create a copy of the provided list, but scatter its contents into a random ordering.\n+     * This has a few nuances:\n+     *\n+     *   1. A null, empty, or singleton list cannot be scattered; just return an immutable\n+     *      copy, immediately.\n+     *\n+     *   2. For lists that have more than 1 element, we can sort the list using a comparator\n+     *      that decides at random whether one element is larger than another. A SecureRandom\n+     *      is used for this, to reduce the likelihood that the same ordering will be generated\n+     *      across multiple runs.\n+     *\n+     *   3. For lists with small amounts of elements, the likelihood of attaining a unique\n+     *      list from a single, random sorting, is quite low. For a list of two, its 50%.\n+     *      To guarantee that the output is also _unique_, the sort operation is performed infinitely,\n+     *      until the output is guaranteed to be different than the input.\n+     * @param original A possibly-null, possibly-empty, list of items, in no particular order\n+     * @param <T> Type of item in list\n+     * @return A scattered copy of the list of the provided items, abiding the rules mentioned above\n+     */\n+    @Nullable\n+    public static <T> List<T> list(@Nullable List<T> original) {\n+        if (original == null || original.size() <= 1) {\n+            return Immutable.of(original);\n+        }\n+        SecureRandom random = new SecureRandom();\n+        List<T> scattered = new ArrayList<>(original);\n+        while (scattered.equals(original)) {\n+            //noinspection ComparatorMethodParameterNotUsed Intentional; result is random\n+            Collections.sort(scattered, (one, two) -> random.nextInt());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkyNzc2Mg=="}, "originalCommit": {"oid": "e1abf39d6d662416511e43c0c6299a87eb1b300d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTM1NzM0OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTozODowNVrOGZD16g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTo1NToxNVrOGZERUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMDUzOA==", "bodyText": "Distant cousin of bogosort. ;)", "url": "https://github.com/aws-amplify/amplify-android/pull/507#discussion_r428930538", "createdAt": "2020-05-21T21:38:05Z", "author": {"login": "jpignata"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A utility to create scattered copies of ordered collections.\n+ */\n+public final class Scattered {\n+    private Scattered() {}\n+\n+    /**\n+     * Create a copy of the provided list, but scatter its contents into a random ordering.\n+     * This has a few nuances:\n+     *\n+     *   1. A null, empty, or singleton list cannot be scattered; just return an immutable\n+     *      copy, immediately.\n+     *\n+     *   2. For lists that have more than 1 element, we can sort the list using a comparator\n+     *      that decides at random whether one element is larger than another. A SecureRandom\n+     *      is used for this, to reduce the likelihood that the same ordering will be generated\n+     *      across multiple runs.\n+     *\n+     *   3. For lists with small amounts of elements, the likelihood of attaining a unique", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1abf39d6d662416511e43c0c6299a87eb1b300d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNzU1Mg==", "bodyText": "Haha yea, true! \"bogoshuffle\"\nSounds like a dance.", "url": "https://github.com/aws-amplify/amplify-android/pull/507#discussion_r428937552", "createdAt": "2020-05-21T21:55:15Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Scattered.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.testutils;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A utility to create scattered copies of ordered collections.\n+ */\n+public final class Scattered {\n+    private Scattered() {}\n+\n+    /**\n+     * Create a copy of the provided list, but scatter its contents into a random ordering.\n+     * This has a few nuances:\n+     *\n+     *   1. A null, empty, or singleton list cannot be scattered; just return an immutable\n+     *      copy, immediately.\n+     *\n+     *   2. For lists that have more than 1 element, we can sort the list using a comparator\n+     *      that decides at random whether one element is larger than another. A SecureRandom\n+     *      is used for this, to reduce the likelihood that the same ordering will be generated\n+     *      across multiple runs.\n+     *\n+     *   3. For lists with small amounts of elements, the likelihood of attaining a unique", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMDUzOA=="}, "originalCommit": {"oid": "e1abf39d6d662416511e43c0c6299a87eb1b300d"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1305, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}