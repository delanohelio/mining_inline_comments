{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODU2OTk4", "number": 665, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0OToxM1rOERoLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NTo1OVrOERoSyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE5NTM2OnYy", "diffSide": "RIGHT", "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/ModelWithMetadataDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0OToxM1rOG2cwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0OToxM1rOG2cwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NzQ5OQ==", "bodyText": "Should it be <? extends Model>?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459747499", "createdAt": "2020-07-23T21:49:13Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/ModelWithMetadataDeserializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.Model;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Deserializer for ModelWithMetadata.\n+ */\n+public final class ModelWithMetadataDeserializer implements JsonDeserializer<ModelWithMetadata<Model>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTE5Njc2OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0OTo0NlrOG2cxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMDo0MVrOG2dwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NzcxNg==", "bodyText": "Not the subclass simple name?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459747716", "createdAt": "2020-07-23T21:49:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactory.java", "diffHunk": "@@ -204,7 +204,11 @@ private AppSyncGraphQLRequestFactory() { }\n             }\n \n             if (!QueryPredicates.all().equals(predicate)) {\n-                String conditionType = \"Model\" + graphQlTypeName + \"ConditionInput\";\n+                String conditionType = new StringBuilder()\n+                    .append(\"Model\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MzkxOQ==", "bodyText": "graphQLTypeName is actually the same as the simpleName(), it's just built in a more roundabout way:\nString graphQLTypeName = ModelSchema.fromModelClass(model.getClass()).getName()\n\nIn ModelSchema.fromModelClass, name is set to modelClass.getSimpleName()", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459763919", "createdAt": "2020-07-23T22:30:41Z", "author": {"login": "richardmcclellan"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactory.java", "diffHunk": "@@ -204,7 +204,11 @@ private AppSyncGraphQLRequestFactory() { }\n             }\n \n             if (!QueryPredicates.all().equals(predicate)) {\n-                String conditionType = \"Model\" + graphQlTypeName + \"ConditionInput\";\n+                String conditionType = new StringBuilder()\n+                    .append(\"Model\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NzcxNg=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwNDg2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mjo0MlrOG2c2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mjo0MlrOG2c2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0ODk0OA==", "bodyText": "formatting here is weird", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459748948", "createdAt": "2020-07-23T21:52:42Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "diffHunk": "@@ -43,68 +44,80 @@\n     /**\n      * Validates the construction of a base-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForBaseSync() throws DataStoreException {\n-        assertEquals(\n+    public void validateRequestGenerationForBaseSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"base-sync-request-document-for-blog-owner.txt\"),\n-            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getQuery()\n+            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Validates the construction of a delta-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class.\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForDeltaSync() throws DataStoreException {\n-        final GraphQLRequest<Iterable<Post>> request =\n-                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null);\n-\n-        assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"lastSync\", 123123123L), request.getVariables());\n+    public void validateRequestGenerationForDeltaSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"),\n+                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null).getContent(),\n+                true);\n     }\n \n     /**\n      * Validates that the nextToken parameter is correctly generate for a Sync query.\n      * @throws DataStoreException On failure to interrogate the BlogOwner.class.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateRequestGenerationForPagination() throws DataStoreException {\n+    public void validateRequestGenerationForPagination() throws DataStoreException, JSONException {\n         final String nextToken = Resources.readAsString(\"base-sync-request-next-token-value.txt\").trim();\n         final GraphQLRequest<Iterable<Post>> request =\n                 AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, nextToken);\n-        assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"nextToken\", nextToken), request.getVariables());\n+        JSONAssert.assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"),\n+                request.getContent(),\n+                true);\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateUpdateWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateUpdateWithPredicateGeneration() throws DataStoreException, JSONException {\n+        String blogOwnerId = \"926d7ee8-4ea5-40c0-8e62-3fb80b2a2edd\";\n+        BlogOwner blogOwner = BlogOwner.builder().name(\"John Doe\").id(blogOwnerId).build();\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"update-blog-owner-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildUpdateDoc(BlogOwner.class, true)\n+            AppSyncRequestFactory.buildUpdateRequest(\n+                    blogOwner, 42, BlogOwner.WEA.contains(\"ther\")).getContent(),\n+            true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIwNTI5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mjo1MVrOG2c2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1Mjo1MVrOG2c2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTAxOA==", "bodyText": "ditto", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459749018", "createdAt": "2020-07-23T21:52:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "diffHunk": "@@ -43,68 +44,80 @@\n     /**\n      * Validates the construction of a base-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForBaseSync() throws DataStoreException {\n-        assertEquals(\n+    public void validateRequestGenerationForBaseSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"base-sync-request-document-for-blog-owner.txt\"),\n-            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getQuery()\n+            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Validates the construction of a delta-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class.\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForDeltaSync() throws DataStoreException {\n-        final GraphQLRequest<Iterable<Post>> request =\n-                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null);\n-\n-        assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"lastSync\", 123123123L), request.getVariables());\n+    public void validateRequestGenerationForDeltaSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"),\n+                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null).getContent(),\n+                true);\n     }\n \n     /**\n      * Validates that the nextToken parameter is correctly generate for a Sync query.\n      * @throws DataStoreException On failure to interrogate the BlogOwner.class.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateRequestGenerationForPagination() throws DataStoreException {\n+    public void validateRequestGenerationForPagination() throws DataStoreException, JSONException {\n         final String nextToken = Resources.readAsString(\"base-sync-request-next-token-value.txt\").trim();\n         final GraphQLRequest<Iterable<Post>> request =\n                 AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, nextToken);\n-        assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"nextToken\", nextToken), request.getVariables());\n+        JSONAssert.assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"),\n+                request.getContent(),\n+                true);\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateUpdateWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateUpdateWithPredicateGeneration() throws DataStoreException, JSONException {\n+        String blogOwnerId = \"926d7ee8-4ea5-40c0-8e62-3fb80b2a2edd\";\n+        BlogOwner blogOwner = BlogOwner.builder().name(\"John Doe\").id(blogOwnerId).build();\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"update-blog-owner-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildUpdateDoc(BlogOwner.class, true)\n+            AppSyncRequestFactory.buildUpdateRequest(\n+                    blogOwner, 42, BlogOwner.WEA.contains(\"ther\")).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateDeleteWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateDeleteWithPredicateGeneration() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"delete-person-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildDeletionDoc(Person.class, true)\n+            AppSyncRequestFactory.buildDeletionRequest(\n+                    Person.class, \"123\", 456, Person.AGE.gt(40)).getContent(),\n+            true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIxMDI1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/resources/on-delete-request-for-blog-owner.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NDozNFrOG2c5oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjowMjoxOFrOG2dGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTc5Mg==", "bodyText": "Does this need to be explicitly present and null? Or can we figure out how to omit this block from the output, if the value is null?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459749792", "createdAt": "2020-07-23T21:54:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/resources/on-delete-request-for-blog-owner.txt", "diffHunk": "@@ -11,3 +12,6 @@ subscription OnDeleteBlogOwner {\n     wea\n   }\n }\n+\",\n+  \"variables\": null\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MzA5OA==", "bodyText": "I'm not sure - I was trying to maintain behavior of the existing code, in case AppSync does require it explicitly.  We can try to remove it later, after doing some more thorough end to end testing.", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459753098", "createdAt": "2020-07-23T22:02:18Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/test/resources/on-delete-request-for-blog-owner.txt", "diffHunk": "@@ -11,3 +12,6 @@ subscription OnDeleteBlogOwner {\n     wea\n   }\n }\n+\",\n+  \"variables\": null\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTc5Mg=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTIxNDE3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NTo1OVrOG2c8GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDoyNDoyNFrOG2f2Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA==", "bodyText": "Hm. Are there any remaining types we want/need to paginate over, that are not models?\nIterable<String>, <String>, ModelWithMutation<T>, CustomGizmoNotFromCodeGen?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459750424", "createdAt": "2020-07-23T21:55:59Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NjI2NA==", "bodyText": "The reason I changed this from  to  is so we can paginate over ModelWithMetadata, since ModelWithMetadata is not a Model itself.", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459766264", "createdAt": "2020-07-23T22:37:22Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5MzAyOA==", "bodyText": "Maybe it can be PaginatedResult<ModelWithMetadata<T extends Model>>?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459793028", "createdAt": "2020-07-24T00:04:28Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NDIwOQ==", "bodyText": "Maybe it can be PaginatedResult<ModelWithMetadata<T extends Model>>?\n\nThat would work for DataStore, but not for API, because API expects a PaginatedResult<? extends Model>.", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459794209", "createdAt": "2020-07-24T00:08:48Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5NzAwMw==", "bodyText": "Ah...makes sense. I guess the only other alternative I can think of would be to make ModelWithMetadata a Model.\npublic final class ModelWithMetadata<M extends Model> implements Model {\n     private final M model;\n\n    @NonNull\n    @Override\n    public String getId() {\n        return model.getId();\n    }\n}\n\nNot sure if it's worth it though unless it would simplify all the other bits of code.", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459797003", "createdAt": "2020-07-24T00:19:47Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc5ODA1MA==", "bodyText": "Yeah, it's not really a Model though.  We could create a PaginatedResultItem interface, which is implemented by Model and ModelWithMetadata though.  Not sure if that's really worth it right now, but I'll think about that for my next PR, which is going to get a little deeper into this code.", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459798050", "createdAt": "2020-07-24T00:24:24Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA=="}, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1119, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}