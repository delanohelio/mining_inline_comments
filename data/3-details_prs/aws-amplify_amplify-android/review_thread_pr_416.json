{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzk5NDE0", "number": 416, "reviewThreads": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzoyMlrOD4Ncuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNDo0NFrOD-0zpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3MTk1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/SynchronousStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzoyMlrOGO6qtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzoyMlrOGO6qtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDQ1Mg==", "bodyText": "Ah yea, good call. The Await.result(...) thing could basically be replaced with a Single and a blockingGet(). At the time I wrote Await.result(...) we hadn't started using Rx from the tests across different modules. Here in the DataStore tests, its doubly okay, though, since the actual source code uses Rx.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418294452", "createdAt": "2020-04-30T21:17:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/SynchronousStorageAdapter.java", "diffHunk": "@@ -285,4 +286,14 @@ public void terminate() throws DataStoreException {\n             asyncDelegate.observe(emitter::onNext, emitter::onError, emitter::onComplete)\n         );\n     }\n+\n+    /**\n+     * Invokes the clear method of the underlying adapter and\n+     * either completes or throws an exception.\n+     */\n+    public void clear() {\n+        Completable.fromObservable(emitter -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3Mzg4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzo1OFrOGO6r3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxNzo1OFrOGO6r3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NDc0OQ==", "bodyText": "2020", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418294749", "createdAt": "2020-04-30T21:17:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3NTk4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxODozNlrOGO6tEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxODozNlrOGO6tEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTA1Nw==", "bodyText": "final", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418295057", "createdAt": "2020-04-30T21:18:36Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY3NzQyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxOTowM1rOGO6t5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxOTowM1rOGO6t5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTI3MQ==", "bodyText": "Drop the outer (,)", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418295271", "createdAt": "2020-04-30T21:19:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY4MjkwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMDo1MFrOGO6xNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowMjozMVrOGQVP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjExOA==", "bodyText": "There's a short-hand for this, Observable#test():\nTestObserver<StorageItemChange.Record> observer = adapter.observe().test();\n\nIt only saves a line there, but it doesn't need to be disposed, which is neat. And it's slightly more expressive of the intention.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418296118", "createdAt": "2020-04-30T21:20:50Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3ODUzMQ==", "bodyText": "Updating this one. I had made the change locally then stashed it and ended up getting lost.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419778531", "createdAt": "2020-05-04T23:02:31Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjExOA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY4NDIxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMToxOVrOGO6yEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMToxOVrOGO6yEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjMzNg==", "bodyText": "nit: date change from. 2019 to 2020", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418296336", "createdAt": "2020-04-30T21:21:19Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY4Njg0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMjoyMlrOGO6zxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1NDowMFrOGQVEEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5Njc3NA==", "bodyText": "Seems like this should be changed to: \"Invoked if not successful\" ?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418296774", "createdAt": "2020-04-30T21:22:22Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -390,6 +390,22 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and deletes the\n+     * SQLite database from device's local storage.\n+     * @param onComplete Invoked if the call is successful.\n+     * @param onError Invoked if an exception occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NTUwNw==", "bodyText": "Yeah...that makes more sense. Updating it.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419775507", "createdAt": "2020-05-04T22:54:00Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -390,6 +390,22 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and deletes the\n+     * SQLite database from device's local storage.\n+     * @param onComplete Invoked if the call is successful.\n+     * @param onError Invoked if an exception occurs.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5Njc3NA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY4OTAyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMzowMVrOGO61BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMzowMVrOGO61BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NzA5Mw==", "bodyText": "Nice this reads really well", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418297093", "createdAt": "2020-04-30T21:23:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY5MDQxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyMzozN1rOGO61_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1MDoyOVrOGQU_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NzM0MQ==", "bodyText": "What happens if you do adapter.query(BlogOwner.class) at this point?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418297341", "createdAt": "2020-04-30T21:23:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NDMyMA==", "bodyText": "Prior to my latest commits, it would just blow up. I've added code to more gracefully reset the local storage adapter after the file is removed.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419774320", "createdAt": "2020-05-04T22:50:29Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NzM0MQ=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY5NDg2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNTowMVrOGO64zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1ODoyMlrOGQVJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODA2MA==", "bodyText": "Remove \"At a high level\"\nIn iOS, we are not making any guarantees on in-memory objects...  We still have some objects still in memory (that have read in configuration) so that customers  do not need to call configure() on amplify again if they want to use Datastore.\nThis comment seems to be duplicated from the \"*behavior.java\" class... I'm not familiar with your code base, but my preference would be to only have it at the interface level.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418298060", "createdAt": "2020-04-30T21:25:01Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "diffHunk": "@@ -186,4 +186,14 @@ Cancelable observe(\n      * @throws DataStoreException if something goes wrong during terminate\n      */\n     void terminate() throws DataStoreException;\n+\n+    /**\n+     * Each implementation of this adapter interface will have its own\n+     * interpretation of what clear means. At a high level, the intent is to destroy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3Njk1Nw==", "bodyText": "I've updated this. We have a little bit of duplication because we have an interface for the plugin as well as an interface for the storage adapter.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419776957", "createdAt": "2020-05-04T22:58:22Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "diffHunk": "@@ -186,4 +186,14 @@ Cancelable observe(\n      * @throws DataStoreException if something goes wrong during terminate\n      */\n     void terminate() throws DataStoreException;\n+\n+    /**\n+     * Each implementation of this adapter interface will have its own\n+     * interpretation of what clear means. At a high level, the intent is to destroy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODA2MA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjY5NjgzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNTo0MVrOGO658A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowNToxNFrOGQVTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODM1Mg==", "bodyText": "Ah, this is the actual // Act part of the test, right? That clear() can be called multiple times without raising hell? I missed it until my second read - can you highlight this via a comment or something?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418298352", "createdAt": "2020-04-30T21:25:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }\n+\n+    /**\n+     * Assert that the database was created. Then call clear and\n+     * assert the file was deleted; attempt to call clear again\n+     * and ensure there are no exceptions thrown.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearHandlesMissingFile() throws DataStoreException {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's subscribed\n+        observer.assertSubscribed();\n+\n+        adapter.clear();\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+\n+        adapter.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3OTQ1OA==", "bodyText": "I modified the test quite a bit in the latest couple of commits. Added a few comments on the assertions.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419779458", "createdAt": "2020-05-04T23:05:14Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }\n+\n+    /**\n+     * Assert that the database was created. Then call clear and\n+     * assert the file was deleted; attempt to call clear again\n+     * and ensure there are no exceptions thrown.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearHandlesMissingFile() throws DataStoreException {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's subscribed\n+        observer.assertSubscribed();\n+\n+        adapter.clear();\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+\n+        adapter.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5ODM1Mg=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwMTM3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToyNzoxOFrOGO68yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowMTowMlrOGQq3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5OTA4MA==", "bodyText": "Maybe a note about how/when this stuff is able to resume, afterwards? What if I have some changes in the outbound mutations queue? Will they be sent to AppSync, still?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418299080", "createdAt": "2020-04-30T21:27:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -390,6 +390,22 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and deletes the\n+     * SQLite database from device's local storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMjY1NQ==", "bodyText": "Updated the comment and made a note to come up with a test to verify this.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r420132655", "createdAt": "2020-05-05T14:01:02Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -390,6 +390,22 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and deletes the\n+     * SQLite database from device's local storage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5OTA4MA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcwOTkyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMDoxNlrOGO7CBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjo1MzozNlrOGQVDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDQyMA==", "bodyText": "For unit tests, I think it is a better test not to share constants between test code and production code.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418300420", "createdAt": "2020-04-30T21:30:16Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwMjE0Mw==", "bodyText": "^ I do agree. I made this change in my own tests probably 1-2 years ago.\nIt's a tradeoff of maintaining two copies of a constant, versus keeping the constant as an implementation detail (private field access, etc.)\nIf the source code version changes, a self-maintained version in test would be able to catch it. But, if you just use the constant, you could have like:\n@VisibleForTesting static final String GOOD_VALUE = \"oopsActuallyBadPsych!\";\n\nIf test still had a hardcoded \"goodValue\" somewhere, it'd catch it.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418402143", "createdAt": "2020-05-01T03:35:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDQyMA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3NTM4Ng==", "bodyText": "Fixing this.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419775386", "createdAt": "2020-05-04T22:53:36Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDQyMA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcxMDUxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMDozMFrOGO7CbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxODoyOVrOGZInxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDUyNQ==", "bodyText": "\ud83d\udc4d Good docs.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418300525", "createdAt": "2020-04-30T21:30:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "diffHunk": "@@ -186,4 +186,14 @@ Cancelable observe(\n      * @throws DataStoreException if something goes wrong during terminate\n      */\n     void terminate() throws DataStoreException;\n+\n+    /**\n+     * Each implementation of this adapter interface will have its own", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODgzNg==", "bodyText": "Agree! These are good docs!", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429008836", "createdAt": "2020-05-22T02:18:29Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/LocalStorageAdapter.java", "diffHunk": "@@ -186,4 +186,14 @@ Cancelable observe(\n      * @throws DataStoreException if something goes wrong during terminate\n      */\n     void terminate() throws DataStoreException;\n+\n+    /**\n+     * Each implementation of this adapter interface will have its own", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDUyNQ=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcxMzQzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMTozMFrOGO7EJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1MToxN1rOGQqZKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDk2Nw==", "bodyText": "is there a way to assert that the success handler gets called?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418300967", "createdAt": "2020-04-30T21:31:30Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyNDk3MQ==", "bodyText": "We created a wrapper class for that we use for testing that basically blocks until either the success handler gets called or bubbles up an exception. So if the call does not throw, we know the success handler was called.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r420124971", "createdAt": "2020-05-05T13:51:17Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMDk2Nw=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcxNDQ2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMTo0M1rOGO7EtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1MzoxMVrOGQqe3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTEwOQ==", "bodyText": "is there a way to make sure that the error handler gets called?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418301109", "createdAt": "2020-04-30T21:31:43Z", "author": {"login": "wooj2"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }\n+\n+    /**\n+     * Assert that the database was created. Then call clear and\n+     * assert the file was deleted; attempt to call clear again\n+     * and ensure there are no exceptions thrown.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearHandlesMissingFile() throws DataStoreException {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's subscribed\n+        observer.assertSubscribed();\n+\n+        adapter.clear();\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+\n+        adapter.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyNjQyOQ==", "bodyText": "See comment above. The adapter is wrapped by a class that blocks the call until it either succeeds or throws.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r420126429", "createdAt": "2020-05-05T13:53:11Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import io.reactivex.observers.TestObserver;\n+\n+import static com.amplifyframework.datastore.storage.sqlite.SQLiteStorageAdapter.DATABASE_NAME;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SQLiteStorageAdapterClearTest {\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange.Record> observer;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = (ApplicationProvider.getApplicationContext());\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        observer = TestObserver.create();\n+        adapter.observe().subscribe(observer);\n+    }\n+\n+    @After\n+    public void teardown() {\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Happy path test: saves a record to the database\n+     * then calls clear and verifies that the database\n+     * file has been deleted.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearDeletesDatabaseFromDisk() throws DataStoreException {\n+        final BlogOwner dummy = BlogOwner.builder()\n+            .name(\"Dummy Blogger\")\n+            .build();\n+\n+        adapter.save(dummy);\n+        List<BlogOwner> query = adapter.query(BlogOwner.class);\n+        assertEquals(1, query.size());\n+        //Check that exactly one event was received by the observer.\n+        observer.assertValueCount(1);\n+\n+        adapter.clear();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        //Assert the observer was terminated during the file removal.\n+        observer.assertTerminated();\n+    }\n+\n+    /**\n+     * Assert that the database was created. Then call clear and\n+     * assert the file was deleted; attempt to call clear again\n+     * and ensure there are no exceptions thrown.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     */\n+    @Test\n+    public void clearHandlesMissingFile() throws DataStoreException {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+        //check that it's subscribed\n+        observer.assertSubscribed();\n+\n+        adapter.clear();\n+        //check that it's not subscribed anymore.\n+        observer.assertNotSubscribed();\n+        assertFalse(context.getDatabasePath(DATABASE_NAME).exists());\n+\n+        adapter.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTEwOQ=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcxNzU0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMjo1NVrOGO7Gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowMToxOVrOGQq4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTYzMQ==", "bodyText": "Maybe, for more clarity, \"Error while trying to clear data from the local DataStore storage\" ?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418301631", "createdAt": "2020-04-30T21:32:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -579,6 +579,25 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            terminate();\n+            sqliteStorageHelper.deleteDatabaseFromDisk();\n+            onComplete.call();\n+        } catch (Exception exception) {\n+            DataStoreException dataStoreException = new DataStoreException(\n+                \"Error while trying to delete database from local storage.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMjg4MA==", "bodyText": "Updated message.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r420132880", "createdAt": "2020-05-05T14:01:19Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -579,6 +579,25 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            terminate();\n+            sqliteStorageHelper.deleteDatabaseFromDisk();\n+            onComplete.call();\n+        } catch (Exception exception) {\n+            DataStoreException dataStoreException = new DataStoreException(\n+                \"Error while trying to delete database from local storage.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMTYzMQ=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyMDQ1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozMzo1NVrOGO7IgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowMjo0MlrOGQq72A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA4MA==", "bodyText": "Let's try to make this exception handling more narrow. Which of these calls are actually expected to throw, and what types of exceptions will they throw?\nCan you do:\ntry {\n    justTheThingsThatThrow();\n} catch (OnePossibleCaseException | AnotherCaseException failureToClear) {\n    // wrap in DataStoreException and re-throw\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418302080", "createdAt": "2020-04-30T21:33:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -579,6 +579,25 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            terminate();\n+            sqliteStorageHelper.deleteDatabaseFromDisk();\n+            onComplete.call();\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzMzg0OA==", "bodyText": "This method has been changes. Take a look at the updated logic and let me know.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r420133848", "createdAt": "2020-05-05T14:02:42Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -579,6 +579,25 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            terminate();\n+            sqliteStorageHelper.deleteDatabaseFromDisk();\n+            onComplete.call();\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMjA4MA=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjcyOTE4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTozNjo1OFrOGO7N5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxMToyNVrOGQVbcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ2MQ==", "bodyText": "Should you call super.close() first, to be safe?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r418303461", "createdAt": "2020-04-30T21:36:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageHelper.java", "diffHunk": "@@ -172,6 +175,13 @@ public synchronized void update(\n         }\n     }\n \n+    /**\n+     * Deletes the SQLite database file from the device's local storage.\n+     */\n+    public void deleteDatabaseFromDisk() {\n+        context.deleteDatabase(getDatabaseName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTQ5MA==", "bodyText": "I actually removed this code. I'm calling the helper's close method from the adapter where I can have better control to restart things", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r419781490", "createdAt": "2020-05-04T23:11:25Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageHelper.java", "diffHunk": "@@ -172,6 +175,13 @@ public synchronized void update(\n         }\n     }\n \n+    /**\n+     * Deletes the SQLite database file from the device's local storage.\n+     */\n+    public void deleteDatabaseFromDisk() {\n+        context.deleteDatabase(getDatabaseName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwMzQ2MQ=="}, "originalCommit": {"oid": "782eb601676c1e94b85718c4a66028784e90a802"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzAxNzYwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjozNzowMFrOGSa5WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODowNTowNlrOGSud5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODIxNg==", "bodyText": "Ah, cool beans. I've never seen or used the FileObserver, before! Good stuff.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421968216", "createdAt": "2020-05-08T06:37:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2.getName());\n+        assertRecordIsNotInDb(blogger1.getName());\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (owner.item() instanceof BlogOwner &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private void assertRecordIsInDb(String name) throws DataStoreException {\n+        List<BlogOwner> blogOwners = adapter.query(BlogOwner.class, BlogOwner.NAME.eq(name));\n+        assertNotNull(blogOwners);\n+        assertEquals(1, blogOwners.size());\n+    }\n+\n+    private void assertRecordIsNotInDb(String name) throws DataStoreException {\n+        List<BlogOwner> blogOwners = adapter.query(BlogOwner.class, BlogOwner.NAME.eq(name));\n+        assertNotNull(blogOwners);\n+        assertEquals(0, blogOwners.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4ODg2OA==", "bodyText": "Yeah...I initially used a method that would return me the created date of the file as an instance of FileTime, but it appears creation date was not available as an attribute in older versions of Android.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r422288868", "createdAt": "2020-05-08T18:05:06Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2.getName());\n+        assertRecordIsNotInDb(blogger1.getName());\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (owner.item() instanceof BlogOwner &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private void assertRecordIsInDb(String name) throws DataStoreException {\n+        List<BlogOwner> blogOwners = adapter.query(BlogOwner.class, BlogOwner.NAME.eq(name));\n+        assertNotNull(blogOwners);\n+        assertEquals(1, blogOwners.size());\n+    }\n+\n+    private void assertRecordIsNotInDb(String name) throws DataStoreException {\n+        List<BlogOwner> blogOwners = adapter.query(BlogOwner.class, BlogOwner.NAME.eq(name));\n+        assertNotNull(blogOwners);\n+        assertEquals(0, blogOwners.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODIxNg=="}, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzAyMjAwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjozODozM1rOGSa75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjozODozM1rOGSa75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODg3MQ==", "bodyText": ":-D", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421968871", "createdAt": "2020-05-08T06:38:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzAyNzYzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0MDoyNlrOGSa-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODowMTowNFrOGSuWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2OTYzNw==", "bodyText": "But how come? Is it necessary?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421969637", "createdAt": "2020-05-08T06:40:26Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4Njk5Mw==", "bodyText": "It's not needed anymore. Before I started using the FileObserver, I was checking the created date of the file. Had to move away from that because creation date attribute is not available in older versions of Android.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r422286993", "createdAt": "2020-05-08T18:01:04Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2OTYzNw=="}, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzA0MjkwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0NTo0NVrOGSbHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0NTo0NVrOGSbHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MTg1MA==", "bodyText": "In theory you could achieve this with:\nassertEquals(blogger1, adapter.query(BlogOwner.class, blogger1.getId()).get(0));\n\nBut that gets kind of long, and loses the DAMP you have.\nMaybe:\nassertRecordIsInDB(BlogOwner.class, blogger1.getId());\n\nTo use the same type of arguments as the storage interface usually do, though?\nprivate <T extends Model> void assertRecordIsInDB(T item) {\n    List<T> results = adapter.query(item.getClass(), item.getId());\n    assertEquals(1, results.size());\n    assertEquals(item, results.get(0));\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421971850", "createdAt": "2020-05-08T06:45:45Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzA0NTk1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0Njo0MlrOGSbJNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0Njo0MlrOGSbJNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MjI3Nw==", "bodyText": "nit: an extra empty", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421972277", "createdAt": "2020-05-08T06:46:42Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2.getName());\n+        assertRecordIsNotInDb(blogger1.getName());\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzA0OTQ3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjo0Nzo1OFrOGSbLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODowMjo0OFrOGSuZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MjgwMA==", "bodyText": "There is also an item.itemClass(), you could do like BlogOwner.class.isAssignableFrom(item.itemClass()) or something like that. (Or, BlogOwner.class.equals(item.itemClass()).)", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r421972800", "createdAt": "2020-05-08T06:47:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2.getName());\n+        assertRecordIsNotInDb(blogger1.getName());\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (owner.item() instanceof BlogOwner &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4Nzc1OA==", "bodyText": "I'm going with BlogOwner.class.isAssignableFrom(item.itemClass()).", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r422287758", "createdAt": "2020-05-08T18:02:48Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1.getName());\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+        //The ensures files are created at least 1 second apart\n+        Thread.sleep(1000);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2.getName());\n+        assertRecordIsNotInDb(blogger1.getName());\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (owner.item() instanceof BlogOwner &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3MjgwMA=="}, "originalCommit": {"oid": "373da7b9f21d7025f1111e51f392b7e1f0615fac"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDE4MDg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreCategoryBehavior.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMzoyNzo0OVrOGWdMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1MDo0MVrOGZaAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDE3Mg==", "bodyText": "Hmm, I might rephrase this for a user reading the JavaDoc to lead with the intent of the underlying implementations. I'd lead with what the behavior should be, it's expected that every implementation would be different given it's an interface.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426200172", "createdAt": "2020-05-16T23:27:49Z", "author": {"login": "jpignata"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreCategoryBehavior.java", "diffHunk": "@@ -225,4 +225,14 @@ void observe(\n             @NonNull Consumer<DataStoreException> onObservationFailure,\n             @NonNull Action onObservationCompleted\n     );\n+\n+    /**\n+     * Every class that implements this behavior will have its own", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MzU3MQ==", "bodyText": "Updated the docs.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429293571", "createdAt": "2020-05-22T14:50:41Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreCategoryBehavior.java", "diffHunk": "@@ -225,4 +225,14 @@ void observe(\n             @NonNull Consumer<DataStoreException> onObservationFailure,\n             @NonNull Action onObservationCompleted\n     );\n+\n+    /**\n+     * Every class that implements this behavior will have its own", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDE3Mg=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDE4MzM4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMzozMzowN1rOGWdNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMzozMzowN1rOGWdNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDQ3NA==", "bodyText": "Does this delete other potential artifacts like journal or other logs? It appears to: https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase#deleteDatabase(java.io.File)", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426200474", "createdAt": "2020-05-16T23:33:07Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +572,35 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        sqliteStorageHelper.close();\n+        databaseConnectionHandle.close();\n+\n+        try {\n+            context.deleteDatabase(DATABASE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDE4NTgzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMzozODowOFrOGWdOug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjoyMDowOFrOGZVHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDc2Mg==", "bodyText": "Still getting my bearings, but I'm a little skeptical about docs like this - not sure they aid in comprehension or pull their weight.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426200762", "createdAt": "2020-05-16T23:38:08Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private <T extends Model> void assertRecordIsInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertEquals(1, results.size());\n+        assertEquals(item, results.get(0));\n+    }\n+\n+    private <T extends Model> void assertRecordIsNotInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertNotNull(results);\n+        assertEquals(0, results.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {\n+        private int createFileEventCount;\n+        private int deleteFileEventCount;\n+        /**\n+         * Equivalent to FileObserver(file, FileObserver.ALL_EVENTS).\n+         *\n+         * @param path Directory to watch\n+         */\n+\n+        @SuppressWarnings(\"deprecation\")\n+        TestFileObserver(@NonNull String path) {\n+            super(path, FileObserver.CREATE | FileObserver.DELETE | FileObserver.DELETE_SELF);\n+\n+            this.deleteFileEventCount = 0;\n+            this.createFileEventCount = 0;\n+        }\n+\n+        /**\n+         * The event handler, which must be implemented by subclasses.\n+         *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzMjcyNA==", "bodyText": "I believe the best practice is not to provide Javadocs for @Override methods, since it will be mostly duplicative of the content of the interface/base class being overriden.\nThe JavadocMethod checkstyle has this a default setting:\n\nJavadoc is not required on a method that is tagged with the @OverRide annotation.\n\nIn a few place in this code base, we have the @inheritDoc Javadoc directive on @Overriden methods.\nA guy on StackOverflow goes on:\n\nI studied this problem during my PhD and found that in general folks will never be aware of the extra information in the overriding version if they are invoking through a supertype.\n\nHoly Cow. Talk about \"Diving Deep!\"", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429032724", "createdAt": "2020-05-22T04:10:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private <T extends Model> void assertRecordIsInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertEquals(1, results.size());\n+        assertEquals(item, results.get(0));\n+    }\n+\n+    private <T extends Model> void assertRecordIsNotInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertNotNull(results);\n+        assertEquals(0, results.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {\n+        private int createFileEventCount;\n+        private int deleteFileEventCount;\n+        /**\n+         * Equivalent to FileObserver(file, FileObserver.ALL_EVENTS).\n+         *\n+         * @param path Directory to watch\n+         */\n+\n+        @SuppressWarnings(\"deprecation\")\n+        TestFileObserver(@NonNull String path) {\n+            super(path, FileObserver.CREATE | FileObserver.DELETE | FileObserver.DELETE_SELF);\n+\n+            this.deleteFileEventCount = 0;\n+            this.createFileEventCount = 0;\n+        }\n+\n+        /**\n+         * The event handler, which must be implemented by subclasses.\n+         *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDc2Mg=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxMzU5Nw==", "bodyText": "I removed the comment in favor of @inheritdoc here.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429213597", "createdAt": "2020-05-22T12:20:08Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private <T extends Model> void assertRecordIsInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertEquals(1, results.size());\n+        assertEquals(item, results.get(0));\n+    }\n+\n+    private <T extends Model> void assertRecordIsNotInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertNotNull(results);\n+        assertEquals(0, results.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {\n+        private int createFileEventCount;\n+        private int deleteFileEventCount;\n+        /**\n+         * Equivalent to FileObserver(file, FileObserver.ALL_EVENTS).\n+         *\n+         * @param path Directory to watch\n+         */\n+\n+        @SuppressWarnings(\"deprecation\")\n+        TestFileObserver(@NonNull String path) {\n+            super(path, FileObserver.CREATE | FileObserver.DELETE | FileObserver.DELETE_SELF);\n+\n+            this.deleteFileEventCount = 0;\n+            this.createFileEventCount = 0;\n+        }\n+\n+        /**\n+         * The event handler, which must be implemented by subclasses.\n+         *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDc2Mg=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDE4NjIwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMzozOTo0NFrOGWdO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NDo0MVrOGZaIyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDgxMw==", "bodyText": "Curious about the conditions under which DELETE is fired versus DELETE_SELF. The docs imply that DELETE is when a directory is monitored and a file within it is deleted.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426200813", "createdAt": "2020-05-16T23:39:44Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private <T extends Model> void assertRecordIsInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertEquals(1, results.size());\n+        assertEquals(item, results.get(0));\n+    }\n+\n+    private <T extends Model> void assertRecordIsNotInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertNotNull(results);\n+        assertEquals(0, results.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {\n+        private int createFileEventCount;\n+        private int deleteFileEventCount;\n+        /**\n+         * Equivalent to FileObserver(file, FileObserver.ALL_EVENTS).\n+         *\n+         * @param path Directory to watch\n+         */\n+\n+        @SuppressWarnings(\"deprecation\")\n+        TestFileObserver(@NonNull String path) {\n+            super(path, FileObserver.CREATE | FileObserver.DELETE | FileObserver.DELETE_SELF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NTgxOQ==", "bodyText": "I wasn't sure what Android's deleteDatabase method would do, so I figured I'd look for either one. It deletes both the database and the journal file as well.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429295819", "createdAt": "2020-05-22T14:54:41Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {\n+                return;\n+            }\n+        }\n+        fail(\"Could not find \" + blogger + \" in event observer.\");\n+    }\n+\n+    private <T extends Model> void assertRecordIsInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertEquals(1, results.size());\n+        assertEquals(item, results.get(0));\n+    }\n+\n+    private <T extends Model> void assertRecordIsNotInDb(T item) throws DataStoreException {\n+        List<? extends Model> results = adapter.query(item.getClass(), Where.id(item.getId()));\n+        assertNotNull(results);\n+        assertEquals(0, results.size());\n+    }\n+\n+    private void assertDbFileExists() {\n+        assertTrue(context.getDatabasePath(DATABASE_NAME).exists());\n+    }\n+\n+    private static final class TestFileObserver extends FileObserver {\n+        private int createFileEventCount;\n+        private int deleteFileEventCount;\n+        /**\n+         * Equivalent to FileObserver(file, FileObserver.ALL_EVENTS).\n+         *\n+         * @param path Directory to watch\n+         */\n+\n+        @SuppressWarnings(\"deprecation\")\n+        TestFileObserver(@NonNull String path) {\n+            super(path, FileObserver.CREATE | FileObserver.DELETE | FileObserver.DELETE_SELF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwMDgxMw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDIzNjQ5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/SynchronousStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTozNjo1OVrOGWdnVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTozNjo1OVrOGWdnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzA2MQ==", "bodyText": "I think we  should be using timeouts on all of these, like blockingAwait(TIMEOUT_MS, TimeUnit.MILLISECONDS), otherwise we might hang a thread permanently if the asyncDelegate doesn't fire back.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426207061", "createdAt": "2020-05-17T01:36:59Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/SynchronousStorageAdapter.java", "diffHunk": "@@ -286,4 +287,16 @@ public void terminate() throws DataStoreException {\n             asyncDelegate.observe(emitter::onNext, emitter::onError, emitter::onComplete)\n         );\n     }\n+\n+    /**\n+     * Invokes the clear method of the underlying adapter and\n+     * either completes or throws an exception.\n+     */\n+    public void clear() {\n+        Completable.fromSingle(single -> {\n+            asyncDelegate.clear(() -> {\n+                single.onSuccess(true);\n+            }, single::onError);\n+        }).blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDIzNjU4OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousDataStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTozNzoxNVrOGWdnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTozNzoxNVrOGWdnYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzA3NA==", "bodyText": "(Same here, I'd add a timeout here.)", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426207074", "createdAt": "2020-05-17T01:37:15Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousDataStore.java", "diffHunk": "@@ -86,6 +88,17 @@ public static SynchronousDataStore delegatingTo(@NonNull DataStoreCategoryBehavi\n         throw new NoSuchElementException(\"No item in DataStore with class = \" + clazz + \" and id = \" + itemId);\n     }\n \n+    /**\n+     * Call the clear method of the underlying DataStore implementation.\n+     */\n+    public void clear() {\n+        Completable.fromSingle(single -> {\n+            asyncDelegate.clear(() -> {\n+                single.onSuccess(true);\n+            }, single::onError);\n+        }).blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0MjY0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1MTo0NlrOGWdqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1MTo0NlrOGWdqZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzg0Ng==", "bodyText": "nit pick -- I'd assign this in the @Before with the rest", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426207846", "createdAt": "2020-05-17T01:51:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0MzQ4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1NDozN1rOGWdq4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzoyMToxOFrOGXgHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzk2OQ==", "bodyText": "Oh, hm. The main value of the test() is just so you can get a TestObserver and then use all of its utility methods.\nBut if all you want to do is grab the Diposable, I wonder if it might be more straight-forward to do just:\ndisposable = adapter.observe().subscribe();", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426207969", "createdAt": "2020-05-17T01:54:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5NjUxOQ==", "bodyText": "Yup...I modified some of the assertions and was able to get rid of that awkward pattern.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427296519", "createdAt": "2020-05-19T13:21:18Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzk2OQ=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0NDY1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1NjoxMFrOGWdrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozMTozOFrOGXgkgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODEwMw==", "bodyText": "Matching on the name feels wrong, should you match on the unique ID?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208103", "createdAt": "2020-05-17T01:56:10Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNDA2Nw==", "bodyText": "I actually switched it to use the model's equals method instead. I wanted to make sure that the object we receive has all of the same fields we passed in. TBH, not sure why I picked just name \ud83e\udd26", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427304067", "createdAt": "2020-05-19T13:31:38Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterClearTest.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import android.os.FileObserver;\n+import android.os.Handler;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+public final class SQLiteStorageAdapterClearTest {\n+    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+\n+    private SynchronousStorageAdapter adapter;\n+    private Context context;\n+    private TestObserver<StorageItemChange<? extends Model>> observer;\n+    private AtomicReference<Disposable> subscriberDisposableRef = new AtomicReference<>();\n+    private TestFileObserver fileObserver;\n+\n+    /**\n+     * Enable strict mode.\n+     */\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    /**\n+     * Setup actions for every test in this class.\n+     */\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        context = ApplicationProvider.getApplicationContext();\n+        adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+        //Set subscriberDisposableRef = <value received from RxJava>.\n+        //Needed so we can make assertions on the state of the subscriber later.\n+        observer = adapter\n+            .observe()\n+            .doOnSubscribe(subscriberDisposableRef::set)\n+            .test();\n+\n+        fileObserver = new TestFileObserver(Objects.requireNonNull(context.getDatabasePath(DATABASE_NAME).getParent()));\n+        fileObserver.startWatching();\n+    }\n+\n+    /**\n+     * Tearing down components created for each test.\n+     */\n+    @After\n+    public void teardown() {\n+        fileObserver.stopWatching();\n+        TestStorageAdapter.cleanup(adapter);\n+    }\n+\n+    /**\n+     * Save a record to the database and verify it was saved.\n+     * Then call clear and verify that the database file is re-created\n+     * and is writable.\n+     * @throws DataStoreException bubbles up exceptions thrown from the adapter\n+     * @throws IOException if it can't ready file creation time\n+     * @throws InterruptedException if something happens when sleeping for 1 second\n+     */\n+    @Test\n+    public void clearDeletesAndRecreatesDatabase() throws DataStoreException, IOException, InterruptedException {\n+        assertDbFileExists();\n+        assertEquals(0, fileObserver.createFileEventCount);\n+        assertEquals(0, fileObserver.deleteFileEventCount);\n+        BlogOwner blogger1 = createBlogger(\"Dummy Blogger Sr.\");\n+        BlogOwner blogger2 = createBlogger(\"Dummy Blogger Jr.\");\n+        //Save a record and check if it's there\n+        adapter.save(blogger1);\n+        assertRecordIsInDb(blogger1);\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+        assertObserverReceivedRecord(blogger1);\n+\n+        adapter.clear();\n+        //Make sure file was deleted and re-created\n+        assertEquals(1, fileObserver.createFileEventCount);\n+        assertEquals(1, fileObserver.deleteFileEventCount);\n+        assertDbFileExists();\n+        //Verify observer is still alive\n+        assertFalse(subscriberDisposableRef.get().isDisposed());\n+\n+        //Make sure the new file is writable\n+        adapter.save(blogger2);\n+        //Check the new record is in the database\n+        //and the old record is not.\n+        assertRecordIsInDb(blogger2);\n+        assertRecordIsNotInDb(blogger1);\n+        assertObserverReceivedRecord(blogger2);\n+        //Terminate the adapter\n+        adapter.terminate();\n+        //Verify observer was disposed.\n+        assertTrue(subscriberDisposableRef.get().isDisposed());\n+    }\n+\n+    private BlogOwner createBlogger(String name) throws DataStoreException {\n+        return BlogOwner.builder()\n+            .name(name)\n+            .build();\n+    }\n+\n+    private void assertObserverReceivedRecord(BlogOwner blogger) {\n+        for (StorageItemChange<? extends Model> owner : observer.values()) {\n+            if (BlogOwner.class.isAssignableFrom(owner.itemClass()) &&\n+                blogger.getName().equals(((BlogOwner) owner.item()).getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODEwMw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0NTEzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1NzoyNlrOGWdrow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozMzoyMlrOGXja9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODE2Mw==", "bodyText": "I think we should add a timeout to this\nMaybe not for this PR, since it was already like this", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208163", "createdAt": "2020-05-17T01:57:26Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -186,11 +186,9 @@ public void configure(\n     @WorkerThread\n     @Override\n     public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n-        }\n-        completable.blockingAwait();\n+        initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MDc3Mg==", "bodyText": "Yup...added a timeout here. I feel like we'll have to be generous here because there's quite a bit of stuff taking place.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427350772", "createdAt": "2020-05-19T14:33:22Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -186,11 +186,9 @@ public void configure(\n     @WorkerThread\n     @Override\n     public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n-        }\n-        completable.blockingAwait();\n+        initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingAwait();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODE2Mw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0NTc5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTo1ODozOVrOGWdr-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNDozNVrOGXje0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODI0OA==", "bodyText": "My initial reaction was \"not here!\", but then after I read the clear(), I remembered that @wooj2 is lazy initializing the orchestrator on iOS. This would be a reasonable place to do the same thing.\nRequest, though -- this method is no longer afterInitialization. Now, it is more like beforeOperation.\nIt's weird for \"after initialization\" to then do.... more initialization. I think we can just solve this with a rename.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208248", "createdAt": "2020-05-17T01:58:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -405,12 +403,39 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and invokes\n+     * the clear method of the underlying storage\n+     * adapter. Any items pending synchronization in the outbound queue will\n+     * be lost. Synchronization processes will be restarted on the\n+     * next interaction with the DataStore.\n+     * @param onComplete Invoked if the call is successful.\n+     * @param onError Invoked if not successful\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        afterInitialization(() -> {\n+            orchestrator.stop();\n+            sqliteStorageAdapter.clear(onComplete, onError);\n+        });\n+    }\n+\n     private void afterInitialization(@NonNull final Runnable runnable) {\n         Completable.fromAction(categoryInitializationsPending::await)\n+            .andThen(initializeOrchestrator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MTc2Mw==", "bodyText": "That makes sense...I renamed it. I was actually browsing through the iOS PR where I saw the very conversation you're referring to.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427351763", "createdAt": "2020-05-19T14:34:35Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -405,12 +403,39 @@ public void observe(\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n     }\n \n+    /**\n+     * Stops all synchronization processes and invokes\n+     * the clear method of the underlying storage\n+     * adapter. Any items pending synchronization in the outbound queue will\n+     * be lost. Synchronization processes will be restarted on the\n+     * next interaction with the DataStore.\n+     * @param onComplete Invoked if the call is successful.\n+     * @param onError Invoked if not successful\n+     */\n+    @Override\n+    public void clear(@NonNull Action onComplete,\n+                      @NonNull Consumer<DataStoreException> onError) {\n+        afterInitialization(() -> {\n+            orchestrator.stop();\n+            sqliteStorageAdapter.clear(onComplete, onError);\n+        });\n+    }\n+\n     private void afterInitialization(@NonNull final Runnable runnable) {\n         Completable.fromAction(categoryInitializationsPending::await)\n+            .andThen(initializeOrchestrator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODI0OA=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0NjU1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjowMDozMVrOGWdsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozOToxMFrOGXjtUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODM0Mw==", "bodyText": "Can we tighted this up at all? SQLSpecialException | SQLOtherSpecialException sqlError) ?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208343", "createdAt": "2020-05-17T02:00:31Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +572,35 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        sqliteStorageHelper.close();\n+        databaseConnectionHandle.close();\n+\n+        try {\n+            context.deleteDatabase(DATABASE_NAME);\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NTQ3NQ==", "bodyText": "Actually I don't need the try/catch here because deleteDatabase doesn't throw. It just returns false as a result. So I'll change this around to check the return value and throw an exception if that value is false", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427355475", "createdAt": "2020-05-19T14:39:10Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +572,35 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        sqliteStorageHelper.close();\n+        databaseConnectionHandle.close();\n+\n+        try {\n+            context.deleteDatabase(DATABASE_NAME);\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODM0Mw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0ODcyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjowNTo0OVrOGWdtWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTowMjo1NlrOGXk38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODYwMw==", "bodyText": "Let's align the naming of all of these to their corresponding start<whatever> methods. Here, this would be come:\nstorageObserver.isObservingStorageChanges()", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208603", "createdAt": "2020-05-17T02:05:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NDU3Ng==", "bodyText": "That makes sense. I modified the names of the 3 methods I'm using during the orchestrator startup.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427374576", "createdAt": "2020-05-19T15:02:56Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODYwMw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0ODkwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjowNjoxOFrOGWdtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTowMzo0NVrOGXk6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODYyNg==", "bodyText": "And this one,\nsubscriptionsProcessor.isSubcribed()\n\nOr\nsubscriptionsProcessor.hasSubscriptions()", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208626", "createdAt": "2020-05-17T02:06:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NTIxNg==", "bodyText": "done", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427375216", "createdAt": "2020-05-19T15:03:45Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODYyNg=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0OTAwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjowNjozOVrOGWdtgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTowMzo1NFrOGXk6-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODY0Mw==", "bodyText": "mutationProcessor.isDrainingMutationOutbox()", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208643", "createdAt": "2020-05-17T02:06:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {\n+                    LOG.debug(\"Starting subscription processor.\");\n+                    subscriptionProcessor.startSubscriptions();\n+                }\n+                syncProcessor.hydrate().blockingAwait();\n+                if (!mutationProcessor.isObserving()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3NTM1Mg==", "bodyText": "done", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427375352", "createdAt": "2020-05-19T15:03:54Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {\n+                    LOG.debug(\"Starting subscription processor.\");\n+                    subscriptionProcessor.startSubscriptions();\n+                }\n+                syncProcessor.hydrate().blockingAwait();\n+                if (!mutationProcessor.isObserving()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODY0Mw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI0OTE1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjowNzoxNVrOGWdtmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToxNzoxNVrOGXliUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODY2Nw==", "bodyText": "How come this one doesn't need an if guard like the others?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208667", "createdAt": "2020-05-17T02:07:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {\n+                    LOG.debug(\"Starting subscription processor.\");\n+                    subscriptionProcessor.startSubscriptions();\n+                }\n+                syncProcessor.hydrate().blockingAwait();\n+                if (!mutationProcessor.isObserving()) {\n+                    LOG.debug(\"Starting mutation processor.\");\n+                    mutationProcessor.startDrainingMutationOutbox();\n+                }\n+                subscriptionProcessor.startDrainingMutationBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NTQyNw==", "bodyText": "That was a miss on my part. I assumed that since I already checked if the subscriptionProcessor was observing changes (line 108), that I didn't need to do the check here. I've added a separate check called isDrainingMutationBuffer", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427385427", "createdAt": "2020-05-19T15:17:15Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {\n+            try {\n+                if (!storageObserver.isObserving()) {\n+                    LOG.debug(\"Starting local storage observer.\");\n+                    storageObserver.startObservingStorageChanges();\n+                }\n+                if (!subscriptionProcessor.isObserving()) {\n+                    LOG.debug(\"Starting subscription processor.\");\n+                    subscriptionProcessor.startSubscriptions();\n+                }\n+                syncProcessor.hydrate().blockingAwait();\n+                if (!mutationProcessor.isObserving()) {\n+                    LOG.debug(\"Starting mutation processor.\");\n+                    mutationProcessor.startDrainingMutationOutbox();\n+                }\n+                subscriptionProcessor.startDrainingMutationBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODY2Nw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1MDUyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoxMDoyN1rOGWduSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1NTozOFrOGXkhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODg0MA==", "bodyText": "Would this be better as just:\nCompletable.create(emitter -> {\n    try {\n        tryToSucceed();\n        emitter.onComplete();\n    } catch (WhateverException whatever) {\n       emitter.onError(whatever);\n    } \n});\n\nfromCallable or fromAction or forRunnable ... one of these factories must do the exception handling for you, I think, too?\nlike,\nCompletable.fromAction(() -> {\n}).doOnError(thrownInsideOfAction -> {\n    // I need to look up if it works like this ...\n});", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208840", "createdAt": "2020-05-17T02:10:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2ODc4OA==", "bodyText": "Yup...I was able to refactor this. Completable.fromAction() makes more sense here since we just want to know if it succeeds of fails", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427368788", "createdAt": "2020-05-19T14:55:38Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -95,22 +98,38 @@ public Orchestrator(\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        return Completable.fromAction(() -> {\n-            storageObserver.startObservingStorageChanges();\n-            subscriptionProcessor.startSubscriptions();\n-            syncProcessor.hydrate().blockingAwait();\n-            mutationProcessor.startDrainingMutationOutbox();\n-            subscriptionProcessor.startDrainingMutationBuffer();\n+    public synchronized Completable start() {\n+        return Completable.fromSingle(single -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODg0MA=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1MTQyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/MutationProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoxMjozM1rOGWdutA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoxMjozM1rOGWdutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwODk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Checks if the mutation processor is listening\n          \n          \n            \n                 * for events.\n          \n          \n            \n                 * @return True if there are listeners. False otherwise.\n          \n          \n            \n                 */\n          \n          \n            \n                boolean isObserving() {\n          \n          \n            \n                    return disposable.size() > 0;\n          \n          \n            \n                }\n          \n          \n            \n                /**\n          \n          \n            \n                 * Checks if the mutation processor is actively observing the mutation outbox.\n          \n          \n            \n                 * @return True if the mutation processor is subscribed the mutation outbox.\n          \n          \n            \n                 */\n          \n          \n            \n                boolean isDrainingMutationOutbox() {\n          \n          \n            \n                    return !disposable.isEmpty();\n          \n          \n            \n                }", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426208948", "createdAt": "2020-05-17T02:12:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/MutationProcessor.java", "diffHunk": "@@ -84,6 +84,15 @@ void startDrainingMutationOutbox() {\n         );\n     }\n \n+    /**\n+     * Checks if the mutation processor is listening\n+     * for events.\n+     * @return True if there are listeners. False otherwise.\n+     */\n+    boolean isObserving() {\n+        return disposable.size() > 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1MjUxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoxNTowN1rOGWdvOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNToyMjo0MVrOGXlynQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTA4Mw==", "bodyText": "L108 was supposed to do this.\n            emitter.setCancellable(cancelable::get);\n\nHowever, I think I found elsewhere, that setCancellable(...) doesn't do what I thought it was supposed to do. There is also emitter.setDispoable(Disposable...), though. I have a factory method elsewhere in the code base that builds a Disposable from our own Cancelable type. There's a note about \"pulling it out into a utility class\". Maybe its time.....", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209083", "createdAt": "2020-05-17T02:15:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -123,6 +125,18 @@ void startSubscriptions() {\n         .onErrorResumeNext(next -> {\n             next.onComplete();\n         })\n+        .doOnDispose(() -> {\n+            // When the observable is disposed, we need to call cancel() on the subscription\n+            // so it can properly dispose of resources if necessary. For the AWS API plugin,\n+            // this means means closing the underlying network connection.\n+            synchronized (cancelable) {\n+                Cancelable subscriptionOperation = cancelable.get();\n+                if (subscriptionOperation != null) {\n+                    LOG.info(\"Terminating subscription operation.\");\n+                    subscriptionOperation.cancel();\n+                }\n+            }\n+        })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4OTU5Nw==", "bodyText": "That was the second option I considered. There's a private asDisposable method in one of the other classes that I was going to use, but decided against refactoring that. That being said, you are correct, maybe it is time.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427389597", "createdAt": "2020-05-19T15:22:41Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -123,6 +125,18 @@ void startSubscriptions() {\n         .onErrorResumeNext(next -> {\n             next.onComplete();\n         })\n+        .doOnDispose(() -> {\n+            // When the observable is disposed, we need to call cancel() on the subscription\n+            // so it can properly dispose of resources if necessary. For the AWS API plugin,\n+            // this means means closing the underlying network connection.\n+            synchronized (cancelable) {\n+                Cancelable subscriptionOperation = cancelable.get();\n+                if (subscriptionOperation != null) {\n+                    LOG.info(\"Terminating subscription operation.\");\n+                    subscriptionOperation.cancel();\n+                }\n+            }\n+        })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTA4Mw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1NDI5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoxOTo1NFrOGWdwEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0Njo1NlrOGXm39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTI5OQ==", "bodyText": "This one is tricker than in the other case, because the SubscriptionProcessor has an intermediate state, where it is buffering content, but is not processing it. So, we should decided which state we mean. From your current implementation, it would match two states:\n\nsubscribed, not processing\nsubscribed, processing under way\n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Checks if the subscription processor is listening\n          \n          \n            \n                 * for events.\n          \n          \n            \n                 * @return true if there are listeners. False otherwise.\n          \n          \n            \n                 */\n          \n          \n            \n                boolean isObserving() {\n          \n          \n            \n                    return disposable.size() > 0;\n          \n          \n            \n                }\n          \n          \n            \n                /**\n          \n          \n            \n                 * Checks if the subscription processor is currently buffering events from the remote AppSync instance.\n          \n          \n            \n                 * @return true if the subscription processor has active subscriptions to AppSync\n          \n          \n            \n                 */\n          \n          \n            \n                boolean isSubscribed() {\n          \n          \n            \n                    return !disposable.isEmpty();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nThe other meaning would also be easy to implement:\n/**\n * Checks if the subscription processor is actively processing events found on its AppSync subscriptions.\n * @return true if the subscription processor is actively processing subscription events\n */\npublic isDrainingEventBuffer() {\n    return disposable.size() == 2;\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209299", "createdAt": "2020-05-17T02:19:54Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -149,6 +163,15 @@ void startDrainingMutationBuffer() {\n         );\n     }\n \n+    /**\n+     * Checks if the subscription processor is listening\n+     * for events.\n+     * @return true if there are listeners. False otherwise.\n+     */\n+    boolean isObserving() {\n+        return disposable.size() > 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNzM0OA==", "bodyText": "I did something along those lines as I was looking at the start method in the orchestrator", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427407348", "createdAt": "2020-05-19T15:46:56Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -149,6 +163,15 @@ void startDrainingMutationBuffer() {\n         );\n     }\n \n+    /**\n+     * Checks if the subscription processor is listening\n+     * for events.\n+     * @return true if there are listeners. False otherwise.\n+     */\n+    boolean isObserving() {\n+        return disposable.size() > 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTI5OQ=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1NDY5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyMDozMVrOGWdwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyMDozMVrOGWdwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTM0Ng==", "bodyText": "0 is already the default for AtomicInteger()", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209346", "createdAt": "2020-05-17T02:20:31Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -74,16 +84,17 @@\n     @Before\n     public void setup() {\n         this.context = getApplicationContext();\n-        modelProvider = spy(SimpleModelProvider.builder()\n-            .version(RandomString.string())\n-            .addModel(Person.class)\n-            .build());\n+        modelProvider = spy(AmplifyCliGeneratedModelProvider.singletonInstance());\n+        subscriptionCancelledCounter = new AtomicInteger(0);\n+        subscriptionStartedCounter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1NjM4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyNDoyMlrOGWdxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0OToyOVrOGXz46A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTU1NA==", "bodyText": "Does this construct work? It looks like you're making assertFoo statements on a different thread, which the jUnit test runner thread would not capture.\nIf you put a fail() inside one these things, does the test runner thread catch it?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209554", "createdAt": "2020-05-17T02:24:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -158,29 +168,117 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         }\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        Completable.fromSingle(single -> { // Save a record to local store\n+            awsDataStorePlugin.save(person1, itemSaved -> {\n+                assertNotNull(itemSaved.item().getId());\n+                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n+                single.onSuccess(true);\n+            }, single::onError);\n+        }).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); // We should only have one result.\n+                    assertEquals(person1, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Clear the local store.\n+                awsDataStorePlugin.clear(() -> {\n+                    // Make sure the remote subscription operations were cancelled\n+                    assertRemoteSubscriptionsCancelled();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Save a new record to local store\n+                awsDataStorePlugin.save(person2, itemSaved -> {\n+                    assertEquals(person2.getLastName(), itemSaved.item().getLastName());\n+                    // Check if the sync process restarted.\n+                    assertRemoteSubscriptionsStarted();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); //we should only have one result.\n+                    assertEquals(person2, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).blockingGet(OPERATION_TIMEOUT_MS, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDU4NA==", "bodyText": "Good call on this one. I decided to use the synchronous adapter which made life a lot easier here.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427620584", "createdAt": "2020-05-19T21:49:29Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -158,29 +168,117 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         }\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        Completable.fromSingle(single -> { // Save a record to local store\n+            awsDataStorePlugin.save(person1, itemSaved -> {\n+                assertNotNull(itemSaved.item().getId());\n+                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n+                single.onSuccess(true);\n+            }, single::onError);\n+        }).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); // We should only have one result.\n+                    assertEquals(person1, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Clear the local store.\n+                awsDataStorePlugin.clear(() -> {\n+                    // Make sure the remote subscription operations were cancelled\n+                    assertRemoteSubscriptionsCancelled();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Save a new record to local store\n+                awsDataStorePlugin.save(person2, itemSaved -> {\n+                    assertEquals(person2.getLastName(), itemSaved.item().getLastName());\n+                    // Check if the sync process restarted.\n+                    assertRemoteSubscriptionsStarted();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); //we should only have one result.\n+                    assertEquals(person2, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).blockingGet(OPERATION_TIMEOUT_MS, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTU1NA=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1NzEzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyNTo0N1rOGWdxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1MDoxM1rOGXz6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTYzOQ==", "bodyText": "Since you ignore the result of the single, can't you just use Completable.create, Completable.fromAction, Completable.fromRunnable, etc?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209639", "createdAt": "2020-05-17T02:25:47Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -158,29 +168,117 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         }\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        Completable.fromSingle(single -> { // Save a record to local store\n+            awsDataStorePlugin.save(person1, itemSaved -> {\n+                assertNotNull(itemSaved.item().getId());\n+                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n+                single.onSuccess(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDkzOA==", "bodyText": "Re-factored the test to use the synchronous test adapter.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427620938", "createdAt": "2020-05-19T21:50:13Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -158,29 +168,117 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         }\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        Completable.fromSingle(single -> { // Save a record to local store\n+            awsDataStorePlugin.save(person1, itemSaved -> {\n+                assertNotNull(itemSaved.item().getId());\n+                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n+                single.onSuccess(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTYzOQ=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1Nzc1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyNzo1NlrOGWdxww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyNzo1NlrOGWdxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTczMQ==", "bodyText": "You could phrase this as,\nfinal int diffTypesOfSubscriptions  = SubscriptionType.values().length;\n\nand then get out of hte business of writing 3, while also clarifying its meaning.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209731", "createdAt": "2020-05-17T02:27:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -158,29 +168,117 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         }\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        Completable.fromSingle(single -> { // Save a record to local store\n+            awsDataStorePlugin.save(person1, itemSaved -> {\n+                assertNotNull(itemSaved.item().getId());\n+                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n+                single.onSuccess(true);\n+            }, single::onError);\n+        }).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); // We should only have one result.\n+                    assertEquals(person1, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Clear the local store.\n+                awsDataStorePlugin.clear(() -> {\n+                    // Make sure the remote subscription operations were cancelled\n+                    assertRemoteSubscriptionsCancelled();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Save a new record to local store\n+                awsDataStorePlugin.save(person2, itemSaved -> {\n+                    assertEquals(person2.getLastName(), itemSaved.item().getLastName());\n+                    // Check if the sync process restarted.\n+                    assertRemoteSubscriptionsStarted();\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).andThen(\n+            Completable.fromSingle(single -> { // Verify the record has been saved\n+                awsDataStorePlugin.query(Person.class, results -> {\n+                    Person actualPerson = results.next();\n+                    assertNotNull(actualPerson);\n+                    assertFalse(results.hasNext()); //we should only have one result.\n+                    assertEquals(person2, actualPerson);\n+                    single.onSuccess(true);\n+                }, single::onError);\n+            })\n+        ).blockingGet(OPERATION_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+\n+        // Verify that the API mutate method was called once for each model saved.\n+        verify(mockApiCategory, times(2)).mutate(Mockito.any(), Mockito.any(), Mockito.any());\n+    }\n+\n+    private void assertRemoteSubscriptionsCancelled() {\n+        // Check that we've had active subscriptions\n+        assertTrue(subscriptionStartedCounter.get() > 0);\n+        // And the number of started and cancelled are the same\n+        assertEquals(subscriptionStartedCounter.get(), subscriptionCancelledCounter.get());\n+    }\n \n-        assertTrue(syncProcessorInvoked);\n+    private void assertRemoteSubscriptionsStarted() {\n+        // For each model, there should be 3 subscriptions setup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1ODE0OnYy", "diffSide": "LEFT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyOTozNFrOGWdx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjoyOTozNFrOGWdx_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTc4OA==", "bodyText": "Oh dang, looks like this wasn't doin' much before huh lol", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209788", "createdAt": "2020-05-17T02:29:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -194,16 +292,26 @@ private static ApiCategory mockApiCategoryWithGraphQlApi() throws AmplifyExcepti\n         doAnswer(invocation -> {\n             int indexOfResponseConsumer = 1;\n             Consumer<GraphQLResponse<String>> onResponse = invocation.getArgument(indexOfResponseConsumer);\n-            onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n+            // Calling onResponse with an invalid input generates an error in MutationOutbox.hasPendingMutation.\n+            // Disabling it for now since it does not affect the assertions we need for this test.\n+            // onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n             return null;\n         }).when(mockApiPlugin).mutate(any(GraphQLRequest.class), any(Consumer.class), any(Consumer.class));\n \n         // Make believe that subscriptions return response immediately\n         doAnswer(invocation -> {\n-            int indexOfStartConsumer = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDI1OTA1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMjozMDo1M1rOGWdyaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjo1Mjo1N1rOGX1X5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTg5Nw==", "bodyText": "Oh fuck, a doAnswer inside of a doAnswer, Head just exploded.\nThe situation with the Cancelable return type and String \"on started\" token is such a nightmare, isn't it? On a brighter day, maybe we could cleanup that API signature so we don't have to get so clever about managing/mocking/testing it.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r426209897", "createdAt": "2020-05-17T02:30:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -194,16 +292,26 @@ private static ApiCategory mockApiCategoryWithGraphQlApi() throws AmplifyExcepti\n         doAnswer(invocation -> {\n             int indexOfResponseConsumer = 1;\n             Consumer<GraphQLResponse<String>> onResponse = invocation.getArgument(indexOfResponseConsumer);\n-            onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n+            // Calling onResponse with an invalid input generates an error in MutationOutbox.hasPendingMutation.\n+            // Disabling it for now since it does not affect the assertions we need for this test.\n+            // onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n             return null;\n         }).when(mockApiPlugin).mutate(any(GraphQLRequest.class), any(Consumer.class), any(Consumer.class));\n \n         // Make believe that subscriptions return response immediately\n         doAnswer(invocation -> {\n-            int indexOfStartConsumer = 2;\n-            Consumer<String> onResponse = invocation.getArgument(indexOfStartConsumer);\n-            onResponse.accept(RandomString.string());\n-            return null;\n+            int indexOfStartConsumer = 1;\n+            Consumer<String> onStart = invocation.getArgument(indexOfStartConsumer);\n+            GraphQLOperation<?> mockOperation = mock(GraphQLOperation.class);\n+            doAnswer(opAnswer -> {\n+                this.subscriptionCancelledCounter.incrementAndGet();\n+                return null;\n+            }).when(mockOperation).cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NDkwMQ==", "bodyText": "Exactly... \ud83e\udd2f", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r427644901", "createdAt": "2020-05-19T22:52:57Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -194,16 +292,26 @@ private static ApiCategory mockApiCategoryWithGraphQlApi() throws AmplifyExcepti\n         doAnswer(invocation -> {\n             int indexOfResponseConsumer = 1;\n             Consumer<GraphQLResponse<String>> onResponse = invocation.getArgument(indexOfResponseConsumer);\n-            onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n+            // Calling onResponse with an invalid input generates an error in MutationOutbox.hasPendingMutation.\n+            // Disabling it for now since it does not affect the assertions we need for this test.\n+            // onResponse.accept(new GraphQLResponse<>(\"{}\", Collections.emptyList()));\n             return null;\n         }).when(mockApiPlugin).mutate(any(GraphQLRequest.class), any(Consumer.class), any(Consumer.class));\n \n         // Make believe that subscriptions return response immediately\n         doAnswer(invocation -> {\n-            int indexOfStartConsumer = 2;\n-            Consumer<String> onResponse = invocation.getArgument(indexOfStartConsumer);\n-            onResponse.accept(RandomString.string());\n-            return null;\n+            int indexOfStartConsumer = 1;\n+            Consumer<String> onStart = invocation.getArgument(indexOfStartConsumer);\n+            GraphQLOperation<?> mockOperation = mock(GraphQLOperation.class);\n+            doAnswer(opAnswer -> {\n+                this.subscriptionCancelledCounter.incrementAndGet();\n+                return null;\n+            }).when(mockOperation).cancel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTg5Nw=="}, "originalCommit": {"oid": "9f204d0a623fbc9c526bfe042e47a55105595316"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg0NDk2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxMzo0OVrOGZIj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxMzo0OVrOGZIj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwNzg1OQ==", "bodyText": "Don't we need to explicitly shut down the threadpool?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429007859", "createdAt": "2020-05-22T02:13:49Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,40 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1MDM0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxNzo1MFrOGZInSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxNzo1MFrOGZInSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODcxMg==", "bodyText": "I really like the use of finite state machines in the iOS codebase.. we should nick some of that.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429008712", "createdAt": "2020-05-22T02:17:50Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1MTk1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxOTowNFrOGZIoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1OTo1NlrOGZYKRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODk1Mg==", "bodyText": "Was it interrupted or just didn't stop within some timeframe?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429008952", "createdAt": "2020-05-22T02:19:04Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,40 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS);\n+            LOG.debug(\"Storage adapter thread pool shutdown.\");\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Storage adapter thread pool was interrupted during shutdown.\", exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MzQzMA==", "bodyText": "If I'm interpreting the docs correctly, this would only be thrown if it's interrupted. On a timeout, the awaitTermination method just returns false.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429263430", "createdAt": "2020-05-22T13:59:56Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,40 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS);\n+            LOG.debug(\"Storage adapter thread pool shutdown.\");\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Storage adapter thread pool was interrupted during shutdown.\", exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODk1Mg=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1MzE3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoxOTo1NVrOGZIo8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDowNDoyOVrOGZYVgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTEzNw==", "bodyText": "maybe move the string to a new line instead of concatenating?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429009137", "createdAt": "2020-05-22T02:19:55Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,40 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS);\n+            LOG.debug(\"Storage adapter thread pool shutdown.\");\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Storage adapter thread pool was interrupted during shutdown.\", exception);\n+        }\n+        sqliteStorageHelper.close();\n+        databaseConnectionHandle.close();\n+        LOG.debug(\"Clearing DataStore.\");\n+        if (!context.deleteDatabase(DATABASE_NAME)) {\n+            DataStoreException dataStoreException = new DataStoreException(\n+                \"Error while trying to clear data from the local DataStore storage.\",\n+                \"See attached exception for details.\");\n+            onError.accept(dataStoreException);\n+        }\n+        LOG.debug(\"DataStore cleared. Re-initializing storage adapter.\");\n+\n+        //Re-initialize the adapter.\n+        initialize(context, schemaList -> {\n+            onComplete.call();\n+        }, exception -> {\n+                onError.accept(new DataStoreException(\"Error occurred whilte trying to re-initialize \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NjMwNQ==", "bodyText": "Done.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429266305", "createdAt": "2020-05-22T14:04:29Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,40 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS);\n+            LOG.debug(\"Storage adapter thread pool shutdown.\");\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Storage adapter thread pool was interrupted during shutdown.\", exception);\n+        }\n+        sqliteStorageHelper.close();\n+        databaseConnectionHandle.close();\n+        LOG.debug(\"Clearing DataStore.\");\n+        if (!context.deleteDatabase(DATABASE_NAME)) {\n+            DataStoreException dataStoreException = new DataStoreException(\n+                \"Error while trying to clear data from the local DataStore storage.\",\n+                \"See attached exception for details.\");\n+            onError.accept(dataStoreException);\n+        }\n+        LOG.debug(\"DataStore cleared. Re-initializing storage adapter.\");\n+\n+        //Re-initialize the adapter.\n+        initialize(context, schemaList -> {\n+            onComplete.call();\n+        }, exception -> {\n+                onError.accept(new DataStoreException(\"Error occurred whilte trying to re-initialize \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTEzNw=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1NTAwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyMDo1OVrOGZIqAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyMDo1OVrOGZIqAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTQwOQ==", "bodyText": "Can you use the convenience method you created with this body above?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429009409", "createdAt": "2020-05-22T02:20:59Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {\n+            LOG.debug(\"Starting the orchestrator.\");\n+            status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING);\n+            initializationCompletable = mutationOutbox.load()\n+                .andThen(\n+                    Completable.fromAction(() -> {\n+                        if (!storageObserver.isObservingStorageChanges()) {\n+                            LOG.debug(\"Starting local storage observer.\");\n+                            storageObserver.startObservingStorageChanges();\n+                        }\n+                        if (!subscriptionProcessor.isObservingSubscriptionEvents()) {\n+                            LOG.debug(\"Starting subscription processor.\");\n+                            subscriptionProcessor.startSubscriptions();\n+                        }\n+                        syncProcessor.hydrate().blockingAwait();\n+                        if (!mutationProcessor.isDrainingMutationOutbox()) {\n+                            LOG.debug(\"Starting mutation processor.\");\n+                            mutationProcessor.startDrainingMutationOutbox();\n+                        }\n+                        if (!subscriptionProcessor.isDrainingMutationBuffer()) {\n+                            LOG.debug(\"Starting draining mutation buffer.\");\n+                            subscriptionProcessor.startDrainingMutationBuffer();\n+                        }\n+                        status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                    })\n+                );\n+        }\n+        return initializationCompletable;\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n     public void stop() {\n-        LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-        storageObserver.stopObservingStorageChanges();\n-        subscriptionProcessor.stopAllSubscriptionActivity();\n-        mutationProcessor.stopDrainingMutationOutbox();\n+        if (OrchestratorStatus.STARTED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1NjczOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyMjoyOFrOGZIrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1NDozMVrOGZX9RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTcxNA==", "bodyText": "Nit: extra line?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429009714", "createdAt": "2020-05-22T02:22:28Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+\n+/**\n+ * Utility class for functions used throughout DataStore.\n+ */\n+public final class AsyncUtils {\n+    private AsyncUtils() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MDEwMQ==", "bodyText": "Fixed.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429260101", "createdAt": "2020-05-22T13:54:31Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+\n+/**\n+ * Utility class for functions used throughout DataStore.\n+ */\n+public final class AsyncUtils {\n+    private AsyncUtils() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTcxNA=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTg1NzkyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMjoyMzoxOFrOGZIr7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzozNjo0M1rOGZXVXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTkwMw==", "bodyText": "Nit: maybe newline instead of concat?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429009903", "createdAt": "2020-05-22T02:23:18Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -185,12 +189,16 @@ public void configure(\n \n     @WorkerThread\n     @Override\n-    public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n+    public void initialize(@NonNull Context context) throws AmplifyException {\n+        Throwable initError = initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingGet(PLUGIN_INIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        if (initError != null) {\n+            throw new AmplifyException(\"Failed to initialize the local storage \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMTE0NA==", "bodyText": "Why is this more likely to happen after clear?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429011144", "createdAt": "2020-05-22T02:28:49Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -185,12 +189,16 @@ public void configure(\n \n     @WorkerThread\n     @Override\n-    public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n+    public void initialize(@NonNull Context context) throws AmplifyException {\n+        Throwable initError = initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingGet(PLUGIN_INIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        if (initError != null) {\n+            throw new AmplifyException(\"Failed to initialize the local storage \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTkwMw=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNDU2NQ==", "bodyText": "@jpignata I don't think its more likely. I have this code in one of my PRs, too, though. Probably, we could carve this out into its own targeted PR. (Not saying we should, at this point, just that it would be possible.)\n@rjuliano and I have been talking offline about reducing/removing all of our dangerous blockPermanently() type calls, which can hose threads. We only have a few such calls in source code, but there are quite a few in the tests, right now. We should start whittling away at them by providing some sane timeouts, so that nothing is wedged with permanence.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429034565", "createdAt": "2020-05-22T04:18:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -185,12 +189,16 @@ public void configure(\n \n     @WorkerThread\n     @Override\n-    public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n+    public void initialize(@NonNull Context context) throws AmplifyException {\n+        Throwable initError = initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingGet(PLUGIN_INIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        if (initError != null) {\n+            throw new AmplifyException(\"Failed to initialize the local storage \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTkwMw=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyOTA0Mw==", "bodyText": "Nit: maybe newline instead of concat?\n\nFixed this one.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429229043", "createdAt": "2020-05-22T12:54:57Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -185,12 +189,16 @@ public void configure(\n \n     @WorkerThread\n     @Override\n-    public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n+    public void initialize(@NonNull Context context) throws AmplifyException {\n+        Throwable initError = initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingGet(PLUGIN_INIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        if (initError != null) {\n+            throw new AmplifyException(\"Failed to initialize the local storage \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTkwMw=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI0OTg4Nw==", "bodyText": "Why is this more likely to happen after clear?\n\nNot sure that it's any more likely, but it also helps when some part of the initialization process can't complete for whatever reason (network connectivity, or something along those lines)", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429249887", "createdAt": "2020-05-22T13:36:43Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -185,12 +189,16 @@ public void configure(\n \n     @WorkerThread\n     @Override\n-    public void initialize(@NonNull Context context) {\n-        Completable completable = initializeStorageAdapter(context);\n-        if (!api.getPlugins().isEmpty()) {\n-            completable = completable.andThen(orchestrator.start());\n+    public void initialize(@NonNull Context context) throws AmplifyException {\n+        Throwable initError = initializeStorageAdapter(context)\n+            .andThen(initializeOrchestrator())\n+            .blockingGet(PLUGIN_INIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        if (initError != null) {\n+            throw new AmplifyException(\"Failed to initialize the local storage \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTkwMw=="}, "originalCommit": {"oid": "59fd65a1499fe027231fc0da1213c04cd91fa320"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAxOTA4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDoyMjowNVrOGZKO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0NToxM1rOGZXobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNTIzNw==", "bodyText": "Naming --\nI've been working hard for us to avoid having any FooUtils classes (by name).\nAsyncUtils could end up being abused in the future, and have all kinds of executors, schedulers, etc., in it., over time.\nWould it make sense to call this class Disposables?  Rx does have a class by this same name.\nDisposable disposable = Disposables.fromCancelable(cancelable);\n\nAlternately, we could call it:\nDisposable disposable = Cancelables.asDisposable(cancelable);", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429035237", "createdAt": "2020-05-22T04:22:05Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+\n+/**\n+ * Utility class for functions used throughout DataStore.\n+ */\n+public final class AsyncUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NDc2NQ==", "bodyText": "I went with Disposables.fromCancelable", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429254765", "createdAt": "2020-05-22T13:45:13Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AsyncUtils.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.disposables.Disposable;\n+\n+/**\n+ * Utility class for functions used throughout DataStore.\n+ */\n+public final class AsyncUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNTIzNw=="}, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAyMTA3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDoyMzozM1rOGZKQGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1NjoyM1rOGZYBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNTU0Nw==", "bodyText": "This solved a bug, right? This must have been very tricky to find. Nice work.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429035547", "createdAt": "2020-05-22T04:23:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,43 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.shutdown();\n+            if (!threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                threadPool.shutdownNow();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MTI0NQ==", "bodyText": "Yeah...took care of some flaky behavior that manifested itself when trying to re-initialize the adapter.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429261245", "createdAt": "2020-05-22T13:56:23Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -568,6 +573,43 @@ public synchronized void terminate() throws DataStoreException {\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public synchronized void clear(@NonNull Action onComplete,\n+                                   @NonNull Consumer<DataStoreException> onError) {\n+        try {\n+            LOG.debug(\"Shutting down thread pool for the storage adapter.\");\n+            threadPool.shutdown();\n+            if (!threadPool.awaitTermination(THREAD_POOL_TERMINATE_TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                threadPool.shutdownNow();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNTU0Nw=="}, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAyNjc0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDoyNzo0M1rOGZKTsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoxNzo1N1rOGZYzSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNjQ2Ng==", "bodyText": "To help with the indentation / nesting, can we invert this?\nif (!OrchestratorStatus.STOPPED.equals(status.get())) {\n    return initializationCompletable;\n}\n// Save 4 cols, here ...\n\nYou can save another eight more cols with the andThen( on L120, too, by:\ninitializationCompletable = mutationOutbox.load().andThen(Completable.fromAction(() -> {\n    // 8 left of where it was \n}", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429036466", "createdAt": "2020-05-22T04:27:43Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MzkyOA==", "bodyText": "Heck yeah...that's much better.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429273928", "createdAt": "2020-05-22T14:17:57Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNjQ2Ng=="}, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAyODkwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDoyOTozM1rOGZKVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozNToxMlrOGZZb7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNjgxNw==", "bodyText": "True 'nuff, but when it is stopping, what does that mean for the system -- request to start() will be denied? What are the valid input and output states, from this step?\nSame Q for all", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429036817", "createdAt": "2020-05-22T04:29:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {\n+            LOG.debug(\"Starting the orchestrator.\");\n+            status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING);\n+            initializationCompletable = mutationOutbox.load()\n+                .andThen(\n+                    Completable.fromAction(() -> {\n+                        if (!storageObserver.isObservingStorageChanges()) {\n+                            LOG.debug(\"Starting local storage observer.\");\n+                            storageObserver.startObservingStorageChanges();\n+                        }\n+                        if (!subscriptionProcessor.isObservingSubscriptionEvents()) {\n+                            LOG.debug(\"Starting subscription processor.\");\n+                            subscriptionProcessor.startSubscriptions();\n+                        }\n+                        syncProcessor.hydrate().blockingAwait();\n+                        if (!mutationProcessor.isDrainingMutationOutbox()) {\n+                            LOG.debug(\"Starting mutation processor.\");\n+                            mutationProcessor.startDrainingMutationOutbox();\n+                        }\n+                        if (!subscriptionProcessor.isDrainingMutationBuffer()) {\n+                            LOG.debug(\"Starting draining mutation buffer.\");\n+                            subscriptionProcessor.startDrainingMutationBuffer();\n+                        }\n+                        status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                    })\n+                );\n+        }\n+        return initializationCompletable;\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n     public void stop() {\n-        LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-        storageObserver.stopObservingStorageChanges();\n-        subscriptionProcessor.stopAllSubscriptionActivity();\n-        mutationProcessor.stopDrainingMutationOutbox();\n+        if (OrchestratorStatus.STARTED.equals(status.get())) {\n+            LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n+            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n+            subscriptionProcessor.stopAllSubscriptionActivity();\n+            storageObserver.stopObservingStorageChanges();\n+            mutationProcessor.stopDrainingMutationOutbox();\n+            status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n+            LOG.debug(\"Stopped remote synchronization.\");\n+        }\n+\n+    }\n+\n+    /**\n+     * Represents possible status of the orchestrator.\n+     */\n+    enum OrchestratorStatus {\n+        /**\n+         * The orchestrator is stopping.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4NDMzMw==", "bodyText": "I went through and updated the comments for each of those to be a bit more descriptive.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429284333", "createdAt": "2020-05-22T14:35:12Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -94,32 +97,88 @@ public Orchestrator(\n         this.storageObserver = new StorageObserver(localStorageAdapter, mutationOutbox);\n     }\n \n+    /**\n+     * Checks whether the orchestrator is {@link OrchestratorStatus#STARTED}.\n+     * @return True if the orchestrator is started, false otherwise.\n+     */\n+    public boolean isStarted() {\n+        return OrchestratorStatus.STARTED.equals(status.get());\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n     public Completable start() {\n-        return mutationOutbox.load()\n-            .andThen(Completable.fromAction(() -> {\n-                storageObserver.startObservingStorageChanges();\n-                subscriptionProcessor.startSubscriptions();\n-                syncProcessor.hydrate().blockingAwait();\n-                mutationProcessor.startDrainingMutationOutbox();\n-                subscriptionProcessor.startDrainingMutationBuffer();\n-                LOG.info(\"Cloud synchronization is now fully active.\");\n-            }));\n+        // Only start if it's stopped.\n+        if (OrchestratorStatus.STOPPED.equals(status.get())) {\n+            LOG.debug(\"Starting the orchestrator.\");\n+            status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING);\n+            initializationCompletable = mutationOutbox.load()\n+                .andThen(\n+                    Completable.fromAction(() -> {\n+                        if (!storageObserver.isObservingStorageChanges()) {\n+                            LOG.debug(\"Starting local storage observer.\");\n+                            storageObserver.startObservingStorageChanges();\n+                        }\n+                        if (!subscriptionProcessor.isObservingSubscriptionEvents()) {\n+                            LOG.debug(\"Starting subscription processor.\");\n+                            subscriptionProcessor.startSubscriptions();\n+                        }\n+                        syncProcessor.hydrate().blockingAwait();\n+                        if (!mutationProcessor.isDrainingMutationOutbox()) {\n+                            LOG.debug(\"Starting mutation processor.\");\n+                            mutationProcessor.startDrainingMutationOutbox();\n+                        }\n+                        if (!subscriptionProcessor.isDrainingMutationBuffer()) {\n+                            LOG.debug(\"Starting draining mutation buffer.\");\n+                            subscriptionProcessor.startDrainingMutationBuffer();\n+                        }\n+                        status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                    })\n+                );\n+        }\n+        return initializationCompletable;\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n     public void stop() {\n-        LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-        storageObserver.stopObservingStorageChanges();\n-        subscriptionProcessor.stopAllSubscriptionActivity();\n-        mutationProcessor.stopDrainingMutationOutbox();\n+        if (OrchestratorStatus.STARTED.equals(status.get())) {\n+            LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n+            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n+            subscriptionProcessor.stopAllSubscriptionActivity();\n+            storageObserver.stopObservingStorageChanges();\n+            mutationProcessor.stopDrainingMutationOutbox();\n+            status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n+            LOG.debug(\"Stopped remote synchronization.\");\n+        }\n+\n+    }\n+\n+    /**\n+     * Represents possible status of the orchestrator.\n+     */\n+    enum OrchestratorStatus {\n+        /**\n+         * The orchestrator is stopping.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNjgxNw=="}, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzMDE4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozMDozMVrOGZKV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozNTozNlrOGZZcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzAyOA==", "bodyText": "I think this probably solves a bug I've been seeing lately. Thanks!", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429037028", "createdAt": "2020-05-22T04:30:31Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -114,15 +113,19 @@ void startSubscriptions() {\n         return Observable.<GraphQLResponse<ModelWithMetadata<T>>>create(emitter -> {\n             CountDownLatch latch = new CountDownLatch(1);\n             SubscriptionMethod method = subscriptionMethodFor(appSync, subscriptionType);\n-            AtomicReference<Cancelable> cancelable = new AtomicReference<>(NoOpCancelable::new);\n-            emitter.setCancellable(cancelable::get);\n-            cancelable.set(method.subscribe(\n+            Cancelable subscriptionCancelable = method.subscribe(\n                 clazz,\n                 token -> latch.countDown(),\n                 emitter::onNext,\n                 emitter::onError,\n                 emitter::onComplete\n-            ));\n+            );\n+            // When the observable is disposed, we need to call cancel() on the subscription\n+            // so it can properly dispose of resources if necessary. For the AWS API plugin,\n+            // this means means closing the underlying network connection.\n+            emitter.setDisposable(\n+                AsyncUtils.asDisposable(subscriptionCancelable)\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4NDU0Mw==", "bodyText": "Yeah...it's a pesky one too.", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429284543", "createdAt": "2020-05-22T14:35:36Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -114,15 +113,19 @@ void startSubscriptions() {\n         return Observable.<GraphQLResponse<ModelWithMetadata<T>>>create(emitter -> {\n             CountDownLatch latch = new CountDownLatch(1);\n             SubscriptionMethod method = subscriptionMethodFor(appSync, subscriptionType);\n-            AtomicReference<Cancelable> cancelable = new AtomicReference<>(NoOpCancelable::new);\n-            emitter.setCancellable(cancelable::get);\n-            cancelable.set(method.subscribe(\n+            Cancelable subscriptionCancelable = method.subscribe(\n                 clazz,\n                 token -> latch.countDown(),\n                 emitter::onNext,\n                 emitter::onError,\n                 emitter::onComplete\n-            ));\n+            );\n+            // When the observable is disposed, we need to call cancel() on the subscription\n+            // so it can properly dispose of resources if necessary. For the AWS API plugin,\n+            // this means means closing the underlying network connection.\n+            emitter.setDisposable(\n+                AsyncUtils.asDisposable(subscriptionCancelable)\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzAyOA=="}, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzMjYzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozMjoyNlrOGZKXaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozMjoyNlrOGZKXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzQxNw==", "bodyText": "Can you use the one on the org.mockito.Mockito facade, instead? org.mockito.Mockito.argThat?", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429037417", "createdAt": "2020-05-22T04:32:26Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -21,49 +21,60 @@\n import com.amplifyframework.api.ApiCategory;\n import com.amplifyframework.api.ApiException;\n import com.amplifyframework.api.ApiPlugin;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n import com.amplifyframework.api.graphql.GraphQLRequest;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n import com.amplifyframework.core.Action;\n import com.amplifyframework.core.Amplify;\n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.core.InitializationStatus;\n+import com.amplifyframework.core.category.CategoryType;\n import com.amplifyframework.core.model.ModelProvider;\n import com.amplifyframework.datastore.model.SimpleModelProvider;\n import com.amplifyframework.hub.HubChannel;\n import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.testmodels.personcar.AmplifyCliGeneratedModelProvider;\n import com.amplifyframework.testmodels.personcar.Person;\n import com.amplifyframework.testutils.random.RandomString;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+import com.amplifyframework.util.Time;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatcher;\n import org.robolectric.RobolectricTestRunner;\n \n import java.util.Collections;\n-import java.util.concurrent.TimeUnit;\n-\n-import io.reactivex.Completable;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.argThat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzMzMxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozMzowMlrOGZKX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozMzowMlrOGZKX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzUzMA==", "bodyText": "= 1_000 /* ms */, or  = TimeUnit.SECONDS.toMillis(1);", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429037530", "createdAt": "2020-05-22T04:33:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -21,49 +21,60 @@\n import com.amplifyframework.api.ApiCategory;\n import com.amplifyframework.api.ApiException;\n import com.amplifyframework.api.ApiPlugin;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n import com.amplifyframework.api.graphql.GraphQLRequest;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n import com.amplifyframework.core.Action;\n import com.amplifyframework.core.Amplify;\n import com.amplifyframework.core.Consumer;\n import com.amplifyframework.core.InitializationStatus;\n+import com.amplifyframework.core.category.CategoryType;\n import com.amplifyframework.core.model.ModelProvider;\n import com.amplifyframework.datastore.model.SimpleModelProvider;\n import com.amplifyframework.hub.HubChannel;\n import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.testmodels.personcar.AmplifyCliGeneratedModelProvider;\n import com.amplifyframework.testmodels.personcar.Person;\n import com.amplifyframework.testutils.random.RandomString;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+import com.amplifyframework.util.Time;\n \n import org.json.JSONException;\n import org.json.JSONObject;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatcher;\n import org.robolectric.RobolectricTestRunner;\n \n import java.util.Collections;\n-import java.util.concurrent.TimeUnit;\n-\n-import io.reactivex.Completable;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.Mockito.any;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.mockingDetails;\n import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @RunWith(RobolectricTestRunner.class)\n public final class AWSDataStorePluginTest {\n-    private static final long OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(1);\n+    private static final String MOCK_API_PLUGIN_NAME = \"MockApiPlugin\";\n+    private static final int ASSERTION_TIMEOUT_MS = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjAzNDk0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNDo0NFrOGZKY-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDozNDo0NFrOGZKY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzgxNg==", "bodyText": "Oooh! I've never see this before. Nice find: timeout(value).atLeastOnce()", "url": "https://github.com/aws-amplify/amplify-android/pull/416#discussion_r429037816", "createdAt": "2020-05-22T04:34:44Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -127,60 +137,144 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n         JSONObject dataStorePluginJson = new JSONObject()\n             .put(\"syncIntervalInMinutes\", 60);\n         AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        SynchronousDataStore synchronousDataStore = SynchronousDataStore.delegatingTo(awsDataStorePlugin);\n         awsDataStorePlugin.configure(dataStorePluginJson, context);\n         awsDataStorePlugin.initialize(context);\n \n         // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n         Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n \n         Person person1 = createPerson(\"Test\", \"Dummy I\");\n-        Throwable exception = Completable.fromSingle(single -> { // Save a record to local store\n-            awsDataStorePlugin.save(person1, itemSaved -> {\n-                assertNotNull(itemSaved.item().getId());\n-                assertEquals(person1.getLastName(), itemSaved.item().getLastName());\n-                single.onSuccess(true);\n-            }, single::onError);\n-        }).andThen(\n-            Completable.fromSingle(single -> { // Verify the record has been saved\n-                awsDataStorePlugin.query(Person.class, results -> {\n-                    Person actualPerson = results.next();\n-                    assertNotNull(actualPerson);\n-                    assertFalse(results.hasNext()); // We should only have one result.\n-                    assertEquals(person1, actualPerson);\n-                    single.onSuccess(true);\n-                }, single::onError);\n-            })\n-        ).doOnError(error -> {\n-            fail(error.getMessage());\n-        }).blockingGet(OPERATION_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n-        if (exception != null) {\n-            throw new AmplifyException(\"Unexpected exception.\", exception, \"Look at the stacktrace.\");\n-        }\n+        synchronousDataStore.save(person1);\n+        assertNotNull(person1.getId());\n+        Person person1FromDb = synchronousDataStore.get(Person.class, person1.getId());\n+        assertEquals(person1, person1FromDb);\n     }\n \n-    private void assertSyncProcessorStarted() {\n-        boolean syncProcessorInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .anyMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n+    /**\n+     * Verify that when the clear method is called, the following happens\n+     * - All remote synchronization processes are stopped\n+     * - The database is deleted.\n+     * - On the next interaction with the DataStore, the synchronization processes are restarted.\n+     * @throws JSONException on failure to arrange plugin config\n+     * @throws AmplifyException on failure to arrange API plugin via Amplify facade\n+     */\n+    @Test\n+    public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+        ApiCategory mockApiCategory = mockApiCategoryWithGraphQlApi();\n+        ApiPlugin<?> mockApiPlugin = mockApiCategory.getPlugin(MOCK_API_PLUGIN_NAME);\n+        JSONObject dataStorePluginJson = new JSONObject()\n+            .put(\"syncIntervalInMinutes\", 60);\n+        AWSDataStorePlugin awsDataStorePlugin = new AWSDataStorePlugin(modelProvider, mockApiCategory);\n+        SynchronousDataStore synchronousDataStore = SynchronousDataStore.delegatingTo(awsDataStorePlugin);\n+        awsDataStorePlugin.configure(dataStorePluginJson, context);\n+        awsDataStorePlugin.initialize(context);\n+\n+        // Trick the DataStore since it's not getting initialized as part of the Amplify.initialize call chain\n+        Amplify.Hub.publish(HubChannel.DATASTORE, HubEvent.create(InitializationStatus.SUCCEEDED));\n+\n+        assertRemoteSubscriptionsStarted();\n+\n+        // Setup objects\n+        Person person1 = createPerson(\"Test\", \"Dummy I\");\n+        Person person2 = createPerson(\"Test\", \"Dummy II\");\n+        ArgumentMatcher<GraphQLRequest<String>> person1Matcher = getMatcherFor(person1);\n+        ArgumentMatcher<GraphQLRequest<String>> person2Matcher = getMatcherFor(person2);\n+\n+        // Mock responses for person 1\n+        doAnswer(invocation -> {\n+            int indexOfResponseConsumer = 1;\n+            Consumer<GraphQLResponse<String>> onResponse = invocation.getArgument(indexOfResponseConsumer);\n+            String data = new JSONObject()\n+                .put(\"id\", person1.getId())\n+                .put(\"first_name\", person1.getFirstName())\n+                .put(\"last_name\", person1.getLastName())\n+                .put(\"_deleted\", false)\n+                .put(\"_version\", 1)\n+                .put(\"_lastSyncedAt\", Time.now())\n+                .toString();\n+            onResponse.accept(new GraphQLResponse<>(data, Collections.emptyList()));\n+            return mock(GraphQLOperation.class);\n+        }).when(mockApiPlugin).mutate(any(), any(), any());\n+\n+        // Save person 1\n+        synchronousDataStore.save(person1);\n+        Person result1 = synchronousDataStore.get(Person.class, person1.getId());\n+        assertEquals(person1, result1);\n+\n+        verify(mockApiCategory, timeout(ASSERTION_TIMEOUT_MS).atLeastOnce())\n+            .mutate(argThat(person1Matcher), any(), any());\n \n-        assertTrue(syncProcessorInvoked);\n+        // Mock responses for person 2\n+        doAnswer(invocation -> {\n+            int indexOfResponseConsumer = 1;\n+            Consumer<GraphQLResponse<String>> onResponse = invocation.getArgument(indexOfResponseConsumer);\n+            String data = new JSONObject()\n+                .put(\"id\", person2.getId())\n+                .put(\"first_name\", person2.getFirstName())\n+                .put(\"last_name\", person2.getLastName())\n+                .put(\"_deleted\", false)\n+                .put(\"_version\", 1)\n+                .put(\"_lastSyncedAt\", Time.now())\n+                .toString();\n+            onResponse.accept(new GraphQLResponse<>(data, Collections.emptyList()));\n+            return mock(GraphQLOperation.class);\n+        }).when(mockApiPlugin).mutate(any(), any(), any());\n+\n+        synchronousDataStore.clear();\n+        assertRemoteSubscriptionsCancelled();\n+\n+        // Save person 2\n+        synchronousDataStore.save(person2);\n+        Person result2 = synchronousDataStore.get(Person.class, person2.getId());\n+        assertEquals(person2, result2);\n+\n+        verify(mockApiCategory, timeout(ASSERTION_TIMEOUT_MS).atLeastOnce())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb26289c1ed56938daf43f5bfc8d230a9097548"}, "originalPosition": 229}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1485, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}