{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjUyNTY0", "number": 330, "title": "Auth Category to Staging Branch [Do Not Merge To Master]", "bodyText": "Initial PR so that work can be reviewed as I go vs. one massive PR at the end.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-03-26T15:45:50Z", "url": "https://github.com/aws-amplify/amplify-android/pull/330", "merged": true, "mergeCommit": {"oid": "7f0effd04def036105db1be83e97c6bbdabb230c"}, "closed": true, "closedAt": "2020-04-02T15:42:27Z", "author": {"login": "TrekSoft"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRdyFkgH2gAyMzk0MjUyNTY0OmE3ZGZlODg0MjdjNzA4MmMwZDRlZWNlYTg4MzJkNmFmYjQ4ZjY3NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTuNU9AFqTM4NjU1MjcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7dfe88427c7082c0d4eecea8832d6afb48f6758", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/a7dfe88427c7082c0d4eecea8832d6afb48f6758", "committedDate": "2020-03-26T15:24:45Z", "message": "Initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ebe3fa3e727e57473fcb418a658aed5c9e7e8af", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5ebe3fa3e727e57473fcb418a658aed5c9e7e8af", "committedDate": "2020-03-26T15:44:48Z", "message": "Merged in master and updated comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c97635dcbc96a73b21e049ae2f256c244c7eaa8", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8c97635dcbc96a73b21e049ae2f256c244c7eaa8", "committedDate": "2020-03-26T15:49:15Z", "message": "Fixes checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfba833d7de14e85971eee239367bc35a58f4140", "author": {"user": {"login": "jpignata", "name": "John Pignata"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/bfba833d7de14e85971eee239367bc35a58f4140", "committedDate": "2020-03-26T17:04:20Z", "message": "Raise minSdkVersion to 16 (#327)\n\nGiven the vanishingly small number of ICS users according to Google's\r\nDistribution Dashboard and our own log analysis and industry trends\r\n(Google Play Services supports API Level 16+, for example), we are\r\ndropping support for API Level 15."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e", "committedDate": "2020-03-26T18:57:10Z", "message": "Updated dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2005012c0bf1ce9a4ec651ba9683139e6ec27682", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/2005012c0bf1ce9a4ec651ba9683139e6ec27682", "committedDate": "2020-03-26T19:04:54Z", "message": "Update the plugin key for analytics to match one generated by the cli and update configuration method (#328)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNTYxNzI2", "url": "https://github.com/aws-amplify/amplify-android/pull/330#pullrequestreview-382561726", "createdAt": "2020-03-27T03:39:59Z", "commit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMzozOTo1OVrOF8iI0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNDozMDo1MlrOF8i0pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAxODE5Mw==", "bodyText": "can be final, since the reference to the collection won't change", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399018193", "createdAt": "2020-03-27T03:39:59Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.options;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthSignUpOptions {\n+    private final Map<String, String> userAttributes;\n+    private final Map<String, String> validationData;\n+\n+    private AuthSignUpOptions(\n+            Map<String, String> userAttributes,\n+            Map<String, String> validationData\n+    ) {\n+        this.userAttributes = userAttributes;\n+        this.validationData = validationData;\n+    }\n+\n+    @NonNull\n+    public Map<String, String> getUserAttributes() {\n+        return userAttributes;\n+    }\n+\n+    @NonNull\n+    public Map<String, String> getValidationData() {\n+        return validationData;\n+    }\n+\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static final class Builder {\n+        private Map<String, String> userAttributes;\n+        private Map<String, String> validationData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMDM1OA==", "bodyText": "You can probably create a subclass of Callback, that includes some of hte common boiler-plate. Somewhere (I think its checked in?) I had a DelegatingCallback, or something like that. Basically, you give it a Consumer<R> (result) and a Consumer` (exception) and then the se callback emthod delegate to thsoe consumers.\nLooks like\nfinal class DelegatingCallback<T> implements Callback<T> {\n    private final Consumer<T> onResult;\n    private final Consumer<Exception> onError;\n\n    DelegatingCallback(..., ... /* blah blah) {\n    }\n\n    public static <T> DelegatingCallback<T> create(Consumer<T> onResult, Consumer<Exception> onError) {\n       reutrn new DelegatignCallback(...);\n    }\n\n    @Override\n    public void onResult(T result) {\n        onResult.accept(result);\n    }\n\n    @Override\n    public void onError(Exception error) {\n        onError.accept(error);\n    }\n}\n\nWith this, you can change line 113 to:\nDelegatingCallback.create(signUpResult -> {\n    onSuccess.accept(new AuthSignUpResult(\n    ));\n}, exception -> {\n    onResult.accept(new ApiException(/* wrap the Exception that mobile client provides (ugh!) */));\n});\n\nThis sounds like overkill, but consider that you would use it to reduce the boiler plate of every interaction with the mobile client.\nOh well actually, and I already wrote it. Its in the test dir I think. You might just be able to move it into core/src/main somewhere appropriate and start using it.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399020358", "createdAt": "2020-03-27T03:49:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthPlugin;\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.HostedUIOptions;\n+import com.amazonaws.mobile.client.IdentityProvider;\n+import com.amazonaws.mobile.client.SignInUIOptions;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n+    private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n+    private static final long SECONDS_BEFORE_TIMEOUT = 10;\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_COGNITO_AUTH_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        AWSMobileClient.getInstance().initialize(\n+            context,\n+            new AWSConfiguration(pluginConfiguration),\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    throw new IllegalStateException(\"Failed to instantiate AWSMobileClient\", error);\n+                }\n+            }\n+        );\n+\n+        try {\n+            if (latch.await(SECONDS_BEFORE_TIMEOUT, TimeUnit.SECONDS)) {\n+                return;\n+            } else {\n+                throw new IllegalStateException(\n+                    \"Failed to instantiate AWSMobileClient within \" + SECONDS_BEFORE_TIMEOUT + \" seconds\"\n+                );\n+            }\n+        } catch (InterruptedException error) {\n+            throw new IllegalStateException(error);\n+        }\n+    }\n+\n+    public void signUp(\n+            String username,\n+            String password,\n+            AuthSignUpOptions options,\n+            final Consumer<AuthSignUpResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signUp(\n+            username,\n+            password,\n+            options.getUserAttributes(),\n+            options.getValidationData(),\n+            new Callback<SignUpResult>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMDkzMw==", "bodyText": "We use this approach in test, towards simplifying a list of assertions, sort of like a checklist. \"Okay, if this worked, and this worked, and this worked...\"\nBut in source code, it would be best to keep this async all the way through.\nThe DataStore performs some async initialization. Maybe auth will need to, as well. There is a beginInitialization hook in the Plugin class where this could fit.\nYou'll need to make an arrangement for the other method to queue up after that initialization completes. But, there's an example of that in the DataStore as well.\nWe can probably extract any shared logic to a common area, where both plugins could make use of the afterInitialization(....) (I think its called, for DataStore.)", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399020933", "createdAt": "2020-03-27T03:52:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthPlugin;\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.HostedUIOptions;\n+import com.amazonaws.mobile.client.IdentityProvider;\n+import com.amazonaws.mobile.client.SignInUIOptions;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n+    private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n+    private static final long SECONDS_BEFORE_TIMEOUT = 10;\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_COGNITO_AUTH_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        final CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMTU2Mw==", "bodyText": "Consider using a switch here. It would looke like:\nswitch (state) {\n    case foo:\n    case bar:\n    case baz:\n        onSuccess.accept(....);\n        break;\n    default:\n        helperMethodForYourElseBranch(...);\n        break;\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399021563", "createdAt": "2020-03-27T03:55:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthPlugin;\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.HostedUIOptions;\n+import com.amazonaws.mobile.client.IdentityProvider;\n+import com.amazonaws.mobile.client.SignInUIOptions;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n+    private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n+    private static final long SECONDS_BEFORE_TIMEOUT = 10;\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_COGNITO_AUTH_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        AWSMobileClient.getInstance().initialize(\n+            context,\n+            new AWSConfiguration(pluginConfiguration),\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    throw new IllegalStateException(\"Failed to instantiate AWSMobileClient\", error);\n+                }\n+            }\n+        );\n+\n+        try {\n+            if (latch.await(SECONDS_BEFORE_TIMEOUT, TimeUnit.SECONDS)) {\n+                return;\n+            } else {\n+                throw new IllegalStateException(\n+                    \"Failed to instantiate AWSMobileClient within \" + SECONDS_BEFORE_TIMEOUT + \" seconds\"\n+                );\n+            }\n+        } catch (InterruptedException error) {\n+            throw new IllegalStateException(error);\n+        }\n+    }\n+\n+    public void signUp(\n+            String username,\n+            String password,\n+            AuthSignUpOptions options,\n+            final Consumer<AuthSignUpResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signUp(\n+            username,\n+            password,\n+            options.getUserAttributes(),\n+            options.getValidationData(),\n+            new Callback<SignUpResult>() {\n+                @Override\n+                public void onResult(SignUpResult result) {\n+                    UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                    onSuccess.accept(new AuthSignUpResult(\n+                        result.getConfirmationState(),\n+                        details != null\n+                            ? new AuthCodeDeliveryDetails(\n+                                details.getDestination(),\n+                                details.getDeliveryMedium(),\n+                                details.getAttributeName()\n+                            )\n+                            : null\n+                    ));\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AuthException(\"Sign up failed\", error, \"See attached exception for more details\")\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    public void confirmSignUp(\n+        String username,\n+        String code,\n+        final Consumer<AuthSignUpResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().confirmSignUp(username, code, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Confirm sign up failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().resendSignUp(username, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\n+                        \"Resend confirmation code failed\",\n+                        error,\n+                        \"See attached exception for more details\"\n+                    )\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+        String username,\n+        String password,\n+        AuthSignInOptions options,\n+        final Consumer<AuthSignInResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signIn(username, password, null, new Callback<SignInResult>() {\n+            @Override\n+            public void onResult(SignInResult result) {\n+                AuthUserState state;\n+                UserCodeDeliveryDetails oldDetails = result.getCodeDetails();\n+                // Take information from Cognito specific object and wrap it in the new Amplify object\n+                AuthCodeDeliveryDetails newDetails =\n+                    oldDetails != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            oldDetails.getDestination(),\n+                            oldDetails.getDeliveryMedium(),\n+                            oldDetails.getAttributeName()\n+                        )\n+                        : null;\n+\n+                if (result.getSignInState().equals(SignInState.DONE)) {\n+                    state = AuthUserState.SIGNED_IN;\n+                } else {\n+                    state = AuthUserState.SIGNED_OUT;\n+                }\n+\n+                onSuccess.accept(new AuthSignInResult(state, newDetails));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Sign in failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+            String username,\n+            String password,\n+            final Consumer<AuthSignInResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        signIn(username, password, null, onSuccess, onException);\n+    }\n+\n+    public void signInWithUI(\n+            Activity callingActivity,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        HostedUIOptions hostedUIOptions = HostedUIOptions.builder()\n+                .scopes(\"openid\", \"email\")\n+                .build();\n+        SignInUIOptions signInUIOptions = SignInUIOptions.builder()\n+                .hostedUIOptions(hostedUIOptions)\n+                .build();\n+\n+        AWSMobileClient.getInstance().showSignIn(callingActivity, signInUIOptions, new Callback<UserStateDetails>() {\n+            @Override\n+            public void onResult(UserStateDetails details) {\n+                onSuccess.accept(details.getUserState().toString());\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AmplifyException(\"Sign in with UI failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void handleSignInWithUIResponse(Intent intent) {\n+        AWSMobileClient.getInstance().handleAuthResponse(intent);\n+    }\n+\n+    public void signInWithFacebook(\n+            String token,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        AWSMobileClient.getInstance().federatedSignIn(\n+            IdentityProvider.FACEBOOK.toString(),\n+            token,\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    onSuccess.accept(result.getUserState().toString());\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AmplifyException(\n+                                \"Sign in with Facebook failed\",\n+                                error,\n+                                \"See attached exception for more details\"\n+                        )\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    // The result of a success callback is an object of type AWSCognitoAuthSession so that when the result\n+    // is cast to that type, the following Cognito specific fields can be retrieved:\n+    //   - AWSCredentials\n+    //   - Cognito Identity ID\n+    //   - Cognito Access Token\n+    //   - Cognito ID Token\n+    //   - Cognito Refresh Token\n+    @Override\n+    public void currentAuthState(\n+            @NonNull Consumer<AuthSession> onSuccess,\n+            @NonNull Consumer<AuthException> onError\n+    ) {\n+        try {\n+            AWSMobileClient.getInstance().currentUserState(new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    UserState state = result.getUserState();\n+\n+                    if (state.equals(UserState.SIGNED_OUT) ||\n+                            state.equals(UserState.SIGNED_OUT_FEDERATED_TOKENS_INVALID) ||\n+                            state.equals(UserState.SIGNED_OUT_USER_POOLS_TOKENS_INVALID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMjU1MQ==", "bodyText": "This is highly nested. Any calls to AWSMobileClient you do inside of the callback, I would pull out into helper methods.\nThis is getting into the general software problem known as \"callback hell.\". That website has some general factoring tips to help avoid it. I'll offer a couple other thoughts --\nRx Single and Completable can help.\nInstead of a pattern:\nfoo(() -> {\n    bar(() -> {\n        baz();\n    }\n});\n\nWhere each call nests,\nYou can \"chomp\" down:\nfoo()\n    .andThen(bar())\n    .andThen(baz())\n\nOr, if providing result types from the operations,\nfoo()\n    .flatMap(result -> bar(result))\n    .flatMap(result -> baz(result))\n\nOf course, you'd have to add a dependency on RxJava to use those. Which may be overkill for this plugin unless you use it extensively. (Or, require it on a public API surface.)", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399022551", "createdAt": "2020-03-27T03:59:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthPlugin;\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.HostedUIOptions;\n+import com.amazonaws.mobile.client.IdentityProvider;\n+import com.amazonaws.mobile.client.SignInUIOptions;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n+    private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n+    private static final long SECONDS_BEFORE_TIMEOUT = 10;\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_COGNITO_AUTH_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        AWSMobileClient.getInstance().initialize(\n+            context,\n+            new AWSConfiguration(pluginConfiguration),\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    throw new IllegalStateException(\"Failed to instantiate AWSMobileClient\", error);\n+                }\n+            }\n+        );\n+\n+        try {\n+            if (latch.await(SECONDS_BEFORE_TIMEOUT, TimeUnit.SECONDS)) {\n+                return;\n+            } else {\n+                throw new IllegalStateException(\n+                    \"Failed to instantiate AWSMobileClient within \" + SECONDS_BEFORE_TIMEOUT + \" seconds\"\n+                );\n+            }\n+        } catch (InterruptedException error) {\n+            throw new IllegalStateException(error);\n+        }\n+    }\n+\n+    public void signUp(\n+            String username,\n+            String password,\n+            AuthSignUpOptions options,\n+            final Consumer<AuthSignUpResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signUp(\n+            username,\n+            password,\n+            options.getUserAttributes(),\n+            options.getValidationData(),\n+            new Callback<SignUpResult>() {\n+                @Override\n+                public void onResult(SignUpResult result) {\n+                    UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                    onSuccess.accept(new AuthSignUpResult(\n+                        result.getConfirmationState(),\n+                        details != null\n+                            ? new AuthCodeDeliveryDetails(\n+                                details.getDestination(),\n+                                details.getDeliveryMedium(),\n+                                details.getAttributeName()\n+                            )\n+                            : null\n+                    ));\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AuthException(\"Sign up failed\", error, \"See attached exception for more details\")\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    public void confirmSignUp(\n+        String username,\n+        String code,\n+        final Consumer<AuthSignUpResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().confirmSignUp(username, code, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Confirm sign up failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().resendSignUp(username, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\n+                        \"Resend confirmation code failed\",\n+                        error,\n+                        \"See attached exception for more details\"\n+                    )\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+        String username,\n+        String password,\n+        AuthSignInOptions options,\n+        final Consumer<AuthSignInResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signIn(username, password, null, new Callback<SignInResult>() {\n+            @Override\n+            public void onResult(SignInResult result) {\n+                AuthUserState state;\n+                UserCodeDeliveryDetails oldDetails = result.getCodeDetails();\n+                // Take information from Cognito specific object and wrap it in the new Amplify object\n+                AuthCodeDeliveryDetails newDetails =\n+                    oldDetails != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            oldDetails.getDestination(),\n+                            oldDetails.getDeliveryMedium(),\n+                            oldDetails.getAttributeName()\n+                        )\n+                        : null;\n+\n+                if (result.getSignInState().equals(SignInState.DONE)) {\n+                    state = AuthUserState.SIGNED_IN;\n+                } else {\n+                    state = AuthUserState.SIGNED_OUT;\n+                }\n+\n+                onSuccess.accept(new AuthSignInResult(state, newDetails));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Sign in failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+            String username,\n+            String password,\n+            final Consumer<AuthSignInResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        signIn(username, password, null, onSuccess, onException);\n+    }\n+\n+    public void signInWithUI(\n+            Activity callingActivity,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        HostedUIOptions hostedUIOptions = HostedUIOptions.builder()\n+                .scopes(\"openid\", \"email\")\n+                .build();\n+        SignInUIOptions signInUIOptions = SignInUIOptions.builder()\n+                .hostedUIOptions(hostedUIOptions)\n+                .build();\n+\n+        AWSMobileClient.getInstance().showSignIn(callingActivity, signInUIOptions, new Callback<UserStateDetails>() {\n+            @Override\n+            public void onResult(UserStateDetails details) {\n+                onSuccess.accept(details.getUserState().toString());\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AmplifyException(\"Sign in with UI failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void handleSignInWithUIResponse(Intent intent) {\n+        AWSMobileClient.getInstance().handleAuthResponse(intent);\n+    }\n+\n+    public void signInWithFacebook(\n+            String token,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        AWSMobileClient.getInstance().federatedSignIn(\n+            IdentityProvider.FACEBOOK.toString(),\n+            token,\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    onSuccess.accept(result.getUserState().toString());\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AmplifyException(\n+                                \"Sign in with Facebook failed\",\n+                                error,\n+                                \"See attached exception for more details\"\n+                        )\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    // The result of a success callback is an object of type AWSCognitoAuthSession so that when the result\n+    // is cast to that type, the following Cognito specific fields can be retrieved:\n+    //   - AWSCredentials\n+    //   - Cognito Identity ID\n+    //   - Cognito Access Token\n+    //   - Cognito ID Token\n+    //   - Cognito Refresh Token\n+    @Override\n+    public void currentAuthState(\n+            @NonNull Consumer<AuthSession> onSuccess,\n+            @NonNull Consumer<AuthException> onError\n+    ) {\n+        try {\n+            AWSMobileClient.getInstance().currentUserState(new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    UserState state = result.getUserState();\n+\n+                    if (state.equals(UserState.SIGNED_OUT) ||\n+                            state.equals(UserState.SIGNED_OUT_FEDERATED_TOKENS_INVALID) ||\n+                            state.equals(UserState.SIGNED_OUT_USER_POOLS_TOKENS_INVALID)\n+                    ) {\n+                        onSuccess.accept(new AWSCognitoAuthSession(AuthUserState.SIGNED_OUT));\n+                    } else {\n+                        final AWSCognitoAuthSession session;\n+                        final CountDownLatch latch = new CountDownLatch(2);\n+\n+                        if (state.equals(UserState.SIGNED_IN) || state.equals(UserState.GUEST)) {\n+                            session = new AWSCognitoAuthSession(\n+                                    state.equals(UserState.SIGNED_IN)\n+                                            ? AuthUserState.SIGNED_IN\n+                                            : AuthUserState.GUEST,\n+                                    null,\n+                                    AWSMobileClient.getInstance().getIdentityId(),\n+                                    null,\n+                                    null,\n+                                    null\n+                            );\n+\n+                            AWSMobileClient.getInstance().getTokens(new Callback<Tokens>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMjk3Ng==", "bodyText": "Maybe you want a utility method where you pass in a Tokens, and get back a fully populated AWSCognitoAuthSession  object. I guess, AWSCognitoAuthSessionFactory would be a good name for it?\n...\n    public static AWSCognitoAuthSession fromTokens(Tokens tokens) {\n       AWSCognitoAuthSession session = new AWSCognitoAuthSession();\n       ... set fields\n       return session;\n    }\n\nThis would be economical from a software craft standpoint if you will use the utility ~3+ times, probably?", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399022976", "createdAt": "2020-03-27T04:01:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthPlugin;\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.HostedUIOptions;\n+import com.amazonaws.mobile.client.IdentityProvider;\n+import com.amazonaws.mobile.client.SignInUIOptions;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONObject;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n+    private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n+    private static final long SECONDS_BEFORE_TIMEOUT = 10;\n+\n+    @NonNull\n+    @Override\n+    public String getPluginKey() {\n+        return AWS_COGNITO_AUTH_PLUGIN_KEY;\n+    }\n+\n+    @Override\n+    public void configure(\n+            @NonNull JSONObject pluginConfiguration,\n+            @NonNull Context context\n+    ) throws AmplifyException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        AWSMobileClient.getInstance().initialize(\n+            context,\n+            new AWSConfiguration(pluginConfiguration),\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    latch.countDown();\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    throw new IllegalStateException(\"Failed to instantiate AWSMobileClient\", error);\n+                }\n+            }\n+        );\n+\n+        try {\n+            if (latch.await(SECONDS_BEFORE_TIMEOUT, TimeUnit.SECONDS)) {\n+                return;\n+            } else {\n+                throw new IllegalStateException(\n+                    \"Failed to instantiate AWSMobileClient within \" + SECONDS_BEFORE_TIMEOUT + \" seconds\"\n+                );\n+            }\n+        } catch (InterruptedException error) {\n+            throw new IllegalStateException(error);\n+        }\n+    }\n+\n+    public void signUp(\n+            String username,\n+            String password,\n+            AuthSignUpOptions options,\n+            final Consumer<AuthSignUpResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signUp(\n+            username,\n+            password,\n+            options.getUserAttributes(),\n+            options.getValidationData(),\n+            new Callback<SignUpResult>() {\n+                @Override\n+                public void onResult(SignUpResult result) {\n+                    UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                    onSuccess.accept(new AuthSignUpResult(\n+                        result.getConfirmationState(),\n+                        details != null\n+                            ? new AuthCodeDeliveryDetails(\n+                                details.getDestination(),\n+                                details.getDeliveryMedium(),\n+                                details.getAttributeName()\n+                            )\n+                            : null\n+                    ));\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AuthException(\"Sign up failed\", error, \"See attached exception for more details\")\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    public void confirmSignUp(\n+        String username,\n+        String code,\n+        final Consumer<AuthSignUpResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().confirmSignUp(username, code, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Confirm sign up failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().resendSignUp(username, new Callback<SignUpResult>() {\n+            @Override\n+            public void onResult(SignUpResult result) {\n+                UserCodeDeliveryDetails details = result.getUserCodeDeliveryDetails();\n+\n+                onSuccess.accept(new AuthSignUpResult(\n+                    result.getConfirmationState(),\n+                    details != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            details.getDestination(),\n+                            details.getDeliveryMedium(),\n+                            details.getAttributeName()\n+                        )\n+                        : null\n+                ));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\n+                        \"Resend confirmation code failed\",\n+                        error,\n+                        \"See attached exception for more details\"\n+                    )\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+        String username,\n+        String password,\n+        AuthSignInOptions options,\n+        final Consumer<AuthSignInResult> onSuccess,\n+        final Consumer<AuthException> onException\n+    ) {\n+        AWSMobileClient.getInstance().signIn(username, password, null, new Callback<SignInResult>() {\n+            @Override\n+            public void onResult(SignInResult result) {\n+                AuthUserState state;\n+                UserCodeDeliveryDetails oldDetails = result.getCodeDetails();\n+                // Take information from Cognito specific object and wrap it in the new Amplify object\n+                AuthCodeDeliveryDetails newDetails =\n+                    oldDetails != null\n+                        ? new AuthCodeDeliveryDetails(\n+                            oldDetails.getDestination(),\n+                            oldDetails.getDeliveryMedium(),\n+                            oldDetails.getAttributeName()\n+                        )\n+                        : null;\n+\n+                if (result.getSignInState().equals(SignInState.DONE)) {\n+                    state = AuthUserState.SIGNED_IN;\n+                } else {\n+                    state = AuthUserState.SIGNED_OUT;\n+                }\n+\n+                onSuccess.accept(new AuthSignInResult(state, newDetails));\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AuthException(\"Sign in failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void signIn(\n+            String username,\n+            String password,\n+            final Consumer<AuthSignInResult> onSuccess,\n+            final Consumer<AuthException> onException\n+    ) {\n+        signIn(username, password, null, onSuccess, onException);\n+    }\n+\n+    public void signInWithUI(\n+            Activity callingActivity,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        HostedUIOptions hostedUIOptions = HostedUIOptions.builder()\n+                .scopes(\"openid\", \"email\")\n+                .build();\n+        SignInUIOptions signInUIOptions = SignInUIOptions.builder()\n+                .hostedUIOptions(hostedUIOptions)\n+                .build();\n+\n+        AWSMobileClient.getInstance().showSignIn(callingActivity, signInUIOptions, new Callback<UserStateDetails>() {\n+            @Override\n+            public void onResult(UserStateDetails details) {\n+                onSuccess.accept(details.getUserState().toString());\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onException.accept(\n+                    new AmplifyException(\"Sign in with UI failed\", error, \"See attached exception for more details\")\n+                );\n+            }\n+        });\n+    }\n+\n+    public void handleSignInWithUIResponse(Intent intent) {\n+        AWSMobileClient.getInstance().handleAuthResponse(intent);\n+    }\n+\n+    public void signInWithFacebook(\n+            String token,\n+            final Consumer<String> onSuccess,\n+            final Consumer<AmplifyException> onException\n+    ) {\n+        AWSMobileClient.getInstance().federatedSignIn(\n+            IdentityProvider.FACEBOOK.toString(),\n+            token,\n+            new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    onSuccess.accept(result.getUserState().toString());\n+                }\n+\n+                @Override\n+                public void onError(Exception error) {\n+                    onException.accept(\n+                        new AmplifyException(\n+                                \"Sign in with Facebook failed\",\n+                                error,\n+                                \"See attached exception for more details\"\n+                        )\n+                    );\n+                }\n+            }\n+        );\n+    }\n+\n+    // The result of a success callback is an object of type AWSCognitoAuthSession so that when the result\n+    // is cast to that type, the following Cognito specific fields can be retrieved:\n+    //   - AWSCredentials\n+    //   - Cognito Identity ID\n+    //   - Cognito Access Token\n+    //   - Cognito ID Token\n+    //   - Cognito Refresh Token\n+    @Override\n+    public void currentAuthState(\n+            @NonNull Consumer<AuthSession> onSuccess,\n+            @NonNull Consumer<AuthException> onError\n+    ) {\n+        try {\n+            AWSMobileClient.getInstance().currentUserState(new Callback<UserStateDetails>() {\n+                @Override\n+                public void onResult(UserStateDetails result) {\n+                    UserState state = result.getUserState();\n+\n+                    if (state.equals(UserState.SIGNED_OUT) ||\n+                            state.equals(UserState.SIGNED_OUT_FEDERATED_TOKENS_INVALID) ||\n+                            state.equals(UserState.SIGNED_OUT_USER_POOLS_TOKENS_INVALID)\n+                    ) {\n+                        onSuccess.accept(new AWSCognitoAuthSession(AuthUserState.SIGNED_OUT));\n+                    } else {\n+                        final AWSCognitoAuthSession session;\n+                        final CountDownLatch latch = new CountDownLatch(2);\n+\n+                        if (state.equals(UserState.SIGNED_IN) || state.equals(UserState.GUEST)) {\n+                            session = new AWSCognitoAuthSession(\n+                                    state.equals(UserState.SIGNED_IN)\n+                                            ? AuthUserState.SIGNED_IN\n+                                            : AuthUserState.GUEST,\n+                                    null,\n+                                    AWSMobileClient.getInstance().getIdentityId(),\n+                                    null,\n+                                    null,\n+                                    null\n+                            );\n+\n+                            AWSMobileClient.getInstance().getTokens(new Callback<Tokens>() {\n+                                @Override\n+                                public void onResult(Tokens result) {\n+                                    session.setAccessToken(result.getAccessToken().getTokenString());\n+                                    session.setIdToken(result.getIdToken().getTokenString());\n+                                    session.setRefreshToken(result.getRefreshToken().getTokenString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyMzY5MA==", "bodyText": "If all of these things can be null, how do we get a predictable experience for the user? Right now, they'll have to null check anything they get back from a getter on this object. Can we make fewer of these things null?\nAlternately, we could provided hasFoo(), methods, to help a little:\nif (session.hasIdentityId()) {\n    String idnetityId = session.getIdnetitytId();\n}\n\nOr, a functional style:\nsession.ifPresent(SessionToken.REFRESH, /* Action */ () -> {\n   // This gets executed if there is a session token.\n});\n```", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399023690", "createdAt": "2020-03-27T04:04:29Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+\n+import java.util.Objects;\n+\n+public final class AWSCognitoAuthSession extends AuthSession {\n+    private AWSCredentials awsCredentials;\n+    private String identityId;\n+    private String accessToken;\n+    private String idToken;\n+    private String refreshToken;\n+\n+    public AWSCognitoAuthSession(\n+            @NonNull AuthUserState state\n+    ) {\n+        super(state);\n+    }\n+\n+    public AWSCognitoAuthSession(\n+            @NonNull AuthUserState state,\n+            @Nullable AWSCredentials awsCredentials,\n+            @Nullable String identityId,\n+            @Nullable String accessToken,\n+            @Nullable String idToken,\n+            @Nullable String refreshToken", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNDMwNg==", "bodyText": "Instead of mutation the session object, we might like to decouple these token/credentials.\nYou can \"defer\" the resolution of these things by using a provider delegate.\nfinal class ImmutableSession {\n    ImmutableSession(final Provider<AWSCredentials> credentialsProvider, final Provider<String> identityIdProvider) {\n    }\n\nThis way, the session object isn't changing. But, the functions that are passed in to resolve fields may return different results.\nnew WhateverSession(/* provider */ () -> awsCredentials, /* provider */ () -> identityId);\n\nOr maybe there's some implementation that's real crazy, not just returning a variable.\nThis is the pattern of the AWS credentials provider.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399024306", "createdAt": "2020-03-27T04:07:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.AuthUserState;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+\n+import java.util.Objects;\n+\n+public final class AWSCognitoAuthSession extends AuthSession {\n+    private AWSCredentials awsCredentials;\n+    private String identityId;\n+    private String accessToken;\n+    private String idToken;\n+    private String refreshToken;\n+\n+    public AWSCognitoAuthSession(\n+            @NonNull AuthUserState state\n+    ) {\n+        super(state);\n+    }\n+\n+    public AWSCognitoAuthSession(\n+            @NonNull AuthUserState state,\n+            @Nullable AWSCredentials awsCredentials,\n+            @Nullable String identityId,\n+            @Nullable String accessToken,\n+            @Nullable String idToken,\n+            @Nullable String refreshToken\n+    ) {\n+        super(Objects.requireNonNull(state));\n+\n+        this.awsCredentials = awsCredentials;\n+        this.identityId = identityId;\n+        this.accessToken = accessToken;\n+        this.idToken = idToken;\n+        this.refreshToken = refreshToken;\n+    }\n+\n+    public AWSCredentials getAwsCredentials() {\n+        return awsCredentials;\n+    }\n+\n+    public String getIdentityId() {\n+        return identityId;\n+    }\n+\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    public String getIdToken() {\n+        return idToken;\n+    }\n+\n+    public String getRefreshToken() {\n+        return refreshToken;\n+    }\n+\n+    public void setAwsCredentials(AWSCredentials awsCredentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzYwOQ==", "bodyText": "This is like the Analytics API. When you provide a map, the user can do stuff like:\nMap<String, String> userAttributes = new HashMap<>();\nmap.put(\"emailZZ\", \"jameson@domain.tld\");\n\nAnd they won't realize they mispelled anything until their app is out in the field and it fails at runtime.\nSo, data modeling can help.\nMap<String, Object> is basically a class, where you name the field members in keys, and populate their values in values.\nMap<String, String> is more or less the same thing, but with less intricate data types.\nFor example,\nMap<String, String> userAttributes = new HashMap<>();\nenum AttributeKeys {\n    EMAIL(\"email\"),\n    NAME(\"name\"); // .... etc.. ..\n}\ninterface Whatever {\n    // By the way, please make sure that, by convention, you use AttributeKeys!!!\n    void useAttributes(Map<String, String> userAttributes);\n}\n\nWell, okay. But we could have done:\nfinal class UserAttributes {\n    private Email email;\n    private Name name;\n   \n    UserAttributes(Email email, Name name) {\n       this.email = email;\n       this.name = name;\n    }\n\n    static final class Email {\n         private final String validEmail;\n         private Email(String validEmail) {\n            this.validEmail = validEmail; \n         }\n         public static Email parse(String anyString) {\n             // Emails have a defined format with TLD at the end, an @ in the middle, etc....\n             // Does this string?\n             return new Email(/* validated */ anyString);\n         }\n         public String getUserName() {\n             // reutrn the part before at symbol\n         }\n         public String getDomainName() {\n             // return portion after at...\n         }\n    }\n\n    static final class Name {\n        private final String validatedName;\n        private Name(String validatedName) {\n            this.validatedName = validatedName);\n        }\n   \n        public static Name parse(@Nullable String fullName) {\n            // Validate the format of the string is actually a name....\n            // For sake of argument, let's require a first and last name.\n            return new Name(/*valid! */ string);\n        }\n\n        public String getFirstName() {\n        \n    }\n}\n\nOkay so anyway, my point is, that data modeling created a semantic experience for a user, that is a lot more fool proof. The user would make this stuff like:\n// This can be a step builder, to catch all the required fields, and get that stuff at runtime.\nUserAttributes.builder()\n    .email(Email.parse(\"tony@koolbiz.uk\"))\n    .name(Name.parse(\"Tony Daniels\"))\n    .build();\n\nCompare with:\nMap<String, String> attrs = new HashMap<>();\nattrs.put(\"Eamil\", \"whoops\");\nattrs.put(\"Eamil\", \"whoopsOverwrite\");\n\nAlot more of the stuff is left to reading the docs carefully and then validating at runtime.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399027609", "createdAt": "2020-03-27T04:22:26Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.options;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthSignUpOptions {\n+    private final Map<String, String> userAttributes;\n+    private final Map<String, String> validationData;\n+\n+    private AuthSignUpOptions(\n+            Map<String, String> userAttributes,\n+            Map<String, String> validationData\n+    ) {\n+        this.userAttributes = userAttributes;\n+        this.validationData = validationData;\n+    }\n+\n+    @NonNull\n+    public Map<String, String> getUserAttributes() {\n+        return userAttributes;\n+    }\n+\n+    @NonNull\n+    public Map<String, String> getValidationData() {\n+        return validationData;\n+    }\n+\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static final class Builder {\n+        private Map<String, String> userAttributes;\n+        private Map<String, String> validationData;\n+\n+        public Builder() {\n+            this.userAttributes = new HashMap<>();\n+            this.validationData = new HashMap<>();\n+        }\n+\n+        @NonNull\n+        public Builder userAttributes(@NonNull Map<String, String> userAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzg3NQ==", "bodyText": "Naming, cause", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399027875", "createdAt": "2020-03-27T04:23:42Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+\n+/**\n+ * Exception thrown by Storage category plugins.\n+ */\n+public final class AuthException extends AmplifyException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates a new exception with a message, root cause, and recovery suggestion.\n+     * @param message An error message describing why this exception was thrown\n+     * @param throwable The underlying cause of this exception\n+     * @param recoverySuggestion Text suggesting a way to recover from the error being described\n+     */\n+    public AuthException(\n+            @NonNull final String message,\n+            final Throwable throwable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzk4Ng==", "bodyText": "Can this be an enum? Which are the different delivery mediums? Are they known to us? Do we only support a constrained set of them?", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399027986", "createdAt": "2020-03-27T04:24:09Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCodeDeliveryDetails.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+public final class AuthCodeDeliveryDetails {\n+    private String destination;\n+    private String deliveryMedium;\n+    private String attributeName;\n+\n+    public AuthCodeDeliveryDetails(String destination, String deliveryMedium, String attributeName) {\n+        this.destination = destination;\n+        this.deliveryMedium = deliveryMedium;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyODA2Mw==", "bodyText": "This is the  behavior of the default constructor in Java, if you don't supply one\nThat is to say, you could safely remove this.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399028063", "createdAt": "2020-03-27T04:24:32Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryConfiguration.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import com.amplifyframework.core.category.CategoryConfiguration;\n+import com.amplifyframework.core.category.CategoryType;\n+\n+/**\n+ * Configuration for Auth category that also\n+ * contains configuration for individual plugins.\n+ */\n+public final class AuthCategoryConfiguration extends CategoryConfiguration {\n+    // Any category level properties would be defined here and populateFromJson would be overridden\n+    // below to fill in these values from the JSON data.\n+\n+    /**\n+     * Constructs a new AuthCategoryConfiguration.\n+     */\n+    public AuthCategoryConfiguration() {\n+        super();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyODM4NQ==", "bodyText": "Why does Facebook get to be special?\nWe should figure out a way to spec out this API without naming particular providers.\nEven this woudl be more extensible:\nsignInWith(SignInProvider provider, ...);\n\nwith:\nenum SignInProvider {\n    FACEBOOK; // For not, it's gotta be Facebook or nuthin, pal.\n    // GOOGLE; // Someday!\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399028385", "createdAt": "2020-03-27T04:26:11Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+public interface AuthCategoryBehavior {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username This can be a typical username, email, phone number, etc.\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user or validation data\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signUp(\n+            @NonNull String username,\n+            @NonNull String password,\n+            @NonNull AuthSignUpOptions options,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username The username of the account to confirm\n+     * @param code The confirmation code the user received\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void confirmSignUp(\n+            @NonNull String username,\n+            @NonNull String code,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username The username of the account to resend the code to\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username This can be a normal username, email/phone if that's setup, or null if custom auth is enabled\n+     * @param password User's password for normal signup, null if custom auth or passwordless configurations are setup\n+     * @param options Advanced options such as a map of auth information for custom auth\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull AuthSignInOptions options,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password.\n+     * @param username This can be a normal username or email/phone if that's setup\n+     * @param password User's password\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Launch a pre-built sign in UI flow. You should also put the {@link #handleSignInWithUIResponse(Intent)} method in\n+     * your activity's onResume method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithUI(\n+            @NonNull Activity callingActivity,\n+            @NonNull Consumer<String> onSuccess,\n+            @NonNull Consumer<AmplifyException> onError);\n+\n+    /**\n+     * Handles the response which comes back from {@link #signInWithUI(Activity, Consumer, Consumer)}.\n+     * @param intent The app activity's intent\n+     */\n+    void handleSignInWithUIResponse(Intent intent);\n+\n+    /**\n+     * TODO: Replace this with a generic sign in with social method (or whatever naming lands on)\n+     *       which takes the provider as an enum.\n+     * @param token Token retrieved from the social provider's authentication code.\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithFacebook(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyODkyMg==", "bodyText": "What happens on error?", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399028922", "createdAt": "2020-03-27T04:28:36Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+public interface AuthCategoryBehavior {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username This can be a typical username, email, phone number, etc.\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user or validation data\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signUp(\n+            @NonNull String username,\n+            @NonNull String password,\n+            @NonNull AuthSignUpOptions options,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username The username of the account to confirm\n+     * @param code The confirmation code the user received\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void confirmSignUp(\n+            @NonNull String username,\n+            @NonNull String code,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username The username of the account to resend the code to\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username This can be a normal username, email/phone if that's setup, or null if custom auth is enabled\n+     * @param password User's password for normal signup, null if custom auth or passwordless configurations are setup\n+     * @param options Advanced options such as a map of auth information for custom auth\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull AuthSignInOptions options,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password.\n+     * @param username This can be a normal username or email/phone if that's setup\n+     * @param password User's password\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Launch a pre-built sign in UI flow. You should also put the {@link #handleSignInWithUIResponse(Intent)} method in\n+     * your activity's onResume method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithUI(\n+            @NonNull Activity callingActivity,\n+            @NonNull Consumer<String> onSuccess,\n+            @NonNull Consumer<AmplifyException> onError);\n+\n+    /**\n+     * Handles the response which comes back from {@link #signInWithUI(Activity, Consumer, Consumer)}.\n+     * @param intent The app activity's intent\n+     */\n+    void handleSignInWithUIResponse(Intent intent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyOTQxMw==", "bodyText": "void lookupAuthSession(Consumer<AuthSession> onSessionFound, Consumer<AuthException> onSessionUnavailable);\n\n\nStart method names with a verb;\nMatch the subject of the method name to the result parameter", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r399029413", "createdAt": "2020-03-27T04:30:52Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+public interface AuthCategoryBehavior {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username This can be a typical username, email, phone number, etc.\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user or validation data\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signUp(\n+            @NonNull String username,\n+            @NonNull String password,\n+            @NonNull AuthSignUpOptions options,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username The username of the account to confirm\n+     * @param code The confirmation code the user received\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void confirmSignUp(\n+            @NonNull String username,\n+            @NonNull String code,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username The username of the account to resend the code to\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username This can be a normal username, email/phone if that's setup, or null if custom auth is enabled\n+     * @param password User's password for normal signup, null if custom auth or passwordless configurations are setup\n+     * @param options Advanced options such as a map of auth information for custom auth\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull AuthSignInOptions options,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password.\n+     * @param username This can be a normal username or email/phone if that's setup\n+     * @param password User's password\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Launch a pre-built sign in UI flow. You should also put the {@link #handleSignInWithUIResponse(Intent)} method in\n+     * your activity's onResume method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithUI(\n+            @NonNull Activity callingActivity,\n+            @NonNull Consumer<String> onSuccess,\n+            @NonNull Consumer<AmplifyException> onError);\n+\n+    /**\n+     * Handles the response which comes back from {@link #signInWithUI(Activity, Consumer, Consumer)}.\n+     * @param intent The app activity's intent\n+     */\n+    void handleSignInWithUIResponse(Intent intent);\n+\n+    /**\n+     * TODO: Replace this with a generic sign in with social method (or whatever naming lands on)\n+     *       which takes the provider as an enum.\n+     * @param token Token retrieved from the social provider's authentication code.\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithFacebook(\n+            @NonNull String token,\n+            @NonNull Consumer<String> onSuccess,\n+            @NonNull Consumer<AmplifyException> onError);\n+\n+    /**\n+     * Retrieve the user's current state - Signed Out, Guest, or Signed In.\n+     * Depending on how a plugin implements this, the resulting AuthSession can also be cast to a type specific\n+     * to that plugin which contains the various security tokens as an escape hatch if you want to manually use\n+     * them outside the plugin. Within Amplify this should not be needed as the other categories will automatically\n+     * work as long as you are signed in.\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void currentAuthState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496b9da4c26221d134b347aed96790a034508f76", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/496b9da4c26221d134b347aed96790a034508f76", "committedDate": "2020-03-27T15:54:30Z", "message": "Merge branch 'ddaudeli/AuthCategory' of https://github.com/aws-amplify/amplify-android into ddaudeli/AuthCategory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwMzQ2", "url": "https://github.com/aws-amplify/amplify-android/pull/330#pullrequestreview-383140346", "createdAt": "2020-03-27T19:22:24Z", "commit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18508681d3b526691aa8e8e38120f5e5273e621", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c18508681d3b526691aa8e8e38120f5e5273e621", "committedDate": "2020-03-30T16:08:35Z", "message": "Updates Javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305397c208bf5766cf9c8c82ace93b06daa805b2", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/305397c208bf5766cf9c8c82ace93b06daa805b2", "committedDate": "2020-03-31T19:14:05Z", "message": "Addresses PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/40e0729253d20f92b6d0080da678dca8d3ac9204", "committedDate": "2020-03-31T20:42:36Z", "message": "Added hashCode, toString, and equals methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTg1NTQ4", "url": "https://github.com/aws-amplify/amplify-android/pull/330#pullrequestreview-384985548", "createdAt": "2020-03-31T18:13:54Z", "commit": {"oid": "c18508681d3b526691aa8e8e38120f5e5273e621"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxMzo1NVrOF-iMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTozNjo1MlrOF-pJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjE3NA==", "bodyText": "This is only needed if you use the '@aar' form, when you specify the dependency:\n    implementation (\"com.amazonaws:aws-android-sdk-mobile-client:$awsSdkVersion@aar\") {\n        transitive = true\n    }\n\nIf you leave off @aar, transitive == true is the default:\n    implementation (\"com.amazonaws:aws-android-sdk-mobile-client:$awsSdkVersion\")\n\n(Note, I've inlined the value of the dependency variable, for conciseness. But that shouldn't change the point, here.)", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401116174", "createdAt": "2020-03-31T18:13:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/build.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+apply plugin: 'com.android.library'\n+apply from: rootProject.file(\"configuration/publishing.gradle\")\n+apply from: rootProject.file(\"configuration/checkstyle.gradle\")\n+\n+dependencies {\n+    implementation project(path: ':core')\n+    implementation dependency.androidx.appcompat\n+    implementation (dependency.aws.mobileclient) {\n+        transitive = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c18508681d3b526691aa8e8e38120f5e5273e621"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODU0NA==", "bodyText": "Somewhere around here is a good opportunity to wrap these in Immutable.of(...), so that they are, int he created object.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401228544", "createdAt": "2020-03-31T21:33:30Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignUpOptions.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthSignUpOptions {\n+    private final Map<String, String> userAttributes;\n+    private final Map<String, String> validationData;\n+\n+    /**\n+     * Advanced options for signing in.\n+     * @param userAttributes Additional user attributes which should be associated with this user on registration\n+     * @param validationData A map of custom key/values to be sent as part of the sign up process\n+     */\n+    private AuthSignUpOptions(\n+            Map<String, String> userAttributes,\n+            Map<String, String> validationData\n+    ) {\n+        this.userAttributes = userAttributes;\n+        this.validationData = validationData;\n+    }\n+\n+    /**\n+     * Get additional user attributes which should be associated with this user on registration.\n+     * @return additional user attributes which should be associated with this user on registration\n+     */\n+    @NonNull\n+    public Map<String, String> getUserAttributes() {\n+        return userAttributes;\n+    }\n+\n+    /**\n+     * Get a map of custom key/values to be sent as part of the sign up process.\n+     * @return a map of custom key/values to be sent as part of the sign up process\n+     */\n+    @NonNull\n+    public Map<String, String> getValidationData() {\n+        return validationData;\n+    }\n+\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getUserAttributes(),\n+                getValidationData()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        } else {\n+            AuthSignUpOptions authSignUpOptions = (AuthSignUpOptions) obj;\n+            return ObjectsCompat.equals(getValidationData(), authSignUpOptions.getValidationData()) &&\n+                    ObjectsCompat.equals(getUserAttributes(), authSignUpOptions.getUserAttributes());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new StringBuilder()\n+                .append(\"AuthSignUpOptions { \")\n+                .append(\"validationData: \")\n+                .append(getValidationData())\n+                .append(\", userAttributes: \")\n+                .append(getUserAttributes())\n+                .append(\" }\")\n+                .toString();\n+    }\n+\n+    public static final class Builder {\n+        private Map<String, String> userAttributes;\n+        private Map<String, String> validationData;\n+\n+        public Builder() {\n+            this.userAttributes = new HashMap<>();\n+            this.validationData = new HashMap<>();\n+        }\n+\n+        @NonNull\n+        public Builder userAttributes(@NonNull Map<String, String> userAttributes) {\n+            Objects.requireNonNull(userAttributes);\n+            this.userAttributes.clear();\n+            this.userAttributes.putAll(userAttributes);\n+            return this;\n+        }\n+\n+        @NonNull\n+        public Builder validationData(@NonNull Map<String, String> validationData) {\n+            Objects.requireNonNull(validationData);\n+            this.validationData.clear();\n+            this.validationData.putAll(validationData);\n+            return this;\n+        }\n+\n+        @NonNull\n+        public AuthSignUpOptions build() {\n+            return new AuthSignUpOptions(userAttributes, validationData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyODk3Ng==", "bodyText": "Immutable.of(validationData)", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401228976", "createdAt": "2020-03-31T21:34:21Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/options/AuthSignInOptions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthSignInOptions {\n+    private final Map<String, String> validationData;\n+\n+    /**\n+     * Advanced options for signing in.\n+     * @param validationData A map of custom key/values to be sent as part of the sign in process\n+     */\n+    private AuthSignInOptions(Map<String, String> validationData) {\n+        this.validationData = validationData;\n+    }\n+\n+    /**\n+     * Get a map of custom key/values to be sent as part of the sign in process.\n+     * @return a map of custom key/values to be sent as part of the sign in process\n+     */\n+    @NonNull\n+    public Map<String, String> getValidationData() {\n+        return validationData;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValidationData()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        } else {\n+            AuthSignInOptions authSignInOptions = (AuthSignInOptions) obj;\n+            return ObjectsCompat.equals(getValidationData(), authSignInOptions.getValidationData());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new StringBuilder()\n+                .append(\"AuthSignInOptions { \")\n+                .append(\"validationData: \")\n+                .append(getValidationData())\n+                .append(\" }\")\n+                .toString();\n+    }\n+\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static final class Builder {\n+        private Map<String, String> validationData;\n+\n+        public Builder() {\n+            this.validationData = new HashMap<>();\n+        }\n+\n+        @NonNull\n+        public Builder validationData(@NonNull Map<String, String> validationData) {\n+            Objects.requireNonNull(validationData);\n+            this.validationData.clear();\n+            this.validationData.putAll(validationData);\n+            return this;\n+        }\n+\n+        @NonNull\n+        public AuthSignInOptions build() {\n+            return new AuthSignInOptions(validationData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTU0NQ==", "bodyText": "Or sign in has not been attempted?", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401229545", "createdAt": "2020-03-31T21:35:33Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthSignedInStatus.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+public enum AuthSignedInStatus {\n+    /** User is signed in. **/\n+    SIGNED_IN,\n+    /** User is signed out. **/\n+    SIGNED_OUT,\n+    /** User is signed in as a guest. **/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTc3MQ==", "bodyText": "I do, yea. We should fix the other categories in a separate PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401229771", "createdAt": "2020-03-31T21:36:07Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+\n+/**\n+ * Exception thrown by Storage category plugins.\n+ */\n+public final class AuthException extends AmplifyException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Creates a new exception with a message, root cause, and recovery suggestion.\n+     * @param message An error message describing why this exception was thrown\n+     * @param throwable The underlying cause of this exception\n+     * @param recoverySuggestion Text suggesting a way to recover from the error being described\n+     */\n+    public AuthException(\n+            @NonNull final String message,\n+            final Throwable throwable,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzg3NQ=="}, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDEyOA==", "bodyText": "Jithin spec'd out an enum for this - you could check the iOS PR / sync with him.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401230128", "createdAt": "2020-03-31T21:36:52Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCodeDeliveryDetails.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+public final class AuthCodeDeliveryDetails {\n+    private String destination;\n+    private String deliveryMedium;\n+    private String attributeName;\n+\n+    public AuthCodeDeliveryDetails(String destination, String deliveryMedium, String attributeName) {\n+        this.destination = destination;\n+        this.deliveryMedium = deliveryMedium;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzk4Ng=="}, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjQ5NDI3", "url": "https://github.com/aws-amplify/amplify-android/pull/330#pullrequestreview-385249427", "createdAt": "2020-04-01T03:54:35Z", "commit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo1NDozNVrOF-v84A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo1NjoyMlrOF-v-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MTY2NA==", "bodyText": "Email and SMS are the two values added in iOS which are also supported by Cognito.", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401341664", "createdAt": "2020-04-01T03:54:35Z", "author": {"login": "royjit"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCodeDeliveryDetails.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+public final class AuthCodeDeliveryDetails {\n+    private String destination;\n+    private String deliveryMedium;\n+    private String attributeName;\n+\n+    public AuthCodeDeliveryDetails(String destination, String deliveryMedium, String attributeName) {\n+        this.destination = destination;\n+        this.deliveryMedium = deliveryMedium;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAyNzk4Ng=="}, "originalCommit": {"oid": "1d9b7bfc7d822ce8c1c43995eb155b97ccd0f21e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0MjAzOQ==", "bodyText": "Shouldnt we return the same result here as well? AuthSignInResult?", "url": "https://github.com/aws-amplify/amplify-android/pull/330#discussion_r401342039", "createdAt": "2020-04-01T03:56:22Z", "author": {"login": "royjit"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.options.AuthSignInOptions;\n+import com.amplifyframework.auth.options.AuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.core.Consumer;\n+\n+public interface AuthCategoryBehavior {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username This can be a typical username, email, phone number, etc.\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user or validation data\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signUp(\n+            @NonNull String username,\n+            @NonNull String password,\n+            @NonNull AuthSignUpOptions options,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username The username of the account to confirm\n+     * @param code The confirmation code the user received\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void confirmSignUp(\n+            @NonNull String username,\n+            @NonNull String code,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username The username of the account to resend the code to\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void resendSignUpCode(\n+            @NonNull String username,\n+            @NonNull Consumer<AuthSignUpResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username This can be a normal username, email/phone if that's setup, or null if custom auth is enabled\n+     * @param password User's password for normal signup, null if custom auth or passwordless configurations are setup\n+     * @param options Advanced options such as a map of auth information for custom auth\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull AuthSignInOptions options,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Basic authentication to the app with a username and password.\n+     * @param username This can be a normal username or email/phone if that's setup\n+     * @param password User's password\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signIn(\n+            @Nullable String username,\n+            @Nullable String password,\n+            @NonNull Consumer<AuthSignInResult> onSuccess,\n+            @NonNull Consumer<AuthException> onError);\n+\n+    /**\n+     * Launch a pre-built sign in UI flow. You should also put the {@link #handleSignInWithUIResponse(Intent)} method in\n+     * your activity's onResume method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void signInWithUI(\n+            @NonNull Activity callingActivity,\n+            @NonNull Consumer<String> onSuccess,\n+            @NonNull Consumer<AmplifyException> onError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40e0729253d20f92b6d0080da678dca8d3ac9204"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14906829740c791b766c9711c2e5e3d5b9475125", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/14906829740c791b766c9711c2e5e3d5b9475125", "committedDate": "2020-04-01T20:10:58Z", "message": "Addresses round 2 of PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTUyNzA3", "url": "https://github.com/aws-amplify/amplify-android/pull/330#pullrequestreview-386552707", "createdAt": "2020-04-02T15:40:50Z", "commit": {"oid": "14906829740c791b766c9711c2e5e3d5b9475125"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2608, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}