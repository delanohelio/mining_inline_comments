{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NjA4ODU2", "number": 457, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoyMjo0N1rOD8mTQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1OTowMVrOD8oPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY4Njc0OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoyMjo0OFrOGVo47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMjo0NlrOGVs1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MzIxMg==", "bodyText": "maybe use a private static method to return this like how you return pre-determined failed sessions in MobileClientSessionAdapter? It is very nested at the moment.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425343212", "createdAt": "2020-05-14T18:22:48Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -376,29 +369,25 @@ public void fetchAuthSession(\n             awsMobileClient.currentUserState(new Callback<UserStateDetails>() {\n                 @Override\n                 public void onResult(UserStateDetails result) {\n-                    UserState state = result.getUserState();\n-\n-                    switch (state) {\n+                    switch (result.getUserState()) {\n                         case SIGNED_OUT:\n-                        case SIGNED_OUT_USER_POOLS_TOKENS_INVALID:\n+                        case GUEST:\n+                            MobileClientSessionAdapter.fetchSignedOutSession(awsMobileClient, onSuccess);\n+                            break;\n                         case SIGNED_OUT_FEDERATED_TOKENS_INVALID:\n+                        case SIGNED_OUT_USER_POOLS_TOKENS_INVALID:\n                             onSuccess.accept(\n-                                AWSCognitoAuthSession.builder().isSignedIn(false).build()\n+                                    new AWSCognitoAuthSession(\n+                                            true,\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException())\n+                                    )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwNzg5Mg==", "bodyText": "Alright, sure.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425407892", "createdAt": "2020-05-14T20:22:46Z", "author": {"login": "TrekSoft"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -376,29 +369,25 @@ public void fetchAuthSession(\n             awsMobileClient.currentUserState(new Callback<UserStateDetails>() {\n                 @Override\n                 public void onResult(UserStateDetails result) {\n-                    UserState state = result.getUserState();\n-\n-                    switch (state) {\n+                    switch (result.getUserState()) {\n                         case SIGNED_OUT:\n-                        case SIGNED_OUT_USER_POOLS_TOKENS_INVALID:\n+                        case GUEST:\n+                            MobileClientSessionAdapter.fetchSignedOutSession(awsMobileClient, onSuccess);\n+                            break;\n                         case SIGNED_OUT_FEDERATED_TOKENS_INVALID:\n+                        case SIGNED_OUT_USER_POOLS_TOKENS_INVALID:\n                             onSuccess.accept(\n-                                AWSCognitoAuthSession.builder().isSignedIn(false).build()\n+                                    new AWSCognitoAuthSession(\n+                                            true,\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException()),\n+                                            AuthSessionResult.failure(new AuthException.SessionExpiredException())\n+                                    )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0MzIxMg=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODY5NzY5OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODoyNTo1NlrOGVo_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyMzowOVrOGVs2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NDk5NQ==", "bodyText": "is this the username or is it another auto-generated ID?", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425344995", "createdAt": "2020-05-14T18:25:56Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "diffHunk": "@@ -16,104 +16,81 @@\n package com.amplifyframework.auth.cognito;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.core.util.ObjectsCompat;\n \n import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.result.AuthSessionResult;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n \n+import java.util.Objects;\n+\n /**\n  * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n  */\n public final class AWSCognitoAuthSession extends AuthSession implements AWSCredentialsProvider {\n-    private final AWSCredentials awsCredentials;\n-    private final String userSub;\n-    private final String identityId;\n-    private final String accessToken;\n-    private final String idToken;\n-    private final String refreshToken;\n+    private final AuthSessionResult<String> identityId;\n+    private final AuthSessionResult<AWSCredentials> awsCredentials;\n+    private final AuthSessionResult<String> userSub;\n+    private final AuthSessionResult<AWSCognitoUserPoolTokens> userPoolTokens;\n \n-    private AWSCognitoAuthSession(\n+    /**\n+     * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n+     * @param isSignedIn Are you currently in a signed in state (an AuthN indicator to be technical)\n+     * @param awsCredentials The credentials which come from Identity Pool\n+     * @param userSub The id which comes from User Pools", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwODExMA==", "bodyText": "This is the user pools user id - which is really the only ID for a user which is a legit ID in Cognito.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425408110", "createdAt": "2020-05-14T20:23:09Z", "author": {"login": "TrekSoft"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "diffHunk": "@@ -16,104 +16,81 @@\n package com.amplifyframework.auth.cognito;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.core.util.ObjectsCompat;\n \n import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.result.AuthSessionResult;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n \n+import java.util.Objects;\n+\n /**\n  * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n  */\n public final class AWSCognitoAuthSession extends AuthSession implements AWSCredentialsProvider {\n-    private final AWSCredentials awsCredentials;\n-    private final String userSub;\n-    private final String identityId;\n-    private final String accessToken;\n-    private final String idToken;\n-    private final String refreshToken;\n+    private final AuthSessionResult<String> identityId;\n+    private final AuthSessionResult<AWSCredentials> awsCredentials;\n+    private final AuthSessionResult<String> userSub;\n+    private final AuthSessionResult<AWSCognitoUserPoolTokens> userPoolTokens;\n \n-    private AWSCognitoAuthSession(\n+    /**\n+     * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n+     * @param isSignedIn Are you currently in a signed in state (an AuthN indicator to be technical)\n+     * @param awsCredentials The credentials which come from Identity Pool\n+     * @param userSub The id which comes from User Pools", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM0NDk5NQ=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODk1MDA2OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0MjoyMlrOGVrh5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0MjoyMlrOGVrh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NjQ2OQ==", "bodyText": "I like that they are all @NonNull now :)", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425386469", "createdAt": "2020-05-14T19:42:22Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthSession.java", "diffHunk": "@@ -16,104 +16,81 @@\n package com.amplifyframework.auth.cognito;\n \n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.core.util.ObjectsCompat;\n \n import com.amplifyframework.auth.AuthSession;\n+import com.amplifyframework.auth.result.AuthSessionResult;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n \n+import java.util.Objects;\n+\n /**\n  * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n  */\n public final class AWSCognitoAuthSession extends AuthSession implements AWSCredentialsProvider {\n-    private final AWSCredentials awsCredentials;\n-    private final String userSub;\n-    private final String identityId;\n-    private final String accessToken;\n-    private final String idToken;\n-    private final String refreshToken;\n+    private final AuthSessionResult<String> identityId;\n+    private final AuthSessionResult<AWSCredentials> awsCredentials;\n+    private final AuthSessionResult<String> userSub;\n+    private final AuthSessionResult<AWSCognitoUserPoolTokens> userPoolTokens;\n \n-    private AWSCognitoAuthSession(\n+    /**\n+     * Cognito extension of AuthSession containing AWS Cognito specific tokens.\n+     * @param isSignedIn Are you currently in a signed in state (an AuthN indicator to be technical)\n+     * @param awsCredentials The credentials which come from Identity Pool\n+     * @param userSub The id which comes from User Pools\n+     * @param identityId The id which comes from Identity Pools\n+     * @param userPoolTokens The tokens which come from User Pools (access, id, refresh tokens)\n+     */\n+    public AWSCognitoAuthSession(\n             boolean isSignedIn,\n-            AWSCredentials awsCredentials,\n-            String userSub,\n-            String identityId,\n-            String accessToken,\n-            String idToken,\n-            String refreshToken\n+            @NonNull AuthSessionResult<String> identityId,\n+            @NonNull AuthSessionResult<AWSCredentials> awsCredentials,\n+            @NonNull AuthSessionResult<String> userSub,\n+            @NonNull AuthSessionResult<AWSCognitoUserPoolTokens> userPoolTokens\n     ) {\n         super(isSignedIn);\n-        this.awsCredentials = awsCredentials;\n-        this.userSub = userSub;\n-        this.identityId = identityId;\n-        this.accessToken = accessToken;\n-        this.idToken = idToken;\n-        this.refreshToken = refreshToken;\n+        this.identityId = Objects.requireNonNull(identityId);\n+        this.awsCredentials = Objects.requireNonNull(awsCredentials);\n+        this.userSub = Objects.requireNonNull(userSub);\n+        this.userPoolTokens = Objects.requireNonNull(userPoolTokens);\n     }\n \n     /**\n-     * AWS Credentials from Identity Pools.\n-     * @return AWS Credentials from Identity Pools.\n+     * The credentials which come from Identity Pool.\n+     * @return the credentials which come from Identity Pool\n      */\n-    @Nullable\n-    public AWSCredentials getAWSCredentials() {\n+    @NonNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODk3NTY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1MDowOFrOGVryIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNDowMFrOGVs3-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MDYyNA==", "bodyText": "obj == null is redundant and it can be removed", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425390624", "createdAt": "2020-05-14T19:50:08Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwODUwNQ==", "bodyText": "This was the auto generated code by the IDE so planning to leave it as is.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425408505", "createdAt": "2020-05-14T20:24:00Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MDYyNA=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODk5MzkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NToyNFrOGVr9pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNTowMDo0OFrOGWIicw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MzU3NA==", "bodyText": "is it always either-or situation? Is it possible to have partial result, where both result & non-blocking error are returned?\nAlso, can't this be represented with a simple boolean isSuccessful or something? Otherwise, maybe we can rename to Status or State instead? AuthSessionResult#getType() seems very vague, and gives off feeling that authentication is categorized into multiple types of operation.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425393574", "createdAt": "2020-05-14T19:55:24Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {\n+            return false;\n+        } else {\n+            AuthSessionResult<?> authSessionResult = (AuthSessionResult<?>) obj;\n+            return ObjectsCompat.equals(getValue(), authSessionResult.getValue()) &&\n+                    ObjectsCompat.equals(getError(), authSessionResult.getError()) &&\n+                    ObjectsCompat.equals(getType(), authSessionResult.getType());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuthSessionResult{\" +\n+                \"value=\" + getValue() +\n+                \", error=\" + getError() +\n+                \", type=\" + getType() +\n+                '}';\n+    }\n+\n+    /**\n+     * The type of result this was - whether it was successful or a failure.\n+     */\n+    public enum Type {\n+        /**\n+         * Fetch value operation was successful.\n+         * You can retrieve the result with {@link #getValue()}.\n+         */\n+        SUCCESS,\n+        /**\n+         * Fetch value operation failed.\n+         * You can retrieve the exception explaining what went wrong with {@link #getError()}.\n+         */\n+        FAILURE\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTExNg==", "bodyText": "Yeah it is always either or - basically it's designed the way it is to mirror the Swift result object: https://www.swiftbysundell.com/articles/the-power-of-result-types-in-swift/\nAlso mirrors the design Jameson did for an object like this on Android with a getType method.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425409116", "createdAt": "2020-05-14T20:25:11Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {\n+            return false;\n+        } else {\n+            AuthSessionResult<?> authSessionResult = (AuthSessionResult<?>) obj;\n+            return ObjectsCompat.equals(getValue(), authSessionResult.getValue()) &&\n+                    ObjectsCompat.equals(getError(), authSessionResult.getError()) &&\n+                    ObjectsCompat.equals(getType(), authSessionResult.getType());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuthSessionResult{\" +\n+                \"value=\" + getValue() +\n+                \", error=\" + getError() +\n+                \", type=\" + getType() +\n+                '}';\n+    }\n+\n+    /**\n+     * The type of result this was - whether it was successful or a failure.\n+     */\n+    public enum Type {\n+        /**\n+         * Fetch value operation was successful.\n+         * You can retrieve the result with {@link #getValue()}.\n+         */\n+        SUCCESS,\n+        /**\n+         * Fetch value operation failed.\n+         * You can retrieve the exception explaining what went wrong with {@link #getError()}.\n+         */\n+        FAILURE\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MzU3NA=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMTkwNw==", "bodyText": "I guess using a specific enum to represent the state over boolean is fine, and it's not unprecedented as you mention. But I think we should still strive for a clearer name especially for customer-exposed data structures like this. Also, Status is what I'm leaning towards as the name, similarly to this.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425431907", "createdAt": "2020-05-14T21:09:05Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {\n+            return false;\n+        } else {\n+            AuthSessionResult<?> authSessionResult = (AuthSessionResult<?>) obj;\n+            return ObjectsCompat.equals(getValue(), authSessionResult.getValue()) &&\n+                    ObjectsCompat.equals(getError(), authSessionResult.getError()) &&\n+                    ObjectsCompat.equals(getType(), authSessionResult.getType());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuthSessionResult{\" +\n+                \"value=\" + getValue() +\n+                \", error=\" + getError() +\n+                \", type=\" + getType() +\n+                '}';\n+    }\n+\n+    /**\n+     * The type of result this was - whether it was successful or a failure.\n+     */\n+    public enum Type {\n+        /**\n+         * Fetch value operation was successful.\n+         * You can retrieve the result with {@link #getValue()}.\n+         */\n+        SUCCESS,\n+        /**\n+         * Fetch value operation failed.\n+         * You can retrieve the exception explaining what went wrong with {@link #getError()}.\n+         */\n+        FAILURE\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MzU3NA=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2MTc0Nw==", "bodyText": "Discussed offline that the idea of type in the context of request makes sense since there are static success/failure type results vs. state which reflects it could change and that this was the naming decision Jameson went with in mocking out the class: https://gist.github.com/jamesonwilliams/b15b8888c2e759d575c59fb1567ea32f", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425861747", "createdAt": "2020-05-15T15:00:48Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/auth/result/AuthSessionResult.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+/**\n+ * Wraps a session value which could have had an error even though the method fetching it had a success callback.\n+ * @param <T> The type of data this result wraps.\n+ */\n+public final class AuthSessionResult<T> {\n+    private final T value;\n+    private final AuthException error;\n+    private final Type type;\n+\n+    private AuthSessionResult(T value, AuthException error, Type type) {\n+        this.value = value;\n+        this.error = error;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Create a result object for a successful session value fetch operation.\n+     * @param value The value successfully retrieved.\n+     * @param <T> The type of value this stores.\n+     * @return A new result object for the successfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> success(T value) {\n+        return new AuthSessionResult<>(value, null, Type.SUCCESS);\n+    }\n+\n+    /**\n+     * Create a result object for a failed value fetch operation.\n+     * @param error The error describing what went wrong while trying to fetch the value.\n+     * @param <T> The type of value attempting to be retrieved.\n+     * @return A new result object for the unsuccessfully retrieved value.\n+     */\n+    public static <T> AuthSessionResult<T> failure(AuthException error) {\n+        return new AuthSessionResult<>(null, error, Type.FAILURE);\n+    }\n+\n+    /**\n+     * Returns the value which was successfully retrieved.\n+     * @return the value which was successfully retrieved.\n+     */\n+    @Nullable\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the error describing what went wrong while attempting to retrieve the value.\n+     * @return the error describing what went wrong while attempting to retrieve the value.\n+     */\n+    @Nullable\n+    public AuthException getError() {\n+        return error;\n+    }\n+\n+    /**\n+     * Returns the type of result this was - whether it was successful or a failure. Useful for switch statements.\n+     * @return the type of result this was - whether it was successful or a failure.\n+     */\n+    @NonNull\n+    public Type getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getValue(),\n+                getError(),\n+                getType()\n+        );\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AuthSessionResult<?>)) {\n+            return false;\n+        } else {\n+            AuthSessionResult<?> authSessionResult = (AuthSessionResult<?>) obj;\n+            return ObjectsCompat.equals(getValue(), authSessionResult.getValue()) &&\n+                    ObjectsCompat.equals(getError(), authSessionResult.getError()) &&\n+                    ObjectsCompat.equals(getType(), authSessionResult.getType());\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"AuthSessionResult{\" +\n+                \"value=\" + getValue() +\n+                \", error=\" + getError() +\n+                \", type=\" + getType() +\n+                '}';\n+    }\n+\n+    /**\n+     * The type of result this was - whether it was successful or a failure.\n+     */\n+    public enum Type {\n+        /**\n+         * Fetch value operation was successful.\n+         * You can retrieve the result with {@link #getValue()}.\n+         */\n+        SUCCESS,\n+        /**\n+         * Fetch value operation failed.\n+         * You can retrieve the exception explaining what went wrong with {@link #getError()}.\n+         */\n+        FAILURE\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MzU3NA=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTAwMjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1Nzo1OVrOGVsDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNTo0NVrOGVs7pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTAzMA==", "bodyText": "Ooh are we bringing back category sub-exceptions? I liked the design, but all of our other categories don't have them at the moment right?", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425395030", "createdAt": "2020-05-14T19:57:59Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -51,4 +51,144 @@ public AuthException(\n     ) {\n         super(message, recoverySuggestion);\n     }\n+\n+    /**\n+     * Auth exception caused by the user being signed out.\n+     */\n+    public static class SignedOutException extends AuthException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTQ0NA==", "bodyText": "Yeah we need to discuss this as a team for adding to the other categories but for now, added this because it was super necessary for Auth.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425409444", "createdAt": "2020-05-14T20:25:45Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -51,4 +51,144 @@ public AuthException(\n     ) {\n         super(message, recoverySuggestion);\n     }\n+\n+    /**\n+     * Auth exception caused by the user being signed out.\n+     */\n+    public static class SignedOutException extends AuthException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTAzMA=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTAwNTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/AmplifyException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1OTowMVrOGVsFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNTo1NVrOGVs8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTU1Mg==", "bodyText": "AuthException -> AmplifyException", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425395552", "createdAt": "2020-05-14T19:59:01Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/AmplifyException.java", "diffHunk": "@@ -78,4 +79,48 @@ public AmplifyException(\n     public final String getRecoverySuggestion() {\n         return recoverySuggestion;\n     }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their hash.\n+     */\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getRecoverySuggestion(),\n+                getMessage(),\n+                getCause()\n+        );\n+    }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their equality check.\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AmplifyException)) {\n+            return false;\n+        } else {\n+            AmplifyException amplifyException = (AmplifyException) obj;\n+            return ObjectsCompat.equals(getRecoverySuggestion(), amplifyException.getRecoverySuggestion()) &&\n+                    ObjectsCompat.equals(getMessage(), amplifyException.getMessage()) &&\n+                    ObjectsCompat.equals(getCause(), amplifyException.getCause());\n+        }\n+    }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their returned string.\n+     */\n+    @Override\n+    public String toString() {\n+        return \"AuthException {\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTUzOA==", "bodyText": "Ah, nice catch - thanks.", "url": "https://github.com/aws-amplify/amplify-android/pull/457#discussion_r425409538", "createdAt": "2020-05-14T20:25:55Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/AmplifyException.java", "diffHunk": "@@ -78,4 +79,48 @@ public AmplifyException(\n     public final String getRecoverySuggestion() {\n         return recoverySuggestion;\n     }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their hash.\n+     */\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getRecoverySuggestion(),\n+                getMessage(),\n+                getCause()\n+        );\n+    }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their equality check.\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj == null || !(obj instanceof AmplifyException)) {\n+            return false;\n+        } else {\n+            AmplifyException amplifyException = (AmplifyException) obj;\n+            return ObjectsCompat.equals(getRecoverySuggestion(), amplifyException.getRecoverySuggestion()) &&\n+                    ObjectsCompat.equals(getMessage(), amplifyException.getMessage()) &&\n+                    ObjectsCompat.equals(getCause(), amplifyException.getCause());\n+        }\n+    }\n+\n+    /**\n+     * If any child classes override this method, they should be sure to include the recoverySuggestion, message, and\n+     * cause in their returned string.\n+     */\n+    @Override\n+    public String toString() {\n+        return \"AuthException {\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NTU1Mg=="}, "originalCommit": {"oid": "74a67c87c4428947c0ca4195e3564ba76d783d43"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1237, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}