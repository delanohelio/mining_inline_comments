{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4ODE3NDUw", "number": 924, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNTowN1rOExQNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTowNDo0MVrOExVICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDgxMTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNTowN1rOHnSnvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNTowN1rOHnSnvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MTU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note: CLI has been incorrectly generating a value of \"cognito:username\"\n          \n          \n            \n                 * so we also check for this incorrect default value and convert it to the\n          \n          \n            \n                 * proper default of \"username\".\n          \n          \n            \n                 * Note: An older version of the CLI incorrectly generated a value of \"cognito:username\"\n          \n          \n            \n                 * so we also check for this value and convert it to the proper default of \"username\" for \n          \n          \n            \n                 * backwards compatibility.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r510961598", "createdAt": "2020-10-23T15:25:07Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -57,74 +64,89 @@ public AuthRule(com.amplifyframework.core.model.annotations.AuthRule authRule) {\n      * Returns the type of strategy for this {@link AuthRule}.\n      * @return the type of strategy for this {@link AuthRule}\n      */\n+    @NonNull\n     public AuthStrategy getAuthStrategy() {\n-        return this.authStrategy;\n+        return authStrategy;\n     }\n \n     /**\n-     * Used for owner authorization.  Defaults to \"owner\" when using AuthStrategy.OWNER.\n+     * Used for owner authorization.\n+     * Defaults to \"owner\" when using {@link AuthStrategy#OWNER}.\n      *\n      * @return name of a {@link ModelField} of type String which specifies the user which should have access\n      */\n+    @NonNull\n     public String getOwnerFieldOrDefault() {\n-        return Empty.check(this.ownerField) ? \"owner\" : this.ownerField;\n+        return Empty.check(ownerField)\n+            ? DEFAULT_OWNER_FIELD\n+            : ownerField;\n     }\n \n     /**\n-     * Used to specify a custom claim.  Defaults to \"username\" when using AuthStrategy.OWNER.\n-     * CLI has been incorrectly generating a value of \"cognito:username\" so we also check for this incorrect default\n-     * value and convert it to the proper default of \"username\".\n+     * Used to specify a custom claim.\n+     * Defaults to \"username\" when using AuthStrategy.OWNER.\n+     *\n+     * Note: CLI has been incorrectly generating a value of \"cognito:username\"\n+     * so we also check for this incorrect default value and convert it to the\n+     * proper default of \"username\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDg3OTg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozOTo0NVrOHnTSSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyNDoxMlrOHnW1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MjQ5MQ==", "bodyText": "I kind of think the original implementation is more readable.  What do you think?   We talked about this before here.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r510972491", "createdAt": "2020-10-23T15:39:45Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -57,74 +64,89 @@ public AuthRule(com.amplifyframework.core.model.annotations.AuthRule authRule) {\n      * Returns the type of strategy for this {@link AuthRule}.\n      * @return the type of strategy for this {@link AuthRule}\n      */\n+    @NonNull\n     public AuthStrategy getAuthStrategy() {\n-        return this.authStrategy;\n+        return authStrategy;\n     }\n \n     /**\n-     * Used for owner authorization.  Defaults to \"owner\" when using AuthStrategy.OWNER.\n+     * Used for owner authorization.\n+     * Defaults to \"owner\" when using {@link AuthStrategy#OWNER}.\n      *\n      * @return name of a {@link ModelField} of type String which specifies the user which should have access\n      */\n+    @NonNull\n     public String getOwnerFieldOrDefault() {\n-        return Empty.check(this.ownerField) ? \"owner\" : this.ownerField;\n+        return Empty.check(ownerField)\n+            ? DEFAULT_OWNER_FIELD\n+            : ownerField;\n     }\n \n     /**\n-     * Used to specify a custom claim.  Defaults to \"username\" when using AuthStrategy.OWNER.\n-     * CLI has been incorrectly generating a value of \"cognito:username\" so we also check for this incorrect default\n-     * value and convert it to the proper default of \"username\".\n+     * Used to specify a custom claim.\n+     * Defaults to \"username\" when using AuthStrategy.OWNER.\n+     *\n+     * Note: CLI has been incorrectly generating a value of \"cognito:username\"\n+     * so we also check for this incorrect default value and convert it to the\n+     * proper default of \"username\".\n      *\n      * @return identity claim\n      */\n+    @NonNull\n     public String getIdentityClaimOrDefault() {\n-        return Empty.check(this.identityClaim) || \"cognito:username\".equals(this.identityClaim) ?\n-                \"username\" :\n-                this.identityClaim;\n+        final String cliGeneratedIdentityClaim = \"cognito:username\";\n+        return Empty.check(identityClaim) || cliGeneratedIdentityClaim.equals(identityClaim)\n+            ? DEFAULT_IDENTITY_CLAIM\n+            : identityClaim;\n     }\n \n     /**\n-     * Used to specify a custom claim.   Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n+     * Used for dynamic group authorization.\n+     * Defaults to \"groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return group claim\n+     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n+     * which should have access.\n      */\n-    public String getGroupClaim() {\n-        return this.groupClaim;\n+    @NonNull\n+    public String getGroupsFieldOrDefault() {\n+        return Empty.check(groupsField)\n+            ? DEFAULT_GROUPS_FIELD\n+            : groupsField;\n     }\n \n     /**\n-     * Used for static group authorization.\n+     * Used to specify a custom claim.\n+     * Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return array of groups which should have access\n+     * @return group claim\n      */\n-    public List<String> getGroups() {\n-        return this.groups;\n+    @NonNull\n+    public String getGroupClaimOrDefault() {\n+        return Empty.check(groupClaim)\n+            ? DEFAULT_GROUP_CLAIM\n+            : groupClaim;\n     }\n \n     /**\n-     * Used for dynamic group authorization.  Defaults to \"groups\" when using AuthStrategy.GROUPS.\n+     * Used for static group authorization.\n      *\n-     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n-     * which should have access.\n+     * @return array of groups which should have access\n      */\n-    public String getGroupsFieldOrDefault() {\n-        return Empty.check(this.groupsField) ? \"groups\" : this.groupsField;\n+    @NonNull\n+    public List<String> getGroups() {\n+        return Immutable.of(groups);\n     }\n \n     /**\n      * Specifies which {@link ModelOperation}s are protected by this {@link AuthRule}.  Any operations not included in\n      * the list are not protected by default.\n      * @return list of {@link ModelOperation}s for which this {@link AuthRule} should apply.\n      */\n+    @NonNull\n     public List<ModelOperation> getOperationsOrDefault() {\n-        if (Empty.check(this.operations)) {\n-            return Arrays.asList(\n-                    ModelOperation.CREATE,\n-                    ModelOperation.UPDATE,\n-                    ModelOperation.DELETE,\n-                    ModelOperation.READ);\n-        }\n-        return this.operations;\n+        return Immutable.of(Empty.check(operations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyOTUyOA==", "bodyText": "I still think that this change makes it clear that the intention is to add every ModelOperation enums to the list, and also futureproofs for when a new value is added or removed from the enum.\nHowever, I added a comment with an explicit list of the values to improve readability as a compromise. Would that work?", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511029528", "createdAt": "2020-10-23T17:21:58Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -57,74 +64,89 @@ public AuthRule(com.amplifyframework.core.model.annotations.AuthRule authRule) {\n      * Returns the type of strategy for this {@link AuthRule}.\n      * @return the type of strategy for this {@link AuthRule}\n      */\n+    @NonNull\n     public AuthStrategy getAuthStrategy() {\n-        return this.authStrategy;\n+        return authStrategy;\n     }\n \n     /**\n-     * Used for owner authorization.  Defaults to \"owner\" when using AuthStrategy.OWNER.\n+     * Used for owner authorization.\n+     * Defaults to \"owner\" when using {@link AuthStrategy#OWNER}.\n      *\n      * @return name of a {@link ModelField} of type String which specifies the user which should have access\n      */\n+    @NonNull\n     public String getOwnerFieldOrDefault() {\n-        return Empty.check(this.ownerField) ? \"owner\" : this.ownerField;\n+        return Empty.check(ownerField)\n+            ? DEFAULT_OWNER_FIELD\n+            : ownerField;\n     }\n \n     /**\n-     * Used to specify a custom claim.  Defaults to \"username\" when using AuthStrategy.OWNER.\n-     * CLI has been incorrectly generating a value of \"cognito:username\" so we also check for this incorrect default\n-     * value and convert it to the proper default of \"username\".\n+     * Used to specify a custom claim.\n+     * Defaults to \"username\" when using AuthStrategy.OWNER.\n+     *\n+     * Note: CLI has been incorrectly generating a value of \"cognito:username\"\n+     * so we also check for this incorrect default value and convert it to the\n+     * proper default of \"username\".\n      *\n      * @return identity claim\n      */\n+    @NonNull\n     public String getIdentityClaimOrDefault() {\n-        return Empty.check(this.identityClaim) || \"cognito:username\".equals(this.identityClaim) ?\n-                \"username\" :\n-                this.identityClaim;\n+        final String cliGeneratedIdentityClaim = \"cognito:username\";\n+        return Empty.check(identityClaim) || cliGeneratedIdentityClaim.equals(identityClaim)\n+            ? DEFAULT_IDENTITY_CLAIM\n+            : identityClaim;\n     }\n \n     /**\n-     * Used to specify a custom claim.   Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n+     * Used for dynamic group authorization.\n+     * Defaults to \"groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return group claim\n+     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n+     * which should have access.\n      */\n-    public String getGroupClaim() {\n-        return this.groupClaim;\n+    @NonNull\n+    public String getGroupsFieldOrDefault() {\n+        return Empty.check(groupsField)\n+            ? DEFAULT_GROUPS_FIELD\n+            : groupsField;\n     }\n \n     /**\n-     * Used for static group authorization.\n+     * Used to specify a custom claim.\n+     * Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return array of groups which should have access\n+     * @return group claim\n      */\n-    public List<String> getGroups() {\n-        return this.groups;\n+    @NonNull\n+    public String getGroupClaimOrDefault() {\n+        return Empty.check(groupClaim)\n+            ? DEFAULT_GROUP_CLAIM\n+            : groupClaim;\n     }\n \n     /**\n-     * Used for dynamic group authorization.  Defaults to \"groups\" when using AuthStrategy.GROUPS.\n+     * Used for static group authorization.\n      *\n-     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n-     * which should have access.\n+     * @return array of groups which should have access\n      */\n-    public String getGroupsFieldOrDefault() {\n-        return Empty.check(this.groupsField) ? \"groups\" : this.groupsField;\n+    @NonNull\n+    public List<String> getGroups() {\n+        return Immutable.of(groups);\n     }\n \n     /**\n      * Specifies which {@link ModelOperation}s are protected by this {@link AuthRule}.  Any operations not included in\n      * the list are not protected by default.\n      * @return list of {@link ModelOperation}s for which this {@link AuthRule} should apply.\n      */\n+    @NonNull\n     public List<ModelOperation> getOperationsOrDefault() {\n-        if (Empty.check(this.operations)) {\n-            return Arrays.asList(\n-                    ModelOperation.CREATE,\n-                    ModelOperation.UPDATE,\n-                    ModelOperation.DELETE,\n-                    ModelOperation.READ);\n-        }\n-        return this.operations;\n+        return Immutable.of(Empty.check(operations)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MjQ5MQ=="}, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzMDY0MA==", "bodyText": "Seems reasonable!", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511030640", "createdAt": "2020-10-23T17:24:12Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -57,74 +64,89 @@ public AuthRule(com.amplifyframework.core.model.annotations.AuthRule authRule) {\n      * Returns the type of strategy for this {@link AuthRule}.\n      * @return the type of strategy for this {@link AuthRule}\n      */\n+    @NonNull\n     public AuthStrategy getAuthStrategy() {\n-        return this.authStrategy;\n+        return authStrategy;\n     }\n \n     /**\n-     * Used for owner authorization.  Defaults to \"owner\" when using AuthStrategy.OWNER.\n+     * Used for owner authorization.\n+     * Defaults to \"owner\" when using {@link AuthStrategy#OWNER}.\n      *\n      * @return name of a {@link ModelField} of type String which specifies the user which should have access\n      */\n+    @NonNull\n     public String getOwnerFieldOrDefault() {\n-        return Empty.check(this.ownerField) ? \"owner\" : this.ownerField;\n+        return Empty.check(ownerField)\n+            ? DEFAULT_OWNER_FIELD\n+            : ownerField;\n     }\n \n     /**\n-     * Used to specify a custom claim.  Defaults to \"username\" when using AuthStrategy.OWNER.\n-     * CLI has been incorrectly generating a value of \"cognito:username\" so we also check for this incorrect default\n-     * value and convert it to the proper default of \"username\".\n+     * Used to specify a custom claim.\n+     * Defaults to \"username\" when using AuthStrategy.OWNER.\n+     *\n+     * Note: CLI has been incorrectly generating a value of \"cognito:username\"\n+     * so we also check for this incorrect default value and convert it to the\n+     * proper default of \"username\".\n      *\n      * @return identity claim\n      */\n+    @NonNull\n     public String getIdentityClaimOrDefault() {\n-        return Empty.check(this.identityClaim) || \"cognito:username\".equals(this.identityClaim) ?\n-                \"username\" :\n-                this.identityClaim;\n+        final String cliGeneratedIdentityClaim = \"cognito:username\";\n+        return Empty.check(identityClaim) || cliGeneratedIdentityClaim.equals(identityClaim)\n+            ? DEFAULT_IDENTITY_CLAIM\n+            : identityClaim;\n     }\n \n     /**\n-     * Used to specify a custom claim.   Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n+     * Used for dynamic group authorization.\n+     * Defaults to \"groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return group claim\n+     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n+     * which should have access.\n      */\n-    public String getGroupClaim() {\n-        return this.groupClaim;\n+    @NonNull\n+    public String getGroupsFieldOrDefault() {\n+        return Empty.check(groupsField)\n+            ? DEFAULT_GROUPS_FIELD\n+            : groupsField;\n     }\n \n     /**\n-     * Used for static group authorization.\n+     * Used to specify a custom claim.\n+     * Defaults to \"cognito:groups\" when using AuthStrategy.GROUPS.\n      *\n-     * @return array of groups which should have access\n+     * @return group claim\n      */\n-    public List<String> getGroups() {\n-        return this.groups;\n+    @NonNull\n+    public String getGroupClaimOrDefault() {\n+        return Empty.check(groupClaim)\n+            ? DEFAULT_GROUP_CLAIM\n+            : groupClaim;\n     }\n \n     /**\n-     * Used for dynamic group authorization.  Defaults to \"groups\" when using AuthStrategy.GROUPS.\n+     * Used for static group authorization.\n      *\n-     * @return name of a {@link ModelField} of type String or array of Strings which specifies a group or list of groups\n-     * which should have access.\n+     * @return array of groups which should have access\n      */\n-    public String getGroupsFieldOrDefault() {\n-        return Empty.check(this.groupsField) ? \"groups\" : this.groupsField;\n+    @NonNull\n+    public List<String> getGroups() {\n+        return Immutable.of(groups);\n     }\n \n     /**\n      * Specifies which {@link ModelOperation}s are protected by this {@link AuthRule}.  Any operations not included in\n      * the list are not protected by default.\n      * @return list of {@link ModelOperation}s for which this {@link AuthRule} should apply.\n      */\n+    @NonNull\n     public List<ModelOperation> getOperationsOrDefault() {\n-        if (Empty.check(this.operations)) {\n-            return Arrays.asList(\n-                    ModelOperation.CREATE,\n-                    ModelOperation.UPDATE,\n-                    ModelOperation.DELETE,\n-                    ModelOperation.READ);\n-        }\n-        return this.operations;\n+        return Immutable.of(Empty.check(operations)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MjQ5MQ=="}, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDkzMDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1Mjo1MlrOHnTyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxNToxOFrOHnWjmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDYyMg==", "bodyText": "I think == is slightly better than ObjectsCompat.equals when comparing enums.  They both evaluate to the same thing, but == does type checking at compile time, whereas ObjectsCompat.equals doesn't do it until runtime.    Not a huge deal either way thoughn.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r510980622", "createdAt": "2020-10-23T15:52:52Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -139,18 +161,26 @@ public boolean equals(Object object) {\n \n         AuthRule authRule = (AuthRule) object;\n \n-        return authStrategy == authRule.authStrategy &&\n+        return ObjectsCompat.equals(authStrategy, authRule.authStrategy) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNjA3NQ==", "bodyText": "haha that's a subtlety that I didn't know about. thanks for that!", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511026075", "createdAt": "2020-10-23T17:15:18Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/core/model/AuthRule.java", "diffHunk": "@@ -139,18 +161,26 @@ public boolean equals(Object object) {\n \n         AuthRule authRule = (AuthRule) object;\n \n-        return authStrategy == authRule.authStrategy &&\n+        return ObjectsCompat.equals(authStrategy, authRule.authStrategy) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDYyMg=="}, "originalCommit": {"oid": "5f9228fc2ce8c90f56ae311bc7bfa2e8e72a80a1"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTYwMTcwOnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo1OToxMVrOHnaMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo1OToxMVrOHnaMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4NTcwMg==", "bodyText": "I would just let this bubble up and crash the test. You can put it on the @Before and helper method signatures.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511085702", "createdAt": "2020-10-23T18:59:11Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTYwNTQ1OnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTowMDoxM1rOHnaOpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1MTowNFrOHneGBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4NjI0Ng==", "bodyText": "This is a little weird, where you set the apiName, but then apiName isn't used anywhere in this @Test. IF you need the apiName value elsewhere, can you pass it into a helper method, instance of relying on the instance state of the test class?", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511086246", "createdAt": "2020-10-23T19:00:13Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0OTU3Mw==", "bodyText": "I do agree that relying on the instance state is less than ideal, and I did give this approach a try. I decided against it because\n\nmost of these tests were not originally written by me, so I would rather maintain the syntax of the original tests when appending my own.\nadding in another parameter to isOwnerArgumentAdded() method made the test suite look overall very verbose without adding too much value to the comprehensibility of the tests (since every assertion in a given test case will use the same API).", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511149573", "createdAt": "2020-10-23T20:51:04Z", "author": {"login": "raphkim"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4NjI0Ng=="}, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTYwNzgyOnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTowMTowNlrOHnaQGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0ODowMVrOHneBFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4NjYxNg==", "bodyText": "Is returning null a reasonable failure mode? Why doesn't it throw a BadAuthException or something to that effect?", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511086616", "createdAt": "2020-10-23T19:01:06Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0ODMxMA==", "bodyText": "API plugin returns a null operation when encountering a failure even before sending in a network request. I can also do an assertion on the failure callback, but since the above behavior is already set in stone, I figured it would be redundant. Also the helper method subscribe(GraphQLRequest) was written to simplify a lot of the logic behind dealing with callbacks in this test (which mostly deals with request decoration rather than the actual result of the operation), so I would rather not add a layer of complexity here.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511148310", "createdAt": "2020-10-23T20:48:01Z", "author": {"login": "raphkim"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4NjYxNg=="}, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTYxMDA5OnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTowMTo1MlrOHnaRZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0NDowOVrOHnd69A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4Njk1MQ==", "bodyText": "Looks like it could be a for (or for-for) loop?", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511086951", "createdAt": "2020-10-23T19:01:52Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);\n+    }\n+\n+    /**\n+     * Test that request is serialized as expected, with owner variable.\n+     * @throws JSONException from JSONAssert.assertEquals\n+     */\n+    @Test\n+    public void ownerArgumentIsAddedAndSerializedInRequest() throws JSONException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        assertNotNull(operation);\n+        JSONAssert.assertEquals(Resources.readAsString(\"request-owner-auth.json\"),\n+                operation.getRequest().getContent(),\n+                true);\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using Cognito User Pools auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_UPDATE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_DELETE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_CREATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_CREATE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0Njc0MA==", "bodyText": "This was not originally written by me, but I think this format improves readability.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511146740", "createdAt": "2020-10-23T20:44:09Z", "author": {"login": "raphkim"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);\n+    }\n+\n+    /**\n+     * Test that request is serialized as expected, with owner variable.\n+     * @throws JSONException from JSONAssert.assertEquals\n+     */\n+    @Test\n+    public void ownerArgumentIsAddedAndSerializedInRequest() throws JSONException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        assertNotNull(operation);\n+        JSONAssert.assertEquals(Resources.readAsString(\"request-owner-auth.json\"),\n+                operation.getRequest().getContent(),\n+                true);\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using Cognito User Pools auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_UPDATE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_DELETE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_CREATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_CREATE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4Njk1MQ=="}, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTYxODAzOnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTowNDo0MVrOHnaWQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo0MzowNVrOHnd5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4ODE5NQ==", "bodyText": "I think you need some helper methods to simplify all of these imperative checks.\nMaybe varargs:\nassertOwnerArguments(SubscriptionType.ON_DELETE,\n    OwnerCreate.class, OwnerUpdate.class, OwnerDelete.class));\nor:\nassertOwnerArguments(OwnerUpdate.class, SubscriptionType.values());\n^ Then you could use a single for-loop to go over a list of OnwerUpdate.class, OwnerDelete.class, etc.?", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511088195", "createdAt": "2020-10-23T19:04:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);\n+    }\n+\n+    /**\n+     * Test that request is serialized as expected, with owner variable.\n+     * @throws JSONException from JSONAssert.assertEquals\n+     */\n+    @Test\n+    public void ownerArgumentIsAddedAndSerializedInRequest() throws JSONException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        assertNotNull(operation);\n+        JSONAssert.assertEquals(Resources.readAsString(\"request-owner-auth.json\"),\n+                operation.getRequest().getContent(),\n+                true);\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using Cognito User Pools auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_UPDATE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_DELETE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_CREATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_CREATE));\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using OpenID Connect auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithOidc() throws AmplifyException {\n+        // Set API to use OpenID Connect auth mode\n+        apiName = GRAPHQL_API_WITH_OIDC;\n+\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_CREATE));\n+    }\n+\n+    /**\n+     * Verify owner argument is NOT required if the subscription type is not one of the restricted operations.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedIfOperationNotRestrictedWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertFalse(isOwnerArgumentAdded(OwnerCreate.class, SubscriptionType.ON_UPDATE));\n+        assertFalse(isOwnerArgumentAdded(OwnerUpdate.class, SubscriptionType.ON_UPDATE));\n+        assertFalse(isOwnerArgumentAdded(OwnerDelete.class, SubscriptionType.ON_UPDATE));\n+\n+        assertFalse(isOwnerArgumentAdded(OwnerCreate.class, SubscriptionType.ON_DELETE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0NjI4Nw==", "bodyText": "I wanted to maintain the original syntax on how the tests were originally written, but I may revisit it another time to create static methods for assertion.", "url": "https://github.com/aws-amplify/amplify-android/pull/924#discussion_r511146287", "createdAt": "2020-10-23T20:43:05Z", "author": {"login": "raphkim"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/auth/OwnerBasedAuthTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.ApiGraphQLRequestOptions;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLOperation;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.Operation;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.graphql.model.ModelSubscription;\n+import com.amplifyframework.core.NoOpConsumer;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelOperation;\n+import com.amplifyframework.core.model.annotations.AuthRule;\n+import com.amplifyframework.core.model.annotations.ModelConfig;\n+import com.amplifyframework.testmodels.ownerauth.OwnerAuth;\n+import com.amplifyframework.testutils.EmptyAction;\n+import com.amplifyframework.testutils.Resources;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+\n+import okhttp3.HttpUrl;\n+import okhttp3.mockwebserver.MockWebServer;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests owner-based auth for Cognito User Pools and OIDC authorized APIs.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class OwnerBasedAuthTest {\n+    private static final String GRAPHQL_API_WITH_API_KEY = \"graphQlApi_apiKey\";\n+    private static final String GRAPHQL_API_WITH_COGNITO = \"graphQlApi_cognito\";\n+    private static final String GRAPHQL_API_WITH_OIDC = \"graphQlApi_oidc\";\n+\n+    private MockWebServer webServer;\n+    private HttpUrl baseUrl;\n+    private AWSApiPlugin plugin;\n+    private CognitoUserPoolsAuthProvider cognitoProvider;\n+    private OidcAuthProvider oidcProvider;\n+    private String apiName;\n+\n+    /**\n+     * Sets up the test.\n+     * @throws ApiException On failure to configure plugin\n+     * @throws IOException On failure to start web server\n+     */\n+    @Before\n+    public void setup() throws ApiException, IOException {\n+        webServer = new MockWebServer();\n+        webServer.start(8080);\n+        baseUrl = webServer.url(\"/\");\n+        cognitoProvider = new FakeCognitoAuthProvider();\n+        oidcProvider = new FakeOidcAuthProvider();\n+        configurePlugin();\n+    }\n+\n+    /**\n+     * Stop the {@link MockWebServer} that was started in {@link #setup()}.\n+     * @throws IOException On failure to shutdown the MockWebServer\n+     */\n+    @After\n+    public void cleanup() throws IOException {\n+        webServer.shutdown();\n+    }\n+\n+    private void configurePlugin() throws ApiException {\n+        ApiAuthProviders providers = ApiAuthProviders.builder()\n+                .cognitoUserPoolsAuthProvider(cognitoProvider)\n+                .oidcAuthProvider(oidcProvider)\n+                .build();\n+        JSONObject configuration = new JSONObject();\n+        try {\n+            configuration = configuration\n+                .put(GRAPHQL_API_WITH_API_KEY, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"FAKE-API-KEY\"))\n+                .put(GRAPHQL_API_WITH_COGNITO, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"AMAZON_COGNITO_USER_POOLS\"))\n+                .put(GRAPHQL_API_WITH_OIDC, new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", baseUrl.url())\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"authorizationType\", \"OPENID_CONNECT\"));\n+        } catch (JSONException exception) {\n+            // This shouldn't happen...\n+        }\n+\n+        plugin = new AWSApiPlugin(providers);\n+        plugin.configure(configuration, ApplicationProvider.getApplicationContext());\n+    }\n+\n+    /**\n+     * Test that owner argument fails to be appended to subscription request if\n+     * the authorization mode is not OIDC compliant.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedWithApiKey() {\n+        // Set API to use API key auth mode\n+        apiName = GRAPHQL_API_WITH_API_KEY;\n+\n+        // Attempting to subscribe to a model with owner-based auth with API key auth mode.\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        // Subscription should fail at pre-processing\n+        assertNull(operation);\n+    }\n+\n+    /**\n+     * Test that request is serialized as expected, with owner variable.\n+     * @throws JSONException from JSONAssert.assertEquals\n+     */\n+    @Test\n+    public void ownerArgumentIsAddedAndSerializedInRequest() throws JSONException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        GraphQLRequest<OwnerAuth> request = ModelSubscription.onCreate(OwnerAuth.class);\n+        GraphQLOperation<OwnerAuth> operation = subscribe(request);\n+\n+        assertNotNull(operation);\n+        JSONAssert.assertEquals(Resources.readAsString(\"request-owner-auth.json\"),\n+                operation.getRequest().getContent(),\n+                true);\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using Cognito User Pools auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_UPDATE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_DELETE));\n+\n+        assertTrue(isOwnerArgumentAdded(Owner.class, SubscriptionType.ON_CREATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerRead.class, SubscriptionType.ON_CREATE));\n+    }\n+\n+    /**\n+     * Verify that owner argument is required for all subscriptions if ModelOperation.READ is specified\n+     * while using OpenID Connect auth mode.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentAddedForRestrictedReadWithOidc() throws AmplifyException {\n+        // Set API to use OpenID Connect auth mode\n+        apiName = GRAPHQL_API_WITH_OIDC;\n+\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_UPDATE));\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_DELETE));\n+        assertTrue(isOwnerArgumentAdded(OwnerOidc.class, SubscriptionType.ON_CREATE));\n+    }\n+\n+    /**\n+     * Verify owner argument is NOT required if the subscription type is not one of the restricted operations.\n+     * @throws AmplifyException if a ModelSchema can't be derived from the Model class.\n+     */\n+    @Test\n+    public void ownerArgumentNotAddedIfOperationNotRestrictedWithUserPools() throws AmplifyException {\n+        // Set API to use Cognito User Pools auth mode\n+        apiName = GRAPHQL_API_WITH_COGNITO;\n+\n+        assertFalse(isOwnerArgumentAdded(OwnerCreate.class, SubscriptionType.ON_UPDATE));\n+        assertFalse(isOwnerArgumentAdded(OwnerUpdate.class, SubscriptionType.ON_UPDATE));\n+        assertFalse(isOwnerArgumentAdded(OwnerDelete.class, SubscriptionType.ON_UPDATE));\n+\n+        assertFalse(isOwnerArgumentAdded(OwnerCreate.class, SubscriptionType.ON_DELETE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA4ODE5NQ=="}, "originalCommit": {"oid": "ed32f9ef33dc99d8895769f5b762b9c2890f71de"}, "originalPosition": 217}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 990, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}