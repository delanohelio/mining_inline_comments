{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzkzNTQz", "number": 394, "title": "Implement online celebrity + label detection", "bodyText": "Issue #, if available:\nDescription of changes:\n\nAdded result models related to identify verb (most of the line-count)\nSee Rekognition service for main implementation details\nIdentifyAction interface to simulate iOS's \"enum within enum\"\n\nSee IdentifyActionType, LabelType, and TextFormatType\n\n\nNo configuration yet\nAdded integration test\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-23T09:29:40Z", "url": "https://github.com/aws-amplify/amplify-android/pull/394", "merged": true, "mergeCommit": {"oid": "d9de9531b795d9d8dbddc34dd62d83685e8f842f"}, "closed": true, "closedAt": "2020-04-24T21:30:17Z", "author": {"login": "raphkim"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZgf_zAH2gAyNDA3NzkzNTQzOjQyYjNiZTgzZGViOTJlNzI4ZGYzZTlhYmFkNjIzNDdmOTMyZTg1NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca4G6kgFqTQwMDI3MjYxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "42b3be83deb92e728df3e9abad62347f932e8558", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/42b3be83deb92e728df3e9abad62347f932e8558", "committedDate": "2020-04-20T15:06:06Z", "message": "Rename feature type name to alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32470ab3e4903a4e41fb4d1efc56913d16f2bc55", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/32470ab3e4903a4e41fb4d1efc56913d16f2bc55", "committedDate": "2020-04-20T15:06:21Z", "message": "Add identify-related models"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ab5f6c62ca4178264952c97a002bc9b1ab3af5d", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9ab5f6c62ca4178264952c97a002bc9b1ab3af5d", "committedDate": "2020-04-23T09:09:53Z", "message": "Implement celebrity + label detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a3ff7ee897250815d16d260f3b12418a378889", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/57a3ff7ee897250815d16d260f3b12418a378889", "committedDate": "2020-04-23T09:33:43Z", "message": "minor fix-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e778c55839073a0d7ef5663afe23c0b5fb6871", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/54e778c55839073a0d7ef5663afe23c0b5fb6871", "committedDate": "2020-04-23T17:10:34Z", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into identify-aws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f9389ea95a1052543eeb041af1ea10d1adb77d7", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9f9389ea95a1052543eeb041af1ea10d1adb77d7", "committedDate": "2020-04-23T17:11:49Z", "message": "Unused import fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9594674e095e301781fdbd3ae207e4f7ce1e0a2d", "committedDate": "2020-04-23T17:33:57Z", "message": "Replace PoseFeature with Pose"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDk0OTI1", "url": "https://github.com/aws-amplify/amplify-android/pull/394#pullrequestreview-399494925", "createdAt": "2020-04-23T21:36:55Z", "commit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "state": "COMMENTED", "comments": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMTozNjo1NVrOGK9KYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowNzoyMFrOGK_rFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0MTAyNg==", "bodyText": "Even though this is wired to be a no-op, shouldn't you still call start(), here?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414141026", "createdAt": "2020-04-23T21:36:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java", "diffHunk": "@@ -132,15 +138,37 @@ public TensorFlowPredictionsEscapeHatch getEscapeHatch() {\n         return new TensorFlowTranslateTextOperation(onError);\n     }\n \n+    @NonNull\n+    @Override\n+    public IdentifyOperation<?> identify(\n+            @NonNull IdentifyAction actionType,\n+            @NonNull Bitmap image,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        return new TensorFlowIdentifyOperation(actionType, onError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0MTEwNw==", "bodyText": "Even though this is wired to be a no-op, shouldn't you still call start(), here?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414141107", "createdAt": "2020-04-23T21:37:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/TensorFlowPredictionsPlugin.java", "diffHunk": "@@ -132,15 +138,37 @@ public TensorFlowPredictionsEscapeHatch getEscapeHatch() {\n         return new TensorFlowTranslateTextOperation(onError);\n     }\n \n+    @NonNull\n+    @Override\n+    public IdentifyOperation<?> identify(\n+            @NonNull IdentifyAction actionType,\n+            @NonNull Bitmap image,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        return new TensorFlowIdentifyOperation(actionType, onError);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public IdentifyOperation<?> identify(\n+            @NonNull IdentifyAction actionType,\n+            @NonNull Bitmap image,\n+            @NonNull IdentifyOptions options,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        return new TensorFlowIdentifyOperation(actionType, onError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0MjU3OA==", "bodyText": "Can you add units to this? Is it minimum size in dp, px, etc? MINIMUM_IMAGE_SIZE_PX?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414142578", "createdAt": "2020-04-23T21:40:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0NDY0MQ==", "bodyText": "This is very broad. Can you throws SpecificSituationException, PredictionsException, under the condition of @throws SpecificSituationException Only when specific conditions A is met, and @throws PredictionsException this is the expected outcome of this test?\n(Same for all.)", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414144641", "createdAt": "2020-04-23T21:43:50Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify fails for invalid image.\n+     * An image with less than 80x80 size limit will throw\n+     * validation error from the service.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testIdentifyFailsForSmallImage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0ODM5NA==", "bodyText": "You could consider moving these various Bitmap creation rules to a test utility. It will add a tiny bit of clarity to the phrasing of the test code. You could have like:\nfinal class TestBitmaps {\n    private TestBitmaps() {}\n\n    static Bitmap coloredSquare(int ofSizeInPixels, @ColorInt int withBackgroundColor) {\n        ...\n    }\n\n    static Bitmap redSquare(int ofSizeInPixels) {\n        return coloredSquare(ofSizeInPixels, Color.RED);\n    }\n}\n\nThen your tests would be like:\nBitmap redSquare = TestBitmap.redSquare(MINIMUM_IMAGE_SIZE);\n\nRef: @ColorInt, Android Color.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414148394", "createdAt": "2020-04-23T21:51:17Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify fails for invalid image.\n+     * An image with less than 80x80 size limit will throw\n+     * validation error from the service.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testIdentifyFailsForSmallImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE - 1,\n+                MINIMUM_IMAGE_SIZE - 1, Bitmap.Config.ARGB_8888);\n+        predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE,\n+                MINIMUM_IMAGE_SIZE, Bitmap.Config.ARGB_8888);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE0OTczNQ==", "bodyText": "I would go further and drill down into the properties of the celebrity itself. What are reasonable/expected values for a blank image?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414149735", "createdAt": "2020-04-23T21:54:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify fails for invalid image.\n+     * An image with less than 80x80 size limit will throw\n+     * validation error from the service.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testIdentifyFailsForSmallImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE - 1,\n+                MINIMUM_IMAGE_SIZE - 1, Bitmap.Config.ARGB_8888);\n+        predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE,\n+                MINIMUM_IMAGE_SIZE, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the celebrity inside given image and assert non-null result.\n+        IdentifyCelebritiesResult result = predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert nobody is detected\n+        List<CelebrityDetails> celebs = result.getCelebrities();\n+        assertTrue(celebs.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1MDc3OA==", "bodyText": "Possibly you could add a factory to our Assets utility, to read a reference directly as a Bitmap.  So that alongside Assets.readAsString, we have a new Assets.readAsBitmap.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414150778", "createdAt": "2020-04-23T21:56:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify fails for invalid image.\n+     * An image with less than 80x80 size limit will throw\n+     * validation error from the service.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testIdentifyFailsForSmallImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE - 1,\n+                MINIMUM_IMAGE_SIZE - 1, Bitmap.Config.ARGB_8888);\n+        predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE,\n+                MINIMUM_IMAGE_SIZE, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the celebrity inside given image and assert non-null result.\n+        IdentifyCelebritiesResult result = predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert nobody is detected\n+        List<CelebrityDetails> celebs = result.getCelebrities();\n+        assertTrue(celebs.isEmpty());\n+    }\n+\n+    /**\n+     * Assert celebrity detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyCelebrities() throws Exception {\n+        InputStream bezosJpeg = getApplicationContext()\n+                .getAssets().open(\"jeff_bezos.jpg\");\n+        final Bitmap image = BitmapFactory.decodeStream(bezosJpeg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NTI2NQ==", "bodyText": "I really love the Stream APIs. But they are only available on Android as of API 24. If this were a unit test, that'd probably be okay, since we either don't involve Android in unit tests, or use Robolectric and assert a fairly high API level (28).\nHowever, this will be problematic when we go to run the integration test suite on an API 16 device.\nSo, as much as I'd love to do streams, I think we need to avoid this, at least in this file, right now.\nRx has some similar functional concepts, and I have started using it in my test code, just so that I can regain some of these Java 8 functional behaviors, in an API-level-compatible fashion.\nI'm not sure that there's any anyMatch() filter in Rx, but you could at least do:\nassertTrue(Observable.fromIterable(restult.getCelebrities())\n    .map(celeb -> celeb.getCelebrity().getName())\n    .toList()\n    .blockingGet()\n    .contains(\"Jeff Bezos\"));\n\nOr, maybe similarly expressed with Hamcrest:\nassertThat(\n    Observable.fromIterable(restult.getCelebrities())\n        .map(celeb -> celeb.getCelebrity().getName())\n        .toList()\n        .blockingGet(),\n    containsInAnyOrder(\"Jeff Bezos\")\n);\n\nKeep in mind that in order to achieve this you'd only need to add androidTestImplementation dependencies.rx, not implementation dependencies.rx.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414155265", "createdAt": "2020-04-23T22:05:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyCelebritiesTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.CelebrityDetails;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyCelebritiesResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * celebrity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyCelebritiesTest {\n+\n+    private static final int MINIMUM_IMAGE_SIZE = 80;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify fails for invalid image.\n+     * An image with less than 80x80 size limit will throw\n+     * validation error from the service.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test(expected = PredictionsException.class)\n+    public void testIdentifyFailsForSmallImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE - 1,\n+                MINIMUM_IMAGE_SIZE - 1, Bitmap.Config.ARGB_8888);\n+        predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(MINIMUM_IMAGE_SIZE,\n+                MINIMUM_IMAGE_SIZE, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the celebrity inside given image and assert non-null result.\n+        IdentifyCelebritiesResult result = predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert nobody is detected\n+        List<CelebrityDetails> celebs = result.getCelebrities();\n+        assertTrue(celebs.isEmpty());\n+    }\n+\n+    /**\n+     * Assert celebrity detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyCelebrities() throws Exception {\n+        InputStream bezosJpeg = getApplicationContext()\n+                .getAssets().open(\"jeff_bezos.jpg\");\n+        final Bitmap image = BitmapFactory.decodeStream(bezosJpeg);\n+\n+        // Identify the celebrity inside given image and assert non-null result.\n+        IdentifyCelebritiesResult result = predictions.identifyCelebrities(image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert that Jeff Bezos is detected\n+        List<CelebrityDetails> celebs = result.getCelebrities();\n+        assertNotNull(celebs);\n+        assertFalse(celebs.isEmpty());\n+        assertTrue(celebs.stream().anyMatch(celeb -> \"Jeff Bezos\".equals(celeb.getCelebrity().getName())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NjM1Mg==", "bodyText": "I forget, do we have a version that doesn't require IdentifyOptions.defaults() as an arg? If so, you can probably wrap and keep this statement on the one line, L92.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414156352", "createdAt": "2020-04-23T22:07:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyLabelsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.Label;\n+import com.amplifyframework.predictions.models.LabelType;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyLabelsResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * label detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyLabelsTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+    }\n+\n+    /**\n+     * Assert label detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyLabels() throws Exception {\n+        InputStream bezosJpeg = getApplicationContext()\n+                .getAssets().open(\"jeff_bezos.jpg\");\n+        final Bitmap image = BitmapFactory.decodeStream(bezosJpeg);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NjQ2Mw==", "bodyText": "haha lol", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414156463", "createdAt": "2020-04-23T22:07:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyLabelsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.Label;\n+import com.amplifyframework.predictions.models.LabelType;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyLabelsResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * label detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyLabelsTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+    }\n+\n+    /**\n+     * Assert label detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyLabels() throws Exception {\n+        InputStream bezosJpeg = getApplicationContext()\n+                .getAssets().open(\"jeff_bezos.jpg\");\n+        final Bitmap image = BitmapFactory.decodeStream(bezosJpeg);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert that Jeff's portrait doesn't flag moderation :)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NzEzMg==", "bodyText": "We have a CollectionUtils.isEmpty(...) in this project under core's utils, I believe. You could simplify these two checks into just assertFalse(CollectionUtils.isEmpty(labels)).", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414157132", "createdAt": "2020-04-23T22:09:14Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyLabelsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.Label;\n+import com.amplifyframework.predictions.models.LabelType;\n+import com.amplifyframework.predictions.options.IdentifyOptions;\n+import com.amplifyframework.predictions.result.IdentifyLabelsResult;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * label detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyLabelsTest {\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert that identify \"passes\" for blank image.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyPassesForBlankImage() throws Exception {\n+        Bitmap image = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+    }\n+\n+    /**\n+     * Assert label detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    public void testIdentifyLabels() throws Exception {\n+        InputStream bezosJpeg = getApplicationContext()\n+                .getAssets().open(\"jeff_bezos.jpg\");\n+        final Bitmap image = BitmapFactory.decodeStream(bezosJpeg);\n+\n+        // Identify the labels inside given image and assert non-null result.\n+        IdentifyLabelsResult result = predictions.identifyLabels(LabelType.ALL,\n+                image, IdentifyOptions.defaults());\n+        assertNotNull(result);\n+\n+        // Assert that Jeff's portrait doesn't flag moderation :)\n+        assertFalse(result.isUnsafeContent());\n+\n+        // Assert at least one label is detected as \"Person\"\n+        List<Label> labels = result.getLabels();\n+        assertNotNull(labels);\n+        assertFalse(labels.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1OTE2Nw==", "bodyText": "Test consideration: Since this thing is just pure transformation of objects, all in memory with no dependencies, this would be extremely easy to get 100% unit test coverage over.\n\nDesign consideration: Elsewhere, you have for example a LandmarkTypeAdapter. That's an extensible pattern, one adapter per type. Takes in a service model, outputs an Amplify model.\nIf you have that pattern established, should you expand it to the factories in this class, too?\nAmong other things, I think it will clean up the naming. For example, instead of:\nImageResultTransformers.fromRekognitionPose(someServiceResult.getIt())\n\nYou'd have something like:\nPoseTypeAdapter.fromRekognitionPose(someServiceResult.getIt())", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414159167", "createdAt": "2020-04-23T22:13:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.Landmark;\n+import com.amplifyframework.predictions.models.LandmarkType;\n+import com.amplifyframework.predictions.models.Pose;\n+\n+import com.amazonaws.services.rekognition.model.BoundingBox;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Utility class to transform Amazon service-specific\n+ * models to be compatible with AWS Amplify.\n+ */\n+public final class IdentifyResultTransformers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MTM5Ng==", "bodyText": "Does the Rekognition SDK not enum this literals, itself?\nI know we've discussed in this in prior PRs. And I did buy your argument - like, we don't need this to be an enum-to-enum map.\nI guess I'm just surprised that the code-gen'd service model doesn't give you an enum of the landmarks, itself.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414161396", "createdAt": "2020-04-23T22:18:32Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/LandmarkTypeAdapter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.LandmarkType;\n+\n+/**\n+ * Utility to convert Amazon Rekognition's entity landmark type\n+ * into Amplify-compatible data structure (i.e. {@link LandmarkType}).\n+ */\n+public final class LandmarkTypeAdapter {\n+    private LandmarkTypeAdapter() {}\n+\n+    /**\n+     * Converts the landmark type string returned by Amazon Rekognition\n+     * into a format supported by Amplify Predictions.\n+     * @param landmark Landmark type returned by Amazon Rekognition\n+     * @return Amplify's {@link LandmarkType} enum\n+     */\n+    @NonNull\n+    public static LandmarkType fromRekognition(@NonNull String landmark) {\n+        switch (landmark) {\n+            case \"eyeLeft\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NDc0NQ==", "bodyText": "Maybe a switch isn't the right mechanism.\nHaha lol if this were bash, you could jsut write:\ncase $landmark in\n    rightEye*)\n        return $RIGHT_EYE\n\nAnyway: Java.\nWhat about a regex match?\nLike:\n...\nfor (Map.Entry<String, LandmarkType> mapping : typesByLandmarkPattern().entrySet()) {\n    Pattern pattern = Pattern.compile(mapping.getKey())l\n    Matcher matcher = pattern.matcher(input);\n    if (matcher.matches()) {\n        return mapping.getValue());\n    }\n}\n\nprivate static Map<String, LandmarkType> typesByLandmarkPattern() {\n    Map<String, LandmarkType> map = new HashMap<>();\n    map.put(\"^leftEye\", LandmarkType.LEFT_EYE);\n    ...\n    return map;\n}\n\nI didn't read all of these mappings, but maybe regex is overkill and you could even do just String#startsWith(String)?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414164745", "createdAt": "2020-04-23T22:26:10Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/LandmarkTypeAdapter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.LandmarkType;\n+\n+/**\n+ * Utility to convert Amazon Rekognition's entity landmark type\n+ * into Amplify-compatible data structure (i.e. {@link LandmarkType}).\n+ */\n+public final class LandmarkTypeAdapter {\n+    private LandmarkTypeAdapter() {}\n+\n+    /**\n+     * Converts the landmark type string returned by Amazon Rekognition\n+     * into a format supported by Amplify Predictions.\n+     * @param landmark Landmark type returned by Amazon Rekognition\n+     * @return Amplify's {@link LandmarkType} enum\n+     */\n+    @NonNull\n+    public static LandmarkType fromRekognition(@NonNull String landmark) {\n+        switch (landmark) {\n+            case \"eyeLeft\":\n+            case \"leftEyeLeft\":\n+            case \"leftEyeRight\":\n+            case \"leftEyeUp\":\n+            case \"leftEyeDown\":\n+                return LandmarkType.LEFT_EYE;\n+            case \"eyeRight\":\n+            case \"rightEyeLeft\":\n+            case \"rightEyeRight\":\n+            case \"rightEyeUp\":\n+            case \"rightEyeDown\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NTkyNw==", "bodyText": "Since this is public-access, and since it has a constructor with a bunch of args, I would add class documentation to this that says something like \"This is an internal class. Don't use it.\"\nAh man actually -- if we had really had our ducks in a row, classes like this would have .internal. in their Java package names. Like com.amplifyframework.predictions.aws.internal.AWSIdentifyOperation or something? Anyway, restructuring our plugins is obviously outside the scope of this current PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414165927", "createdAt": "2020-04-23T22:28:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/operation/AWSIdentifyOperation.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.operation;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.request.AWSRekognitionRequest;\n+import com.amplifyframework.predictions.aws.service.AWSPredictionsService;\n+import com.amplifyframework.predictions.models.IdentifyAction;\n+import com.amplifyframework.predictions.models.LabelType;\n+import com.amplifyframework.predictions.operation.IdentifyOperation;\n+import com.amplifyframework.predictions.result.IdentifyResult;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ExecutorService;\n+\n+public final class AWSIdentifyOperation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjQyNg==", "bodyText": "Note to self: come back to this...", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414166426", "createdAt": "2020-04-23T22:29:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/operation/AWSIdentifyOperation.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.operation;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.predictions.PredictionsException;\n+import com.amplifyframework.predictions.aws.request.AWSRekognitionRequest;\n+import com.amplifyframework.predictions.aws.service.AWSPredictionsService;\n+import com.amplifyframework.predictions.models.IdentifyAction;\n+import com.amplifyframework.predictions.models.LabelType;\n+import com.amplifyframework.predictions.operation.IdentifyOperation;\n+import com.amplifyframework.predictions.result.IdentifyResult;\n+\n+import java.util.Objects;\n+import java.util.concurrent.ExecutorService;\n+\n+public final class AWSIdentifyOperation\n+        extends IdentifyOperation<AWSRekognitionRequest> {\n+    private final AWSPredictionsService predictionsService;\n+    private final ExecutorService executorService;\n+    private final Consumer<IdentifyResult> onSuccess;\n+    private final Consumer<PredictionsException> onError;\n+\n+    /**\n+     * Constructs an instance of {@link AWSIdentifyOperation}.\n+     * @param predictionsService instance of AWS predictions service\n+     * @param executorService async task executor service\n+     * @param actionType the type of identification action\n+     * @param request predictions identify request\n+     * @param onSuccess lambda to execute upon task completion\n+     * @param onError lambda to execute upon task failure\n+     */\n+    public AWSIdentifyOperation(\n+            @NonNull AWSPredictionsService predictionsService,\n+            @NonNull ExecutorService executorService,\n+            @NonNull IdentifyAction actionType,\n+            @NonNull AWSRekognitionRequest request,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        super(actionType, Objects.requireNonNull(request));\n+        this.predictionsService = Objects.requireNonNull(predictionsService);\n+        this.executorService = Objects.requireNonNull(executorService);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+    }\n+\n+    @Override\n+    public void start() {\n+        executorService.execute(() -> {\n+            switch (getIdentifyAction().getType()) {\n+                case DETECT_CELEBRITIES:\n+                    predictionsService.recognizeCelebrities(getRequest().getImage(), onSuccess, onError);\n+                    return;\n+                case DETECT_LABELS:\n+                    final LabelType labelType;\n+                    try {\n+                        labelType = (LabelType) getIdentifyAction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDY1Ng==", "bodyText": "To be pure, here, we should have this utility return whatever the async version returns. Here, I guess that means IdentityResult, directly.\nFirst couple of these sync conversion utilities I wrote, I was also including all of my \"API wishlist\", where I would bandage up the other sore-spots. But, that's muddling concerns.\nEither:\n\nWe should go back and address the issues in the various category behaviors (hard truth....), or\nCreate another level of test utility wrapper, haha.\n\nFor 2, I guess it'd be like:\nfinal class DreamApi {\n    private final SynchronousWrapper wrapper;\n}\nfinal class SynchronousWrapper {\n    private final SomeCategoryBehavior crapWeVendToCustomers;\n}\n\n^ I'm joking about that last identifier name, of course. But I phrased it this way to illustrate something we should be cognizant of avoiding, I suppose.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414170656", "createdAt": "2020-04-23T22:39:31Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/sync/SynchronousPredictions.java", "diffHunk": "@@ -109,6 +116,56 @@ public TranslateTextResult translateText(\n         );\n     }\n \n+    /**\n+     * Detect celebrities in given image synchronously and return the result of operation.\n+     * @param image the input image to detect celebrities from\n+     * @param options identify options\n+     * @return the result of celebrities detection\n+     * @throws PredictionsException if identify fails or times out\n+     */\n+    @NonNull\n+    public IdentifyCelebritiesResult identifyCelebrities(\n+            @NonNull Bitmap image,\n+            @NonNull IdentifyOptions options\n+    ) throws PredictionsException {\n+        return (IdentifyCelebritiesResult) Await.<IdentifyResult, PredictionsException>result(\n+            PREDICTIONS_OPERATION_TIMEOUT_MS,\n+            (onResult, onError) -> asyncDelegate.identify(\n+                    IdentifyActionType.DETECT_CELEBRITIES,\n+                    image,\n+                    options,\n+                    onResult,\n+                    onError\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Detect labels in given image synchronously and return the result of operation.\n+     * @param type the type of label to detect\n+     * @param image the input image to detect labels from\n+     * @param options identify options\n+     * @return the result of labels detection\n+     * @throws PredictionsException if identify fails or times out\n+     */\n+    @NonNull\n+    public IdentifyLabelsResult identifyLabels(\n+            @NonNull LabelType type,\n+            @NonNull Bitmap image,\n+            @NonNull IdentifyOptions options\n+    ) throws PredictionsException {\n+        return (IdentifyLabelsResult) Await.<IdentifyResult, PredictionsException>result(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MTY0Mg==", "bodyText": "rawTextLines?\nis this just the full text split on \\n? Or why is it special?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414171642", "createdAt": "2020-04-23T22:41:44Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyTextResult.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * The result of the call to identify text from an image.\n+ */\n+public final class IdentifyTextResult implements IdentifyResult {\n+    private final String fullText;\n+    private final List<String> rawLineText;\n+    private final List<IdentifiedText> words;\n+    private final List<IdentifiedText> lines;\n+\n+    private IdentifyTextResult(final Builder builder) {\n+        this.fullText = builder.getFullText();\n+        this.rawLineText = builder.getRawLineText();\n+        this.words = builder.getWords();\n+        this.lines = builder.getLines();\n+    }\n+\n+    /**\n+     * Gets the full text from the image.\n+     * @return the full text\n+     */\n+    @NonNull\n+    public String getFullText() {\n+        return fullText;\n+    }\n+\n+    /**\n+     * Gets the list of raw lines of text.\n+     * @return the raw lines of text\n+     */\n+    @NonNull\n+    public List<String> getRawLineText() {\n+        return Immutable.of(rawLineText);\n+    }\n+\n+    /**\n+     * Gets the list of identified words.\n+     * @return the identified words\n+     */\n+    @NonNull\n+    public List<IdentifiedText> getWords() {\n+        return Immutable.of(words);\n+    }\n+\n+    /**\n+     * Gets the list of identified lines.\n+     * @return the identified lines\n+     */\n+    @NonNull\n+    public List<IdentifiedText> getLines() {\n+        return Immutable.of(lines);\n+    }\n+\n+    /**\n+     * Gets a builder instance to help easily construct an\n+     * instance of text identification result.\n+     * @return an unassigned instance of builder\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder to help easily construct an instance of\n+     * {@link IdentifyTextResult}.\n+     */\n+    public static final class Builder {\n+        private String fullText;\n+        private List<String> rawLineText;\n+        private List<IdentifiedText> words;\n+        private List<IdentifiedText> lines;\n+\n+        /**\n+         * Sets the full text and return this builder.\n+         * @param fullText the full text\n+         * @return this builder instance\n+         */\n+        @NonNull\n+        public Builder fullText(@NonNull String fullText) {\n+            this.fullText = Objects.requireNonNull(fullText);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the raw lines of text and return this builder.\n+         * @param rawLineText the raw lines of text\n+         * @return this builder instance\n+         */\n+        @NonNull\n+        public Builder rawLineText(@NonNull List<String> rawLineText) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjIxNA==", "bodyText": "We have like an OperationResult, or Result, or AmplifyResult or something right? Should this extends from that?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414172214", "createdAt": "2020-04-23T22:43:04Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyResult.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+/**\n+ * Interface to group different types of results from\n+ * identify operation in Predictions category.\n+ */\n+public interface IdentifyResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MzA2Mg==", "bodyText": "Somewhere in the chain, make sure you Immutable.of( this before you cache it into the IdentityLabelsResult\u2019s instance variable.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414173062", "createdAt": "2020-04-23T22:45:11Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyLabelsResult.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.Label;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Holds data about all of the objects and scenes that were\n+ * detected and labeled in an image or a video.\n+ */\n+public final class IdentifyLabelsResult implements IdentifyResult {\n+    private final List<Label> labels;\n+    private final boolean unsafeContent;\n+\n+    private IdentifyLabelsResult(final Builder builder) {\n+        this.labels = builder.getLabels();\n+        this.unsafeContent = builder.getUnsafeContent();\n+    }\n+\n+    /**\n+     * Gets the list of labels.\n+     * @return the labels\n+     */\n+    @NonNull\n+    public List<Label> getLabels() {\n+        return Immutable.of(labels);\n+    }\n+\n+    /**\n+     * Returns true if it is unsafe content.\n+     * @return true if it is unsafe content\n+     */\n+    public boolean isUnsafeContent() {\n+        return unsafeContent;\n+    }\n+\n+    /**\n+     * Gets a builder to help easily construct an instance\n+     * of label identification result.\n+     * @return an unassigned builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder to help easily construct an instance of\n+     * {@link IdentifyLabelsResult}.\n+     */\n+    public static final class Builder {\n+        private List<Label> labels;\n+        private boolean unsafeContent;\n+\n+        private Builder() {\n+            this.labels = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MzUyOA==", "bodyText": "Probably best to order your factory methods right after your constructors, since they serve a similar purpose.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414173528", "createdAt": "2020-04-23T22:46:10Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyEntityMatchesResult.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.EntityMatch;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * The result of the call to identify similarity of one image entity\n+ * to another from a different image.\n+ */\n+public final class IdentifyEntityMatchesResult implements IdentifyResult {\n+    private final List<EntityMatch> entityMatches;\n+\n+    private IdentifyEntityMatchesResult(List<EntityMatch> entityMatches) {\n+        this.entityMatches = entityMatches;\n+    }\n+\n+    /**\n+     * Gets the list of detected entity matches.\n+     * @return the list of entity matches\n+     */\n+    @NonNull\n+    public List<EntityMatch> getEntityMatches() {\n+        return Immutable.of(entityMatches);\n+    }\n+\n+    /**\n+     * Constructs a new instance of {@link IdentifyEntityMatchesResult} from\n+     * the given list of entity matches.\n+     * @param entityMatches A list of entity matches\n+     * @return The result instance containing the given list of entity matches\n+     */\n+    @NonNull\n+    public static IdentifyEntityMatchesResult fromEntities(@NonNull List<EntityMatch> entityMatches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MzY0MA==", "bodyText": "ordering - move after constructor", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414173640", "createdAt": "2020-04-23T22:46:24Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyEntitiesResult.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.EntityDetails;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * The result of the call to identify entities from an image.\n+ */\n+public final class IdentifyEntitiesResult implements IdentifyResult {\n+    private final List<EntityDetails> entities;\n+\n+    private IdentifyEntitiesResult(List<EntityDetails> faces) {\n+        this.entities = faces;\n+    }\n+\n+    /**\n+     * Gets the list of detected entities and other details.\n+     * @return the list of entities\n+     */\n+    @NonNull\n+    public List<EntityDetails> getEntities() {\n+        return Immutable.of(entities);\n+    }\n+\n+    /**\n+     * Constructs a new instance of {@link IdentifyEntitiesResult} from\n+     * the given list of entities.\n+     * @param entities A list of detected entities\n+     * @return The result instance containing the given list of detected entities\n+     */\n+    @NonNull\n+    public static IdentifyEntitiesResult fromFaces(@NonNull List<EntityDetails> entities) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NDgwMQ==", "bodyText": "I think you want to do this before you exit the builder. You're storing a mutable copy in built object, which means that it would be possible for someone to do like:\nList<Foo> mutableFoo = new ArrayList<>();\nIdentityDocumentTextResult.builder()\n    .foo(mutableFoo)\n     .build();\nmutableFoo.clearAll();\n\nNow at this point, your result object would have changed, too, since its contained object has changed.\nThe object returned by getWords() is not-changeable, but that's of little concern, at that point.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414174801", "createdAt": "2020-04-23T22:49:18Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/result/IdentifyDocumentTextResult.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.result;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.predictions.models.Selection;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * The result of a call to identify text in an image of a document.\n+ */\n+public final class IdentifyDocumentTextResult implements IdentifyResult {\n+    private final String fullText;\n+    private final List<String> rawLineText;\n+    private final List<IdentifiedText> words;\n+    private final List<IdentifiedText> lines;\n+    private final List<Selection> selections;\n+    private final List<Table> tables;\n+    private final List<BoundedKeyValue> keyValues;\n+\n+    private IdentifyDocumentTextResult(final Builder builder) {\n+        this.fullText = builder.getFullText();\n+        this.rawLineText = builder.getRawLineText();\n+        this.words = builder.getWords();\n+        this.lines = builder.getLines();\n+        this.selections = builder.getSelections();\n+        this.tables = builder.getTables();\n+        this.keyValues = builder.getKeyValues();\n+    }\n+\n+    /**\n+     * Gets the full text from the image.\n+     * @return the full text\n+     */\n+    @NonNull\n+    public String getFullText() {\n+        return fullText;\n+    }\n+\n+    /**\n+     * Gets the list of raw lines of text.\n+     * @return the raw lines of text\n+     */\n+    @NonNull\n+    public List<String> getRawLineText() {\n+        return Immutable.of(rawLineText);\n+    }\n+\n+    /**\n+     * Gets the list of identified words.\n+     * @return the identified words\n+     */\n+    @NonNull\n+    public List<IdentifiedText> getWords() {\n+        return Immutable.of(words);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NTc3OA==", "bodyText": "getRowCount() getRowSize() ? When I see getRows(), I expect it to return a collection of some kind.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414175778", "createdAt": "2020-04-23T22:51:33Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/Table.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of 2-D table in given dimensions.\n+ * A table can be detected from an image of a document\n+ * and be organized into this data type.\n+ */\n+public final class Table {\n+    private final int rows;\n+    private final int columns;\n+    private final List<Cell> cells;\n+\n+    private Table(final Builder builder) {\n+        this.rows = builder.getRows();\n+        this.columns = builder.getColumns();\n+        this.cells = builder.getCells();\n+    }\n+\n+    /**\n+     * Gets the row count.\n+     * @return the row count\n+     * */\n+    public int getRows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NjA0NQ==", "bodyText": "Same deal -- also particularly since getCells() returns a collection. The names would lead you to think all three have the same return type, currently.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414176045", "createdAt": "2020-04-23T22:52:11Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/Table.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A representation of 2-D table in given dimensions.\n+ * A table can be detected from an image of a document\n+ * and be organized into this data type.\n+ */\n+public final class Table {\n+    private final int rows;\n+    private final int columns;\n+    private final List<Cell> cells;\n+\n+    private Table(final Builder builder) {\n+        this.rows = builder.getRows();\n+        this.columns = builder.getColumns();\n+        this.cells = builder.getCells();\n+    }\n+\n+    /**\n+     * Gets the row count.\n+     * @return the row count\n+     * */\n+    public int getRows() {\n+        return rows;\n+    }\n+\n+    /**\n+     * Gets the column count.\n+     * @return the column count\n+     */\n+    public int getColumns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3NjUzMw==", "bodyText": "What's the use case for doing this after object construction?\nAlso, if a selection isn't selected -- wouldn't one just not create the selection to begin with?\nIn other words, if I have like aSet<Selection>, I would expect that to contain only active selections.\nMaybe there is a use-case here? In which case, should this be named like isActive()? With a bit of Javadoc to guide the user on when/why they might care / expect this to be true/false?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414176533", "createdAt": "2020-04-23T22:53:23Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/Selection.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents a selection from an image. It contains\n+ * the bounding geometry of a selection and an\n+ * indicator to regard its selection state.\n+ *\n+ * Defaults to deselected state until explicitly selected.\n+ */\n+public final class Selection {\n+    private final RectF box;\n+    private final Polygon polygon;\n+\n+    private boolean selected;\n+\n+    private Selection(RectF box, Polygon polygon) {\n+        this.box = box;\n+        this.polygon = polygon;\n+    }\n+\n+    /**\n+     * Constructs an instance of {@link Selection} using\n+     * rectangular boundary.\n+     * @param box the bounding box\n+     * @return {@link Selection} instance containing a box\n+     */\n+    public static Selection fromBox(@NonNull RectF box) {\n+        return new Selection(Objects.requireNonNull(box), null);\n+    }\n+\n+    /**\n+     * Constructs an instance of {@link Selection} using\n+     * polygonal boundary.\n+     * @param polygon the bounding polygon\n+     * @return {@link Selection} instance containing a polygon\n+     */\n+    public static Selection fromPolygon(@NonNull Polygon polygon) {\n+        return new Selection(null, Objects.requireNonNull(polygon));\n+    }\n+\n+    /**\n+     * Gets the rectangular boundary. It fetches the\n+     * box portion of registered target boundary.\n+     * @return the bounding box\n+     */\n+    @Nullable\n+    public RectF getBox() {\n+        return box;\n+    }\n+\n+    /**\n+     * Gets the polygonal boundary. It fetches the\n+     * polygon portion of registered target boundary.\n+     * @return the polygon\n+     */\n+    @Nullable\n+    public Polygon getPolygon() {\n+        return polygon;\n+    }\n+\n+    /**\n+     * Returns true if this selection is selected.\n+     * @return true if this selection is selected\n+     */\n+    public boolean isSelected() {\n+        return selected;\n+    }\n+\n+    /**\n+     * Activates the selection flag.\n+     */\n+    public void select() {\n+        this.selected = true;\n+    }\n+\n+    /**\n+     * Deactivates the selection flag.\n+     */\n+    public void deselect() {\n+        this.selected = false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3ODYwNg==", "bodyText": "Some of these are intuitive. Not to say that they couldn't all benefit from technical specificity.\nHowever, these ones, to me, are not intuitive.\n\nNOSE_CREST\nMEDIAN_LINE\nFACE_CONTOUR\n\nI think my nose crest is the portion of my face's median line that runs up-down in middle of my nose. But, maybe not?\nFace contour - like, is my face fat?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414178606", "createdAt": "2020-04-23T22:58:15Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/LandmarkType.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+/**\n+ * Types of detectable entity landmarks.\n+ */\n+@SuppressWarnings(\"JavadocVariable\")\n+public enum LandmarkType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3ODk0NA==", "bodyText": "Should these enum values be SIMPLE and MODERATION?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414178944", "createdAt": "2020-04-23T22:59:04Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/LabelType.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Specifies the type of label detection to perform.\n+ */\n+public enum LabelType implements IdentifyAction {\n+    /**\n+     * Simple label provides information about a single object\n+     * or scenery found in an image.\n+     */\n+    LABELS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3OTQ1OQ==", "bodyText": "Like, page of a broader document? Or...? Huh.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414179459", "createdAt": "2020-04-23T23:00:28Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/IdentifiedText.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the graphical text that is identified\n+ * from inside an image.\n+ */\n+public final class IdentifiedText extends ImageFeature<String> {\n+\n+    private final int page;\n+\n+    private IdentifiedText(Builder builder) {\n+        super(builder);\n+        this.page = builder.getPage();\n+    }\n+\n+    @Override\n+    @NonNull\n+    public String getTypeAlias() {\n+        return FeatureType.IDENTIFIED_TEXT.getAlias();\n+    }\n+\n+    /**\n+     * Gets the identified text. This is the same\n+     * text as the associated feature.\n+     * @return the identified text\n+     */\n+    @NonNull\n+    public String getText() {\n+        return getValue();\n+    }\n+\n+    /**\n+     * Gets the page value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDE4MA==", "bodyText": "When/why would the case differ? Can't we just tighten up the usage is always the same, and then do a literal equals(...) check? This is a slippery slope", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414180180", "createdAt": "2020-04-23T23:02:06Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/Feature.java", "diffHunk": "@@ -85,7 +85,7 @@ public int compareTo(@Nullable Feature<T> other) {\n         if (other == null) {\n             return -1;\n         }\n-        int typeDiff = this.getType().compareToIgnoreCase(other.getType());\n+        int typeDiff = this.getTypeAlias().compareToIgnoreCase(other.getTypeAlias());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MDg0Mg==", "bodyText": "In this builder, you permit a number of @Nullable options. What is their purpose? If a user sets a field to null, does it clear it? And mean \"I don't know\"? Or, what are the implications of leaving these things unspecified? When can an EntityDetails have different collections of these various properties?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414180842", "createdAt": "2020-04-23T23:03:48Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/EntityDetails.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import android.graphics.RectF;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * Holds the entity detection results\n+ * for the predictions category.\n+ */\n+public final class EntityDetails {\n+    private final RectF box;\n+    private final Polygon polygon;\n+    private final AgeRange ageRange;\n+    private final Pose pose;\n+    private final Gender gender;\n+    private final List<Landmark> landmarks;\n+    private final List<Emotion> emotions;\n+    private final List<BinaryFeature> features;\n+\n+    private EntityDetails(final Builder builder) {\n+        this.box = builder.getBox();\n+        this.polygon = builder.getPolygon();\n+        this.ageRange = builder.getAgeRange();\n+        this.pose = builder.getPose();\n+        this.gender = builder.getGender();\n+        this.landmarks = builder.getLandmarks();\n+        this.emotions = builder.getEmotions();\n+        this.features = builder.getValues();\n+    }\n+\n+    /**\n+     * Gets the rectangular target boundary if available.\n+     * @return the rectangular boundary\n+     */\n+    @Nullable\n+    public RectF getBox() {\n+        return box;\n+    }\n+\n+    /**\n+     * Gets a more finely defined target boundary if available.\n+     * @return the polygonal boundary\n+     */\n+    @Nullable\n+    public Polygon getPolygon() {\n+        return polygon;\n+    }\n+\n+    /**\n+     * Gets the range of possible ages.\n+     * @return the range ages\n+     */\n+    @Nullable\n+    public AgeRange getAgeRange() {\n+        return ageRange;\n+    }\n+\n+    /**\n+     * Gets the detected pose.\n+     * @return the pose feature\n+     */\n+    @Nullable\n+    public Pose getPose() {\n+        return pose;\n+    }\n+\n+    /**\n+     * Gets the detected gender.\n+     * @return the gender type feature\n+     */\n+    @Nullable\n+    public Gender getGender() {\n+        return gender;\n+    }\n+\n+    /**\n+     * Gets the list of detected landmarks.\n+     * @return the list of landmarks\n+     */\n+    @NonNull\n+    public List<Landmark> getLandmarks() {\n+        return Immutable.of(landmarks);\n+    }\n+\n+    /**\n+     * Gets the list of detected emotions.\n+     * @return the list of emotions\n+     */\n+    @NonNull\n+    public List<Emotion> getEmotions() {\n+        return Immutable.of(emotions);\n+    }\n+\n+    /**\n+     * Gets the list of boolean features.\n+     * @return the list of features\n+     */\n+    @NonNull\n+    public List<BinaryFeature> getValues() {\n+        return Immutable.of(features);\n+    }\n+\n+    /**\n+     * Gets a builder for entity detection result.\n+     * @return a new builder\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder for {@link EntityDetails}.\n+     */\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MTczNw==", "bodyText": "Wait I forget, why not just return FeatureType form this interface? The String discards your constraint set.", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414181737", "createdAt": "2020-04-23T23:06:12Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/Celebrity.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Holds the celebrity detection results\n+ * for the predictions category.\n+ */\n+public final class Celebrity extends Feature<String> {\n+\n+    private Celebrity(final Builder builder) {\n+        super(builder);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public String getTypeAlias() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjE2NQ==", "bodyText": "I think this is guaranteed, since you check them on the way in, no? However, Objects.requireNotNull(getValue()) do you need that?", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414182165", "createdAt": "2020-04-23T23:07:20Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/predictions/models/BoundedKeyValue.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.models;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.Pair;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Holds the key-value detection results\n+ * for the predictions category.\n+ */\n+public final class BoundedKeyValue extends ImageFeature<Pair<String, String>> {\n+\n+    private BoundedKeyValue(final Builder builder) {\n+        super(builder);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public String getTypeAlias() {\n+        return FeatureType.BOUNDED_KEY_VALUE.getAlias();\n+    }\n+\n+    /**\n+     * Gets the detected key.\n+     * @return the key\n+     */\n+    @NonNull\n+    @SuppressWarnings(\"ConstantConditions\") // Checked for non-null in builder\n+    public String getKey() {\n+        return getValue().first;\n+    }\n+\n+    /**\n+     * Gets the detected value.\n+     * @return the value\n+     */\n+    @NonNull\n+    @SuppressWarnings(\"ConstantConditions\") // Checked for non-null in builder\n+    public String getKeyValue() {\n+        return getValue().second;\n+    }\n+\n+    /**\n+     * Gets a builder to help easily construct\n+     * a bounded key-result object.\n+     * @return an unassigned builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder for {@link BoundedKeyValue}.\n+     */\n+    public static final class Builder\n+            extends ImageFeature.Builder<Builder, BoundedKeyValue, Pair<String, String>> {\n+        /**\n+         * Sets the key-value pair and return this builder.\n+         * @param key the key\n+         * @param value the value\n+         * @return this builder instance\n+         */\n+        @NonNull\n+        public Builder keyValue(@NonNull String key, @NonNull String value) {\n+            Objects.requireNonNull(key);\n+            Objects.requireNonNull(value);\n+            return value(new Pair<>(key, value));\n+        }\n+\n+        /**\n+         * Constructs a new instance of {@link BoundedKeyValue} using\n+         * the values assigned to this builder instance.\n+         * @return an instance of {@link BoundedKeyValue}\n+         */\n+        @NonNull\n+        public BoundedKeyValue build() {\n+            Objects.requireNonNull(getValue().first);\n+            Objects.requireNonNull(getValue().second);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9594674e095e301781fdbd3ae207e4f7ce1e0a2d"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5673bf6d5f6cc0ec4d3afe85f671a1655e8e05d2", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5673bf6d5f6cc0ec4d3afe85f671a1655e8e05d2", "committedDate": "2020-04-24T19:14:01Z", "message": "Apply suggestions from Jameson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/795a57f01fdea81c295fb742b40d97f3e5a37f7a", "committedDate": "2020-04-24T20:13:23Z", "message": "Typo fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjUyNzU2", "url": "https://github.com/aws-amplify/amplify-android/pull/394#pullrequestreview-400252756", "createdAt": "2020-04-24T20:33:46Z", "commit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDozMzo0NlrOGLoOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDozMzo0NlrOGLoOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NjQ4Mw==", "bodyText": "Ahhh there she is! Nice", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414846483", "createdAt": "2020-04-24T20:33:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/EntityTypeAdapter.java", "diffHunk": "@@ -37,24 +35,26 @@ private EntityTypeAdapter() {}\n      */\n     @NonNull\n     public static EntityType fromComprehend(@NonNull String entity) {\n-        switch (entity.toLowerCase(Locale.US)) {\n-            case \"person\":\n+        com.amazonaws.services.comprehend.model.EntityType type =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjUyOTAy", "url": "https://github.com/aws-amplify/amplify-android/pull/394#pullrequestreview-400252902", "createdAt": "2020-04-24T20:34:01Z", "commit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDozNDowMVrOGLoOiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDozNDowMVrOGLoOiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NjYwMA==", "bodyText": "Cool!", "url": "https://github.com/aws-amplify/amplify-android/pull/394#discussion_r414846600", "createdAt": "2020-04-24T20:34:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/LandmarkTypeAdapter.java", "diffHunk": "@@ -34,46 +34,48 @@ private LandmarkTypeAdapter() {}\n      */\n     @NonNull\n     public static LandmarkType fromRekognition(@NonNull String landmark) {\n-        switch (landmark) {\n-            case \"eyeLeft\":\n-            case \"leftEyeLeft\":\n-            case \"leftEyeRight\":\n-            case \"leftEyeUp\":\n-            case \"leftEyeDown\":\n+        com.amazonaws.services.rekognition.model.LandmarkType type =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjcyNjE1", "url": "https://github.com/aws-amplify/amplify-android/pull/394#pullrequestreview-400272615", "createdAt": "2020-04-24T21:10:21Z", "commit": {"oid": "795a57f01fdea81c295fb742b40d97f3e5a37f7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2715, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}